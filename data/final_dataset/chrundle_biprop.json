{"home.repos.pwc.inspect_result.chrundle_biprop.None.main.main": [[38, 54], ["print", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "torch.autograd.set_detect_anomaly", "main.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "# Set to make training deterministic for seed", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "args", ".", "distributed", "=", "False", "\n", "\n", "# Simply call main_worker function", "\n", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.main_worker": [[56, 321], ["main.get_trainer", "main.get_model", "main.set_gpu", "main.get_optimizer", "main.get_dataset", "main.get_directories", "print", "torch.utils.tensorboard.SummaryWriter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "time.time", "utils.net_utils.save_checkpoint", "range", "main.write_result_to_csv", "print", "main.pretrained", "utils.schedulers.get_policy", "torch.CrossEntropyLoss().cuda", "utils.net_utils.LabelSmoothing", "main.resume", "print", "validate", "print", "lr_policy", "modifier", "utils.net_utils.get_lr", "time.time", "train", "utils.logging.AverageMeter.update", "time.time", "validate", "utils.logging.AverageMeter.update", "max", "max", "max", "max", "utils.logging.AverageMeter.update", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "main.global_prune_rate", "set_gpu.state_dict", "get_optimizer.state_dict", "SystemExit", "utils.net_utils.save_checkpoint", "utils.net_utils.save_checkpoint", "set_gpu.named_modules", "torch.utils.tensorboard.SummaryWriter.add_scalar", "open", "pickle.dump", "torch.CrossEntropyLoss", "print", "print", "print", "isinstance", "time.time", "time.time", "set_gpu.state_dict", "get_optimizer.state_dict", "set_gpu.state_dict", "get_optimizer.state_dict", "time.time", "range", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_trainer", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_model", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.set_gpu", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_optimizer", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_dataset", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_directories", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.write_result_to_csv", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.pretrained", "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.get_policy", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.resume", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.modifier", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_lr", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.None.main.global_prune_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "None", "\n", "train", ",", "validate", ",", "modifier", "=", "get_trainer", "(", "args", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# create model and optimizer", "\n", "", "model", "=", "get_model", "(", "args", ")", "\n", "model", "=", "set_gpu", "(", "args", ",", "model", ")", "\n", "#print(list(model.parameters()))", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "pretrained", "(", "args", ",", "model", ")", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "data", ",", "train_augmentation", "=", "get_dataset", "(", "args", ")", "\n", "lr_policy", "=", "get_policy", "(", "args", ".", "lr_policy", ")", "(", "optimizer", ",", "args", ")", "\n", "\n", "if", "args", ".", "label_smoothing", "is", "None", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "LabelSmoothing", "(", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "acc1", "=", "0.0", "\n", "acc5", "=", "0.0", "\n", "best_acc1", "=", "0.0", "\n", "best_acc5", "=", "0.0", "\n", "best_train_acc1", "=", "0.0", "\n", "best_train_acc5", "=", "0.0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "best_acc1", "=", "resume", "(", "args", ",", "model", ",", "optimizer", ")", "\n", "print", "(", "\"ARGS.RESUME\"", ")", "\n", "\n", "# Data loading code", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "acc1", ",", "acc5", "=", "validate", "(", "\n", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", "=", "None", ",", "epoch", "=", "args", ".", "start_epoch", "\n", ")", "\n", "print", "(", "\"ARGS.EVALUATE\"", ")", "\n", "\n", "return", "\n", "\n", "# Set up directories", "\n", "", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "=", "get_directories", "(", "args", ")", "\n", "args", ".", "ckpt_base_dir", "=", "ckpt_base_dir", "\n", "\n", "print", "(", "\"RUN DIR: \"", ",", "run_base_dir", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_base_dir", ")", "\n", "epoch_time", "=", "AverageMeter", "(", "\"epoch_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "validation_time", "=", "AverageMeter", "(", "\"validation_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "train_time", "=", "AverageMeter", "(", "\"train_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "progress_overall", "=", "ProgressMeter", "(", "\n", "1", ",", "[", "epoch_time", ",", "validation_time", ",", "train_time", "]", ",", "prefix", "=", "\"Overall Timing\"", "\n", ")", "\n", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "args", ".", "start_epoch", "=", "args", ".", "start_epoch", "or", "0", "\n", "acc1", "=", "None", "\n", "\n", "# Save the initial state", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", "if", "acc1", "else", "\"Not evaluated\"", ",", "\n", "\"conv_type\"", ":", "args", ".", "conv_type", ",", "\n", "\"prune_rate\"", ":", "args", ".", "prune_rate", ",", "\n", "\"train_augmentation\"", ":", "train_augmentation", ",", "\n", "\"use_augmix\"", ":", "args", ".", "augmix", ",", "\n", "\"jsd\"", ":", "args", ".", "jsd", ",", "\n", "\"augmix_mixture_width\"", ":", "args", ".", "mixture_width", ",", "\n", "\"augmix_mixture_depth\"", ":", "args", ".", "mixture_depth", ",", "\n", "\"augmix_severity\"", ":", "args", ".", "aug_severity", ",", "\n", "\"use_gaussian_aug\"", ":", "args", ".", "gaussian_aug", ",", "\n", "\"p_clean\"", ":", "args", ".", "p_clean", ",", "\n", "\"std_gauss\"", ":", "args", ".", "std_gauss", ",", "\n", "}", ",", "\n", "False", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"initial.state\"", ",", "\n", "save", "=", "False", ",", "\n", ")", "\n", "\n", "# Set final_prune_rate for gradually increasing pruning rate in global pruning", "\n", "final_prune_rate", "=", "args", ".", "prune_rate", "\n", "\n", "# Start training", "\n", "# torch.cuda.empty_cache()", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "# If using global pruning, gradually increase pruning rate to avoid layer collapse", "\n", "        ", "if", "args", ".", "conv_type", "==", "\"GlobalSubnetConv\"", "and", "epoch", "<", "args", ".", "prune_rate_epoch", ":", "\n", "          ", "if", "args", ".", "prune_rate", "<=", "0.5", ":", "\n", "             ", "prune_decay", "=", "(", "1", "-", "(", "epoch", "/", "args", ".", "prune_rate_epoch", ")", ")", "**", "3", "\n", "curr_prune_rate", "=", "(", "1", "-", "final_prune_rate", ")", "+", "(", "(", "0.5", "-", "(", "1", "-", "final_prune_rate", ")", ")", "*", "prune_decay", ")", "\n", "args", ".", "prune_rate", "=", "(", "1", "-", "curr_prune_rate", ")", "\n", "print", "(", "\"args.prune_rate = \"", ",", "args", ".", "prune_rate", ")", "\n", "", "", "elif", "args", ".", "conv_type", "==", "\"GlobalSubnetConv\"", "and", "epoch", "==", "args", ".", "prune_rate_epoch", ":", "\n", "          ", "args", ".", "prune_rate", "=", "final_prune_rate", "\n", "print", "(", "\"args.prune_rate = \"", ",", "args", ".", "prune_rate", ")", "\n", "\n", "\n", "", "lr_policy", "(", "epoch", ",", "iteration", "=", "None", ")", "\n", "modifier", "(", "args", ",", "epoch", ",", "model", ")", "\n", "\n", "cur_lr", "=", "get_lr", "(", "optimizer", ")", "\n", "# torch.nn.utils.clip_grad_value_(model.parameters(),2)", "\n", "\n", "# train for one epoch", "\n", "start_train", "=", "time", ".", "time", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "\n", "data", ".", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", "=", "writer", "\n", ")", "\n", "train_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_train", ")", "/", "60", ")", "\n", "\n", "# evaluate on validation set", "\n", "start_validation", "=", "time", ".", "time", "(", ")", "\n", "acc1", ",", "acc5", "=", "validate", "(", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", "\n", "validation_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_validation", ")", "/", "60", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "best_acc5", "=", "max", "(", "acc5", ",", "best_acc5", ")", "\n", "best_train_acc1", "=", "max", "(", "train_acc1", ",", "best_train_acc1", ")", "\n", "best_train_acc5", "=", "max", "(", "train_acc5", ",", "best_train_acc5", ")", "\n", "\n", "if", "best_acc1", "<", "2", "and", "epoch", ">", "1", ":", "\n", "           ", "raise", "SystemExit", "(", "\"Terminating early: Network is not learning\"", ")", "\n", "\n", "", "save", "=", "(", "(", "epoch", "%", "args", ".", "save_every", ")", "==", "0", ")", "and", "args", ".", "save_every", ">", "0", "\n", "if", "is_best", "or", "save", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "            ", "if", "is_best", ":", "\n", "                ", "print", "(", "f\"==> New best {best_acc1}, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", ",", "\n", "\"curr_acc5\"", ":", "acc5", ",", "\n", "\"conv_type\"", ":", "args", ".", "conv_type", ",", "\n", "\"prune_rate\"", ":", "args", ".", "prune_rate", ",", "\n", "\"train_augmentation\"", ":", "train_augmentation", ",", "\n", "\"use_augmix\"", ":", "args", ".", "augmix", ",", "\n", "\"jsd\"", ":", "args", ".", "jsd", ",", "\n", "\"augmix_mixture_width\"", ":", "args", ".", "mixture_width", ",", "\n", "\"augmix_mixture_depth\"", ":", "args", ".", "mixture_depth", ",", "\n", "\"augmix_severity\"", ":", "args", ".", "aug_severity", ",", "\n", "\"use_gaussian_aug\"", ":", "args", ".", "gaussian_aug", ",", "\n", "\"p_clean\"", ":", "args", ".", "p_clean", ",", "\n", "\"std_gauss\"", ":", "args", ".", "std_gauss", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_most_recent.state\"", ",", "\n", "save", "=", "save", ",", "\n", ")", "\n", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", ",", "\n", "\"curr_acc5\"", ":", "acc5", ",", "\n", "\"conv_type\"", ":", "args", ".", "conv_type", ",", "\n", "\"prune_rate\"", ":", "args", ".", "prune_rate", ",", "\n", "\"train_augmentation\"", ":", "train_augmentation", ",", "\n", "\"use_augmix\"", ":", "args", ".", "augmix", ",", "\n", "\"jsd\"", ":", "args", ".", "jsd", ",", "\n", "\"augmix_mixture_width\"", ":", "args", ".", "mixture_width", ",", "\n", "\"augmix_mixture_depth\"", ":", "args", ".", "mixture_depth", ",", "\n", "\"augmix_severity\"", ":", "args", ".", "aug_severity", ",", "\n", "\"use_gaussian_aug\"", ":", "args", ".", "gaussian_aug", ",", "\n", "\"p_clean\"", ":", "args", ".", "p_clean", ",", "\n", "\"std_gauss\"", ":", "args", ".", "std_gauss", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_{epoch}.state\"", ",", "\n", "save", "=", "save", ",", "\n", ")", "\n", "#filename=ckpt_base_dir / f\"epoch_{epoch}.state\",", "\n", "\n", "", "epoch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end_epoch", ")", "/", "60", ")", "\n", "progress_overall", ".", "display", "(", "epoch", ")", "\n", "progress_overall", ".", "write_to_tensorboard", "(", "\n", "writer", ",", "prefix", "=", "\"diagnostics\"", ",", "global_step", "=", "epoch", "\n", ")", "\n", "\n", "if", "args", ".", "conv_type", "==", "\"SampleSubnetConv\"", ":", "\n", "            ", "count", "=", "0", "\n", "sum_pr", "=", "0.0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "SampleSubnetConv", ")", ":", "\n", "# avg pr across 10 samples", "\n", "                    ", "pr", "=", "0.0", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                        ", "pr", "+=", "(", "\n", "(", "torch", ".", "rand_like", "(", "m", ".", "clamped_scores", ")", ">=", "m", ".", "clamped_scores", ")", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "", "pr", "/=", "10.0", "\n", "writer", ".", "add_scalar", "(", "\"pr/{}\"", ".", "format", "(", "n", ")", ",", "pr", ",", "epoch", ")", "\n", "sum_pr", "+=", "pr", "\n", "count", "+=", "1", "\n", "\n", "", "", "args", ".", "prune_rate", "=", "sum_pr", "/", "count", "\n", "writer", ".", "add_scalar", "(", "\"pr/average\"", ",", "args", ".", "prune_rate", ",", "epoch", ")", "\n", "\n", "", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "#print(\"EPOCH TIME: \", end_epoch-start_train)", "\n", "#torch.cuda.empty_cache()", "\n", "\n", "# Finalize prune rate for globally pruned networks", "\n", "", "if", "args", ".", "conv_type", "==", "\"GlobalSubnetConv\"", ":", "\n", "      ", "global_pr", ",", "prune_dict", "=", "global_prune_rate", "(", "model", ",", "args", ")", "\n", "# Save prune rate dictionary to file in checkpoint directory", "\n", "dict_filename", "=", "f\"{ckpt_base_dir}/global_prune_rate_dictionary.pkl\"", "\n", "with", "open", "(", "dict_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "prune_dict", ",", "f", ")", "\n", "", "", "else", ":", "\n", "# For layerwise pruning, global prune rate is layer prune rate", "\n", "      ", "global_pr", "=", "args", ".", "prune_rate", "\n", "\n", "#print(\"BEST ACC 1: \", best_acc1)", "\n", "", "write_result_to_csv", "(", "\n", "best_acc1", "=", "best_acc1", ",", "\n", "best_acc5", "=", "best_acc5", ",", "\n", "best_train_acc1", "=", "best_train_acc1", ",", "\n", "best_train_acc5", "=", "best_train_acc5", ",", "\n", "prune_rate", "=", "args", ".", "prune_rate", ",", "\n", "curr_acc1", "=", "acc1", ",", "\n", "curr_acc5", "=", "acc5", ",", "\n", "base_config", "=", "args", ".", "config", ",", "\n", "seed", "=", "args", ".", "seed", ",", "\n", "name", "=", "args", ".", "name", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "learn_bn", "=", "args", ".", "learn_batchnorm", ",", "\n", "tune_bn", "=", "args", ".", "tune_batchnorm", ",", "\n", "bias_only", "=", "args", ".", "bn_bias_only", ",", "\n", "run_base_dir", "=", "run_base_dir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.get_trainer": [[324, 329], ["print", "importlib.import_module", "args.args"], "function", ["None"], ["", "def", "get_trainer", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Using trainer from trainers.{args.trainer}\"", ")", "\n", "trainer", "=", "importlib", ".", "import_module", "(", "f\"trainers.{args.trainer}\"", ")", "\n", "\n", "return", "trainer", ".", "train", ",", "trainer", ".", "validate", ",", "trainer", ".", "modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.set_gpu": [[331, 351], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "args.args"], "function", ["None"], ["", "def", "set_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CPU-only experiments currently unsupported\"", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "multigpu", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "print", "(", "f\"=> Parallelizing on {args.multigpu} gpus\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "multigpu", "[", "0", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "multigpu", "[", "0", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "multigpu", ")", ".", "cuda", "(", "\n", "args", ".", "multigpu", "[", "0", "]", "\n", ")", "\n", "", "if", "args", ".", "seed", "is", "None", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.resume": [[353, 373], ["os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print", "print", "args.args"], "function", ["None"], ["", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "print", "(", "f\"=> Loading checkpoint '{args.resume}'\"", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "f\"cuda:{args.multigpu[0]}\"", ")", "\n", "if", "args", ".", "start_epoch", "is", "None", ":", "\n", "            ", "print", "(", "f\"=> Setting new start epoch at {checkpoint['epoch']}\"", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "", "best_acc1", "=", "checkpoint", "[", "\"best_acc1\"", "]", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "print", "(", "f\"=> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "best_acc1", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"=> No checkpoint found at '{args.resume}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.pretrained": [[375, 401], ["os.path.isfile", "model.named_modules", "print", "model.state_dict", "pretrained.items", "model.state_dict.update", "model.load_state_dict", "print", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "m.set_subnet", "print", "pretrained.items", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "v.size", "model_state_dict[].size", "v.size", "model_state_dict[].size", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.set_subnet"], ["", "", "def", "pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "pretrained", "=", "torch", ".", "load", "(", "\n", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "multigpu", "[", "0", "]", ")", ")", ",", "\n", ")", "[", "\"state_dict\"", "]", "\n", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_state_dict", "or", "v", ".", "size", "(", ")", "!=", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "\"IGNORE:\"", ",", "k", ")", "\n", "", "", "pretrained", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", "\n", "if", "(", "k", "in", "model_state_dict", "and", "v", ".", "size", "(", ")", "==", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "}", "\n", "model_state_dict", ".", "update", "(", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "FixedSubnetConv", ")", ":", "\n", "            ", "m", ".", "set_subnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.get_dataset": [[403, 421], ["print", "getattr", "args.args"], "function", ["None"], ["", "", "", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "train_augmentation", "=", "'Default'", "\n", "# Check if gaussian augmenation is being used", "\n", "if", "args", ".", "gaussian_aug", ":", "\n", "# Add _gaussian to args.set", "\n", "      ", "args", ".", "set", "=", "args", ".", "set", "+", "'_gaussian'", "\n", "# Set train augmentation to gaussian for logging purposes", "\n", "train_augmentation", "=", "'Gaussian'", "\n", "# Check if augmix is being used", "\n", "", "elif", "args", ".", "augmix", ":", "\n", "# Add _augmix to args.set", "\n", "      ", "args", ".", "set", "=", "args", ".", "set", "+", "'_augmix'", "\n", "# Set train augmentation to augmix for logging purposes", "\n", "train_augmentation", "=", "'Augmix'", "\n", "", "print", "(", "f\"=> Getting {args.set} dataset\"", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "args", ".", "set", ")", "(", "args", ")", "\n", "\n", "return", "dataset", ",", "train_augmentation", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.get_model": [[423, 451], ["print", "utils.net_utils.set_model_prune_rate", "print", "utils.net_utils.bn_weight_init", "utils.net_utils.freeze_model_weights", "ValueError", "sum", "int", "model.named_parameters", "p.numel", "n.endswith", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.set_model_prune_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.bn_weight_init", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_weights"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "first_layer_dense", ":", "\n", "        ", "args", ".", "first_layer_type", "=", "\"DenseConv\"", "\n", "\n", "", "print", "(", "\"=> Creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "# applying sparsity to the network", "\n", "if", "(", "\n", "args", ".", "conv_type", "!=", "\"DenseConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"SampleSubnetConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"ContinuousSparseConv\"", "\n", ")", ":", "\n", "        ", "if", "args", ".", "prune_rate", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Need to set a positive prune rate\"", ")", "\n", "\n", "", "set_model_prune_rate", "(", "model", ",", "prune_rate", "=", "args", ".", "prune_rate", ")", "\n", "print", "(", "\n", "f\"=> Rough estimate model params {sum(int(p.numel() * (1-args.prune_rate)) for n, p in model.named_parameters() if not n.endswith('scores'))}\"", "\n", ")", "\n", "", "if", "args", ".", "bn_weight_init", "is", "not", "None", "or", "args", ".", "bn_bias_init", "is", "not", "None", ":", "\n", "        ", "bn_weight_init", "(", "model", ",", "weight", "=", "args", ".", "bn_weight_init", ",", "bias", "=", "args", ".", "bn_bias_init", ")", "\n", "\n", "# freezing the weights if we are only doing subnet training", "\n", "", "if", "args", ".", "freeze_weights", ":", "\n", "        ", "freeze_model_weights", "(", "model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.get_optimizer": [[453, 485], ["model.named_parameters", "print", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "print", "model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "model.parameters", "args.args"], "function", ["None"], ["", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> gradient to\"", ",", "n", ")", "\n", "\n", "", "if", "not", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> no gradient to\"", ",", "n", ")", "\n", "", "", "print", "(", "\"OPTIMIZER: \"", ",", "args", ".", "optimizer", ")", "\n", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "not", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "bn_params", ",", "\n", "\"weight_decay\"", ":", "0", "if", "args", ".", "no_bn_decay", "else", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "rest_params", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", "}", ",", "\n", "]", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "#print(list(model.parameters()))", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main._run_dir_exists": [[487, 492], ["log_base_dir.exists", "ckpt_base_dir.exists"], "function", ["None"], ["", "def", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "    ", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "return", "log_base_dir", ".", "exists", "(", ")", "or", "ckpt_base_dir", ".", "exists", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.get_directories": [[494, 526], ["main._run_dir_exists", "ValueError", "pathlib.Path", "pathlib.Path", "pathlib.Path", "main._run_dir_exists", "pathlib.Path.exists", "os.makedirs", "str", "str", "str", "str", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main._run_dir_exists", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main._run_dir_exists"], ["", "def", "get_directories", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "config", "is", "None", "or", "args", ".", "name", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must have name and config\"", ")", "\n", "\n", "", "config", "=", "pathlib", ".", "Path", "(", "args", ".", "config", ")", ".", "stem", "\n", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"runs/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{args.log_dir}/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "if", "args", ".", "width_mult", "!=", "1.0", ":", "\n", "        ", "run_base_dir", "=", "run_base_dir", "/", "\"width_mult={}\"", ".", "format", "(", "str", "(", "args", ".", "width_mult", ")", ")", "\n", "\n", "", "if", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "        ", "rep_count", "=", "0", "\n", "while", "_run_dir_exists", "(", "run_base_dir", "/", "str", "(", "rep_count", ")", ")", ":", "\n", "            ", "rep_count", "+=", "1", "\n", "\n", "", "run_base_dir", "=", "run_base_dir", "/", "str", "(", "rep_count", ")", "\n", "\n", "", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "if", "not", "run_base_dir", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_base_dir", ")", "\n", "\n", "", "(", "run_base_dir", "/", "\"settings.txt\"", ")", ".", "write_text", "(", "str", "(", "args", ")", ")", "\n", "\n", "return", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.write_result_to_csv": [[528, 579], ["time.strftime", "pathlib.Path", "pathlib.Path", "pathlib.Path.exists", "pathlib.Path.write_text", "open", "f.write"], "function", ["None"], ["", "def", "write_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "results", "=", "pathlib", ".", "Path", "(", "\"runs\"", ")", "/", "\"indiv_results4.csv\"", "\n", "if", "args", ".", "results", "is", "not", "None", ":", "\n", "        ", "results", "=", "pathlib", ".", "Path", "(", "args", ".", "results", ")", "\n", "\n", "", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "\"Base Config, \"", "\n", "\"Current Val Top 1, \"", "\n", "\"Current Val Top 5, \"", "\n", "\"Best Val Top 1, \"", "\n", "\"Best Val Top 5, \"", "\n", "\"Best Train Top 1, \"", "\n", "\"Best Train Top 5, \"", "\n", "\"Name, \"", "\n", "\"Seed, \"", "\n", "\"Prune Rate, \"", "\n", "\"Learning Rate, \"", "\n", "\"Epochs, \"", "\n", "\"Weight Decay, \"", "\n", "\"Learn BN, \"", "\n", "\"Tune BN, \"", "\n", "\"Bias Only, \"", "\n", "\"Run Directory\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "\"{base_config}, \"", "\n", "\"{curr_acc1:.02f}, \"", "\n", "\"{curr_acc5:.02f}, \"", "\n", "\"{best_acc1:.02f}, \"", "\n", "\"{best_acc5:.02f}, \"", "\n", "\"{best_train_acc1:.02f}, \"", "\n", "\"{best_train_acc5:.02f}, \"", "\n", "\"{name}, \"", "\n", "\"{seed}, \"", "\n", "\"{prune_rate}, \"", "\n", "\"{lr}, \"", "\n", "\"{epochs}, \"", "\n", "\"{weight_decay}, \"", "\n", "\"{learn_bn}, \"", "\n", "\"{tune_bn}, \"", "\n", "\"{bias_only}, \"", "\n", "\"{run_base_dir}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.main.global_prune_rate": [[582, 624], ["print", "model.named_modules", "print", "hasattr", "m.clamped_scores.clone().detach", "int", "utils.conv_type.GetGlobalSubnet.apply", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "torch.count_nonzero().item", "print", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "m.weight.detach().clone", "m.clamped_scores.clone", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "m.weight.detach", "args.args"], "function", ["None"], ["", "", "def", "global_prune_rate", "(", "model", ",", "args", ")", ":", "\n", "# Initialize dictionary to store prune rates for each layer", "\n", "    ", "prune_dict", "=", "{", "}", "\n", "# Print breakdown of prune rate by layer", "\n", "print", "(", "\"\\n==> Final layerwise prune rates in network:\"", ")", "\n", "# Loop over all model parameters and compute percentage of weights pruned globally", "\n", "total_weights", "=", "0", "\n", "unpruned_weights", "=", "0", "\n", "# Loop over all model parameters to get sparsity of each layer", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "# Only add parameters that have prune_threshold as attribute", "\n", "      ", "if", "hasattr", "(", "m", ",", "'prune_threshold'", ")", ":", "\n", "        ", "tmp_scores", "=", "m", ".", "clamped_scores", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# Add to total_weights", "\n", "layer_total", "=", "int", "(", "torch", ".", "numel", "(", "tmp_scores", ")", ")", "\n", "#print(\"Total number of weights in layer = \", t)", "\n", "total_weights", "+=", "layer_total", "\n", "# Compute layer prune rate (doesn't seem to be stored correctly during multigpu runs)", "\n", "w", "=", "GetGlobalSubnet", ".", "apply", "(", "tmp_scores", ",", "m", ".", "weight", ".", "detach", "(", ")", ".", "clone", "(", ")", ",", "m", ".", "prune_threshold", ")", "\n", "# Compute number of unpruned weights in layer", "\n", "layer_unpruned", "=", "torch", ".", "count_nonzero", "(", "w", ")", ".", "item", "(", ")", "\n", "# Compute pruning rate for current layer", "\n", "layer_prune_rate", "=", "1", "-", "(", "layer_unpruned", "/", "layer_total", ")", "\n", "# Compute number of pruned weights", "\n", "print", "(", "\"%s prune percentage: %lg\"", "%", "(", "n", ",", "100", "*", "layer_prune_rate", ")", ")", "\n", "unpruned_weights", "+=", "layer_unpruned", "\n", "# Add prune_rate for current layer to dictionary", "\n", "prune_dict", "[", "n", "]", "=", "100", "*", "layer_prune_rate", "\n", "# Set prune threshold value (same for all layers)", "\n", "pr_thresh", "=", "m", ".", "prune_threshold", "\n", "\n", "# Compute global pruning percentage", "\n", "#print (\"total_weights = \", total_weights)", "\n", "#print (\"pruned_weights = \", unpruned_weights)", "\n", "", "", "final_prune_rate", "=", "(", "1", "-", "(", "unpruned_weights", "/", "total_weights", ")", ")", "\n", "#print(\"Global pruning percentage: \", 100 * final_prune_rate)", "\n", "print", "(", "\"\\n==> Global prune rate: \"", ",", "1", "-", "final_prune_rate", ")", "\n", "\n", "#print(\"\\n==> Final prune threshold value: \", pr_thresh)", "\n", "\n", "# Return global prune rate", "\n", "return", "(", "1", "-", "final_prune_rate", ")", ",", "prune_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.main": [[34, 47], ["print", "parallel_main.main_worker", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "# Simply call main_worker function", "\n", "main_worker", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.main_worker": [[49, 286], ["print", "print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "print", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "print", "parallel_main.get_trainer", "parallel_main.get_model", "int", "int", "parallel_main.lassen_set_gpu", "parallel_main.get_optimizer", "parallel_main.get_dataset", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "time.time", "range", "print", "parallel_main.pretrained", "utils.schedulers.get_policy", "torch.CrossEntropyLoss().cuda", "utils.net_utils.LabelSmoothing", "parallel_main.resume", "validate", "parallel_main.get_directories", "torch.utils.tensorboard.SummaryWriter", "utils.logging.ProgressMeter", "utils.net_utils.save_checkpoint", "get_dataset.train_sampler.set_epoch", "get_dataset.val_sampler.set_epoch", "lr_policy", "utils.net_utils.get_lr", "time.time", "train", "utils.logging.AverageMeter.update", "time.time", "utils.logging.AverageMeter.update", "max", "max", "max", "max", "utils.logging.AverageMeter.update", "time.time", "parallel_main.write_result_to_csv", "int", "int", "validate", "validate", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.CrossEntropyLoss", "lassen_set_gpu.state_dict", "get_optimizer.state_dict", "utils.net_utils.save_checkpoint", "lassen_set_gpu.named_modules", "torch.utils.tensorboard.SummaryWriter.add_scalar", "time.time", "time.time", "print", "time.time", "isinstance", "lassen_set_gpu.state_dict", "get_optimizer.state_dict", "range", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_trainer", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_model", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.lassen_set_gpu", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_optimizer", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_dataset", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.pretrained", "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.get_policy", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.resume", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_directories", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_lr", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.write_result_to_csv", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint"], ["", "def", "main_worker", "(", "args", ")", ":", "\n", "# NEW: equivalent to MPI init.", "\n", "    ", "print", "(", "\"world size \"", ",", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_SIZE'", "]", ")", "\n", "print", "(", "\"rank \"", ",", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_RANK'", "]", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ",", "\n", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_SIZE'", "]", ")", ",", "\n", "rank", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_RANK'", "]", ")", ")", "\n", "\n", "# NEW: lookup number of ranks in the job, and our rank", "\n", "args", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "print", "(", "\"world size \"", ",", "args", ".", "world_size", ")", "\n", "args", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "print", "(", "\"rank \"", ",", "args", ".", "rank", ")", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "\"ngpus_per_node \"", ",", "ngpus_per_node", ")", "\n", "local_rank", "=", "args", ".", "rank", "%", "ngpus_per_node", "\n", "print", "(", "\"local_rank \"", ",", "local_rank", ")", "\n", "\n", "# NEW: Globalize variables", "\n", "global", "best_acc1", "\n", "global", "best_acc5", "\n", "global", "best_train_acc1", "\n", "global", "best_train_acc5", "\n", "\n", "#args.gpu = None", "\n", "# NEW: Specify gpu", "\n", "args", ".", "gpu", "=", "local_rank", "\n", "train", ",", "validate", ",", "modifier", "=", "get_trainer", "(", "args", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "# create model and optimizer", "\n", "", "model", "=", "get_model", "(", "args", ")", "\n", "\n", "# NEW: Distributed data", "\n", "#if args.distributed:", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "\n", "#model = set_gpu(args, model)", "\n", "# NEW: Modified function for loading gpus on multinode setups", "\n", "model", "=", "lassen_set_gpu", "(", "args", ",", "model", ")", "\n", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "pretrained", "(", "args", ",", "model", ")", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "args", ",", "model", ")", "\n", "data", "=", "get_dataset", "(", "args", ")", "\n", "lr_policy", "=", "get_policy", "(", "args", ".", "lr_policy", ")", "(", "optimizer", ",", "args", ")", "\n", "\n", "if", "args", ".", "label_smoothing", "is", "None", ":", "\n", "#criterion = nn.CrossEntropyLoss().cuda()", "\n", "# NEW: Specify gpu", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "LabelSmoothing", "(", "smoothing", "=", "args", ".", "label_smoothing", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "best_acc1", "=", "0.0", "\n", "best_acc5", "=", "0.0", "\n", "best_train_acc1", "=", "0.0", "\n", "best_train_acc5", "=", "0.0", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "best_acc1", "=", "resume", "(", "args", ",", "model", ",", "optimizer", ")", "\n", "\n", "# Data loading code", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "acc1", ",", "acc5", "=", "validate", "(", "\n", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", "=", "None", ",", "epoch", "=", "args", ".", "start_epoch", "\n", ")", "\n", "\n", "return", "\n", "\n", "# Set up directories", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "=", "get_directories", "(", "args", ")", "\n", "args", ".", "ckpt_base_dir", "=", "ckpt_base_dir", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "log_base_dir", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "\n", "", "epoch_time", "=", "AverageMeter", "(", "\"epoch_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "validation_time", "=", "AverageMeter", "(", "\"validation_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "train_time", "=", "AverageMeter", "(", "\"train_time\"", ",", "\":.4f\"", ",", "write_avg", "=", "False", ")", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "progress_overall", "=", "ProgressMeter", "(", "\n", "1", ",", "[", "epoch_time", ",", "validation_time", ",", "train_time", "]", ",", "prefix", "=", "\"Overall Timing\"", "\n", ")", "\n", "\n", "", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "args", ".", "start_epoch", "=", "args", ".", "start_epoch", "or", "0", "\n", "acc1", "=", "None", "\n", "\n", "# Save the initial state", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "0", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", "if", "acc1", "else", "\"Not evaluated\"", ",", "\n", "}", ",", "\n", "False", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"initial.state\"", ",", "\n", "save", "=", "False", ",", "\n", ")", "\n", "\n", "# Start training", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "# NEW: Distributed data", "\n", "#if args.distributed:", "\n", "        ", "data", ".", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "data", ".", "val_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "lr_policy", "(", "epoch", ",", "iteration", "=", "None", ")", "\n", "#modifier(args, epoch, model)", "\n", "\n", "cur_lr", "=", "get_lr", "(", "optimizer", ")", "\n", "\n", "# train for one epoch", "\n", "start_train", "=", "time", ".", "time", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "\n", "data", ".", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", "=", "writer", "\n", ")", "\n", "#train_acc1, train_acc5 = train(", "\n", "#    data.train_loader, model, criterion, optimizer, epoch, args, writer=None", "\n", "#)", "\n", "train_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_train", ")", "/", "60", ")", "\n", "\n", "# evaluate on validation set", "\n", "start_validation", "=", "time", ".", "time", "(", ")", "\n", "\n", "# NEW: Only write values to tensorboard for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "acc1", ",", "acc5", "=", "validate", "(", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "acc1", ",", "acc5", "=", "validate", "(", "data", ".", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "None", ",", "epoch", ")", "\n", "\n", "", "validation_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "start_validation", ")", "/", "60", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "best_acc5", "=", "max", "(", "acc5", ",", "best_acc5", ")", "\n", "best_train_acc1", "=", "max", "(", "train_acc1", ",", "best_train_acc1", ")", "\n", "best_train_acc5", "=", "max", "(", "train_acc5", ",", "best_train_acc5", ")", "\n", "\n", "save", "=", "(", "(", "epoch", "%", "args", ".", "save_every", ")", "==", "0", ")", "and", "args", ".", "save_every", ">", "0", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "if", "is_best", "or", "save", "or", "epoch", "==", "args", ".", "epochs", "-", "1", ":", "\n", "                ", "if", "is_best", ":", "\n", "                    ", "print", "(", "f\"==> New best, saving at {ckpt_base_dir / 'model_best.pth'}\"", ")", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "best_acc1", ",", "\n", "\"best_acc5\"", ":", "best_acc5", ",", "\n", "\"best_train_acc1\"", ":", "best_train_acc1", ",", "\n", "\"best_train_acc5\"", ":", "best_train_acc5", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"curr_acc1\"", ":", "acc1", ",", "\n", "\"curr_acc5\"", ":", "acc5", ",", "\n", "}", ",", "\n", "is_best", ",", "\n", "filename", "=", "ckpt_base_dir", "/", "f\"epoch_most_recent.state\"", ",", "\n", "save", "=", "save", ",", "\n", ")", "\n", "#filename=ckpt_base_dir / f\"epoch_{epoch}.state\",", "\n", "\n", "", "", "epoch_time", ".", "update", "(", "(", "time", ".", "time", "(", ")", "-", "end_epoch", ")", "/", "60", ")", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "progress_overall", ".", "display", "(", "epoch", ")", "\n", "progress_overall", ".", "write_to_tensorboard", "(", "\n", "writer", ",", "prefix", "=", "\"diagnostics\"", ",", "global_step", "=", "epoch", "\n", ")", "\n", "\n", "if", "args", ".", "conv_type", "==", "\"SampleSubnetConv\"", ":", "\n", "                ", "count", "=", "0", "\n", "sum_pr", "=", "0.0", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "SampleSubnetConv", ")", ":", "\n", "# avg pr across 10 samples", "\n", "                        ", "pr", "=", "0.0", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                            ", "pr", "+=", "(", "\n", "(", "torch", ".", "rand_like", "(", "m", ".", "clamped_scores", ")", ">=", "m", ".", "clamped_scores", ")", "\n", ".", "float", "(", ")", "\n", ".", "mean", "(", ")", "\n", ".", "item", "(", ")", "\n", ")", "\n", "", "pr", "/=", "10.0", "\n", "writer", ".", "add_scalar", "(", "\"pr/{}\"", ".", "format", "(", "n", ")", ",", "pr", ",", "epoch", ")", "\n", "sum_pr", "+=", "pr", "\n", "count", "+=", "1", "\n", "\n", "", "", "args", ".", "prune_rate", "=", "sum_pr", "/", "count", "\n", "writer", ".", "add_scalar", "(", "\"pr/average\"", ",", "args", ".", "prune_rate", ",", "epoch", ")", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "\"test/lr\"", ",", "cur_lr", ",", "epoch", ")", "\n", "\n", "", "end_epoch", "=", "time", ".", "time", "(", ")", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "write_result_to_csv", "(", "\n", "best_acc1", "=", "best_acc1", ",", "\n", "best_acc5", "=", "best_acc5", ",", "\n", "best_train_acc1", "=", "best_train_acc1", ",", "\n", "best_train_acc5", "=", "best_train_acc5", ",", "\n", "prune_rate", "=", "args", ".", "prune_rate", ",", "\n", "curr_acc1", "=", "acc1", ",", "\n", "curr_acc5", "=", "acc5", ",", "\n", "base_config", "=", "args", ".", "config", ",", "\n", "name", "=", "args", ".", "name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_trainer": [[289, 294], ["print", "importlib.import_module", "args.args"], "function", ["None"], ["", "", "def", "get_trainer", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Using trainer from trainers.{args.trainer}\"", ")", "\n", "trainer", "=", "importlib", ".", "import_module", "(", "f\"trainers.{args.trainer}\"", ")", "\n", "\n", "return", "trainer", ".", "train", ",", "trainer", ".", "validate", ",", "trainer", ".", "modifier", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.set_gpu": [[296, 316], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["None"], ["", "def", "set_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CPU-only experiments currently unsupported\"", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "elif", "args", ".", "multigpu", "is", "None", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "print", "(", "f\"=> Parallelizing on {args.multigpu} gpus\"", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "multigpu", "[", "0", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "multigpu", "[", "0", "]", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "args", ".", "multigpu", ")", ".", "cuda", "(", "\n", "args", ".", "multigpu", "[", "0", "]", "\n", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.lassen_set_gpu": [[318, 332], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.to", "args.args"], "function", ["None"], ["", "def", "lassen_set_gpu", "(", "args", ",", "model", ")", ":", "\n", "    ", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "\"CPU-only experiments currently unsupported\"", "\n", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "print", "(", "f\"=> Parallelizing: On gpu {args.gpu}\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.resume": [[334, 359], ["os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print", "print", "args.args"], "function", ["None"], ["", "def", "resume", "(", "args", ",", "model", ",", "optimizer", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "        ", "print", "(", "f\"=> Loading checkpoint '{args.resume}'\"", ")", "\n", "\n", "#checkpoint = torch.load(args.resume, map_location=f\"cuda:{args.multigpu[0]}\")", "\n", "# NEW: Map model to be loaded to specified single gpu.", "\n", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "if", "args", ".", "start_epoch", "is", "None", ":", "\n", "            ", "print", "(", "f\"=> Setting new start epoch at {checkpoint['epoch']}\"", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "\n", "", "best_acc1", "=", "checkpoint", "[", "\"best_acc1\"", "]", "\n", "## NEW: best_acc1 may be from a checkpoint from a different GPU", "\n", "#best_acc1 = best_acc1.to(args.gpu)", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "print", "(", "f\"=> Loaded checkpoint '{args.resume}' (epoch {checkpoint['epoch']})\"", ")", "\n", "\n", "return", "best_acc1", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"=> No checkpoint found at '{args.resume}'\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.pretrained": [[361, 387], ["os.path.isfile", "model.named_modules", "print", "model.state_dict", "pretrained.items", "model.state_dict.update", "model.load_state_dict", "print", "isinstance", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "m.set_subnet", "print", "pretrained.items", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "v.size", "model_state_dict[].size", "v.size", "model_state_dict[].size", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.set_subnet"], ["", "", "def", "pretrained", "(", "args", ",", "model", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> loading pretrained weights from '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "pretrained", "=", "torch", ".", "load", "(", "\n", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "multigpu", "[", "0", "]", ")", ")", ",", "\n", ")", "[", "\"state_dict\"", "]", "\n", "\n", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "model_state_dict", "or", "v", ".", "size", "(", ")", "!=", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ":", "\n", "                ", "print", "(", "\"IGNORE:\"", ",", "k", ")", "\n", "", "", "pretrained", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrained", ".", "items", "(", ")", "\n", "if", "(", "k", "in", "model_state_dict", "and", "v", ".", "size", "(", ")", "==", "model_state_dict", "[", "k", "]", ".", "size", "(", ")", ")", "\n", "}", "\n", "model_state_dict", ".", "update", "(", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no pretrained weights found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "FixedSubnetConv", ")", ":", "\n", "            ", "m", ".", "set_subnet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_dataset": [[389, 394], ["print", "getattr", "args.args"], "function", ["None"], ["", "", "", "def", "get_dataset", "(", "args", ")", ":", "\n", "    ", "print", "(", "f\"=> Getting {args.set} dataset\"", ")", "\n", "dataset", "=", "getattr", "(", "data", ",", "args", ".", "set", ")", "(", "args", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_model": [[396, 422], ["print", "utils.net_utils.set_model_prune_rate", "print", "utils.net_utils.freeze_model_weights", "ValueError", "sum", "int", "model.named_parameters", "p.numel", "n.endswith", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.set_model_prune_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_weights"], ["", "def", "get_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "first_layer_dense", ":", "\n", "        ", "args", ".", "first_layer_type", "=", "\"DenseConv\"", "\n", "\n", "", "print", "(", "\"=> Creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", ")", "\n", "\n", "# applying sparsity to the network", "\n", "if", "(", "\n", "args", ".", "conv_type", "!=", "\"DenseConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"SampleSubnetConv\"", "\n", "and", "args", ".", "conv_type", "!=", "\"ContinuousSparseConv\"", "\n", ")", ":", "\n", "        ", "if", "args", ".", "prune_rate", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Need to set a positive prune rate\"", ")", "\n", "\n", "", "set_model_prune_rate", "(", "model", ",", "prune_rate", "=", "args", ".", "prune_rate", ")", "\n", "print", "(", "\n", "f\"=> Rough estimate model params {sum(int(p.numel() * (1-args.prune_rate)) for n, p in model.named_parameters() if not n.endswith('scores'))}\"", "\n", ")", "\n", "\n", "# freezing the weights if we are only doing subnet training", "\n", "", "if", "args", ".", "freeze_weights", ":", "\n", "        ", "freeze_model_weights", "(", "model", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_optimizer": [[424, 455], ["model.named_parameters", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "print", "print", "model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "filter", "model.parameters", "args.args"], "function", ["None"], ["", "def", "get_optimizer", "(", "args", ",", "model", ")", ":", "\n", "    ", "for", "n", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> gradient to\"", ",", "n", ")", "\n", "\n", "", "if", "not", "v", ".", "requires_grad", ":", "\n", "            ", "print", "(", "\"<DEBUG> no gradient to\"", ",", "n", ")", "\n", "\n", "", "", "if", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "parameters", "=", "list", "(", "model", ".", "named_parameters", "(", ")", ")", "\n", "bn_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "rest_params", "=", "[", "v", "for", "n", ",", "v", "in", "parameters", "if", "(", "\"bn\"", "not", "in", "n", ")", "and", "v", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "bn_params", ",", "\n", "\"weight_decay\"", ":", "0", "if", "args", ".", "no_bn_decay", "else", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\"params\"", ":", "rest_params", ",", "\"weight_decay\"", ":", "args", ".", "weight_decay", "}", ",", "\n", "]", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main._run_dir_exists": [[457, 462], ["log_base_dir.exists", "ckpt_base_dir.exists"], "function", ["None"], ["", "def", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "    ", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "return", "log_base_dir", ".", "exists", "(", ")", "or", "ckpt_base_dir", ".", "exists", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.get_directories": [[464, 496], ["parallel_main._run_dir_exists", "ValueError", "pathlib.Path", "pathlib.Path", "pathlib.Path", "parallel_main._run_dir_exists", "pathlib.Path.exists", "os.makedirs", "str", "str", "str", "str", "args.args"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main._run_dir_exists", "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main._run_dir_exists"], ["", "def", "get_directories", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "config", "is", "None", "or", "args", ".", "name", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must have name and config\"", ")", "\n", "\n", "", "config", "=", "pathlib", ".", "Path", "(", "args", ".", "config", ")", ".", "stem", "\n", "if", "args", ".", "log_dir", "is", "None", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"runs/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "run_base_dir", "=", "pathlib", ".", "Path", "(", "\n", "f\"{args.log_dir}/{config}/{args.name}/prune_rate={args.prune_rate}\"", "\n", ")", "\n", "", "if", "args", ".", "width_mult", "!=", "1.0", ":", "\n", "        ", "run_base_dir", "=", "run_base_dir", "/", "\"width_mult={}\"", ".", "format", "(", "str", "(", "args", ".", "width_mult", ")", ")", "\n", "\n", "", "if", "_run_dir_exists", "(", "run_base_dir", ")", ":", "\n", "        ", "rep_count", "=", "0", "\n", "while", "_run_dir_exists", "(", "run_base_dir", "/", "str", "(", "rep_count", ")", ")", ":", "\n", "            ", "rep_count", "+=", "1", "\n", "\n", "", "run_base_dir", "=", "run_base_dir", "/", "str", "(", "rep_count", ")", "\n", "\n", "", "log_base_dir", "=", "run_base_dir", "/", "\"logs\"", "\n", "ckpt_base_dir", "=", "run_base_dir", "/", "\"checkpoints\"", "\n", "\n", "if", "not", "run_base_dir", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "run_base_dir", ")", "\n", "\n", "", "(", "run_base_dir", "/", "\"settings.txt\"", ")", ".", "write_text", "(", "str", "(", "args", ")", ")", "\n", "\n", "return", "run_base_dir", ",", "ckpt_base_dir", ",", "log_base_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.parallel_main.write_result_to_csv": [[498, 531], ["time.strftime", "pathlib.Path", "results.exists", "results.write_text", "open", "f.write"], "function", ["None"], ["", "def", "write_result_to_csv", "(", "**", "kwargs", ")", ":", "\n", "    ", "results", "=", "pathlib", ".", "Path", "(", "\"runs\"", ")", "/", "\"results.csv\"", "\n", "\n", "if", "not", "results", ".", "exists", "(", ")", ":", "\n", "        ", "results", ".", "write_text", "(", "\n", "\"Date Finished, \"", "\n", "\"Base Config, \"", "\n", "\"Name, \"", "\n", "\"Prune Rate, \"", "\n", "\"Current Val Top 1, \"", "\n", "\"Current Val Top 5, \"", "\n", "\"Best Val Top 1, \"", "\n", "\"Best Val Top 5, \"", "\n", "\"Best Train Top 1, \"", "\n", "\"Best Train Top 5\\n\"", "\n", ")", "\n", "\n", "", "now", "=", "time", ".", "strftime", "(", "\"%m-%d-%y_%H:%M:%S\"", ")", "\n", "\n", "with", "open", "(", "results", ",", "\"a+\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\n", "(", "\n", "\"{now}, \"", "\n", "\"{base_config}, \"", "\n", "\"{name}, \"", "\n", "\"{prune_rate}, \"", "\n", "\"{curr_acc1:.02f}, \"", "\n", "\"{curr_acc5:.02f}, \"", "\n", "\"{best_acc1:.02f}, \"", "\n", "\"{best_acc5:.02f}, \"", "\n", "\"{best_train_acc1:.02f}, \"", "\n", "\"{best_train_acc5:.02f}\\n\"", "\n", ")", ".", "format", "(", "now", "=", "now", ",", "**", "kwargs", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.args.parse_arguments": [[12, 353], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "range", "len", "configs.parser.arg_to_varname", "len", "args.get_config", "os.path.isfile", "print", "torch.load", "int", "torch.device", "print", "print", "print", "print", "print", "print", "x.split"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.arg_to_varname", "home.repos.pwc.inspect_result.chrundle_biprop.None.args.get_config"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"PyTorch ImageNet Training\"", ")", "\n", "\n", "# General Config", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data\"", ",", "help", "=", "\"path to dataset base directory\"", ",", "default", "=", "\"/mnt/disk1/datasets\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--results\"", ",", "help", "=", "\"result filepath\"", ",", "default", "=", "\"runs/indiv_results4.csv\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--optimizer\"", ",", "help", "=", "\"Which optimizer to use\"", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "help", "=", "\"name of dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"ImageNet\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-a\"", ",", "\"--arch\"", ",", "metavar", "=", "\"ARCH\"", ",", "default", "=", "\"ResNet18\"", ",", "help", "=", "\"model architecture\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config\"", ",", "help", "=", "\"Config file to use (see configs dir)\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--log-dir\"", ",", "help", "=", "\"Where to save the runs. If None use ./runs\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-j\"", ",", "\n", "\"--workers\"", ",", "\n", "default", "=", "20", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of data loading workers (default: 20)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--epochs\"", ",", "\n", "default", "=", "90", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of total epochs to run\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--start-epoch\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"manual epoch number (useful on restarts)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-b\"", ",", "\n", "\"--batch-size\"", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"mini-batch size (default: 256), this is the total \"", "\n", "\"batch size of all GPUs on the current node when \"", "\n", "\"using Data Parallel or Distributed Data Parallel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr\"", ",", "\n", "\"--learning-rate\"", ",", "\n", "default", "=", "0.1", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"LR\"", ",", "\n", "help", "=", "\"initial learning rate\"", ",", "\n", "dest", "=", "\"lr\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup_length\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "\"Number of warmup iterations\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--momentum\"", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "\"M\"", ",", "help", "=", "\"momentum\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wd\"", ",", "\n", "\"--weight-decay\"", ",", "\n", "default", "=", "1e-4", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"W\"", ",", "\n", "help", "=", "\"weight decay (default: 1e-4)\"", ",", "\n", "dest", "=", "\"weight_decay\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bn_weight_init\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"BW\"", ",", "\n", "help", "=", "\"initial bn weight\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bn_bias_init\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "\"BB\"", ",", "\n", "help", "=", "\"initial bn bias\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--print-freq\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"print frequency (default: 10)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "default", "=", "\"\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"PATH\"", ",", "\n", "help", "=", "\"path to latest checkpoint (default: none)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-e\"", ",", "\n", "\"--evaluate\"", ",", "\n", "dest", "=", "\"evaluate\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"evaluate model on validation set\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained\"", ",", "\n", "dest", "=", "\"pretrained\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"use pre-trained model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "\"seed for initializing training. \"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multigpu\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "lambda", "x", ":", "[", "int", "(", "a", ")", "for", "a", "in", "x", ".", "split", "(", "\",\"", ")", "]", ",", "\n", "help", "=", "\"Which GPUs to use for multigpu training\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--world-size'", ",", "\n", "default", "=", "-", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of nodes for distributed training'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rank'", ",", "\n", "default", "=", "-", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'node rank for distributed training'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--histograms\"", ",", "\n", "dest", "=", "\"histograms\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"write scores and score gradient histograms to tensorboard\"", ",", "\n", ")", "\n", "\n", "# Learning Rate Policy Specific", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-policy\"", ",", "default", "=", "\"constant_lr\"", ",", "help", "=", "\"Policy for the learning rate.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-adjust\"", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "\"Interval to drop lr\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-adjust\"", ",", "default", "=", "20", ",", "type", "=", "int", ",", "help", "=", "\"Interval to drop lr\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--multistep-lr-gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "int", ",", "help", "=", "\"Multistep multiplier\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lr-gamma\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "\"Multistep multiplier\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--name\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Experiment name to append to filepath\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--save_every\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "help", "=", "\"Save every ___ epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prune-rate\"", ",", "\n", "default", "=", "0.0", ",", "\n", "help", "=", "\"Amount of pruning to do during sparse training\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--low-data\"", ",", "default", "=", "1", ",", "help", "=", "\"Amount of data to use\"", ",", "type", "=", "float", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--width-mult\"", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "\"How much to vary the width of the network.\"", ",", "\n", "type", "=", "float", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nesterov\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use nesterov for SGD\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--random-subnet\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to use a random subnet when fine tuning for lottery experiments\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--one-batch\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"One batch train set for debugging purposes (test overfitting)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"What kind of sparsity to use\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--freeze-weights\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to train only subnet (this freezes weights)\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--learn_batchnorm\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to learn batchnorm weight and bias\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--tune_batchnorm\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Freeze subnet, only tune batchnorm\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bn_bias_only\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to train batchnorm bias only\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--debug\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to print weight distributions for debugging purposes\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--grad-clip\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether or not to clip gradients\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "default", "=", "\"fan_in\"", ",", "help", "=", "\"Weight initialization mode\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--nonlinearity\"", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"Nonlinearity used by initialization\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--bn-type\"", ",", "default", "=", "None", ",", "help", "=", "\"BatchNorm type\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init\"", ",", "default", "=", "\"kaiming_normal\"", ",", "help", "=", "\"Weight initialization modifications\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-bn-decay\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"No batchnorm decay\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--scale-fan\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"scale fan\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"First layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--last-layer-dense\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Last layer dense or sparse\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--label-smoothing\"", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Label smoothing to use, default 0.0\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--first-layer-type\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Conv type of first layer\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trainer\"", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ",", "help", "=", "\"cs, ss, anomaly, or standard training\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--score-init-constant\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Sample Baseline Subnet Init\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--prune_rate_epoch\"", ",", "\n", "default", "=", "10", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"When pruning globally, scale up prune rate over this number of epochs\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gaussian_aug\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Gaussian noise augmentation to be added to the images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--std_gauss\"", ",", "help", "=", "\"Variance of sampled Gaussian noise for augmentation scheme\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--p_clean\"", ",", "help", "=", "\"Probability that image is clean (i.e. noise is not added to image in gaussian augmentation scheme)\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--augmix\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Use Augmix during training\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--jsd\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Use Jensen-Shannon Divergence in loss with Augmix/Gaussian augmentation schemes\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--all-augmix-augmentations\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "help", "=", "\"Use all Augmix augmentations when true (not recommended)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mixture-width'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Number of augmentation chains to mix per augmented example'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mixture-depth'", ",", "\n", "default", "=", "-", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Depth of augmentation chains. -1 denotes stochastic depth in [1, 3]'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aug-severity'", ",", "\n", "default", "=", "3", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Severity of base augmentation operators'", ")", "\n", "\n", "# Updated for use with hpbandster", "\n", "#args = parser.parse_args()", "\n", "args", ",", "unknown", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# strip preceding hyphens from unknown arguments", "\n", "for", "i", "in", "range", "(", "len", "(", "unknown", ")", ")", ":", "\n", "      ", "unknown", "[", "i", "]", "=", "_parser", ".", "arg_to_varname", "(", "unknown", "[", "i", "]", ")", "\n", "\n", "# Allow for use from notebook without config file", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", ">", "1", ":", "\n", "        ", "get_config", "(", "args", ",", "unknown", ")", "\n", "\n", "# If pretrained model provided, check conv_type to set before building from config", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "      ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "        ", "print", "(", "\"=> checking conv_type of pretrained model from '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "\n", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "multigpu", "[", "0", "]", ")", ")", ",", "\n", ")", "\n", "try", ":", "\n", "# Set conv_type argument to conv_type of pretrained model", "\n", "          ", "args", ".", "conv_type", "=", "pretrained_dict", "[", "\"conv_type\"", "]", "\n", "", "except", ":", "\n", "          ", "print", "(", "\"=== WARNING: Pretrained model file does not contain 'conv_type' key. ===\"", ")", "\n", "print", "(", "\"=== WARNING: This may result in incorrect model being loaded. ===\"", ")", "\n", "print", "(", "\"=== SOLUTION: Either pass the conv_type used when training the model in arguments using the --conv-type flag or ensure that the correct conv_type is listed in the provided config file.\"", ")", "\n", "", "try", ":", "\n", "# Set prune_rate argument to prune_rate of pretrained model", "\n", "          ", "args", ".", "prune_rate", "=", "pretrained_dict", "[", "\"prune_rate\"", "]", "\n", "", "except", ":", "\n", "          ", "print", "(", "\"=== WARNING: Pretrained model file does not contain 'prune_rate' key. ===\"", ")", "\n", "print", "(", "\"=== WARNING: This may result in incorrect model being loaded. ===\"", ")", "\n", "print", "(", "\"=== SOLUTION: Either pass the prune_rate used when training the model in arguments using the --prune-rate flag or ensure that the correct prune_rate is listed in the provided config file.\"", ")", "\n", "\n", "", "", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.args.get_config": [[355, 372], ["configs.parser.argv_to_vars", "open().read", "yaml.load", "print", "args.__dict__.update", "getattr", "open"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.argv_to_vars", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update"], ["", "def", "get_config", "(", "args", ",", "unknown", ")", ":", "\n", "# get commands from command line", "\n", "    ", "override_args", "=", "_parser", ".", "argv_to_vars", "(", "sys", ".", "argv", ")", "\n", "\n", "# remove unknown args", "\n", "override_args", "=", "[", "a", "for", "a", "in", "override_args", "if", "a", "not", "in", "unknown", "]", "\n", "\n", "# load yaml file", "\n", "yaml_txt", "=", "open", "(", "args", ".", "config", ")", ".", "read", "(", ")", "\n", "\n", "# override args", "\n", "loaded_yaml", "=", "yaml", ".", "load", "(", "yaml_txt", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "loaded_yaml", "[", "v", "]", "=", "getattr", "(", "args", ",", "v", ")", "\n", "\n", "", "print", "(", "f\"=> Reading YAML config from {args.config}\"", ")", "\n", "args", ".", "__dict__", ".", "update", "(", "loaded_yaml", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.None.args.run_args": [[374, 378], ["args.parse_arguments"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.None.args.parse_arguments"], ["", "def", "run_args", "(", ")", ":", "\n", "    ", "global", "args", "\n", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "parse_arguments", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.get_policy": [[6, 23], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant_lr\"", ":", "constant_lr", ",", "\n", "\"cosine_lr\"", ":", "cosine_lr", ",", "\n", "\"multistep_lr\"", ":", "multistep_lr", ",", "\n", "\"xnor_lr\"", ":", "xnor_lr", ",", "\n", "\"mpt11_w18_2_v2_lr\"", ":", "mpt11_w18_2_v2_lr", ",", "\n", "\"mpt11_w18_2_lr\"", ":", "mpt11_w18_2_lr", ",", "\n", "\"mpt132_w34_2_lr\"", ":", "mpt132_w34_2_lr", ",", "\n", "\"mpt11_w34_2_v2_lr\"", ":", "mpt11_w34_2_v2_lr", ",", "\n", "\"cos_multi_lr\"", ":", "cos_multi_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate": [[25, 28], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.constant_lr": [[30, 42], ["schedulers.assign_learning_rate", "schedulers._warmup_lr"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers._warmup_lr"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.cosine_lr": [[44, 58], ["schedulers.assign_learning_rate", "schedulers._warmup_lr", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers._warmup_lr"], ["", "def", "cosine_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup_length", ":", "\n", "            ", "lr", "=", "_warmup_lr", "(", "args", ".", "lr", ",", "args", ".", "warmup_length", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.multistep_lr": [[60, 71], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "multistep_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "args", ".", "lr_gamma", "**", "(", "epoch", "//", "args", ".", "lr_adjust", ")", ")", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.cos_multi_lr": [[72, 97], ["schedulers.assign_learning_rate", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "cos_multi_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "30", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "44", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "54", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "55", ":", "\n", "                ", "e", "=", "epoch", "-", "args", ".", "warmup_length", "\n", "es", "=", "args", ".", "epochs", "-", "args", ".", "warmup_length", "\n", "lr", "=", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "np", ".", "pi", "*", "e", "/", "es", ")", ")", "*", "lr", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.xnor_lr": [[99, 119], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "xnor_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "30", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "44", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "54", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.mpt132_w34_2_lr": [[120, 140], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "mpt132_w34_2_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "27", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "44", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "54", ":", "\n", "                ", "lr", "=", "lr", "*", "0.01", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.mpt11_w34_2_v2_lr": [[141, 161], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "mpt11_w34_2_v2_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "50", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "62", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "70", ":", "\n", "                ", "lr", "=", "lr", "*", "0.01", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.mpt11_w18_2_lr": [[162, 182], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "mpt11_w18_2_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "46", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "65", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "80", ":", "\n", "                ", "lr", "=", "lr", "*", "0.01", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.mpt11_w18_2_v2_lr": [[183, 203], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers.assign_learning_rate"], ["", "def", "mpt11_w18_2_v2_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 at epoch 30 and 40\"\"\"", "\n", "\n", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "epoch", ">=", "35", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "\n", "if", "epoch", ">=", "50", ":", "\n", "                ", "lr", "=", "lr", "*", "0.1", "\n", "\n", "", "if", "epoch", ">=", "60", ":", "\n", "                ", "lr", "=", "lr", "*", "0.01", "\n", "", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.schedulers._warmup_lr": [[204, 206], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.bn_type.NonAffineBatchNorm.__init__": [[7, 9], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "NonAffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.bn_type.AffineBatchNorm.__init__": [[11, 13], ["torch.BatchNorm2d.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ")", ":", "\n", "        ", "super", "(", "AffineBatchNorm", ",", "self", ")", ".", "__init__", "(", "dim", ",", "affine", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.__init__": [[8, 12], ["logging.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display": [[13, 20], ["str", "print", "tqdm.tqdm.write", "logging.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ",", "tqdm_writer", "=", "True", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "if", "not", "tqdm_writer", ":", "\n", "            ", "print", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "", "else", ":", "\n", "            ", "tqdm", ".", "tqdm", ".", "write", "(", "\"\\t\"", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard": [[21, 35], ["writer.add_scalar", "writer.add_scalar"], "methods", ["None"], ["", "", "def", "write_to_tensorboard", "(", "\n", "self", ",", "writer", ":", "SummaryWriter", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "None", "\n", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ":", "\n", "            ", "avg", "=", "meter", ".", "avg", "\n", "val", "=", "meter", ".", "val", "\n", "if", "meter", ".", "write_val", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_val\"", ",", "val", ",", "global_step", "=", "global_step", "\n", ")", "\n", "\n", "", "if", "meter", ".", "write_avg", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "\n", "f\"{prefix}/{meter.name}_avg\"", ",", "avg", ",", "global_step", "=", "global_step", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter._get_batch_fmtstr": [[37, 41], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "", "", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "\"{:\"", "+", "str", "(", "num_digits", ")", "+", "\"d}\"", "\n", "return", "\"[\"", "+", "fmt", "+", "\"/\"", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "\"]\"", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.Meter.__init__": [[44, 47], ["None"], "methods", ["None"], ["    ", "@", "abc", ".", "abstractmethod", "\n", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.Meter.reset": [[48, 51], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.Meter.update": [[52, 55], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.Meter.__str__": [[56, 59], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.AverageMeter.__init__": [[64, 71], ["logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "True", ",", "write_avg", "=", "True", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "self", ".", "write_val", "=", "write_val", "\n", "self", ".", "write_avg", "=", "write_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.AverageMeter.reset": [[72, 77], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.AverageMeter.update": [[78, 83], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.AverageMeter.__str__": [[84, 87], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.__init__": [[90, 98], ["logging.AverageMeter", "logging.AverageMeter", "logging.VarianceMeter.reset"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ",", "write_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_ex_sq", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_1\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "_sq_ex", "=", "AverageMeter", "(", "name", "=", "\"_subvariance_2\"", ",", "fmt", "=", "\":.02f\"", ")", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "write_val", "=", "False", "\n", "self", ".", "write_avg", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.val": [[99, 102], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "val", "-", "self", ".", "_sq_ex", ".", "val", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.avg": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ex_sq", ".", "avg", "-", "self", ".", "_sq_ex", ".", "avg", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.reset": [[107, 110], ["logging.VarianceMeter._ex_sq.reset", "logging.VarianceMeter._sq_ex.reset"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.reset", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "reset", "(", ")", "\n", "self", ".", "_sq_ex", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update": [[111, 114], ["logging.VarianceMeter._ex_sq.update", "logging.VarianceMeter._sq_ex.update"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "_ex_sq", ".", "update", "(", "val", "**", "2", ",", "n", "=", "n", ")", "\n", "self", ".", "_sq_ex", ".", "update", "(", "val", ",", "n", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.__str__": [[115, 118], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"{name} (var {avg\"", "+", "self", ".", "fmt", "+", "\"})\"", ")", ".", "format", "(", "\n", "name", "=", "self", ".", "name", ",", "avg", "=", "self", ".", "avg", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.Timer.__init__": [[22, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "start", "=", "None", "\n", "self", ".", "end", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.Timer.__enter__": [[27, 30], ["time.time"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.Timer.__exit__": [[31, 36], ["time.time", "print"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "end", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "time", "=", "self", ".", "end", "-", "self", ".", "start", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "\"Elapsed time: %f ms.\"", "%", "self", ".", "time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.get_params": [[38, 41], ["numpy.sum", "numpy.prod", "list", "profiling..parameters", "w.size"], "function", ["None"], ["", "", "", "def", "get_params", "(", "self", ")", ":", "\n", "    ", "\"\"\"get number of params in module\"\"\"", "\n", "return", "np", ".", "sum", "(", "[", "np", ".", "prod", "(", "list", "(", "w", ".", "size", "(", ")", ")", ")", "for", "w", "in", "self", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward": [[43, 49], ["int", "profiling.Timer", "range", "profiling..forward"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "def", "run_forward", "(", "self", ",", "input", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "with", "Timer", "(", ")", "as", "t", ":", "\n", "        ", "for", "_", "in", "range", "(", "num_forwards", ")", ":", "\n", "            ", "self", ".", "forward", "(", "*", "input", ")", "\n", "# torch.cuda.synchronize()", "\n", "", "", "return", "int", "(", "t", ".", "time", "*", "1e9", "/", "num_forwards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.conv_module_name_filter": [[51, 63], ["name.replace.replace"], "function", ["None"], ["", "def", "conv_module_name_filter", "(", "name", ")", ":", "\n", "    ", "\"\"\"filter module name to have a short view\"\"\"", "\n", "filters", "=", "{", "\n", "\"kernel_size\"", ":", "\"k\"", ",", "\n", "\"stride\"", ":", "\"s\"", ",", "\n", "\"padding\"", ":", "\"pad\"", ",", "\n", "\"bias\"", ":", "\"b\"", ",", "\n", "\"groups\"", ":", "\"g\"", ",", "\n", "}", "\n", "for", "k", "in", "filters", ":", "\n", "        ", "name", "=", "name", ".", "replace", "(", "k", ",", "filters", "[", "k", "]", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.module_profiling": [[65, 157], ["input[].size", "output.size", "type", "isinstance", "int", "int", "profiling.run_forward", "profiling.conv_module_name_filter", "isinstance", "print", "profiling..__repr__", "profiling.get_params", "profiling.run_forward", "profiling.conv_module_name_filter", "isinstance", "profiling.get_params", "profiling..__repr__", "profiling.get_params", "profiling.run_forward", "profiling..__repr__", "isinstance", "profiling.run_forward", "profiling..__repr__", "isinstance", "profiling.run_forward", "profiling..__repr__", "profiling..children", "profiling..name.ljust", "getattr", "getattr", "getattr", "print", "getattr", "type"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_params", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.conv_module_name_filter", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_params", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_params", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.run_forward", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__"], ["", "def", "module_profiling", "(", "self", ",", "input", ",", "output", ",", "verbose", ")", ":", "\n", "    ", "ins", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "outs", "=", "output", ".", "size", "(", ")", "\n", "# NOTE: There are some difference between type and isinstance, thus please", "\n", "# be careful.", "\n", "t", "=", "type", "(", "self", ")", "\n", "if", "isinstance", "(", "self", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# this is the only modification, to multiply by 1-prune_rate", "\n", "        ", "p", "=", "1", "-", "self", ".", "prune_rate", "\n", "self", ".", "n_macs", "=", "int", "(", "\n", "p", "\n", "*", "(", "\n", "ins", "[", "1", "]", "\n", "*", "outs", "[", "1", "]", "\n", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "*", "outs", "[", "2", "]", "\n", "*", "outs", "[", "3", "]", "\n", "//", "self", ".", "groups", "\n", ")", "\n", "*", "outs", "[", "0", "]", "\n", ")", "\n", "self", ".", "n_params", "=", "int", "(", "p", "*", "get_params", "(", "self", ")", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "(", "\n", "ins", "[", "1", "]", "\n", "*", "outs", "[", "1", "]", "\n", "*", "self", ".", "kernel_size", "[", "0", "]", "\n", "*", "self", ".", "kernel_size", "[", "1", "]", "\n", "*", "outs", "[", "2", "]", "\n", "*", "outs", "[", "3", "]", "\n", "//", "self", ".", "groups", "\n", ")", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "conv_module_name_filter", "(", "self", ".", "__repr__", "(", ")", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "outs", "[", "1", "]", "*", "outs", "[", "0", "]", "\n", "self", ".", "n_params", "=", "get_params", "(", "self", ")", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "elif", "isinstance", "(", "self", ",", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "# NOTE: this function is correct only when stride == kernel size", "\n", "        ", "self", ".", "n_macs", "=", "ins", "[", "1", "]", "*", "ins", "[", "2", "]", "*", "ins", "[", "3", "]", "*", "ins", "[", "0", "]", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "run_forward", "(", "self", ",", "input", ")", "\n", "self", ".", "name", "=", "self", ".", "__repr__", "(", ")", "\n", "", "else", ":", "\n", "# This works only in depth-first travel of modules.", "\n", "        ", "self", ".", "n_macs", "=", "0", "\n", "self", ".", "n_params", "=", "0", "\n", "self", ".", "n_seconds", "=", "0", "\n", "num_children", "=", "0", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "self", ".", "n_macs", "+=", "getattr", "(", "m", ",", "\"n_macs\"", ",", "0", ")", "\n", "self", ".", "n_params", "+=", "getattr", "(", "m", ",", "\"n_params\"", ",", "0", ")", "\n", "self", ".", "n_seconds", "+=", "getattr", "(", "m", ",", "\"n_seconds\"", ",", "0", ")", "\n", "num_children", "+=", "1", "\n", "", "ignore_zeros_t", "=", "[", "\n", "nn", ".", "BatchNorm2d", ",", "\n", "nn", ".", "Dropout2d", ",", "\n", "nn", ".", "Dropout", ",", "\n", "nn", ".", "Sequential", ",", "\n", "nn", ".", "ReLU6", ",", "\n", "nn", ".", "ReLU", ",", "\n", "nn", ".", "MaxPool2d", ",", "\n", "nn", ".", "modules", ".", "padding", ".", "ZeroPad2d", ",", "\n", "nn", ".", "modules", ".", "activation", ".", "Sigmoid", ",", "\n", "]", "\n", "if", "(", "\n", "not", "getattr", "(", "self", ",", "\"ignore_model_profiling\"", ",", "False", ")", "\n", "and", "self", ".", "n_macs", "==", "0", "\n", "and", "t", "not", "in", "ignore_zeros_t", "\n", ")", ":", "\n", "            ", "print", "(", "\"WARNING: leaf module {} has zero n_macs.\"", ".", "format", "(", "type", "(", "self", ")", ")", ")", "\n", "", "return", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\n", "self", ".", "name", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "self", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.add_profiling_hooks": [[159, 164], ["model_profiling_hooks.append", "m.register_forward_hook", "profiling.module_profiling"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.module_profiling"], ["", "def", "add_profiling_hooks", "(", "m", ",", "verbose", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "model_profiling_hooks", ".", "append", "(", "\n", "m", ".", "register_forward_hook", "(", "\n", "lambda", "m", ",", "input", ",", "output", ":", "module_profiling", "(", "m", ",", "input", ",", "output", ",", "verbose", "=", "verbose", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.remove_profiling_hooks": [[168, 173], ["h.remove"], "function", ["None"], ["", "def", "remove_profiling_hooks", "(", ")", ":", "\n", "    ", "global", "model_profiling_hooks", "\n", "for", "h", "in", "model_profiling_hooks", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "", "model_profiling_hooks", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.model_profiling": [[175, 225], ["model.to.eval", "torch.rand", "torch.rand", "torch.device", "torch.device", "model.to.to", "data.to.to", "model.to.apply", "print", "model.to.", "print", "profiling.remove_profiling_hooks", "print", "print", "profiling.add_profiling_hooks"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.remove_profiling_hooks", "home.repos.pwc.inspect_result.chrundle_biprop.utils.profiling.add_profiling_hooks"], ["", "def", "model_profiling", "(", "\n", "model", ",", "height", ",", "width", ",", "batch", "=", "1", ",", "channel", "=", "3", ",", "use_cuda", "=", "True", ",", "verbose", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\" Pytorch model profiling with input image size\n    (batch, channel, height, width).\n    The function exams the number of multiply-accumulates (n_macs).\n    Args:\n        model: pytorch model\n        height: int\n        width: int\n        batch: int\n        channel: int\n        use_cuda: bool\n    Returns:\n        macs: int\n        params: int\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "data", "=", "torch", ".", "rand", "(", "batch", ",", "channel", ",", "height", ",", "width", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "\n", "model", ".", "apply", "(", "lambda", "m", ":", "add_profiling_hooks", "(", "m", ",", "verbose", "=", "verbose", ")", ")", "\n", "\n", "print", "(", "\n", "\"Item\"", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"params\"", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"macs\"", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"nanosecs\"", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ".", "center", "(", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "\"-\"", ")", ")", "\n", "\n", "", "model", "(", "data", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"\"", ".", "center", "(", "name_space", "+", "params_space", "+", "macs_space", "+", "seconds_space", ",", "\"-\"", ")", ")", "\n", "\n", "", "print", "(", "\n", "\"Total\"", ".", "ljust", "(", "name_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_params", ")", ".", "rjust", "(", "params_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_macs", ")", ".", "rjust", "(", "macs_space", ",", "\" \"", ")", "\n", "+", "\"{:,}\"", ".", "format", "(", "model", ".", "n_seconds", ")", ".", "rjust", "(", "seconds_space", ",", "\" \"", ")", "\n", ")", "\n", "\n", "remove_profiling_hooks", "(", ")", "\n", "\n", "return", "model", ".", "n_macs", ",", "model", ".", "n_params", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.LabelSmoothing.__init__": [[179, 188], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.LabelSmoothing.forward": [[189, 197], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.SubnetL1RegLoss.__init__": [[200, 202], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.SubnetL1RegLoss.forward": [[203, 210], ["model.named_parameters", "n.endswith"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model", ",", "temperature", "=", "1.0", ")", ":", "\n", "        ", "l1_accum", "=", "0.0", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "n", ".", "endswith", "(", "\"scores\"", ")", ":", "\n", "                ", "l1_accum", "+=", "(", "p", "*", "temperature", ")", ".", "sigmoid", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "l1_accum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint": [[12, 27], ["pathlib.Path", "torch.save", "torch.save", "pathlib.Path.parent.exists", "os.makedirs", "shutil.copyfile", "str", "pathlib.Path.exists", "print", "os.remove"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "\"checkpoint.pth\"", ",", "save", "=", "False", ")", ":", "\n", "    ", "filename", "=", "pathlib", ".", "Path", "(", "filename", ")", "\n", "\n", "if", "not", "filename", ".", "parent", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "filename", ".", "parent", ")", "\n", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "str", "(", "filename", ".", "parent", "/", "\"model_best.pth\"", ")", ")", "\n", "\n", "if", "not", "save", ":", "\n", "            ", "if", "filename", ".", "exists", "(", ")", ":", "\n", "                ", "print", "(", "\"file exists\"", ")", "\n", "os", ".", "remove", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_lr": [[29, 31], ["None"], "function", ["None"], ["", "", "", "", "def", "get_lr", "(", "optimizer", ")", ":", "\n", "    ", "return", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_weights": [[34, 89], ["print", "model.named_modules", "model.named_modules", "model.named_modules", "model.named_modules", "hasattr", "model.named_modules", "hasattr", "hasattr", "print", "print", "hasattr", "print", "hasattr", "hasattr", "print", "print", "print", "print", "print", "print", "hasattr", "print", "print", "print"], "function", ["None"], ["", "def", "freeze_model_weights", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Freezing model weights\"", ")", "\n", "if", "parser_args", ".", "learn_batchnorm", "is", "True", ":", "#trains bias, weights, scores", "\n", "        ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "m", ",", "\"bias\"", ")", "or", "m", ".", "bias", "is", "None", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "print", "(", "f\"==> No gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "print", "(", "f\"==> Setting gradient of {n}.weight to None\"", ")", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "\n", "# For tuning batchnorm parameters after identifying subnet (will not learn subnet mask)", "\n", "", "", "", "", "if", "parser_args", ".", "tune_batchnorm", "is", "True", ":", "#trains bias, weights", "\n", "            ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "                    ", "m", ".", "scores", ".", "requires_grad", "=", "False", "\n", "print", "(", "f\"==> No gradient to {n}.scores\"", ")", "\n", "if", "m", ".", "scores", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "print", "(", "f\"==> Setting gradient of {n}.scores to None\"", ")", "\n", "m", ".", "scores", ".", "grad", "=", "None", "\n", "\n", "", "", "", "", "", "elif", "parser_args", ".", "bn_bias_only", "is", "True", ":", "#trains bias, scores", "\n", "        ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> No gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "print", "(", "f\"==> Setting gradient of {n}.weight to None\"", ")", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "", "", "", "if", "parser_args", ".", "tune_batchnorm", "is", "True", ":", "#trains bias only", "\n", "            ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "                    ", "m", ".", "scores", ".", "requires_grad", "=", "False", "\n", "print", "(", "f\"==> No gradient to {n}.scores\"", ")", "\n", "if", "m", ".", "scores", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "print", "(", "f\"==> Setting gradient of {n}.scores to None\"", ")", "\n", "m", ".", "scores", ".", "grad", "=", "None", "\n", "\n", "", "", "", "", "", "else", ":", "#trains scores only", "\n", "        ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> No gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "print", "(", "f\"==> Setting gradient of {n}.weight to None\"", ")", "\n", "m", ".", "weight", ".", "grad", "=", "None", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "print", "(", "f\"==> No gradient to {n}.bias\"", ")", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "if", "m", ".", "bias", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "print", "(", "f\"==> Setting gradient of {n}.bias to None\"", ")", "\n", "m", ".", "bias", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.get_params": [[90, 109], ["model.named_modules", "hasattr", "weights.extend", "hasattr", "biases.extend", "hasattr", "scores.extend", "m.weight.tolist", "weights_grad.extend", "m.bias.tolist", "m.scores.tolist", "scores_grad.extend", "m.weight.grad.tolist", "m.scores.grad.tolist"], "function", ["None"], ["", "", "", "", "", "", "def", "get_params", "(", "model", ")", ":", "\n", "    ", "weights", "=", "[", "]", "\n", "biases", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "weights_grad", "=", "[", "]", "\n", "scores_grad", "=", "[", "]", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "weights", ".", "extend", "(", "m", ".", "weight", ".", "tolist", "(", ")", ")", "\n", "if", "m", ".", "weight", ".", "grad", "is", "not", "None", ":", "\n", "                ", "weights_grad", ".", "extend", "(", "m", ".", "weight", ".", "grad", ".", "tolist", "(", ")", ")", "\n", "", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "biases", ".", "extend", "(", "m", ".", "bias", ".", "tolist", "(", ")", ")", "\n", "", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", "and", "m", ".", "scores", "is", "not", "None", ":", "\n", "            ", "scores", ".", "extend", "(", "m", ".", "scores", ".", "tolist", "(", ")", ")", "\n", "if", "m", ".", "scores", ".", "grad", "is", "not", "None", ":", "\n", "                ", "scores_grad", ".", "extend", "(", "m", ".", "scores", ".", "grad", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "", "return", "weights", ",", "biases", ",", "scores", ",", "weights_grad", ",", "scores_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_subnet": [[110, 120], ["print", "model.named_modules", "hasattr", "print", "print"], "function", ["None"], ["", "def", "freeze_model_subnet", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Freezing model subnet\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "            ", "m", ".", "scores", ".", "requires_grad", "=", "False", "\n", "print", "(", "f\"==> No gradient to {n}.scores\"", ")", "\n", "if", "m", ".", "scores", ".", "grad", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> Setting gradient of {n}.scores to None\"", ")", "\n", "m", ".", "scores", ".", "grad", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.unfreeze_model_weights": [[122, 132], ["print", "model.named_modules", "hasattr", "print", "hasattr", "print"], "function", ["None"], ["", "", "", "", "def", "unfreeze_model_weights", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Unfreezing model weights\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "            ", "print", "(", "f\"==> Gradient to {n}.weight\"", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "print", "(", "f\"==> Gradient to {n}.bias\"", ")", "\n", "m", ".", "bias", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.unfreeze_model_subnet": [[134, 141], ["print", "model.named_modules", "hasattr", "print"], "function", ["None"], ["", "", "", "", "def", "unfreeze_model_subnet", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"=> Unfreezing model subnet\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"scores\"", ")", ":", "\n", "            ", "print", "(", "f\"==> Gradient to {n}.scores\"", ")", "\n", "m", ".", "scores", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.bn_weight_init": [[142, 153], ["model.named_modules", "str", "type", "hasattr", "hasattr", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "print", "torch.nn.init.constant_", "torch.nn.init.constant_", "print"], "function", ["None"], ["", "", "", "def", "bn_weight_init", "(", "model", ",", "weight", ",", "bias", ")", ":", "\n", "    ", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "(", "str", "(", "type", "(", "m", ")", ")", "==", "\"<class 'utils.bn_type.AffineBatchNorm'>\"", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "\"weight\"", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "if", "weight", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "0", ",", "(", "1", "/", "(", "1200", "**", "0.5", ")", ")", ")", "\n", "print", "(", "f\"==> Setting weight of {n} to uniform (0,1/sqrt(1200))\"", ")", "\n", "", "", "if", "hasattr", "(", "m", ",", "\"bias\"", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "if", "bias", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "bias", ")", "\n", "print", "(", "f\"==> Setting bias of {n} to {bias}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.set_model_prune_rate": [[154, 161], ["print", "model.named_modules", "hasattr", "m.set_prune_rate", "print"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.set_prune_rate"], ["", "", "", "", "", "def", "set_model_prune_rate", "(", "model", ",", "prune_rate", ")", ":", "\n", "    ", "print", "(", "f\"==> Setting prune rate of network to {prune_rate}\"", ")", "\n", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "\"set_prune_rate\"", ")", ":", "\n", "            ", "m", ".", "set_prune_rate", "(", "prune_rate", ")", "\n", "print", "(", "f\"==> Setting prune rate of {n} to {prune_rate}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.accumulate": [[163, 172], ["model.children", "f", "net_utils.accumulate"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.accumulate"], ["", "", "", "def", "accumulate", "(", "model", ",", "f", ")", ":", "\n", "    ", "acc", "=", "0.0", "\n", "\n", "for", "child", "in", "model", ".", "children", "(", ")", ":", "\n", "        ", "acc", "+=", "accumulate", "(", "child", ",", "f", ")", "\n", "\n", "", "acc", "+=", "f", "(", "model", ")", "\n", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.BiRealAct.__init__": [[13, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.BiRealAct.forward": [[16, 27], ["torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "mask1.type", "mask2.type", "mask3.type", "torch.sign.detach", "torch.sign.detach", "torch.sign.detach", "out3.detach", "mask1.type", "mask2.type", "mask3.type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out_forward", "=", "torch", ".", "sign", "(", "x", ")", "\n", "out_e_total", "=", "0", "\n", "mask1", "=", "x", "<", "-", "1", "\n", "mask2", "=", "x", "<", "0", "\n", "mask3", "=", "x", "<", "1", "\n", "out1", "=", "(", "-", "1", ")", "*", "mask1", ".", "type", "(", "torch", ".", "float32", ")", "+", "(", "x", "*", "x", "+", "2", "*", "x", ")", "*", "(", "1", "-", "mask1", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "out2", "=", "out1", "*", "mask2", ".", "type", "(", "torch", ".", "float32", ")", "+", "(", "-", "x", "*", "x", "+", "2", "*", "x", ")", "*", "(", "1", "-", "mask2", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "out3", "=", "out2", "*", "mask3", ".", "type", "(", "torch", ".", "float32", ")", "+", "1", "*", "(", "1", "-", "mask3", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "out", "=", "out_forward", ".", "detach", "(", ")", "-", "out3", ".", "detach", "(", ")", "+", "out3", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.__init__": [[30, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "conv_layer", ",", "bn_layer", ",", "first_layer", "=", "None", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "conv_layer", "\n", "self", ".", "bn_layer", "=", "bn_layer", "\n", "self", ".", "first_layer", "=", "first_layer", "or", "conv_layer", "\n", "#self.bn_weight_init(bn_layer)", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv": [[36, 79], ["builder.Builder._init_conv", "print", "conv_layer", "conv_layer", "conv_layer", "str", "conv_layer"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder._init_conv"], ["", "def", "conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "print", "(", "f\"==> Building first layer with {str(self.first_layer)}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "_init_conv", "(", "conv", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv": [[80, 126], ["builder.Builder._init_conv", "print", "conv_layer", "conv_layer", "conv_layer", "str", "conv_layer"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder._init_conv"], ["", "def", "group_conv", "(", "self", ",", "kernel_size", ",", "in_planes", ",", "out_planes", ",", "groups", "=", "1", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "conv_layer", "=", "self", ".", "first_layer", "if", "first_layer", "else", "self", ".", "conv_layer", "\n", "\n", "if", "first_layer", ":", "\n", "            ", "print", "(", "f\"==> Building first layer with {str(self.first_layer)}\"", ")", "\n", "\n", "", "if", "kernel_size", "==", "3", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "groups", "=", "groups", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "1", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n", "", "elif", "kernel_size", "==", "5", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "5", ",", "\n", "groups", "=", "groups", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "elif", "kernel_size", "==", "7", ":", "\n", "            ", "conv", "=", "conv_layer", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "7", ",", "\n", "groups", "=", "groups", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "self", ".", "_init_conv", "(", "conv", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3": [[127, 131], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv"], ["", "def", "conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv3x3": [[132, 136], ["builder.Builder.group_conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv"], ["", "def", "group_conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "groups", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"3x3 convolution with padding and groups\"\"\"", "\n", "c", "=", "self", ".", "group_conv", "(", "3", ",", "in_planes", ",", "out_planes", ",", "groups", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1": [[137, 141], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv"], ["", "def", "conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv1x1": [[142, 146], ["builder.Builder.group_conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv"], ["", "def", "group_conv1x1", "(", "self", ",", "in_planes", ",", "out_planes", ",", "groups", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"1x1 convolution with padding and groups\"\"\"", "\n", "c", "=", "self", ".", "group_conv", "(", "1", ",", "in_planes", ",", "out_planes", ",", "groups", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7": [[147, 151], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv"], ["", "def", "conv7x7", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"7x7 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "7", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv5x5": [[152, 156], ["builder.Builder.conv"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv"], ["", "def", "conv5x5", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "\"\"\"5x5 convolution with padding\"\"\"", "\n", "c", "=", "self", ".", "conv", "(", "5", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "first_layer", "=", "first_layer", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm": [[157, 159], ["builder.Builder.bn_layer"], "methods", ["None"], ["", "def", "batchnorm", "(", "self", ",", "planes", ",", "last_bn", "=", "False", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "return", "self", ".", "bn_layer", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation": [[160, 167], ["ValueError", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BiRealAct", "torch.BiRealAct", "torch.BiRealAct"], "methods", ["None"], ["", "def", "activation", "(", "self", ")", ":", "\n", "        ", "if", "args", ".", "nonlinearity", "==", "\"relu\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "(", ")", "\n", "", "elif", "args", ".", "nonlinearity", "==", "\"BinAct\"", ":", "\n", "            ", "return", "(", "lambda", ":", "nn", ".", "BiRealAct", "(", ")", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.nonlinearity} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.bn_weight_init": [[168, 174], ["torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "", "def", "bn_weight_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "bn_weight_init", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "args", ".", "bn_weight_init", ")", "\n", "", "if", "args", ".", "bn_bias_init", "is", "not", "None", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "args", ".", "bn_bias_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder._init_conv": [[175, 258], ["torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "conv.weight.data.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "conv.weight.data.bernoulli", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "math.sqrt", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "conv.weight.data.bernoulli", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init._calculate_correct_fan", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "math.sqrt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "conv.weight.data.normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "torch.init._calculate_fan_in_and_fan_out", "math.sqrt", "conv.weight.data.sign", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "ValueError", "float", "math.sqrt"], "methods", ["None"], ["", "", "", "def", "_init_conv", "(", "self", ",", "conv", ")", ":", "\n", "        ", "if", "args", ".", "init", "==", "\"signed_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"unsigned_constant\"", ":", "\n", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"kaiming_normal\"", ":", "\n", "\n", "            ", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "", "", "elif", "args", ".", "init", "==", "\"bernoulli\"", ":", "\n", "            ", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "bernoulli", "(", "p", "=", "0.5", ")", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"ones\"", ":", "\n", "            ", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "\n", "", "elif", "args", ".", "init", "==", "\"usc_bernoulli\"", ":", "\n", "            ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "\n", "", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "conv", ".", "weight", ".", "data", "=", "torch", ".", "ones_like", "(", "conv", ".", "weight", ".", "data", ")", "*", "std", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "bernoulli", "(", "p", "=", "0.5", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"binary\"", ":", "\n", "\n", "            ", "if", "args", ".", "scale_fan", ":", "\n", "                ", "fan", "=", "nn", ".", "init", ".", "_calculate_correct_fan", "(", "conv", ".", "weight", ",", "args", ".", "mode", ")", "\n", "fan", "=", "fan", "*", "(", "1", "-", "args", ".", "prune_rate", ")", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "args", ".", "nonlinearity", ")", "\n", "std", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "conv", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "std", ")", "\n", "", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "\n", "# Binarize weights using sign function ", "\n", "", "conv", ".", "weight", "=", "torch", ".", "sign", "(", "conv", ".", "weight", ")", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"kaiming_uniform\"", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "conv", ".", "weight", ",", "mode", "=", "args", ".", "mode", ",", "nonlinearity", "=", "args", ".", "nonlinearity", "\n", ")", "\n", "", "elif", "args", ".", "init", "==", "\"xavier_normal\"", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "conv", ".", "weight", ")", "\n", "", "elif", "args", ".", "init", "==", "\"xavier_constant\"", ":", "\n", "\n", "            ", "fan_in", ",", "fan_out", "=", "nn", ".", "init", ".", "_calculate_fan_in_and_fan_out", "(", "conv", ".", "weight", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "conv", ".", "weight", ".", "data", "=", "conv", ".", "weight", ".", "data", ".", "sign", "(", ")", "*", "std", "\n", "\n", "", "elif", "args", ".", "init", "==", "\"standard\"", ":", "\n", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"{args.init} is not an initialization option!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder": [[261, 279], ["print", "print", "getattr", "getattr", "builder.Builder", "getattr", "print"], "function", ["None"], ["", "", "", "def", "get_builder", "(", ")", ":", "\n", "\n", "    ", "print", "(", "\"==> Conv Type: {}\"", ".", "format", "(", "args", ".", "conv_type", ")", ")", "\n", "print", "(", "\"==> BN Type: {}\"", ".", "format", "(", "args", ".", "bn_type", ")", ")", "\n", "\n", "conv_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "conv_type", ")", "\n", "bn_layer", "=", "getattr", "(", "utils", ".", "bn_type", ",", "args", ".", "bn_type", ")", "\n", "\n", "\n", "if", "args", ".", "first_layer_type", "is", "not", "None", ":", "\n", "        ", "first_layer", "=", "getattr", "(", "utils", ".", "conv_type", ",", "args", ".", "first_layer_type", ")", "\n", "print", "(", "f\"==> First Layer Type: {args.first_layer_type}\"", ")", "\n", "", "else", ":", "\n", "        ", "first_layer", "=", "None", "\n", "\n", "", "builder", "=", "Builder", "(", "conv_layer", "=", "conv_layer", ",", "bn_layer", "=", "bn_layer", ",", "first_layer", "=", "first_layer", ")", "\n", "\n", "return", "builder", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetSubnet.forward": [[15, 28], ["scores.clone", "scores.flatten().sort", "int", "scores.clone.flatten", "scores.flatten", "scores.numel"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ",", "k", ")", ":", "\n", "# Get the subnetwork by sorting the scores and using the top k%", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "scores", ".", "flatten", "(", ")", ".", "sort", "(", ")", "\n", "j", "=", "int", "(", "(", "1", "-", "k", ")", "*", "scores", ".", "numel", "(", ")", ")", "\n", "\n", "# flat_out and out access the same memory", "\n", "flat_out", "=", "out", ".", "flatten", "(", ")", "\n", "flat_out", "[", "idx", "[", ":", "j", "]", "]", "=", "0", "\n", "flat_out", "[", "idx", "[", "j", ":", "]", "]", "=", "1", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetSubnet.backward": [[29, 33], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# send the gradient g straight-through on the backward pass.", "\n", "        ", "return", "g", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetQuantnet_binary_old.forward": [[35, 55], ["scores.clone", "scores.flatten().sort", "int", "scores.clone.flatten", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "int", "weights.clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "scores.flatten", "scores.numel", "scores.numel"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ",", "weights", ",", "k", ")", ":", "\n", "# Get the subnetwork by sorting the scores and using the top k%", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "scores", ".", "flatten", "(", ")", ".", "sort", "(", ")", "\n", "j", "=", "int", "(", "(", "1", "-", "k", ")", "*", "scores", ".", "numel", "(", ")", ")", "\n", "# flat_out and out access the same memory. switched 0 and 1", "\n", "flat_out", "=", "out", ".", "flatten", "(", ")", "\n", "flat_out", "[", "idx", "[", ":", "j", "]", "]", "=", "0", "\n", "flat_out", "[", "idx", "[", "j", ":", "]", "]", "=", "1", "\n", "## Perform binary quantization of weights", "\n", "abs_wgt", "=", "torch", ".", "abs", "(", "weights", ".", "clone", "(", ")", ")", "# Absolute value of original weights", "\n", "q_weight", "=", "abs_wgt", "*", "out", "# Remove pruned weights", "\n", "num_unpruned", "=", "int", "(", "k", "*", "scores", ".", "numel", "(", ")", ")", "# Number of unpruned weights", "\n", "alpha", "=", "torch", ".", "sum", "(", "q_weight", ")", "/", "num_unpruned", "# Compute alpha = || q_weight ||_1 / (number of unpruned weights)", "\n", "# Reset q_weight because we don't want to divide by zero", "\n", "q_weight", "=", "1", "/", "abs_wgt", "# Take reciprocal of absolute value of weights", "\n", "q_weight", "=", "q_weight", "*", "out", "# Remove pruned weights", "\n", "q_weight", "=", "alpha", "*", "q_weight", "# Multiply each element of q_weight by alpha", "\n", "return", "q_weight", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetQuantnet_binary_old.backward": [[55, 59], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# send the gradient g straight-through on the backward pass.", "\n", "        ", "return", "g", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetQuantnet_binary.forward": [[61, 83], ["scores.clone", "scores.flatten().sort", "int", "scores.clone.flatten", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "int", "ctx.save_for_backward", "weights.clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "scores.flatten", "scores.numel", "scores.numel"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ",", "weights", ",", "k", ")", ":", "\n", "# Get the subnetwork by sorting the scores and using the top k%", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "scores", ".", "flatten", "(", ")", ".", "sort", "(", ")", "\n", "j", "=", "int", "(", "(", "1", "-", "k", ")", "*", "scores", ".", "numel", "(", ")", ")", "\n", "# flat_out and out access the same memory. switched 0 and 1", "\n", "flat_out", "=", "out", ".", "flatten", "(", ")", "\n", "flat_out", "[", "idx", "[", ":", "j", "]", "]", "=", "0", "\n", "flat_out", "[", "idx", "[", "j", ":", "]", "]", "=", "1", "\n", "\n", "# Perform binary quantization of weights", "\n", "abs_wgt", "=", "torch", ".", "abs", "(", "weights", ".", "clone", "(", ")", ")", "# Absolute value of original weights", "\n", "q_weight", "=", "abs_wgt", "*", "out", "# Remove pruned weights", "\n", "num_unpruned", "=", "int", "(", "k", "*", "scores", ".", "numel", "(", ")", ")", "# Number of unpruned weights", "\n", "alpha", "=", "torch", ".", "sum", "(", "q_weight", ")", "/", "num_unpruned", "# Compute alpha = || q_weight ||_1 / (number of unpruned weights)", "\n", "\n", "# Save absolute value of weights for backward", "\n", "ctx", ".", "save_for_backward", "(", "abs_wgt", ")", "\n", "\n", "# Return pruning mask with gain term alpha for binary weights", "\n", "return", "alpha", "*", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetQuantnet_binary.backward": [[84, 90], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# Get absolute value of weights from saved ctx", "\n", "        ", "abs_wgt", ",", "=", "ctx", ".", "saved_tensors", "\n", "# send the gradient g times abs_wgt on the backward pass", "\n", "return", "g", "*", "abs_wgt", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SubnetConv.__init__": [[92, 97], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_type.SubnetConv.weight.size", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "#  print (\"subnet conv init: \", torch.isnan(self.scores).any())", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SubnetConv.set_prune_rate": [[99, 101], ["None"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SubnetConv.clamped_scores": [[102, 106], ["conv_type.SubnetConv.scores.abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "clamped_scores", "(", "self", ")", ":", "\n", "# For unquantized activations", "\n", "        ", "return", "self", ".", "scores", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SubnetConv.forward": [[107, 121], ["GetQuantnet_binary.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# For debugging gradients, prints out maximum value in gradients", "\n", "        ", "if", "parser_args", ".", "debug", ":", "\n", "            ", "if", "quantnet", ".", "grad", ":", "print", "(", "\"subnetconv fwd quantnet grad \"", ",", "torch", ".", "max", "(", "quantnet", ".", "grad", ")", ")", "\n", "# Get binary mask and gain term for subnetwork", "\n", "", "quantnet", "=", "GetQuantnet_binary", ".", "apply", "(", "self", ".", "clamped_scores", ",", "self", ".", "weight", ",", "self", ".", "prune_rate", ")", "\n", "# Binarize weights by taking sign, multiply by pruning mask and gain term (alpha)", "\n", "w", "=", "torch", ".", "sign", "(", "self", ".", "weight", ")", "*", "quantnet", "\n", "# Pass binary subnetwork weights to convolution layer", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "# Return output from convolution layer", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetGlobalSubnet.forward": [[124, 151], ["scores.clone", "cond.to.to.to", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "int", "ctx.save_for_backward", "prune_threshold.to", "weights.clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.where.numel", "torch.where.numel", "torch.where.numel", "torch.where.numel", "torch.where.numel", "torch.where.numel", "torch.where.numel", "torch.where.numel"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ",", "weights", ",", "prune_threshold", ")", ":", "\n", "# Get pruning mask by setting all values below ", "\n", "# prune_threshold to 0 and all others to 1", "\n", "        ", "out", "=", "scores", ".", "clone", "(", ")", "\n", "# To work in multigpu setup, need to ensure prune_threshold is on same device as output", "\n", "cond", "=", "out", ">", "prune_threshold", ".", "to", "(", "out", ".", "device", ")", "\n", "cond", "=", "cond", ".", "to", "(", "out", ".", "device", ")", "\n", "zero", "=", "torch", ".", "as_tensor", "(", "0.0", ",", "device", "=", "out", ".", "device", ")", "\n", "one", "=", "torch", ".", "as_tensor", "(", "1.0", ",", "device", "=", "out", ".", "device", ")", "\n", "# Only keep weights that are above threshold (in absolute value)", "\n", "out", "=", "torch", ".", "where", "(", "cond", ",", "one", ",", "zero", ")", "\n", "\n", "# Perform binary quantization of weights", "\n", "abs_wgt", "=", "torch", ".", "abs", "(", "weights", ".", "clone", "(", ")", ")", "# Absolute value of original weights", "\n", "q_weight", "=", "abs_wgt", "*", "out", "# Remove pruned weights", "\n", "num_unpruned", "=", "int", "(", "torch", ".", "sum", "(", "out", ")", ")", "# Number of unpruned weights", "\n", "# If fewer than 1% of weights remain then print percentage of weights", "\n", "if", "(", "num_unpruned", "/", "out", ".", "numel", "(", ")", "<", "0.0001", ")", ":", "\n", "          ", "print", "(", "\"Percentage of unpruned weights =\"", ",", "num_unpruned", "/", "out", ".", "numel", "(", ")", ")", "\n", "", "alpha", "=", "torch", ".", "sum", "(", "q_weight", ")", "/", "num_unpruned", "# Compute alpha = || q_weight ||_1 / (number of unpruned weights)", "\n", "\n", "# Save absolute value of weights for backward", "\n", "ctx", ".", "save_for_backward", "(", "abs_wgt", ")", "\n", "\n", "# Return pruning mask with gain term alpha for binary weights", "\n", "return", "alpha", "*", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GetGlobalSubnet.backward": [[152, 158], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "g", ")", ":", "\n", "# Get absolute value of weights from saved ctx", "\n", "        ", "abs_wgt", ",", "=", "ctx", ".", "saved_tensors", "\n", "# send the gradient g times abs_wgt on the backward pass.", "\n", "return", "g", "*", "abs_wgt", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.__init__": [[161, 166], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_type.GlobalSubnetConv.weight.size", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "#  print (\"subnet conv init: \", torch.isnan(self.scores).any())", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.set_prune_rate": [[168, 170], ["None"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.set_prune_threshold": [[171, 173], ["None"], "methods", ["None"], ["", "def", "set_prune_threshold", "(", "self", ",", "prune_threshold", ")", ":", "\n", "        ", "self", ".", "prune_threshold", "=", "prune_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.clamped_scores": [[174, 178], ["conv_type.GlobalSubnetConv.scores.abs"], "methods", ["None"], ["", "@", "property", "\n", "def", "clamped_scores", "(", "self", ")", ":", "\n", "# For unquantized activations", "\n", "        ", "return", "self", ".", "scores", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.forward": [[179, 196], ["GetGlobalSubnet.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "print", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# For debugging gradients, prints out maximum value in gradients", "\n", "        ", "if", "parser_args", ".", "debug", ":", "\n", "            ", "if", "quantnet", ".", "grad", ":", "print", "(", "\"subnetconv fwd quantnet grad \"", ",", "torch", ".", "max", "(", "quantnet", ".", "grad", ")", ")", "\n", "#print(\"in conv prune_threshold =\", self.prune_threshold)", "\n", "# Get binary mask and gain term for subnetwork", "\n", "", "quantnet", "=", "GetGlobalSubnet", ".", "apply", "(", "self", ".", "clamped_scores", ",", "self", ".", "weight", ",", "self", ".", "prune_threshold", ")", "\n", "#quantnet = GetQuantnet_binary.apply(self.clamped_scores, self.weight, self.prune_rate)", "\n", "# Binarize weights by taking sign, multiply by pruning mask and gain term (alpha)", "\n", "w", "=", "torch", ".", "sign", "(", "self", ".", "weight", ")", "*", "quantnet", "\n", "#print(\"w =\", w)", "\n", "# Pass binary subnetwork weights to convolution layer", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "# Return output from convolution layer", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.StraightThroughBinomialSample.forward": [[204, 208], ["torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ")", ":", "\n", "        ", "output", "=", "(", "torch", ".", "rand_like", "(", "scores", ")", "<", "scores", ")", ".", "float", "(", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.StraightThroughBinomialSample.backward": [[209, 212], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "return", "grad_outputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.BinomialSample.forward": [[215, 221], ["ctx.save_for_backward", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "scores", ")", ":", "\n", "        ", "output", "=", "(", "torch", ".", "rand_like", "(", "scores", ")", "<", "scores", ")", ".", "float", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.BinomialSample.backward": [[222, 230], ["grad_outputs.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "subnet", ",", "=", "ctx", ".", "saved_variables", "\n", "\n", "grad_inputs", "=", "grad_outputs", ".", "clone", "(", ")", "\n", "grad_inputs", "[", "subnet", "==", "0.0", "]", "=", "0.0", "\n", "\n", "return", "grad_inputs", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SampleSubnetConv.__init__": [[234, 244], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "conv_type.SampleSubnetConv.weight.size", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "if", "parser_args", ".", "score_init_constant", "is", "not", "None", ":", "\n", "            ", "self", ".", "scores", ".", "data", "=", "(", "\n", "torch", ".", "ones_like", "(", "self", ".", "scores", ")", "*", "parser_args", ".", "score_init_constant", "\n", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SampleSubnetConv.clamped_scores": [[245, 248], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "clamped_scores", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "sigmoid", "(", "self", ".", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.SampleSubnetConv.forward": [[249, 257], ["StraightThroughBinomialSample.apply", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "subnet", "=", "StraightThroughBinomialSample", ".", "apply", "(", "self", ".", "clamped_scores", ")", "\n", "w", "=", "self", ".", "weight", "*", "subnet", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.__init__": [[265, 270], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.init.kaiming_uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "conv_type.FixedSubnetConv.weight.size", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "scores", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "weight", ".", "size", "(", ")", ")", ")", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "self", ".", "scores", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.set_prune_rate": [[271, 274], ["print"], "methods", ["None"], ["", "def", "set_prune_rate", "(", "self", ",", "prune_rate", ")", ":", "\n", "        ", "self", ".", "prune_rate", "=", "prune_rate", "\n", "print", "(", "\"prune_rate_{}\"", ".", "format", "(", "self", ".", "prune_rate", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.set_subnet": [[275, 284], ["conv_type.FixedSubnetConv.clamped_scores().clone", "conv_type.FixedSubnetConv.clamped_scores().flatten().abs().sort", "int", "conv_type.FixedSubnetConv.flatten", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "conv_type.FixedSubnetConv.clamped_scores", "conv_type.FixedSubnetConv.clamped_scores().flatten().abs", "conv_type.FixedSubnetConv.clamped_scores().numel", "conv_type.FixedSubnetConv.clamped_scores().flatten", "conv_type.FixedSubnetConv.clamped_scores", "conv_type.FixedSubnetConv.clamped_scores"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.clamped_scores", "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.clamped_scores", "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.clamped_scores"], ["", "def", "set_subnet", "(", "self", ")", ":", "\n", "        ", "output", "=", "self", ".", "clamped_scores", "(", ")", ".", "clone", "(", ")", "\n", "_", ",", "idx", "=", "self", ".", "clamped_scores", "(", ")", ".", "flatten", "(", ")", ".", "abs", "(", ")", ".", "sort", "(", ")", "\n", "p", "=", "int", "(", "self", ".", "prune_rate", "*", "self", ".", "clamped_scores", "(", ")", ".", "numel", "(", ")", ")", "\n", "flat_oup", "=", "output", ".", "flatten", "(", ")", "\n", "flat_oup", "[", "idx", "[", ":", "p", "]", "]", "=", "0", "\n", "flat_oup", "[", "idx", "[", "p", ":", "]", "]", "=", "1", "\n", "self", ".", "scores", "=", "torch", ".", "nn", ".", "Parameter", "(", "output", ")", "\n", "self", ".", "scores", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.clamped_scores": [[285, 287], ["conv_type.FixedSubnetConv.scores.abs"], "methods", ["None"], ["", "def", "clamped_scores", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "scores", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.get_subnet": [[288, 290], ["None"], "methods", ["None"], ["", "def", "get_subnet", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weight", "*", "self", ".", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.forward": [[291, 297], ["conv_type.FixedSubnetConv.get_subnet", "torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.FixedSubnetConv.get_subnet"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "w", "=", "self", ".", "get_subnet", "(", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "\n", "x", ",", "w", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy": [[4, 19], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.anomaly.train": [[12, 110], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "model.state_dict", "len", "enumerate", "len", "torch.autograd.detect_anomaly", "utils.logging.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "writer.add_histogram", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "time.time", "time.time", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "        ", "with", "torch", ".", "autograd", ".", "detect_anomaly", "(", ")", ":", "\n", "# measure data loading time", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "## Write scores and weights to tensorboard at beginning of every other epoch", "\n", "#if (i % (num_batches * batch_size) == 0) and (epoch % 2 == 0):", "\n", "#  for param_name in model.state_dict():", "\n", "#    # Only write scores for now (not weights and batch norm parameters since the pytorch parms don't actually change)", "\n", "#    if 'score' in param_name:", "\n", "#      writer.add_histogram(param_name, model.state_dict()[param_name], epoch)", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Clamp updated scores to [-1,1] only when using binarized/quantized activations", "\n", "#for param_name in model.state_dict():", "\n", "#  if 'score' in param_name:", "\n", "#    #print(param_name)", "\n", "#    scores = model.state_dict()[param_name]", "\n", "#    #scores = torch.clamp(scores,min=-1.0,max=1.0)", "\n", "#    scores.clamp_(min=-1.0,max=1.0)", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "#print(model.state_dict()['module.linear.3.scores'].grad)", "\n", "#params = list(model.parameters())", "\n", "#print(params[1].grad)", "\n", "\n", "#if i % args.print_freq == 0:", "\n", "#    t = (num_batches * epoch + i) * batch_size", "\n", "#    progress.display(i)", "\n", "#    progress.write_to_tensorboard(writer, prefix=\"train\", global_step=t)", "\n", "\n", "## Write score gradients to tensorboard at end of every other epoch", "\n", "#if ((i+1) % (num_batches-1) == 0) and (epoch % 2 == 0):", "\n", "#  params = list(model.parameters())", "\n", "#  param_names = list(model.state_dict())", "\n", "#  for j in range(len(params)):", "\n", "#    if 'score' in param_names[j] and params[j].grad is not None:", "\n", "#      #print(param_names[j])", "\n", "#      #print(params[j].grad)", "\n", "#      writer.add_histogram(param_names[j] + '.grad', params[j].grad, epoch)", "\n", "#  #for param_name in model.state_dict():", "\n", "#  #  if 'score' in param_name:", "\n", "#  #    writer.add_histogram(param_name + '.grad', model.state_dict()[param_name].grad, epoch)", "\n", "#  #params = list(model.parameters())", "\n", "#  #for j in range(len(params)):", "\n", "#  #  writer.add_histogram('Layer' + str(j) + 'grad', params[j].grad, epoch)", "\n", "\n", "# Write final scores and weights to tensorboard", "\n", "", "", "for", "param_name", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "#writer.add_histogram(param_name, model.state_dict()[param_name], epoch)", "\n", "# Only write scores for now (not weights and batch norm parameters since the pytorch parms don't actually change)", "\n", "      ", "if", "'score'", "in", "param_name", ":", "\n", "        ", "writer", ".", "add_histogram", "(", "param_name", ",", "model", ".", "state_dict", "(", ")", "[", "param_name", "]", ",", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.anomaly.validate": [[112, 158], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.anomaly.modifier": [[159, 161], ["None"], "function", ["None"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.global_prune_threshold": [[13, 44], ["model.named_modules", "torch.cat", "torch.cat", "torch.cat.sort", "int", "model.named_modules", "hasattr", "hasattr", "p_list.append", "torch.cat.numel", "m.set_prune_threshold", "m.scores.clone().abs().flatten", "m.scores.clone().abs", "m.scores.clone"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.conv_type.GlobalSubnetConv.set_prune_threshold"], ["def", "global_prune_threshold", "(", "model", ",", "args", ")", ":", "\n", "# Loop over all model parameters and concat flattened score tensors", "\n", "# Initialize list for storing parameters with scores", "\n", "    ", "p_list", "=", "[", "]", "\n", "# Loop over all model parameters to extract scores", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "# Only add parameters that have scores as attributes", "\n", "      ", "if", "hasattr", "(", "m", ",", "'scores'", ")", ":", "\n", "# Add flattened clone of scores.abs() to p_list", "\n", "        ", "p_list", ".", "append", "(", "m", ".", "scores", ".", "clone", "(", ")", ".", "abs", "(", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "# Concatenate flattened clones", "\n", "", "", "z", "=", "torch", ".", "cat", "(", "p_list", ")", "\n", "# Sort z", "\n", "z", ",", "_", "=", "z", ".", "sort", "(", ")", "\n", "# Determine number of elements to prune", "\n", "p_idx", "=", "int", "(", "(", "1", "-", "args", ".", "prune_rate", ")", "*", "z", ".", "numel", "(", ")", ")", "\n", "# Identify prune_threshold for values in bottom ", "\n", "# (1-args.prune_rate) percent of scores", "\n", "prune_threshold", "=", "z", "[", "p_idx", "-", "1", "]", "\n", "#print(\"prune_threshold = \", prune_threshold)", "\n", "\n", "# Loop over all model parameters to update prune_threshold", "\n", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "# Only add parameters that have scores as attributes", "\n", "      ", "if", "hasattr", "(", "m", ",", "'scores'", ")", ":", "\n", "# Pass prune_threshold value to model parameters", "\n", "        ", "m", ".", "set_prune_threshold", "(", "prune_threshold", ")", "\n", "\n", "# Exit function", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.train": [[45, 194], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "model.state_dict", "len", "target.cuda.cuda", "default.global_prune_threshold", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "model", "torch.split", "torch.split", "criterion", "torch.clamp().log", "torch.clamp().log", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "torch.nn.utils.clip_grad_value_", "torch.nn.utils.clip_grad_value_", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "writer.add_histogram", "time.time", "torch.cat().cuda", "torch.cat().cuda", "images.cuda.cuda", "model.state_dict", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "images[].size", "torch.softmax", "torch.softmax", "torch.softmax", "criterion.item", "images[].size", "acc1.item", "images[].size", "acc5.item", "images[].size", "model.parameters", "time.time", "list", "list", "range", "writer.add_histogram", "torch.clamp", "torch.clamp", "model.parameters", "model.state_dict", "len", "model.state_dict", "torch.cat", "torch.cat", "torch.kl_div", "writer.add_histogram", "writer.add_histogram", "model.state_dict", "torch.kl_div", "torch.kl_div"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.global_prune_threshold", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "          ", "if", "args", ".", "jsd", ":", "\n", "            ", "images_all", "=", "torch", ".", "cat", "(", "images", ",", "0", ")", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Write scores and weights to tensorboard at beginning of every other epoch", "\n", "", "if", "args", ".", "histograms", ":", "\n", "          ", "if", "(", "i", "%", "(", "num_batches", "*", "batch_size", ")", "==", "0", ")", "and", "(", "epoch", "%", "2", "==", "0", ")", ":", "\n", "            ", "for", "param_name", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "#print(param_name)", "\n", "# Only write scores for now (not weights and batch norm parameters since the pytorch parms don't actually change)", "\n", "#if 'score' not in param_name:", "\n", "#if 'score' in param_name or 'weight' in param_name:", "\n", "#print(param_name, model.state_dict()[param_name])", "\n", "                ", "writer", ".", "add_histogram", "(", "param_name", ",", "model", ".", "state_dict", "(", ")", "[", "param_name", "]", ",", "epoch", ")", "\n", "\n", "# Check if global pruning is being used", "\n", "", "", "", "if", "args", ".", "conv_type", "==", "\"GlobalSubnetConv\"", ":", "\n", "# Set prune_threshold for all layers in model", "\n", "          ", "global_prune_threshold", "(", "model", ",", "args", ")", "\n", "\n", "# compute loss without Jensen-Shannon divergence", "\n", "", "if", "args", ".", "jsd", "==", "False", ":", "\n", "          ", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "else", ":", "# compute loss with Jensen-Shannon divergence", "\n", "          ", "logits_all", "=", "model", "(", "images_all", ")", "\n", "logits_clean", ",", "logits_aug1", ",", "logits_aug2", "=", "torch", ".", "split", "(", "logits_all", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "output", "=", "logits_clean", "# This is just used for accuracy function", "\n", "\n", "# Cross-entropy is only computed on clean images", "\n", "loss", "=", "criterion", "(", "logits_clean", ",", "target", ")", "\n", "\n", "# Terms for Jensen-Shannon divergence", "\n", "p_clean", ",", "p_aug1", ",", "p_aug2", "=", "F", ".", "softmax", "(", "logits_clean", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "logits_aug1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "logits_aug2", ",", "dim", "=", "1", ")", "\n", "\n", "# Clamp mixture distribution to avoid exploding KL divergence", "\n", "p_mixture", "=", "torch", ".", "clamp", "(", "(", "p_clean", "+", "p_aug1", "+", "p_aug2", ")", "/", "3.", ",", "1e-7", ",", "1", ")", ".", "log", "(", ")", "\n", "loss", "+=", "12", "*", "(", "F", ".", "kl_div", "(", "p_mixture", ",", "p_clean", ",", "reduction", "=", "'batchmean'", ")", "+", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug1", ",", "reduction", "=", "'batchmean'", ")", "+", "F", ".", "kl_div", "(", "p_mixture", ",", "p_aug2", ",", "reduction", "=", "'batchmean'", ")", ")", "/", "3.", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "logits_clean", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "#torch.nn.utils.clip_grad_norm_(model.parameters(),1)", "\n", "loss", ".", "backward", "(", ")", "\n", "# EDITED", "\n", "#print(torch.norm(torch.cat([p.grad.view(-1) for p in model.parameters()])))", "\n", "if", "args", ".", "grad_clip", ":", "torch", ".", "nn", ".", "utils", ".", "clip_grad_value_", "(", "model", ".", "parameters", "(", ")", ",", "1", ")", "\n", "#print(torch.norm(torch.cat([p.grad.view(-1) for p in model.parameters()])))", "\n", "#for param_name in model.state_dict(): print(param_name, str(model.state_dict()[param_name])[:50])", "\n", "#torch.nn.utils.clip_grad_norm_(model.parameters(),1)", "\n", "# end", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Clamp updated scores to [-1,1] only when using binarized/quantized activations", "\n", "#for param_name in model.state_dict():", "\n", "#  if 'score' in param_name:", "\n", "#    #print(param_name)", "\n", "#    scores = model.state_dict()[param_name]", "\n", "#    #scores = torch.clamp(scores,min=-1.0,max=1.0)", "\n", "#    scores.clamp_(min=-1.0,max=1.0)", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "#print(model.state_dict()['module.linear.3.scores'].grad)", "\n", "#params = list(model.parameters())", "\n", "#print(params[1].grad)", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "\n", "#_, predicted = torch.max(output, 1)", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "# Write score gradients to tensorboard at end of every other epoch", "\n", "", "if", "args", ".", "histograms", ":", "\n", "            ", "if", "(", "i", "%", "(", "num_batches", "*", "batch_size", ")", "==", "0", ")", "and", "(", "epoch", "%", "2", "==", "0", ")", ":", "\n", "#if ((i+1) % (num_batches-1) == 0) and (epoch % 2 == 0):", "\n", "              ", "params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "param_names", "=", "list", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "params", ")", ")", ":", "\n", "                  ", "if", "params", "[", "j", "]", ".", "grad", "is", "not", "None", ":", "\n", "# if 'score' in param_names[j] or 'weight' in param_names[j]:", "\n", "# if 'score' not in param_name and params[j].grad is not None:", "\n", "#print(param_names[j])", "\n", "#print(params[j].grad)", "\n", "                      ", "writer", ".", "add_histogram", "(", "param_names", "[", "j", "]", "+", "'.grad'", ",", "params", "[", "j", "]", ".", "grad", ",", "epoch", ")", "\n", "", "else", ":", "\n", "                      ", "writer", ".", "add_histogram", "(", "param_names", "[", "j", "]", "+", "'.grad'", ",", "0", ",", "epoch", ")", "\n", "#for param_name in model.state_dict():", "\n", "#  if 'score' in param_name:", "\n", "#    writer.add_histogram(param_name + '.grad', model.state_dict()[param_name].grad, epoch)", "\n", "#params = list(model.parameters())", "\n", "#for j in range(len(params)):", "\n", "#  writer.add_histogram('Layer' + str(j) + 'grad', params[j].grad, epoch)", "\n", "\n", "# Write final scores and weights to tensorboard", "\n", "", "", "", "", "", "if", "args", ".", "histograms", ":", "\n", "        ", "for", "param_name", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "#writer.add_histogram(param_name, model.state_dict()[param_name], epoch)", "\n", "# Only write scores for now (not weights and batch norm parameters since the pytorch parms don't actually change)", "\n", "#if 'score' not in param_name:", "\n", "#print(param_name, model.state_dict()[param_name])", "\n", "              ", "writer", ".", "add_histogram", "(", "param_name", ",", "model", ".", "state_dict", "(", ")", "[", "param_name", "]", ",", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.validate": [[196, 249], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "target.cuda.cuda", "default.global_prune_threshold", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.global_prune_threshold", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Check if global pruning is being used", "\n", "", "if", "args", ".", "conv_type", "==", "\"GlobalSubnetConv\"", ":", "\n", "# Set prune_threshold for all layers in model", "\n", "              ", "global_prune_threshold", "(", "model", ",", "args", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "#_, predicted = torch.max(output, 1)", "\n", "#print(predicted,target)", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.default.modifier": [[250, 252], ["None"], "function", ["None"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.lottery.train": [[20, 75], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.lottery.validate": [[77, 123], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.lottery.modifier": [[125, 150], ["utils.net_utils.set_model_prune_rate", "utils.net_utils.freeze_model_subnet", "utils.net_utils.unfreeze_model_weights", "utils.net_utils.set_model_prune_rate", "utils.net_utils.unfreeze_model_subnet", "utils.net_utils.freeze_model_weights", "utils.net_utils.save_checkpoint", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.set_model_prune_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_subnet", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.unfreeze_model_weights", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.set_model_prune_rate", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.unfreeze_model_subnet", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.freeze_model_weights", "home.repos.pwc.inspect_result.chrundle_biprop.utils.net_utils.save_checkpoint"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "if", "epoch", "==", "0", ":", "\n", "        ", "set_model_prune_rate", "(", "model", ",", "prune_rate", "=", "0.0", ")", "\n", "freeze_model_subnet", "(", "model", ")", "\n", "unfreeze_model_weights", "(", "model", ")", "\n", "\n", "", "elif", "epoch", "==", "6", ":", "\n", "        ", "set_model_prune_rate", "(", "model", ",", "prune_rate", "=", "args", ".", "prune_rate", ")", "\n", "unfreeze_model_subnet", "(", "model", ")", "\n", "freeze_model_weights", "(", "model", ")", "\n", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"arch\"", ":", "args", ".", "arch", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_acc1\"", ":", "0.0", ",", "\n", "\"best_acc5\"", ":", "0.0", ",", "\n", "\"best_train_acc1\"", ":", "0.0", ",", "\n", "\"best_train_acc5\"", ":", "0.0", ",", "\n", "\"curr_acc1\"", ":", "\"Not evaluated\"", ",", "\n", "}", ",", "\n", "False", ",", "\n", "filename", "=", "args", ".", "ckpt_base_dir", "/", "f\"epoch_2.state\"", ",", "\n", "save", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.parallel.train": [[12, 70], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "time.time", "time.time", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# NEW: Only do for main processor (one with global rank 0)", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.parallel.validate": [[72, 118], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.parallel.modifier": [[119, 121], ["None"], "function", ["None"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train": [[13, 72], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.train", "len", "time.time", "utils.net_utils.SubnetL1RegLoss", "tqdm.tqdm", "len", "enumerate", "utils.logging.AverageMeter.update", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "optimizer.zero_grad", "regloss.backward", "optimizer.step", "utils.logging.AverageMeter.update", "time.time", "len", "images.cuda.cuda", "utils.net_utils.SubnetL1RegLoss.", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "print", "utils.logging.ProgressMeter.display", "utils.logging.ProgressMeter.write_to_tensorboard", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.train", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard"], ["def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ",", "writer", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ")", "\n", "data_time", "=", "AverageMeter", "(", "\"Data\"", ",", "\":6.3f\"", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "f\"Epoch: [{epoch}]\"", ",", "\n", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_size", "=", "train_loader", ".", "batch_size", "\n", "num_batches", "=", "len", "(", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "l1reg", "=", "SubnetL1RegLoss", "(", "temperature", "=", "1.0", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "train_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "train_loader", ")", "\n", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "regloss", "=", "l1reg", "(", "model", ")", "*", "1e-8", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "regloss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "t", "=", "(", "num_batches", "*", "epoch", "+", "i", ")", "*", "batch_size", "\n", "print", "(", "\"HERE\"", ",", "regloss", ")", "\n", "progress", ".", "display", "(", "i", ")", "\n", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"train\"", ",", "global_step", "=", "t", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.validate": [[74, 120], ["utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.AverageMeter", "utils.logging.ProgressMeter", "model.eval", "len", "torch.no_grad", "time.time", "tqdm.tqdm", "utils.logging.ProgressMeter.display", "enumerate", "target.cuda.cuda", "model", "criterion", "utils.eval_utils.accuracy", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "utils.logging.AverageMeter.update", "time.time", "len", "utils.logging.ProgressMeter.write_to_tensorboard", "len", "images.cuda.cuda", "criterion.item", "images.cuda.size", "acc1.item", "images.cuda.size", "acc5.item", "images.cuda.size", "utils.logging.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display", "home.repos.pwc.inspect_result.chrundle_biprop.utils.eval_utils.accuracy", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.VarianceMeter.update", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.write_to_tensorboard", "home.repos.pwc.inspect_result.chrundle_biprop.utils.logging.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ",", "writer", ",", "epoch", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "\"Time\"", ",", "\":6.3f\"", ",", "write_val", "=", "False", ")", "\n", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.3f\"", ",", "write_val", "=", "False", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ",", "write_val", "=", "False", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "prefix", "=", "\"Test: \"", "\n", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "tqdm", ".", "tqdm", "(", "\n", "enumerate", "(", "val_loader", ")", ",", "ascii", "=", "True", ",", "total", "=", "len", "(", "val_loader", ")", "\n", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "\n", "", "", "progress", ".", "display", "(", "len", "(", "val_loader", ")", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "progress", ".", "write_to_tensorboard", "(", "writer", ",", "prefix", "=", "\"test\"", ",", "global_step", "=", "epoch", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.trainers.ss.modifier": [[122, 124], ["None"], "function", ["None"], ["", "def", "modifier", "(", "args", ",", "epoch", ",", "model", ")", ":", "\n", "    ", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.F_BinAct.forward": [[14, 20], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.F_BinAct.backward": [[21, 32], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.BiRealAct.__init__": [[34, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.BiRealAct.forward": [[37, 39], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv2.__init__": [[42, 59], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "64", "*", "16", "*", "16", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv2.forward": [[61, 66], ["frankle.Conv2.convs", "frankle.Conv2.view", "frankle.Conv2.linear", "frankle.Conv2.squeeze", "frankle.Conv2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "64", "*", "16", "*", "16", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv2_BinAct.__init__": [[69, 90], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv2_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "64", "*", "16", "*", "16", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv2_BinAct.forward": [[92, 97], ["frankle.Conv2_BinAct.convs", "frankle.Conv2_BinAct.view", "frankle.Conv2_BinAct.linear", "frankle.Conv2_BinAct.squeeze", "frankle.Conv2_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "64", "*", "16", "*", "16", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4.__init__": [[100, 122], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "32", "*", "32", "*", "8", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4.forward": [[124, 129], ["frankle.Conv4.convs", "frankle.Conv4.view", "frankle.Conv4.linear", "frankle.Conv4.squeeze", "frankle.Conv4.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "8192", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4_BinAct.__init__": [[132, 160], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv4_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "32", "*", "32", "*", "8", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4_BinAct.forward": [[162, 167], ["frankle.Conv4_BinAct.convs", "frankle.Conv4_BinAct.view", "frankle.Conv4_BinAct.linear", "frankle.Conv4_BinAct.squeeze", "frankle.Conv4_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "8192", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6.__init__": [[170, 197], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv6", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "256", "*", "4", "*", "4", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6.forward": [[199, 204], ["frankle.Conv6.convs", "frankle.Conv6.view", "frankle.Conv6.linear", "frankle.Conv6.squeeze", "frankle.Conv6.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "256", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6_BinAct.__init__": [[207, 242], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv6_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "256", "*", "4", "*", "4", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6_BinAct.forward": [[244, 249], ["frankle.Conv6_BinAct.convs", "frankle.Conv6_BinAct.view", "frankle.Conv6_BinAct.linear", "frankle.Conv6_BinAct.squeeze", "frankle.Conv6_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "256", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6_BNN.__init__": [[252, 287], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "BinAct", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv6_BNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "128", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "BinAct", "(", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "4", "*", "4", ",", "1024", ")", ",", "\n", "builder", ".", "batchnorm", "(", "1024", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "1024", ",", "1024", ")", ",", "\n", "builder", ".", "batchnorm", "(", "1024", ")", ",", "\n", "BinAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "1024", ",", "10", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6_BNN.forward": [[289, 294], ["frankle.Conv6_BNN.convs", "frankle.Conv6_BNN.view", "frankle.Conv6_BNN.linear", "frankle.Conv6_BNN.squeeze", "frankle.Conv6_BNN.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8.__init__": [[297, 329], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "2", "*", "2", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8.forward": [[331, 336], ["frankle.Conv8.convs", "frankle.Conv8.view", "frankle.Conv8.linear", "frankle.Conv8.squeeze", "frankle.Conv8.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8_BinAct.__init__": [[339, 381], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "64", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "64", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "64", ",", "128", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "2", "*", "2", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "256", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8_BinAct.forward": [[383, 388], ["frankle.Conv8_BinAct.convs", "frankle.Conv8_BinAct.view", "frankle.Conv8_BinAct.linear", "frankle.Conv8_BinAct.squeeze", "frankle.Conv8_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.FC.__init__": [[391, 400], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "28", "*", "28", ",", "300", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "300", ",", "100", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "100", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.FC.forward": [[402, 406], ["x.view", "frankle.FC.linear", "frankle.FC.squeeze", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "28", "*", "28", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4Wide.__init__": [[412, 435], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv4Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "128", ")", "*", "8", "*", "8", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4Wide.forward": [[437, 442], ["frankle.Conv4Wide.convs", "frankle.Conv4Wide.view", "frankle.Conv4Wide.linear", "frankle.Conv4Wide.squeeze", "frankle.Conv4Wide.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "128", ")", "*", "8", "*", "8", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4Wide_BinAct.__init__": [[445, 473], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv4Wide_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "128", ")", "*", "8", "*", "8", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv4Wide_BinAct.forward": [[475, 480], ["frankle.Conv4Wide_BinAct.convs", "frankle.Conv4Wide_BinAct.view", "frankle.Conv4Wide_BinAct.linear", "frankle.Conv4Wide_BinAct.squeeze", "frankle.Conv4Wide_BinAct.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "128", ")", "*", "8", "*", "8", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6Wide.__init__": [[483, 510], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv6Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", "*", "4", "*", "4", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6Wide.forward": [[512, 517], ["frankle.Conv6Wide.convs", "frankle.Conv6Wide.view", "frankle.Conv6Wide.linear", "frankle.Conv6Wide.squeeze", "frankle.Conv6Wide.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "256", ")", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6Wide_BinAct.__init__": [[520, 555], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv6Wide_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", "*", "4", "*", "4", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv6Wide_BinAct.forward": [[557, 562], ["frankle.Conv6Wide_BinAct.convs", "frankle.Conv6Wide_BinAct.view", "frankle.Conv6Wide_BinAct.linear", "frankle.Conv6Wide_BinAct.squeeze", "frankle.Conv6Wide_BinAct.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "256", ")", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide.__init__": [[565, 597], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8Wide", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "512", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide.forward": [[599, 604], ["frankle.Conv8Wide.convs", "frankle.Conv8Wide.view", "frankle.Conv8Wide.linear", "frankle.Conv8Wide.squeeze", "frankle.Conv8Wide.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct.__init__": [[607, 649], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8Wide_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "512", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "512", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "512", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct.forward": [[651, 656], ["frankle.Conv8Wide_BinAct.convs", "frankle.Conv8Wide_BinAct.view", "frankle.Conv8Wide_BinAct.linear", "frankle.Conv8Wide_BinAct.squeeze", "frankle.Conv8Wide_BinAct.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct_ReLU.__init__": [[659, 706], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8Wide_BinAct_ReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "#builder.batchnorm(scale(64)),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "#builder.batchnorm(scale(128)),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "#builder.batchnorm(scale(256)),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "#builder.batchnorm(scale(512)),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "512", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#BiRealAct(),", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "scale", "(", "256", ")", ")", ",", "\n", "#builder.batchnorm(scale(256)),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#BiRealAct(),", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct_ReLU.forward": [[708, 713], ["frankle.Conv8Wide_BinAct_ReLU.convs", "frankle.Conv8Wide_BinAct_ReLU.view", "frankle.Conv8Wide_BinAct_ReLU.linear", "frankle.Conv8Wide_BinAct_ReLU.squeeze", "frankle.Conv8Wide_BinAct_ReLU.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct_ReLU_Final_Act.__init__": [[716, 763], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv1x1", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Conv8Wide_BinAct_ReLU_Final_Act", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "64", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "128", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "128", ")", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "128", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "256", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "512", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "512", ")", ",", "scale", "(", "512", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "512", ")", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "scale", "(", "256", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "256", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "#BiRealAct(),", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "256", ")", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Conv8Wide_BinAct_ReLU_Final_Act.forward": [[765, 770], ["frankle.Conv8Wide_BinAct_ReLU_Final_Act.convs", "frankle.Conv8Wide_BinAct_ReLU_Final_Act.view", "frankle.Conv8Wide_BinAct_ReLU_Final_Act.linear", "frankle.Conv8Wide_BinAct_ReLU_Final_Act.squeeze", "frankle.Conv8Wide_BinAct_ReLU_Final_Act.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "512", ")", "*", "2", "*", "2", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small.__init__": [[773, 799], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG_Small", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "128", ",", "first_layer", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "#nn.ReLU(),", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "#nn.ReLU(),", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "#nn.ReLU(),", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "#nn.ReLU(),", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small.forward": [[801, 806], ["frankle.VGG_Small.convs", "frankle.VGG_Small.view", "frankle.VGG_Small.linear", "frankle.VGG_Small.squeeze", "frankle.VGG_Small.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_BinAct.__init__": [[809, 840], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG_Small_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "128", ",", "first_layer", "=", "True", ")", ",", "\n", "#builder.batchnorm(128),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "#builder.batchnorm(256),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "#builder.batchnorm(512),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_BinAct.forward": [[842, 847], ["frankle.VGG_Small_BinAct.convs", "frankle.VGG_Small_BinAct.view", "frankle.VGG_Small_BinAct.linear", "frankle.VGG_Small_BinAct.squeeze", "frankle.VGG_Small_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_bn_BinAct.__init__": [[850, 881], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG_Small_bn_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "128", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_bn_BinAct.forward": [[883, 888], ["frankle.VGG_Small_bn_BinAct.convs", "frankle.VGG_Small_bn_BinAct.view", "frankle.VGG_Small_bn_BinAct.linear", "frankle.VGG_Small_bn_BinAct.squeeze", "frankle.VGG_Small_bn_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_noReLU_BinAct.__init__": [[891, 922], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG_Small_noReLU_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "128", ",", "first_layer", "=", "True", ")", ",", "\n", "#builder.batchnorm(128),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "128", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "128", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "128", ",", "256", ")", ",", "\n", "#builder.batchnorm(256),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "256", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "256", ")", ",", "\n", "#nn.ReLU(),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "256", ",", "512", ")", ",", "\n", "#builder.batchnorm(512),", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "512", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.VGG_Small_noReLU_BinAct.forward": [[924, 929], ["frankle.VGG_Small_noReLU_BinAct.convs", "frankle.VGG_Small_noReLU_BinAct.view", "frankle.VGG_Small_noReLU_BinAct.linear", "frankle.VGG_Small_noReLU_BinAct.squeeze", "frankle.VGG_Small_noReLU_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "512", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Wide_VGG_Small.__init__": [[932, 962], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "frankle.BiRealAct", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Wide_VGG_Small", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "16", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "16", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "16", ")", ",", "scale", "(", "16", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "16", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "16", ")", ",", "scale", "(", "32", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "32", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "32", ")", ",", "scale", "(", "32", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "32", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "32", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "BiRealAct", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "64", ")", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Wide_VGG_Small.forward": [[964, 969], ["frankle.Wide_VGG_Small.convs", "frankle.Wide_VGG_Small.view", "frankle.Wide_VGG_Small.linear", "frankle.Wide_VGG_Small.squeeze", "frankle.Wide_VGG_Small.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "64", ")", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Wide_VGG_Small_132.__init__": [[972, 1007], ["torch.Module.__init__", "utils.builder.get_builder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv3x3", "torch.MaxPool2d", "torch.MaxPool2d", "utils.builder.get_builder.batchnorm", "torch.ReLU", "torch.ReLU", "utils.builder.get_builder.conv1x1", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale", "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Wide_VGG_Small_132", ",", "self", ")", ".", "__init__", "(", ")", "\n", "builder", "=", "get_builder", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv3x3", "(", "3", ",", "scale", "(", "16", ")", ",", "first_layer", "=", "True", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "16", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "16", ")", ",", "scale", "(", "16", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "16", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "16", ")", ",", "scale", "(", "32", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "32", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "32", ")", ",", "scale", "(", "32", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "32", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "32", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "builder", ".", "conv3x3", "(", "scale", "(", "64", ")", ",", "scale", "(", "64", ")", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "builder", ".", "batchnorm", "(", "scale", "(", "64", ")", ")", ",", "\n", "#BiRealAct(),", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "scale", "(", "64", ")", "*", "4", "*", "4", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.Wide_VGG_Small_132.forward": [[1009, 1014], ["frankle.Wide_VGG_Small_132.convs", "frankle.Wide_VGG_Small_132.view", "frankle.Wide_VGG_Small_132.linear", "frankle.Wide_VGG_Small_132.squeeze", "frankle.Wide_VGG_Small_132.size", "frankle.scale"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "scale", "(", "64", ")", "*", "4", "*", "4", ",", "1", ",", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ".", "squeeze", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.frankle.scale": [[407, 409], ["int"], "function", ["None"], ["", "", "def", "scale", "(", "n", ")", ":", "\n", "    ", "return", "int", "(", "n", "*", "args", ".", "width_mult", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.F_BinAct.forward": [[9, 15], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.F_BinAct.backward": [[16, 27], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.BiRealAct.__init__": [[29, 31], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.BiRealAct.forward": [[32, 34], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.BasicBlock.__init__": [[41, 53], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "ValueError", "wide_resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.BasicBlock.forward": [[54, 75], ["wide_resnet_BinAct.BasicBlock.conv1", "wide_resnet_BinAct.BasicBlock.relu", "wide_resnet_BinAct.BasicBlock.conv2", "wide_resnet_BinAct.BasicBlock.relu", "wide_resnet_BinAct.BasicBlock.bn1", "wide_resnet_BinAct.BasicBlock.bn2", "wide_resnet_BinAct.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.Bottleneck.__init__": [[84, 96], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "wide_resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.Bottleneck.forward": [[97, 119], ["wide_resnet_BinAct.Bottleneck.conv1", "wide_resnet_BinAct.Bottleneck.bn1", "wide_resnet_BinAct.Bottleneck.relu", "wide_resnet_BinAct.Bottleneck.conv2", "wide_resnet_BinAct.Bottleneck.bn2", "wide_resnet_BinAct.Bottleneck.relu", "wide_resnet_BinAct.Bottleneck.conv3", "wide_resnet_BinAct.Bottleneck.bn3", "wide_resnet_BinAct.Bottleneck.relu", "wide_resnet_BinAct.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet_BinAct.__init__": [[125, 154], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "wide_resnet_BinAct.ResNet_BinAct._make_layer", "wide_resnet_BinAct.ResNet_BinAct._make_layer", "wide_resnet_BinAct.ResNet_BinAct._make_layer", "wide_resnet_BinAct.ResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "wide_resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet_BinAct._make_layer": [[155, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet_BinAct.forward": [[175, 193], ["wide_resnet_BinAct.ResNet_BinAct.conv1", "wide_resnet_BinAct.ResNet_BinAct.maxpool", "wide_resnet_BinAct.ResNet_BinAct.relu", "wide_resnet_BinAct.ResNet_BinAct.layer1", "wide_resnet_BinAct.ResNet_BinAct.layer2", "wide_resnet_BinAct.ResNet_BinAct.layer3", "wide_resnet_BinAct.ResNet_BinAct.layer4", "wide_resnet_BinAct.ResNet_BinAct.avgpool", "wide_resnet_BinAct.ResNet_BinAct.fc", "wide_resnet_BinAct.ResNet_BinAct.view", "wide_resnet_BinAct.ResNet_BinAct.bn1", "wide_resnet_BinAct.ResNet_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet18_BinAct": [[196, 198], ["wide_resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "ResNet18_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet34_BinAct": [[199, 201], ["wide_resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet34_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet50_BinAct": [[202, 204], ["wide_resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet50_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.ResNet101_BinAct": [[206, 208], ["wide_resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet101_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.wide_resnet_BinAct.WideResNet50_2_BinAct": [[210, 213], ["wide_resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet50_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.BasicBlock.__init__": [[18, 30], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.BasicBlock.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.Bottleneck.__init__": [[43, 57], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.Bottleneck.forward": [[59, 67], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn3", "resnet_cifar.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn1", "resnet_cifar.Bottleneck.bn2", "resnet_cifar.Bottleneck.conv3", "resnet_cifar.Bottleneck.conv1", "resnet_cifar.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.ResNet.__init__": [[70, 87], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.ResNet._make_layer": [[88, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.ResNet.forward": [[97, 106], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet.layer1", "resnet_cifar.ResNet.layer2", "resnet_cifar.ResNet.layer3", "resnet_cifar.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.ResNet.fc", "resnet_cifar.ResNet.flatten", "resnet_cifar.ResNet.bn1", "resnet_cifar.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.WideResNet.__init__": [[109, 126], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar.WideResNet._make_layer", "resnet_cifar.WideResNet._make_layer", "resnet_cifar.WideResNet._make_layer", "resnet_cifar.WideResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.WideResNet._make_layer": [[127, 135], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.WideResNet.forward": [[136, 145], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.WideResNet.layer1", "resnet_cifar.WideResNet.layer2", "resnet_cifar.WideResNet.layer3", "resnet_cifar.WideResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.WideResNet.fc", "resnet_cifar.WideResNet.flatten", "resnet_cifar.WideResNet.bn1", "resnet_cifar.WideResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.SmallResNet.__init__": [[149, 165], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar.SmallResNet._make_layer", "resnet_cifar.SmallResNet._make_layer", "resnet_cifar.SmallResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "SmallResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "16", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "64", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.SmallResNet._make_layer": [[166, 174], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.SmallResNet.forward": [[175, 183], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.SmallResNet.layer1", "resnet_cifar.SmallResNet.layer2", "resnet_cifar.SmallResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.SmallResNet.fc", "resnet_cifar.SmallResNet.flatten", "resnet_cifar.SmallResNet.bn1", "resnet_cifar.SmallResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet18": [[188, 190], ["resnet_cifar.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "cResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cWideResNet18_2": [[191, 193], ["resnet_cifar.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_2", "(", ")", ":", "\n", "    ", "return", "WideResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet34": [[194, 196], ["resnet_cifar.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet50": [[198, 200], ["resnet_cifar.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet101": [[202, 204], ["resnet_cifar.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet152": [[206, 208], ["resnet_cifar.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet20": [[211, 213], ["resnet_cifar.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet20", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet32": [[214, 216], ["resnet_cifar.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet32", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet44": [[217, 219], ["resnet_cifar.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet44", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet56": [[220, 222], ["resnet_cifar.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet56", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar.cResNet110": [[223, 225], ["resnet_cifar.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet110", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.F_BinAct.forward": [[10, 16], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.F_BinAct.backward": [[17, 28], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.BiRealAct.__init__": [[30, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.BiRealAct.forward": [[33, 35], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.BasicBlock.__init__": [[42, 54], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "ValueError", "resnet_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.BasicBlock.forward": [[55, 76], ["resnet_BinAct_v2.BasicBlock.conv1", "resnet_BinAct_v2.BasicBlock.relu", "resnet_BinAct_v2.BasicBlock.conv2", "resnet_BinAct_v2.BasicBlock.relu", "resnet_BinAct_v2.BasicBlock.bn1", "resnet_BinAct_v2.BasicBlock.downsample", "resnet_BinAct_v2.BasicBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.Bottleneck.__init__": [[86, 99], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.batchnorm", "resnet_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "bn4", "=", "builder", ".", "batchnorm", "(", "width", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.Bottleneck.forward": [[100, 123], ["resnet_BinAct_v2.Bottleneck.conv1", "resnet_BinAct_v2.Bottleneck.bn1", "resnet_BinAct_v2.Bottleneck.relu", "resnet_BinAct_v2.Bottleneck.conv2", "resnet_BinAct_v2.Bottleneck.bn2", "resnet_BinAct_v2.Bottleneck.relu", "resnet_BinAct_v2.Bottleneck.conv3", "resnet_BinAct_v2.Bottleneck.bn3", "resnet_BinAct_v2.Bottleneck.bn4", "resnet_BinAct_v2.Bottleneck.relu", "resnet_BinAct_v2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "bn4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet_BinAct.__init__": [[129, 158], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "resnet_BinAct_v2.ResNet_BinAct._make_layer", "resnet_BinAct_v2.ResNet_BinAct._make_layer", "resnet_BinAct_v2.ResNet_BinAct._make_layer", "resnet_BinAct_v2.ResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet_BinAct._make_layer": [[159, 178], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet_BinAct.forward": [[179, 197], ["resnet_BinAct_v2.ResNet_BinAct.conv1", "resnet_BinAct_v2.ResNet_BinAct.maxpool", "resnet_BinAct_v2.ResNet_BinAct.relu", "resnet_BinAct_v2.ResNet_BinAct.layer1", "resnet_BinAct_v2.ResNet_BinAct.layer2", "resnet_BinAct_v2.ResNet_BinAct.layer3", "resnet_BinAct_v2.ResNet_BinAct.layer4", "resnet_BinAct_v2.ResNet_BinAct.avgpool", "resnet_BinAct_v2.ResNet_BinAct.fc", "resnet_BinAct_v2.ResNet_BinAct.view", "resnet_BinAct_v2.ResNet_BinAct.bn1", "resnet_BinAct_v2.ResNet_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet_BinAct.__init__": [[203, 232], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "resnet_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_BinAct_v2.WideResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet_BinAct._make_layer": [[233, 252], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet_BinAct.forward": [[253, 271], ["resnet_BinAct_v2.WideResNet_BinAct.conv1", "resnet_BinAct_v2.WideResNet_BinAct.maxpool", "resnet_BinAct_v2.WideResNet_BinAct.relu", "resnet_BinAct_v2.WideResNet_BinAct.layer1", "resnet_BinAct_v2.WideResNet_BinAct.layer2", "resnet_BinAct_v2.WideResNet_BinAct.layer3", "resnet_BinAct_v2.WideResNet_BinAct.layer4", "resnet_BinAct_v2.WideResNet_BinAct.avgpool", "resnet_BinAct_v2.WideResNet_BinAct.fc", "resnet_BinAct_v2.WideResNet_BinAct.view", "resnet_BinAct_v2.WideResNet_BinAct.bn1", "resnet_BinAct_v2.WideResNet_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet18_BinAct_v2": [[276, 278], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "ResNet18_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet34_BinAct_v2": [[279, 281], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet34_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet50_BinAct_v2": [[282, 284], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet50_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.ResNet101_BinAct": [[285, 287], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet101_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet18_2_BinAct_v2": [[289, 291], ["resnet_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet18_2_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet18_3_BinAct_v2": [[292, 294], ["resnet_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet18_3_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ",", "widen_factor", "=", "2.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet34_2_BinAct_v2": [[295, 297], ["resnet_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_2_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet34_3_BinAct_v2": [[298, 300], ["resnet_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_3_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.old_WideResNet50_2_BinAct_v2": [[301, 304], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "old_WideResNet50_2_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.WideResNet50_2_BinAct_v2": [[305, 308], ["resnet_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet50_2_BinAct_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", ",", "widen_factor", "=", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.cifarResNet18_BinAct": [[312, 314], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarResNet18_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.cifarWideResNet18_2_BinAct": [[315, 317], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarWideResNet18_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct_v2.cifarWideResNet18_3_BinAct": [[318, 320], ["resnet_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarWideResNet18_3_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ",", "widen_factor", "=", "3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.F_BinAct.forward": [[18, 24], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.F_BinAct.backward": [[25, 36], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.BiRealAct.__init__": [[38, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.BiRealAct.forward": [[41, 43], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.BasicBlock_BinAct.__init__": [[49, 62], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct.BiRealAct", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.BasicBlock_BinAct.forward": [[64, 70], ["resnet_cifar_BinAct.BasicBlock_BinAct.relu", "resnet_cifar_BinAct.BasicBlock_BinAct.bn2", "resnet_cifar_BinAct.BasicBlock_BinAct.shortcut", "resnet_cifar_BinAct.BasicBlock_BinAct.relu", "resnet_cifar_BinAct.BasicBlock_BinAct.bn1", "resnet_cifar_BinAct.BasicBlock_BinAct.conv2", "resnet_cifar_BinAct.BasicBlock_BinAct.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.Bottleneck.__init__": [[75, 90], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct.BiRealAct", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.Bottleneck.forward": [[92, 100], ["resnet_cifar_BinAct.Bottleneck.relu", "resnet_cifar_BinAct.Bottleneck.relu", "resnet_cifar_BinAct.Bottleneck.bn3", "resnet_cifar_BinAct.Bottleneck.shortcut", "resnet_cifar_BinAct.Bottleneck.relu", "resnet_cifar_BinAct.Bottleneck.bn1", "resnet_cifar_BinAct.Bottleneck.bn2", "resnet_cifar_BinAct.Bottleneck.conv3", "resnet_cifar_BinAct.Bottleneck.conv1", "resnet_cifar_BinAct.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.ResNet_BinAct.__init__": [[103, 121], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct.ResNet_BinAct._make_layer", "resnet_cifar_BinAct.ResNet_BinAct._make_layer", "resnet_cifar_BinAct.ResNet_BinAct._make_layer", "resnet_cifar_BinAct.ResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.ResNet_BinAct._make_layer": [[122, 130], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.ResNet_BinAct.forward": [[131, 140], ["resnet_cifar_BinAct.ResNet_BinAct.relu", "resnet_cifar_BinAct.ResNet_BinAct.layer1", "resnet_cifar_BinAct.ResNet_BinAct.layer2", "resnet_cifar_BinAct.ResNet_BinAct.layer3", "resnet_cifar_BinAct.ResNet_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct.ResNet_BinAct.fc", "resnet_cifar_BinAct.ResNet_BinAct.flatten", "resnet_cifar_BinAct.ResNet_BinAct.bn1", "resnet_cifar_BinAct.ResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.Bottleneck2.__init__": [[145, 162], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.group_conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width_ratio", "=", "planes", "/", "(", "widen_factor", "*", "64.", ")", "\n", "D", "=", "cardinality", "*", "int", "(", "base_width", "*", "width_ratio", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "D", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "group_conv3x3", "(", "D", ",", "D", ",", "groups", "=", "cardinality", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "D", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.Bottleneck2.forward": [[164, 172], ["resnet_cifar_BinAct.Bottleneck2.relu", "resnet_cifar_BinAct.Bottleneck2.relu", "resnet_cifar_BinAct.Bottleneck2.bn3", "resnet_cifar_BinAct.Bottleneck2.shortcut", "resnet_cifar_BinAct.Bottleneck2.relu", "resnet_cifar_BinAct.Bottleneck2.bn1", "resnet_cifar_BinAct.Bottleneck2.bn2", "resnet_cifar_BinAct.Bottleneck2.conv3", "resnet_cifar_BinAct.Bottleneck2.conv1", "resnet_cifar_BinAct.Bottleneck2.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.ResNeXtBottleneck.__init__": [[178, 201], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct.ResNeXtBottleneck.shortcut.add_module", "resnet_cifar_BinAct.ResNeXtBottleneck.shortcut.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "cardinality", ",", "widen_factor", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            in_channels: input channel dimensionality\n            out_channels: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            cardinality: num of convolution groups.\n            widen_factor: factor to reduce the input dimensionality before convolution.\n        \"\"\"", "\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "cardinality", "*", "out_channels", "//", "widen_factor", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.ResNeXtBottleneck.forward": [[202, 211], ["resnet_cifar_BinAct.ResNeXtBottleneck.conv_reduce.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct.ResNeXtBottleneck.conv_conv.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct.ResNeXtBottleneck.conv_expand.forward", "resnet_cifar_BinAct.ResNeXtBottleneck.bn_expand.forward", "resnet_cifar_BinAct.ResNeXtBottleneck.shortcut.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct.ResNeXtBottleneck.bn_reduce.forward", "resnet_cifar_BinAct.ResNeXtBottleneck.bn.forward"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_reduce", ".", "forward", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_conv", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_expand", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", ".", "forward", "(", "bottleneck", ")", "\n", "residual", "=", "self", ".", "shortcut", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNeXt_BinAct.__init__": [[214, 234], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct.WideResNeXt_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "cardinality", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNeXt_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "cardinality", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "cardinality", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "cardinality", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "cardinality", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNeXt_BinAct._make_layer": [[235, 244], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "cardinality", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "#layers = []", "\n", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "cardinality", ",", "stride", ",", "self", ".", "base_width", ",", "self", ".", "widen_factor", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNeXt_BinAct.forward": [[245, 254], ["resnet_cifar_BinAct.WideResNeXt_BinAct.relu", "resnet_cifar_BinAct.WideResNeXt_BinAct.layer1", "resnet_cifar_BinAct.WideResNeXt_BinAct.layer2", "resnet_cifar_BinAct.WideResNeXt_BinAct.layer3", "resnet_cifar_BinAct.WideResNeXt_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct.WideResNeXt_BinAct.fc", "resnet_cifar_BinAct.WideResNeXt_BinAct.flatten", "resnet_cifar_BinAct.WideResNeXt_BinAct.bn1", "resnet_cifar_BinAct.WideResNeXt_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.CifarResNeXt.__init__": [[261, 295], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar_BinAct.CifarResNeXt.block", "resnet_cifar_BinAct.CifarResNeXt.block", "resnet_cifar_BinAct.CifarResNeXt.block", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_cifar_BinAct.CifarResNeXt.state_dict", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "resnet_cifar_BinAct.CifarResNeXt.state_dict", "resnet_cifar_BinAct.CifarResNeXt.state_dict", "resnet_cifar_BinAct.CifarResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["def", "__init__", "(", "self", ",", "cardinality", "=", "8", ",", "depth", "=", "29", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            cardinality: number of convolution groups.\n            depth: number of layers.\n            num_classes: number of classes\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block_depth", "=", "(", "self", ".", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_size", "=", "64", "\n", "self", ".", "stages", "=", "[", "64", ",", "64", "*", "self", ".", "widen_factor", ",", "128", "*", "self", ".", "widen_factor", ",", "256", "*", "self", ".", "widen_factor", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "stages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "", "", "init", ".", "kaiming_normal", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.CifarResNeXt.block": [[296, 315], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "resnet_cifar_BinAct.ResNeXtBottleneck", "resnet_cifar_BinAct.ResNeXtBottleneck"], "methods", ["None"], ["", "def", "block", "(", "self", ",", "name", ",", "in_channels", ",", "out_channels", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            name: string name of the current block.\n            in_channels: number of input channels\n            out_channels: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "in_channels", ",", "out_channels", ",", "pool_stride", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "self", ".", "cardinality", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.CifarResNeXt.forward": [[316, 327], ["resnet_cifar_BinAct.CifarResNeXt.conv1.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct.CifarResNeXt.stage_1.forward", "resnet_cifar_BinAct.CifarResNeXt.stage_2.forward", "resnet_cifar_BinAct.CifarResNeXt.stage_3.forward", "resnet_cifar_BinAct.CifarResNeXt.avgpool", "resnet_cifar_BinAct.CifarResNeXt.view", "resnet_cifar_BinAct.CifarResNeXt.fc", "resnet_cifar_BinAct.CifarResNeXt.bn1.forward", "resnet_cifar_BinAct.CifarResNeXt.size"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", ".", "forward", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNet_BinAct.__init__": [[329, 347], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct.WideResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNet_BinAct._make_layer": [[348, 356], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.WideResNet_BinAct.forward": [[357, 366], ["resnet_cifar_BinAct.WideResNet_BinAct.relu", "resnet_cifar_BinAct.WideResNet_BinAct.layer1", "resnet_cifar_BinAct.WideResNet_BinAct.layer2", "resnet_cifar_BinAct.WideResNet_BinAct.layer3", "resnet_cifar_BinAct.WideResNet_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct.WideResNet_BinAct.fc", "resnet_cifar_BinAct.WideResNet_BinAct.flatten", "resnet_cifar_BinAct.WideResNet_BinAct.bn1", "resnet_cifar_BinAct.WideResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.SmallResNet_BinAct.__init__": [[369, 386], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct.SmallResNet_BinAct._make_layer", "resnet_cifar_BinAct.SmallResNet_BinAct._make_layer", "resnet_cifar_BinAct.SmallResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "SmallResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "16", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "64", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.SmallResNet_BinAct._make_layer": [[387, 395], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.SmallResNet_BinAct.forward": [[396, 404], ["resnet_cifar_BinAct.SmallResNet_BinAct.relu", "resnet_cifar_BinAct.SmallResNet_BinAct.layer1", "resnet_cifar_BinAct.SmallResNet_BinAct.layer2", "resnet_cifar_BinAct.SmallResNet_BinAct.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct.SmallResNet_BinAct.fc", "resnet_cifar_BinAct.SmallResNet_BinAct.flatten", "resnet_cifar_BinAct.SmallResNet_BinAct.bn1", "resnet_cifar_BinAct.SmallResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.resnext29_8x64d_c10": [[406, 409], ["resnet_cifar_BinAct.CifarResNeXt"], "function", ["None"], ["", "", "def", "resnext29_8x64d_c10", "(", ")", ":", "\n", "    ", "model", "=", "CifarResNeXt", "(", "cardinality", "=", "8", ",", "depth", "=", "29", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "10", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet18_BinAct": [[410, 412], ["resnet_cifar_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet18_BinAct", "(", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cWideResNet18_2_BinAct": [[413, 415], ["resnet_cifar_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_2_BinAct", "(", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cWideResNet18_3_BinAct": [[416, 418], ["resnet_cifar_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_3_BinAct", "(", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet34_BinAct": [[419, 421], ["resnet_cifar_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet34_BinAct", "(", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cWideResNeXt18_2_BinAct": [[423, 425], ["resnet_cifar_BinAct.WideResNeXt_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNeXt18_2_BinAct", "(", ")", ":", "\n", "    ", "return", "WideResNeXt_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck2", ",", "[", "1", ",", "2", ",", "6", ",", "2", "]", ",", "[", "4", ",", "8", ",", "8", ",", "16", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cWideResNeXt18_2_BinAct_small": [[426, 428], ["resnet_cifar_BinAct.WideResNeXt_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNeXt18_2_BinAct_small", "(", ")", ":", "\n", "    ", "return", "WideResNeXt_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck2", ",", "[", "1", ",", "2", ",", "6", ",", "2", "]", ",", "[", "4", ",", "4", ",", "8", ",", "8", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet20_BinAct": [[442, 444], ["resnet_cifar_BinAct.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet20_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet32_BinAct": [[445, 447], ["resnet_cifar_BinAct.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet32_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet44_BinAct": [[448, 450], ["resnet_cifar_BinAct.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet44_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet56_BinAct": [[451, 453], ["resnet_cifar_BinAct.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet56_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct.cResNet110_BinAct": [[454, 456], ["resnet_cifar_BinAct.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet110_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.BasicBlock.__init__": [[11, 23], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.BasicBlock.forward": [[24, 45], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.Bottleneck.__init__": [[54, 66], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.Bottleneck.forward": [[67, 89], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet.__init__": [[95, 124], ["torch.Module.__init__", "builder.batchnorm", "builder.activation", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet._make_layer": [[125, 144], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet.forward": [[145, 163], ["resnet.ResNet.conv1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.fc", "resnet.ResNet.view", "resnet.ResNet.bn1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet.__init__": [[167, 196], ["torch.Module.__init__", "torch.MaxPool2d", "builder.batchnorm", "builder.activation", "resnet.WideResNet._make_layer", "resnet.WideResNet._make_layer", "resnet.WideResNet._make_layer", "resnet.WideResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet._make_layer": [[197, 216], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet.forward": [[217, 235], ["resnet.WideResNet.conv1", "resnet.WideResNet.maxpool", "resnet.WideResNet.relu", "resnet.WideResNet.layer1", "resnet.WideResNet.layer2", "resnet.WideResNet.layer3", "resnet.WideResNet.layer4", "resnet.WideResNet.avgpool", "resnet.WideResNet.fc", "resnet.WideResNet.view", "resnet.WideResNet.bn1", "resnet.WideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet18": [[240, 242], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "ResNet18", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet34": [[244, 246], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet34", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet50": [[248, 250], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.ResNet101": [[252, 254], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet34_2": [[256, 258], ["resnet.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet50_2": [[260, 263], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet50_2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet.WideResNet101_2": [[266, 269], ["resnet.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet101_2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.F_BinAct.forward": [[12, 18], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.F_BinAct.backward": [[19, 30], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BiRealAct.__init__": [[32, 34], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BiRealAct.forward": [[35, 37], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BasicBlock.__init__": [[44, 56], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "ValueError", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BasicBlock.forward": [[57, 78], ["resnet_BinAct.BasicBlock.conv1", "resnet_BinAct.BasicBlock.relu", "resnet_BinAct.BasicBlock.conv2", "resnet_BinAct.BasicBlock.relu", "resnet_BinAct.BasicBlock.bn1", "resnet_BinAct.BasicBlock.bn2", "resnet_BinAct.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNeXtBottleneck.__init__": [[86, 114], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.group_conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "int", "resnet_BinAct.ResNeXtBottleneck.shortcut.add_module", "resnet_BinAct.ResNeXtBottleneck.shortcut.add_module", "resnet_BinAct.BiRealAct", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", ",", "groups", ",", "base_width", ",", "widen_factor", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            groups: num of convolution groups.\n            base_width: base number of channels in each group.\n            widen_factor: factor to reduce the input dimensionality before convolution.\n        \"\"\"", "\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width_ratio", "=", "planes", "/", "(", "widen_factor", "*", "64.", ")", "\n", "D", "=", "groups", "*", "int", "(", "base_width", "*", "width_ratio", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "D", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "group_conv3x3", "(", "D", ",", "D", ",", "groups", "=", "groups", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "D", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "\n", "builder", ".", "conv1x1", "(", "inplanes", ",", "planes", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "builder", ".", "batchnorm", "(", "planes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNeXtBottleneck.forward": [[115, 137], ["resnet_BinAct.ResNeXtBottleneck.conv1", "resnet_BinAct.ResNeXtBottleneck.bn1", "resnet_BinAct.ResNeXtBottleneck.relu", "resnet_BinAct.ResNeXtBottleneck.conv2", "resnet_BinAct.ResNeXtBottleneck.bn2", "resnet_BinAct.ResNeXtBottleneck.relu", "resnet_BinAct.ResNeXtBottleneck.conv3", "resnet_BinAct.ResNeXtBottleneck.bn3", "resnet_BinAct.ResNeXtBottleneck.relu", "resnet_BinAct.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.Bottleneck2.__init__": [[151, 163], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "groups", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.Bottleneck2.forward": [[164, 186], ["resnet_BinAct.Bottleneck2.conv1", "resnet_BinAct.Bottleneck2.bn1", "resnet_BinAct.Bottleneck2.relu", "resnet_BinAct.Bottleneck2.conv2", "resnet_BinAct.Bottleneck2.bn2", "resnet_BinAct.Bottleneck2.relu", "resnet_BinAct.Bottleneck2.conv3", "resnet_BinAct.Bottleneck2.bn3", "resnet_BinAct.Bottleneck2.relu", "resnet_BinAct.Bottleneck2.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.Bottleneck.__init__": [[192, 204], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.Bottleneck.forward": [[205, 227], ["resnet_BinAct.Bottleneck.conv1", "resnet_BinAct.Bottleneck.bn1", "resnet_BinAct.Bottleneck.relu", "resnet_BinAct.Bottleneck.conv2", "resnet_BinAct.Bottleneck.bn2", "resnet_BinAct.Bottleneck.relu", "resnet_BinAct.Bottleneck.conv3", "resnet_BinAct.Bottleneck.bn3", "resnet_BinAct.Bottleneck.relu", "resnet_BinAct.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.CifarResNeXt.__init__": [[236, 278], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_BinAct.CifarResNeXt.block", "resnet_BinAct.CifarResNeXt.block", "resnet_BinAct.CifarResNeXt.block", "torch.Linear", "torch.Linear", "init.kaiming_normal", "resnet_BinAct.CifarResNeXt.state_dict", "print", "resnet_BinAct.BiRealAct", "key.split", "init.kaiming_normal", "key.split", "resnet_BinAct.CifarResNeXt.state_dict", "resnet_BinAct.CifarResNeXt.state_dict", "resnet_BinAct.CifarResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["def", "__init__", "(", "self", ",", "builder", ",", "groups", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ",", "widen_factor", "=", "4", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            groups: number of convolution groups.\n            layers: number of layers.\n            num_classes: number of classes\n            base_width: base number of channels in each group.\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "block_depth", "=", "(", "self", ".", "layers", "-", "2", ")", "//", "9", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_size", "=", "64", "\n", "self", ".", "stages", "=", "[", "64", ",", "64", "*", "self", ".", "widen_factor", ",", "128", "*", "self", ".", "widen_factor", ",", "256", "*", "self", ".", "widen_factor", "]", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "groups", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "groups", "[", "0", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "self", ".", "groups", "[", "0", "]", ",", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "stages", "[", "3", "]", ",", "num_classes", ")", "\n", "init", ".", "kaiming_normal", "(", "self", ".", "classifier", ".", "weight", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.CifarResNeXt.block": [[279, 299], ["torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "resnet_BinAct.ResNeXtBottleneck", "resnet_BinAct.ResNeXtBottleneck"], "methods", ["None"], ["", "", "", "def", "block", "(", "self", ",", "name", ",", "inplanes", ",", "planes", ",", "groups", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            name: string name of the current block.\n            inplanes: number of input channels\n            planes: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "inplanes", ",", "planes", ",", "pool_stride", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "planes", ",", "planes", ",", "1", ",", "self", ".", "groups", ",", "self", ".", "base_width", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.CifarResNeXt.forward": [[300, 309], ["resnet_BinAct.CifarResNeXt.conv_1_3x3.forward", "F.relu", "resnet_BinAct.CifarResNeXt.stage_1.forward", "resnet_BinAct.CifarResNeXt.stage_2.forward", "resnet_BinAct.CifarResNeXt.stage_3.forward", "F.avg_pool2d", "x.view.view.view", "resnet_BinAct.CifarResNeXt.classifier", "resnet_BinAct.CifarResNeXt.bn_1.forward"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", ".", "forward", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "8", ",", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "stages", "[", "3", "]", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BasicBlock_C.__init__": [[317, 341], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.batchnorm", "int", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "resnet_BinAct.BiRealAct", "builder.conv1x1", "builder.conv1x1", "builder.batchnorm", "builder.group_conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "resnet_BinAct.BiRealAct", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "bottleneck_width", "=", "4", ",", "groups", "=", "32", ",", "stride", "=", "1", ",", "expansion", "=", "2", ")", ":", "\n", "        ", "super", "(", "BasicBlock_C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inner_width", "=", "groups", "*", "bottleneck_width", "\n", "width", "=", "int", "(", "inplanes", "*", "bottleneck_width", "/", "64", ")", "\n", "width_ratio", "=", "inplanes", "/", "(", "expansion", "*", "64.", ")", "\n", "D", "=", "groups", "*", "int", "(", "bottleneck_width", "*", "width_ratio", ")", "\n", "self", ".", "expansion", "=", "expansion", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "basic", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "\n", "[", "\n", "(", "'conv1_0'", ",", "builder", ".", "conv1x1", "(", "inplanes", ",", "inner_width", ",", "stride", ")", ")", ",", "\n", "(", "'bn1'", ",", "builder", ".", "batchnorm", "(", "inner_width", ")", ")", ",", "\n", "(", "'act0'", ",", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", ")", ",", "\n", "(", "'conv3_0'", ",", "builder", ".", "group_conv3x3", "(", "inner_width", ",", "inner_width", ",", "groups", "=", "groups", ",", "stride", "=", "stride", ")", ")", ",", "\n", "(", "'bn2'", ",", "builder", ".", "batchnorm", "(", "inner_width", ")", ")", ",", "\n", "(", "'act1'", ",", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", ")", ",", "\n", "(", "'conv1_1'", ",", "builder", ".", "conv1x1", "(", "inner_width", ",", "inner_width", "*", "self", ".", "expansion", ")", ")", ",", "\n", "(", "'bn3'", ",", "builder", ".", "batchnorm", "(", "inner_width", "*", "self", ".", "expansion", ")", ")", "]", ")", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "inner_width", "*", "self", ".", "expansion", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "inplanes", ",", "inner_width", "*", "self", ".", "expansion", ")", "\n", ")", "\n", "", "self", ".", "bn0", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "inner_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.BasicBlock_C.forward": [[342, 347], ["resnet_BinAct.BasicBlock_C.basic", "resnet_BinAct.BasicBlock_C.shortcut", "resnet_BinAct.BasicBlock_C.relu", "resnet_BinAct.BasicBlock_C.bn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "basic", "(", "x", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn0", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNeXt_BinAct.__init__": [[349, 383], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "resnet_BinAct.ResNeXt_BinAct._make_layer", "resnet_BinAct.ResNeXt_BinAct._make_layer", "resnet_BinAct.ResNeXt_BinAct._make_layer", "resnet_BinAct.ResNeXt_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "layers", ",", "groups", ",", "bottleneck_width", "=", "64", ",", "expansion", "=", "2", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "expansion", "=", "expansion", "\n", "\n", "# self.conv0 = nn.Conv2d(3, self.in_planes, kernel_size=3, stride=1, padding=1)", "\n", "# self.bn0 = nn.BatchNorm2d(self.in_planes)", "\n", "# self.pool0 = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)", "\n", "# self.layer1=self._make_layer(num_blocks[0],1)", "\n", "# self.layer2=self._make_layer(num_blocks[1],2)", "\n", "# self.layer3=self._make_layer(num_blocks[2],2)", "\n", "# self.layer4=self._make_layer(num_blocks[3],2)", "\n", "# self.linear = nn.Linear(self.groups * self.bottleneck_width, num_classes)", "\n", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "64", "*", "(", "self", ".", "expansion", "+", "1", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "128", "*", "(", "self", ".", "expansion", "+", "1", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "256", "*", "(", "self", ".", "expansion", "+", "1", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "self", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "self", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNeXt_BinAct.forward": [[385, 396], ["resnet_BinAct.ResNeXt_BinAct.relu", "resnet_BinAct.ResNeXt_BinAct.layer1", "resnet_BinAct.ResNeXt_BinAct.layer2", "resnet_BinAct.ResNeXt_BinAct.layer3", "resnet_BinAct.ResNeXt_BinAct.layer4", "resnet_BinAct.ResNeXt_BinAct.avgpool", "resnet_BinAct.ResNeXt_BinAct.fc", "out.view.view.view", "resnet_BinAct.ResNeXt_BinAct.bn1", "out.view.view.size", "resnet_BinAct.ResNeXt_BinAct.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = self.pool0(out)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNeXt_BinAct._make_layer": [[397, 406], ["torch.Sequential", "torch.Sequential", "layers.append", "resnet_BinAct.BasicBlock_C"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "builder", ",", "planes", ",", "num_blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock_C", "(", "builder", ",", "planes", ",", "self", ".", "bottleneck_width", ",", "self", ".", "groups", ",", "stride", ",", "self", ".", "expansion", ")", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "expansion", "*", "self", ".", "bottleneck_width", "*", "self", ".", "groups", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet_BinAct.__init__": [[410, 439], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "resnet_BinAct.ResNet_BinAct._make_layer", "resnet_BinAct.ResNet_BinAct._make_layer", "resnet_BinAct.ResNet_BinAct._make_layer", "resnet_BinAct.ResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet_BinAct._make_layer": [[440, 459], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet_BinAct.forward": [[460, 478], ["resnet_BinAct.ResNet_BinAct.conv1", "resnet_BinAct.ResNet_BinAct.maxpool", "resnet_BinAct.ResNet_BinAct.relu", "resnet_BinAct.ResNet_BinAct.layer1", "resnet_BinAct.ResNet_BinAct.layer2", "resnet_BinAct.ResNet_BinAct.layer3", "resnet_BinAct.ResNet_BinAct.layer4", "resnet_BinAct.ResNet_BinAct.avgpool", "resnet_BinAct.ResNet_BinAct.fc", "resnet_BinAct.ResNet_BinAct.view", "resnet_BinAct.ResNet_BinAct.bn1", "resnet_BinAct.ResNet_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet_BinAct.__init__": [[484, 513], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "builder.batchnorm", "resnet_BinAct.WideResNet_BinAct._make_layer", "resnet_BinAct.WideResNet_BinAct._make_layer", "resnet_BinAct.WideResNet_BinAct._make_layer", "resnet_BinAct.WideResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_BinAct.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet_BinAct._make_layer": [[514, 533], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet_BinAct.forward": [[534, 552], ["resnet_BinAct.WideResNet_BinAct.conv1", "resnet_BinAct.WideResNet_BinAct.maxpool", "resnet_BinAct.WideResNet_BinAct.relu", "resnet_BinAct.WideResNet_BinAct.layer1", "resnet_BinAct.WideResNet_BinAct.layer2", "resnet_BinAct.WideResNet_BinAct.layer3", "resnet_BinAct.WideResNet_BinAct.layer4", "resnet_BinAct.WideResNet_BinAct.avgpool", "resnet_BinAct.WideResNet_BinAct.fc", "resnet_BinAct.WideResNet_BinAct.view", "resnet_BinAct.WideResNet_BinAct.bn1", "resnet_BinAct.WideResNet_BinAct.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet18_BinAct": [[557, 559], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "ResNet18_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet34_BinAct": [[560, 562], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet34_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet50_BinAct": [[563, 565], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet50_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNet101_BinAct": [[566, 568], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet101_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet18_2_BinAct": [[570, 572], ["resnet_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet18_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet18_3_BinAct": [[573, 575], ["resnet_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet18_3_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ",", "widen_factor", "=", "2.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet34_2_BinAct": [[576, 578], ["resnet_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet34_3_BinAct": [[579, 581], ["resnet_BinAct.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_3_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.WideResNet50_2_BinAct": [[582, 585], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet50_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.ResNext_BinAct": [[590, 592], ["resnet_BinAct.ResNeXt_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNext_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNeXt_BinAct", "(", "get_builder", "(", ")", ",", "[", "1", ",", "2", ",", "6", ",", "2", "]", ",", "groups", "=", "4", ",", "expansion", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.cifarResNet18_BinAct": [[594, 596], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarResNet18_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.cifarWideResNet18_2_BinAct": [[597, 599], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarWideResNet18_2_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_BinAct.cifarWideResNet18_3_BinAct": [[600, 602], ["resnet_BinAct.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cifarWideResNet18_3_BinAct", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "10", ",", "widen_factor", "=", "3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.BasicBlock.__init__": [[18, 30], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.BasicBlock.forward": [[32, 39], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.BasicBlock.conv2", "resnet_cifar_v2.BasicBlock.shortcut", "resnet_cifar_v2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.BasicBlock.bn1", "resnet_cifar_v2.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.Bottleneck.__init__": [[44, 58], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.Bottleneck.forward": [[60, 69], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.Bottleneck.bn3", "resnet_cifar_v2.Bottleneck.shortcut", "resnet_cifar_v2.Bottleneck.bn2", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.Bottleneck.bn1", "resnet_cifar_v2.Bottleneck.bn2", "resnet_cifar_v2.Bottleneck.conv3", "resnet_cifar_v2.Bottleneck.conv1", "resnet_cifar_v2.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.ResNet.__init__": [[72, 89], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_v2.ResNet._make_layer", "resnet_cifar_v2.ResNet._make_layer", "resnet_cifar_v2.ResNet._make_layer", "resnet_cifar_v2.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.ResNet._make_layer": [[90, 98], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.ResNet.forward": [[99, 108], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.ResNet.layer1", "resnet_cifar_v2.ResNet.layer2", "resnet_cifar_v2.ResNet.layer3", "resnet_cifar_v2.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_v2.ResNet.fc", "resnet_cifar_v2.ResNet.flatten", "resnet_cifar_v2.ResNet.bn1", "resnet_cifar_v2.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.WideResNet.__init__": [[111, 128], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_v2.WideResNet._make_layer", "resnet_cifar_v2.WideResNet._make_layer", "resnet_cifar_v2.WideResNet._make_layer", "resnet_cifar_v2.WideResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.WideResNet._make_layer": [[129, 137], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.WideResNet.forward": [[138, 147], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.WideResNet.layer1", "resnet_cifar_v2.WideResNet.layer2", "resnet_cifar_v2.WideResNet.layer3", "resnet_cifar_v2.WideResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_v2.WideResNet.fc", "resnet_cifar_v2.WideResNet.flatten", "resnet_cifar_v2.WideResNet.bn1", "resnet_cifar_v2.WideResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.SmallResNet.__init__": [[151, 167], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_v2.SmallResNet._make_layer", "resnet_cifar_v2.SmallResNet._make_layer", "resnet_cifar_v2.SmallResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "SmallResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "16", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "64", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.SmallResNet._make_layer": [[168, 176], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.SmallResNet.forward": [[177, 185], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar_v2.SmallResNet.layer1", "resnet_cifar_v2.SmallResNet.layer2", "resnet_cifar_v2.SmallResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_v2.SmallResNet.fc", "resnet_cifar_v2.SmallResNet.flatten", "resnet_cifar_v2.SmallResNet.bn1", "resnet_cifar_v2.SmallResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet18_v2": [[190, 192], ["resnet_cifar_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "cResNet18_v2", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cWideResNet18_2": [[193, 195], ["resnet_cifar_v2.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_2", "(", ")", ":", "\n", "    ", "return", "WideResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet34_v2": [[196, 198], ["resnet_cifar_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet34_v2", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet50": [[200, 202], ["resnet_cifar_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet101": [[204, 206], ["resnet_cifar_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet152": [[208, 210], ["resnet_cifar_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet20": [[213, 215], ["resnet_cifar_v2.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet20", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet32": [[216, 218], ["resnet_cifar_v2.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet32", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet44": [[219, 221], ["resnet_cifar_v2.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet44", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet56": [[222, 224], ["resnet_cifar_v2.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet56", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_v2.cResNet110": [[225, 227], ["resnet_cifar_v2.SmallResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet110", "(", ")", ":", "\n", "    ", "return", "SmallResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.forward": [[18, 24], ["ctx.save_for_backward", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["  ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inp", ")", ":", "\n", "# Save input for backward", "\n", "    ", "ctx", ".", "save_for_backward", "(", "inp", ")", "\n", "# Unscaled sign function", "\n", "return", "torch", ".", "sign", "(", "inp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.F_BinAct.backward": [[25, 36], ["grad_out.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# Get input from saved ctx", "\n", "    ", "inp", ",", "=", "ctx", ".", "saved_tensors", "\n", "# Clone grad_out", "\n", "grad_input", "=", "grad_out", ".", "clone", "(", ")", "\n", "# Gradient approximation from quadratic spline", "\n", "inp", "=", "torch", ".", "clamp", "(", "inp", ",", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "inp", "=", "2", "*", "(", "1", "-", "torch", ".", "abs", "(", "inp", ")", ")", "\n", "# Return gradient", "\n", "return", "grad_input", "*", "inp", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.BiRealAct.__init__": [[38, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "BiRealAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.BiRealAct.forward": [[41, 43], ["F_BinAct.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "F_BinAct", ".", "apply", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.BasicBlock_BinAct.__init__": [[49, 62], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct_v2.BiRealAct", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "in_planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.BasicBlock_BinAct.forward": [[64, 72], ["resnet_cifar_BinAct_v2.BasicBlock_BinAct.relu", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.conv2", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.shortcut", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.bn2", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.relu", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.bn1", "resnet_cifar_BinAct_v2.BasicBlock_BinAct.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "#out = self.bn2(self.conv2(out))", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.Bottleneck.__init__": [[77, 92], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct_v2.BiRealAct", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.Bottleneck.forward": [[94, 103], ["resnet_cifar_BinAct_v2.Bottleneck.relu", "resnet_cifar_BinAct_v2.Bottleneck.relu", "resnet_cifar_BinAct_v2.Bottleneck.bn3", "resnet_cifar_BinAct_v2.Bottleneck.shortcut", "resnet_cifar_BinAct_v2.Bottleneck.bn2", "resnet_cifar_BinAct_v2.Bottleneck.relu", "resnet_cifar_BinAct_v2.Bottleneck.bn1", "resnet_cifar_BinAct_v2.Bottleneck.bn2", "resnet_cifar_BinAct_v2.Bottleneck.conv3", "resnet_cifar_BinAct_v2.Bottleneck.conv1", "resnet_cifar_BinAct_v2.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.ResNet_BinAct.__init__": [[106, 124], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct_v2.ResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.ResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.ResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.ResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "ResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.ResNet_BinAct._make_layer": [[125, 133], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.ResNet_BinAct.forward": [[134, 143], ["resnet_cifar_BinAct_v2.ResNet_BinAct.relu", "resnet_cifar_BinAct_v2.ResNet_BinAct.layer1", "resnet_cifar_BinAct_v2.ResNet_BinAct.layer2", "resnet_cifar_BinAct_v2.ResNet_BinAct.layer3", "resnet_cifar_BinAct_v2.ResNet_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct_v2.ResNet_BinAct.fc", "resnet_cifar_BinAct_v2.ResNet_BinAct.flatten", "resnet_cifar_BinAct_v2.ResNet_BinAct.bn1", "resnet_cifar_BinAct_v2.ResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.Bottleneck2.__init__": [[148, 165], ["torch.Module.__init__", "builder.conv1x1", "builder.batchnorm", "builder.group_conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.conv1x1", "builder.batchnorm"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.group_conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "in_planes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width_ratio", "=", "planes", "/", "(", "widen_factor", "*", "64.", ")", "\n", "D", "=", "cardinality", "*", "int", "(", "base_width", "*", "width_ratio", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "in_planes", ",", "D", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "group_conv3x3", "(", "D", ",", "D", ",", "groups", "=", "cardinality", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "D", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "D", ",", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "builder", ".", "conv1x1", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "stride", "=", "stride", ")", ",", "\n", "builder", ".", "batchnorm", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.Bottleneck2.forward": [[167, 175], ["resnet_cifar_BinAct_v2.Bottleneck2.relu", "resnet_cifar_BinAct_v2.Bottleneck2.relu", "resnet_cifar_BinAct_v2.Bottleneck2.bn3", "resnet_cifar_BinAct_v2.Bottleneck2.shortcut", "resnet_cifar_BinAct_v2.Bottleneck2.relu", "resnet_cifar_BinAct_v2.Bottleneck2.bn1", "resnet_cifar_BinAct_v2.Bottleneck2.bn2", "resnet_cifar_BinAct_v2.Bottleneck2.conv3", "resnet_cifar_BinAct_v2.Bottleneck2.conv1", "resnet_cifar_BinAct_v2.Bottleneck2.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.ResNeXtBottleneck.__init__": [[181, 204], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.shortcut.add_module", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.shortcut.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", ",", "cardinality", ",", "widen_factor", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            in_channels: input channel dimensionality\n            out_channels: output channel dimensionality\n            stride: conv stride. Replaces pooling layer.\n            cardinality: num of convolution groups.\n            widen_factor: factor to reduce the input dimensionality before convolution.\n        \"\"\"", "\n", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "cardinality", "*", "out_channels", "//", "widen_factor", "\n", "self", ".", "conv_reduce", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "D", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_reduce", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_conv", "=", "nn", ".", "Conv2d", "(", "D", ",", "D", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "D", ")", "\n", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "D", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_expand", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_conv'", ",", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "shortcut", ".", "add_module", "(", "'shortcut_bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.ResNeXtBottleneck.forward": [[205, 214], ["resnet_cifar_BinAct_v2.ResNeXtBottleneck.conv_reduce.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.conv_conv.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.conv_expand.forward", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.bn_expand.forward", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.shortcut.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.bn_reduce.forward", "resnet_cifar_BinAct_v2.ResNeXtBottleneck.bn.forward"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "bottleneck", "=", "self", ".", "conv_reduce", ".", "forward", "(", "x", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn_reduce", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_conv", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "F", ".", "relu", "(", "self", ".", "bn", ".", "forward", "(", "bottleneck", ")", ",", "inplace", "=", "True", ")", "\n", "bottleneck", "=", "self", ".", "conv_expand", ".", "forward", "(", "bottleneck", ")", "\n", "bottleneck", "=", "self", ".", "bn_expand", ".", "forward", "(", "bottleneck", ")", "\n", "residual", "=", "self", ".", "shortcut", ".", "forward", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "residual", "+", "bottleneck", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNeXt_BinAct.__init__": [[217, 237], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "cardinality", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNeXt_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "self", ".", "base_width", "=", "base_width", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "cardinality", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "cardinality", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "cardinality", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "cardinality", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNeXt_BinAct._make_layer": [[238, 247], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "cardinality", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "#layers = []", "\n", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "cardinality", ",", "stride", ",", "self", ".", "base_width", ",", "self", ".", "widen_factor", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNeXt_BinAct.forward": [[248, 257], ["resnet_cifar_BinAct_v2.WideResNeXt_BinAct.relu", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.layer1", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.layer2", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.layer3", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.fc", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.flatten", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.bn1", "resnet_cifar_BinAct_v2.WideResNeXt_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.__init__": [[264, 298], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar_BinAct_v2.CifarResNeXt.block", "resnet_cifar_BinAct_v2.CifarResNeXt.block", "resnet_cifar_BinAct_v2.CifarResNeXt.block", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_cifar_BinAct_v2.CifarResNeXt.state_dict", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "key.split", "resnet_cifar_BinAct_v2.CifarResNeXt.state_dict", "resnet_cifar_BinAct_v2.CifarResNeXt.state_dict", "resnet_cifar_BinAct_v2.CifarResNeXt.state_dict"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["def", "__init__", "(", "self", ",", "cardinality", "=", "8", ",", "depth", "=", "29", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            cardinality: number of convolution groups.\n            depth: number of layers.\n            num_classes: number of classes\n            widen_factor: factor to adjust the channel dimensionality\n        \"\"\"", "\n", "super", "(", "CifarResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block_depth", "=", "(", "self", ".", "depth", "-", "2", ")", "//", "9", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "output_size", "=", "64", "\n", "self", ".", "stages", "=", "[", "64", ",", "64", "*", "self", ".", "widen_factor", ",", "128", "*", "self", ".", "widen_factor", ",", "256", "*", "self", ".", "widen_factor", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "stage_1", "=", "self", ".", "block", "(", "'stage_1'", ",", "self", ".", "stages", "[", "0", "]", ",", "self", ".", "stages", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "block", "(", "'stage_2'", ",", "self", ".", "stages", "[", "1", "]", ",", "self", ".", "stages", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "block", "(", "'stage_3'", ",", "self", ".", "stages", "[", "2", "]", ",", "self", ".", "stages", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "stages", "[", "3", "]", ",", "num_classes", ")", "\n", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'weight'", ":", "\n", "                ", "if", "'conv'", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "'bn'", "in", "key", ":", "\n", "                    ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "elif", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "", "", "init", ".", "kaiming_normal", "(", "self", ".", "fc", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block": [[299, 318], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential.add_module", "torch.Sequential.add_module", "resnet_cifar_BinAct_v2.ResNeXtBottleneck", "resnet_cifar_BinAct_v2.ResNeXtBottleneck"], "methods", ["None"], ["", "def", "block", "(", "self", ",", "name", ",", "in_channels", ",", "out_channels", ",", "pool_stride", "=", "2", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            name: string name of the current block.\n            in_channels: number of input channels\n            out_channels: number of output channels\n            pool_stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "block", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "bottleneck", "in", "range", "(", "self", ".", "block_depth", ")", ":", "\n", "            ", "name_", "=", "'%s_bottleneck_%d'", "%", "(", "name", ",", "bottleneck", ")", "\n", "if", "bottleneck", "==", "0", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "ResNeXtBottleneck", "(", "in_channels", ",", "out_channels", ",", "pool_stride", ",", "self", ".", "cardinality", ",", "\n", "self", ".", "widen_factor", ")", ")", "\n", "", "else", ":", "\n", "                ", "block", ".", "add_module", "(", "name_", ",", "\n", "ResNeXtBottleneck", "(", "out_channels", ",", "out_channels", ",", "1", ",", "self", ".", "cardinality", ",", "self", ".", "widen_factor", ")", ")", "\n", "", "", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.forward": [[319, 330], ["resnet_cifar_BinAct_v2.CifarResNeXt.conv1.forward", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar_BinAct_v2.CifarResNeXt.stage_1.forward", "resnet_cifar_BinAct_v2.CifarResNeXt.stage_2.forward", "resnet_cifar_BinAct_v2.CifarResNeXt.stage_3.forward", "resnet_cifar_BinAct_v2.CifarResNeXt.avgpool", "resnet_cifar_BinAct_v2.CifarResNeXt.view", "resnet_cifar_BinAct_v2.CifarResNeXt.fc", "resnet_cifar_BinAct_v2.CifarResNeXt.bn1.forward", "resnet_cifar_BinAct_v2.CifarResNeXt.size"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", ".", "forward", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", ".", "forward", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNet_BinAct.__init__": [[332, 350], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.WideResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "WideResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "64", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNet_BinAct._make_layer": [[351, 359], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.WideResNet_BinAct.forward": [[360, 371], ["resnet_cifar_BinAct_v2.WideResNet_BinAct.relu", "resnet_cifar_BinAct_v2.WideResNet_BinAct.layer1", "resnet_cifar_BinAct_v2.WideResNet_BinAct.layer2", "resnet_cifar_BinAct_v2.WideResNet_BinAct.layer3", "resnet_cifar_BinAct_v2.WideResNet_BinAct.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct_v2.WideResNet_BinAct.fc", "resnet_cifar_BinAct_v2.WideResNet_BinAct.flatten", "resnet_cifar_BinAct_v2.WideResNet_BinAct.bn1", "resnet_cifar_BinAct_v2.WideResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = self.conv1(x)", "\n", "#out = self.(x)", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.SmallResNet_BinAct.__init__": [[374, 391], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "resnet_cifar_BinAct_v2.SmallResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.SmallResNet_BinAct._make_layer", "resnet_cifar_BinAct_v2.SmallResNet_BinAct._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "builder.conv1x1", "resnet_cifar_BinAct_v2.BiRealAct"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "SmallResNet_BinAct", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "builder", "=", "builder", "\n", "\n", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "3", ",", "16", ",", "stride", "=", "1", ",", "first_layer", "=", "True", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "relu", "=", "(", "lambda", ":", "BiRealAct", "(", ")", ")", "(", ")", "\n", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "64", "*", "block", ".", "expansion", ",", "10", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "64", "*", "block", ".", "expansion", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.SmallResNet_BinAct._make_layer": [[392, 400], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "builder", ",", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.SmallResNet_BinAct.forward": [[401, 409], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct.relu", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.layer1", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.layer2", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.fc", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.flatten", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.bn1", "resnet_cifar_BinAct_v2.SmallResNet_BinAct.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", ".", "flatten", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.resnext29_8x64d_c10": [[411, 414], ["resnet_cifar_BinAct_v2.CifarResNeXt"], "function", ["None"], ["", "", "def", "resnext29_8x64d_c10", "(", ")", ":", "\n", "    ", "model", "=", "CifarResNeXt", "(", "cardinality", "=", "8", ",", "depth", "=", "29", ",", "widen_factor", "=", "4", ",", "num_classes", "=", "10", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet18_BinAct_v2": [[415, 417], ["resnet_cifar_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet18_BinAct_v2", "(", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cWideResNet18_2_BinAct_v2": [[418, 420], ["resnet_cifar_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_2_BinAct_v2", "(", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cWideResNet18_3_BinAct": [[421, 423], ["resnet_cifar_BinAct_v2.WideResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNet18_3_BinAct", "(", ")", ":", "\n", "    ", "return", "WideResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "widen_factor", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet34_BinAct": [[424, 426], ["resnet_cifar_BinAct_v2.ResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet34_BinAct", "(", ")", ":", "\n", "    ", "return", "ResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cWideResNeXt18_2_BinAct": [[428, 430], ["resnet_cifar_BinAct_v2.WideResNeXt_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNeXt18_2_BinAct", "(", ")", ":", "\n", "    ", "return", "WideResNeXt_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck2", ",", "[", "1", ",", "2", ",", "6", ",", "2", "]", ",", "[", "4", ",", "8", ",", "8", ",", "16", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cWideResNeXt18_2_BinAct_small": [[431, 433], ["resnet_cifar_BinAct_v2.WideResNeXt_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cWideResNeXt18_2_BinAct_small", "(", ")", ":", "\n", "    ", "return", "WideResNeXt_BinAct", "(", "get_builder", "(", ")", ",", "Bottleneck2", ",", "[", "1", ",", "2", ",", "6", ",", "2", "]", ",", "[", "4", ",", "4", ",", "8", ",", "8", "]", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet20_BinAct": [[447, 449], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet20_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet32_BinAct": [[450, 452], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet32_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet44_BinAct": [[453, 455], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet44_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet56_BinAct": [[456, 458], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet56_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.cResNet110_BinAct": [[459, 461], ["resnet_cifar_BinAct_v2.SmallResNet_BinAct", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "cResNet110_BinAct", "(", ")", ":", "\n", "    ", "return", "SmallResNet_BinAct", "(", "get_builder", "(", ")", ",", "BasicBlock_BinAct", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.BasicBlock.__init__": [[11, 23], ["torch.Module.__init__", "builder.conv3x3", "builder.batchnorm", "builder.activation", "builder.conv3x3", "builder.batchnorm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_width", "/", "64", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Base width >64 does not work for BasicBlock\"", ")", "\n", "\n", "", "self", ".", "conv1", "=", "builder", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "planes", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.BasicBlock.forward": [[24, 47], ["resnet_v2.BasicBlock.conv1", "resnet_v2.BasicBlock.relu", "resnet_v2.BasicBlock.conv2", "resnet_v2.BasicBlock.relu", "resnet_v2.BasicBlock.bn1", "resnet_v2.BasicBlock.bn2", "resnet_v2.BasicBlock.downsample", "resnet_v2.BasicBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "bn2", "is", "not", "None", ":", "\n", "\t            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.Bottleneck.__init__": [[56, 68], ["torch.Module.__init__", "int", "builder.conv1x1", "builder.batchnorm", "builder.conv3x3", "builder.batchnorm", "builder.conv1x1", "builder.batchnorm", "builder.activation"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv3x3", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation"], ["def", "__init__", "(", "self", ",", "builder", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "base_width", "/", "64", ")", "\n", "self", ".", "conv1", "=", "builder", ".", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv2", "=", "builder", ".", "conv3x3", "(", "width", ",", "width", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn2", "=", "builder", ".", "batchnorm", "(", "width", ")", "\n", "self", ".", "conv3", "=", "builder", ".", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "builder", ".", "batchnorm", "(", "planes", "*", "self", ".", "expansion", ",", "last_bn", "=", "True", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.Bottleneck.forward": [[69, 92], ["resnet_v2.Bottleneck.conv1", "resnet_v2.Bottleneck.bn1", "resnet_v2.Bottleneck.relu", "resnet_v2.Bottleneck.conv2", "resnet_v2.Bottleneck.bn2", "resnet_v2.Bottleneck.relu", "resnet_v2.Bottleneck.conv3", "resnet_v2.Bottleneck.bn3", "resnet_v2.Bottleneck.bn2", "resnet_v2.Bottleneck.relu", "resnet_v2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet.__init__": [[98, 127], ["torch.Module.__init__", "builder.batchnorm", "builder.activation", "torch.MaxPool2d", "resnet_v2.ResNet._make_layer", "resnet_v2.ResNet._make_layer", "resnet_v2.ResNet._make_layer", "resnet_v2.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "512", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet._make_layer": [[128, 147], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet.forward": [[148, 168], ["resnet_v2.ResNet.conv1", "resnet_v2.ResNet.maxpool", "resnet_v2.ResNet.relu", "resnet_v2.ResNet.layer1", "resnet_v2.ResNet.layer2", "resnet_v2.ResNet.layer3", "resnet_v2.ResNet.layer4", "resnet_v2.ResNet.avgpool", "resnet_v2.ResNet.fc", "resnet_v2.ResNet.view", "resnet_v2.ResNet.bn1", "resnet_v2.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.__init__": [[172, 201], ["torch.Module.__init__", "torch.MaxPool2d", "builder.batchnorm", "builder.activation", "resnet_v2.WideResNet._make_layer", "resnet_v2.WideResNet._make_layer", "resnet_v2.WideResNet._make_layer", "resnet_v2.WideResNet._make_layer", "torch.AdaptiveAvgPool2d", "print", "torch.Conv2d", "builder.conv7x7", "torch.Conv2d", "builder.conv1x1"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.activation", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv7x7", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "builder", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", ",", "widen_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base_width", "=", "base_width", "\n", "if", "self", ".", "base_width", "//", "64", ">", "1", ":", "\n", "            ", "print", "(", "f\"==> Using {self.base_width // 64}x wide model\"", ")", "\n", "\n", "", "if", "args", ".", "first_layer_dense", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "builder", ".", "conv7x7", "(", "3", ",", "64", ",", "stride", "=", "2", ",", "first_layer", "=", "True", ")", "\n", "\n", "", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "builder", ".", "batchnorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "builder", ".", "activation", "(", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "64", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "128", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "builder", ",", "block", ",", "256", "*", "(", "widen_factor", "+", "1", ")", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "if", "args", ".", "last_layer_dense", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Conv2d", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "args", ".", "num_classes", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "builder", ".", "conv1x1", "(", "256", "*", "(", "widen_factor", "+", "1", ")", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet._make_layer": [[202, 221], ["layers.append", "range", "torch.Sequential", "builder.conv1x1", "builder.batchnorm", "block", "layers.append", "torch.Sequential", "block"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.conv1x1", "home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.Builder.batchnorm", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block", "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_cifar_BinAct_v2.CifarResNeXt.block"], ["", "", "def", "_make_layer", "(", "self", ",", "builder", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "dconv", "=", "builder", ".", "conv1x1", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", "=", "stride", "\n", ")", "\n", "dbn", "=", "builder", ".", "batchnorm", "(", "planes", "*", "block", ".", "expansion", ")", "\n", "if", "dbn", "is", "not", "None", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "dconv", ",", "dbn", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "dconv", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "builder", ",", "self", ".", "inplanes", ",", "planes", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet.forward": [[222, 242], ["resnet_v2.WideResNet.conv1", "resnet_v2.WideResNet.maxpool", "resnet_v2.WideResNet.relu", "resnet_v2.WideResNet.layer1", "resnet_v2.WideResNet.layer2", "resnet_v2.WideResNet.layer3", "resnet_v2.WideResNet.layer4", "resnet_v2.WideResNet.avgpool", "resnet_v2.WideResNet.fc", "resnet_v2.WideResNet.view", "resnet_v2.WideResNet.bn1", "resnet_v2.WideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "bn1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet18_v2": [[247, 249], ["resnet_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "", "def", "ResNet18_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet34_v2": [[251, 253], ["resnet_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet34_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet50_v2": [[255, 257], ["resnet_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet50_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.ResNet101": [[259, 261], ["resnet_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "ResNet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet18_v2": [[262, 264], ["resnet_v2.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet18_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet34_2_v2": [[265, 267], ["resnet_v2.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet34_2_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "get_builder", "(", ")", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "1000", ",", "widen_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet50_2_v2": [[269, 272], ["resnet_v2.WideResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet50_2_v2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "WideResNet", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.models.resnet_v2.WideResNet101_2": [[275, 278], ["resnet_v2.ResNet", "utils.builder.get_builder"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.utils.builder.get_builder"], ["", "def", "WideResNet101_2", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "\n", "get_builder", "(", ")", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "base_width", "=", "64", "*", "2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar.CIFAR10.__init__": [[11, 74], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torchvision.transforms.Normalize", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"cifar10\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "# NEW: For multinode training", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", ",", "\n", ")", "\n", "\n", "# NEW: For multinode training", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "val_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__init__": [[12, 17], ["print", "cifar_gaussian.AddGaussianNoise.__repr__"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "0.", ",", "std", "=", "0.1", ",", "p_noise", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "std", "=", "std", "# Standard deviation", "\n", "self", ".", "mean", "=", "mean", "# Mean", "\n", "self", ".", "p_noise", "=", "p_noise", "# Probability that noise is added to image (carried out by transforms.RandomApply)", "\n", "print", "(", "'   with '", "+", "self", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__call__": [[19, 25], ["torch.clamp", "torch.randn", "torch.clamp.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "# Generate noise", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "tensor", ".", "size", "(", ")", ")", "*", "self", ".", "std", "+", "self", ".", "mean", "\n", "# Add noise to tensor and clamp in range [0,1]", "\n", "tensor", "=", "torch", ".", "clamp", "(", "tensor", "+", "noise", ",", "0.", ",", "1.", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.AddGaussianNoise.__repr__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(mean={0}, std={1}, p_noise={2})'", ".", "format", "(", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "p_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.GaussianNoiseDataset.__init__": [[33, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "clean_transform", ",", "gaussian_transform", ",", "no_jsd", "=", "True", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "clean_transform", "=", "clean_transform", "\n", "self", ".", "gaussian_transform", "=", "gaussian_transform", "\n", "self", ".", "no_jsd", "=", "no_jsd", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.GaussianNoiseDataset.__getitem__": [[39, 47], ["cifar_gaussian.GaussianNoiseDataset.gaussian_transform", "cifar_gaussian.GaussianNoiseDataset.clean_transform", "cifar_gaussian.GaussianNoiseDataset.gaussian_transform", "cifar_gaussian.GaussianNoiseDataset.gaussian_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "x", ",", "y", "=", "self", ".", "dataset", "[", "i", "]", "\n", "if", "self", ".", "no_jsd", ":", "\n", "      ", "return", "self", ".", "gaussian_transform", "(", "x", ")", ",", "y", "\n", "", "else", ":", "\n", "      ", "im_tuple", "=", "(", "self", ".", "clean_transform", "(", "x", ")", ",", "self", ".", "gaussian_transform", "(", "x", ")", ",", "\n", "self", ".", "gaussian_transform", "(", "x", ")", ")", "\n", "return", "im_tuple", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.GaussianNoiseDataset.__len__": [[48, 50], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_gaussian.CIFAR10_gaussian.__init__": [[55, 130], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "cifar_gaussian.GaussianNoiseDataset", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.RandomApply", "torchvision.transforms.Compose", "cifar_gaussian.AddGaussianNoise", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CIFAR10_gaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"cifar10\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", "\n", ")", "\n", "\n", "# Load datasets", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "clean_preprocess", "=", "transform", "=", "transforms", ".", "Compose", "(", "[", "normalize", "]", ")", "\n", "\n", "gaussian_preprocess", "=", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomApply", "(", "[", "AddGaussianNoise", "(", "0.", ",", "args", ".", "std_gauss", ",", "1", "-", "args", ".", "p_clean", ")", "]", ",", "p", "=", "1", "-", "args", ".", "p_clean", ")", ",", "\n", "normalize", "]", ")", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "train_transform", ",", "\n", ")", "\n", "\n", "train_dataset", "=", "GaussianNoiseDataset", "(", "train_dataset", ",", "clean_preprocess", ",", "gaussian_preprocess", ",", "no_jsd", "=", "(", "not", "args", ".", "jsd", ")", ")", "\n", "\n", "\n", "# NEW: For multinode training", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", ",", "\n", ")", "\n", "\n", "# NEW: For multinode training", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "val_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "# Added for testing on CIFAR-10-C dataset", "\n", "", "self", ".", "validation_dataset", "=", "test_dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.data.mnist.MNIST.__init__": [[7, 40], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"mnist\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "\n", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "\n", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.tinyimagenet.TinyImageNet.__init__": [[11, 60], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"tinyimagenet\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"val\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.imagenet.ImageNet.__init__": [[11, 87], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.join", "os.path.join", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"imagenet\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"train\"", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"val\"", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "valdir", ",", "\n", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", "\n", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "# For multinode training", "\n", "            ", "self", ".", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "#shuffle=True,", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "# For multinode training", "\n", "            ", "self", ".", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "val_dataset", ")", "\n", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "val_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.bigcifar.BigCIFAR10.__init__": [[7, 47], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "BigCIFAR10", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"cifar10\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "input_size", "=", "128", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", ",", "\n", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", "\n", ")", "\n", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "input_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", ",", "\n", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.AugMixDataset.__init__": [[44, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "preprocess", ",", "no_jsd", "=", "True", ")", ":", "\n", "    ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "preprocess", "=", "preprocess", "\n", "self", ".", "no_jsd", "=", "no_jsd", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.AugMixDataset.__getitem__": [[49, 57], ["cifar_augmix.aug", "cifar_augmix.AugMixDataset.preprocess", "cifar_augmix.aug", "cifar_augmix.aug"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.aug", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.aug", "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.aug"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "    ", "x", ",", "y", "=", "self", ".", "dataset", "[", "i", "]", "\n", "if", "self", ".", "no_jsd", ":", "\n", "      ", "return", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "y", "\n", "", "else", ":", "\n", "      ", "im_tuple", "=", "(", "self", ".", "preprocess", "(", "x", ")", ",", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ",", "\n", "aug", "(", "x", ",", "self", ".", "preprocess", ")", ")", "\n", "return", "im_tuple", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.AugMixDataset.__len__": [[58, 60], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__": [[63, 130], ["super().__init__", "os.path.join", "torch.cuda.is_available", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "cifar_augmix.AugMixDataset", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.CIFAR10_augmix.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "CIFAR10_augmix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "data_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"cifar10\"", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "# Data loading code", "\n", "kwargs", "=", "{", "\"num_workers\"", ":", "args", ".", "workers", ",", "\"pin_memory\"", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.491", ",", "0.482", ",", "0.447", "]", ",", "std", "=", "[", "0.247", ",", "0.243", ",", "0.262", "]", "\n", ")", "\n", "\n", "\n", "# Load datasets", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", "]", ")", "\n", "preprocess", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", ")", "\n", "test_transform", "=", "preprocess", "\n", "\n", "train_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_dataset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "#base_c_path = './data/cifar/CIFAR-10-C/'", "\n", "num_classes", "=", "10", "\n", "\n", "train_dataset", "=", "AugMixDataset", "(", "train_dataset", ",", "preprocess", ",", "no_jsd", "=", "(", "not", "args", ".", "jsd", ")", ")", "\n", "\n", "# NEW: For multinode training", "\n", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "train_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "# NEW: For multinode training", "\n", "", "if", "args", ".", "distributed", "==", "False", ":", "\n", "            ", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_dataset", ")", "\n", "self", ".", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "self", ".", "val_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "self", ".", "val_sampler", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "# Added for testing on CIFAR-10-C dataset", "\n", "", "self", ".", "validation_dataset", "=", "test_dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.data.cifar_augmix.aug": [[11, 39], ["numpy.float32", "numpy.float32", "torch.zeros_like", "range", "numpy.random.dirichlet", "numpy.random.beta", "preprocess", "image.copy", "range", "numpy.random.randint", "numpy.random.choice", "np.random.choice.", "preprocess", "preprocess"], "function", ["None"], ["def", "aug", "(", "image", ",", "preprocess", ")", ":", "\n", "  ", "\"\"\"Perform AugMix augmentations and compute mixture.\n  Args:\n    image: PIL.Image input image\n    preprocess: Preprocessing function which should return a torch tensor.\n  Returns:\n    mixed: Augmented and mixed image.\n  \"\"\"", "\n", "aug_list", "=", "augmentations", ".", "augmentations", "\n", "if", "args", ".", "all_augmix_augmentations", ":", "\n", "    ", "aug_list", "=", "augmentations", ".", "augmentations_all", "\n", "\n", "", "ws", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "dirichlet", "(", "[", "1", "]", "*", "args", ".", "mixture_width", ")", ")", "\n", "m", "=", "np", ".", "float32", "(", "np", ".", "random", ".", "beta", "(", "1", ",", "1", ")", ")", "\n", "\n", "mix", "=", "torch", ".", "zeros_like", "(", "preprocess", "(", "image", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mixture_width", ")", ":", "\n", "    ", "image_aug", "=", "image", ".", "copy", "(", ")", "\n", "depth", "=", "args", ".", "mixture_depth", "if", "args", ".", "mixture_depth", ">", "0", "else", "np", ".", "random", ".", "randint", "(", "\n", "1", ",", "4", ")", "\n", "for", "_", "in", "range", "(", "depth", ")", ":", "\n", "      ", "op", "=", "np", ".", "random", ".", "choice", "(", "aug_list", ")", "\n", "image_aug", "=", "op", "(", "image_aug", ",", "args", ".", "aug_severity", ")", "\n", "# Preprocessing commutes since all coefficients are convex", "\n", "", "mix", "+=", "ws", "[", "i", "]", "*", "preprocess", "(", "image_aug", ")", "\n", "\n", "", "mixed", "=", "(", "1", "-", "m", ")", "*", "preprocess", "(", "image", ")", "+", "m", "*", "mix", "\n", "return", "mixed", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter": [[24, 36], ["int"], "function", ["None"], ["def", "int_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval .\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    An int that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "int", "(", "level", "*", "maxval", "/", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter": [[38, 50], ["float"], "function", ["None"], ["", "def", "float_parameter", "(", "level", ",", "maxval", ")", ":", "\n", "  ", "\"\"\"Helper function to scale `val` between 0 and maxval.\n\n  Args:\n    level: Level of the operation that will be between [0, `PARAMETER_MAX`].\n    maxval: Maximum value that the operation can have. This will be scaled to\n      level/PARAMETER_MAX.\n\n  Returns:\n    A float that results from scaling `maxval` according to `level`.\n  \"\"\"", "\n", "return", "float", "(", "level", ")", "*", "maxval", "/", "10.", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level": [[52, 54], ["numpy.random.uniform"], "function", ["None"], ["", "def", "sample_level", "(", "n", ")", ":", "\n", "  ", "return", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.1", ",", "high", "=", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.autocontrast": [[56, 58], ["PIL.ImageOps.autocontrast"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.autocontrast"], ["", "def", "autocontrast", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "autocontrast", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.equalize": [[60, 62], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.equalize"], ["", "def", "equalize", "(", "pil_img", ",", "_", ")", ":", "\n", "  ", "return", "ImageOps", ".", "equalize", "(", "pil_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.posterize": [[64, 67], ["augmentations.int_parameter", "PIL.ImageOps.posterize", "augmentations.sample_level"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.posterize", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "posterize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "4", ")", "\n", "return", "ImageOps", ".", "posterize", "(", "pil_img", ",", "4", "-", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.rotate": [[69, 74], ["augmentations.int_parameter", "pil_img.rotate", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.rotate", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "rotate", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "degrees", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "30", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "degrees", "=", "-", "degrees", "\n", "", "return", "pil_img", ".", "rotate", "(", "degrees", ",", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.solarize": [[76, 79], ["augmentations.int_parameter", "PIL.ImageOps.solarize", "augmentations.sample_level"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.solarize", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "solarize", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "256", ")", "\n", "return", "ImageOps", ".", "solarize", "(", "pil_img", ",", "256", "-", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.shear_x": [[81, 88], ["augmentations.float_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "shear_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "level", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.shear_y": [[90, 97], ["augmentations.float_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "shear_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "0.3", ")", "\n", "if", "np", ".", "random", ".", "uniform", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "level", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.translate_x": [[99, 106], ["augmentations.int_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "translate_x", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "IMAGE_SIZE", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "level", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.translate_y": [[108, 115], ["augmentations.int_parameter", "pil_img.transform", "augmentations.sample_level", "numpy.random.random"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.int_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "translate_y", "(", "pil_img", ",", "level", ")", ":", "\n", "  ", "level", "=", "int_parameter", "(", "sample_level", "(", "level", ")", ",", "IMAGE_SIZE", "/", "3", ")", "\n", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "    ", "level", "=", "-", "level", "\n", "", "return", "pil_img", ".", "transform", "(", "(", "IMAGE_SIZE", ",", "IMAGE_SIZE", ")", ",", "\n", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "level", ")", ",", "\n", "resample", "=", "Image", ".", "BILINEAR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.color": [[118, 121], ["PIL.ImageEnhance.Color().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "color", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Color", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.contrast": [[124, 127], ["PIL.ImageEnhance.Contrast().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "contrast", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Contrast", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.brightness": [[130, 133], ["PIL.ImageEnhance.Brightness().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "brightness", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Brightness", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sharpness": [[136, 139], ["PIL.ImageEnhance.Sharpness().enhance", "augmentations.float_parameter", "augmentations.sample_level", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.float_parameter", "home.repos.pwc.inspect_result.chrundle_biprop.data.augmentations.sample_level"], ["", "def", "sharpness", "(", "pil_img", ",", "level", ")", ":", "\n", "    ", "level", "=", "float_parameter", "(", "sample_level", "(", "level", ")", ",", "1.8", ")", "+", "0.1", "\n", "return", "ImageEnhance", ".", "Sharpness", "(", "pil_img", ")", ".", "enhance", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.data.utils.one_batch_dataset": [[5, 23], ["print", "torch.randperm", "_OneBatchWrapper", "len", "len", "idx.item"], "function", ["None"], ["def", "one_batch_dataset", "(", "dataset", ",", "batch_size", ")", ":", "\n", "    ", "print", "(", "\"==> Grabbing a single batch\"", ")", "\n", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "one_batch", "=", "[", "dataset", "[", "idx", ".", "item", "(", ")", "]", "for", "idx", "in", "perm", "[", ":", "batch_size", "]", "]", "\n", "\n", "class", "_OneBatchWrapper", "(", "Dataset", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "batch", "=", "one_batch", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "return", "self", ".", "batch", "[", "index", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "batch", ")", "\n", "\n", "", "", "return", "_OneBatchWrapper", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.trim_preceding_hyphens": [[4, 10], ["None"], "function", ["None"], ["def", "trim_preceding_hyphens", "(", "st", ")", ":", "\n", "    ", "i", "=", "0", "\n", "while", "st", "[", "i", "]", "==", "\"-\"", ":", "\n", "        ", "i", "+=", "1", "\n", "\n", "", "return", "st", "[", "i", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.arg_to_varname": [[12, 17], ["parser.trim_preceding_hyphens", "st.replace.replace", "st.replace.split"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.trim_preceding_hyphens"], ["", "def", "arg_to_varname", "(", "st", ":", "str", ")", ":", "\n", "    ", "st", "=", "trim_preceding_hyphens", "(", "st", ")", "\n", "st", "=", "st", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "\n", "\n", "return", "st", ".", "split", "(", "\"=\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.argv_to_vars": [[19, 26], ["arg.startswith", "var_names.append", "parser.arg_to_varname", "parser.arg_to_varname"], "function", ["home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.arg_to_varname", "home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.arg_to_varname"], ["", "def", "argv_to_vars", "(", "argv", ")", ":", "\n", "    ", "var_names", "=", "[", "]", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "arg", ".", "startswith", "(", "\"-\"", ")", "and", "arg_to_varname", "(", "arg", ")", "!=", "\"config\"", ":", "\n", "            ", "var_names", ".", "append", "(", "arg_to_varname", "(", "arg", ")", ")", "\n", "\n", "", "", "return", "var_names", "\n", "\n"]], "home.repos.pwc.inspect_result.chrundle_biprop.configs.parser.produce_override_string": [[28, 41], ["getattr", "lines.append", "type", "lines.append", "lines.append", "str", "str", "str"], "function", ["None"], ["", "def", "produce_override_string", "(", "args", ",", "override_args", ")", ":", "\n", "    ", "lines", "=", "[", "]", "\n", "for", "v", "in", "override_args", ":", "\n", "        ", "if", "v", "!=", "\"multigpu\"", ":", "\n", "            ", "v_arg", "=", "getattr", "(", "args", ",", "v", ")", "\n", "if", "type", "(", "v_arg", ")", "in", "USABLE_TYPES", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "str", "(", "v_arg", ")", ")", "\n", "", "else", ":", "\n", "                ", "lines", ".", "append", "(", "v", "+", "\": \"", "+", "f'\"{str(v_arg)}\"'", ")", "\n", "", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "\"multigpu: \"", "+", "str", "(", "args", ".", "multigpu", ")", ")", "\n", "\n", "", "", "return", "\"\\n# ===== Overrided ===== #\\n\"", "+", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "", ""]]}