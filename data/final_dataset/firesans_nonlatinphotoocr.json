{"home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.lmdbDataset.__init__": [[18, 37], ["lmdb.open", "print", "sys.exit", "dataset.lmdbDataset.env.begin", "int", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "'num-samples'", ".", "encode", "(", "'utf-8'", ")", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.lmdbDataset.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.lmdbDataset.__getitem__": [[41, 68], ["len", "dataset.lmdbDataset.env.begin", "txn.get", "io.BytesIO", "io.BytesIO.write", "io.BytesIO.seek", "txn.get().decode", "img_key.encode", "PIL.Image.open().convert", "dataset.lmdbDataset.transform", "dataset.lmdbDataset.target_transform", "print", "txn.get", "PIL.Image.open", "label_key.encode"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img_key", "=", "'image-%09d'", "%", "index", "\n", "imgbuf", "=", "txn", ".", "get", "(", "img_key", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "try", ":", "\n", "                ", "img", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "'L'", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label_key", "=", "'label-%09d'", "%", "index", "\n", "# label = txn.get(label_key.encode('utf-8'))", "\n", "label", "=", "txn", ".", "get", "(", "label_key", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "", "return", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.resizeNormalize.__init__": [[72, 76], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.resizeNormalize.__call__": [[77, 82], ["dataset.resizeNormalize.resize", "dataset.resizeNormalize.toTensor", "dataset.resizeNormalize.sub_().div_", "dataset.resizeNormalize.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.randomSequentialSampler.__init__": [[86, 89], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.randomSequentialSampler.__iter__": [[90, 105], ["torch.LongTensor().fill_", "range", "iter", "len", "len", "random.randint", "random.randint", "torch.LongTensor", "torch.range", "torch.range", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "len", "(", "self", ")", "//", "self", ".", "batch_size", "\n", "tail", "=", "len", "(", "self", ")", "%", "self", ".", "batch_size", "\n", "index", "=", "torch", ".", "LongTensor", "(", "len", "(", "self", ")", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "batch_index", "=", "random_start", "+", "torch", ".", "range", "(", "0", ",", "self", ".", "batch_size", "-", "1", ")", "\n", "index", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "=", "batch_index", "\n", "# deal with tail", "\n", "", "if", "tail", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "tail_index", "=", "random_start", "+", "torch", ".", "range", "(", "0", ",", "tail", "-", "1", ")", "\n", "index", "[", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", "=", "tail_index", "\n", "\n", "", "return", "iter", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.randomSequentialSampler.__len__": [[106, 108], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.alignCollate.__init__": [[112, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "32", ",", "imgW", "=", "100", ",", "keep_ratio", "=", "False", ",", "min_ratio", "=", "1", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.dataset.alignCollate.__call__": [[118, 138], ["zip", "dataset.resizeNormalize", "torch.cat", "ratios.sort", "int", "max", "resizeNormalize.", "ratios.append", "numpy.floor", "t.unsqueeze", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "labels", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "ratios", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "                ", "w", ",", "h", "=", "image", ".", "size", "\n", "ratios", ".", "append", "(", "w", "/", "float", "(", "h", ")", ")", "\n", "", "ratios", ".", "sort", "(", ")", "\n", "max_ratio", "=", "ratios", "[", "-", "1", "]", "\n", "imgW", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "*", "imgH", ")", ")", "\n", "imgW", "=", "max", "(", "imgH", "*", "self", ".", "min_ratio", ",", "imgW", ")", "# assure imgH >= imgW", "\n", "\n", "", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ")", "\n", "images", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images", "]", ",", "0", ")", "\n", "\n", "return", "images", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.lmdbDataset.__init__": [[35, 54], ["lmdb.open", "print", "sys.exit", "demo_org.lmdbDataset.env.begin", "int", "txn.get().decode", "txn.get"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "2", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "'num-samples'", ".", "encode", "(", ")", ")", ".", "decode", "(", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.lmdbDataset.__len__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.lmdbDataset.__getitem__": [[58, 86], ["demo_org.lmdbDataset.env.begin", "txn.get", "io.BytesIO", "io.BytesIO.write", "io.BytesIO.seek", "str", "str().encode", "PIL.Image.open", "demo_org.lmdbDataset.convert", "demo_org.lmdbDataset.transform", "txn.get().decode", "demo_org.lmdbDataset.target_transform", "print", "str", "txn.get", "label_key.encode"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "self", ".", "nSamples", ",", "'index range error'", "\n", "\n", "index", "+=", "1", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img_key", "=", "'image-%09d'", "%", "index", "\n", "imgbuf", "=", "txn", ".", "get", "(", "str", "(", "img_key", ")", ".", "encode", "(", ")", ")", "\n", "#print(type(imgbuf))  ", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "try", ":", "\n", "                ", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "img", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label_key", "=", "'label-%09d'", "%", "index", "\n", "label", "=", "str", "(", "txn", ".", "get", "(", "label_key", ".", "encode", "(", ")", ")", ".", "decode", "(", ")", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "", "return", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.weights_init": [[87, 94], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.testeval": [[131, 152], ["dataset.resizeNormalize", "dataset.resizeNormalize", "dataset.resizeNormalize.", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "image.cuda.view", "torch.autograd.Variable", "model.eval", "model", "preds.squeeze.max", "preds.squeeze.squeeze", "torch.autograd.Variable", "converter.decode", "image.cuda.cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "image.cuda.size", "preds.squeeze.size"], "function", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode"], ["", "def", "testeval", "(", "img", ")", ":", "\n", "\n", "    ", "transformer", "=", "dataset", ".", "resizeNormalize", "(", "(", "100", ",", "32", ")", ")", "\n", "image", "=", "transformer", "(", "img", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "\n", "", "image", "=", "image", ".", "view", "(", "1", ",", "*", "image", ".", "size", "(", ")", ")", "\n", "image", "=", "Variable", "(", "image", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "preds", "=", "model", "(", "image", ")", "\n", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "squeeze", "(", "1", ")", "\n", "\n", "preds_size", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", ")", ")", "\n", "#raw_pred = converter.decode(preds.data, preds_size.data, raw=True)", "\n", "sim_pred", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "\n", "return", "img", ",", "sim_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.test_batch": [[153, 186], ["lmdbData.__len__", "print", "range", "print", "lmdbData.__getitem__", "demo_org.testeval", "pred.strip.strip", "gt.strip.strip", "pred.strip.strip", "gt.strip.strip", "float", "float", "len", "len", "len", "len", "nltk.metrics.distance.edit_distance", "len", "nltk.metrics.distance.edit_distance", "len"], "function", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__len__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__getitem__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_org.testeval"], ["", "def", "test_batch", "(", "lmdbData", ")", ":", "\n", "\n", "    ", "nwrr", "=", "0", "\n", "nSamples", "=", "lmdbData", ".", "__len__", "(", ")", "\n", "norm_ED", "=", "0", "\n", "nwrr", "=", "0", "\n", "print", "(", "nSamples", ")", "\n", "non", "=", "0", "\n", "curr", "=", "0", "\n", "non_chars", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "img", ",", "lab", "=", "lmdbData", ".", "__getitem__", "(", "i", ")", "\n", "flag", "=", "0", "\n", "gt", "=", "lab", "\n", "curr", "+=", "1", "\n", "im", ",", "pred", "=", "testeval", "(", "img", ")", "\n", "pred", "=", "pred", ".", "strip", "(", ")", "\n", "gt", "=", "gt", ".", "strip", "(", ")", "\n", "\n", "if", "(", "pred", ".", "strip", "(", ")", "==", "gt", ".", "strip", "(", ")", ")", ":", "\n", "            ", "nwrr", "+=", "1", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "or", "len", "(", "pred", ")", "==", "0", ":", "\n", "            ", "norm_ED", "+=", "0", "\n", "", "elif", "len", "(", "gt", ")", ">", "len", "(", "pred", ")", ":", "\n", "            ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "pred", ")", "\n", "\n", "", "", "print", "(", "nwrr", ")", "\n", "wrr", "=", "nwrr", "/", "float", "(", "nSamples", ")", "*", "100", "\n", "crr", "=", "norm_ED", "/", "float", "(", "nSamples", ")", "*", "100", "\n", "\n", "return", "wrr", ",", "crr", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.mytrain.weights_init": [[98, 105], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.mytrain.val": [[158, 214], ["print", "models.parameters", "models.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "utils.averager", "len", "range", "zip", "print", "utils.averager.val", "print", "iter.next", "cpu_images.size", "utils.loadData", "converter.encode", "utils.loadData", "utils.loadData", "models", "torch.autograd.Variable", "utils.averager.add", "preds.transpose().contiguous().view.max", "preds.transpose().contiguous().view.squeeze", "preds.transpose().contiguous().view.transpose().contiguous().view", "converter.decode", "zip", "converter.decode", "print", "float", "float", "int", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "criterion", "target.lower().strip.lower().strip", "target.lower().strip.strip", "str", "preds.transpose().contiguous().view.transpose().contiguous", "utils.averager.val", "target.lower().strip.lower", "len", "len", "len", "len", "preds.transpose().contiguous().view.size", "preds.transpose().contiguous().view.transpose", "nltk.metrics.edit_distance", "len", "nltk.metrics.edit_distance", "len"], "function", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.val", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.add", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.val"], ["", "", "def", "val", "(", "net", ",", "dataset", ",", "criterion", ",", "max_iter", "=", "100", ")", ":", "\n", "    ", "print", "(", "'Start val'", ")", "\n", "\n", "for", "p", "in", "crnn", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "crnn", ".", "eval", "(", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "shuffle", "=", "True", ",", "batch_size", "=", "opt", ".", "batchSize", ",", "num_workers", "=", "int", "(", "opt", ".", "workers", ")", ")", "\n", "val_iter", "=", "iter", "(", "data_loader", ")", "\n", "\n", "i", "=", "0", "\n", "n_correct", "=", "0", "\n", "loss_avg", "=", "utils", ".", "averager", "(", ")", "\n", "norm_ED", "=", "0", "\n", "#max_iter = min(max_iter, len(data_loader))", "\n", "max_iter", "=", "len", "(", "data_loader", ")", "\n", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "        ", "data", "=", "val_iter", ".", "next", "(", ")", "\n", "i", "+=", "1", "\n", "cpu_images", ",", "cpu_texts", "=", "data", "\n", "batch_size", "=", "cpu_images", ".", "size", "(", "0", ")", "\n", "utils", ".", "loadData", "(", "image", ",", "cpu_images", ")", "\n", "t", ",", "l", "=", "converter", ".", "encode", "(", "cpu_texts", ")", "\n", "utils", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils", ".", "loadData", "(", "length", ",", "l", ")", "\n", "\n", "preds", "=", "crnn", "(", "image", ",", "finetune", "=", "opt", ".", "finetune", ")", "\n", "preds_size", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", ")", "\n", "cost", "=", "criterion", "(", "preds", ",", "text", ",", "preds_size", ",", "length", ")", "/", "batch_size", "\n", "loss_avg", ".", "add", "(", "cost", ")", "\n", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "squeeze", "(", "1", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "sim_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "for", "pred", ",", "target", "in", "zip", "(", "sim_preds", ",", "cpu_texts", ")", ":", "\n", "            ", "target", "=", "target", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "gt", "=", "target", ".", "strip", "(", ")", "\n", "if", "pred", "==", "target", ":", "\n", "                ", "n_correct", "+=", "1", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "or", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "norm_ED", "+=", "0", "\n", "", "elif", "len", "(", "gt", ")", ">", "len", "(", "pred", ")", ":", "\n", "                ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "                ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "pred", ")", "\n", "", "", "", "raw_preds", "=", "converter", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "True", ")", "[", ":", "opt", ".", "n_test_disp", "]", "\n", "for", "raw_pred", ",", "pred", ",", "gt", "in", "zip", "(", "raw_preds", ",", "sim_preds", ",", "cpu_texts", ")", ":", "\n", "        ", "print", "(", "'%-20s => %-20s, gt: %-20s'", "%", "(", "raw_pred", ",", "pred", ",", "gt", ")", ")", "\n", "", "print", "(", "\"Samples Correctly recognised = \"", "+", "str", "(", "n_correct", ")", ")", "\n", "accuracy", "=", "n_correct", "/", "float", "(", "max_iter", "*", "opt", ".", "batchSize", ")", "\n", "crr", "=", "norm_ED", "/", "float", "(", "max_iter", "*", "opt", ".", "batchSize", ")", "\n", "lossval", "=", "loss_avg", ".", "val", "(", ")", "\n", "print", "(", "'Test loss: %f, accuracy: %f, crr: %f'", "%", "(", "loss_avg", ".", "val", "(", ")", ",", "accuracy", ",", "crr", ")", ")", "\n", "return", "lossval", ",", "accuracy", ",", "crr", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.mytrain.trainBatch": [[215, 230], ["train_iter.next", "cpu_images.size", "utils.loadData", "converter.encode", "utils.loadData", "utils.loadData", "optimizer.zero_grad", "models", "torch.autograd.Variable", "cost.backward", "optimizer.step", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "criterion", "models.size"], "function", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData"], ["", "def", "trainBatch", "(", "net", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "data", "=", "train_iter", ".", "next", "(", ")", "\n", "cpu_images", ",", "cpu_texts", "=", "data", "\n", "batch_size", "=", "cpu_images", ".", "size", "(", "0", ")", "\n", "utils", ".", "loadData", "(", "image", ",", "cpu_images", ")", "\n", "t", ",", "l", "=", "converter", ".", "encode", "(", "cpu_texts", ")", "\n", "utils", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils", ".", "loadData", "(", "length", ",", "l", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "preds", "=", "crnn", "(", "image", ",", "finetune", "=", "opt", ".", "finetune", ")", "\n", "preds_size", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "[", "preds", ".", "size", "(", "0", ")", "]", "*", "batch_size", ")", ")", "\n", "cost", "=", "criterion", "(", "preds", ",", "text", ",", "preds_size", ",", "length", ")", "/", "batch_size", "\n", "cost", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__init__": [[48, 67], ["lmdb.open", "print", "sys.exit", "sys.exit", "sys.exit", "sys.exit", "demo_lmdb.lmdbDataset.env.begin", "int", "txn.get().decode", "txn.get"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "2", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "'num-samples'", ".", "encode", "(", ")", ")", ".", "decode", "(", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__len__": [[68, 70], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__getitem__": [[71, 100], ["demo_lmdb.lmdbDataset.env.begin", "txn.get", "io.BytesIO", "io.BytesIO.write", "io.BytesIO.seek", "str", "str().encode", "PIL.Image.open", "demo_lmdb.lmdbDataset.convert", "demo_lmdb.lmdbDataset.transform", "txn.get().decode", "demo_lmdb.lmdbDataset.target_transform", "print", "str", "txn.get", "label_key.encode"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "self", ".", "nSamples", ",", "'index range error'", "\n", "#print(self.nSamples)", "\n", "index", "+=", "1", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img_key", "=", "'image-%09d'", "%", "index", "\n", "imgbuf", "=", "txn", ".", "get", "(", "str", "(", "img_key", ")", ".", "encode", "(", ")", ")", "\n", "#print(type(imgbuf))  ", "\n", "buf", "=", "io", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "\n", "try", ":", "\n", "                ", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "label_key", "=", "'label-%09d'", "%", "index", "\n", "label", "=", "str", "(", "txn", ".", "get", "(", "label_key", ".", "encode", "(", ")", ")", ".", "decode", "(", ")", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "                ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "", "return", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.DataInfo.__init__": [[121, 133], ["object.__init__", "lib.utils.labelmaps.get_vocabulary", "dict", "dict", "len", "zip", "zip", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["def", "__init__", "(", "self", ",", "voc_type", ")", ":", "\n", "    ", "super", "(", "DataInfo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "\n", "assert", "voc_type", "in", "[", "'INDIA'", ",", "'LOWERCASE'", ",", "'ALLCASES'", ",", "'ALLCASES_SYMBOLS'", "]", "\n", "self", ".", "EOS", "=", "'EOS'", "\n", "self", ".", "PADDING", "=", "'PADDING'", "\n", "self", ".", "UNKNOWN", "=", "'UNKNOWN'", "\n", "self", ".", "voc", "=", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "self", ".", "EOS", ",", "PADDING", "=", "self", ".", "PADDING", ",", "UNKNOWN", "=", "self", ".", "UNKNOWN", ")", "\n", "self", ".", "char2id", "=", "dict", "(", "zip", "(", "self", ".", "voc", ",", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ")", ")", "\n", "self", ".", "id2char", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ",", "self", ".", "voc", ")", ")", "\n", "self", ".", "rec_num_classes", "=", "len", "(", "self", ".", "voc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.image_process": [[101, 115], ["img.resize.resize", "img.resize.sub_().div_", "int", "max", "torchvision.ToTensor", "float", "numpy.floor", "img.resize.sub_"], "function", ["None"], ["", "", "def", "image_process", "(", "img", ",", "imgH", "=", "32", ",", "imgW", "=", "100", ",", "keep_ratio", "=", "False", ",", "min_ratio", "=", "1", ")", ":", "\n", "#img = Image.open(image_path).convert('RGB')", "\n", "\n", "    ", "if", "keep_ratio", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "ratio", "=", "w", "/", "float", "(", "h", ")", "\n", "imgW", "=", "int", "(", "np", ".", "floor", "(", "ratio", "*", "imgH", ")", ")", "\n", "imgW", "=", "max", "(", "imgH", "*", "min_ratio", ",", "imgW", ")", "\n", "\n", "", "img", "=", "img", ".", "resize", "(", "(", "imgW", ",", "imgH", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.main": [[134, 216], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "demo_lmdb.DataInfo", "lib.models.model_builder.ModelBuilder", "nn.DataParallel.eval", "demo_lmdb.lmdbDataset", "demo_lmdb.lmdbDataset.__len__", "print", "range", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "lib.utils.serialization.load_checkpoint", "nn.DataParallel.load_state_dict", "torch.device", "torch.device", "nn.DataParallel.to", "torch.nn.DataParallel", "demo_lmdb.lmdbDataset.__getitem__", "demo_lmdb.image_process", "img.to.unsqueeze", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "nn.DataParallel.", "lib.evaluation_metrics.metrics.get_str_list", "pred_str.strip", "float", "torch.no_grad", "torch.no_grad", "img.to.to", "print", "pred_str.strip.strip", "gt.strip", "float", "torch.IntTensor", "torch.IntTensor", "len", "len", "len", "len", "str", "edit_distance", "len", "edit_distance", "len"], "function", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__len__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.lmdbDataset.__getitem__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.demo_lmdb.image_process"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "args", ".", "cuda", "=", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "print", "(", "'using cuda.'", ")", "\n", "torch", ".", "set_default_tensor_type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "set_default_tensor_type", "(", "'torch.FloatTensor'", ")", "\n", "\n", "# Create data loaders", "\n", "", "if", "args", ".", "height", "is", "None", "or", "args", ".", "width", "is", "None", ":", "\n", "        ", "args", ".", "height", ",", "args", ".", "width", "=", "(", "32", ",", "100", ")", "\n", "\n", "", "dataset_info", "=", "DataInfo", "(", "args", ".", "voc_type", ")", "\n", "\n", "# Create model", "\n", "model", "=", "ModelBuilder", "(", "arch", "=", "args", ".", "arch", ",", "rec_num_classes", "=", "dataset_info", ".", "rec_num_classes", ",", "\n", "sDim", "=", "args", ".", "decoder_sdim", ",", "attDim", "=", "args", ".", "attDim", ",", "max_len_labels", "=", "args", ".", "max_len", ",", "\n", "eos", "=", "dataset_info", ".", "char2id", "[", "dataset_info", ".", "EOS", "]", ",", "STN_ON", "=", "args", ".", "STN_ON", ")", "\n", "\n", "# Load from checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "args", ".", "resume", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "if", "args", ".", "cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "nwrr", "=", "0", "\n", "norm_ED", "=", "0", "\n", "\n", "# Evaluation", "\n", "model", ".", "eval", "(", ")", "\n", "lmdb_data", "=", "args", ".", "lmdbpath", "\n", "lm", "=", "lmdbDataset", "(", "lmdb_data", ")", "\n", "p", "=", "lm", ".", "__len__", "(", ")", "\n", "print", "(", "p", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "p", ")", ":", "\n", "        ", "img", ",", "gt", "=", "lm", ".", "__getitem__", "(", "i", ")", "\n", "img", "=", "image_process", "(", "img", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "img", "=", "img", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"Finished testing - \"", "+", "str", "(", "i", ")", "+", "\" images...\"", ")", "\n", "\n", "", "input_dict", "=", "{", "}", "\n", "input_dict", "[", "'images'", "]", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "# TODO: testing should be more clean.", "\n", "# to be compatible with the lmdb-based testing, need to construct some meaningless variables.", "\n", "rec_targets", "=", "torch", ".", "IntTensor", "(", "1", ",", "args", ".", "max_len", ")", ".", "fill_", "(", "1", ")", "\n", "rec_targets", "[", ":", ",", "args", ".", "max_len", "-", "1", "]", "=", "dataset_info", ".", "char2id", "[", "dataset_info", ".", "EOS", "]", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "rec_targets", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "[", "args", ".", "max_len", "]", "\n", "output_dict", "=", "model", "(", "input_dict", ")", "\n", "pred_rec", "=", "output_dict", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str", ",", "_", "=", "get_str_list", "(", "pred_rec", ",", "input_dict", "[", "'rec_targets'", "]", ",", "dataset", "=", "dataset_info", ")", "\n", "#print('Recognition result: {0}'.format(pred_str[0]))", "\n", "pred", "=", "pred_str", ".", "strip", "(", ")", "\n", "\n", "if", "(", "pred", ".", "strip", "(", ")", "==", "gt", ".", "strip", "(", ")", ")", ":", "\n", "            ", "nwrr", "+=", "1", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "or", "len", "(", "pred", ")", "==", "0", ":", "\n", "            ", "norm_ED", "+=", "0", "\n", "", "elif", "len", "(", "gt", ")", ">", "len", "(", "pred", ")", ":", "\n", "            ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "gt", ")", "\n", "", "else", ":", "\n", "            ", "norm_ED", "+=", "1", "-", "edit_distance", "(", "pred", ",", "gt", ")", "/", "len", "(", "pred", ")", "\n", "\n", "", "", "wrr", "=", "nwrr", "/", "float", "(", "p", ")", "*", "100", "\n", "crr", "=", "norm_ED", "/", "float", "(", "p", ")", "\n", "\n", "return", "wrr", ",", "crr", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.__init__": [[21, 30], ["enumerate", "utils.strLabelConverter.alphabet.insert", "char.strip"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "ignore_case", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "alphabet", "=", "alphabet", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "char", ".", "strip", "(", ")", "]", "=", "i", "+", "1", "\n", "", "self", ".", "max_val", "=", "1", "\n", "ctc_blank", "=", "'~'", "\n", "self", ".", "alphabet", ".", "insert", "(", "0", ",", "ctc_blank", ")", "\n", "#print(self.dict)", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.encode": [[33, 61], ["length.append", "result.append", "range", "result_temp.append", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "r.append", "len", "len", "r.append", "len"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n        \"\"\"", "\n", "length", "=", "[", "]", "\n", "result", "=", "[", "]", "\n", "for", "item", "in", "text", ":", "\n", "# item = item.decode()", "\n", "            ", "length", ".", "append", "(", "len", "(", "item", ")", ")", "\n", "r", "=", "[", "]", "\n", "for", "char", "in", "item", ":", "\n", "                ", "index", "=", "self", ".", "dict", "[", "char", "]", "\n", "r", ".", "append", "(", "index", ")", "\n", "", "result", ".", "append", "(", "r", ")", "\n", "\n", "", "max_len", "=", "0", "\n", "for", "r", "in", "result", ":", "\n", "            ", "if", "len", "(", "r", ")", ">", "max_len", ":", "\n", "                ", "max_len", "=", "len", "(", "r", ")", "\n", "\n", "", "", "result_temp", "=", "[", "]", "\n", "for", "r", "in", "result", ":", "\n", "            ", "for", "i", "in", "range", "(", "max_len", "-", "len", "(", "r", ")", ")", ":", "\n", "                ", "r", ".", "append", "(", "0", ")", "\n", "", "result_temp", ".", "append", "(", "r", ")", "\n", "\n", "", "text", "=", "result_temp", "\n", "#print(text)", "\n", "return", "(", "torch", ".", "LongTensor", "(", "text", ")", ",", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode": [[62, 103], ["length.numel", "range", "t.numel", "t.numel", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "range", "utils.strLabelConverter.decode", "utils.strLabelConverter.alphabet[].strip", "print", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "char_list.append", "utils.strLabelConverter.alphabet[].strip"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "#print(t)", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "self", ".", "max_val", ")", "\n", "if", "raw", ":", "\n", "                ", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "]", ".", "strip", "(", ")", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_list", "=", "[", "]", "\n", "try", ":", "\n", "                    ", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                        ", "if", "t", "[", "i", "]", "!=", "0", "and", "(", "not", "(", "i", ">", "0", "and", "t", "[", "i", "-", "1", "]", "==", "t", "[", "i", "]", ")", ")", ":", "\n", "                            ", "char_list", ".", "append", "(", "self", ".", "alphabet", "[", "t", "[", "i", "]", "]", ".", "strip", "(", ")", ")", "\n", "", "", "", "except", ":", "\n", "                    ", "print", "(", "t", ")", "\n", "\n", "", "return", "''", ".", "join", "(", "char_list", ")", "\n", "", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "IntTensor", "(", "[", "l", "]", ")", ",", "raw", "=", "raw", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.__init__": [[107, 109], ["utils.averager.reset"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.add": [[110, 120], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.reset": [[121, 124], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.averager.val": [[125, 130], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.oneHot": [[132, 143], ["v_length.size", "v_length.max", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "v[].view().long", "v_onehot[].scatter_", "torch.FloatTensor", "torch.FloatTensor", "v[].view"], "function", ["None"], ["", "", "def", "oneHot", "(", "v", ",", "v_length", ",", "nc", ")", ":", "\n", "    ", "batchSize", "=", "v_length", ".", "size", "(", "0", ")", "\n", "maxLength", "=", "v_length", ".", "max", "(", ")", "\n", "v_onehot", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "maxLength", ",", "nc", ")", ".", "fill_", "(", "0", ")", "\n", "acc", "=", "0", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "        ", "length", "=", "v_length", "[", "i", "]", "\n", "label", "=", "v", "[", "acc", ":", "acc", "+", "length", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "v_onehot", "[", "i", ",", ":", "length", "]", ".", "scatter_", "(", "1", ",", "label", ",", "1.0", ")", "\n", "acc", "+=", "length", "\n", "", "return", "v_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.loadData": [[145, 147], ["v.resize_().copy_", "v.resize_", "data.size"], "function", ["None"], ["", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "v", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.prettyPrint": [[149, 153], ["print", "print", "str", "v.data.type", "v.size", "v.max", "v.min", "v.mean"], "function", ["None"], ["", "def", "prettyPrint", "(", "v", ")", ":", "\n", "    ", "print", "(", "'Size {0}, Type: {1}'", ".", "format", "(", "str", "(", "v", ".", "size", "(", ")", ")", ",", "v", ".", "data", ".", "type", "(", ")", ")", ")", "\n", "print", "(", "'| Max: %f | Min: %f | Mean: %f'", "%", "(", "v", ".", "max", "(", ")", ".", "data", "[", "0", "]", ",", "v", ".", "min", "(", ")", ".", "data", "[", "0", "]", ",", "\n", "v", ".", "mean", "(", ")", ".", "data", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.None.utils.assureRatio": [[155, 162], ["main.size", "torch.UpsamplingBilinear2d", "nn.UpsamplingBilinear2d."], "function", ["None"], ["", "def", "assureRatio", "(", "img", ")", ":", "\n", "    ", "\"\"\"Ensure imgH <= imgW.\"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "if", "h", ">", "w", ":", "\n", "        ", "main", "=", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "h", ",", "h", ")", ",", "scale_factor", "=", "None", ")", "\n", "img", "=", "main", "(", "img", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.starnet.STARNET.__init__": [[11, 31], ["torch.Module.__init__", "models.modules.transformation.TPS_SpatialTransformerNetwork", "models.modules.feature_extraction.ResNet_FeatureExtractor", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.modules.sequence_modeling.BidirectionalLSTM", "models.modules.sequence_modeling.CorrLSTM", "models.modules.sequence_modeling.BidirectionalLSTM"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "imgW", ",", "nc", ",", "nclass", ",", "nh", ",", "n_rnn", "=", "2", ",", "leakyRelu", "=", "False", ")", ":", "\n", "        ", "super", "(", "STARNET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "input_channel", "=", "nc", "\n", "output_channel", "=", "512", "\n", "hidden_size", "=", "nh", "\n", "class_size", "=", "nclass", "\n", "\n", "self", ".", "Transformation", "=", "TPS_SpatialTransformerNetwork", "(", "F", "=", "20", ",", "I_size", "=", "(", "imgH", ",", "imgW", ")", ",", "I_r_size", "=", "(", "imgH", ",", "imgW", ")", ",", "I_channel_num", "=", "input_channel", ")", "\n", "self", ".", "FeatureExtraction", "=", "ResNet_FeatureExtractor", "(", "input_channel", ",", "output_channel", ")", "\n", "\n", "self", ".", "FeatureExtraction_output", "=", "512", "\n", "self", ".", "AdaptiveAvgPool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "None", ",", "1", ")", ")", "# Transform final (imgH/16-1) -> 1", "\n", "\n", "self", ".", "SequenceModeling_withCorrLSTM", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "self", ".", "FeatureExtraction_output", ",", "hidden_size", ",", "hidden_size", ")", ",", "\n", "CorrLSTM", "(", "hidden_size", ",", "hidden_size", ",", "class_size", ")", ")", "\n", "\n", "self", ".", "SequenceModeling", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "self", ".", "FeatureExtraction_output", ",", "hidden_size", ",", "class_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.starnet.STARNET.forward": [[33, 50], ["starnet.STARNET.Transformation", "starnet.STARNET.FeatureExtraction", "visual_feature.squeeze.squeeze.size", "starnet.STARNET.AdaptiveAvgPool", "visual_feature.squeeze.squeeze.squeeze", "starnet.STARNET.SequenceModeling", "torch.log_softmax", "torch.log_softmax", "visual_feature.squeeze.squeeze.permute", "starnet.STARNET.SequenceModeling_withCorrLSTM"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "finetune", "=", "False", ")", ":", "\n", "\n", "        ", "input", "=", "self", ".", "Transformation", "(", "input", ")", "\n", "\n", "visual_feature", "=", "self", ".", "FeatureExtraction", "(", "input", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "visual_feature", ".", "size", "(", ")", "\n", "#print(h)", "\n", "visual_feature", "=", "self", ".", "AdaptiveAvgPool", "(", "visual_feature", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [b, c, h, w] -> [w, b, c, h]", "\n", "#print(visual_feature.size())", "\n", "visual_feature", "=", "visual_feature", ".", "squeeze", "(", "3", ")", "\n", "\n", "rnn_feature", "=", "self", ".", "SequenceModeling", "(", "visual_feature", ")", "\n", "if", "finetune", "==", "True", ":", "\n", "            ", "rnn_feature", "=", "self", ".", "SequenceModeling_withCorrLSTM", "(", "visual_feature", ")", "\n", "\n", "", "output", "=", "F", ".", "log_softmax", "(", "rnn_feature", ",", "dim", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.starnet.STARNET.backward_hook": [[51, 54], ["None"], "methods", ["None"], ["", "def", "backward_hook", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "for", "g", "in", "grad_input", ":", "\n", "            ", "g", "[", "g", "!=", "g", "]", "=", "0", "# replace all nan/inf in gradients to zero", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.crnn.BidirectionalLSTM.__init__": [[7, 12], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.crnn.BidirectionalLSTM.forward": [[13, 22], ["crnn.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "crnn.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.crnn.CRNN.__init__": [[26, 68], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "crnn.CRNN.__init__.convRelu"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", ",", "n_rnn", "=", "2", ",", "leakyRelu", "=", "False", ")", ":", "\n", "        ", "super", "(", "CRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH has to be a multiple of 16'", "\n", "\n", "ks", "=", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", "]", "\n", "ps", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "ss", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "nm", "=", "[", "64", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", "]", "\n", "\n", "cnn", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "def", "convRelu", "(", "i", ",", "batchNormalization", "=", "False", ")", ":", "\n", "            ", "nIn", "=", "nc", "if", "i", "==", "0", "else", "nm", "[", "i", "-", "1", "]", "\n", "nOut", "=", "nm", "[", "i", "]", "\n", "cnn", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "ks", "[", "i", "]", ",", "ss", "[", "i", "]", ",", "ps", "[", "i", "]", ")", ")", "\n", "if", "batchNormalization", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'batchnorm{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "BatchNorm2d", "(", "nOut", ")", ")", "\n", "", "if", "leakyRelu", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "", "convRelu", "(", "0", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "0", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 64x16x64", "\n", "convRelu", "(", "1", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "1", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 128x8x32", "\n", "convRelu", "(", "2", ",", "True", ")", "\n", "convRelu", "(", "3", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "2", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 256x4x16", "\n", "convRelu", "(", "4", ",", "True", ")", "\n", "convRelu", "(", "5", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "3", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 512x2x16", "\n", "convRelu", "(", "6", ",", "True", ")", "# 512x1x16", "\n", "\n", "self", ".", "cnn", "=", "cnn", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.crnn.CRNN.forward": [[70, 85], ["crnn.CRNN.cnn", "conv.permute.permute.size", "conv.permute.permute.squeeze", "conv.permute.permute.permute", "crnn.CRNN.rnn", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# conv features", "\n", "        ", "conv", "=", "self", ".", "cnn", "(", "input", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "conv", "=", "conv", ".", "squeeze", "(", "2", ")", "\n", "conv", "=", "conv", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [w, b, c]", "\n", "\n", "# rnn features", "\n", "output", "=", "self", ".", "rnn", "(", "conv", ")", "\n", "\n", "# add log_softmax to converge output", "\n", "output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "2", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.models.crnn.CRNN.backward_hook": [[87, 90], ["None"], "methods", ["None"], ["", "def", "backward_hook", "(", "self", ",", "module", ",", "grad_input", ",", "grad_output", ")", ":", "\n", "        ", "for", "g", "in", "grad_input", ":", "\n", "            ", "g", "[", "g", "!=", "g", "]", "=", "0", "# replace all nan/inf in gradients to zero", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.VGG_FeatureExtractor.__init__": [[8, 26], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "VGG_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channel", "=", "[", "int", "(", "output_channel", "/", "8", ")", ",", "int", "(", "output_channel", "/", "4", ")", ",", "\n", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", "]", "# [64, 128, 256, 512]", "\n", "self", ".", "ConvNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channel", ",", "self", ".", "output_channel", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64x16x50", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "1", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 128x8x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "1", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "# 256x8x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "1", ")", ",", "(", "2", ",", "1", ")", ")", ",", "# 256x4x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "# 512x4x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "3", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "1", ")", ",", "(", "2", ",", "1", ")", ")", ",", "# 512x2x25", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "3", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "2", ",", "1", ",", "0", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "# 512x1x24", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.VGG_FeatureExtractor.forward": [[27, 29], ["feature_extraction.VGG_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.RCNN_FeatureExtractor.__init__": [[34, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "int", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.GRCL", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "RCNN_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_channel", "=", "[", "int", "(", "output_channel", "/", "8", ")", ",", "int", "(", "output_channel", "/", "4", ")", ",", "\n", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", "]", "# [64, 128, 256, 512]", "\n", "self", ".", "ConvNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_channel", ",", "self", ".", "output_channel", "[", "0", "]", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64 x 16 x 50", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "0", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# 64 x 8 x 25", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "0", "]", ",", "self", ".", "output_channel", "[", "1", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ",", "# 128 x 4 x 26", "\n", "GRCL", "(", "self", ".", "output_channel", "[", "1", "]", ",", "self", ".", "output_channel", "[", "2", "]", ",", "num_iteration", "=", "5", ",", "kernel_size", "=", "3", ",", "pad", "=", "1", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ",", "# 256 x 2 x 27", "\n", "nn", ".", "Conv2d", "(", "self", ".", "output_channel", "[", "2", "]", ",", "self", ".", "output_channel", "[", "3", "]", ",", "2", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "# 512 x 1 x 26", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.RCNN_FeatureExtractor.forward": [[50, 52], ["feature_extraction.RCNN_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet_FeatureExtractor.__init__": [[56, 59], ["torch.Module.__init__", "feature_extraction.ResNet"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", "=", "512", ")", ":", "\n", "        ", "super", "(", "ResNet_FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ConvNet", "=", "ResNet", "(", "input_channel", ",", "output_channel", ",", "BasicBlock", ",", "[", "1", ",", "2", ",", "5", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet_FeatureExtractor.forward": [[60, 62], ["feature_extraction.ResNet_FeatureExtractor.ConvNet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "ConvNet", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.GRCL.__init__": [[66, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "feature_extraction.GRCL_unit", "range"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", ",", "num_iteration", ",", "kernel_size", ",", "pad", ")", ":", "\n", "        ", "super", "(", "GRCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wgf_u", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "output_channel", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "wgr_x", "=", "nn", ".", "Conv2d", "(", "output_channel", ",", "output_channel", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "wf_u", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "output_channel", ",", "kernel_size", ",", "1", ",", "pad", ",", "bias", "=", "False", ")", "\n", "self", ".", "wr_x", "=", "nn", ".", "Conv2d", "(", "output_channel", ",", "output_channel", ",", "kernel_size", ",", "1", ",", "pad", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "BN_x_init", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "\n", "self", ".", "num_iteration", "=", "num_iteration", "\n", "self", ".", "GRCL", "=", "[", "GRCL_unit", "(", "output_channel", ")", "for", "_", "in", "range", "(", "num_iteration", ")", "]", "\n", "self", ".", "GRCL", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "GRCL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.GRCL.forward": [[79, 91], ["feature_extraction.GRCL.wgf_u", "feature_extraction.GRCL.wf_u", "torch.relu", "torch.relu", "range", "feature_extraction.GRCL.BN_x_init", "feature_extraction.GRCL.wgr_x", "feature_extraction.GRCL.wr_x"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\" The input of GRCL is consistant over time t, which is denoted by u(0)\n        thus wgf_u / wf_u is also consistant over time t.\n        \"\"\"", "\n", "wgf_u", "=", "self", ".", "wgf_u", "(", "input", ")", "\n", "wf_u", "=", "self", ".", "wf_u", "(", "input", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "BN_x_init", "(", "wf_u", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_iteration", ")", ":", "\n", "            ", "x", "=", "self", ".", "GRCL", "[", "i", "]", "(", "wgf_u", ",", "self", ".", "wgr_x", "(", "x", ")", ",", "wf_u", ",", "self", ".", "wr_x", "(", "x", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.GRCL_unit.__init__": [[95, 102], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_channel", ")", ":", "\n", "        ", "super", "(", "GRCL_unit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "BN_gfu", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_grx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_fu", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_rx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "self", ".", "BN_Gx", "=", "nn", ".", "BatchNorm2d", "(", "output_channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.GRCL_unit.forward": [[103, 113], ["feature_extraction.GRCL_unit.BN_gfu", "feature_extraction.GRCL_unit.BN_grx", "torch.sigmoid", "torch.sigmoid", "feature_extraction.GRCL_unit.BN_fu", "feature_extraction.GRCL_unit.BN_Gx", "torch.relu", "torch.relu", "feature_extraction.GRCL_unit.BN_rx"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "wgf_u", ",", "wgr_x", ",", "wf_u", ",", "wr_x", ")", ":", "\n", "        ", "G_first_term", "=", "self", ".", "BN_gfu", "(", "wgf_u", ")", "\n", "G_second_term", "=", "self", ".", "BN_grx", "(", "wgr_x", ")", "\n", "G", "=", "F", ".", "sigmoid", "(", "G_first_term", "+", "G_second_term", ")", "\n", "\n", "x_first_term", "=", "self", ".", "BN_fu", "(", "wf_u", ")", "\n", "x_second_term", "=", "self", ".", "BN_Gx", "(", "self", ".", "BN_rx", "(", "wr_x", ")", "*", "G", ")", "\n", "x", "=", "F", ".", "relu", "(", "x_first_term", "+", "x_second_term", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.BasicBlock.__init__": [[118, 127], ["torch.Module.__init__", "feature_extraction.BasicBlock._conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "feature_extraction.BasicBlock._conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.BasicBlock._conv3x3", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.BasicBlock._conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "self", ".", "_conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.BasicBlock._conv3x3": [[128, 132], ["torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_conv3x3", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.BasicBlock.forward": [[133, 149], ["feature_extraction.BasicBlock.conv1", "feature_extraction.BasicBlock.bn1", "feature_extraction.BasicBlock.relu", "feature_extraction.BasicBlock.conv2", "feature_extraction.BasicBlock.bn2", "feature_extraction.BasicBlock.relu", "feature_extraction.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet.__init__": [[153, 192], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "feature_extraction.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet._make_layer", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "output_channel", ",", "block", ",", "layers", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_channel_block", "=", "[", "int", "(", "output_channel", "/", "4", ")", ",", "int", "(", "output_channel", "/", "2", ")", ",", "output_channel", ",", "output_channel", "]", "\n", "\n", "self", ".", "inplanes", "=", "int", "(", "output_channel", "/", "8", ")", "\n", "self", ".", "conv0_1", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "int", "(", "output_channel", "/", "16", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0_1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "output_channel", "/", "16", ")", ")", "\n", "self", ".", "conv0_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "output_channel", "/", "16", ")", ",", "self", ".", "inplanes", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn0_2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "0", "]", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "0", "]", ",", "self", ".", "output_channel_block", "[", "\n", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "0", "]", ")", "\n", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "1", "]", ",", "self", ".", "output_channel_block", "[", "\n", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "1", "]", ")", "\n", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "2", "]", ",", "self", ".", "output_channel_block", "[", "\n", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "2", "]", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "output_channel_block", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ",", "self", ".", "output_channel_block", "[", "\n", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ",", "self", ".", "output_channel_block", "[", "\n", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4_2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "output_channel_block", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet._make_layer": [[193, 209], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.feature_extraction.ResNet.forward": [[210, 245], ["feature_extraction.ResNet.conv0_1", "feature_extraction.ResNet.bn0_1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.conv0_2", "feature_extraction.ResNet.bn0_2", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool1", "feature_extraction.ResNet.layer1", "feature_extraction.ResNet.conv1", "feature_extraction.ResNet.bn1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool2", "feature_extraction.ResNet.layer2", "feature_extraction.ResNet.conv2", "feature_extraction.ResNet.bn2", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.maxpool3", "feature_extraction.ResNet.layer3", "feature_extraction.ResNet.conv3", "feature_extraction.ResNet.bn3", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.layer4", "feature_extraction.ResNet.conv4_1", "feature_extraction.ResNet.bn4_1", "feature_extraction.ResNet.relu", "feature_extraction.ResNet.conv4_2", "feature_extraction.ResNet.bn4_2", "feature_extraction.ResNet.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv0_1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv0_2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "maxpool3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4_2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.TPS_SpatialTransformerNetwork.__init__": [[11, 28], ["torch.Module.__init__", "transformation.LocalizationNetwork", "transformation.GridGenerator"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["def", "__init__", "(", "self", ",", "F", ",", "I_size", ",", "I_r_size", ",", "I_channel_num", "=", "1", ")", ":", "\n", "        ", "\"\"\" Based on RARE TPS\n        input:\n            batch_I: Batch Input Image [batch_size x I_channel_num x I_height x I_width]\n            I_size : (height, width) of the input image I\n            I_r_size : (height, width) of the rectified image I_r\n            I_channel_num : the number of channels of the input image I\n        output:\n            batch_I_r: rectified image [batch_size x I_channel_num x I_r_height x I_r_width]\n        \"\"\"", "\n", "super", "(", "TPS_SpatialTransformerNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "I_size", "=", "I_size", "\n", "self", ".", "I_r_size", "=", "I_r_size", "# = (I_r_height, I_r_width)", "\n", "self", ".", "I_channel_num", "=", "I_channel_num", "\n", "self", ".", "LocalizationNetwork", "=", "LocalizationNetwork", "(", "self", ".", "F", ",", "self", ".", "I_channel_num", ")", "\n", "self", ".", "GridGenerator", "=", "GridGenerator", "(", "self", ".", "F", ",", "self", ".", "I_r_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.TPS_SpatialTransformerNetwork.forward": [[29, 36], ["transformation.TPS_SpatialTransformerNetwork.LocalizationNetwork", "transformation.TPS_SpatialTransformerNetwork.GridGenerator.build_P_prime", "transformation.TPS_SpatialTransformerNetwork.reshape", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "transformation.TPS_SpatialTransformerNetwork.size"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator.build_P_prime"], ["", "def", "forward", "(", "self", ",", "batch_I", ")", ":", "\n", "        ", "batch_C_prime", "=", "self", ".", "LocalizationNetwork", "(", "batch_I", ")", "# batch_size x K x 2", "\n", "build_P_prime", "=", "self", ".", "GridGenerator", ".", "build_P_prime", "(", "batch_C_prime", ")", "# batch_size x n (= I_r_width x I_r_height) x 2", "\n", "build_P_prime_reshape", "=", "build_P_prime", ".", "reshape", "(", "[", "build_P_prime", ".", "size", "(", "0", ")", ",", "self", ".", "I_r_size", "[", "0", "]", ",", "self", ".", "I_r_size", "[", "1", "]", ",", "2", "]", ")", "\n", "batch_I_r", "=", "F", ".", "grid_sample", "(", "batch_I", ",", "build_P_prime_reshape", ",", "padding_mode", "=", "'border'", ")", "\n", "\n", "return", "batch_I_r", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.LocalizationNetwork.__init__": [[41, 70], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "transformation.LocalizationNetwork.localization_fc2.weight.data.fill_", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.from_numpy().float().view", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "int", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["def", "__init__", "(", "self", ",", "F", ",", "I_channel_num", ")", ":", "\n", "        ", "super", "(", "LocalizationNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "I_channel_num", "=", "I_channel_num", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "I_channel_num", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 64 x I_height/2 x I_width/2", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 128 x I_height/4 x I_width/4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "# batch_size x 256 x I_height/8 x I_width/8", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "# batch_size x 512", "\n", ")", "\n", "\n", "self", ".", "localization_fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "localization_fc2", "=", "nn", ".", "Linear", "(", "256", ",", "self", ".", "F", "*", "2", ")", "\n", "\n", "# Init fc2 in LocalizationNetwork", "\n", "self", ".", "localization_fc2", ".", "weight", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\"\"\" see RARE paper Fig. 6 (a) \"\"\"", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "linspace", "(", "0.0", ",", "-", "1.0", ",", "num", "=", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "linspace", "(", "1.0", ",", "0.0", ",", "num", "=", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "initial_bias", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "localization_fc2", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "initial_bias", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.LocalizationNetwork.forward": [[71, 80], ["batch_I.size", "transformation.LocalizationNetwork.conv().view", "transformation.LocalizationNetwork.localization_fc2().view", "transformation.LocalizationNetwork.conv", "transformation.LocalizationNetwork.localization_fc2", "transformation.LocalizationNetwork.localization_fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_I", ")", ":", "\n", "        ", "\"\"\"\n        input:     batch_I : Batch Input Image [batch_size x I_channel_num x I_height x I_width]\n        output:    batch_C_prime : Predicted coordinates of fiducial points for input batch [batch_size x F x 2]\n        \"\"\"", "\n", "batch_size", "=", "batch_I", ".", "size", "(", "0", ")", "\n", "features", "=", "self", ".", "conv", "(", "batch_I", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "batch_C_prime", "=", "self", ".", "localization_fc2", "(", "self", ".", "localization_fc1", "(", "features", ")", ")", ".", "view", "(", "batch_size", ",", "self", ".", "F", ",", "2", ")", "\n", "return", "batch_C_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator.__init__": [[85, 96], ["torch.Module.__init__", "transformation.GridGenerator._build_C", "transformation.GridGenerator._build_P", "transformation.GridGenerator.register_buffer", "transformation.GridGenerator.register_buffer", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "transformation.GridGenerator._build_inv_delta_C", "transformation.GridGenerator._build_P_hat"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_C", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_P", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_inv_delta_C", "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_P_hat"], ["def", "__init__", "(", "self", ",", "F", ",", "I_r_size", ")", ":", "\n", "        ", "\"\"\" Generate P_hat and inv_delta_C for later \"\"\"", "\n", "super", "(", "GridGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-6", "\n", "self", ".", "I_r_height", ",", "self", ".", "I_r_width", "=", "I_r_size", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "C", "=", "self", ".", "_build_C", "(", "self", ".", "F", ")", "# F x 2", "\n", "self", ".", "P", "=", "self", ".", "_build_P", "(", "self", ".", "I_r_width", ",", "self", ".", "I_r_height", ")", "\n", "## for multi-gpu, you need register buffer", "\n", "self", ".", "register_buffer", "(", "\"inv_delta_C\"", ",", "torch", ".", "tensor", "(", "self", ".", "_build_inv_delta_C", "(", "self", ".", "F", ",", "self", ".", "C", ")", ")", ".", "float", "(", ")", ")", "# F+3 x F+3", "\n", "self", ".", "register_buffer", "(", "\"P_hat\"", ",", "torch", ".", "tensor", "(", "self", ".", "_build_P_hat", "(", "self", ".", "F", ",", "self", ".", "C", ",", "self", ".", "P", ")", ")", ".", "float", "(", ")", ")", "# n x F+3", "\n", "## for fine-tuning with different image width, you may use below instead of self.register_buffer", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_C": [[100, 109], ["numpy.linspace", "numpy.ones", "numpy.stack", "numpy.stack", "numpy.concatenate", "int", "numpy.ones", "int", "int"], "methods", ["None"], ["", "def", "_build_C", "(", "self", ",", "F", ")", ":", "\n", "        ", "\"\"\" Return coordinates of fiducial points in I_r; C \"\"\"", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_top", "=", "-", "1", "*", "np", ".", "ones", "(", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "int", "(", "F", "/", "2", ")", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "C", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "return", "C", "# F x 2", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_inv_delta_C": [[110, 131], ["numpy.zeros", "range", "numpy.fill_diagonal", "numpy.concatenate", "numpy.linalg.inv", "range", "numpy.log", "numpy.linalg.norm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.ones", "numpy.zeros", "numpy.transpose", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "_build_inv_delta_C", "(", "self", ",", "F", ",", "C", ")", ":", "\n", "        ", "\"\"\" Return inv_delta_C which is needed to calculate T \"\"\"", "\n", "hat_C", "=", "np", ".", "zeros", "(", "(", "F", ",", "F", ")", ",", "dtype", "=", "float", ")", "# F x F", "\n", "for", "i", "in", "range", "(", "0", ",", "F", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ",", "F", ")", ":", "\n", "                ", "r", "=", "np", ".", "linalg", ".", "norm", "(", "C", "[", "i", "]", "-", "C", "[", "j", "]", ")", "\n", "hat_C", "[", "i", ",", "j", "]", "=", "r", "\n", "hat_C", "[", "j", ",", "i", "]", "=", "r", "\n", "", "", "np", ".", "fill_diagonal", "(", "hat_C", ",", "1", ")", "\n", "hat_C", "=", "(", "hat_C", "**", "2", ")", "*", "np", ".", "log", "(", "hat_C", ")", "\n", "# print(C.shape, hat_C.shape)", "\n", "delta_C", "=", "np", ".", "concatenate", "(", "# F+3 x F+3", "\n", "[", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "F", ",", "1", ")", ")", ",", "C", ",", "hat_C", "]", ",", "axis", "=", "1", ")", ",", "# F x F+3", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", ",", "np", ".", "transpose", "(", "C", ")", "]", ",", "axis", "=", "1", ")", ",", "# 2 x F+3", "\n", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", ",", "np", ".", "ones", "(", "(", "1", ",", "F", ")", ")", "]", ",", "axis", "=", "1", ")", "# 1 x F+3", "\n", "]", ",", "\n", "axis", "=", "0", "\n", ")", "\n", "inv_delta_C", "=", "np", ".", "linalg", ".", "inv", "(", "delta_C", ")", "\n", "return", "inv_delta_C", "# F+3 x F+3", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_P": [[132, 140], ["numpy.stack", "numpy.stack.reshape", "numpy.meshgrid", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "_build_P", "(", "self", ",", "I_r_width", ",", "I_r_height", ")", ":", "\n", "        ", "I_r_grid_x", "=", "(", "np", ".", "arange", "(", "-", "I_r_width", ",", "I_r_width", ",", "2", ")", "+", "1.0", ")", "/", "I_r_width", "# self.I_r_width", "\n", "I_r_grid_y", "=", "(", "np", ".", "arange", "(", "-", "I_r_height", ",", "I_r_height", ",", "2", ")", "+", "1.0", ")", "/", "I_r_height", "# self.I_r_height", "\n", "P", "=", "np", ".", "stack", "(", "# self.I_r_width x self.I_r_height x 2", "\n", "np", ".", "meshgrid", "(", "I_r_grid_x", ",", "I_r_grid_y", ")", ",", "\n", "axis", "=", "2", "\n", ")", "\n", "return", "P", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "# n (= self.I_r_width x self.I_r_height) x 2", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator._build_P_hat": [[141, 150], ["numpy.tile", "numpy.expand_dims", "numpy.linalg.norm", "numpy.multiply", "numpy.concatenate", "numpy.expand_dims", "numpy.square", "numpy.log", "numpy.ones"], "methods", ["None"], ["", "def", "_build_P_hat", "(", "self", ",", "F", ",", "C", ",", "P", ")", ":", "\n", "        ", "n", "=", "P", ".", "shape", "[", "0", "]", "# n (= self.I_r_width x self.I_r_height)", "\n", "P_tile", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "P", ",", "axis", "=", "1", ")", ",", "(", "1", ",", "F", ",", "1", ")", ")", "# n x 2 -> n x 1 x 2 -> n x F x 2", "\n", "C_tile", "=", "np", ".", "expand_dims", "(", "C", ",", "axis", "=", "0", ")", "# 1 x F x 2", "\n", "P_diff", "=", "P_tile", "-", "C_tile", "# n x F x 2", "\n", "rbf_norm", "=", "np", ".", "linalg", ".", "norm", "(", "P_diff", ",", "ord", "=", "2", ",", "axis", "=", "2", ",", "keepdims", "=", "False", ")", "# n x F", "\n", "rbf", "=", "np", ".", "multiply", "(", "np", ".", "square", "(", "rbf_norm", ")", ",", "np", ".", "log", "(", "rbf_norm", "+", "self", ".", "eps", ")", ")", "# n x F", "\n", "P_hat", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ones", "(", "(", "n", ",", "1", ")", ")", ",", "P", ",", "rbf", "]", ",", "axis", "=", "1", ")", "\n", "return", "P_hat", "# n x F+3", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.transformation.GridGenerator.build_P_prime": [[151, 161], ["batch_C_prime.size", "transformation.GridGenerator.inv_delta_C.repeat", "transformation.GridGenerator.P_hat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "build_P_prime", "(", "self", ",", "batch_C_prime", ")", ":", "\n", "        ", "\"\"\" Generate Grid from batch_C_prime [batch_size x F x 2] \"\"\"", "\n", "batch_size", "=", "batch_C_prime", ".", "size", "(", "0", ")", "\n", "batch_inv_delta_C", "=", "self", ".", "inv_delta_C", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_P_hat", "=", "self", ".", "P_hat", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "batch_C_prime_with_zeros", "=", "torch", ".", "cat", "(", "(", "batch_C_prime", ",", "torch", ".", "zeros", "(", "\n", "batch_size", ",", "3", ",", "2", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", ",", "dim", "=", "1", ")", "# batch_size x F+3 x 2", "\n", "batch_T", "=", "torch", ".", "bmm", "(", "batch_inv_delta_C", ",", "batch_C_prime_with_zeros", ")", "# batch_size x F+3 x 2", "\n", "batch_P_prime", "=", "torch", ".", "bmm", "(", "batch_P_hat", ",", "batch_T", ")", "# batch_size x n x 2", "\n", "return", "batch_P_prime", "# batch_size x n x 2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.BidirectionalLSTM.__init__": [[5, 10], ["torch.Module.__init__", "torch.LSTM", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.BidirectionalLSTM.forward": [[11, 20], ["sequence_modeling.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "sequence_modeling.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__": [[23, 28], ["torch.Module.__init__", "torch.LSTM", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "CorrLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "False", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.firesans_nonlatinphotoocr.modules.sequence_modeling.CorrLSTM.forward": [[29, 38], ["sequence_modeling.CorrLSTM.rnn", "recurrent.size", "recurrent.view", "sequence_modeling.CorrLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "", "", ""]]}