{"home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.ReLUConvBN.__init__": [[24, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.ReLUConvBN.forward": [[32, 34], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.DilConv.__init__": [[37, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.DilConv.forward": [[46, 48], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.SepConv.__init__": [[52, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.SepConv.forward": [[65, 67], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.Identity.__init__": [[71, 73], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.Identity.forward": [[74, 76], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.Zero.__init__": [[80, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "    ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.Zero.forward": [[84, 88], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "stride", "==", "1", ":", "\n", "      ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.FactorizedReduce.__init__": [[92, 99], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "    ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.operations.FactorizedReduce.forward": [[100, 105], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.MixedOp.__init__": [[12, 20], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.MixedOp._ops.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "stride", ")", ":", "\n", "    ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "      ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "False", ")", "\n", "if", "'pool'", "in", "primitive", ":", "\n", "        ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.MixedOp.forward": [[21, 23], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Cell.__init__": [[27, 46], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "model_search.MixedOp", "model_search.Cell._ops.append"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_bns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "C", ",", "stride", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Cell.forward": [[47, 59], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "states.append", "enumerate"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "s", "=", "sum", "(", "self", ".", "_ops", "[", "offset", "+", "j", "]", "(", "h", ",", "weights", "[", "offset", "+", "j", "]", ")", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.__init__": [[63, 96], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._initialize_alphas"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "steps", "=", "4", ",", "multiplier", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.new": [[97, 102], ["Network().cuda", "zip", "Network().cuda.arch_parameters", "model_search.Network.arch_parameters", "x.data.copy_", "model_search.Network"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters"], ["", "def", "new", "(", "self", ")", ":", "\n", "    ", "model_new", "=", "Network", "(", "self", ".", "_C", ",", "self", ".", "_num_classes", ",", "self", ".", "_layers", ",", "self", ".", "_criterion", ")", ".", "cuda", "(", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "model_new", ".", "arch_parameters", "(", ")", ",", "self", ".", "arch_parameters", "(", ")", ")", ":", "\n", "        ", "x", ".", "data", ".", "copy_", "(", "y", ".", "data", ")", "\n", "", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.forward": [[103, 114], ["model_search.Network.stem", "enumerate", "model_search.Network.global_pooling", "model_search.Network.classifier", "model_search.Network.view", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "cell", "model_search.Network.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "if", "cell", ".", "reduction", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "weights", ")", "\n", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss": [[115, 118], ["model_search.Network.", "model_search.Network._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "    ", "logits", "=", "self", "(", "input", ")", "\n", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._initialize_alphas": [[119, 128], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "range", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", "for", "n", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "self", ".", "alphas_normal", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "alphas_reduce", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "alphas_normal", ",", "\n", "self", ".", "alphas_reduce", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters": [[130, 132], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.genotype": [[133, 163], ["model_search.Network.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "for", "j", "in", "edges", ":", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ":", "\n", "              ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "                ", "k_best", "=", "k", "\n", "", "", "", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "gene_normal", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_normal", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "alphas_reduce", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", "\n", "genotype", "=", "Genotype", "(", "\n", "normal", "=", "gene_normal", ",", "normal_concat", "=", "concat", ",", "\n", "reduce", "=", "gene_reduce", ",", "reduce_concat", "=", "concat", "\n", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect.__init__": [[13, 19], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "architect.Architect.model.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "    ", "self", ".", "network_momentum", "=", "args", ".", "momentum", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "weight_decay", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._compute_unrolled_model": [[20, 30], ["architect.Architect.model._loss", "architect.Architect._construct_model_from_theta", "architect._concat", "_concat().mul_", "theta.sub", "architect.Architect.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "architect._concat", "architect._concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._construct_model_from_theta", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect._concat", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect._concat", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect._concat"], ["", "def", "_compute_unrolled_model", "(", "self", ",", "input", ",", "target", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "    ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "theta", "=", "_concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "try", ":", "\n", "      ", "moment", "=", "_concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul_", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "      ", "moment", "=", "torch", ".", "zeros_like", "(", "theta", ")", "\n", "", "dtheta", "=", "_concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ")", ".", "data", "+", "self", ".", "network_weight_decay", "*", "theta", "\n", "unrolled_model", "=", "self", ".", "_construct_model_from_theta", "(", "theta", ".", "sub", "(", "eta", ",", "moment", "+", "dtheta", ")", ")", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect.step": [[31, 38], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._backward_step"], ["", "def", "step", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ",", "unrolled", ")", ":", "\n", "    ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "unrolled", ":", "\n", "        ", "self", ".", "_backward_step_unrolled", "(", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "_backward_step", "(", "input_valid", ",", "target_valid", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._backward_step": [[39, 42], ["architect.Architect.model._loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss"], ["", "def", "_backward_step", "(", "self", ",", "input_valid", ",", "target_valid", ")", ":", "\n", "    ", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._backward_step_unrolled": [[43, 60], ["architect.Architect._compute_unrolled_model", "architect.Architect._loss", "architect.Architect._loss.backward", "architect.Architect._hessian_vector_product", "zip", "zip", "g.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.arch_parameters", "architect.Architect.parameters", "torch.autograd.Variable", "torch.autograd.Variable", "v.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._hessian_vector_product", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "input_train", ",", "target_train", ",", "input_valid", ",", "target_valid", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "    ", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "input_train", ",", "target_train", ",", "eta", ",", "network_optimizer", ")", "\n", "unrolled_loss", "=", "unrolled_model", ".", "_loss", "(", "input_valid", ",", "target_valid", ")", "\n", "\n", "unrolled_loss", ".", "backward", "(", ")", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "arch_parameters", "(", ")", "]", "\n", "vector", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_product", "(", "vector", ",", "input_train", ",", "target_train", ")", "\n", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "      ", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "", "for", "v", ",", "g", "in", "zip", "(", "self", ".", "model", ".", "arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "      ", "if", "v", ".", "grad", "is", "None", ":", "\n", "        ", "v", ".", "grad", "=", "Variable", "(", "g", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "v", ".", "grad", ".", "data", ".", "copy_", "(", "g", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._construct_model_from_theta": [[61, 75], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "architect.Architect.cuda", "numpy.prod", "theta[].view", "len", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.new", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "", "", "def", "_construct_model_from_theta", "(", "self", ",", "theta", ")", ":", "\n", "    ", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "v_length", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "params", "[", "k", "]", "=", "theta", "[", "offset", ":", "offset", "+", "v_length", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "v_length", "\n", "\n", "", "assert", "offset", "==", "len", "(", "theta", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "return", "model_new", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect.Architect._hessian_vector_product": [[76, 92], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "_concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model.arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect._concat"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network._loss", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model_search.Network.arch_parameters", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect._concat"], ["", "def", "_hessian_vector_product", "(", "self", ",", "vector", ",", "input", ",", "target", ",", "r", "=", "1e-2", ")", ":", "\n", "    ", "R", "=", "r", "/", "_concat", "(", "vector", ")", ".", "norm", "(", ")", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "sub_", "(", "2", "*", "R", ",", "v", ")", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "input", ",", "target", ")", "\n", "grads_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "arch_parameters", "(", ")", ")", "\n", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "      ", "p", ".", "data", ".", "add_", "(", "R", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "R", ")", "for", "x", ",", "y", "in", "zip", "(", "grads_p", ",", "grads_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.architect._concat": [[7, 9], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "_concat", "(", "xs", ")", ":", "\n", "  ", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "xs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.Cell.__init__": [[10, 27], ["torch.Module.__init__", "print", "operations.ReLUConvBN", "model.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.Cell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.Cell._compile": [[28, 40], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.Cell.forward": [[41, 61], ["model.Cell.preprocess0", "model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "utils.drop_path", "isinstance", "utils.drop_path"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.drop_path", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "        ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "          ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "          ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.AuxiliaryHeadCIFAR.__init__": [[65, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.AuxiliaryHeadCIFAR.forward": [[80, 84], ["model.AuxiliaryHeadCIFAR.features", "model.AuxiliaryHeadCIFAR.classifier", "model.AuxiliaryHeadCIFAR.view", "model.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.AuxiliaryHeadImageNet.__init__": [[88, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.AuxiliaryHeadImageNet.forward": [[105, 109], ["model.AuxiliaryHeadImageNet.features", "model.AuxiliaryHeadImageNet.classifier", "model.AuxiliaryHeadImageNet.view", "model.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.NetworkCIFAR.__init__": [[113, 145], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.NetworkCIFAR.forward": [[146, 157], ["model.NetworkCIFAR.stem", "enumerate", "model.NetworkCIFAR.global_pooling", "model.NetworkCIFAR.classifier", "model.NetworkCIFAR.view", "cell", "model.NetworkCIFAR.size", "model.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.NetworkImageNet.__init__": [[161, 201], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model.Cell", "model.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "    ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "      ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "        ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "      ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.model.NetworkImageNet.forward": [[202, 214], ["model.NetworkImageNet.stem0", "model.NetworkImageNet.stem1", "enumerate", "model.NetworkImageNet.global_pooling", "model.NetworkImageNet.classifier", "model.NetworkImageNet.view", "cell", "model.NetworkImageNet.size", "model.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "        ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "          ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.visualize.plot": [[6, 39], ["graphviz.Digraph", "graphviz.Digraph.body.extend", "graphviz.Digraph.node", "graphviz.Digraph.node", "range", "range", "graphviz.Digraph.node", "range", "graphviz.Digraph.render", "len", "graphviz.Digraph.node", "graphviz.Digraph.edge", "dict", "dict", "len", "str", "str", "graphviz.Digraph.edge", "str", "str"], "function", ["None"], ["def", "plot", "(", "genotype", ",", "filename", ")", ":", "\n", "  ", "g", "=", "Digraph", "(", "\n", "format", "=", "'pdf'", ",", "\n", "edge_attr", "=", "dict", "(", "fontsize", "=", "'20'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "node_attr", "=", "dict", "(", "style", "=", "'filled'", ",", "shape", "=", "'rect'", ",", "align", "=", "'center'", ",", "fontsize", "=", "'20'", ",", "height", "=", "'0.5'", ",", "width", "=", "'0.5'", ",", "penwidth", "=", "'2'", ",", "fontname", "=", "\"times\"", ")", ",", "\n", "engine", "=", "'dot'", ")", "\n", "g", ".", "body", ".", "extend", "(", "[", "'rankdir=LR'", "]", ")", "\n", "\n", "g", ".", "node", "(", "\"c_{k-2}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "g", ".", "node", "(", "\"c_{k-1}\"", ",", "fillcolor", "=", "'darkseagreen2'", ")", "\n", "assert", "len", "(", "genotype", ")", "%", "2", "==", "0", "\n", "steps", "=", "len", "(", "genotype", ")", "//", "2", "\n", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "node", "(", "str", "(", "i", ")", ",", "fillcolor", "=", "'lightblue'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "for", "k", "in", "[", "2", "*", "i", ",", "2", "*", "i", "+", "1", "]", ":", "\n", "      ", "op", ",", "j", "=", "genotype", "[", "k", "]", "\n", "if", "j", "==", "0", ":", "\n", "        ", "u", "=", "\"c_{k-2}\"", "\n", "", "elif", "j", "==", "1", ":", "\n", "        ", "u", "=", "\"c_{k-1}\"", "\n", "", "else", ":", "\n", "        ", "u", "=", "str", "(", "j", "-", "2", ")", "\n", "", "v", "=", "str", "(", "i", ")", "\n", "g", ".", "edge", "(", "u", ",", "v", ",", "label", "=", "op", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "", "g", ".", "node", "(", "\"c_{k}\"", ",", "fillcolor", "=", "'palegoldenrod'", ")", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "    ", "g", ".", "edge", "(", "str", "(", "i", ")", ",", "\"c_{k}\"", ",", "fillcolor", "=", "\"gray\"", ")", "\n", "\n", "", "g", ".", "render", "(", "filename", ",", "view", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.AvgrageMeter.__init__": [[12, 14], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.AvgrageMeter.reset": [[15, 19], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.AvgrageMeter.update": [[20, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.Cutout.__init__": [[42, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.Cutout.__call__": [[45, 61], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.RowColPermute.__init__": [[65, 70], ["torch.nn.Module.__init__", "torch.randperm", "torch.randperm", "type", "type"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rowperm", "=", "torch", ".", "randperm", "(", "row", ")", "if", "type", "(", "row", ")", "==", "int", "else", "row", "\n", "self", ".", "colperm", "=", "torch", ".", "randperm", "(", "col", ")", "if", "type", "(", "col", ")", "==", "int", "else", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.RowColPermute.forward": [[71, 74], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "\n", "        ", "return", "tensor", "[", ":", ",", "self", ".", "rowperm", "]", "[", ":", ",", ":", ",", "self", ".", "colperm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.accuracy": [[26, 39], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils._data_transforms_cifar10": [[76, 107], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "logging.info", "utils.RowColPermute", "torchvision.ToTensor", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "utils.Cutout", "torchvision.ToTensor", "torchvision.ToTensor", "torch.LongTensor", "torch.LongTensor", "utils.RowColPermute"], "function", ["None"], ["", "", "def", "_data_transforms_cifar10", "(", "args", ",", "logging", "=", "None", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", "\n", "\n", "if", "args", ".", "permute", ":", "\n", "      ", "try", ":", "\n", "          ", "from", "genotypes", "import", "PERMS", "\n", "row", ",", "col", "=", "PERMS", "[", "args", ".", "arch", "]", "\n", "logging", ".", "info", "(", "\"using permutation associated with \"", "+", "args", ".", "arch", ")", "\n", "permute", "=", "RowColPermute", "(", "torch", ".", "LongTensor", "(", "row", ")", ",", "torch", ".", "LongTensor", "(", "col", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "          ", "permute", "=", "RowColPermute", "(", "32", ",", "32", ")", "\n", "", "train", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "permute", ",", "normalize", "]", "\n", "", "else", ":", "\n", "      ", "train", "=", "[", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "]", "\n", "\n", "", "train_transform", "=", "transforms", ".", "Compose", "(", "train", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "if", "args", ".", "permute", ":", "\n", "      ", "valid", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "permute", ",", "normalize", "]", "\n", "", "else", ":", "\n", "      ", "valid", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "valid", ")", "\n", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.count_parameters_in_MB": [[109, 111], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save_checkpoint": [[113, 119], ["os.path.join", "torch.save", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ")", ":", "\n", "  ", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "    ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save": [[121, 123], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save"], ["", "", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.load": [[125, 127], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.drop_path": [[129, 136], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.create_exp_dir": [[138, 148], ["print", "os.path.exists", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.metamorphosize": [[27, 44], ["copy.deepcopy", "dir", "setattr", "getattr"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "metamorphosize", "(", "cls", ",", "model", ",", "in_place", "=", "False", ",", "attrs", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Args:\n            model: backbone model\n            in_place: replace backbone model layers in place\n            attrs: custom attributes of model to replace\n        '''", "\n", "\n", "model", "=", "model", "if", "in_place", "else", "deepcopy", "(", "model", ")", "\n", "attrs", "=", "attrs", "if", "attrs", "else", "dir", "(", "model", ")", "\n", "assert", "'forward'", "in", "attrs", ",", "\"if nonempty, 'attrs' must contain 'forward'\"", "\n", "attrs", "=", "[", "(", "attr", ",", "getattr", "(", "model", ",", "attr", ")", ")", "for", "attr", "in", "attrs", "if", "not", "attr", "[", ":", "2", "]", "==", "'__'", "]", "\n", "model", ".", "__class__", "=", "cls", "\n", "for", "name", ",", "attr", "in", "attrs", ":", "\n", "            ", "setattr", "(", "model", ",", "name", ",", "attr", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_arch_params": [[45, 52], ["chrysalis.Chrysalis.named_modules", "hasattr", "module.named_arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "def", "named_arch_params", "(", "self", ")", ":", "\n", "        ", "'''iterates through (name, param) pairs of all architecture parameters in the model'''", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "and", "hasattr", "(", "module", ",", "'named_arch_params'", ")", ":", "\n", "                ", "for", "n", ",", "p", "in", "module", ".", "named_arch_params", "(", ")", ":", "\n", "                    ", "yield", "name", "+", "'.'", "+", "n", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.arch_params": [[53, 57], ["chrysalis.Chrysalis.named_arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "", "", "", "def", "arch_params", "(", "self", ")", ":", "\n", "        ", "'''iterates through all architecture parameters in the model'''", "\n", "\n", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_arch_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_model_weights": [[58, 63], ["chrysalis.Chrysalis.named_arch_params", "chrysalis.Chrysalis.named_parameters"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "def", "named_model_weights", "(", "self", ")", ":", "\n", "        ", "'''iterates through (name, param) pairs of all model weights in the model'''", "\n", "\n", "exclude", "=", "{", "name", "for", "name", ",", "_", "in", "self", ".", "named_arch_params", "(", ")", "}", "\n", "return", "(", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "not", "n", "in", "exclude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.model_weights": [[64, 68], ["chrysalis.Chrysalis.named_model_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_model_weights"], ["", "def", "model_weights", "(", "self", ")", ":", "\n", "        ", "'''iterates through all model weights in the model'''", "\n", "\n", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_model_weights", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_xd_weights": [[69, 77], ["chrysalis.Chrysalis.named_modules", "hasattr", "module.named_model_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_model_weights"], ["", "def", "named_xd_weights", "(", "self", ",", "include_bias", "=", "False", ")", ":", "\n", "        ", "'''iterates through (name, param) pairs of all model weights associated with XD objects'''", "\n", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "name", "and", "hasattr", "(", "module", ",", "'named_model_weights'", ")", ":", "\n", "                ", "for", "n", ",", "p", "in", "module", ".", "named_model_weights", "(", ")", ":", "\n", "                    ", "if", "include_bias", "or", "not", "n", "==", "'bias'", ":", "\n", "                        ", "yield", "name", "+", "'.'", "+", "n", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.xd_weights": [[78, 82], ["chrysalis.Chrysalis.named_xd_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_xd_weights"], ["", "", "", "", "", "def", "xd_weights", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''iterates through all model weights associated with XD objects'''", "\n", "\n", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_xd_weights", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_nonxd_weights": [[83, 88], ["chrysalis.Chrysalis.named_xd_weights", "chrysalis.Chrysalis.named_model_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_xd_weights", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_model_weights"], ["", "def", "named_nonxd_weights", "(", "self", ",", "exclude_bias", "=", "False", ")", ":", "\n", "        ", "'''iterates through (name, param) pairs of all model weights not associated with XD objects'''", "\n", "\n", "exclude", "=", "{", "name", "for", "name", ",", "_", "in", "self", ".", "named_xd_weights", "(", "include_bias", "=", "not", "exclude_bias", ")", "}", "\n", "return", "(", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "named_model_weights", "(", ")", "if", "not", "n", "in", "exclude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.nonxd_weights": [[89, 93], ["chrysalis.Chrysalis.named_nonxd_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.named_nonxd_weights"], ["", "def", "nonxd_weights", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''iterates through all model weights not associated with XD objects'''", "\n", "\n", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_nonxd_weights", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch": [[95, 133], ["chrysalis.Chrysalis.patch_conv.func", "module_string.split", "chrysalis.get_module", "getattr", "setattr", "chrysalis.Chrysalis.named_modules", "xd.int2tuple", "func.", "xd.XD", "len", "slice", "slice", "slice", "zip", "xd.int2tuple", "torch.norm", "torch.norm", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.get_module", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple"], ["", "def", "patch", "(", "self", ",", "module_string", ",", "sample_input", ",", "sample_output", ",", "test", "=", "False", ",", "test_boundary", "=", "0", ",", "func", "=", "lambda", "m", ":", "m", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''patches specified module with a XD\n        Args:\n            module_string: name of module to replace\n            sample_input: sample input into the module.forward function\n            sample_output: sample output of the module.forward function\n            test: test agreement of replacement module on 'sample_input' and return relative error\n            test_boundary: sets boundary when testing replacement module\n            func: function to apply to xd.XD object before patching\n            kwargs: passed to xd.XD\n        '''", "\n", "\n", "if", "sample_input", "is", "None", ":", "\n", "            ", "module", ",", "test", "=", "None", ",", "False", "\n", "", "else", ":", "\n", "            ", "in_size", "=", "sample_input", ".", "shape", "[", "2", ":", "]", "\n", "in_channels", "=", "sample_input", ".", "shape", "[", "1", "]", "\n", "out_channels", "=", "sample_output", ".", "shape", "[", "1", "]", "\n", "module", "=", "func", "(", "XD", "(", "in_size", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "while", "True", ":", "\n", "            ", "module_split", "=", "module_string", ".", "split", "(", "'.'", ")", "\n", "parent", "=", "get_module", "(", "self", ",", "'.'", ".", "join", "(", "module_split", "[", ":", "-", "1", "]", ")", ")", "\n", "name", "=", "module_split", "[", "-", "1", "]", "\n", "child", "=", "getattr", "(", "parent", ",", "name", ")", "\n", "setattr", "(", "parent", ",", "module_split", "[", "-", "1", "]", ",", "module", ")", "\n", "for", "module_string", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "m", "==", "child", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "test", ":", "\n", "            ", "test_boundary", "=", "int2tuple", "(", "test_boundary", ",", "length", "=", "len", "(", "in_size", ")", ")", "\n", "slc", "=", "[", "slice", "(", "None", ")", ",", "slice", "(", "None", ")", "]", "+", "[", "slice", "(", "b", ",", "n", "-", "b", ")", "for", "b", ",", "n", "in", "zip", "(", "int2tuple", "(", "test_boundary", ",", "length", "=", "len", "(", "in_size", ")", ")", ",", "in_size", ")", "]", "\n", "output", "=", "module", "(", "sample_input", ")", "\n", "return", "module", ",", "(", "torch", ".", "norm", "(", "output", "[", "slc", "]", "-", "sample_output", "[", "slc", "]", ")", "/", "torch", ".", "norm", "(", "sample_output", "[", "slc", "]", ")", ")", ".", "item", "(", ")", "\n", "", "return", "module", ",", "\"module not used in forward pass\"", "if", "sample_input", "is", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.collect_io": [[134, 142], ["chrysalis.Chrysalis.", "m.register_forward_hook", "handle.remove", "module_io.__setitem__"], "methods", ["None"], ["", "def", "collect_io", "(", "self", ",", "sample_input", ",", "modules", ",", "*", "args", ")", ":", "\n", "\n", "        ", "module_io", "=", "{", "}", "\n", "handles", "=", "[", "m", ".", "register_forward_hook", "(", "lambda", "s", ",", "i", ",", "o", ":", "module_io", ".", "__setitem__", "(", "s", ",", "(", "i", "[", "0", "]", ",", "o", ")", ")", ")", "for", "m", "in", "modules", "]", "\n", "self", "(", "sample_input", ",", "*", "args", ")", "\n", "for", "handle", "in", "handles", ":", "\n", "            ", "handle", ".", "remove", "(", ")", "\n", "", "return", "module_io", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_skip": [[143, 166], ["list", "chrysalis.Chrysalis.collect_io", "chrysalis.Chrysalis.patch", "int", "print", "type", "str"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.collect_io", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch"], ["", "def", "patch_skip", "(", "self", ",", "sample_input", ",", "named_modules", "=", "[", "]", ",", "warm_start", "=", "True", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            sample_input: torch.Tensor of shape [batch-size, input-channels, *input-width]\n            named_modules: iterable of named skip-connect modules in self.model\n            warm_start: whether to initialize modules as skip-connects\n            verbose: print patch logs\n            kwargs: passed to self.patch\n        '''", "\n", "\n", "named_modules", "=", "list", "(", "named_modules", ")", "\n", "module_io", "=", "self", ".", "collect_io", "(", "sample_input", ",", "(", "m", "for", "_", ",", "m", "in", "named_modules", ")", ")", "\n", "\n", "for", "name", ",", "module", "in", "named_modules", ":", "\n", "            ", "skip", "=", "1", "+", "int", "(", "type", "(", "module", ")", "!=", "nn", ".", "Sequential", ")", "\n", "m", ",", "err", "=", "self", ".", "patch", "(", "name", ",", "\n", "*", "module_io", "[", "module", "]", ",", "\n", "test", "=", "verbose", ",", "\n", "arch_init", "=", "'skip_'", "+", "str", "(", "skip", ")", "if", "warm_start", "else", "'ortho'", ",", "\n", "stride", "=", "skip", ",", "\n", "**", "kwargs", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "name", ",", "'\\terror:'", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_pool": [[167, 193], ["list", "chrysalis.Chrysalis.collect_io", "chrysalis.Chrysalis.patch", "print", "str", "type", "str"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.collect_io", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch"], ["", "", "", "def", "patch_pool", "(", "self", ",", "sample_input", ",", "named_modules", "=", "[", "]", ",", "warm_start", "=", "True", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            sample_input: torch.Tensor of shape [batch-size, input-channels, *input-width]\n            named_modules: iterable of named skip-connect modules in self.model\n            warm_start: whether to initialize modules as skip-connects\n            verbose: print patch logs\n            kwargs: passed to self.patch\n        '''", "\n", "\n", "named_modules", "=", "list", "(", "named_modules", ")", "\n", "module_io", "=", "self", ".", "collect_io", "(", "sample_input", ",", "(", "m", "for", "_", ",", "m", "in", "named_modules", ")", ")", "\n", "\n", "for", "name", ",", "module", "in", "named_modules", ":", "\n", "            ", "ks", "=", "module", ".", "kernel_size", "\n", "arch_init", "=", "'pool_'", "+", "(", "str", "(", "ks", ")", "if", "type", "(", "ks", ")", "==", "int", "else", "'x'", ".", "join", "(", "str", "(", "k", ")", "for", "k", "in", "ks", ")", ")", "\n", "m", ",", "err", "=", "self", ".", "patch", "(", "name", ",", "\n", "*", "module_io", "[", "module", "]", ",", "\n", "test", "=", "verbose", ",", "\n", "test_boundary", "=", "1", ",", "\n", "arch_init", "=", "arch_init", "if", "warm_start", "else", "'ortho'", ",", "\n", "padding", "=", "module", ".", "padding", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "**", "kwargs", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "name", ",", "'\\terror:'", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_conv": [[194, 247], ["chrysalis.Chrysalis.collect_io", "chrysalis.Chrysalis.named_modules", "chrysalis.check_weight_norm", "xd.int2tuple", "chrysalis.Chrysalis.patch", "any", "hasattr", "print", "hasattr", "torch.nn.utils.weight_norm", "chrysalis.Chrysalis.get", "tuple", "str", "type", "type", "xd.Conv", "str", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.collect_io", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.check_weight_norm", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.Conv"], ["", "", "", "def", "patch_conv", "(", "self", ",", "sample_input", ",", "*", "args", ",", "named_modules", "=", "None", ",", "warm_start", "=", "True", ",", "verbose", "=", "False", ",", "kmatrix_depth", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            sample_input: torch.Tensor of shape [batch-size, input-channels, *input-width]\n            args: additional arguments passed to self.forward\n            named_modules: iterable of named modules ; if None uses all modules in self.model\n            warm_start: whether to initialize modules as 2d convs\n            verbose: print patch logs\n            kwargs: passed to self.patch\n        '''", "\n", "\n", "named_modules", "=", "self", ".", "named_modules", "(", ")", "if", "named_modules", "is", "None", "else", "named_modules", "\n", "named_modules", "=", "[", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "named_modules", "if", "hasattr", "(", "m", ",", "'kernel_size'", ")", "and", "type", "(", "m", ".", "kernel_size", ")", "==", "tuple", "and", "type", "(", "m", ")", "==", "Conv", "(", "len", "(", "m", ".", "kernel_size", ")", ")", "]", "\n", "module_io", "=", "self", ".", "collect_io", "(", "sample_input", ",", "(", "m", "for", "_", ",", "m", "in", "named_modules", ")", ",", "*", "args", ")", "\n", "\n", "for", "name", ",", "module", "in", "named_modules", ":", "\n", "            ", "ks", "=", "module", ".", "kernel_size", "\n", "arch_init", "=", "'conv_'", "+", "'x'", ".", "join", "(", "str", "(", "k", ")", "for", "k", "in", "ks", ")", "\n", "wn", "=", "check_weight_norm", "(", "module", ")", "\n", "msg", "=", "\"\"", "\n", "if", "wn", "is", "None", ":", "\n", "                ", "func", "=", "lambda", "m", ":", "m", "\n", "", "else", ":", "\n", "                ", "msg", "+=", "\"\\tweight-norm detected\"", "\n", "def", "func", "(", "m", ")", ":", "\n", "                    ", "m", "=", "torch", ".", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "wn", ".", "dim", ")", "\n", "if", "m", ".", "weight_g", ".", "shape", "==", "module", ".", "weight_g", ".", "shape", ":", "\n", "                        ", "m", ".", "weight_g", "=", "module", ".", "weight_g", "\n", "m", ".", "weight_v", "=", "module", ".", "weight_v", "\n", "", "return", "m", "\n", "", "", "depth", "=", "int2tuple", "(", "kmatrix_depth", ",", "length", "=", "3", ")", "\n", "if", "any", "(", "d", ">", "1", "for", "d", "in", "module", ".", "dilation", ")", "and", "depth", "[", "1", "]", "<", "3", ":", "\n", "                ", "msg", "+=", "\"\\tdepth increased due to dilation\"", "\n", "depth", "=", "(", "depth", "[", "0", "]", ",", "3", ",", "depth", "[", "2", "]", ")", "\n", "", "m", ",", "err", "=", "self", ".", "patch", "(", "name", ",", "\n", "*", "module_io", ".", "get", "(", "module", ",", "(", "None", ",", "None", ")", ")", ",", "\n", "test", "=", "verbose", ",", "\n", "test_boundary", "=", "1", ",", "\n", "func", "=", "func", ",", "\n", "arch_init", "=", "arch_init", "if", "warm_start", "else", "'ortho'", ",", "\n", "kmatrix_depth", "=", "depth", ",", "\n", "padding", "=", "module", ".", "padding", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "dilation_init", "=", "module", ".", "dilation", ",", "\n", "arch_shape", "=", "arch_init", ",", "\n", "weight", "=", "module", ".", "weight", ",", "\n", "bias", "=", "module", ".", "bias", ",", "\n", "**", "kwargs", ")", "\n", "\n", "if", "hasattr", "(", "m", ",", "'max_kernel_size'", ")", "and", "tuple", "(", "ks", ")", "!=", "m", ".", "max_kernel_size", ":", "\n", "                ", "msg", "+=", "\"\\tnew kernel size: \"", "+", "str", "(", "m", ".", "max_kernel_size", ")", "\n", "", "if", "verbose", ":", "\n", "                ", "print", "(", "name", ",", "'\\terror:'", ",", "err", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.save_arch": [[248, 252], ["torch.save", "dict", "chrysalis.Chrysalis.named_arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "", "", "def", "save_arch", "(", "self", ",", "path", ")", ":", "\n", "        ", "'''saves architecture parameters to provided filepath'''", "\n", "\n", "torch", ".", "save", "(", "dict", "(", "self", ".", "named_arch_params", "(", ")", ")", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.load_arch": [[253, 263], ["torch.load", "chrysalis.Chrysalis.named_arch_params", "load.to", "print"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.load", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "def", "load_arch", "(", "self", ",", "path", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "'''loads architecture parameters from provided filepath'''", "\n", "\n", "data", "=", "torch", ".", "load", "(", "path", ")", "\n", "for", "n", ",", "p", "in", "self", ".", "named_arch_params", "(", ")", ":", "\n", "            ", "load", "=", "data", "[", "n", "]", ".", "data", "\n", "if", "p", ".", "data", ".", "shape", "==", "load", ".", "shape", ":", "\n", "                ", "p", ".", "data", "=", "load", ".", "to", "(", "p", ".", "device", ")", "\n", "", "elif", "verbose", ":", "\n", "                ", "print", "(", "'did not load'", ",", "n", ",", "'(shape mismatch)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.set_arch_requires_grad": [[264, 269], ["chrysalis.Chrysalis.arch_params", "bool"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.arch_params"], ["", "", "", "def", "set_arch_requires_grad", "(", "self", ",", "requires_grad", ")", ":", "\n", "        ", "'''sets 'requires_grad' attribute of architecture parameters to given value'''", "\n", "\n", "for", "param", "in", "self", ".", "arch_params", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "bool", "(", "requires_grad", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.get_module": [[8, 14], ["module_string.split", "getattr"], "function", ["None"], ["def", "get_module", "(", "model", ",", "module_string", ")", ":", "\n", "\n", "    ", "if", "module_string", ":", "\n", "        ", "for", "substring", "in", "module_string", ".", "split", "(", "'.'", ")", ":", "\n", "            ", "model", "=", "getattr", "(", "model", ",", "substring", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.check_weight_norm": [[18, 23], ["module._forward_pre_hooks.items", "type"], "function", ["None"], ["def", "check_weight_norm", "(", "module", ")", ":", "\n", "\n", "    ", "for", "key", ",", "value", "in", "module", ".", "_forward_pre_hooks", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "value", ")", "==", "WeightNorm", ":", "\n", "            ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.__init__": [[11, 34], ["torch.optim.Optimizer.__init__", "nas.MixedOptimizer.optimizers.append", "type", "group.get"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizers", ",", "alternating", "=", "False", ",", "op_decay", "=", "[", "]", ",", "coef", "=", "1E-4", ",", "approx", "=", "16", ")", ":", "\n", "        ", "'''\n        Args:\n            optimizers: list of objects that are subclasses of optim.Optimizer\n            alternating: whether to alternate steps with different optimizers\n            op_decay: list of objects that are subclasses of nn.Module\n            coef: penalty term coefficient for op-decay\n            approx: number of basis vectors used to approximate Frobenius norm for op-decay\n            model_optimizers: indices of 'optimizers' that are not architecture optimizers\n        '''", "\n", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "for", "optimizer", "in", "optimizers", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", "[", "'method'", "]", "=", "type", "(", "optimizer", ")", "\n", "group", "[", "'initial_lr'", "]", "=", "group", ".", "get", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "self", ".", "optimizers", ".", "append", "(", "optimizer", ")", "\n", "", "super", "(", "MixedOptimizer", ",", "self", ")", ".", "__init__", "(", "(", "g", "for", "o", "in", "self", ".", "optimizers", "for", "g", "in", "o", ".", "param_groups", ")", ",", "{", "}", ")", "\n", "self", ".", "alternating", "=", "alternating", "\n", "self", ".", "iteration", "=", "0", "\n", "self", ".", "op_decay", "=", "op_decay", "\n", "self", ".", "approx", "=", "approx", "\n", "self", ".", "coef", "=", "coef", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step": [[35, 46], ["torch.autograd.backward", "nas.MixedOptimizer.optimizers[].step", "optimizer.step", "sum", "m.penalty", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.penalty"], ["", "def", "step", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "coef", "and", "self", ".", "op_decay", ":", "\n", "            ", "autograd", ".", "backward", "(", "self", ".", "coef", "*", "sum", "(", "m", ".", "penalty", "(", "approx", "=", "self", ".", "approx", ")", "for", "m", "in", "self", ".", "op_decay", ")", ")", "\n", "\n", "", "if", "self", ".", "alternating", ":", "\n", "            ", "self", ".", "optimizers", "[", "self", ".", "iteration", "%", "len", "(", "self", ".", "optimizers", ")", "]", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "optimizer", "in", "self", ".", "optimizers", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "", "", "self", ".", "iteration", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.iter_grad": [[48, 56], ["param.grad.real.detach", "param.grad.imag.detach", "param.grad.detach"], "function", ["None"], ["", "", "def", "iter_grad", "(", "parameters", ")", ":", "\n", "\n", "    ", "for", "param", "in", "parameters", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "param", ".", "grad", ".", "real", ".", "detach", "(", ")", "\n", "yield", "param", ".", "grad", ".", "imag", ".", "detach", "(", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "yield", "param", ".", "grad", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.clip_grad_norm": [[57, 77], ["isinstance", "float", "float", "len", "torch.tensor", "max", "torch.norm", "torch.stack", "p.grad.detach().mul_", "g.abs().max().to", "clip_coef.to", "nas.iter_grad", "torch.norm().to", "p.grad.detach", "g.abs().max", "nas.iter_grad", "torch.norm", "g.abs"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.iter_grad", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.iter_grad", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.abs"], ["", "", "", "def", "clip_grad_norm", "(", "parameters", ",", "max_norm", ",", "norm_type", "=", "2.0", ")", ":", "\n", "    ", "'''handles gradient clipping for complex parameters'''", "\n", "\n", "if", "isinstance", "(", "parameters", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "parameters", "=", "[", "parameters", "]", "\n", "", "parameters", "=", "[", "p", "for", "p", "in", "parameters", "if", "p", ".", "grad", "is", "not", "None", "]", "\n", "max_norm", "=", "float", "(", "max_norm", ")", "\n", "norm_type", "=", "float", "(", "norm_type", ")", "\n", "if", "len", "(", "parameters", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "device", "=", "parameters", "[", "0", "]", ".", "grad", ".", "device", "\n", "if", "norm_type", "==", "inf", ":", "\n", "        ", "total_norm", "=", "max", "(", "g", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "to", "(", "device", ")", "for", "g", "in", "iter_grad", "(", "parameters", ")", ")", "\n", "", "else", ":", "\n", "        ", "total_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "[", "torch", ".", "norm", "(", "g", ",", "norm_type", ")", ".", "to", "(", "device", ")", "for", "g", "in", "iter_grad", "(", "parameters", ")", "]", ")", ",", "norm_type", ")", "\n", "", "clip_coef", "=", "max_norm", "/", "(", "total_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "        ", "for", "p", "in", "parameters", ":", "\n", "            ", "p", ".", "grad", ".", "detach", "(", ")", ".", "mul_", "(", "clip_coef", ".", "to", "(", "p", ".", "grad", ".", "device", ")", ")", "\n", "", "", "return", "total_norm", "\n", "", ""]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.getmap": [[52, 56], ["getattr", "str"], "methods", ["None"], ["def", "getmap", "(", "self", ",", "dim", ")", ":", "\n", "        ", "'''return map associated with given dimension'''", "\n", "\n", "return", "getattr", "(", "self", ",", "'map'", "+", "str", "(", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.setmap": [[57, 62], ["setattr", "str"], "methods", ["None"], ["", "def", "setmap", "(", "self", ",", "dim", ",", "attr", ")", ":", "\n", "        ", "'''set map associated with given dimension to the given attribute'''", "\n", "\n", "setattr", "(", "self", ",", "'map'", "+", "str", "(", "dim", ")", ",", "attr", ")", "\n", "self", ".", "maps", "[", "dim", "-", "1", "]", "=", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.__init__": [[63, 78], ["torch.nn.Module.__init__", "enumerate", "len", "xd.TensorProduct.setmap"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.setmap"], ["", "def", "__init__", "(", "self", ",", "*", "maps", ")", ":", "\n", "        ", "'''\n        Args:\n            maps: any number of torch_butterfly.butterfly.Butterfly objects; also handles torch_butterfly.combine.TensorProduct objects\n        '''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "try", ":", "\n", "            ", "maps", "=", "[", "maps", "[", "0", "]", ".", "map1", ",", "maps", "[", "0", "]", ".", "map2", "]", "\n", "", "except", "AttributeError", ":", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "maps", "=", "[", "None", "]", "*", "len", "(", "maps", ")", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "maps", ")", ":", "\n", "            ", "self", ".", "setmap", "(", "i", "+", "1", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.forward": [[79, 84], ["enumerate", "m().transpose", "m", "m().transpose.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "for", "i", ",", "m", "in", "enumerate", "(", "self", ".", "maps", ")", ":", "\n", "            ", "input", "=", "m", "(", "input", ".", "transpose", "(", "-", "1", ",", "-", "i", "-", "1", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "i", "-", "1", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.device": [[85, 92], ["None"], "methods", ["None"], ["", "def", "device", "(", "self", ")", ":", "\n", "        ", "'''returns device associated with the first element in the product'''", "\n", "\n", "try", ":", "\n", "            ", "return", "self", ".", "map1", ".", "twiddle", ".", "device", "\n", "", "except", "nn", ".", "modules", ".", "module", ".", "ModuleAttributeError", ":", "\n", "            ", "return", "self", ".", "map1", ".", "twiddle4", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.get_fourier": [[155, 157], ["getattr"], "methods", ["None"], ["def", "get_fourier", "(", "self", ",", "kmatrix_name", ",", "*", "nd", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "'fourier_'", "+", "kmatrix_name", ")", "(", "*", "nd", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_K": [[158, 164], ["torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "diag_K", "(", "in_size", ",", "skip_interval", ")", ":", "\n", "\n", "        ", "diag", "=", "torch", ".", "zeros", "(", "in_size", ")", "\n", "diag", "[", ":", ":", "skip_interval", "]", "=", "1.0", "\n", "return", "diag", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_L": [[165, 175], ["torch.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "diag_L", "(", "in_size", ",", "kernel_size", ")", ":", "\n", "\n", "        ", "diag", "=", "torch", ".", "zeros", "(", "in_size", ")", "\n", "half", "=", "kernel_size", "//", "2", "\n", "diag", "[", ":", "half", "]", "=", "1.0", "\n", "diag", "[", "in_size", "-", "half", ":", "]", "=", "1.0", "\n", "if", "2", "*", "half", "<", "kernel_size", ":", "\n", "            ", "diag", "[", "half", "]", "=", "1.0", "\n", "", "return", "diag", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_M": [[176, 182], ["torch.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "diag_M", "(", "in_size", ",", "crop_init", ")", ":", "\n", "\n", "        ", "diag", "=", "torch", ".", "ones", "(", "in_size", ")", "\n", "diag", "[", "crop_init", "]", "=", "0.0", "\n", "return", "diag", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._perturb": [[183, 187], ["torch.normal"], "methods", ["None"], ["", "def", "_perturb", "(", "self", ",", "tensor", ",", "perturb", ")", ":", "\n", "        ", "'''perturbs tensor with random noise of the specified deviation'''", "\n", "\n", "return", "tensor", "+", "torch", ".", "normal", "(", "0.", ",", "perturb", ",", "tensor", ".", "shape", ")", "if", "perturb", "else", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._circular_pad": [[188, 194], ["zip", "range", "torch.nn.functional.pad().roll", "torch.nn.functional.pad", "torch.nn.functional.pad().roll.flip"], "methods", ["None"], ["", "def", "_circular_pad", "(", "self", ",", "weight", ")", ":", "\n", "        ", "'''circularly pads filter weights to apply to input via FFT'''", "\n", "\n", "for", "dim", ",", "n", ",", "k", ",", "p", "in", "zip", "(", "range", "(", "1", ",", "self", ".", "dims", "+", "1", ")", ",", "self", ".", "nd", ",", "self", ".", "kd", ",", "self", ".", "pd", ")", ":", "\n", "            ", "weight", "=", "F", ".", "pad", "(", "weight", ".", "flip", "(", "[", "-", "dim", "]", ")", ",", "(", "*", "[", "0", "]", "*", "(", "2", "*", "dim", "-", "1", ")", ",", "n", "-", "k", ")", ")", ".", "roll", "(", "-", "p", ",", "dims", "=", "-", "dim", ")", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._atrous_permutation": [[195, 204], ["torch.arange().roll().flip", "range", "perm[].flip", "torch.arange().roll().flip.roll", "torch.arange().roll", "perm[].item", "perm[].item", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_atrous_permutation", "(", "n", ",", "k", ",", "d", ")", ":", "\n", "        ", "'''computes permutation of circularly padded filter weights to match circularly padded dilated filter weights'''", "\n", "\n", "perm", "=", "torch", ".", "arange", "(", "n", ")", ".", "roll", "(", "k", "//", "2", "-", "k", ")", ".", "flip", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "k", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "perm", "[", "i", "]", ",", "perm", "[", "d", "*", "i", "]", "=", "perm", "[", "d", "*", "i", "]", ".", "item", "(", ")", ",", "perm", "[", "i", "]", ".", "item", "(", ")", "\n", "", "perm", "[", ":", "d", "*", "(", "k", "-", "1", ")", "+", "1", "]", "=", "perm", "[", ":", "d", "*", "(", "k", "-", "1", ")", "+", "1", "]", ".", "flip", "(", "0", ")", "\n", "return", "perm", ".", "roll", "(", "-", "(", "(", "d", "*", "(", "k", "-", "1", ")", "+", "1", ")", "//", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._offset_insert": [[205, 213], ["zip", "int", "slice", "slice", "slice", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_offset_insert", "(", "output", ",", "kernel", ")", ":", "\n", "        ", "'''inserts filter into the middle of a larger filter'''", "\n", "\n", "sizes", "=", "kernel", ".", "shape", "[", "2", ":", "]", "\n", "offsets", "=", "[", "(", "o", "-", "k", "+", "int", "(", "o", "%", "2", "==", "1", ")", ")", "//", "2", "for", "o", ",", "k", "in", "zip", "(", "output", ".", "shape", "[", "2", ":", "]", ",", "sizes", ")", "]", "\n", "output", "[", "[", "slice", "(", "None", ")", ",", "slice", "(", "None", ")", "]", "+", "[", "slice", "(", "offset", ",", "offset", "+", "size", ")", "for", "offset", ",", "size", "in", "zip", "(", "offsets", ",", "sizes", ")", "]", "]", "=", "kernel", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_size": [[214, 222], ["[].split", "tuple", "len", "len", "int", "arch_init.split", "reversed"], "methods", ["None"], ["", "def", "_parse_size", "(", "self", ",", "arch_init", ")", ":", "\n", "\n", "        ", "if", "'_'", "in", "arch_init", ":", "\n", "            ", "xsplit", "=", "arch_init", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'x'", ")", "\n", "if", "len", "(", "xsplit", ")", "!=", "self", ".", "dims", ":", "\n", "                ", "assert", "len", "(", "xsplit", ")", "==", "1", ",", "\"cannot parse architecture initialization\"", "\n", "xsplit", "=", "xsplit", "[", ":", "1", "]", "*", "self", ".", "dims", "\n", "", "return", "tuple", "(", "int", "(", "k", ")", "for", "k", "in", "reversed", "(", "xsplit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_init": [[223, 264], ["xd.int2tuple", "list", "xd.XD._parse_size", "reversed", "any", "any", "tuple", "xd.XD._parse_init", "zip", "max", "reversed", "reversed", "unpadding.append", "zip", "xd.int2tuple", "zip", "reversed", "reversed", "int", "int"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_size", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_init", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple"], ["", "", "def", "_parse_init", "(", "self", ",", "arch_init", ",", "max_kernel_size", ",", "padding", ",", "arch_shape", ",", "dilation_init", ",", "_swap", ")", ":", "\n", "\n", "        ", "max_kernel_size", "=", "int2tuple", "(", "max_kernel_size", ",", "length", "=", "self", ".", "dims", ")", "\n", "kd_init", "=", "list", "(", "reversed", "(", "max_kernel_size", ")", ")", "\n", "skips", "=", "[", "1", "]", "*", "self", ".", "dims", "\n", "\n", "size", "=", "self", ".", "_parse_size", "(", "arch_init", ")", "\n", "if", "not", "size", "is", "None", ":", "\n", "            ", "if", "'conv'", "in", "arch_init", "or", "'pool'", "in", "arch_init", ":", "\n", "                ", "kd_init", "=", "size", "\n", "max_kernel_size", "=", "tuple", "(", "max", "(", "k", ",", "s", ")", "for", "k", ",", "s", "in", "zip", "(", "max_kernel_size", ",", "kd_init", ")", ")", "\n", "", "else", ":", "\n", "                ", "skips", "=", "size", "\n", "\n", "", "", "if", "_swap", ":", "\n", "            ", "unpadding", "=", "self", ".", "unpadding", "\n", "", "elif", "arch_init", "==", "arch_shape", "or", "arch_shape", "is", "None", ":", "\n", "            ", "if", "padding", "is", "None", "and", "(", "arch_init", "==", "'ortho'", "or", "'skip'", "in", "arch_init", ")", ":", "\n", "                ", "unpadding", "=", "[", "(", "0", ",", "n", ")", "for", "n", "in", "self", ".", "in_size", "]", "\n", "", "else", ":", "\n", "                ", "unpadding", "=", "[", "]", "\n", "for", "d", ",", "k", ",", "m", ",", "n", ",", "p", "in", "zip", "(", "reversed", "(", "dilation_init", ")", ",", "\n", "reversed", "(", "kd_init", ")", ",", "\n", "max_kernel_size", ",", "\n", "self", ".", "in_size", ",", "\n", "(", "(", "d", "*", "(", "s", "-", "1", ")", "+", "1", ")", "//", "2", "for", "s", ",", "d", "in", "zip", "(", "reversed", "(", "kd_init", ")", ",", "reversed", "(", "dilation_init", ")", ")", ")", "if", "padding", "is", "None", "else", "int2tuple", "(", "padding", ",", "length", "=", "self", ".", "dims", ")", ")", ":", "\n", "# handles padding to match corresponding PyTorch modules", "\n", "                    ", "a", ",", "b", "=", "(", "d", "*", "(", "k", "-", "1", ")", ")", "//", "2", "-", "p", ",", "n", "-", "(", "d", "*", "(", "k", "-", "1", ")", "+", "1", ")", "//", "2", "+", "p", "\n", "if", "d", ">", "1", "and", "(", "m", "-", "k", ")", "%", "2", ":", "\n", "                        ", "a", ",", "b", "=", "a", "+", "1", "-", "2", "*", "int", "(", "not", "k", "%", "2", ")", ",", "b", "+", "1", "-", "2", "*", "int", "(", "not", "k", "%", "2", ")", "\n", "", "assert", "0", "<=", "a", "<=", "b", "<=", "n", ",", "\"invalid padding\"", "\n", "unpadding", ".", "append", "(", "(", "a", ",", "b", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "unpadding", "=", "self", ".", "_parse_init", "(", "arch_shape", ",", "max_kernel_size", ",", "padding", ",", "arch_shape", ",", "dilation_init", ",", "_swap", ")", "\n", "\n", "", "return", "max_kernel_size", ",", "kd_init", ",", "skips", ",", "any", "(", "name", "in", "arch_init", "for", "name", "in", "[", "'conv'", ",", "'pool'", ",", "'skip'", "]", ")", ",", "any", "(", "name", "in", "arch_init", "for", "name", "in", "[", "'pool'", ",", "'skip'", "]", ")", ",", "unpadding", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.__init__": [[265, 432], ["slice", "xd.int2tuple", "xd.int2tuple", "tuple", "xd.int2tuple", "tuple", "xd.XD._parse_init", "tuple", "tuple", "tuple", "xd.int2tuple", "min", "zip", "xd.XD._offset_insert", "xd.XD.to", "torch.nn.Module.__init__", "len", "xd.int2tuple", "tuple", "tuple", "reversed", "reversed", "reversed", "all", "torch.nn.Sequential", "torch.nn.Parameter", "weight_init", "torch.nn.Parameter", "int", "int", "xd.XD.register_buffer", "xd.XD.register_buffer", "xd.XD.register_buffer", "xd.XD.register_buffer", "xd.XD.register_buffer", "torch.eye", "xd.int2tuple", "setattr", "torch.zeros", "xd.XD.to", "xd.XD.register_parameter", "xd.XD.to", "xd.XD.register_parameter", "xd.XD.device", "type", "sum", "xd.int2tuple", "xd.AvgPool", "torch.Tensor", "xd.XD._offset_insert", "type", "xd.XD.r2c", "xd.XD.r2c", "xd.XD.r2c", "getattr", "xd.TensorProduct", "xd.XD.get_fourier", "zip", "range", "torch.ones", "xd.XD.get_fourier", "xd.XD.", "xd.XD.r2c", "xd.XD.r2c", "torch.nn.Parameter", "xd.XD.r2c", "torch.eye", "xd.XD.r2c", "xd.XD.r2c", "xd.XD.r2c", "torch.nn.Parameter", "math.ceil", "type", "weight.data.to", "torch.ones", "torch.ones", "torch.zeros", "any", "max", "range", "xd.XD.getmap().twiddle.data[].to", "xd.TensorProduct.setmap", "torch.ones", "numpy.prod", "xd.XD.r2c", "torch.zeros", "xd.XD.r2c", "xd.XD.r2c", "torch.Tensor", "torch.zeros", "torch.ones", "torch.Tensor", "torch.Tensor", "zip", "math.log2", "xd.XD.diag_K", "xd.XD.diag_M", "torch_butterfly.combine.diagonal_butterfly().twiddle.data.to", "xd.TensorProduct.device", "TensorProduct.getmap().to_base4", "xd.XD._circular_pad", "torch.cat", "torch.zeros", "zip", "torch.zeros", "xd.XD.diag_L", "zip", "zip", "torch_butterfly.Butterfly", "xd.XD._perturb", "xd.TensorProduct.device", "xd.XD.diag_L", "float", "zip", "xd.TensorProduct.getmap", "xd.TensorProduct.getmap", "zip", "torch.ones", "xd.XD.flatten", "numpy.prod", "torch.ones", "xd.TensorProduct.getmap", "torch_butterfly.combine.diagonal_butterfly", "xd.XD.getmap", "torch_butterfly.permutation.perm2butterfly", "xd.XD._atrous_permutation"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_init", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._offset_insert", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.AvgPool", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._offset_insert", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.get_fourier", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.get_fourier", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.setmap", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_K", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_M", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._circular_pad", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_L", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._perturb", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.diag_L", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.getmap", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.getmap", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.getmap", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.TensorProduct.getmap", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._atrous_permutation"], ["", "def", "__init__", "(", "self", ",", "in_size", ",", "in_channels", ",", "out_channels", ",", "arch_init", "=", "'ortho'", ",", "weight_init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "kmatrix_depth", "=", "1", ",", "base", "=", "2", ",", "max_kernel_size", "=", "1", ",", "padding", "=", "None", ",", "stride", "=", "1", ",", "arch_shape", "=", "None", ",", "weight", "=", "None", ",", "global_biasing", "=", "'additive'", ",", "channel_gating", "=", "'complete'", ",", "perturb", "=", "0.0", ",", "crop_init", "=", "slice", "(", "0", ")", ",", "dilation_init", "=", "1", ",", "padding_mode", "=", "'circular'", ",", "bias", "=", "None", ",", "checkpoint", "=", "False", ",", "fourier_position", "=", "-", "1", ",", "_swap", "=", "False", ")", ":", "\n", "        ", "'''\n        Args:\n            in_size: input size\n            in_channels: number of input channels\n            out_channels: number of output_channels\n            arch_init: 'ortho' or $OPTYPE (e.g. 'skip') or $OPTYPE'_'$KERNELSIZE (e.g. 'conv_3x3')\n            weight_init: function that initializes weight tensor\n            kmatrix_depth: depth of each kmatrix\n            base: base to use for kmatrix (must be 2 or 4)\n            max_kernel_size: maximum kernel size\n            padding: determines padding; by default sets padding according to arch_init \n            stride: governs subsampling\n            arch_shape: architecture that determines the output shape; uses arch_init by default\n            weight: model weights\n            global_biasing: 'additive' or 'interp' or False\n            channel_gating: 'complete' or 'interp' or False\n            perturb: scale of perturbation to arch params\n            crop_init: input slice(s) to crop\n            dilation_init: kernel dilation at initialization\n            padding_mode: 'circular' or 'zeros'; for 'zeros' will adjust in_size as needed\n            bias: optional bias parameter\n            checkpoint: apply checkpointing to kmatrix operations\n            fourier_position: where to put each Fourier matrix when warm starting; -1 applies it last\n        '''", "\n", "\n", "if", "not", "_swap", ":", "\n", "# '_swap' variable allows for fast re-initialization of a module; useful for computing metrics", "\n", "            ", "super", "(", "XD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_args", "=", "(", "in_size", ",", "in_channels", ",", "out_channels", ")", "\n", "self", ".", "_init_kwargs", "=", "{", "'arch_shape'", ":", "arch_init", ",", "\n", "'padding'", ":", "padding", ",", "\n", "'crop_init'", ":", "crop_init", ",", "\n", "'dilation_init'", ":", "dilation_init", ",", "\n", "'padding_mode'", ":", "padding_mode", ",", "\n", "'checkpoint'", ":", "checkpoint", ",", "\n", "'fourier_position'", ":", "fourier_position", "}", "\n", "", "assert", "base", "in", "{", "2", ",", "4", "}", ",", "\"'base' must be 2 or 4\"", "\n", "assert", "global_biasing", "in", "{", "'additive'", ",", "'interp'", ",", "False", "}", ",", "\"invalid value for 'global_biasing'\"", "\n", "assert", "channel_gating", "in", "{", "'complete'", ",", "'interp'", ",", "False", "}", ",", "\"invalid value for 'channel_gating'\"", "\n", "\n", "self", ".", "checkpoint", "=", "checkpoint", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "chan", "=", "(", "out_channels", ",", "in_channels", ")", "\n", "self", ".", "depth", "=", "int2tuple", "(", "kmatrix_depth", ",", "length", "=", "3", ")", "\n", "self", ".", "dims", "=", "2", "if", "type", "(", "in_size", ")", "==", "int", "else", "len", "(", "in_size", ")", "\n", "in_size", "=", "int2tuple", "(", "in_size", ",", "length", "=", "self", ".", "dims", ")", "\n", "if", "padding_mode", "==", "'zeros'", ":", "\n", "# increases effective input size if required due to zero-padding", "\n", "            ", "padding", "=", "int2tuple", "(", "0", "if", "padding", "is", "None", "else", "padding", ",", "length", "=", "self", ".", "dims", ")", "\n", "in_size", "=", "tuple", "(", "n", "+", "2", "*", "p", "for", "n", ",", "p", "in", "zip", "(", "in_size", ",", "padding", ")", ")", "\n", "self", ".", "zero_pad", "=", "tuple", "(", "sum", "(", "(", "[", "p", ",", "p", "]", "for", "p", "in", "padding", ")", ",", "[", "]", ")", ")", "\n", "padding", "=", "[", "0", "]", "*", "self", ".", "dims", "\n", "", "else", ":", "\n", "            ", "self", ".", "zero_pad", "=", "(", ")", "\n", "", "self", ".", "in_size", "=", "tuple", "(", "2", "**", "math", ".", "ceil", "(", "math", ".", "log2", "(", "n", ")", ")", "for", "n", "in", "in_size", ")", "\n", "crop_init", "=", "int2tuple", "(", "crop_init", ",", "length", "=", "self", ".", "dims", ")", "\n", "dilation_init", "=", "tuple", "(", "reversed", "(", "int2tuple", "(", "dilation_init", ",", "length", "=", "self", ".", "dims", ")", ")", ")", "\n", "self", ".", "max_kernel_size", ",", "kd_init", ",", "skips", ",", "fourier_init", ",", "diagonal_init", ",", "self", ".", "unpadding", "=", "self", ".", "_parse_init", "(", "arch_init", ",", "\n", "max_kernel_size", ",", "\n", "padding", ",", "\n", "arch_shape", ",", "\n", "dilation_init", ",", "\n", "_swap", ")", "\n", "zeroL", "=", "diagonal_init", "and", "global_biasing", "==", "'additive'", "\n", "self", ".", "nd", "=", "tuple", "(", "reversed", "(", "self", ".", "in_size", ")", ")", "\n", "self", ".", "kd", "=", "tuple", "(", "reversed", "(", "self", ".", "max_kernel_size", ")", ")", "\n", "self", ".", "pd", "=", "tuple", "(", "k", "//", "2", "for", "k", "in", "self", ".", "kd", ")", "\n", "self", ".", "stride", "=", "int2tuple", "(", "stride", ",", "length", "=", "self", ".", "dims", ")", "\n", "if", "self", ".", "dims", ">", "3", ":", "\n", "            ", "assert", "all", "(", "s", "==", "1", "for", "s", "in", "self", ".", "stride", ")", ",", "\"must have stride 1 if using >3 dims\"", "\n", "self", ".", "subsample", "=", "nn", ".", "Sequential", "(", ")", "# TODO: handle stride>1 for >3 dimensional XD-op", "\n", "", "else", ":", "\n", "            ", "self", ".", "subsample", "=", "AvgPool", "(", "self", ".", "dims", ")", "(", "kernel_size", "=", "[", "1", "]", "*", "self", ".", "dims", ",", "stride", "=", "self", ".", "stride", ")", "\n", "\n", "", "if", "not", "_swap", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ",", "in_channels", ",", "*", "self", ".", "max_kernel_size", ")", ")", "\n", "weight_init", "(", "self", ".", "weight", ")", "\n", "", "if", "not", "weight", "is", "None", ":", "\n", "            ", "if", "type", "(", "weight", ")", "==", "nn", ".", "Parameter", "and", "self", ".", "weight", ".", "shape", "==", "weight", ".", "shape", ":", "\n", "                ", "self", ".", "weight", "=", "weight", "\n", "", "else", ":", "\n", "                ", "self", ".", "_offset_insert", "(", "self", ".", "weight", ".", "data", ",", "weight", ".", "data", ".", "to", "(", "self", ".", "weight", ".", "device", ")", ")", "\n", "", "", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "bias", ")", "if", "type", "(", "bias", ")", "==", "torch", ".", "Tensor", "else", "bias", "\n", "\n", "channels", "=", "min", "(", "self", ".", "chan", ")", "\n", "inoff", ",", "outoff", "=", "int", "(", "0.5", "*", "(", "in_channels", "-", "channels", ")", ")", ",", "int", "(", "0.5", "*", "(", "out_channels", "-", "channels", ")", ")", "\n", "if", "not", "_swap", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'diag'", ",", "None", ",", "persistent", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'kron'", ",", "None", ",", "persistent", "=", "False", ")", "\n", "self", ".", "register_buffer", "(", "'_one'", ",", "self", ".", "r2c", "(", "torch", ".", "ones", "(", "1", ")", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_1'", ",", "self", ".", "r2c", "(", "torch", ".", "ones", "(", "self", ".", "chan", ")", ")", ")", "\n", "self", ".", "register_buffer", "(", "'_I'", ",", "self", ".", "r2c", "(", "torch", ".", "zeros", "(", "self", ".", "chan", ")", ")", ")", "\n", "self", ".", "_I", "[", "outoff", ":", "outoff", "+", "channels", ",", "inoff", ":", "inoff", "+", "channels", "]", "=", "torch", ".", "eye", "(", "channels", ")", "\n", "\n", "", "for", "(", "kmatrix_name", ",", "diags", ")", ",", "depth", ",", "fpos", "in", "zip", "(", "[", "(", "'K'", ",", "[", "self", ".", "diag_K", "(", "n", ",", "s", ")", "for", "n", ",", "s", "in", "zip", "(", "self", ".", "nd", ",", "skips", ")", "]", ")", ",", "# handles strides", "\n", "(", "'L'", ",", "[", "torch", ".", "zeros", "(", "n", ")", "if", "zeroL", "else", "self", ".", "diag_L", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "self", ".", "nd", ",", "kd_init", ")", "]", ")", ",", "# handles kernel size limits", "\n", "(", "'M'", ",", "[", "self", ".", "diag_M", "(", "n", ",", "c", ")", "for", "n", ",", "c", "in", "zip", "(", "self", ".", "nd", ",", "crop_init", ")", "]", ")", "]", ",", "# handles input cropping", "\n", "self", ".", "depth", ",", "\n", "int2tuple", "(", "fourier_position", ",", "length", "=", "3", ")", ")", ":", "\n", "            ", "if", "_swap", ":", "\n", "                ", "kmatrix", "=", "getattr", "(", "self", ",", "kmatrix_name", ")", "\n", "", "else", ":", "\n", "                ", "kmatrix_kwargs", "=", "{", "\n", "'bias'", ":", "False", ",", "\n", "'increasing_stride'", ":", "kmatrix_name", "==", "'K'", ",", "\n", "'complex'", ":", "True", ",", "\n", "'init'", ":", "'identity'", "if", "fourier_init", "else", "arch_init", ",", "\n", "'nblocks'", ":", "depth", ",", "\n", "}", "\n", "kmatrix", "=", "TensorProduct", "(", "*", "(", "Butterfly", "(", "n", ",", "n", ",", "**", "kmatrix_kwargs", ")", "for", "n", "in", "self", ".", "nd", ")", ")", "\n", "", "if", "fourier_init", ":", "\n", "                ", "fourier_kmatrix", "=", "self", ".", "get_fourier", "(", "kmatrix_name", ",", "\n", "*", "self", ".", "nd", ",", "\n", "diags", "=", "[", "self", ".", "_perturb", "(", "diag", "if", "d", "==", "1", "else", "torch", ".", "ones", "(", "diag", ".", "shape", ")", ",", "perturb", ")", "for", "d", ",", "diag", "in", "zip", "(", "dilation_init", ",", "diags", ")", "]", ")", "\n", "if", "kmatrix_name", "==", "'L'", "and", "any", "(", "d", ">", "1", "for", "d", "in", "dilation_init", ")", ":", "\n", "                    ", "fpos", "=", "max", "(", "2", ",", "depth", "+", "fpos", "if", "fpos", "<", "0", "else", "fpos", ")", "\n", "", "for", "dim", ",", "d", ",", "k", ",", "n", "in", "zip", "(", "range", "(", "1", ",", "self", ".", "dims", "+", "1", ")", ",", "dilation_init", ",", "self", ".", "kd", ",", "self", ".", "nd", ")", ":", "\n", "                    ", "if", "kmatrix_name", "==", "'L'", "and", "d", ">", "1", ":", "\n", "# handles initialization of middle K-matrix for the case of dilated convs; requires kmatrix_depth >= 3", "\n", "                        ", "assert", "depth", ">=", "3", ",", "\"using dilation > 1 requires depth at least (1, 3, 1)\"", "\n", "kmatrix", ".", "getmap", "(", "dim", ")", ".", "twiddle", ".", "data", "[", ":", ",", ":", "2", "]", "=", "diagonal_butterfly", "(", "perm2butterfly", "(", "self", ".", "_atrous_permutation", "(", "n", ",", "k", ",", "d", ")", ",", "complex", "=", "True", ")", ",", "\n", "diags", "[", "dim", "-", "1", "]", ",", "diag_first", "=", "True", ")", ".", "twiddle", ".", "data", ".", "to", "(", "kmatrix", ".", "device", "(", ")", ")", "\n", "", "kmatrix", ".", "getmap", "(", "dim", ")", ".", "twiddle", ".", "data", "[", "0", ",", "fpos", "]", "=", "fourier_kmatrix", ".", "getmap", "(", "dim", ")", ".", "twiddle", ".", "data", "[", "0", ",", "0", "]", ".", "to", "(", "kmatrix", ".", "device", "(", ")", ")", "\n", "", "", "if", "base", "==", "4", ":", "\n", "                ", "for", "dim", "in", "range", "(", "1", ",", "self", ".", "dims", "+", "1", ")", ":", "\n", "                    ", "kmatrix", ".", "setmap", "(", "dim", ",", "kmatrix", ".", "getmap", "(", "dim", ")", ".", "to_base4", "(", ")", ")", "\n", "", "", "setattr", "(", "self", ",", "kmatrix_name", ",", "kmatrix", ")", "\n", "\n", "", "self", ".", "global_biasing", "=", "global_biasing", "\n", "filt", "=", "self", ".", "_offset_insert", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "*", "self", ".", "max_kernel_size", ")", ",", "\n", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "kd_init", ")", "/", "np", ".", "prod", "(", "kd_init", ")", "if", "'pool'", "in", "arch_init", "else", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "[", "1", "]", "*", "self", ".", "dims", ")", ")", "\n", "if", "self", ".", "global_biasing", "==", "'additive'", ":", "\n", "            ", "if", "diagonal_init", ":", "\n", "                ", "L", "=", "self", ".", "get_fourier", "(", "'L'", ",", "*", "self", ".", "nd", ",", "diags", "=", "[", "self", ".", "diag_L", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "self", ".", "nd", ",", "kd_init", ")", "]", ")", "\n", "b", "=", "L", "(", "self", ".", "r2c", "(", "self", ".", "_circular_pad", "(", "filt", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "b", "=", "self", ".", "r2c", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "*", "self", ".", "in_size", ")", ")", "\n", "", "", "elif", "self", ".", "global_biasing", "==", "'interp'", ":", "\n", "            ", "if", "diagonal_init", ":", "\n", "                ", "b", "=", "self", ".", "r2c", "(", "torch", ".", "cat", "(", "(", "torch", ".", "ones", "(", "1", ")", ",", "filt", ".", "flatten", "(", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "b", "=", "self", ".", "r2c", "(", "torch", ".", "zeros", "(", "1", "+", "np", ".", "prod", "(", "self", ".", "max_kernel_size", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "b", "=", "self", ".", "r2c", "(", "torch", ".", "Tensor", "(", "0", ")", ")", "\n", "", "if", "_swap", ":", "\n", "            ", "self", ".", "b", ".", "data", "=", "b", ".", "to", "(", "self", ".", "b", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'b'", ",", "nn", ".", "Parameter", "(", "b", ")", ")", "\n", "\n", "", "self", ".", "channel_gating", "=", "channel_gating", "\n", "if", "self", ".", "channel_gating", "==", "'complete'", ":", "\n", "            ", "if", "diagonal_init", ":", "\n", "                ", "C", "=", "self", ".", "r2c", "(", "torch", ".", "zeros", "(", "self", ".", "chan", ")", ")", "\n", "C", "[", "outoff", ":", "outoff", "+", "channels", ",", "inoff", ":", "inoff", "+", "channels", "]", "=", "torch", ".", "eye", "(", "channels", ")", "\n", "", "else", ":", "\n", "                ", "C", "=", "self", ".", "r2c", "(", "torch", ".", "ones", "(", "self", ".", "chan", ")", ")", "\n", "", "", "elif", "self", ".", "channel_gating", "==", "'interp'", ":", "\n", "            ", "C", "=", "self", ".", "r2c", "(", "torch", ".", "Tensor", "(", "[", "float", "(", "diagonal_init", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "C", "=", "self", ".", "r2c", "(", "torch", ".", "Tensor", "(", "0", ")", ")", "\n", "", "if", "_swap", ":", "\n", "            ", "self", ".", "C", ".", "data", "=", "C", ".", "to", "(", "self", ".", "C", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'C'", ",", "nn", ".", "Parameter", "(", "C", ")", ")", "\n", "\n", "", "self", ".", "to", "(", "self", ".", "device", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._checkpoint": [[433, 438], ["func", "torch.utils.checkpoint.checkpoint"], "methods", ["None"], ["", "def", "_checkpoint", "(", "self", ",", "func", ",", "*", "args", ")", ":", "\n", "\n", "        ", "if", "self", ".", "checkpoint", ":", "\n", "            ", "return", "torch_checkpoint", ".", "checkpoint", "(", "func", ",", "*", "args", ")", "\n", "", "return", "func", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._diag": [[439, 468], ["xd.XD._checkpoint", "xd.XD._checkpoint", "diag.permute.permute.permute", "diag.permute.permute.permute", "xd.XD._circular_pad", "xd.XD.r2c", "xd.XD._circular_pad", "range", "range", "xd.XD.C.flatten().reshape", "diag.permute.permute.flatten", "xd.XD.b[].reshape", "diag.permute.permute.flatten", "xd.XD.C.flatten"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._checkpoint", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._checkpoint", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._circular_pad", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._circular_pad"], ["", "def", "_diag", "(", "self", ",", "weight", "=", "None", ",", "_batch", "=", "False", ")", ":", "\n", "\n", "        ", "if", "weight", "is", "None", "and", "not", "self", ".", "training", ":", "\n", "# uses cached diagonal matrix in evaluation mode", "\n", "            ", "return", "self", ".", "diag", "\n", "", "weight", "=", "self", ".", "weight", "if", "weight", "is", "None", "else", "weight", "\n", "\n", "if", "self", ".", "global_biasing", "==", "'interp'", ":", "\n", "            ", "diag", "=", "self", ".", "_checkpoint", "(", "self", ".", "L", ",", "self", ".", "_circular_pad", "(", "(", "self", ".", "_one", "-", "self", ".", "b", "[", "0", "]", ")", "*", "weight", "+", "self", ".", "b", "[", "0", "]", "*", "self", ".", "b", "[", "1", ":", "]", ".", "reshape", "(", "1", ",", "1", ",", "*", "self", ".", "max_kernel_size", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "diag", "=", "self", ".", "_checkpoint", "(", "self", ".", "L", ",", "self", ".", "r2c", "(", "self", ".", "_circular_pad", "(", "weight", ")", ")", ")", "\n", "if", "self", ".", "global_biasing", "==", "'additive'", ":", "\n", "                ", "diag", "=", "diag", "+", "self", ".", "b", "\n", "\n", "", "", "if", "_batch", ":", "\n", "# handles the case where 'weight' is a batch of different weight filter Tensors; useful for 'averaged' metric", "\n", "            ", "diag", "=", "diag", ".", "permute", "(", "*", "range", "(", "1", ",", "3", "+", "self", ".", "dims", ")", ",", "0", ")", "\n", "dims", "=", "self", ".", "dims", "+", "1", "\n", "", "else", ":", "\n", "            ", "dims", "=", "self", ".", "dims", "\n", "\n", "", "if", "self", ".", "channel_gating", "==", "'complete'", ":", "\n", "            ", "diag", "=", "(", "self", ".", "C", ".", "flatten", "(", ")", ".", "reshape", "(", "-", "1", ",", "*", "[", "1", "]", "*", "dims", ")", "*", "diag", ".", "flatten", "(", "0", ",", "1", ")", ")", ".", "reshape", "(", "diag", ".", "shape", ")", "\n", "", "elif", "self", ".", "channel_gating", "==", "'interp'", ":", "\n", "            ", "diag", "=", "(", "(", "(", "self", ".", "_one", "-", "self", ".", "C", ")", "*", "self", ".", "_1", "+", "self", ".", "C", "*", "self", ".", "_I", ")", ".", "flatten", "(", ")", ".", "reshape", "(", "-", "1", ",", "*", "[", "1", "]", "*", "dims", ")", "*", "diag", ".", "flatten", "(", "0", ",", "1", ")", ")", ".", "reshape", "(", "diag", ".", "shape", ")", "\n", "\n", "", "if", "_batch", ":", "\n", "            ", "return", "diag", ".", "permute", "(", "-", "1", ",", "*", "range", "(", "2", "+", "self", ".", "dims", ")", ")", "\n", "", "return", "diag", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.train": [[469, 477], ["xd.XD.children", "xd.XD._diag", "module.train"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._diag", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "'''computes cached diagonal matrix before entering evaluation mode'''", "\n", "\n", "self", ".", "diag", "=", "None", "if", "mode", "else", "self", ".", "_diag", "(", ")", "\n", "self", ".", "training", "=", "mode", "\n", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "module", ".", "train", "(", "mode", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.forward": [[478, 499], ["torch.nn.functional.pad", "zip", "torch.nn.functional.pad", "xd.XD._checkpoint", "xd.XD._diag", "torch_butterfly.complex_utils.complex_matmul().permute", "xd.XD.c2r", "xd.XD.subsample", "unpad.append", "xd.XD.r2c", "xd.XD._checkpoint", "xd.XD.bias.reshape", "slice", "slice", "slice", "torch_butterfly.complex_utils.complex_matmul", "range", "xd.XD.permute", "xd.XD.permute", "range", "range"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._checkpoint", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._diag", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "F", ".", "pad", "(", "x", ",", "self", ".", "zero_pad", ")", "\n", "\n", "pad", ",", "unpad", "=", "[", "]", ",", "[", "slice", "(", "None", ")", ",", "slice", "(", "None", ")", "]", "\n", "for", "xn", ",", "n", ",", "(", "a", ",", "b", ")", "in", "zip", "(", "x", ".", "shape", "[", "2", ":", "]", ",", "self", ".", "in_size", ",", "self", ".", "unpadding", ")", ":", "\n", "            ", "p1", "=", "(", "n", "-", "xn", ")", "//", "2", "\n", "p2", "=", "(", "n", "-", "xn", ")", "//", "2", "\n", "p1", "+=", "p1", "+", "p2", "<", "n", "-", "xn", "\n", "pad", "=", "[", "p1", ",", "p2", "]", "+", "pad", "\n", "unpad", ".", "append", "(", "slice", "(", "a", "+", "p1", ",", "b", "-", "p2", ")", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "x", ",", "pad", ")", "\n", "\n", "x", "=", "self", ".", "_checkpoint", "(", "self", ".", "M", ",", "self", ".", "r2c", "(", "x", ")", ")", "\n", "diag", "=", "self", ".", "_diag", "(", "weight", "=", "weight", ")", "\n", "x", "=", "complex_matmul", "(", "x", ".", "permute", "(", "*", "range", "(", "2", ",", "2", "+", "self", ".", "dims", ")", ",", "0", ",", "1", ")", ",", "diag", ".", "permute", "(", "*", "range", "(", "2", ",", "2", "+", "self", ".", "dims", ")", ",", "1", ",", "0", ")", ")", ".", "permute", "(", "-", "2", ",", "-", "1", ",", "*", "range", "(", "self", ".", "dims", ")", ")", "\n", "x", "=", "self", ".", "c2r", "(", "self", ".", "_checkpoint", "(", "self", ".", "K", ",", "x", ")", ")", "\n", "x", "=", "self", ".", "subsample", "(", "x", "[", "unpad", "]", ")", "\n", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "return", "x", "+", "self", ".", "bias", ".", "reshape", "(", "1", ",", "*", "self", ".", "bias", ".", "shape", ",", "*", "[", "1", "]", "*", "self", ".", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._kron": [[500, 508], ["torch.eye().to", "xd.XD.r2c", "xd.XD.device", "torch.kron", "torch.kron.reshape", "torch.eye", "torch.eye().to", "numpy.prod", "xd.XD.device", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device"], ["", "def", "_kron", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "kron", "is", "None", ":", "\n", "            ", "I", "=", "torch", ".", "eye", "(", "self", ".", "in_size", "[", "0", "]", ")", ".", "to", "(", "self", ".", "device", "(", ")", ")", "\n", "for", "size", "in", "self", ".", "in_size", "[", "1", ":", "]", ":", "\n", "                ", "I", "=", "torch", ".", "kron", "(", "I", ",", "torch", ".", "eye", "(", "size", ")", ".", "to", "(", "self", ".", "device", "(", ")", ")", ")", "\n", "", "self", ".", "kron", "=", "self", ".", "r2c", "(", "I", ".", "reshape", "(", "np", ".", "prod", "(", "self", ".", "in_size", ")", ",", "*", "self", ".", "in_size", ")", ")", "\n", "", "return", "self", ".", "kron", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._kmatrix_expansion": [[509, 520], ["numpy.prod", "min", "xd.XD._kron", "kmatrix", "torch.randperm", "numpy.sqrt", "xd.XD._kron"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._kron", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._kron"], ["", "def", "_kmatrix_expansion", "(", "self", ",", "*", "args", ",", "approx", "=", "None", ",", "perm", "=", "None", ")", ":", "\n", "        ", "'''computes (transpose of) expanded dense K-matrix, or a projection onto randomly sampled standard basis vectors'''", "\n", "\n", "prod", "=", "np", ".", "prod", "(", "self", ".", "in_size", ")", "\n", "approx", "=", "prod", "if", "approx", "is", "None", "else", "min", "(", "approx", ",", "prod", ")", "\n", "if", "approx", "==", "prod", "and", "perm", "is", "None", ":", "\n", "            ", "I", "=", "self", ".", "_kron", "(", ")", "\n", "", "else", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "prod", ")", "if", "perm", "is", "None", "else", "perm", "\n", "I", "=", "self", ".", "_kron", "(", ")", "[", "perm", "[", ":", "approx", "]", "]", "/", "np", ".", "sqrt", "(", "approx", ")", "\n", "", "return", "[", "kmatrix", "(", "I", ")", "for", "kmatrix", "in", "args", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion": [[521, 532], ["numpy.prod", "zip", "xd.XD._kmatrix_expansion", "xd._diag().reshape", "output.append", "list", "len", "xd.XD.c2r", "xd._diag", "xd.K", "M.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._kmatrix_expansion", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._diag"], ["", "def", "_op_expansion", "(", "self", ",", "*", "args", ",", "weight", "=", "None", ",", "_batch", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''computes expanded dense XD-op, or a projection onto randomly sampled standard basis vectors'''", "\n", "\n", "prod", "=", "np", ".", "prod", "(", "self", ".", "in_size", ")", "\n", "output", "=", "[", "]", "\n", "for", "xd", ",", "M", "in", "zip", "(", "args", ",", "self", ".", "_kmatrix_expansion", "(", "*", "(", "xd", ".", "M", "for", "xd", "in", "args", ")", ",", "**", "kwargs", ")", ")", ":", "\n", "            ", "chan", "=", "(", "[", "weight", ".", "shape", "[", "0", "]", "]", "if", "_batch", "else", "[", "]", ")", "+", "list", "(", "xd", ".", "chan", ")", "\n", "Lw", "=", "xd", ".", "_diag", "(", "weight", "=", "weight", ",", "_batch", "=", "_batch", ")", ".", "reshape", "(", "*", "chan", ",", "1", ",", "prod", ")", "\n", "LwM", "=", "(", "Lw", "*", "M", ".", "reshape", "(", "len", "(", "M", ")", ",", "prod", ")", ")", ".", "reshape", "(", "*", "chan", ",", "len", "(", "M", ")", ",", "*", "xd", ".", "in_size", ")", "\n", "output", ".", "append", "(", "self", ".", "c2r", "(", "xd", ".", "K", "(", "LwM", ")", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.penalty": [[533, 539], ["torch.sub().square().sum", "[].square().sum", "torch.sub().square", "[].square", "torch.sub", "xd.XD._op_expansion", "xd.XD._op_expansion"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion"], ["", "def", "penalty", "(", "self", ",", "other", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''returns half the squared Frobenius norm of the expanded XD-op'''", "\n", "\n", "if", "other", "is", "None", ":", "\n", "            ", "return", "0.5", "*", "self", ".", "_op_expansion", "(", "self", ",", "**", "kwargs", ")", "[", "0", "]", ".", "square", "(", ")", ".", "sum", "(", ")", "\n", "", "return", "0.5", "*", "torch", ".", "sub", "(", "*", "self", ".", "_op_expansion", "(", "self", ",", "other", ",", "**", "kwargs", ")", ")", ".", "square", "(", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.frobenius": [[540, 546], ["xd.special_dist", "[].norm", "xd.XD._op_expansion", "xd.XD._op_expansion"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.special_dist", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion"], ["", "def", "frobenius", "(", "self", ",", "other", "=", "None", ",", "relative", "=", "False", ",", "scaled", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''returns Frobenius norm of the expanded XD-op'''", "\n", "\n", "if", "other", "is", "None", ":", "\n", "            ", "return", "self", ".", "_op_expansion", "(", "self", ",", "**", "kwargs", ")", "[", "0", "]", ".", "norm", "(", ")", "\n", "", "return", "special_dist", "(", "*", "self", ".", "_op_expansion", "(", "self", ",", "other", ",", "**", "kwargs", ")", ",", "relative", "=", "relative", ",", "scaled", "=", "scaled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.averaged": [[547, 557], ["torch.randperm", "xd.XD._op_expansion", "_cache.extend", "sum", "len", "numpy.prod", "xd.XD._op_expansion", "xd.special_dist", "zip"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._op_expansion", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.special_dist"], ["", "def", "averaged", "(", "self", ",", "batched_weights", ",", "other", ",", "relative", "=", "False", ",", "scaled", "=", "False", ",", "_cache", "=", "[", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''returns Frobenius distance between XD-op and another compatible XD-op, averaged over different weights'''", "\n", "\n", "if", "_cache", ":", "\n", "            ", "expansion", "=", "[", "_cache", "[", "0", "]", ",", "self", ".", "_op_expansion", "(", "other", ",", "weight", "=", "batched_weights", ",", "perm", "=", "_cache", "[", "1", "]", ",", "**", "kwargs", ")", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "np", ".", "prod", "(", "self", ".", "in_size", ")", ")", "\n", "expansion", "=", "self", ".", "_op_expansion", "(", "self", ",", "other", ",", "weight", "=", "batched_weights", ",", "perm", "=", "perm", ",", "**", "kwargs", ")", "\n", "_cache", ".", "extend", "(", "[", "expansion", "[", "0", "]", ",", "perm", "]", ")", "\n", "", "return", "sum", "(", "special_dist", "(", "X", ",", "Y", ",", "relative", "=", "relative", ",", "scaled", "=", "scaled", ")", "for", "X", ",", "Y", "in", "zip", "(", "*", "expansion", ")", ")", "/", "len", "(", "batched_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.euclidean": [[558, 566], ["xd.complex_dist", "xd.complex_norm", "torch.cat", "torch.cat", "torch.cat", "p.data.flatten", "q.data.flatten", "p.data.flatten", "xd.XD.arch_params", "other.arch_params", "xd.XD.arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.complex_dist", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.complex_norm", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.arch_params", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.arch_params", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.arch_params"], ["", "def", "euclidean", "(", "self", ",", "other", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''returns Euclidean norm of architecture parameters'''", "\n", "\n", "if", "other", "is", "None", ":", "\n", "            ", "return", "complex_norm", "(", "torch", ".", "cat", "(", "[", "p", ".", "data", ".", "flatten", "(", ")", "for", "p", "in", "self", ".", "arch_params", "(", ")", "]", ")", ")", "\n", "", "return", "complex_dist", "(", "torch", ".", "cat", "(", "[", "p", ".", "data", ".", "flatten", "(", ")", "for", "p", "in", "self", ".", "arch_params", "(", ")", "]", ")", ",", "\n", "torch", ".", "cat", "(", "[", "q", ".", "data", ".", "flatten", "(", ")", "for", "q", "in", "other", ".", "arch_params", "(", ")", "]", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device": [[567, 571], ["xd.XD.K.device"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device"], ["", "def", "device", "(", "self", ")", ":", "\n", "        ", "'''returns device associated with the 'K' architecture parameter'''", "\n", "\n", "return", "self", ".", "K", ".", "device", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.distance_from": [[572, 625], ["XD().to.XD._parse_size", "xd_kwargs.update", "xd_kwargs.update", "XD().to", "torch.stack", "functools.partial", "list", "XD().to.XD.device", "torch.no_grad", "functools.partial.", "functools.partial", "itertools.product", "XD().to.XD.weight.to", "XD().to.XD", "XD().to.__init__", "min", "weight_init().to", "functools.partial", "XD().to.XD.device", "functools.partial.", "XD().to.XD.device", "range", "sum", "XD().to.to", "weight_init", "range", "xd.int2tuple", "XD().to.XD.device", "XD().to.XD.weight.clone", "str", "str"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._parse_size", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device"], ["", "def", "distance_from", "(", "self", ",", "src", "=", "'conv'", ",", "metric", "=", "'frobenius'", ",", "samples", "=", "40", ",", "weight_init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "relative", "=", "False", ",", "scaled", "=", "False", ",", "approx", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "'''\n        Args:\n            src: $OPTYPE (e.g. 'skip') or $OPTYPE'_'$KERNELSIZE (e.g. 'conv_3x3')\n            metric: 'frobenius' or 'euclidean' or 'averaged'\n            samples: number of samples to use for 'averaged'\n            weight_init: weight initialization method to use for 'averaged'\n            crop_init: passed to self.__init__\n            relative: computes relative error\n            scaled: computes error after allowing arbitrary scaling\n            approx: number of basis vectors for 'frobenius' and 'averaged' metrics\n            kwargs: passed to XD.__init__\n        Returns:\n            distance to closest named operation according to given metric\n        '''", "\n", "\n", "if", "metric", "==", "'averaged'", ":", "\n", "            ", "batched_weights", "=", "torch", ".", "stack", "(", "[", "weight_init", "(", "self", ".", "weight", ".", "clone", "(", ")", ")", ".", "to", "(", "self", ".", "device", "(", ")", ")", "for", "_", "in", "range", "(", "samples", ")", "]", ")", "\n", "cache", "=", "[", "]", "\n", "func", "=", "partial", "(", "self", ".", "averaged", ",", "batched_weights", ",", "relative", "=", "relative", ",", "scaled", "=", "scaled", ",", "approx", "=", "approx", ",", "_cache", "=", "cache", ",", "_batch", "=", "True", ")", "\n", "", "elif", "metric", "==", "'euclidean'", ":", "\n", "            ", "func", "=", "partial", "(", "self", ".", "euclidean", ",", "relative", "=", "relative", ",", "scaled", "=", "scaled", ")", "\n", "", "elif", "metric", "==", "'frobenius'", ":", "\n", "            ", "func", "=", "partial", "(", "self", ".", "frobenius", ",", "relative", "=", "relative", ",", "scaled", "=", "scaled", ",", "approx", "=", "approx", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "size", "=", "self", ".", "_parse_size", "(", "src", ")", "\n", "sizes", "=", "list", "(", "product", "(", "*", "(", "range", "(", "1", ",", "k", "+", "1", ")", "for", "k", "in", "self", ".", "kd", ")", ")", ")", "if", "size", "is", "None", "else", "[", "size", "]", "\n", "\n", "xd_kwargs", "=", "{", "\n", "'kmatrix_depth'", ":", "self", ".", "depth", "if", "metric", "==", "'euclidean'", "else", "(", "1", ",", "3", ",", "1", ")", "if", "sum", "(", "int2tuple", "(", "self", ".", "_init_kwargs", "[", "'dilation_init'", "]", ",", "length", "=", "self", ".", "dims", ")", ")", ">", "self", ".", "dims", "else", "1", ",", "\n", "'base'", ":", "self", ".", "base", "if", "metric", "==", "'euclidean'", "else", "2", ",", "\n", "'max_kernel_size'", ":", "self", ".", "max_kernel_size", ",", "\n", "'stride'", ":", "self", ".", "stride", ",", "\n", "'weight'", ":", "self", ".", "weight", ".", "to", "(", "self", ".", "device", "(", ")", ")", "if", "metric", "==", "'frobenius'", "and", "'conv'", "in", "src", "else", "None", ",", "\n", "'global_biasing'", ":", "self", ".", "global_biasing", ",", "\n", "'channel_gating'", ":", "self", ".", "channel_gating", ",", "\n", "}", "\n", "xd_kwargs", ".", "update", "(", "self", ".", "_init_kwargs", ")", "\n", "xd_kwargs", ".", "update", "(", "kwargs", ")", "\n", "xd", "=", "XD", "(", "*", "self", ".", "_init_args", ",", "\n", "arch_init", "=", "'_'", ".", "join", "(", "[", "src", ",", "'x'", ".", "join", "(", "str", "(", "s", ")", "for", "s", "in", "sizes", "[", "0", "]", ")", "]", ")", ",", "\n", "**", "xd_kwargs", ")", ".", "to", "(", "self", ".", "device", "(", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "dist", "=", "func", "(", "xd", ",", "**", "kwargs", ")", "\n", "for", "size", "in", "sizes", ":", "\n", "                ", "xd", ".", "__init__", "(", "*", "self", ".", "_init_args", ",", "\n", "arch_init", "=", "'_'", ".", "join", "(", "[", "src", ",", "'x'", ".", "join", "(", "str", "(", "s", ")", "for", "s", "in", "size", ")", "]", ")", ",", "\n", "_swap", "=", "not", "(", "self", ".", "base", "==", "4", "and", "metric", "==", "'euclidean'", ")", ",", "# TODO: handle base 4 swapping for the Euclidean metric", "\n", "**", "xd_kwargs", ")", "\n", "dist", "=", "min", "(", "dist", ",", "func", "(", "xd", ".", "to", "(", "self", ".", "device", "(", ")", ")", ",", "**", "kwargs", ")", ")", "\n", "", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.is_architectural": [[626, 630], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "is_architectural", "(", "n", ")", ":", "\n", "\n", "        ", "return", "not", "(", "'weight'", "in", "n", "or", "n", "==", "'bias'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.named_arch_params": [[631, 634], ["xd.XD.named_parameters", "xd.XD.is_architectural"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.is_architectural"], ["", "def", "named_arch_params", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "self", ".", "is_architectural", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.arch_params": [[635, 638], ["xd.XD.named_arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "def", "arch_params", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_arch_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.named_model_weights": [[639, 642], ["xd.XD.named_parameters", "xd.XD.is_architectural"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.is_architectural"], ["", "def", "named_model_weights", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "not", "self", ".", "is_architectural", "(", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.model_weights": [[643, 646], ["xd.XD.named_model_weights"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_model_weights"], ["", "def", "model_weights", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_model_weights", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.complex_norm": [[21, 25], ["torch.sqrt", "X.real.square().sum", "X.imag.square().sum", "X.real.square", "X.imag.square"], "function", ["None"], ["def", "complex_norm", "(", "X", ")", ":", "\n", "    ", "'''returns norm of the concatenated real and imaginary components of given Tensor'''", "\n", "\n", "return", "torch", ".", "sqrt", "(", "X", ".", "real", ".", "square", "(", ")", ".", "sum", "(", ")", "+", "X", ".", "imag", ".", "square", "(", ")", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.special_dist": [[26, 42], ["X.square().sum", "Y.norm", "X.square"], "function", ["None"], ["", "def", "special_dist", "(", "X", ",", "Y", ",", "relative", "=", "False", ",", "scaled", "=", "False", ")", ":", "\n", "    ", "'''returns distance between two Tensors\n    Args:\n        X: first tensor\n        Y: second tensor\n        relative: compute relative distance (normalizes by Y)\n        scaled: returns minimum distance of arbitrary scaling of X\n    Returns:\n        singleton Tensor\n    '''", "\n", "\n", "if", "scaled", ":", "\n", "        ", "denom", "=", "X", ".", "square", "(", ")", ".", "sum", "(", ")", "\n", "if", "denom", ":", "\n", "            ", "X", "*=", "(", "X", "*", "Y", ")", ".", "sum", "(", ")", "/", "denom", "\n", "", "", "return", "(", "X", "-", "Y", ")", ".", "norm", "(", ")", "/", "Y", ".", "norm", "(", ")", "if", "relative", "else", "(", "X", "-", "Y", ")", ".", "norm", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.complex_dist": [[43, 47], ["xd.special_dist", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.special_dist"], ["", "def", "complex_dist", "(", "X", ",", "Y", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''complex version of 'special_dist' method'''", "\n", "\n", "return", "special_dist", "(", "torch", ".", "cat", "(", "(", "X", ".", "real", ",", "X", ".", "imag", ")", ")", ",", "torch", ".", "cat", "(", "(", "Y", ".", "real", ",", "Y", ".", "imag", ")", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.fourier_diag": [[94, 121], ["xd.TensorProduct", "set().issubset", "len", "xd.TensorProduct", "len", "xd.TensorProduct", "torch.ones", "set", "torch_butterfly.combine.diagonal_butterfly", "torch_butterfly.special.ifft", "torch_butterfly.special.fft", "torch_butterfly.special.ifft2d", "torch_butterfly.special.fft2d", "kwargs.keys", "func", "zip"], "function", ["None"], ["", "", "", "def", "fourier_diag", "(", "*", "nd", ",", "diags", "=", "None", ",", "inv", "=", "False", ",", "diag_first", "=", "True", ",", "with_br_perm", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''returns n-dimensional FFT Butterfly matrix multiplied by a diagonal matrix\n    Args:\n        nd: input sizes of each dimension\n        diags: torch.Tensor vectors specifying diagonals; if None uses the identity\n        inv: return inverse FFT\n        diag_first: returns FFT * diagonal; if False returns diagonal * FFT\n        with_br_perm: uses bit-reversal permutation\n        kwargs: passed to torch_butterfly.special.fft\n    Returns:\n        TensorProduct object\n    '''", "\n", "\n", "\n", "kwargs", "[", "'with_br_perm'", "]", "=", "with_br_perm", "\n", "\n", "if", "diags", "is", "None", ":", "\n", "        ", "if", "len", "(", "nd", ")", "==", "1", ":", "\n", "            ", "return", "TensorProduct", "(", "ifft", "(", "*", "nd", ",", "**", "kwargs", ")", "if", "inv", "else", "fft", "(", "*", "nd", ",", "**", "kwargs", ")", ")", "\n", "", "if", "len", "(", "nd", ")", "==", "2", ":", "\n", "            ", "return", "TensorProduct", "(", "ifft2d", "(", "*", "nd", ",", "**", "kwargs", ")", "if", "inv", "else", "fft2d", "(", "*", "nd", ",", "**", "kwargs", ")", ")", "\n", "", "diags", "=", "[", "torch", ".", "ones", "(", "n", ")", "for", "n", "in", "nd", "]", "\n", "\n", "", "assert", "set", "(", "kwargs", ".", "keys", "(", ")", ")", ".", "issubset", "(", "{", "'normalized'", ",", "'br_first'", ",", "'with_br_perm'", "}", ")", "and", "not", "with_br_perm", ",", "\"invalid kwargs when using diags or >2 dims\"", "\n", "func", "=", "ifft", "if", "inv", "else", "fft", "\n", "return", "TensorProduct", "(", "*", "(", "diagonal_butterfly", "(", "func", "(", "n", ",", "**", "kwargs", ")", ",", "diag", ",", "diag_first", "=", "diag_first", ")", "for", "n", ",", "diag", "in", "zip", "(", "nd", ",", "diags", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.Conv": [[126, 130], ["getattr", "str"], "function", ["None"], ["def", "Conv", "(", "dims", ")", ":", "\n", "    ", "'''returns PyTorch convolution module of specified dimension'''", "\n", "\n", "return", "getattr", "(", "nn", ",", "'Conv'", "+", "str", "(", "dims", ")", "+", "'d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.AvgPool": [[131, 135], ["getattr", "str"], "function", ["None"], ["", "def", "AvgPool", "(", "dims", ")", ":", "\n", "    ", "'''returns PyTorch average pooling module of specified dimension'''", "\n", "\n", "return", "getattr", "(", "nn", ",", "'AvgPool'", "+", "str", "(", "dims", ")", "+", "'d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple": [[137, 144], ["type", "tuple", "len", "str"], "function", ["None"], ["", "def", "int2tuple", "(", "int_or_tuple", ",", "length", "=", "2", ")", ":", "\n", "    ", "'''converts bools, ints, or slices to tuples of the specified length via repetition'''", "\n", "\n", "if", "type", "(", "int_or_tuple", ")", "in", "{", "bool", ",", "int", ",", "slice", "}", ":", "\n", "        ", "return", "tuple", "(", "[", "int_or_tuple", "]", "*", "length", ")", "\n", "", "assert", "len", "(", "int_or_tuple", ")", "==", "length", ",", "\"tuple must have length \"", "+", "str", "(", "length", ")", "\n", "return", "int_or_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_select": [[30, 36], ["zip", "slice", "len", "len", "int", "slice", "zip", "len"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_offset_select", "(", "kernel", ",", "sizes", ")", ":", "\n", "\n", "        ", "offsets", "=", "[", "(", "o", "-", "k", "+", "int", "(", "o", "%", "2", "==", "1", ")", ")", "//", "2", "for", "o", ",", "k", "in", "zip", "(", "kernel", ".", "shape", "[", "-", "len", "(", "sizes", ")", ":", "]", ",", "sizes", ")", "]", "\n", "slices", "=", "[", "slice", "(", "None", ")", "]", "*", "(", "len", "(", "kernel", ".", "shape", ")", "-", "len", "(", "sizes", ")", ")", "\n", "return", "kernel", "[", "slices", "+", "[", "slice", "(", "offset", ",", "offset", "+", "size", ")", "for", "offset", ",", "size", "in", "zip", "(", "offsets", ",", "sizes", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_pad": [[37, 46], ["range", "torch.nn.functional.pad", "max", "pad.append", "pad.append", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_offset_pad", "(", "output", ",", "sizes", ")", ":", "\n", "\n", "        ", "pad", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "sizes", ")", "+", "1", ")", ":", "\n", "            ", "diff", "=", "max", "(", "0", ",", "sizes", "[", "-", "i", "]", "-", "output", ".", "shape", "[", "-", "i", "]", ")", "\n", "pad", ".", "append", "(", "diff", "-", "diff", "//", "2", ")", "\n", "pad", ".", "append", "(", "diff", "//", "2", ")", "\n", "", "return", "F", ".", "pad", "(", "output", ",", "pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_adjust": [[47, 50], ["darts.ZeroOp._offset_select", "darts.ZeroOp._offset_pad"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_select", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_pad"], ["", "def", "_offset_adjust", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_offset_select", "(", "self", ".", "_offset_pad", "(", "input", ",", "self", ".", "out_size", ")", ",", "self", ".", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp.__init__": [[51, 55], ["torch.nn.Module.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["", "def", "__init__", "(", "self", ",", "out_size", ",", "out_channels", ")", ":", "\n", "\n", "        ", "super", "(", "ZeroOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_size", "=", "[", "out_channels", "]", "+", "list", "(", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp.forward": [[56, 59], ["darts.ZeroOp._offset_adjust", "input.mul"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_adjust"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_offset_adjust", "(", "input", ".", "mul", "(", "0.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.SkipConnect.__init__": [[63, 67], ["darts.ZeroOp.__init__", "slice", "slice", "xd.int2tuple", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "SkipConnect", ",", "self", ")", ".", "__init__", "(", "out_size", ",", "out_channels", ")", "\n", "self", ".", "stride", "=", "[", "slice", "(", "None", ")", "]", "*", "2", "+", "[", "slice", "(", "None", ",", "None", ",", "s", ")", "for", "s", "in", "int2tuple", "(", "stride", ",", "length", "=", "len", "(", "out_size", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.SkipConnect.forward": [[68, 71], ["darts.SkipConnect._offset_adjust"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_adjust"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "self", ".", "_offset_adjust", "(", "input", "[", "self", ".", "stride", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.PoolNd.__init__": [[75, 80], ["darts.ZeroOp.__init__", "getattr", "str", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "pool", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "PoolNd", ",", "self", ")", ".", "__init__", "(", "out_size", ",", "out_channels", ")", "\n", "self", ".", "func", "=", "getattr", "(", "F", ",", "pool", "+", "'_pool'", "+", "str", "(", "len", "(", "out_size", ")", ")", "+", "'d'", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.PoolNd.forward": [[81, 85], ["darts.PoolNd.func", "darts.PoolNd._offset_adjust"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_adjust"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "func", "(", "input", ",", "**", "self", ".", "kwargs", ")", "\n", "return", "self", ".", "_offset_adjust", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ConvNd.__init__": [[89, 97], ["darts.ZeroOp.__init__", "getattr", "xd.Conv", "len", "kwargs.items", "str", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.Conv"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "ConvNd", ",", "self", ")", ".", "__init__", "(", "out_size", ",", "out_channels", ")", "\n", "conv", "=", "Conv", "(", "len", "(", "out_size", ")", ")", "(", "in_channels", ",", "out_channels", ",", "**", "kwargs", ")", "\n", "self", ".", "weight", "=", "conv", ".", "weight", "\n", "self", ".", "weight_size", "=", "self", ".", "weight", ".", "shape", "\n", "self", ".", "kwargs", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "not", "k", "==", "'kernel_size'", "}", "\n", "self", ".", "func", "=", "getattr", "(", "F", ",", "'conv'", "+", "str", "(", "len", "(", "out_size", ")", ")", "+", "'d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ConvNd.forward": [[98, 103], ["darts.ConvNd._offset_select", "darts.ConvNd.func", "darts.ConvNd._offset_adjust"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_select", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.ZeroOp._offset_adjust"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "weight", "=", "self", ".", "_offset_select", "(", "self", ".", "weight", ",", "self", ".", "weight_size", ")", "\n", "output", "=", "self", ".", "func", "(", "input", ",", "weight", ",", "**", "self", ".", "kwargs", ")", "\n", "return", "self", ".", "_offset_adjust", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.__init__": [[107, 148], ["torch.nn.Module.__init__", "xd.int2tuple", "darts.ZeroOp", "torch.nn.ModuleDict", "torch.nn.ParameterDict", "torch.nn.Parameter", "weight_init", "darts.DARTS.operations.items", "len", "copy.deepcopy", "copy.deepcopy.update", "torch.nn.Parameter", "torch.empty", "xd.XD._offset_insert", "hasattr", "torch.nn.Parameter", "type", "darts.ConvNd", "enumerate", "torch.log", "type", "max", "darts.SkipConnect", "torch.Tensor", "darts.PoolNd", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.int2tuple", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD._offset_insert"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "in_channels", ",", "out_channels", ",", "operations", "=", "OPERATIONS", ",", "arch_init", "=", "'uniform'", ",", "weight_init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "weight", "=", "None", ",", "perturb", "=", "0.1", ",", "bias", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "DARTS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dims", "=", "2", "if", "type", "(", "out_size", ")", "==", "int", "else", "len", "(", "out_size", ")", "\n", "self", ".", "out_size", "=", "int2tuple", "(", "out_size", ",", "length", "=", "self", ".", "dims", ")", "\n", "self", ".", "zeroop", "=", "ZeroOp", "(", "self", ".", "out_size", ",", "out_channels", ")", "\n", "self", ".", "operations", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "logits", "=", "nn", ".", "ParameterDict", "(", ")", "\n", "weight_size", "=", "[", "out_channels", ",", "in_channels", "]", "+", "[", "0", "]", "*", "self", ".", "dims", "\n", "for", "name", ",", "op_kwargs", "in", "operations", ":", "\n", "            ", "op_kwargs", "=", "deepcopy", "(", "op_kwargs", ")", "\n", "op_kwargs", ".", "update", "(", "kwargs", ")", "\n", "if", "'conv'", "in", "name", ":", "\n", "                ", "self", ".", "operations", "[", "name", "]", "=", "ConvNd", "(", "self", ".", "out_size", ",", "in_channels", ",", "out_channels", ",", "**", "op_kwargs", ")", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "operations", "[", "name", "]", ".", "weight", ".", "shape", ")", ":", "\n", "                    ", "weight_size", "[", "i", "]", "=", "max", "(", "weight_size", "[", "i", "]", ",", "size", ")", "\n", "", "", "elif", "name", "[", ":", "4", "]", "==", "'skip'", ":", "\n", "                ", "self", ".", "operations", "[", "name", "]", "=", "SkipConnect", "(", "self", ".", "out_size", ",", "out_channels", ",", "**", "op_kwargs", ")", "\n", "", "elif", "name", "[", ":", "4", "]", "==", "'zero'", ":", "\n", "                ", "self", ".", "operations", "[", "name", "]", "=", "self", ".", "zeroop", "\n", "", "else", ":", "\n", "                ", "self", ".", "operations", "[", "name", "]", "=", "PoolNd", "(", "out_size", ",", "name", "[", ":", "3", "]", ",", "out_channels", ",", "**", "op_kwargs", ")", "\n", "", "if", "arch_init", "==", "'uniform'", ":", "\n", "                ", "p", "=", "1.", "\n", "", "elif", "arch_init", "==", "name", ":", "\n", "                ", "p", "=", "(", "1.", "-", "perturb", ")", "*", "len", "(", "operations", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "perturb", "*", "len", "(", "operations", ")", "/", "(", "len", "(", "operations", ")", "-", "1", ")", "\n", "", "self", ".", "logits", "[", "name", "]", "=", "nn", ".", "Parameter", "(", "torch", ".", "log", "(", "torch", ".", "Tensor", "(", "[", "p", "]", ")", ")", ")", "\n", "\n", "", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "weight_size", ")", ")", "\n", "weight_init", "(", "self", ".", "weight", ")", "\n", "if", "not", "weight", "is", "None", ":", "\n", "            ", "XD", ".", "_offset_insert", "(", "self", ".", "weight", ".", "data", ",", "weight", ")", "\n", "", "for", "name", ",", "module", "in", "self", ".", "operations", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "module", ",", "'weight'", ")", ":", "\n", "                ", "module", ".", "weight", "=", "self", ".", "weight", "\n", "\n", "", "", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "bias", ")", "if", "type", "(", "bias", ")", "==", "torch", ".", "Tensor", "else", "bias", "\n", "self", ".", "discrete", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.discretize": [[149, 152], ["max", "darts.DARTS.logits.items", "operator.itemgetter"], "methods", ["None"], ["", "def", "discretize", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "discrete", "=", "max", "(", "self", ".", "logits", ".", "items", "(", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.forward": [[153, 168], ["sum", "darts.DARTS.zeroop", "darts.DARTS.operations.items", "darts.DARTS.bias.reshape", "torch.exp", "torch.exp", "operation", "darts.DARTS.logits.values"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "if", "self", ".", "discrete", ":", "\n", "            ", "output", "=", "self", ".", "operations", "[", "self", ".", "discrete", "]", "(", "input", ")", "\n", "\n", "", "else", ":", "\n", "            ", "sumexplogit", "=", "sum", "(", "torch", ".", "exp", "(", "logit", ")", "for", "logit", "in", "self", ".", "logits", ".", "values", "(", ")", ")", "\n", "output", "=", "self", ".", "zeroop", "(", "input", ")", "\n", "for", "name", ",", "operation", "in", "self", ".", "operations", ".", "items", "(", ")", ":", "\n", "                ", "p", "=", "torch", ".", "exp", "(", "self", ".", "logits", "[", "name", "]", ")", "/", "sumexplogit", "\n", "output", "+=", "p", "*", "operation", "(", "input", ")", "\n", "\n", "", "", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "return", "output", "\n", "", "return", "output", "+", "self", ".", "bias", ".", "reshape", "(", "1", ",", "*", "self", ".", "bias", ".", "shape", ",", "*", "[", "1", "]", "*", "self", ".", "dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params": [[169, 172], ["darts.DARTS.named_parameters"], "methods", ["None"], ["", "def", "named_arch_params", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "(", "n", ",", "p", ")", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", "if", "'logits'", "in", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.arch_params": [[173, 176], ["darts.DARTS.named_arch_params"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_arch_params"], ["", "def", "arch_params", "(", "self", ")", ":", "\n", "\n", "        ", "return", "(", "p", "for", "_", ",", "p", "in", "self", ".", "named_arch_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.named_model_weights": [[177, 180], ["iter"], "methods", ["None"], ["", "def", "named_model_weights", "(", "self", ")", ":", "\n", "\n", "        ", "return", "iter", "(", "[", "(", "'weight'", ",", "self", ".", "weight", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.model_weights": [[181, 184], ["iter"], "methods", ["None"], ["", "def", "model_weights", "(", "self", ")", ":", "\n", "\n", "        ", "return", "iter", "(", "[", "self", ".", "weight", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.Supernet.patch_darts": [[188, 241], ["list", "darts.Supernet.collect_io", "copy.deepcopy", "getattr", "darts.Supernet.get", "darts.DARTS", "module_string.split", "chrysalis.get_module", "getattr", "setattr", "darts.Supernet.named_modules", "DARTS.", "print", "print", "getattr", "str", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.collect_io", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.get_module"], ["    ", "def", "patch_darts", "(", "self", ",", "sample_input", ",", "*", "args", ",", "named_modules", "=", "[", "]", ",", "warm_start", "=", "True", ",", "verbose", "=", "False", ",", "pool_patch", "=", "'max-pool_3'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "named_modules", "=", "list", "(", "named_modules", ")", "\n", "module_io", "=", "self", ".", "collect_io", "(", "sample_input", ",", "(", "m", "for", "_", ",", "m", "in", "named_modules", ")", ")", "\n", "for", "name", ",", "module", "in", "named_modules", ":", "\n", "\n", "            ", "op_kwargs", "=", "deepcopy", "(", "kwargs", ")", "\n", "if", "warm_start", ":", "\n", "                ", "try", ":", "\n", "                    ", "arch_init", "=", "'conv_'", "+", "str", "(", "module", ".", "kernel_size", "[", "0", "]", ")", "\n", "op_kwargs", "[", "'stride'", "]", "=", "module", ".", "stride", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "arch_init", "=", "'skip'", "\n", "", "except", "TypeError", ":", "\n", "                    ", "arch_init", "=", "pool_patch", "\n", "", "", "else", ":", "\n", "                ", "arch_init", "=", "'uniform'", "\n", "", "weight", "=", "getattr", "(", "module", ",", "'weight'", ",", "None", ")", "\n", "\n", "inp", ",", "out", "=", "module_io", ".", "get", "(", "module", ",", "(", "None", ",", "None", ")", ")", "\n", "if", "inp", "is", "None", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", "(", "name", ",", "'\\terror:'", ",", "'module not used in forward pass'", ")", "\n", "", "continue", "\n", "", "in_channels", "=", "inp", ".", "shape", "[", "1", "]", "\n", "out_channels", "=", "out", ".", "shape", "[", "1", "]", "\n", "if", "arch_init", "==", "'skip'", ":", "\n", "                ", "op_kwargs", "[", "'stride'", "]", "=", "inp", ".", "shape", "[", "-", "1", "]", "//", "out", ".", "shape", "[", "-", "1", "]", "\n", "", "out_size", "=", "out", ".", "shape", "[", "2", ":", "]", "\n", "mod", "=", "DARTS", "(", "out_size", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "arch_init", "=", "arch_init", ",", "\n", "bias", "=", "getattr", "(", "module", ",", "'bias'", ",", "None", ")", ",", "\n", "weight", "=", "weight", ",", "**", "op_kwargs", ")", "\n", "\n", "module_string", "=", "name", "\n", "while", "True", ":", "\n", "                ", "module_split", "=", "module_string", ".", "split", "(", "'.'", ")", "\n", "parent", "=", "get_module", "(", "self", ",", "'.'", ".", "join", "(", "module_split", "[", ":", "-", "1", "]", ")", ")", "\n", "nam", "=", "module_split", "[", "-", "1", "]", "\n", "child", "=", "getattr", "(", "parent", ",", "nam", ")", "\n", "setattr", "(", "parent", ",", "module_split", "[", "-", "1", "]", ",", "mod", ")", "\n", "for", "module_string", ",", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "m", "==", "child", ":", "\n", "                        ", "break", "\n", "", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "verbose", ":", "\n", "                ", "output", "=", "mod", "(", "inp", ")", "\n", "err", "=", "(", "torch", ".", "norm", "(", "output", "-", "out", ")", "/", "torch", ".", "norm", "(", "out", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "name", ",", "'\\terror:'", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.Supernet.discretize": [[242, 247], ["darts.Supernet.modules", "type", "module.discretize"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.Supernet.discretize"], ["", "", "", "def", "discretize", "(", "self", ")", ":", "\n", "\n", "        ", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "type", "(", "module", ")", "==", "DARTS", ":", "\n", "                ", "module", ".", "discretize", "(", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.MaxPool": [[23, 26], ["getattr", "str"], "function", ["None"], ["def", "MaxPool", "(", "dims", ")", ":", "\n", "\n", "    ", "return", "getattr", "(", "nn", ",", "'MaxPool'", "+", "str", "(", "dims", ")", "+", "'d'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.lenet.LeNet.__init__": [[7, 18], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "84", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.lenet.LeNet.forward": [[19, 25], ["lenet.LeNet.pool1", "lenet.LeNet.pool2", "torch.nn.functional.relu", "lenet.LeNet.linear", "torch.nn.functional.relu", "torch.nn.functional.relu", "lenet.LeNet.fc2", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "torch.nn.functional.relu", "lenet.LeNet.fc1", "torch.nn.functional.relu.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "pool1", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "pool2", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ".", "flatten", "(", "1", ")", ")", ")", ")", ")", "\n", "return", "self", ".", "linear", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.RowColPermute.__init__": [[29, 34], ["torch.Module.__init__", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "type", "type"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rowperm", "=", "torch", ".", "randperm", "(", "row", ")", "if", "type", "(", "row", ")", "==", "int", "else", "row", "\n", "self", ".", "colperm", "=", "torch", ".", "randperm", "(", "col", ")", "if", "type", "(", "col", ")", "==", "int", "else", "col", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.RowColPermute.forward": [[35, 38], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "\n", "        ", "return", "tensor", "[", ":", ",", "self", ".", "rowperm", "]", "[", ":", ",", ":", ",", "self", ".", "colperm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.__init__": [[455, 457], ["trainer.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.reset": [[458, 463], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update": [[464, 469], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.main": [[109, 339], ["parser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "sum", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.CrossEntropyLoss().cuda", "tensorboardX.SummaryWriter", "torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "lenet.LeNet.cuda", "functools.partial", "nas.MixedOptimizer", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "range", "lenet.LeNet.save_arch", "trainer.main.metrics"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.save_arch", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.metrics"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Check the save_dir exists or not", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ")", "\n", "\n", "#model = torch.nn.DataParallel(resnet.__dict__[args.arch]())", "\n", "", "if", "args", ".", "arch", "==", "'lenet'", ":", "\n", "        ", "model", "=", "lenet", ".", "LeNet", "(", "num_classes", "=", "int", "(", "args", ".", "data", "[", "5", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "resnet", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "int", "(", "args", ".", "data", "[", "5", ":", "]", ")", ")", "\n", "", "origpar", "=", "sum", "(", "param", ".", "numel", "(", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", ")", "\n", "print", "(", "'Original weight count:'", ",", "origpar", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "device", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "writer", "=", "SummaryWriter", "(", "args", ".", "save_dir", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "permute", "or", "args", ".", "get_permute", ":", "\n", "        ", "if", "args", ".", "get_permute", ":", "\n", "            ", "permute", "=", "torch", ".", "load", "(", "args", ".", "get_permute", ")", "[", "'permute'", "]", "\n", "", "elif", "args", ".", "resume", ":", "\n", "            ", "permute", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "[", "'permute'", "]", "\n", "", "else", ":", "\n", "            ", "permute", "=", "RowColPermute", "(", "32", ",", "32", ")", "\n", "", "train_transforms", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "permute", ",", "normalize", "]", "\n", "val_transforms", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "permute", ",", "normalize", "]", "\n", "", "else", ":", "\n", "        ", "permute", "=", "None", "\n", "train_transforms", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", "\n", "val_transforms", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", "\n", "\n", "", "cifar", "=", "datasets", ".", "CIFAR100", "if", "args", ".", "data", "==", "'cifar100'", "else", "datasets", ".", "CIFAR10", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "cifar", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", ",", "download", "=", "True", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "cifar", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# define optimizer", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", ".", "half", "(", ")", "\n", "criterion", ".", "half", "(", ")", "\n", "\n", "", "if", "args", ".", "darts", ":", "\n", "        ", "model", ",", "original", "=", "Supernet", ".", "metamorphosize", "(", "model", ")", ",", "model", "\n", "X", ",", "_", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "\n", "arch_kwargs", "=", "{", "'perturb'", ":", "args", ".", "perturb", ",", "\n", "'verbose'", ":", "not", "args", ".", "resume", ",", "\n", "'warm_start'", ":", "not", "args", ".", "from_scratch", "}", "\n", "patchlist", "=", "(", "[", "'conv'", "]", "if", "args", ".", "patch_conv", "else", "[", "]", ")", "+", "(", "[", "'pool'", "]", "if", "args", ".", "patch_pool", "else", "[", "]", ")", "+", "(", "[", "'shortcut'", "]", "if", "args", ".", "patch_skip", "else", "[", "]", ")", "\n", "model", ".", "patch_darts", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "(", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", "if", "any", "(", "patch", "in", "n", "for", "patch", "in", "patchlist", ")", ")", ",", "**", "arch_kwargs", ")", "\n", "print", "(", "'Model weight count:'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "model_weights", "(", ")", ")", ")", "\n", "print", "(", "'Arch param count:'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "arch_params", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "model", ",", "original", "=", "Chrysalis", ".", "metamorphosize", "(", "model", ")", ",", "model", "\n", "if", "args", ".", "patch_skip", "or", "args", ".", "patch_conv", "or", "args", ".", "patch_pool", ":", "\n", "            ", "X", ",", "_", "=", "next", "(", "iter", "(", "train_loader", ")", ")", "\n", "arch_kwargs", "=", "{", "key", ":", "getattr", "(", "args", ",", "key", ")", "for", "key", "in", "[", "\n", "'kmatrix_depth'", ",", "\n", "'max_kernel_size'", ",", "\n", "'global_biasing'", ",", "\n", "'channel_gating'", ",", "\n", "'base'", ",", "\n", "'perturb'", ",", "\n", "]", "}", "\n", "arch_kwargs", "[", "'verbose'", "]", "=", "not", "args", ".", "resume", "\n", "arch_kwargs", "[", "'warm_start'", "]", "=", "not", "args", ".", "from_scratch", "\n", "if", "args", ".", "patch_skip", ":", "\n", "                ", "model", ".", "patch_skip", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "(", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", "if", "'shortcut'", "in", "n", ")", ",", "**", "arch_kwargs", ")", "\n", "", "if", "args", ".", "patch_pool", ":", "\n", "                ", "model", ".", "patch_pool", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "(", "(", "n", ",", "m", ")", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", "if", "'pool'", "in", "n", ")", ",", "**", "arch_kwargs", ")", "\n", "", "if", "args", ".", "patch_conv", ":", "\n", "                ", "model", ".", "patch_conv", "(", "X", "[", ":", "1", "]", ",", "**", "arch_kwargs", ")", "\n", "", "print", "(", "'Model weight count:'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "model_weights", "(", ")", ")", ")", "\n", "print", "(", "'Arch param count:'", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "arch_params", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "arch_lr", "=", "0.0", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "evaluate", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "if", "args", ".", "offline", ":", "\n", "        ", "model", ".", "load_arch", "(", "args", ".", "offline", ")", "\n", "args", ".", "arch_lr", "=", "0.0", "\n", "if", "args", ".", "darts", ":", "\n", "            ", "model", ".", "discretize", "(", ")", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "module", ",", "'discrete'", ")", ":", "\n", "                    ", "print", "(", "name", ",", "'\\t'", ",", "module", ".", "discrete", ")", "\n", "\n", "", "", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "momentum", "=", "partial", "(", "torch", ".", "optim", ".", "SGD", ",", "momentum", "=", "args", ".", "momentum", ")", "\n", "opts", "=", "[", "momentum", "(", "model", ".", "model_weights", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "]", "\n", "if", "args", ".", "arch_lr", ":", "\n", "        ", "arch_opt", "=", "torch", ".", "optim", ".", "Adam", "if", "args", ".", "arch_adam", "else", "momentum", "\n", "opts", ".", "append", "(", "arch_opt", "(", "model", ".", "arch_params", "(", ")", ",", "lr", "=", "args", ".", "arch_lr", ",", "weight_decay", "=", "0.0", "if", "args", ".", "arch_adam", "else", "args", ".", "weight_decay", ")", ")", "\n", "", "optimizer", "=", "MixedOptimizer", "(", "opts", ")", "\n", "\n", "def", "weight_sched", "(", "epoch", ")", ":", "\n", "\n", "        ", "if", "args", ".", "arch", "in", "[", "'lenet'", "]", ":", "\n", "            ", "return", "0.1", "if", "epoch", ">=", "int", "(", "0.75", "*", "args", ".", "epochs", ")", "else", "0.5", "if", "epoch", ">=", "int", "(", "0.5", "*", "args", ".", "epochs", ")", "else", "1.0", "\n", "\n", "", "if", "epoch", "<", "1", "and", "args", ".", "arch", "in", "[", "'resnet1202'", ",", "'resnet110'", "]", ":", "\n", "            ", "return", "0.1", "\n", "", "return", "0.1", "**", "(", "epoch", ">=", "int", "(", "0.5", "*", "args", ".", "epochs", ")", ")", "*", "0.1", "**", "(", "epoch", ">=", "int", "(", "0.75", "*", "args", ".", "epochs", ")", ")", "\n", "\n", "", "def", "arch_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "0.0", "if", "epoch", "<", "args", ".", "warmup_epochs", "or", "epoch", ">", "args", ".", "epochs", "-", "args", ".", "cooldown_epochs", "else", "weight_sched", "(", "epoch", ")", "\n", "\n", "", "sched_groups", "=", "[", "weight_sched", "if", "g", "[", "'params'", "]", "[", "0", "]", "in", "set", "(", "model", ".", "model_weights", "(", ")", ")", "else", "arch_sched", "for", "g", "in", "optimizer", ".", "param_groups", "]", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "sched_groups", ",", "last_epoch", "=", "args", ".", "start_epoch", "-", "1", ")", "\n", "\n", "def", "metrics", "(", "epoch", ")", ":", "\n", "\n", "        ", "if", "args", ".", "darts", ":", "\n", "            ", "return", "\n", "\n", "", "for", "label", ",", "name", ",", "patched", "in", "[", "\n", "(", "'skip'", ",", "'shortcut'", ",", "args", ".", "patch_skip", ")", ",", "\n", "(", "'pool'", ",", "'pool'", ",", "args", ".", "patch_pool", ")", ",", "\n", "(", "'conv'", ",", "'conv'", ",", "args", ".", "patch_conv", ")", ",", "\n", "]", ":", "\n", "            ", "if", "patched", ":", "\n", "                ", "mods", "=", "[", "m", "for", "n", ",", "m", "in", "model", ".", "named_modules", "(", ")", "if", "name", "in", "n", "and", "hasattr", "(", "m", ",", "'distance_from'", ")", "]", "\n", "for", "metric", ",", "metric_kwargs", "in", "[", "\n", "(", "'euclidean'", ",", "{", "}", ")", ",", "\n", "(", "'frobenius'", ",", "{", "'approx'", ":", "16", "}", ")", ",", "\n", "(", "'averaged'", ",", "{", "'approx'", ":", "16", ",", "'samples'", ":", "10", "}", ")", ",", "\n", "]", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "label", ",", "metric", "+", "'-dist'", "]", ")", ",", "\n", "sum", "(", "m", ".", "distance_from", "(", "label", ",", "metric", "=", "metric", ",", "relative", "=", "True", ",", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "if", "not", "metric", "==", "'averaged'", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "label", ",", "metric", "+", "'-norm'", "]", ")", ",", "\n", "sum", "(", "getattr", "(", "m", ",", "metric", ")", "(", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "label", "+", "'/weight-norm'", ",", "sum", "(", "m", ".", "weight", ".", "data", ".", "norm", "(", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "epoch", ")", "\n", "\n", "", "", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "return", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'args.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "vars", "(", "args", ")", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "writer", ".", "add_scalar", "(", "'hyper/lr'", ",", "weight_sched", "(", "epoch", ")", "*", "args", ".", "lr", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'hyper/arch'", ",", "arch_sched", "(", "epoch", ")", "*", "args", ".", "arch_lr", ",", "epoch", ")", "\n", "metrics", "(", "epoch", ")", "\n", "model", ".", "set_arch_requires_grad", "(", "arch_sched", "(", "epoch", ")", "*", "args", ".", "arch_lr", ">", "0.0", ")", "\n", "\n", "# train for one epoch", "\n", "print", "(", "'current lr {:.5e}'", ".", "format", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "acc", ",", "loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/acc'", ",", "acc", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ",", "epoch", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate on validation set", "\n", "prec1", ",", "loss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "writer", ".", "add_scalar", "(", "'valid/acc'", ",", "prec1", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'valid/loss'", ",", "loss", ",", "epoch", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "if", "epoch", ">", "0", "and", "epoch", "%", "args", ".", "save_every", "==", "0", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'permute'", ":", "permute", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint.th'", ")", ")", "\n", "", "if", "epoch", ">", "0", "and", "epoch", "+", "1", "==", "args", ".", "warmup_epochs", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'permute'", ":", "permute", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'warmup.th'", ")", ")", "\n", "", "if", "epoch", ">", "0", "or", "epoch", "+", "1", "==", "args", ".", "epochs", "-", "args", ".", "cooldown_epochs", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'permute'", ":", "permute", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'cooldown.th'", ")", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'permute'", ":", "permute", ",", "\n", "}", ",", "is_best", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'model.th'", ")", ")", "\n", "\n", "", "model", ".", "save_arch", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'arch.th'", ")", ")", "\n", "metrics", "(", "args", ".", "epochs", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'results.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "{", "'final validation accuracy'", ":", "prec1", ",", "\n", "'best validation accuracy'", ":", "best_prec1", ",", "\n", "}", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.train": [[341, 395], ["trainer.AverageMeter", "trainer.AverageMeter", "trainer.AverageMeter", "trainer.AverageMeter", "model.train", "time.time", "enumerate", "trainer.AverageMeter.update", "target.cuda.cuda", "input.cuda", "model", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "output.float.float", "loss.float.float", "trainer.AverageMeter.update", "trainer.AverageMeter.update", "trainer.AverageMeter.update", "time.time", "input_var.half.half", "trainer.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.accuracy"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"\n        Run one train epoch\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", "\n", "if", "args", ".", "half", ":", "\n", "            ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ")", ")", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.validate": [[397, 446], ["trainer.AverageMeter", "trainer.AverageMeter", "trainer.AverageMeter", "model.eval", "time.time", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "target.cuda.cuda", "input.cuda", "target.cuda.cuda", "model", "criterion", "output.float.float", "loss.float.float", "trainer.AverageMeter.update", "trainer.AverageMeter.update", "trainer.AverageMeter.update", "time.time", "input_var.half.half", "trainer.accuracy", "loss.float.item", "input.size", "prec1.item", "input.size", "print", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input_var", "=", "input", ".", "cuda", "(", ")", "\n", "target_var", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "                ", "input_var", "=", "input_var", ".", "half", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})'", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ")", ")", "\n", "\n", "", "", "", "print", "(", "' * Prec@1 {top1.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.save_checkpoint": [[447, 452], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save", "home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "\"\"\"\n    Save the training model\n    \"\"\"", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.trainer.accuracy": [[471, 485], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.LambdaLayer.__init__": [[46, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.LambdaLayer.forward": [[50, 52], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.BasicBlock.__init__": [[57, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.BasicBlock.forward": [[78, 84], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet.__init__": [[87, 99], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet._make_layer": [[100, 108], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.ResNet.forward": [[109, 118], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet._weights_init": [[39, 44], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet20": [[120, 122], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet32": [[124, 126], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet44": [[128, 130], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet56": [[132, 134], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet110": [[136, 138], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.resnet1202": [[140, 142], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.resnet.resnet.test": [[144, 152], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["None"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.Chomp1d.__init__": [[7, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.Chomp1d.forward": [[11, 13], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.TemporalBlock.__init__": [[16, 36], ["torch.Module.__init__", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "tcn.Chomp1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "tcn.Chomp1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "tcn.TemporalBlock.init_weights", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.model.TCN.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "stride", ",", "dilation", ",", "padding", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "self", ".", "chomp1", "=", "Chomp1d", "(", "padding", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "\n", "self", ".", "conv2", "=", "weight_norm", "(", "nn", ".", "Conv1d", "(", "n_outputs", ",", "n_outputs", ",", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ")", "\n", "self", ".", "chomp2", "=", "Chomp1d", "(", "padding", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "chomp1", ",", "self", ".", "relu1", ",", "self", ".", "dropout1", ",", "\n", "self", ".", "conv2", ",", "self", ".", "chomp2", ",", "self", ".", "relu2", ",", "self", ".", "dropout2", ")", "\n", "self", ".", "downsample", "=", "nn", ".", "Conv1d", "(", "n_inputs", ",", "n_outputs", ",", "1", ")", "if", "n_inputs", "!=", "n_outputs", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.TemporalBlock.init_weights": [[37, 42], ["tcn.TemporalBlock.conv1.weight.data.normal_", "tcn.TemporalBlock.conv2.weight.data.normal_", "tcn.TemporalBlock.downsample.weight.data.normal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.TemporalBlock.forward": [[43, 47], ["tcn.TemporalBlock.net", "tcn.TemporalBlock.relu", "tcn.TemporalBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "res", "=", "x", "if", "self", ".", "downsample", "is", "None", "else", "self", ".", "downsample", "(", "x", ")", "\n", "return", "self", ".", "relu", "(", "out", "+", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.TemporalConvNet.__init__": [[50, 62], ["torch.Module.__init__", "len", "range", "torch.Sequential", "torch.Sequential", "tcn.TemporalBlock"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_channels", ",", "kernel_size", "=", "2", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "TemporalConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "num_levels", "=", "len", "(", "num_channels", ")", "\n", "for", "i", "in", "range", "(", "num_levels", ")", ":", "\n", "            ", "dilation_size", "=", "2", "**", "i", "\n", "in_channels", "=", "num_inputs", "if", "i", "==", "0", "else", "num_channels", "[", "i", "-", "1", "]", "\n", "out_channels", "=", "num_channels", "[", "i", "]", "\n", "layers", "+=", "[", "TemporalBlock", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "dilation_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "*", "dilation_size", ",", "dropout", "=", "dropout", ")", "]", "\n", "\n", "", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.TCN.tcn.TemporalConvNet.forward": [[63, 65], ["tcn.TemporalConvNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.model.TCN.__init__": [[7, 11], ["torch.nn.Module.__init__", "TCN.tcn.TemporalConvNet", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["\n", "class", "Cell", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.model.TCN.forward": [[12, 17], ["model.TCN.tcn", "model.TCN.linear", "torch.log_softmax"], "methods", ["None"], ["print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.utils.data_generator": [[5, 20], ["torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["import", "torchvision", ".", "transforms", "as", "transforms", "\n", "from", "torch", "import", "nn", "\n", "from", "torch", ".", "autograd", "import", "Variable", "\n", "\n", "\n", "class", "AvgrageMeter", "(", "object", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.pmnist_test.metrics": [[112, 131], ["writer.add_scalar", "mod.weight.cuda", "writer.add_scalar", "model.modules", "hasattr", "writer.add_scalar", "sum", "len", "sum", "len", "sum", "len", "m.weight.data.norm", "m.distance_from", "getattr"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.distance_from"], ["", "def", "metrics", "(", "epoch", ")", ":", "\n", "\n", "    ", "if", "args", ".", "patch_conv", ":", "\n", "        ", "mods", "=", "[", "m", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "hasattr", "(", "m", ",", "'distance_from'", ")", "]", "\n", "for", "mod", "in", "mods", ":", "\n", "            ", "mod", ".", "weight", "=", "mod", ".", "weight", ".", "cuda", "(", ")", "\n", "", "for", "metric", ",", "metric_kwargs", "in", "[", "\n", "(", "'euclidean'", ",", "{", "}", ")", ",", "\n", "(", "'frobenius'", ",", "{", "'approx'", ":", "16", "}", ")", ",", "\n", "(", "'averaged'", ",", "{", "'approx'", ":", "16", ",", "'samples'", ":", "10", "}", ")", ",", "\n", "]", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-dist'", "]", ")", ",", "\n", "sum", "(", "m", ".", "distance_from", "(", "'conv'", ",", "metric", "=", "metric", ",", "relative", "=", "True", ",", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "if", "not", "metric", "==", "'averaged'", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-norm'", "]", ")", ",", "\n", "sum", "(", "getattr", "(", "m", ",", "metric", ")", "(", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "'conv/weight-norm'", ",", "sum", "(", "m", ".", "weight", ".", "data", ".", "norm", "(", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.pmnist_test.train": [[133, 160], ["model.train", "enumerate", "writer.add_scalar", "data.view.view", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "print", "total_loss.item", "len", "data.view.cuda", "target.cuda", "model.model_weights", "len", "len", "train_loss.item"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.model_weights"], ["", "", "def", "train", "(", "ep", ")", ":", "\n", "    ", "global", "steps", "\n", "train_loss", ",", "total_loss", "=", "0", ",", "0", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "args", ".", "cuda", ":", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "data", "=", "data", ".", "view", "(", "-", "1", ",", "input_channels", ",", "seq_length", ")", "\n", "if", "args", ".", "permute", ":", "\n", "            ", "data", "=", "data", "[", ":", ",", ":", ",", "permute", "]", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ")", ",", "Variable", "(", "target", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "model_weights", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "train_loss", "+=", "loss", "\n", "total_loss", "+=", "loss", "\n", "steps", "+=", "seq_length", "\n", "if", "batch_idx", ">", "0", "and", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}\\tSteps: {}'", ".", "format", "(", "\n", "ep", ",", "batch_idx", "*", "batch_size", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "train_loss", ".", "item", "(", ")", "/", "args", ".", "log_interval", ",", "steps", ")", ")", "\n", "train_loss", "=", "0", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "total_loss", ".", "item", "(", ")", "/", "len", "(", "train_loader", ")", ",", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.mnist_pixel.pmnist_test.test": [[162, 186], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "print", "writer.add_scalar", "writer.add_scalar", "data.view.view", "model", "torch.nll_loss().item", "pred.eq().cpu().sum", "torch.autograd.Variable", "torch.autograd.Variable", "model.data.max", "len", "len", "data.view.cuda", "target.cuda", "torch.nll_loss", "pred.eq().cpu", "len", "pred.eq", "target.data.view_as"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu"], ["", "def", "test", "(", "ep", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "if", "args", ".", "cuda", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "", "data", "=", "data", ".", "view", "(", "-", "1", ",", "input_channels", ",", "seq_length", ")", "\n", "if", "args", ".", "permute", ":", "\n", "                ", "data", "=", "data", "[", ":", ",", ":", ",", "permute", "]", "\n", "", "data", ",", "target", "=", "Variable", "(", "data", ",", "volatile", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'test/loss'", ",", "test_loss", ",", "ep", ")", "\n", "writer", ".", "add_scalar", "(", "'test/acc'", ",", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ",", "ep", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.model.TCN.__init__": [[7, 12], ["torch.nn.Module.__init__", "TCN.tcn.TemporalConvNet", "torch.nn.Linear", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["\n", "class", "Cell", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.model.TCN.forward": [[13, 18], ["model.TCN.tcn().transpose", "model.TCN.linear().double", "model.TCN.sig", "model.TCN.tcn", "model.TCN.linear", "x.transpose"], "methods", ["None"], ["\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.utils.data_generator": [[6, 29], ["print", "scipy.io.loadmat", "range", "print", "scipy.io.loadmat", "len", "torch.Tensor", "print", "scipy.io.loadmat", "data[].astype", "print", "scipy.io.loadmat"], "function", ["None"], ["from", "torch", "import", "nn", "\n", "from", "torch", ".", "autograd", "import", "Variable", "\n", "\n", "\n", "class", "AvgrageMeter", "(", "object", ")", ":", "\n", "\n", "  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n", "\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.music_test.metrics": [[113, 132], ["writer.add_scalar", "mod.weight.cuda", "writer.add_scalar", "model.modules", "hasattr", "writer.add_scalar", "sum", "len", "sum", "len", "sum", "len", "m.weight.data.norm", "m.distance_from", "getattr"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.distance_from"], ["", "def", "metrics", "(", "epoch", ")", ":", "\n", "\n", "    ", "if", "args", ".", "patch_conv", ":", "\n", "        ", "mods", "=", "[", "m", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "hasattr", "(", "m", ",", "'distance_from'", ")", "]", "\n", "for", "mod", "in", "mods", ":", "\n", "            ", "mod", ".", "weight", "=", "mod", ".", "weight", ".", "cuda", "(", ")", "\n", "", "for", "metric", ",", "metric_kwargs", "in", "[", "\n", "(", "'euclidean'", ",", "{", "}", ")", ",", "\n", "#('frobenius', {'approx': 4}),", "\n", "#('averaged', {'approx': 4, 'samples': 5}),", "\n", "]", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-dist'", "]", ")", ",", "\n", "sum", "(", "m", ".", "distance_from", "(", "'conv'", ",", "metric", "=", "metric", ",", "relative", "=", "True", ",", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "if", "not", "metric", "==", "'averaged'", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-norm'", "]", ")", ",", "\n", "sum", "(", "getattr", "(", "m", ",", "metric", ")", "(", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "'conv/weight-norm'", ",", "sum", "(", "m", ".", "weight", ".", "data", ".", "norm", "(", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.music_test.evaluate": [[133, 156], ["model.eval", "numpy.arange", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "loss.item", "model().squeeze.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.vstack", "torch.vstack", "torch.vstack", "model().squeeze", "torch.trace", "torch.trace", "torch.trace", "x.cuda", "y.cuda", "model", "torch.nn.functional.pad", "model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "x.unsqueeze", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "max", "len", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "", "def", "evaluate", "(", "X_data", ",", "name", "=", "'Eval'", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "eval_idx_list", "=", "np", ".", "arange", "(", "len", "(", "X_data", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "total_loss", "=", "0.0", "\n", "count", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", "in", "eval_idx_list", ":", "\n", "            ", "data_line", "=", "X_data", "[", "idx", "]", "\n", "x", ",", "y", "=", "Variable", "(", "data_line", "[", ":", "-", "1", "]", ")", ",", "Variable", "(", "data_line", "[", "1", ":", "]", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "causal_stack", ":", "\n", "                ", "causal_stack", "=", "torch", ".", "vstack", "(", "[", "F", ".", "pad", "(", "x", "[", "None", ",", "max", "(", "0", ",", "j", "-", "args", ".", "history", ")", ":", "j", "]", ",", "(", "0", ",", "0", ",", "max", "(", "0", ",", "args", ".", "history", "-", "j", ")", ",", "0", ")", ")", "for", "j", "in", "range", "(", "1", ",", "len", "(", "x", ")", "+", "1", ")", "]", ")", "\n", "output", "=", "model", "(", "causal_stack", ")", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "", "loss", "=", "-", "torch", ".", "trace", "(", "torch", ".", "matmul", "(", "y", ",", "torch", ".", "log", "(", "output", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", "+", "\n", "torch", ".", "matmul", "(", "(", "1", "-", "y", ")", ",", "torch", ".", "log", "(", "1", "-", "output", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "count", "+=", "output", ".", "size", "(", "0", ")", "\n", "", "eval_loss", "=", "total_loss", "/", "count", "\n", "print", "(", "name", "+", "\" loss: {:.5f}\"", ".", "format", "(", "eval_loss", ")", ")", "\n", "return", "eval_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.poly_music.music_test.train": [[158, 194], ["model.train", "numpy.arange", "numpy.random.shuffle", "writer.add_scalar", "len", "optimizer.zero_grad", "loss.item", "model().squeeze.size", "model().squeeze.size", "loss.backward", "optimizer.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.vstack", "torch.vstack", "torch.vstack", "model().squeeze", "torch.trace", "torch.trace", "torch.trace", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "print", "total_loss.item", "x.cuda", "y.cuda", "model", "model.model_weights", "torch.nn.functional.pad", "model", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "x.unsqueeze", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "max", "len", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "max", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.model_weights"], ["", "", "def", "train", "(", "ep", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", ",", "total_loss", "=", "0", ",", "0", "\n", "count", ",", "total_count", "=", "0", ",", "0", "\n", "train_idx_list", "=", "np", ".", "arange", "(", "len", "(", "X_train", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_idx_list", ")", "\n", "for", "idx", "in", "train_idx_list", ":", "\n", "        ", "data_line", "=", "X_train", "[", "idx", "]", "\n", "x", ",", "y", "=", "Variable", "(", "data_line", "[", ":", "-", "1", "]", ")", ",", "Variable", "(", "data_line", "[", "1", ":", "]", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "causal_stack", ":", "\n", "            ", "causal_stack", "=", "torch", ".", "vstack", "(", "[", "F", ".", "pad", "(", "x", "[", "None", ",", "max", "(", "0", ",", "j", "-", "args", ".", "history", ")", ":", "j", "]", ",", "(", "0", ",", "0", ",", "max", "(", "0", ",", "args", ".", "history", "-", "j", ")", ",", "0", ")", ")", "for", "j", "in", "range", "(", "1", ",", "len", "(", "x", ")", "+", "1", ")", "]", ")", "\n", "output", "=", "model", "(", "causal_stack", ")", "[", ":", ",", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", ".", "squeeze", "(", "0", ")", "\n", "", "loss", "=", "-", "torch", ".", "trace", "(", "torch", ".", "matmul", "(", "y", ",", "torch", ".", "log", "(", "output", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", "+", "\n", "torch", ".", "matmul", "(", "(", "1", "-", "y", ")", ",", "torch", ".", "log", "(", "1", "-", "output", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", "\n", "count", "+=", "output", ".", "size", "(", "0", ")", "\n", "total_count", "+=", "output", ".", "size", "(", "0", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "args", ".", "clip", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "model_weights", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "idx", ">", "0", "and", "idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "cur_loss", "=", "train_loss", "/", "count", "\n", "print", "(", "\"Epoch {:2d} | lr {:.5f} | loss {:.5f}\"", ".", "format", "(", "ep", ",", "optimizer", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "cur_loss", ")", ")", "\n", "train_loss", "=", "0.0", "\n", "count", "=", "0", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "total_loss", ".", "item", "(", ")", "/", "total_count", ",", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.metrics": [[148, 167], ["writer.add_scalar", "mod.weight.cuda", "writer.add_scalar", "model.modules", "hasattr", "writer.add_scalar", "sum", "len", "sum", "len", "sum", "len", "m.weight.data.norm", "m.distance_from", "getattr"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.distance_from"], ["", "def", "metrics", "(", "epoch", ")", ":", "\n", "\n", "    ", "if", "args", ".", "patch_conv", ":", "\n", "        ", "mods", "=", "[", "m", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "hasattr", "(", "m", ",", "'distance_from'", ")", "]", "\n", "for", "mod", "in", "mods", ":", "\n", "            ", "mod", ".", "weight", "=", "mod", ".", "weight", ".", "cuda", "(", ")", "\n", "", "for", "metric", ",", "metric_kwargs", "in", "[", "\n", "(", "'euclidean'", ",", "{", "}", ")", ",", "\n", "#('frobenius', {'approx': 4}),", "\n", "#('averaged', {'approx': 4, 'samples': 5}),", "\n", "]", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-dist'", "]", ")", ",", "\n", "sum", "(", "m", ".", "distance_from", "(", "'conv'", ",", "metric", "=", "metric", ",", "relative", "=", "True", ",", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "if", "not", "metric", "==", "'averaged'", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'/'", ".", "join", "(", "[", "'conv'", ",", "metric", "+", "'-norm'", "]", ")", ",", "\n", "sum", "(", "getattr", "(", "m", ",", "metric", ")", "(", "**", "metric_kwargs", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "\n", "epoch", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "'conv/weight-norm'", ",", "sum", "(", "m", ".", "weight", ".", "data", ".", "norm", "(", ")", "for", "m", "in", "mods", ")", "/", "len", "(", "mods", ")", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.evaluate": [[168, 196], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "get_batch", "targets[].contiguous().view", "criterion", "data_source.size", "min", "torch.vstack().reshape", "torch.vstack().reshape", "torch.vstack().reshape", "[].contiguous", "model", "output[].contiguous().view", "criterion.item", "data.size", "data_source.size", "targets[].contiguous", "data.size", "torch.vstack", "torch.vstack", "torch.vstack", "output[].contiguous", "model", "torch.vstack().reshape.permute().reshape", "range", "len", "torch.vstack().reshape.permute"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.get_batch"], ["", "", "def", "evaluate", "(", "data_source", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "processed_data_size", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "data_source", ".", "size", "(", "1", ")", "-", "1", ",", "args", ".", "validseqlen", ")", ":", "\n", "            ", "if", "i", "+", "args", ".", "seq_len", "-", "args", ".", "validseqlen", ">=", "data_source", ".", "size", "(", "1", ")", "-", "1", ":", "\n", "                ", "continue", "\n", "", "data", ",", "targets", "=", "get_batch", "(", "data_source", ",", "i", ",", "args", ",", "evaluation", "=", "True", ")", "\n", "\n", "# Discard the effective history, just like in training", "\n", "eff_history", "=", "args", ".", "seq_len", "-", "args", ".", "validseqlen", "\n", "final_target", "=", "targets", "[", ":", ",", "eff_history", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "args", ".", "causal_stack", ":", "\n", "                ", "batchsize", "=", "data", ".", "shape", "[", "0", "]", "\n", "valseqlen", "=", "min", "(", "args", ".", "validseqlen", ",", "data", ".", "shape", "[", "1", "]", "-", "eff_history", ")", "\n", "causal_stack", "=", "torch", ".", "vstack", "(", "[", "data", "[", ":", ",", "j", ":", "j", "+", "eff_history", "]", "for", "j", "in", "range", "(", "1", ",", "valseqlen", "+", "1", ")", "]", ")", ".", "reshape", "(", "valseqlen", ",", "batchsize", ",", "eff_history", ")", "\n", "final_output", "=", "model", "(", "causal_stack", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "reshape", "(", "len", "(", "final_target", ")", ",", "eff_history", ")", ")", "[", ":", ",", "-", "1", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "data", ")", "\n", "final_output", "=", "output", "[", ":", ",", "eff_history", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "n_words", ")", "\n", "", "loss", "=", "criterion", "(", "final_output", ",", "final_target", ")", "\n", "\n", "# Note that we don't add TAR loss here", "\n", "total_loss", "+=", "(", "data", ".", "size", "(", "1", ")", "-", "eff_history", ")", "*", "loss", ".", "item", "(", ")", "\n", "processed_data_size", "+=", "data", ".", "size", "(", "1", ")", "-", "eff_history", "\n", "\n", "", "return", "total_loss", "/", "processed_data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train": [[198, 253], ["model.train", "time.time", "enumerate", "writer.add_scalar", "range", "get_batch", "optimizer.zero_grad", "targets[].contiguous().view", "optimizer.step", "ValueError", "min", "torch.vstack().reshape().permute().reshape", "torch.vstack().reshape().permute().reshape", "torch.vstack().reshape().permute().reshape", "model", "output[].contiguous().view", "criterion", "criterion.backward", "criterion.item", "criterion.item", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "print", "time.time", "train_data.size", "train_data.size", "targets[].contiguous", "len", "len", "len", "criterion.backward", "criterion.item", "criterion.item", "model.model_weights", "time.time", "torch.vstack().reshape().permute", "torch.vstack().reshape().permute", "torch.vstack().reshape().permute", "range", "len", "criterion", "output[].contiguous", "math.exp", "len", "[].contiguous", "train_data.size", "torch.vstack().reshape", "torch.vstack().reshape", "torch.vstack().reshape", "torch.vstack", "torch.vstack", "torch.vstack", "model", "range"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.get_batch", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.darts.DARTS.model_weights"], ["", "", "def", "train", "(", "ep", ")", ":", "\n", "# Turn on training mode which enables dropout.", "\n", "    ", "global", "train_data", "\n", "model", ".", "train", "(", ")", "\n", "train_loss", ",", "total_loss", "=", "0", ",", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "i", "in", "enumerate", "(", "range", "(", "0", ",", "train_data", ".", "size", "(", "1", ")", "-", "1", ",", "args", ".", "validseqlen", ")", ")", ":", "\n", "        ", "if", "i", "+", "args", ".", "seq_len", "-", "args", ".", "validseqlen", ">=", "train_data", ".", "size", "(", "1", ")", "-", "1", ":", "\n", "            ", "continue", "\n", "", "data", ",", "targets", "=", "get_batch", "(", "train_data", ",", "i", ",", "args", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Discard the effective history part", "\n", "eff_history", "=", "args", ".", "seq_len", "-", "args", ".", "validseqlen", "\n", "if", "eff_history", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Valid sequence length must be smaller than sequence length!\"", ")", "\n", "", "final_target", "=", "targets", "[", ":", ",", "eff_history", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "args", ".", "causal_stack", ":", "\n", "            ", "valseqlen", "=", "min", "(", "args", ".", "validseqlen", ",", "data", ".", "shape", "[", "1", "]", "-", "eff_history", ")", "\n", "#causal_stack = torch.vstack([data[:,j:j+eff_history] for j in range(1, valseqlen+1)]).reshape(valseqlen, args.batch_size, eff_history)", "\n", "#final_output = model(causal_stack.permute(1, 0, 2).reshape(len(final_target), eff_history))[:,-1].contiguous()", "\n", "causal_stack", "=", "torch", ".", "vstack", "(", "[", "data", "[", ":", ",", "j", ":", "j", "+", "eff_history", "]", "for", "j", "in", "range", "(", "1", ",", "valseqlen", "+", "1", ")", "]", ")", ".", "reshape", "(", "valseqlen", ",", "args", ".", "batch_size", ",", "eff_history", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "reshape", "(", "len", "(", "final_target", ")", ",", "eff_history", ")", "\n", "span", "=", "len", "(", "final_target", ")", "//", "args", ".", "accumulation_rounds", "\n", "intervals", "=", "[", "(", "offset", ",", "offset", "+", "span", ")", "for", "offset", "in", "range", "(", "0", ",", "len", "(", "final_target", ")", ",", "span", ")", "]", "\n", "if", "len", "(", "intervals", ")", ">", "args", ".", "accumulation_rounds", ":", "\n", "                ", "intervals", "=", "intervals", "[", ":", "-", "1", "]", "\n", "intervals", "[", "-", "1", "]", "=", "(", "intervals", "[", "-", "1", "]", "[", "0", "]", ",", "len", "(", "final_target", ")", ")", "\n", "", "for", "a", ",", "b", "in", "intervals", ":", "\n", "                ", "loss", "=", "criterion", "(", "model", "(", "causal_stack", "[", "a", ":", "b", "]", ")", "[", ":", ",", "-", "1", "]", ".", "contiguous", "(", ")", ",", "final_target", "[", "a", ":", "b", "]", ")", "/", "args", ".", "accumulation_rounds", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", "\n", "final_output", "=", "output", "[", ":", ",", "eff_history", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "n_words", ")", "\n", "loss", "=", "criterion", "(", "final_output", ",", "final_target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "if", "args", ".", "clip", ">", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "model_weights", "(", ")", ",", "args", ".", "clip", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", "and", "batch_idx", ">", "0", ":", "\n", "            ", "cur_loss", "=", "train_loss", "/", "args", ".", "log_interval", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'| epoch {:3d} | {:5d}/{:5d} batches | lr {:02.5f} | ms/batch {:5.5f} | '", "\n", "'loss {:5.2f} | ppl {:8.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "train_data", ".", "size", "(", "1", ")", "//", "args", ".", "validseqlen", ",", "optimizer", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "elapsed", "*", "1000", "/", "args", ".", "log_interval", ",", "cur_loss", ",", "math", ".", "exp", "(", "cur_loss", ")", ")", ")", "\n", "train_loss", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "total_loss", "/", "(", "batch_idx", "+", "1.", ")", ",", "ep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.load_sched": [[255, 259], ["tensorboard.backend.event_processing.event_accumulator.EventAccumulator().Reload", "tensorboard.backend.event_processing.event_accumulator.EventAccumulator", "glob.glob", "EventAccumulator().Reload.Scalars", "EventAccumulator().Reload.Scalars", "os.path.join"], "function", ["None"], ["", "def", "load_sched", "(", "folder", ",", "epoch", ")", ":", "\n", "\n", "    ", "acc", "=", "EventAccumulator", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "args", ".", "warmup_dir", ",", "'events.out*'", ")", ")", "[", "0", "]", ")", ".", "Reload", "(", ")", "\n", "return", "[", "e", ".", "value", "for", "e", "in", "acc", ".", "Scalars", "(", "'valid/loss'", ")", "]", "[", ":", "epoch", "]", ",", "[", "e", ".", "value", "for", "e", "in", "acc", ".", "Scalars", "(", "'hyper/lr'", ")", "]", "[", "epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.model.TCN.__init__": [[10, 25], ["torch.nn.Module.__init__", "torch.nn.Embedding", "TCN.tcn.TemporalConvNet", "torch.nn.Linear", "torch.nn.Dropout", "model.TCN.init_weights", "print", "ValueError"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.model.TCN.init_weights"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "C_prev_prev", ",", "C_prev", ",", "C", ")", "\n", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "      ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.model.TCN.init_weights": [[26, 30], ["model.TCN.encoder.weight.data.normal_", "model.TCN.decoder.bias.data.fill_", "model.TCN.decoder.weight.data.normal_"], "methods", ["None"], ["", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n", "", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "    ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.model.TCN.forward": [[31, 37], ["model.TCN.drop", "model.TCN.tcn().transpose", "model.TCN.decoder", "model.TCN.contiguous", "model.TCN.encoder", "model.TCN.tcn", "model.TCN.transpose"], "methods", ["None"], ["self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "      ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Dictionary.__init__": [[25, 28], ["None"], "methods", ["None"], ["\n", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Dictionary.add_word": [[29, 34], ["utils.Dictionary.idx2word.append", "len"], "methods", ["None"], ["\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Dictionary.__len__": [[35, 37], ["len"], "methods", ["None"], ["for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Corpus.__init__": [[40, 45], ["utils.Dictionary", "utils.Corpus.tokenize", "utils.Corpus.tokenize", "utils.Corpus.tokenize", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Corpus.tokenize", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Corpus.tokenize", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Corpus.tokenize"], ["\n", "", "class", "Cutout", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Corpus.tokenize": [[46, 69], ["os.path.exists", "open", "open", "torch.LongTensor", "len", "line.split", "utils.Corpus.dictionary.add_word", "line.split"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.Dictionary.add_word"], ["        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n", "\n", "", "", "class", "RowColPermute", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "row", ",", "col", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rowperm", "=", "torch", ".", "randperm", "(", "row", ")", "if", "type", "(", "row", ")", "==", "int", "else", "row", "\n", "self", ".", "colperm", "=", "torch", ".", "randperm", "(", "col", ")", "if", "type", "(", "col", ")", "==", "int", "else", "col", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.data_generator": [[15, 22], ["os.path.exists", "pickle.load", "utils.Corpus", "pickle.dump", "open", "open"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.DARTS.utils.load"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.batchify": [[71, 82], ["data.cuda.narrow", "data.cuda.view", "data.cuda.size", "data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "def", "forward", "(", "self", ",", "tensor", ")", ":", "\n", "\n", "        ", "return", "tensor", "[", ":", ",", "self", ".", "rowperm", "]", "[", ":", ",", ":", ",", "self", ".", "colperm", "]", "\n", "\n", "\n", "", "", "def", "_data_transforms_cifar10", "(", "args", ",", "logging", "=", "None", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", "\n", "\n", "if", "args", ".", "permute", ":", "\n", "      ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.utils.get_batch": [[84, 89], ["min", "source.size"], "function", ["None"], ["row", ",", "col", "=", "PERMS", "[", "args", ".", "arch", "]", "\n", "logging", ".", "info", "(", "\"using permutation associated with \"", "+", "args", ".", "arch", ")", "\n", "permute", "=", "RowColPermute", "(", "torch", ".", "LongTensor", "(", "row", ")", ",", "torch", ".", "LongTensor", "(", "col", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "          ", "permute", "=", "RowColPermute", "(", "32", ",", "32", ")", "\n", "", "train", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "permute", ",", "normalize", "]", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.SpectralConv2d.__init__": [[46, 61], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "modes1", ",", "modes2", ")", ":", "\n", "        ", "super", "(", "SpectralConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        2D Fourier layer. It does FFT, linear transform, and Inverse FFT.    \n        \"\"\"", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "modes1", "=", "modes1", "#Number of Fourier modes to multiply, at most floor(N/2) + 1", "\n", "self", ".", "modes2", "=", "modes2", "\n", "\n", "self", ".", "scale", "=", "(", "1", "/", "(", "in_channels", "*", "out_channels", ")", ")", "\n", "self", ".", "weights1", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "2", ")", ")", "\n", "self", ".", "weights2", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.SpectralConv2d.forward": [[62, 77], ["torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fourier_2d.compl_mul2d", "fourier_2d.compl_mul2d", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.compl_mul2d", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.compl_mul2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "#Compute Fourier coeffcients up to factor of e^(- something constant)", "\n", "x_ft", "=", "torch", ".", "rfft", "(", "x", ",", "2", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ")", "\n", "\n", "# Multiply relevant Fourier modes", "\n", "out_ft", "=", "torch", ".", "zeros", "(", "batchsize", ",", "self", ".", "in_channels", ",", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", "//", "2", "+", "1", ",", "2", ",", "device", "=", "x", ".", "device", ")", "\n", "out_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", ":", "self", ".", "modes2", "]", "=", "compl_mul2d", "(", "x_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", ":", "self", ".", "modes2", "]", ",", "self", ".", "weights1", ")", "\n", "out_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", ":", "self", ".", "modes2", "]", "=", "compl_mul2d", "(", "x_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", ":", "self", ".", "modes2", "]", ",", "self", ".", "weights2", ")", "\n", "\n", "#Return to physical space", "\n", "x", "=", "torch", ".", "irfft", "(", "out_ft", ",", "2", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ",", "signal_sizes", "=", "(", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.SimpleBlock2d.__init__": [[79, 138], ["torch.Module.__init__", "print", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fourier_2d.SpectralConv2d", "fourier_2d.SpectralConv2d", "fourier_2d.SpectralConv2d", "fourier_2d.SpectralConv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes1", ",", "modes2", ",", "width", ",", "arch", "=", "'fno'", ",", "s", "=", "5", ")", ":", "\n", "        ", "super", "(", "SimpleBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        The overall network. It contains 4 layers of the Fourier layer.\n        1. Lift the input to the desire channel dimension by self.fc0 .\n        2. 4 layers of the integral operators u' = (W + K)(u).\n            W defined by self.w; K defined by self.conv .\n        3. Project from the channel space to the output space by self.fc1 and self.fc2 .\n        \n        input: the solution of the coefficient function and locations (a(x, y), x, y)\n        input shape: (batchsize, x=s, y=s, c=3)\n        output: the solution \n        output shape: (batchsize, x=s, y=s, c=1)\n        \"\"\"", "\n", "\n", "self", ".", "modes1", "=", "modes1", "\n", "self", ".", "modes2", "=", "modes2", "\n", "print", "(", "modes1", ",", "modes2", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "3", ",", "self", ".", "width", ")", "# input channel is 3: (a(x, y), x, y)", "\n", "\n", "if", "arch", "==", "'fno'", ":", "\n", "            ", "self", ".", "conv0", "=", "SpectralConv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "self", ".", "modes1", ",", "self", ".", "modes2", ")", "\n", "self", ".", "conv1", "=", "SpectralConv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "self", ".", "modes1", ",", "self", ".", "modes2", ")", "\n", "self", ".", "conv2", "=", "SpectralConv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "self", ".", "modes1", ",", "self", ".", "modes2", ")", "\n", "self", ".", "conv3", "=", "SpectralConv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "self", ".", "modes1", ",", "self", ".", "modes2", ")", "\n", "", "elif", "(", "arch", "==", "'conv'", ")", "or", "(", "arch", "==", "'xd'", ")", ":", "\n", "            ", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "6", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "6", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "6", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "6", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "w0", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w1", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w2", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w3", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm2d", "(", "self", ".", "width", ")", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "width", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.SimpleBlock2d.forward": [[139, 168], ["fourier_2d.SimpleBlock2d.fc0", "fourier_2d.SimpleBlock2d.permute", "fourier_2d.SimpleBlock2d.conv0", "fourier_2d.SimpleBlock2d.w0().view", "fourier_2d.SimpleBlock2d.bn0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_2d.SimpleBlock2d.conv1", "fourier_2d.SimpleBlock2d.w1().view", "fourier_2d.SimpleBlock2d.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_2d.SimpleBlock2d.conv2", "fourier_2d.SimpleBlock2d.w2().view", "fourier_2d.SimpleBlock2d.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_2d.SimpleBlock2d.conv3", "fourier_2d.SimpleBlock2d.w3().view", "fourier_2d.SimpleBlock2d.bn3", "fourier_2d.SimpleBlock2d.permute", "fourier_2d.SimpleBlock2d.fc1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_2d.SimpleBlock2d.fc2", "fourier_2d.SimpleBlock2d.w0", "fourier_2d.SimpleBlock2d.w1", "fourier_2d.SimpleBlock2d.w2", "fourier_2d.SimpleBlock2d.w3", "fourier_2d.SimpleBlock2d.view", "fourier_2d.SimpleBlock2d.view", "fourier_2d.SimpleBlock2d.view", "fourier_2d.SimpleBlock2d.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "size_x", ",", "size_y", "=", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "\n", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "x1", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x2", "=", "self", ".", "w0", "(", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ")", "\n", "x", "=", "self", ".", "bn0", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "self", ".", "w1", "(", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x2", "=", "self", ".", "w2", "(", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x2", "=", "self", ".", "w3", "(", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x1", "+", "x2", ")", "\n", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.Net2d.__init__": [[170, 178], ["torch.Module.__init__", "fourier_2d.SimpleBlock2d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes", ",", "width", ",", "arch", "=", "'fno'", ",", "s", "=", "5", ")", ":", "\n", "        ", "super", "(", "Net2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        A wrapper function\n        \"\"\"", "\n", "\n", "self", ".", "conv1", "=", "SimpleBlock2d", "(", "modes", ",", "modes", ",", "width", ",", "arch", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.Net2d.forward": [[180, 183], ["fourier_2d.Net2d.conv1", "fourier_2d.Net2d.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.Net2d.count_params": [[185, 191], ["fourier_2d.Net2d.parameters", "functools.reduce", "list", "p.size"], "methods", ["None"], ["", "def", "count_params", "(", "self", ")", ":", "\n", "        ", "c", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "c", "+=", "reduce", "(", "operator", ".", "mul", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.compl_mul2d": [[33, 40], ["functools.partial", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial."], "function", ["None"], ["def", "compl_mul2d", "(", "a", ",", "b", ")", ":", "\n", "# (batch, in_channel, x,y ), (in_channel, out_channel, x,y) -> (batch, out_channel, x,y)", "\n", "    ", "op", "=", "partial", "(", "torch", ".", "einsum", ",", "\"bixy,ioxy->boxy\"", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_2d.main": [[192, 364], ["int", "utilities3.MatReader", "utilities3.MatReader.load_file", "utilities3.UnitGaussianNormalizer", "utilities3.UnitGaussianNormalizer.encode", "utilities3.UnitGaussianNormalizer.encode", "utilities3.UnitGaussianNormalizer", "utilities3.UnitGaussianNormalizer.encode", "grids.append", "grids.append", "torch.tensor.reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "fourier_2d.Net2d", "Net2d.cuda", "print", "print", "nas.MixedOptimizer", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utilities3.LpLoss", "utilities3.UnitGaussianNormalizer.cuda", "range", "numpy.linspace", "numpy.linspace", "numpy.vstack", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Net2d.named_modules", "Net2d.patch_conv", "fourier_2d.Net2d.count_params", "functools.partial", "Net2d.train", "timeit.default_timer", "nas.MixedOptimizer.zero_grad", "enumerate", "torch.optim.lr_scheduler.LambdaLR.step", "Net2d.eval", "timeit.default_timer", "print", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "torch.cat.reshape", "torch.tensor.repeat", "torch.cat.reshape", "torch.tensor.repeat", "chrysalis.Chrysalis.metamorphosize", "isinstance", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "arch_opt", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fourier_2d.main.weight_sched"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.load_file", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_conv", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.count_params", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.metamorphosize"], ["", "", "def", "main", "(", "sub", "=", "5", ",", "arch", "=", "'fno'", ",", "epochs", "=", "500", ",", "acc_steps", "=", "1", ",", "datapath", "=", "'data/'", ",", "\n", "arch_lr", "=", "0.001", ",", "arch_momentum", "=", "0.0", ",", "arch_sgd", "=", "False", ",", "\n", "warmup_epochs", "=", "0", ",", "cooldown_epochs", "=", "0", ",", "start_epoch", "=", "0", ")", ":", "\n", "# Set acc_steps to 5 for full resolution", "\n", "################################################################", "\n", "# configs", "\n", "################################################################", "\n", "#TRAIN_PATH = '../../../data/fno/Darcy_421/piececonst_r421_N1024_smooth1.mat'", "\n", "#TEST_PATH = '../../../data/fno/Darcy_421/piececonst_r421_N1024_smooth2.mat'", "\n", "    ", "TRAIN_PATH", "=", "datapath", "+", "'Darcy_421/piececonst_r421_N1024_smooth1.mat'", "\n", "TEST_PATH", "=", "datapath", "+", "'Darcy_421/piececonst_r421_N1024_smooth2.mat'", "\n", "\n", "ntrain", "=", "1000", "\n", "ntest", "=", "100", "\n", "\n", "batch_size", "=", "20", "//", "acc_steps", "\n", "learning_rate", "=", "0.001", "\n", "\n", "epochs", "=", "epochs", "\n", "step_size", "=", "100", "\n", "gamma", "=", "0.5", "\n", "\n", "modes", "=", "12", "\n", "width", "=", "32", "\n", "\n", "r", "=", "sub", "#5 # 5, 3, 2, 1", "\n", "h", "=", "int", "(", "(", "(", "421", "-", "1", ")", "/", "r", ")", "+", "1", ")", "\n", "s", "=", "h", "\n", "\n", "################################################################", "\n", "# load data and data normalization", "\n", "################################################################", "\n", "reader", "=", "MatReader", "(", "TRAIN_PATH", ")", "\n", "x_train", "=", "reader", ".", "read_field", "(", "'coeff'", ")", "[", ":", "ntrain", ",", ":", ":", "r", ",", ":", ":", "r", "]", "[", ":", ",", ":", "s", ",", ":", "s", "]", "\n", "y_train", "=", "reader", ".", "read_field", "(", "'sol'", ")", "[", ":", "ntrain", ",", ":", ":", "r", ",", ":", ":", "r", "]", "[", ":", ",", ":", "s", ",", ":", "s", "]", "\n", "\n", "reader", ".", "load_file", "(", "TEST_PATH", ")", "\n", "x_test", "=", "reader", ".", "read_field", "(", "'coeff'", ")", "[", ":", "ntest", ",", ":", ":", "r", ",", ":", ":", "r", "]", "[", ":", ",", ":", "s", ",", ":", "s", "]", "\n", "y_test", "=", "reader", ".", "read_field", "(", "'sol'", ")", "[", ":", "ntest", ",", ":", ":", "r", ",", ":", ":", "r", "]", "[", ":", ",", ":", "s", ",", ":", "s", "]", "\n", "\n", "x_normalizer", "=", "UnitGaussianNormalizer", "(", "x_train", ")", "\n", "x_train", "=", "x_normalizer", ".", "encode", "(", "x_train", ")", "\n", "x_test", "=", "x_normalizer", ".", "encode", "(", "x_test", ")", "\n", "\n", "y_normalizer", "=", "UnitGaussianNormalizer", "(", "y_train", ")", "\n", "y_train", "=", "y_normalizer", ".", "encode", "(", "y_train", ")", "\n", "\n", "grids", "=", "[", "]", "\n", "grids", ".", "append", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "s", ")", ")", "\n", "grids", ".", "append", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "s", ")", ")", "\n", "grid", "=", "np", ".", "vstack", "(", "[", "xx", ".", "ravel", "(", ")", "for", "xx", "in", "np", ".", "meshgrid", "(", "*", "grids", ")", "]", ")", ".", "T", "\n", "grid", "=", "grid", ".", "reshape", "(", "1", ",", "s", ",", "s", ",", "2", ")", "\n", "grid", "=", "torch", ".", "tensor", "(", "grid", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "x_train", "=", "torch", ".", "cat", "(", "[", "x_train", ".", "reshape", "(", "ntrain", ",", "s", ",", "s", ",", "1", ")", ",", "grid", ".", "repeat", "(", "ntrain", ",", "1", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "3", ")", "\n", "x_test", "=", "torch", ".", "cat", "(", "[", "x_test", ".", "reshape", "(", "ntest", ",", "s", ",", "s", ",", "1", ")", ",", "grid", ".", "repeat", "(", "ntest", ",", "1", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_train", ",", "y_train", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_test", ",", "y_test", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "################################################################", "\n", "# training and evaluation", "\n", "################################################################", "\n", "model", "=", "Net2d", "(", "modes", ",", "width", ",", "arch", ",", "s", ")", "\n", "\n", "# Convert to NAS search space, if applicable", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "X", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "s", ",", "s", ",", "3", "]", ")", "\n", "model", ",", "original", "=", "Chrysalis", ".", "metamorphosize", "(", "model", ")", ",", "model", "\n", "\n", "arch_kwargs", "=", "{", "\n", "'kmatrix_depth'", ":", "1", ",", "\n", "'max_kernel_size'", ":", "1", ",", "\n", "'global_biasing'", ":", "False", ",", "\n", "'channel_gating'", ":", "False", ",", "\n", "'base'", ":", "2", ",", "\n", "}", "\n", "\n", "named_modules", "=", "[", "]", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "named_modules", ".", "append", "(", "(", "name", ",", "layer", ")", ")", "\n", "\n", "\n", "# Only patch conv2d", "\n", "", "", "model", ".", "patch_conv", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "named_modules", ",", "**", "arch_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "arch_lr", "=", "0.0", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "model", ".", "cuda", "(", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "momentum", "=", "partial", "(", "torch", ".", "optim", ".", "SGD", ",", "momentum", "=", "arch_momentum", ")", "\n", "arch_opt", "=", "momentum", "if", "arch_sgd", "else", "torch", ".", "optim", ".", "Adam", "\n", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "xd_weights", "(", ")", ")", "}", ",", "\n", "{", "'params'", ":", "list", "(", "model", ".", "nonxd_weights", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", ",", "\n", "arch_opt", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "arch_params", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "arch_lr", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "else", ":", "\n", "        ", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "optimizer", "=", "MixedOptimizer", "(", "opts", ",", "op_decay", "=", "None", ")", "\n", "\n", "#weight_sched = torch.optim.lr_scheduler.StepLR(optimizer, ", "\n", "#    step_size=step_size, gamma=gamma)", "\n", "\n", "def", "weight_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "gamma", "**", "(", "epoch", "//", "step_size", ")", "\n", "\n", "", "def", "arch_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "0.0", "if", "(", "epoch", "<", "warmup_epochs", ")", "or", "(", "epoch", ">", "epochs", "-", "cooldown_epochs", ")", "else", "weight_sched", "(", "epoch", ")", "\n", "\n", "", "if", "arch", "==", "'xd'", ":", "\n", "        ", "sched_groups", "=", "[", "\n", "weight_sched", "if", "g", "[", "'params'", "]", "[", "0", "]", "in", "set", "(", "model", ".", "model_weights", "(", ")", ")", "else", "arch_sched", "for", "g", "in", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "        ", "sched_groups", "=", "[", "weight_sched", "]", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "lr_lambda", "=", "sched_groups", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "\n", "\n", "#optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)", "\n", "\n", "\n", "myloss", "=", "LpLoss", "(", "size_average", "=", "False", ")", "\n", "y_normalizer", ".", "cuda", "(", ")", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "t1", "=", "default_timer", "(", ")", "\n", "train_mse", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "# loss = F.mse_loss(model(x).view(-1), y.view(-1), reduction='mean')", "\n", "out", "=", "model", "(", "x", ")", "\n", "out", "=", "y_normalizer", ".", "decode", "(", "out", ")", "\n", "y", "=", "y_normalizer", ".", "decode", "(", "y", ")", "\n", "loss", "=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "acc_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Is this accumulating too many times?", "\n", "", "train_mse", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "abs_err", "=", "0.0", "\n", "rel_err", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "model", "(", "x", ")", "\n", "out", "=", "y_normalizer", ".", "decode", "(", "model", "(", "x", ")", ")", "\n", "\n", "rel_err", "+=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "", "train_mse", "/=", "ntrain", "\n", "abs_err", "/=", "ntest", "\n", "rel_err", "/=", "ntest", "\n", "\n", "t2", "=", "default_timer", "(", ")", "\n", "print", "(", "ep", ",", "t2", "-", "t1", ",", "train_mse", ",", "rel_err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.SpectralConv1d.__init__": [[43, 56], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "modes1", ")", ":", "\n", "        ", "super", "(", "SpectralConv1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        1D Fourier layer. It does FFT, linear transform, and Inverse FFT.    \n        \"\"\"", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "modes1", "=", "modes1", "#Number of Fourier modes to multiply, at most floor(N/2) + 1", "\n", "\n", "self", ".", "scale", "=", "(", "1", "/", "(", "in_channels", "*", "out_channels", ")", ")", "\n", "self", ".", "weights1", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.SpectralConv1d.forward": [[57, 69], ["torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fourier_1d.compl_mul1d", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.compl_mul1d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "#Compute Fourier coeffcients up to factor of e^(- something constant)", "\n", "x_ft", "=", "torch", ".", "rfft", "(", "x", ",", "1", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ")", "\n", "\n", "# Multiply relevant Fourier modes", "\n", "out_ft", "=", "torch", ".", "zeros", "(", "batchsize", ",", "self", ".", "in_channels", ",", "x", ".", "size", "(", "-", "1", ")", "//", "2", "+", "1", ",", "2", ",", "device", "=", "x", ".", "device", ")", "\n", "out_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", "]", "=", "compl_mul1d", "(", "x_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", "]", ",", "self", ".", "weights1", ")", "\n", "\n", "#Return to physical space", "\n", "x", "=", "torch", ".", "irfft", "(", "out_ft", ",", "1", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ",", "signal_sizes", "=", "(", "x", ".", "size", "(", "-", "1", ")", ",", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.SimpleBlock1d.__init__": [[71, 124], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fourier_1d.SpectralConv1d", "fourier_1d.SpectralConv1d", "fourier_1d.SpectralConv1d", "fourier_1d.SpectralConv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes", ",", "width", ",", "arch", "=", "'xd'", ",", "s", "=", "1024", ")", ":", "\n", "        ", "super", "(", "SimpleBlock1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        The overall network. It contains 4 layers of the Fourier layer.\n        1. Lift the input to the desire channel dimension by self.fc0 .\n        2. 4 layers of the integral operators u' = (W + K)(u).\n            W defined by self.w; K defined by self.conv .\n        3. Project from the channel space to the output space by self.fc1 and self.fc2 .\n        \n        input: the solution of the initial condition and location (a(x), x)\n        input shape: (batchsize, x=s, c=2)\n        output: the solution of a later timestep\n        output shape: (batchsize, x=s, c=1)\n        \"\"\"", "\n", "\n", "self", ".", "modes1", "=", "modes", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "2", ",", "self", ".", "width", ")", "# input channel is 2: (a(x), x)", "\n", "\n", "if", "arch", "==", "'fno'", ":", "\n", "            ", "self", ".", "conv0", "=", "SpectralConv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ")", "\n", "self", ".", "conv1", "=", "SpectralConv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ")", "\n", "self", ".", "conv2", "=", "SpectralConv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ")", "\n", "self", ".", "conv3", "=", "SpectralConv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ")", "\n", "", "elif", "(", "arch", "==", "'conv'", ")", "or", "(", "arch", "==", "'xd'", ")", ":", "\n", "            ", "self", ".", "conv0", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "8", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "8", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "8", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "8", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "w0", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w1", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w2", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w3", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "width", ")", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "width", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.SimpleBlock1d.forward": [[125, 152], ["fourier_1d.SimpleBlock1d.fc0", "fourier_1d.SimpleBlock1d.permute", "fourier_1d.SimpleBlock1d.conv0", "fourier_1d.SimpleBlock1d.w0", "fourier_1d.SimpleBlock1d.bn0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_1d.SimpleBlock1d.conv1", "fourier_1d.SimpleBlock1d.w1", "fourier_1d.SimpleBlock1d.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_1d.SimpleBlock1d.conv2", "fourier_1d.SimpleBlock1d.w2", "fourier_1d.SimpleBlock1d.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_1d.SimpleBlock1d.conv3", "fourier_1d.SimpleBlock1d.w3", "fourier_1d.SimpleBlock1d.bn3", "fourier_1d.SimpleBlock1d.permute", "fourier_1d.SimpleBlock1d.fc1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_1d.SimpleBlock1d.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "x1", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x2", "=", "self", ".", "w0", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "self", ".", "w1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x2", "=", "self", ".", "w2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x2", "=", "self", ".", "w3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x1", "+", "x2", ")", "\n", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.Net1d.__init__": [[154, 162], ["torch.Module.__init__", "fourier_1d.SimpleBlock1d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes", ",", "width", ",", "arch", "=", "'fno'", ",", "s", "=", "1024", ")", ":", "\n", "        ", "super", "(", "Net1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        A wrapper function\n        \"\"\"", "\n", "\n", "self", ".", "conv1", "=", "SimpleBlock1d", "(", "modes", ",", "width", ",", "arch", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.Net1d.forward": [[164, 167], ["fourier_1d.Net1d.conv1", "fourier_1d.Net1d.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.Net1d.count_params": [[168, 174], ["fourier_1d.Net1d.parameters", "functools.reduce", "list", "p.size"], "methods", ["None"], ["", "def", "count_params", "(", "self", ")", ":", "\n", "        ", "c", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "c", "+=", "reduce", "(", "operator", ".", "mul", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.compl_mul1d": [[31, 38], ["functools.partial", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial."], "function", ["None"], ["def", "compl_mul1d", "(", "a", ",", "b", ")", ":", "\n", "# (batch, in_channel, x ), (in_channel, out_channel, x) -> (batch, out_channel, x)", "\n", "    ", "op", "=", "partial", "(", "torch", ".", "einsum", ",", "\"bix,iox->box\"", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_1d.main": [[176, 355], ["print", "utilities3.MatReader", "numpy.linspace().reshape", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "fourier_1d.Net1d", "Net1d.cuda", "print", "print", "nas.MixedOptimizer", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utilities3.LpLoss", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Net1d.named_modules", "Net1d.patch_conv", "fourier_1d.Net1d.count_params", "functools.partial", "Net1d.train", "timeit.default_timer", "nas.MixedOptimizer.zero_grad", "enumerate", "torch.optim.lr_scheduler.LambdaLR.step", "Net1d.eval", "len", "timeit.default_timer", "print", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.linspace", "torch.cat.reshape", "torch.tensor.repeat", "torch.cat.reshape", "torch.tensor.repeat", "chrysalis.Chrysalis.metamorphosize", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "arch_opt", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fourier_1d.main.weight_sched"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_conv", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.count_params", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.metamorphosize"], ["", "", "def", "main", "(", "sub", "=", "2", "**", "3", ",", "arch", "=", "'fno'", ",", "epochs", "=", "500", ",", "acc_steps", "=", "1", ",", "datapath", "=", "'data/'", ",", "\n", "arch_lr", "=", "0.001", ",", "arch_momentum", "=", "0.0", ",", "arch_sgd", "=", "False", ",", "\n", "warmup_epochs", "=", "0", ",", "cooldown_epochs", "=", "0", ",", "start_epoch", "=", "0", ")", ":", "\n", "################################################################", "\n", "#  configurations", "\n", "################################################################", "\n", "    ", "ntrain", "=", "1000", "\n", "ntest", "=", "100", "\n", "\n", "print", "(", "sub", ",", "arch", ")", "\n", "\n", "#sub = 1 #subsampling rate", "\n", "#h = 2**10 // sub", "\n", "#s = h", "\n", "#sub = 2**3 #subsampling rate", "\n", "h", "=", "2", "**", "13", "//", "sub", "\n", "s", "=", "h", "\n", "\n", "batch_size", "=", "20", "//", "acc_steps", "\n", "learning_rate", "=", "0.001", "\n", "\n", "epochs", "=", "epochs", "\n", "step_size", "=", "100", "\n", "gamma", "=", "0.5", "\n", "\n", "modes", "=", "16", "\n", "width", "=", "64", "\n", "\n", "\n", "################################################################", "\n", "# read data", "\n", "################################################################", "\n", "dataloader", "=", "MatReader", "(", "datapath", "+", "'burgers_data_R10.mat'", ")", "\n", "x_data", "=", "dataloader", ".", "read_field", "(", "'a'", ")", "[", ":", ",", ":", ":", "sub", "]", "\n", "y_data", "=", "dataloader", ".", "read_field", "(", "'u'", ")", "[", ":", ",", ":", ":", "sub", "]", "\n", "\n", "x_train", "=", "x_data", "[", ":", "ntrain", ",", ":", "]", "\n", "y_train", "=", "y_data", "[", ":", "ntrain", ",", ":", "]", "\n", "x_test", "=", "x_data", "[", "-", "ntest", ":", ",", ":", "]", "\n", "y_test", "=", "y_data", "[", "-", "ntest", ":", ",", ":", "]", "\n", "\n", "# cat the locations information", "\n", "grid", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "s", ")", ".", "reshape", "(", "1", ",", "s", ",", "1", ")", "\n", "grid", "=", "torch", ".", "tensor", "(", "grid", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "x_train", "=", "torch", ".", "cat", "(", "[", "x_train", ".", "reshape", "(", "ntrain", ",", "s", ",", "1", ")", ",", "grid", ".", "repeat", "(", "ntrain", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "x_test", "=", "torch", ".", "cat", "(", "[", "x_test", ".", "reshape", "(", "ntest", ",", "s", ",", "1", ")", ",", "grid", ".", "repeat", "(", "ntest", ",", "1", ",", "1", ")", "]", ",", "dim", "=", "2", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_train", ",", "y_train", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_test", ",", "y_test", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "# model", "\n", "model", "=", "Net1d", "(", "modes", ",", "width", ",", "arch", ",", "s", ")", "\n", "\n", "# Convert to NAS search space, if applicable", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "X", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "s", ",", "2", "\n", "]", ")", "\n", "model", ",", "original", "=", "Chrysalis", ".", "metamorphosize", "(", "model", ")", ",", "model", "\n", "\n", "arch_kwargs", "=", "{", "\n", "'kmatrix_depth'", ":", "1", ",", "\n", "'max_kernel_size'", ":", "1", ",", "\n", "'global_biasing'", ":", "False", ",", "\n", "'channel_gating'", ":", "False", ",", "\n", "'base'", ":", "2", ",", "\n", "}", "\n", "\n", "# TODO filter out skip connect convs", "\n", "named_modules", "=", "[", "]", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv1d", ")", "and", "'.conv'", "in", "name", ":", "\n", "                ", "named_modules", ".", "append", "(", "(", "name", ",", "layer", ")", ")", "\n", "\n", "# Only patch non-skip connect conv1d", "\n", "", "", "model", ".", "patch_conv", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "named_modules", ",", "**", "arch_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "arch_lr", "=", "0.0", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "model", ".", "cuda", "(", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "\n", "\n", "################################################################", "\n", "# training and evaluation", "\n", "################################################################", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "momentum", "=", "partial", "(", "torch", ".", "optim", ".", "SGD", ",", "momentum", "=", "arch_momentum", ")", "\n", "arch_opt", "=", "momentum", "if", "arch_sgd", "else", "torch", ".", "optim", ".", "Adam", "\n", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "xd_weights", "(", ")", ")", "}", ",", "\n", "{", "'params'", ":", "list", "(", "model", ".", "nonxd_weights", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", ",", "\n", "arch_opt", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "arch_params", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "arch_lr", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "else", ":", "\n", "        ", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "optimizer", "=", "MixedOptimizer", "(", "opts", ",", "op_decay", "=", "None", ")", "\n", "\n", "#weight_sched = torch.optim.lr_scheduler.StepLR(optimizer, ", "\n", "#    step_size=step_size, gamma=gamma)", "\n", "\n", "def", "weight_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "gamma", "**", "(", "epoch", "//", "step_size", ")", "\n", "\n", "", "def", "arch_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "0.0", "if", "(", "epoch", "<", "warmup_epochs", ")", "or", "(", "epoch", ">", "epochs", "-", "cooldown_epochs", ")", "else", "weight_sched", "(", "epoch", ")", "\n", "\n", "", "if", "arch", "==", "'xd'", ":", "\n", "        ", "sched_groups", "=", "[", "\n", "weight_sched", "if", "g", "[", "'params'", "]", "[", "0", "]", "in", "set", "(", "model", ".", "model_weights", "(", ")", ")", "else", "arch_sched", "for", "g", "in", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "        ", "sched_groups", "=", "[", "weight_sched", "]", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "lr_lambda", "=", "sched_groups", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "\n", "\n", "#optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)", "\n", "\n", "myloss", "=", "LpLoss", "(", "size_average", "=", "False", ")", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "t1", "=", "default_timer", "(", ")", "\n", "train_mse", "=", "0", "\n", "train_l2", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "out", "=", "model", "(", "x", ")", "\n", "\n", "mse", "=", "F", ".", "mse_loss", "(", "out", ",", "y", ",", "reduction", "=", "'mean'", ")", "\n", "# mse.backward()", "\n", "l2", "=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "l2", ".", "backward", "(", ")", "# use the l2 relative loss", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "acc_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#optimizer.step()", "\n", "", "train_mse", "+=", "mse", ".", "item", "(", ")", "\n", "train_l2", "+=", "l2", ".", "item", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_l2", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "model", "(", "x", ")", "\n", "test_l2", "+=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "", "train_mse", "/=", "len", "(", "train_loader", ")", "\n", "train_l2", "/=", "ntrain", "\n", "test_l2", "/=", "ntest", "\n", "\n", "t2", "=", "default_timer", "(", ")", "\n", "print", "(", "ep", ",", "t2", "-", "t1", ",", "train_mse", ",", "train_l2", ",", "test_l2", ")", "\n", "\n", "# torch.save(model, 'model/ns_fourier_burgers_8192')", "\n", "", "pred", "=", "torch", ".", "zeros", "(", "y_test", ".", "shape", ")", "\n", "index", "=", "0", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_test", ",", "y_test", ")", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "            ", "test_l2", "=", "0", "\n", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "model", "(", "x", ")", "\n", "pred", "[", "index", "]", "=", "out", "\n", "\n", "test_l2", "+=", "myloss", "(", "out", ".", "view", "(", "1", ",", "-", "1", ")", ",", "y", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "index", ",", "test_l2", ")", "\n", "index", "=", "index", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.SpectralConv3d_fast.__init__": [[48, 66], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "modes1", ",", "modes2", ",", "modes3", ")", ":", "\n", "        ", "super", "(", "SpectralConv3d_fast", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        3D Fourier layer. It does FFT, linear transform, and Inverse FFT.    \n        \"\"\"", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "modes1", "=", "modes1", "#Number of Fourier modes to multiply, at most floor(N/2) + 1", "\n", "self", ".", "modes2", "=", "modes2", "\n", "self", ".", "modes3", "=", "modes3", "\n", "\n", "self", ".", "scale", "=", "(", "1", "/", "(", "in_channels", "*", "out_channels", ")", ")", "\n", "self", ".", "weights1", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ",", "2", ")", ")", "\n", "self", ".", "weights2", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ",", "2", ")", ")", "\n", "self", ".", "weights3", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ",", "2", ")", ")", "\n", "self", ".", "weights4", "=", "nn", ".", "Parameter", "(", "self", ".", "scale", "*", "torch", ".", "rand", "(", "in_channels", ",", "out_channels", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.SpectralConv3d_fast.forward": [[67, 87], ["torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.rfft", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fourier_3d.compl_mul3d", "fourier_3d.compl_mul3d", "fourier_3d.compl_mul3d", "fourier_3d.compl_mul3d", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size", "torch.irfft.size"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.compl_mul3d", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.compl_mul3d", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.compl_mul3d", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.compl_mul3d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "#Compute Fourier coeffcients up to factor of e^(- something constant)", "\n", "x_ft", "=", "torch", ".", "rfft", "(", "x", ",", "3", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ")", "\n", "\n", "# Multiply relevant Fourier modes", "\n", "out_ft", "=", "torch", ".", "zeros", "(", "batchsize", ",", "self", ".", "in_channels", ",", "x", ".", "size", "(", "-", "3", ")", ",", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", "//", "2", "+", "1", ",", "2", ",", "device", "=", "x", ".", "device", ")", "\n", "out_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", ":", "self", ".", "modes2", ",", ":", "self", ".", "modes3", "]", "=", "compl_mul3d", "(", "x_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", ":", "self", ".", "modes2", ",", ":", "self", ".", "modes3", "]", ",", "self", ".", "weights1", ")", "\n", "out_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", ":", "self", ".", "modes2", ",", ":", "self", ".", "modes3", "]", "=", "compl_mul3d", "(", "x_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", ":", "self", ".", "modes2", ",", ":", "self", ".", "modes3", "]", ",", "self", ".", "weights2", ")", "\n", "out_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", "-", "self", ".", "modes2", ":", ",", ":", "self", ".", "modes3", "]", "=", "compl_mul3d", "(", "x_ft", "[", ":", ",", ":", ",", ":", "self", ".", "modes1", ",", "-", "self", ".", "modes2", ":", ",", ":", "self", ".", "modes3", "]", ",", "self", ".", "weights3", ")", "\n", "out_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", "-", "self", ".", "modes2", ":", ",", ":", "self", ".", "modes3", "]", "=", "compl_mul3d", "(", "x_ft", "[", ":", ",", ":", ",", "-", "self", ".", "modes1", ":", ",", "-", "self", ".", "modes2", ":", ",", ":", "self", ".", "modes3", "]", ",", "self", ".", "weights4", ")", "\n", "\n", "#Return to physical space", "\n", "x", "=", "torch", ".", "irfft", "(", "out_ft", ",", "3", ",", "normalized", "=", "True", ",", "onesided", "=", "True", ",", "\n", "signal_sizes", "=", "(", "x", ".", "size", "(", "-", "3", ")", ",", "x", ".", "size", "(", "-", "2", ")", ",", "x", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.SimpleBlock3d.__init__": [[89, 166], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fourier_3d.SpectralConv3d_fast", "fourier_3d.SpectralConv3d_fast", "fourier_3d.SpectralConv3d_fast", "fourier_3d.SpectralConv3d_fast", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes1", ",", "modes2", ",", "modes3", ",", "width", ",", "arch", ")", ":", "\n", "        ", "super", "(", "SimpleBlock3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        The overall network. It contains 4 layers of the Fourier layer.\n        1. Lift the input to the desire channel dimension by self.fc0 .\n        2. 4 layers of the integral operators u' = (W + K)(u).\n            W defined by self.w; K defined by self.conv .\n        3. Project from the channel space to the output space by self.fc1 and self.fc2 .\n        \n        input: the solution of the first 10 timesteps + 3 locations (u(1, x, y), ..., u(10, x, y),  x, y, t). It's a constant function in time, except for the last index.\n        input shape: (batchsize, x=64, y=64, t=40, c=13)\n        output: the solution of the next 40 timesteps\n        output shape: (batchsize, x=64, y=64, t=40, c=1)\n        \"\"\"", "\n", "\n", "self", ".", "modes1", "=", "modes1", "\n", "self", ".", "modes2", "=", "modes2", "\n", "self", ".", "modes3", "=", "modes3", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "13", ",", "self", ".", "width", ")", "\n", "# input channel is 12: the solution of the first 10 timesteps + 3 locations (u(1, x, y), ..., u(10, x, y),  x, y, t)", "\n", "\n", "if", "arch", "==", "'fno'", ":", "\n", "            ", "self", ".", "conv0", "=", "SpectralConv3d_fast", "(", "\n", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ")", "\n", "self", ".", "conv1", "=", "SpectralConv3d_fast", "(", "\n", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ")", "\n", "self", ".", "conv2", "=", "SpectralConv3d_fast", "(", "\n", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ")", "\n", "self", ".", "conv3", "=", "SpectralConv3d_fast", "(", "\n", "self", ".", "width", ",", "self", ".", "width", ",", "self", ".", "modes1", ",", "self", ".", "modes2", ",", "self", ".", "modes3", ")", "\n", "#elif arch == 'xd':", "\n", "#    self.conv0 = xd([64, 64, 40], self.width, self.width, ", "\n", "#        arch_init='conv', ", "\n", "#        max_kernel_size=[self.modes1+1, self.modes1+1, self.modes1+1], ", "\n", "#        padding=2)", "\n", "#    self.conv1 = xd([64, 64, 40], self.width, self.width, ", "\n", "#        arch_init='conv', ", "\n", "#        max_kernel_size=[self.modes1+1, self.modes1+1, self.modes1+1], ", "\n", "#        padding=2)", "\n", "#    self.conv2 = xd([64, 64, 40], self.width, self.width, ", "\n", "#        arch_init='conv', ", "\n", "#        max_kernel_size=[self.modes1+1, self.modes1+1, self.modes1+1], ", "\n", "#        padding=2)", "\n", "#    self.conv3 = xd([64, 64, 40], self.width, self.width, ", "\n", "#        arch_init='conv', ", "\n", "#        max_kernel_size=[self.modes1+1, self.modes1+1, self.modes1+1], ", "\n", "#        padding=2)", "\n", "", "elif", "(", "arch", "==", "'conv'", ")", "or", "(", "arch", "==", "'xd'", ")", ":", "\n", "            ", "self", ".", "conv0", "=", "nn", ".", "Conv3d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "4", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "4", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "4", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "\n", "kernel_size", "=", "self", ".", "modes1", "+", "1", ",", "padding", "=", "4", ",", "\n", "padding_mode", "=", "'circular'", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "w0", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w1", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w2", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "w3", "=", "nn", ".", "Conv1d", "(", "self", ".", "width", ",", "self", ".", "width", ",", "1", ")", "\n", "self", ".", "bn0", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "self", ".", "width", ")", "\n", "self", ".", "bn3", "=", "torch", ".", "nn", ".", "BatchNorm3d", "(", "self", ".", "width", ")", "\n", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "width", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.SimpleBlock3d.forward": [[167, 204], ["fourier_3d.SimpleBlock3d.fc0", "fourier_3d.SimpleBlock3d.permute", "fourier_3d.SimpleBlock3d.conv0", "fourier_3d.SimpleBlock3d.w0().view", "fourier_3d.SimpleBlock3d.bn0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_3d.SimpleBlock3d.conv1", "fourier_3d.SimpleBlock3d.w1().view", "fourier_3d.SimpleBlock3d.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_3d.SimpleBlock3d.conv2", "fourier_3d.SimpleBlock3d.w2().view", "fourier_3d.SimpleBlock3d.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_3d.SimpleBlock3d.conv3", "fourier_3d.SimpleBlock3d.w3().view", "fourier_3d.SimpleBlock3d.bn3", "fourier_3d.SimpleBlock3d.permute", "fourier_3d.SimpleBlock3d.fc1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "fourier_3d.SimpleBlock3d.fc2", "fourier_3d.SimpleBlock3d.w0", "fourier_3d.SimpleBlock3d.w1", "fourier_3d.SimpleBlock3d.w2", "fourier_3d.SimpleBlock3d.w3", "fourier_3d.SimpleBlock3d.view", "fourier_3d.SimpleBlock3d.view", "fourier_3d.SimpleBlock3d.view", "fourier_3d.SimpleBlock3d.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batchsize", "=", "x", ".", "shape", "[", "0", "]", "\n", "size_x", ",", "size_y", ",", "size_z", "=", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "\n", "x", "=", "self", ".", "fc0", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "\n", "x1", "=", "self", ".", "conv0", "(", "x", ")", "\n", "x2", "=", "self", ".", "w0", "(", "\n", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", "\n", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ",", "size_z", ")", "\n", "x", "=", "self", ".", "bn0", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2", "=", "self", ".", "w1", "(", "\n", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", "\n", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ",", "size_z", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x2", "=", "self", ".", "w2", "(", "\n", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", "\n", ")", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ",", "size_z", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x1", "+", "x2", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x1", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x2", "=", "self", ".", "w3", "(", "\n", "x", ".", "view", "(", "batchsize", ",", "self", ".", "width", ",", "-", "1", ")", ")", ".", "view", "(", "\n", "batchsize", ",", "self", ".", "width", ",", "size_x", ",", "size_y", ",", "size_z", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x1", "+", "x2", ")", "\n", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.__init__": [[206, 217], ["torch.Module.__init__", "fourier_3d.SimpleBlock3d", "fourier_3d.SimpleBlock3d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modes", ",", "width", ",", "arch", "=", "'fno'", ",", "visc", "=", "3", ")", ":", "\n", "        ", "super", "(", "Net3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n        A wrapper function\n        \"\"\"", "\n", "\n", "if", "visc", "==", "5", ":", "\n", "            ", "self", ".", "conv1", "=", "SimpleBlock3d", "(", "modes", ",", "modes", ",", "4", ",", "width", ",", "arch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "SimpleBlock3d", "(", "modes", ",", "modes", ",", "modes", ",", "width", ",", "arch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.forward": [[219, 222], ["fourier_3d.Net3d.conv1", "fourier_3d.Net3d.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "return", "x", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.count_params": [[224, 230], ["fourier_3d.Net3d.parameters", "functools.reduce", "list", "p.size"], "methods", ["None"], ["", "def", "count_params", "(", "self", ")", ":", "\n", "        ", "c", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "c", "+=", "reduce", "(", "operator", ".", "mul", ",", "list", "(", "p", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.compl_mul3d": [[35, 42], ["functools.partial", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial."], "function", ["None"], ["def", "compl_mul3d", "(", "a", ",", "b", ")", ":", "\n", "# (batch, in_channel, x,y,t ), (in_channel, out_channel, x,y,t) -> (batch, out_channel, x,y,t)", "\n", "    ", "op", "=", "partial", "(", "torch", ".", "einsum", ",", "\"bixyz,ioxyz->boxyz\"", ")", "\n", "return", "torch", ".", "stack", "(", "[", "\n", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "0", "]", ")", "-", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "1", "]", ")", ",", "\n", "op", "(", "a", "[", "...", ",", "1", "]", ",", "b", "[", "...", ",", "0", "]", ")", "+", "op", "(", "a", "[", "...", ",", "0", "]", ",", "b", "[", "...", ",", "1", "]", ")", "\n", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.main": [[231, 499], ["print", "numpy.zeros", "timeit.default_timer", "utilities3.MatReader", "utilities3.MatReader", "print", "print", "utilities3.UnitGaussianNormalizer", "utilities3.UnitGaussianNormalizer.encode", "utilities3.UnitGaussianNormalizer.encode", "utilities3.UnitGaussianNormalizer", "utilities3.UnitGaussianNormalizer.encode", "torch.cat.reshape().repeat", "torch.cat.reshape().repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gridx.reshape().repeat.reshape().repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gridy.reshape().repeat.reshape().repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gridt.reshape().repeat.reshape().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "timeit.default_timer", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "fourier_3d.Net3d", "Net3d.cuda", "print", "print", "nas.MixedOptimizer", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "utilities3.LpLoss", "utilities3.UnitGaussianNormalizer.cuda", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Net3d.eval", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "timeit.default_timer", "timeit.default_timer", "print", "scipy.io.savemat", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "utilities3.MatReader.read_field", "numpy.linspace", "numpy.linspace", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Net3d.named_modules", "Net3d.patch_conv", "fourier_3d.Net3d.count_params", "functools.partial", "Net3d.train", "timeit.default_timer", "nas.MixedOptimizer.zero_grad", "enumerate", "torch.optim.lr_scheduler.LambdaLR.step", "Net3d.eval", "len", "timeit.default_timer", "print", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cat.reshape", "torch.cat.reshape", "gridx.reshape().repeat.reshape", "gridy.reshape().repeat.reshape", "numpy.linspace", "gridt.reshape().repeat.reshape", "gridx.reshape().repeat.repeat", "gridy.reshape().repeat.repeat", "gridt.reshape().repeat.repeat", "gridx.reshape().repeat.repeat", "gridy.reshape().repeat.repeat", "gridt.reshape().repeat.repeat", "chrysalis.Chrysalis.metamorphosize", "isinstance", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "arch_opt", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "fourier_3d.main.weight_sched"], "function", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.xd.XD.device", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.patch_conv", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.fourier_3d.Net3d.count_params", "home.repos.pwc.inspect_result.nick11roberts_XD.word_cnn.word_cnn_test.train", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.nas.MixedOptimizer.step", "home.repos.pwc.inspect_result.nick11roberts_XD.chrysalis.chrysalis.Chrysalis.metamorphosize"], ["", "", "def", "main", "(", "arch", "=", "'fno'", ",", "epochs", "=", "500", ",", "sub", "=", "1", ",", "acc_steps", "=", "1", ",", "datapath", "=", "'data/'", ",", "\n", "arch_lr", "=", "0.0025", ",", "arch_momentum", "=", "0.0", ",", "arch_sgd", "=", "False", ",", "\n", "warmup_epochs", "=", "0", ",", "cooldown_epochs", "=", "0", ",", "start_epoch", "=", "0", ",", "\n", "visc", "=", "3", ",", "large", "=", "False", ")", ":", "\n", "################################################################", "\n", "# configs", "\n", "################################################################", "\n", "\n", "    ", "ntrain", "=", "1000", "\n", "ntest", "=", "200", "\n", "\n", "modes", "=", "8", "#4 #8", "\n", "width", "=", "20", "\n", "\n", "batch_size", "=", "10", "//", "acc_steps", "\n", "batch_size2", "=", "batch_size", "\n", "\n", "epochs", "=", "epochs", "# 10", "\n", "learning_rate", "=", "0.0025", "\n", "\n", "if", "large", ":", "\n", "        ", "scheduler_step", "=", "40", "\n", "scheduler_gamma", "=", "0.5", "\n", "epochs", "=", "200", "\n", "", "else", ":", "\n", "        ", "scheduler_step", "=", "100", "\n", "scheduler_gamma", "=", "0.5", "\n", "epochs", "=", "500", "\n", "\n", "", "print", "(", "epochs", ",", "learning_rate", ",", "scheduler_step", ",", "scheduler_gamma", ")", "\n", "\n", "path", "=", "'test'", "\n", "# path = 'ns_fourier_V100_N'+str(ntrain)+'_ep' + str(epochs) + '_m' + str(modes) + '_w' + str(width)", "\n", "path_model", "=", "'model/'", "+", "path", "\n", "path_train_err", "=", "'results/'", "+", "path", "+", "'train.txt'", "\n", "path_test_err", "=", "'results/'", "+", "path", "+", "'test.txt'", "\n", "path_image", "=", "'image/'", "+", "path", "\n", "\n", "\n", "runtime", "=", "np", ".", "zeros", "(", "2", ",", ")", "\n", "t1", "=", "default_timer", "(", ")", "\n", "\n", "\n", "# TRAIN_PATH = 'data/ns_data_V1000_N1000_train.mat'", "\n", "# TEST_PATH = 'data/ns_data_V1000_N1000_train_2.mat'", "\n", "# TRAIN_PATH = 'data/ns_data_V1000_N5000.mat'", "\n", "# TEST_PATH = 'data/ns_data_V1000_N5000.mat'", "\n", "#TRAIN_PATH = 'data/ns_data_V100_N1000_T50_1.mat'", "\n", "#TEST_PATH = 'data/ns_data_V100_N1000_T50_2.mat'", "\n", "\n", "# TODO", "\n", "#sub = 1", "\n", "S", "=", "64", "#// sub", "\n", "T_in", "=", "10", "#// sub", "\n", "\n", "if", "visc", "==", "3", ":", "\n", "        ", "TRAIN_PATH", "=", "datapath", "+", "'ns_V1e-3_N5000_T50.mat'", "\n", "TEST_PATH", "=", "datapath", "+", "'ns_V1e-3_N5000_T50.mat'", "\n", "T", "=", "40", "#// sub", "\n", "", "elif", "visc", "==", "4", "and", "not", "large", ":", "\n", "#TRAIN_PATH = datapath + 'ns_data_V1e-4_N20_T50_R256test.mat'", "\n", "#TEST_PATH = datapath + 'ns_data_V1e-4_N20_T50_R256test.mat'", "\n", "        ", "TRAIN_PATH", "=", "datapath", "+", "'ns_V1e-4_N10000_T30.mat'", "\n", "TEST_PATH", "=", "datapath", "+", "'ns_V1e-4_N10000_T30.mat'", "\n", "T", "=", "20", "#// sub", "\n", "", "elif", "visc", "==", "4", "and", "large", ":", "\n", "        ", "TRAIN_PATH", "=", "datapath", "+", "'ns_V1e-4_N10000_T30.mat'", "\n", "TEST_PATH", "=", "datapath", "+", "'ns_V1e-4_N10000_T30.mat'", "\n", "T", "=", "20", "#// sub", "\n", "ntrain", "=", "10000", "\n", "", "elif", "visc", "==", "5", ":", "\n", "        ", "TRAIN_PATH", "=", "datapath", "+", "'NavierStokes_V1e-5_N1200_T20.mat'", "\n", "TEST_PATH", "=", "datapath", "+", "'NavierStokes_V1e-5_N1200_T20.mat'", "\n", "T", "=", "10", "#// sub", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "################################################################", "\n", "# load data", "\n", "################################################################", "\n", "", "reader", "=", "MatReader", "(", "TRAIN_PATH", ")", "\n", "train_a", "=", "reader", ".", "read_field", "(", "'u'", ")", "[", ":", "ntrain", ",", ":", ":", "sub", ",", ":", ":", "sub", ",", ":", "T_in", "]", "\n", "train_u", "=", "reader", ".", "read_field", "(", "'u'", ")", "[", ":", "ntrain", ",", ":", ":", "sub", ",", ":", ":", "sub", ",", "T_in", ":", "T", "+", "T_in", "]", "\n", "\n", "reader", "=", "MatReader", "(", "TEST_PATH", ")", "\n", "test_a", "=", "reader", ".", "read_field", "(", "'u'", ")", "[", "-", "ntest", ":", ",", ":", ":", "sub", ",", ":", ":", "sub", ",", ":", "T_in", "]", "\n", "test_u", "=", "reader", ".", "read_field", "(", "'u'", ")", "[", "-", "ntest", ":", ",", ":", ":", "sub", ",", ":", ":", "sub", ",", "T_in", ":", "T", "+", "T_in", "]", "\n", "\n", "print", "(", "train_u", ".", "shape", ")", "\n", "print", "(", "test_u", ".", "shape", ")", "\n", "assert", "(", "S", "==", "train_u", ".", "shape", "[", "-", "2", "]", ")", "\n", "assert", "(", "T", "==", "train_u", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "\n", "a_normalizer", "=", "UnitGaussianNormalizer", "(", "train_a", ")", "\n", "train_a", "=", "a_normalizer", ".", "encode", "(", "train_a", ")", "\n", "test_a", "=", "a_normalizer", ".", "encode", "(", "test_a", ")", "\n", "\n", "y_normalizer", "=", "UnitGaussianNormalizer", "(", "train_u", ")", "\n", "train_u", "=", "y_normalizer", ".", "encode", "(", "train_u", ")", "\n", "\n", "train_a", "=", "train_a", ".", "reshape", "(", "ntrain", ",", "S", ",", "S", ",", "1", ",", "T_in", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "1", ",", "T", ",", "1", "]", ")", "\n", "test_a", "=", "test_a", ".", "reshape", "(", "ntest", ",", "S", ",", "S", ",", "1", ",", "T_in", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "1", ",", "T", ",", "1", "]", ")", "\n", "\n", "# pad locations (x,y,t)", "\n", "gridx", "=", "torch", ".", "tensor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "S", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "gridx", "=", "gridx", ".", "reshape", "(", "1", ",", "S", ",", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "1", ",", "S", ",", "T", ",", "1", "]", ")", "\n", "gridy", "=", "torch", ".", "tensor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "S", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "gridy", "=", "gridy", ".", "reshape", "(", "1", ",", "1", ",", "S", ",", "1", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "S", ",", "1", ",", "T", ",", "1", "]", ")", "\n", "gridt", "=", "torch", ".", "tensor", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "T", "+", "1", ")", "[", "1", ":", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "gridt", "=", "gridt", ".", "reshape", "(", "1", ",", "1", ",", "1", ",", "T", ",", "1", ")", ".", "repeat", "(", "[", "1", ",", "S", ",", "S", ",", "1", ",", "1", "]", ")", "\n", "\n", "train_a", "=", "torch", ".", "cat", "(", "(", "gridx", ".", "repeat", "(", "[", "ntrain", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "gridy", ".", "repeat", "(", "[", "ntrain", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "gridt", ".", "repeat", "(", "[", "ntrain", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "train_a", ")", ",", "dim", "=", "-", "1", ")", "\n", "test_a", "=", "torch", ".", "cat", "(", "(", "gridx", ".", "repeat", "(", "[", "ntest", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "gridy", ".", "repeat", "(", "[", "ntest", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "\n", "gridt", ".", "repeat", "(", "[", "ntest", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", ",", "test_a", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "train_a", ",", "train_u", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "test_a", ",", "test_u", ")", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "t2", "=", "default_timer", "(", ")", "\n", "\n", "print", "(", "'preprocessing finished, time used:'", ",", "t2", "-", "t1", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "################################################################", "\n", "# training and evaluation", "\n", "################################################################", "\n", "model", "=", "Net3d", "(", "modes", ",", "width", ",", "arch", ",", "visc", ")", "\n", "# model = torch.load('model/ns_fourier_V100_N1000_ep100_m8_w20')", "\n", "\n", "# Convert to NAS search space, if applicable", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "X", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "S", ",", "S", ",", "T", ",", "13", "]", ")", "\n", "model", ",", "original", "=", "Chrysalis", ".", "metamorphosize", "(", "model", ")", ",", "model", "\n", "\n", "arch_kwargs", "=", "{", "\n", "'kmatrix_depth'", ":", "1", ",", "\n", "'max_kernel_size'", ":", "1", ",", "\n", "'global_biasing'", ":", "False", ",", "\n", "'channel_gating'", ":", "False", ",", "\n", "'base'", ":", "2", ",", "\n", "}", "\n", "\n", "named_modules", "=", "[", "]", "\n", "for", "name", ",", "layer", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "named_modules", ".", "append", "(", "(", "name", ",", "layer", ")", ")", "\n", "\n", "# Only patch conv3d", "\n", "", "", "model", ".", "patch_conv", "(", "X", "[", ":", "1", "]", ",", "named_modules", "=", "named_modules", ",", "**", "arch_kwargs", ")", "\n", "", "else", ":", "\n", "        ", "arch_lr", "=", "0.0", "\n", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "model", ".", "cuda", "(", ")", "\n", "print", "(", "model", ")", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "\n", "if", "arch", "==", "'xd'", ":", "\n", "        ", "momentum", "=", "partial", "(", "torch", ".", "optim", ".", "SGD", ",", "momentum", "=", "arch_momentum", ")", "\n", "arch_opt", "=", "momentum", "if", "arch_sgd", "else", "torch", ".", "optim", ".", "Adam", "\n", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "xd_weights", "(", ")", ")", "}", ",", "\n", "{", "'params'", ":", "list", "(", "model", ".", "nonxd_weights", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", ",", "\n", "arch_opt", "(", "[", "{", "'params'", ":", "list", "(", "model", ".", "arch_params", "(", ")", ")", "}", "]", ",", "\n", "lr", "=", "arch_lr", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "else", ":", "\n", "        ", "opts", "=", "[", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "learning_rate", ",", "weight_decay", "=", "1e-4", ")", "]", "\n", "", "optimizer", "=", "MixedOptimizer", "(", "opts", ",", "op_decay", "=", "None", ")", "\n", "\n", "#optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)", "\n", "#scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=scheduler_step, gamma=scheduler_gamma)", "\n", "\n", "def", "weight_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "scheduler_gamma", "**", "(", "epoch", "//", "scheduler_step", ")", "\n", "\n", "", "def", "arch_sched", "(", "epoch", ")", ":", "\n", "        ", "return", "0.0", "if", "(", "epoch", "<", "warmup_epochs", ")", "or", "(", "epoch", ">", "epochs", "-", "cooldown_epochs", ")", "else", "weight_sched", "(", "epoch", ")", "\n", "\n", "", "if", "arch", "==", "'xd'", ":", "\n", "        ", "sched_groups", "=", "[", "\n", "weight_sched", "if", "g", "[", "'params'", "]", "[", "0", "]", "in", "set", "(", "model", ".", "model_weights", "(", ")", ")", "else", "arch_sched", "for", "g", "in", "optimizer", ".", "param_groups", "]", "\n", "", "else", ":", "\n", "        ", "sched_groups", "=", "[", "weight_sched", "]", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", ",", "lr_lambda", "=", "sched_groups", ",", "last_epoch", "=", "start_epoch", "-", "1", ")", "\n", "\n", "\n", "myloss", "=", "LpLoss", "(", "size_average", "=", "False", ")", "\n", "y_normalizer", ".", "cuda", "(", ")", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "t1", "=", "default_timer", "(", ")", "\n", "train_mse", "=", "0", "\n", "train_l2", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "#optimizer.zero_grad()", "\n", "out", "=", "model", "(", "x", ")", "\n", "\n", "mse", "=", "F", ".", "mse_loss", "(", "out", ",", "y", ",", "reduction", "=", "'mean'", ")", "\n", "# mse.backward()", "\n", "\n", "y", "=", "y_normalizer", ".", "decode", "(", "y", ")", "\n", "out", "=", "y_normalizer", ".", "decode", "(", "out", ")", "\n", "l2", "=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", "\n", "l2", ".", "backward", "(", ")", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "acc_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#optimizer.step()", "\n", "\n", "", "train_mse", "+=", "mse", ".", "item", "(", ")", "\n", "train_l2", "+=", "l2", ".", "item", "(", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "test_l2", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "                ", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "model", "(", "x", ")", "\n", "out", "=", "y_normalizer", ".", "decode", "(", "out", ")", "\n", "test_l2", "+=", "myloss", "(", "out", ".", "view", "(", "batch_size", ",", "-", "1", ")", ",", "y", ".", "view", "(", "batch_size", ",", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "\n", "", "", "train_mse", "/=", "len", "(", "train_loader", ")", "\n", "train_l2", "/=", "ntrain", "\n", "test_l2", "/=", "ntest", "\n", "\n", "t2", "=", "default_timer", "(", ")", "\n", "print", "(", "ep", ",", "t2", "-", "t1", ",", "train_mse", ",", "train_l2", ",", "test_l2", ")", "\n", "# torch.save(model, path_model)", "\n", "\n", "\n", "", "pred", "=", "torch", ".", "zeros", "(", "test_u", ".", "shape", ")", "\n", "index", "=", "0", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "test_a", ",", "test_u", ")", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "t1", "=", "default_timer", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "test_loader", ":", "\n", "            ", "test_l2", "=", "0", "\n", "x", ",", "y", "=", "x", ".", "cuda", "(", ")", ",", "y", ".", "cuda", "(", ")", "\n", "\n", "out", "=", "model", "(", "x", ")", "\n", "out", "=", "y_normalizer", ".", "decode", "(", "out", ")", "\n", "pred", "[", "index", "]", "=", "out", "\n", "\n", "test_l2", "+=", "myloss", "(", "out", ".", "view", "(", "1", ",", "-", "1", ")", ",", "y", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "index", ",", "test_l2", ")", "\n", "index", "=", "index", "+", "1", "\n", "", "", "t2", "=", "default_timer", "(", ")", "\n", "print", "(", "\"Average inference time:\"", ",", "(", "t2", "-", "t1", ")", "/", "ntest", ")", "\n", "\n", "scipy", ".", "io", ".", "savemat", "(", "'pred/'", "+", "path", "+", "'.mat'", ",", "mdict", "=", "{", "'pred'", ":", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.__init__": [[19, 31], ["object.__init__", "utilities3.MatReader._load_file"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader._load_file"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "to_torch", "=", "True", ",", "to_cuda", "=", "False", ",", "to_float", "=", "True", ")", ":", "\n", "        ", "super", "(", "MatReader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "to_torch", "=", "to_torch", "\n", "self", ".", "to_cuda", "=", "to_cuda", "\n", "self", ".", "to_float", "=", "to_float", "\n", "\n", "self", ".", "file_path", "=", "file_path", "\n", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "old_mat", "=", "None", "\n", "self", ".", "_load_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader._load_file": [[32, 39], ["scipy.io.loadmat", "h5py.File"], "methods", ["None"], ["", "def", "_load_file", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "self", ".", "file_path", ")", "\n", "self", ".", "old_mat", "=", "True", "\n", "", "except", ":", "\n", "            ", "self", ".", "data", "=", "h5py", ".", "File", "(", "self", ".", "file_path", ")", "\n", "self", ".", "old_mat", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.load_file": [[40, 43], ["utilities3.MatReader._load_file"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader._load_file"], ["", "", "def", "load_file", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "self", ".", "file_path", "=", "file_path", "\n", "self", ".", "_load_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.read_field": [[44, 61], ["numpy.transpose", "x.cuda.cuda.astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "x.cuda.cuda.cuda", "range", "len"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "def", "read_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "x", "=", "self", ".", "data", "[", "field", "]", "\n", "\n", "if", "not", "self", ".", "old_mat", ":", "\n", "            ", "x", "=", "x", "[", "(", ")", "]", "\n", "x", "=", "np", ".", "transpose", "(", "x", ",", "axes", "=", "range", "(", "len", "(", "x", ".", "shape", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "to_float", ":", "\n", "            ", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "self", ".", "to_torch", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "\n", "if", "self", ".", "to_cuda", ":", "\n", "                ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.set_cuda": [[62, 64], ["None"], "methods", ["None"], ["", "def", "set_cuda", "(", "self", ",", "to_cuda", ")", ":", "\n", "        ", "self", ".", "to_cuda", "=", "to_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.set_torch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_torch", "(", "self", ",", "to_torch", ")", ":", "\n", "        ", "self", ".", "to_torch", "=", "to_torch", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.MatReader.set_float": [[68, 70], ["None"], "methods", ["None"], ["", "def", "set_float", "(", "self", ",", "to_float", ")", ":", "\n", "        ", "self", ".", "to_float", "=", "to_float", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.UnitGaussianNormalizer.__init__": [[73, 80], ["object.__init__", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "eps", "=", "0.00001", ")", ":", "\n", "        ", "super", "(", "UnitGaussianNormalizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# x could be in shape of ntrain*n or ntrain*T*n or ntrain*n*T", "\n", "self", ".", "mean", "=", "torch", ".", "mean", "(", "x", ",", "0", ")", "\n", "self", ".", "std", "=", "torch", ".", "std", "(", "x", ",", "0", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.UnitGaussianNormalizer.encode": [[81, 84], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "(", "self", ".", "std", "+", "self", ".", "eps", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.UnitGaussianNormalizer.decode": [[85, 100], ["len", "len", "len", "len"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ",", "sample_idx", "=", "None", ")", ":", "\n", "        ", "if", "sample_idx", "is", "None", ":", "\n", "            ", "std", "=", "self", ".", "std", "+", "self", ".", "eps", "# n", "\n", "mean", "=", "self", ".", "mean", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "mean", ".", "shape", ")", "==", "len", "(", "sample_idx", "[", "0", "]", ".", "shape", ")", ":", "\n", "                ", "std", "=", "self", ".", "std", "[", "sample_idx", "]", "+", "self", ".", "eps", "# batch*n", "\n", "mean", "=", "self", ".", "mean", "[", "sample_idx", "]", "\n", "", "if", "len", "(", "self", ".", "mean", ".", "shape", ")", ">", "len", "(", "sample_idx", "[", "0", "]", ".", "shape", ")", ":", "\n", "                ", "std", "=", "self", ".", "std", "[", ":", ",", "sample_idx", "]", "+", "self", ".", "eps", "# T*batch*n", "\n", "mean", "=", "self", ".", "mean", "[", ":", ",", "sample_idx", "]", "\n", "\n", "# x is in shape of batch*n or T*batch*n", "\n", "", "", "x", "=", "(", "x", "*", "std", ")", "+", "mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.UnitGaussianNormalizer.cuda": [[101, 104], ["utilities3.UnitGaussianNormalizer.mean.cuda", "utilities3.UnitGaussianNormalizer.std.cuda"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.UnitGaussianNormalizer.cpu": [[105, 108], ["utilities3.UnitGaussianNormalizer.mean.cpu", "utilities3.UnitGaussianNormalizer.std.cpu"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "self", ".", "mean", ".", "cpu", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.__init__": [[111, 117], ["object.__init__", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "eps", "=", "0.00001", ")", ":", "\n", "        ", "super", "(", "GaussianNormalizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mean", "=", "torch", ".", "mean", "(", "x", ")", "\n", "self", ".", "std", "=", "torch", ".", "std", "(", "x", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.encode": [[118, 121], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mean", ")", "/", "(", "self", ".", "std", "+", "self", ".", "eps", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.decode": [[122, 125], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ",", "sample_idx", "=", "None", ")", ":", "\n", "        ", "x", "=", "(", "x", "*", "(", "self", ".", "std", "+", "self", ".", "eps", ")", ")", "+", "self", ".", "mean", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda": [[126, 129], ["utilities3.GaussianNormalizer.mean.cuda", "utilities3.GaussianNormalizer.std.cuda"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cuda"], ["", "def", "cuda", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "self", ".", "mean", ".", "cuda", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu": [[130, 133], ["utilities3.GaussianNormalizer.mean.cpu", "utilities3.GaussianNormalizer.std.cpu"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu", "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.GaussianNormalizer.cpu"], ["", "def", "cpu", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean", "=", "self", ".", "mean", ".", "cpu", "(", ")", "\n", "self", ".", "std", "=", "self", ".", "std", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.__init__": [[137, 144], ["object.__init__", "[].view", "[].view", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x", ",", "low", "=", "0.0", ",", "high", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "RangeNormalizer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mymin", "=", "torch", ".", "min", "(", "x", ",", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", "\n", "mymax", "=", "torch", ".", "max", "(", "x", ",", "0", ")", "[", "0", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "self", ".", "a", "=", "(", "high", "-", "low", ")", "/", "(", "mymax", "-", "mymin", ")", "\n", "self", ".", "b", "=", "-", "self", ".", "a", "*", "mymax", "+", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.encode": [[145, 151], ["x.view.view.size", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "s", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "a", "*", "x", "+", "self", ".", "b", "\n", "x", "=", "x", ".", "view", "(", "s", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.RangeNormalizer.decode": [[152, 158], ["x.view.view.size", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "s", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "(", "x", "-", "self", ".", "b", ")", "/", "self", ".", "a", "\n", "x", "=", "x", ".", "view", "(", "s", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.__init__": [[161, 171], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", "=", "2", ",", "p", "=", "2", ",", "size_average", "=", "True", ",", "reduction", "=", "True", ")", ":", "\n", "        ", "super", "(", "LpLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Dimension and Lp-norm type are postive", "\n", "assert", "d", ">", "0", "and", "p", ">", "0", "\n", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.abs": [[172, 187], ["x.size", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.size", "x.view", "y.view"], "methods", ["None"], ["", "def", "abs", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "num_examples", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "#Assume uniform mesh", "\n", "h", "=", "1.0", "/", "(", "x", ".", "size", "(", ")", "[", "1", "]", "-", "1.0", ")", "\n", "\n", "all_norms", "=", "(", "h", "**", "(", "self", ".", "d", "/", "self", ".", "p", ")", ")", "*", "torch", ".", "norm", "(", "x", ".", "view", "(", "num_examples", ",", "-", "1", ")", "-", "y", ".", "view", "(", "num_examples", ",", "-", "1", ")", ",", "self", ".", "p", ",", "1", ")", "\n", "\n", "if", "self", ".", "reduction", ":", "\n", "            ", "if", "self", ".", "size_average", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "all_norms", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "sum", "(", "all_norms", ")", "\n", "\n", "", "", "return", "all_norms", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.rel": [[188, 201], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "x.size", "y.reshape", "x.reshape", "y.reshape", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "rel", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "num_examples", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "diff_norms", "=", "torch", ".", "norm", "(", "x", ".", "reshape", "(", "num_examples", ",", "-", "1", ")", "-", "y", ".", "reshape", "(", "num_examples", ",", "-", "1", ")", ",", "self", ".", "p", ",", "1", ")", "\n", "y_norms", "=", "torch", ".", "norm", "(", "y", ".", "reshape", "(", "num_examples", ",", "-", "1", ")", ",", "self", ".", "p", ",", "1", ")", "\n", "\n", "if", "self", ".", "reduction", ":", "\n", "            ", "if", "self", ".", "size_average", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "diff_norms", "/", "y_norms", ")", "\n", "", "else", ":", "\n", "                ", "return", "torch", ".", "sum", "(", "diff_norms", "/", "y_norms", ")", "\n", "\n", "", "", "return", "diff_norms", "/", "y_norms", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.__call__": [[202, 204], ["utilities3.LpLoss.rel"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.LpLoss.rel"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "rel", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__": [[207, 227], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "range", "len", "utilities3.DenseNet.layers.append", "utilities3.DenseNet.layers.append", "torch.Linear", "torch.Linear", "utilities3.DenseNet.layers.append", "out_nonlinearity", "utilities3.DenseNet.layers.append", "nonlinearity", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", ",", "nonlinearity", ",", "out_nonlinearity", "=", "None", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_layers", "=", "len", "(", "layers", ")", "-", "1", "\n", "\n", "assert", "self", ".", "n_layers", ">=", "1", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "layers", "[", "j", "]", ",", "layers", "[", "j", "+", "1", "]", ")", ")", "\n", "\n", "if", "j", "!=", "self", ".", "n_layers", "-", "1", ":", "\n", "                ", "if", "normalize", ":", "\n", "                    ", "self", ".", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "layers", "[", "j", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "layers", ".", "append", "(", "nonlinearity", "(", ")", ")", "\n", "\n", "", "", "if", "out_nonlinearity", "is", "not", "None", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "out_nonlinearity", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nick11roberts_XD.FNO.utilities3.DenseNet.forward": [[228, 233], ["enumerate", "l"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "_", ",", "l", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "l", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]]}