{"home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._iou": [[9, 15], ["candidates[].float", "candidates[].float", "gt[].float", "gt[].float", "end.min", "start.max", "end.max", "start.min", "inter.clamp"], "function", ["None"], ["def", "_iou", "(", "candidates", ",", "gt", ")", ":", "\n", "    ", "start", ",", "end", "=", "candidates", "[", ":", ",", "0", "]", ".", "float", "(", ")", ",", "candidates", "[", ":", ",", "1", "]", ".", "float", "(", ")", "\n", "s", ",", "e", "=", "gt", "[", "0", "]", ".", "float", "(", ")", ",", "gt", "[", "1", "]", ".", "float", "(", ")", "\n", "inter", "=", "end", ".", "min", "(", "e", ")", "-", "start", ".", "max", "(", "s", ")", "\n", "union", "=", "end", ".", "max", "(", "e", ")", "-", "start", ".", "min", "(", "s", ")", "\n", "return", "inter", ".", "clamp", "(", "min", "=", "0", ")", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._pretty_print_results": [[16, 28], ["len", "len", "enumerate", "terminaltables.AsciiTable.append", "terminaltables.AsciiTable", "range", "print", "range"], "function", ["None"], ["", "def", "_pretty_print_results", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ")", ":", "\n", "    ", "num_recall_metrics", "=", "len", "(", "recall_metrics", ")", "\n", "num_iou_metrics", "=", "len", "(", "iou_metrics", ")", "\n", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "recall_metrics", ")", ":", "\n", "# Pretty print", "\n", "        ", "table", "=", "[", "[", "f'Recall@{r},mIoU@{j:.1f}'", "for", "j", "in", "iou_metrics", "]", "]", "\n", "table", ".", "append", "(", "[", "'{:.02f}'", ".", "format", "(", "recall_x_iou", "[", "i", "]", "[", "j", "]", "*", "100", ")", "for", "j", "in", "range", "(", "num_iou_metrics", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table", ")", "\n", "for", "c", "in", "range", "(", "num_iou_metrics", ")", ":", "\n", "            ", "table", ".", "justify_columns", "[", "c", "]", "=", "'center'", "\n", "", "print", "(", "table", ".", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._compute_proposals_feats": [[29, 38], ["len", "windows_idx.tolist", "torch.stack", "torch.stack.float", "torch.stack.append", "max", "min", "torch.mean"], "function", ["None"], ["", "", "def", "_compute_proposals_feats", "(", "v_feat", ",", "windows_idx", ")", ":", "\n", "    ", "max_", "=", "len", "(", "v_feat", ")", "\n", "proposal_features", "=", "[", "]", "\n", "for", "s", ",", "e", "in", "windows_idx", ".", "tolist", "(", ")", ":", "\n", "        ", "s", ",", "e", "=", "max", "(", "s", ",", "0", ")", ",", "min", "(", "e", ",", "max_", ")", "\n", "proposal_features", ".", "append", "(", "torch", ".", "mean", "(", "v_feat", "[", "s", ":", "e", "]", ",", "dim", "=", "0", ")", ")", "\n", "\n", "", "proposal_features", "=", "torch", ".", "stack", "(", "proposal_features", ")", "\n", "return", "proposal_features", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils.mask_to_moments": [[39, 43], ["torch.nonzero", "torch.nonzero.type"], "function", ["None"], ["", "def", "mask_to_moments", "(", "mask", ",", "num_clips", ")", ":", "\n", "    ", "grids", "=", "torch", ".", "nonzero", "(", "mask", ",", "as_tuple", "=", "False", ")", "\n", "grids", "[", ":", ",", "1", "]", "+=", "1", "\n", "return", "grids", ".", "type", "(", "torch", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._compute_VLG_proposals": [[44, 54], ["tqdm.tqdm", "movies_durations.items", "math.ceil", "utils.mask_to_moments", "torch.arange", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils.mask_to_moments"], ["", "def", "_compute_VLG_proposals", "(", "num_frames", ",", "num_input_frames", ",", "stride", ",", "MASK", ",", "movies_durations", ",", "FPS", ")", ":", "\n", "    ", "proposals", "=", "{", "}", "\n", "windows", "=", "{", "}", "\n", "for", "m", ",", "d", "in", "tqdm", "(", "movies_durations", ".", "items", "(", ")", ")", ":", "\n", "        ", "tot_frames", "=", "math", ".", "ceil", "(", "d", "*", "FPS", ")", "\n", "moments", "=", "mask_to_moments", "(", "MASK", ",", "num_frames", ")", "\n", "starts", "=", "torch", ".", "arange", "(", "0", ",", "tot_frames", "-", "num_input_frames", ",", "stride", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "moments", "=", "torch", ".", "cat", "(", "[", "moments", "*", "num_input_frames", "/", "num_frames", "+", "s", "for", "s", "in", "starts", "]", ")", "\n", "proposals", "[", "m", "]", "=", "moments", "/", "FPS", "\n", "", "return", "proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._create_mask": [[55, 71], ["torch.zeros", "range", "range", "list", "range", "range", "range", "range", "zip"], "function", ["None"], ["", "def", "_create_mask", "(", "N", ",", "POOLING_COUNTS", ")", ":", "\n", "# same anchor as in VLG-Net", "\n", "    ", "mask2d", "=", "torch", ".", "zeros", "(", "N", ",", "N", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask2d", "[", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "1", "\n", "\n", "stride", ",", "offset", "=", "1", ",", "0", "\n", "maskij", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "for", "c", "in", "POOLING_COUNTS", ":", "\n", "        ", "for", "_", "in", "range", "(", "c", ")", ":", "\n", "# fill a diagonal line", "\n", "            ", "offset", "+=", "stride", "\n", "i", ",", "j", "=", "range", "(", "0", ",", "N", "-", "offset", ",", "stride", ")", ",", "range", "(", "offset", ",", "N", ",", "stride", ")", "\n", "mask2d", "[", "i", ",", "j", "]", "=", "1", "\n", "maskij", "+=", "list", "(", "zip", "(", "i", ",", "j", ")", ")", "\n", "", "stride", "*=", "2", "\n", "", "return", "mask2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._get_movies_durations": [[72, 82], ["movies_list.append"], "function", ["None"], ["", "def", "_get_movies_durations", "(", "annotations_keys", ",", "test_data", ")", ":", "\n", "    ", "movies_durations", "=", "{", "}", "\n", "movies_list", "=", "[", "]", "\n", "for", "k", "in", "annotations_keys", ":", "\n", "        ", "movie", "=", "test_data", "[", "k", "]", "[", "'movie'", "]", "\n", "if", "movie", "not", "in", "movies_list", ":", "\n", "            ", "movies_list", ".", "append", "(", "movie", ")", "\n", "movies_durations", "[", "movie", "]", "=", "test_data", "[", "k", "]", "[", "'movie_duration'", "]", "\n", "\n", "", "", "return", "movies_durations", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._nms": [[83, 100], ["scores.sort", "torch.zeros_like", "torch.zeros_like.numel", "range", "utils._iou", "topk.item"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.0ShotCLIP.utils._iou"], ["", "def", "_nms", "(", "moments", ",", "scores", ",", "topk", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "scores", ",", "ranks", "=", "scores", ".", "sort", "(", "descending", "=", "True", ")", "\n", "moments", "=", "moments", "[", "ranks", "]", "\n", "\n", "suppressed", "=", "torch", ".", "zeros_like", "(", "moments", "[", ":", ",", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "numel", "=", "suppressed", ".", "numel", "(", ")", "\n", "for", "i", "in", "range", "(", "numel", "-", "1", ")", ":", "\n", "        ", "if", "suppressed", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "", "mask", "=", "_iou", "(", "moments", "[", "i", "+", "1", ":", "]", ",", "moments", "[", "i", "]", ")", ">", "thresh", "\n", "suppressed", "[", "i", "+", "1", ":", "]", "[", "mask", "]", "=", "True", "\n", "if", "i", "%", "topk", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "if", "(", "~", "suppressed", "[", ":", "i", "]", ")", ".", "sum", "(", ")", ">=", "topk", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "moments", "=", "moments", "[", "~", "suppressed", "]", "\n", "return", "moments", "[", ":", "topk", "]", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.test_net.count_parameters": [[20, 26], ["model.named_parameters", "print", "parameter.numel"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "train_params", "=", "0", "\n", "for", "name", ",", "parameter", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "parameter", ".", "requires_grad", ":", "continue", "\n", "train_params", "+=", "parameter", ".", "numel", "(", ")", "\n", "", "print", "(", "f\"Total Trainable Params: {train_params}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.test_net.main": [[27, 148], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.get_cfg_defaults", "lib.config.get_cfg_defaults.merge_from_file", "lib.config.get_cfg_defaults.merge_from_list", "os.join", "lib.utils.logger.setup_logger_wandb", "lib.utils.logger.setup_logger_wandb.info", "torch.utils.tensorboard.SummaryWriter", "lib.modeling.build_model", "lib.modeling.build_model.to", "test_net.count_parameters", "os.path.isfile", "os.path.isfile", "os.path.isfile", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "lib.utils.comm.synchronize", "lib.config.get_cfg_defaults.DATASETS.TRAIN[].split", "os.splitext", "os.basename", "wandb_utils.Wandb.launch", "logging.info", "collections.OrderedDict", "state_dict.items", "lib.modeling.build_model.load_state_dict", "lib.data.make_data_loader", "torch.cuda.amp.autocast", "lib.engine.inference.inference", "lib.utils.comm.synchronize", "os.basename", "torch.cuda.is_available", "torch.load", "k.replace", "ValueError", "lib.data.make_data_loader", "torch.device"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults.get_cfg_defaults", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.logger.setup_logger_wandb", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.__init__.build_model", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.count_parameters", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb.launch", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.inference", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"VLG\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"configs/activitynet.yaml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--split\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'val'", ",", "\n", "choices", "=", "[", "'val'", ",", "'test'", "]", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ckpt\"", ",", "\n", "help", "=", "\"The path to the checkpoint for test, default is the latest checkpoint.\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", "=", "get_cfg_defaults", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "SPLIT", "=", "args", ".", "split", "\n", "cfg", ".", "CHECKPOINT", "=", "args", ".", "ckpt", "\n", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TRAIN", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "model_name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "ckpt", ")", ")", "[", "0", "]", "\n", "tags", "=", "[", "dataset_name", ",", "\n", "f'{args.split}'", ",", "\n", "f'ModelName:{model_name}'", ",", "\n", "f'NegProb_{cfg.MODEL.VLG.NEG_PROB}'", ",", "\n", "f'NumAggLayers_{cfg.MODEL.VLG.FEATPOOL.NUM_AGGREGATOR_LAYERS}'", ",", "\n", "f'NumNeighborsPool_{cfg.MODEL.VLG.FEATPOOL.NUM_NEIGHBOURS}'", ",", "\n", "f'NumNeighborsMatch_{cfg.MODEL.VLG.MATCH.NUM_NEIGHBOURS}'", ",", "\n", "f'NumIntLayers_{cfg.MODEL.VLG.INTEGRATOR.NUM_AGGREGATOR_LAYERS}'", ",", "\n", "f'NumLSTMLayers_{cfg.MODEL.VLG.INTEGRATOR.LSTM.NUM_LAYERS}'", ",", "\n", "f'PredictNumLayers_{cfg.MODEL.VLG.PREDICTOR.NUM_STACK_LAYERS}'", ",", "\n", "f'LR_{cfg.SOLVER.LR}'", ",", "\n", "f'InputStride_{cfg.INPUT.STRIDE}'", ",", "\n", "f'EvalStride_{cfg.TEST.STRIDE}'", ",", "\n", "f'NMS-th_{cfg.TEST.NMS_THRESH}'", "\n", "]", "\n", "cfg", ".", "wandb", ".", "tags", "=", "tags", "\n", "cfg", ".", "wandb", ".", "name", "=", "osp", ".", "join", "(", "osp", ".", "basename", "(", "cfg", ".", "OUTPUT_DIR", ")", ",", "model_name", ")", "\n", "\n", "# set up logging", "\n", "logger", "=", "setup_logger", "(", "config", ",", "cfg", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "# init wandb *FIRST*", "\n", "if", "cfg", ".", "wandb", ".", "use_wandb", ":", "\n", "        ", "assert", "cfg", ".", "wandb", ".", "entity", "is", "not", "None", "\n", "Wandb", ".", "launch", "(", "cfg", ",", "cfg", ".", "wandb", ".", "use_wandb", ")", "\n", "logging", ".", "info", "(", "f\"Launch wandb, entity: {cfg.wandb.entity}\"", ")", "\n", "# then init tensorboard", "\n", "", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "f'{cfg.OUTPUT_DIR}/tensorboard'", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", ":", "\n", "        ", "cfg", ".", "MODEL", ".", "DEVICE", "=", "'cpu'", "\n", "\n", "", "model", "=", "build_model", "(", "cfg", ")", "\n", "model", ".", "to", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "count_parameters", "(", "model", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n", "#Load checkpoint", "\n", "checkpoint", "=", "args", ".", "ckpt", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", ")", "[", "'model'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "\n", "", "data_loader", ",", "dataset_split", "=", "None", ",", "None", "\n", "if", "args", ".", "split", "==", "'val'", ":", "\n", "        ", "dataset_split", "=", "cfg", ".", "DATASETS", ".", "VAL", "\n", "data_loader", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ",", "is_for_period", "=", "True", ")", "\n", "\n", "", "elif", "args", ".", "split", "==", "'test'", ":", "\n", "        ", "dataset_split", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "data_loader", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'wrong split'", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "dataset_name", "=", "dataset_split", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "name", "=", "dataset_name", ",", "\n", "logger", "=", "logger", ",", "\n", "summary_writer", "=", "summary_writer", ",", "\n", "cfg", "=", "cfg", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.count_parameters": [[32, 43], ["prettytable.PrettyTable", "model.named_parameters", "print", "print", "parameter.numel", "prettytable.PrettyTable.add_row"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "table", "=", "PrettyTable", "(", "[", "\"Modules\"", ",", "\"Parameters\"", "]", ")", "\n", "train_params", "=", "0", "\n", "for", "name", ",", "parameter", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "parameter", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "param", "=", "parameter", ".", "numel", "(", ")", "\n", "table", ".", "add_row", "(", "[", "name", ",", "param", "]", ")", "\n", "train_params", "+=", "param", "\n", "", "print", "(", "table", ")", "\n", "print", "(", "f\"Total Trainable Params: {train_params}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.load_pretrained_graph_weights": [[45, 90], ["logger.info", "dict", "model.load_state_dict", "torch.load", "range", "range", "ValueError"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load"], ["", "def", "load_pretrained_graph_weights", "(", "model", ",", "cfg", ",", "logger", ")", ":", "\n", "#check dimension to load correct model:", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "==", "256", ":", "\n", "        ", "path", "=", "'./datasets/gcnext_warmup/gtad_best_256.pth.tar'", "\n", "", "elif", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "==", "512", ":", "\n", "        ", "path", "=", "'./datasets/gcnext_warmup/gtad_best_512.pth.tar'", "\n", "\n", "", "logger", ".", "info", "(", "'Load pretrained model from {}'", ".", "format", "(", "path", ")", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "path", ")", "[", "'state_dict'", "]", "\n", "pretrained_keep", "=", "dict", "(", ")", "# manually copy the weight", "\n", "if", "'256'", "in", "path", ":", "\n", "        ", "layer_name", "=", "'module.x_1d_b'", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "NUM_AGGREGATOR_LAYERS", ")", ":", "\n", "            ", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.0.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.0.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.0.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.0.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.2.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.2.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.2.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.2.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.4.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.4.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.4.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.tconvs.4.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.0.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.0.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.0.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.0.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.2.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.2.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.2.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.2.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.4.weight'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.4.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.4.bias'", "]", "=", "pretrained_dict", "[", "'module.x_1d_b.2.fconvs.4.bias'", "]", "\n", "", "", "elif", "'512'", "in", "path", ":", "\n", "        ", "layer_name", "=", "'module.backbone1'", "\n", "for", "i", "in", "range", "(", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "NUM_AGGREGATOR_LAYERS", ")", ":", "\n", "            ", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.0.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.0.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.0.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.0.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.2.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.2.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.2.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.2.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.4.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.4.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.tconvs.4.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.tconvs.4.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.0.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.0.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.0.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.0.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.2.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.2.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.2.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.2.bias'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.4.weight'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.4.weight'", "]", "\n", "pretrained_keep", "[", "f'context_aggregator.{i}.sconvs.4.bias'", "]", "=", "pretrained_dict", "[", "'module.backbone1.2.sconvs.4.bias'", "]", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Specify hidden size in feature file name'", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "pretrained_keep", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.train": [[91, 166], ["logging.getLogger", "logging.getLogger", "lib.modeling.build_model", "logging.getLogger", "logging.getLogger", "torch.device", "torch.nn.parallel.DistributedDataParallel.to", "train_net.count_parameters", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.cuda.amp.GradScaler", "lib.utils.checkpoint.VLGCheckpointer", "lib.utils.checkpoint.VLGCheckpointer.load", "arguments.update", "lib.data.make_data_loader", "lib.engine.trainer.do_train", "train_net.load_pretrained_graph_weights", "torch.nn.parallel.DistributedDataParallel.parameters", "torch.nn.parallel.DistributedDataParallel", "lib.utils.comm.get_rank", "lib.data.make_data_loader", "len", "lib.data.make_data_loader", "logging.getLogger.info"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.__init__.build_model", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.count_parameters", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.do_train", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.load_pretrained_graph_weights", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader"], ["", "def", "train", "(", "cfg", ",", "writer", ",", "local_rank", ",", "distributed", ",", "logger", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.trainer\"", ")", "\n", "model", "=", "build_model", "(", "cfg", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.trainer\"", ")", "\n", "\n", "### GTAD pretraining", "\n", "if", "cfg", ".", "MODEL", ".", "PRETRAINV", ":", "\n", "        ", "model", "=", "load_pretrained_graph_weights", "(", "model", ",", "cfg", ",", "logger", ")", "\n", "\n", "# Move model to GPU", "\n", "", "device", "=", "torch", ".", "device", "(", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "count_parameters", "(", "model", ")", "\n", "\n", "# Define optimizer and learning rate scheduler", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "cfg", ".", "SOLVER", ".", "LR_STEP_SIZE", ",", "gamma", "=", "cfg", ".", "SOLVER", ".", "LR_GAMMA", ")", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "True", ")", "# NEW", "\n", "\n", "# Deprecated, to be removed.", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", ")", "\n", "\n", "", "save_to_disk", "=", "get_rank", "(", ")", "==", "0", "\n", "checkpointer", "=", "VLGCheckpointer", "(", "\n", "cfg", ",", "model", ",", "optimizer", ",", "scheduler", ",", "cfg", ".", "OUTPUT_DIR", ",", "save_to_disk", "\n", ")", "\n", "extra_checkpoint_data", "=", "checkpointer", ".", "load", "(", "f", "=", "''", ",", "use_latest", "=", "False", ")", "\n", "arguments", "=", "{", "\"epoch\"", ":", "1", "}", "\n", "arguments", ".", "update", "(", "extra_checkpoint_data", ")", "\n", "\n", "data_loader", "=", "make_data_loader", "(", "\n", "cfg", ",", "\n", "is_train", "=", "True", ",", "\n", "is_distributed", "=", "distributed", ",", "\n", ")", "\n", "\n", "data_loader_val", "=", "None", "\n", "data_loader_test", "=", "None", "\n", "test_period", "=", "cfg", ".", "SOLVER", ".", "TEST_PERIOD", "\n", "if", "test_period", ">", "0", ":", "\n", "        ", "if", "len", "(", "cfg", ".", "DATASETS", ".", "VAL", ")", "!=", "0", ":", "\n", "            ", "data_loader_val", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ",", "is_for_period", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Please specify validation dataset in config file for performance evaluation during training'", ")", "\n", "", "data_loader_test", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "\n", "\n", "", "checkpoint_period", "=", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "\n", "\n", "do_train", "(", "\n", "cfg", ",", "\n", "writer", ",", "\n", "model", ",", "\n", "data_loader", ",", "\n", "data_loader_val", ",", "\n", "optimizer", ",", "\n", "scaler", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "test_period", ",", "\n", "arguments", ",", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", "[", "'TRAIN'", "]", "[", "0", "]", ",", "\n", "data_loader_test", "=", "data_loader_test", "[", "0", "]", ",", "\n", "logger", "=", "logger", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.run_test": [[168, 186], ["torch.cuda.empty_cache", "lib.data.make_data_loader", "zip", "lib.engine.inference.inference", "lib.utils.comm.synchronize"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.inference", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize"], ["", "def", "run_test", "(", "cfg", ",", "model", ",", "distributed", ",", "logger", ",", "summary_writer", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dataset_names", "=", "cfg", ".", "DATASETS", ".", "TEST", "\n", "data_loaders_test", "=", "make_data_loader", "(", "cfg", ",", "is_train", "=", "False", ",", "is_distributed", "=", "distributed", ")", "\n", "for", "dataset_name", ",", "data_loaders_test", "in", "zip", "(", "dataset_names", ",", "data_loaders_test", ")", ":", "\n", "        ", "inference", "(", "\n", "model", ",", "\n", "data_loaders_test", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "name", "=", "cfg", ".", "DATASETS", "[", "'TEST'", "]", "[", "0", "]", ",", "\n", "logger", "=", "logger", ",", "\n", "summary_writer", "=", "summary_writer", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.main": [[187, 304], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "lib.config.get_cfg_defaults", "lib.config.set_hps_cfg.merge_from_file", "lib.config.set_hps_cfg.merge_from_list", "lib.config.set_hps_cfg", "os.basename", "lib.utils.logger.setup_logger_wandb", "lib.utils.logger.setup_logger_wandb.info", "torch.utils.tensorboard.SummaryWriter", "lib.utils.logger.setup_logger_wandb.info", "lib.utils.logger.setup_logger_wandb.info", "lib.utils.logger.setup_logger_wandb.info", "os.path.join", "os.path.join", "os.path.join", "lib.utils.logger.setup_logger_wandb.info", "lib.utils.miscellaneous.save_config", "train_net.train", "int", "torch.cuda.set_device", "torch.distributed.init_process_group", "lib.utils.comm.synchronize", "lib.config.set_hps_cfg.DATASETS.TRAIN[].split", "wandb_utils.Wandb.launch", "logging.info", "logging.info", "random.seed", "numpy.random.seed", "torch.manual_seed", "lib.utils.miscellaneous.mkdir", "open", "lib.utils.logger.setup_logger_wandb.info", "lib.utils.comm.cleanup", "pathlib.Path", "cf.read"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults.get_cfg_defaults", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults.set_hps_cfg", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.logger.setup_logger_wandb", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.train", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb.launch", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.cleanup"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"VLG\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config-file\"", ",", "\n", "default", "=", "\"configs/activitynet.yml\"", ",", "\n", "metavar", "=", "\"FILE\"", ",", "\n", "help", "=", "\"path to config file\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--enable-tb'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Enable tensorboard logging\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--hps'", ",", "\n", "type", "=", "Path", ",", "\n", "default", "=", "Path", "(", "'non-existent'", ")", ",", "\n", "help", "=", "'yml file defining the range of hps to be used in training (randomly sampled)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--change-seed'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Set to false to explore randomness in training. '", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"Modify config options using the command-line\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "num_gpus", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "if", "\"WORLD_SIZE\"", "in", "os", ".", "environ", "else", "1", "\n", "args", ".", "distributed", "=", "num_gpus", ">", "1", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "cfg", "=", "get_cfg_defaults", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", "=", "set_hps_cfg", "(", "cfg", ",", "args", ".", "hps", ")", "\n", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TRAIN", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "tags", "=", "[", "dataset_name", ",", "\n", "f'train'", ",", "\n", "f'NegProb_{cfg.MODEL.VLG.NEG_PROB}'", ",", "\n", "f'NumAggLayers_{cfg.MODEL.VLG.FEATPOOL.NUM_AGGREGATOR_LAYERS}'", ",", "\n", "f'NumNeighborsPool_{cfg.MODEL.VLG.FEATPOOL.NUM_NEIGHBOURS}'", ",", "\n", "f'NumNeighborsMatch_{cfg.MODEL.VLG.MATCH.NUM_NEIGHBOURS}'", ",", "\n", "f'NumIntLayers_{cfg.MODEL.VLG.INTEGRATOR.NUM_AGGREGATOR_LAYERS}'", ",", "\n", "f'NumLSTMLayers_{cfg.MODEL.VLG.INTEGRATOR.LSTM.NUM_LAYERS}'", ",", "\n", "f'PredictNumLayers_{cfg.MODEL.VLG.PREDICTOR.NUM_STACK_LAYERS}'", ",", "\n", "f'LR_{cfg.SOLVER.LR}'", ",", "\n", "f'InputStride_{cfg.INPUT.STRIDE}'", ",", "\n", "f'NMS-th_{cfg.TEST.NMS_THRESH}'", "\n", "]", "\n", "cfg", ".", "wandb", ".", "tags", "=", "tags", "\n", "cfg", ".", "wandb", ".", "name", "=", "osp", ".", "basename", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "\n", "# set up logging", "\n", "logger", "=", "setup_logger", "(", "config", ",", "cfg", ")", "\n", "logger", ".", "info", "(", "cfg", ")", "\n", "\n", "# init wandb *FIRST*", "\n", "if", "cfg", ".", "wandb", ".", "use_wandb", ":", "\n", "        ", "assert", "cfg", ".", "wandb", ".", "entity", "is", "not", "None", "\n", "Wandb", ".", "launch", "(", "cfg", ",", "cfg", ".", "wandb", ".", "use_wandb", ")", "\n", "logging", ".", "info", "(", "f\"Launch wandb, entity: {cfg.wandb.entity}\"", ")", "\n", "# then init tensorboard", "\n", "", "summary_writer", "=", "SummaryWriter", "(", "log_dir", "=", "f'{cfg.OUTPUT_DIR}/tensorboard'", ")", "\n", "\n", "# fix seeds for reproducibility", "\n", "if", "not", "args", ".", "change_seed", ":", "\n", "        ", "seed", "=", "0", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "", "if", "cfg", ".", "OUTPUT_DIR", ":", "\n", "        ", "mkdir", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Using {} GPUs\"", ".", "format", "(", "num_gpus", ")", ")", "\n", "# logger.info(args)", "\n", "\n", "logger", ".", "info", "(", "\"Loaded configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "with", "open", "(", "args", ".", "config_file", ",", "\"r\"", ")", "as", "cf", ":", "\n", "        ", "config_str", "=", "\"\\n\"", "+", "cf", ".", "read", "(", ")", "\n", "logger", ".", "info", "(", "config_str", ")", "\n", "", "logger", ".", "info", "(", "\"Running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "'config.yml'", ")", "\n", "logger", ".", "info", "(", "\"Saving config into: {}\"", ".", "format", "(", "output_config_path", ")", ")", "\n", "# save overloaded model config in the output directory", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "model", "=", "train", "(", "cfg", ",", "summary_writer", ",", "args", ".", "local_rank", ",", "args", ".", "distributed", ",", "logger", ")", "\n", "\n", "# if len(cfg.DATASETS.TEST) != 0:", "\n", "#     best_checkpoint = f\"{cfg.OUTPUT_DIR}/model_best_epoch.pth\"", "\n", "#     if os.path.isfile(best_checkpoint):", "\n", "#         model.load_state_dict(torch.load(best_checkpoint))", "\n", "#     run_test(cfg, model, args.distributed, logger, summary_writer)", "\n", "#     synchronize()", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.align_and_update_state_dicts": [[10, 57], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["None"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.strip_prefix_if_present": [[61, 69], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict": [[71, 81], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.GCNeXt.__init__": [[198, 224], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_in", ",", "channel_out", ",", "k", "=", "3", ",", "norm_layer", "=", "False", ",", "groups", "=", "32", ",", "width_group", "=", "4", ",", "idx", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        input: (bs, ch, 100)\n        output: (bs, ch, 100)\n        \"\"\"", "\n", "super", "(", "GCNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm1d", "\n", "", "width", "=", "width_group", "*", "groups", "\n", "self", ".", "tconvs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "channel_in", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "channel_out", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "# temporal graph", "\n", "\n", "self", ".", "sconvs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel_in", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "width", ",", "channel_out", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "# semantic graph", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "idx_list", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.GCNeXt.forward": [[225, 237], ["gcnext.GCNeXt.tconvs", "gcnext.get_graph_feature", "gcnext.GCNeXt.sconvs", "gcnext.GCNeXt.relu", "gcnext.GCNeXt.max", "gcnext.GCNeXt.idx_list.append"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "# residual", "\n", "tout", "=", "self", ".", "tconvs", "(", "x", ")", "# conv on temporal graph", "\n", "\n", "x_f", ",", "idx", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ",", "style", "=", "1", ")", "# (bs,ch,100) -> (bs, 2ch, 100, k)", "\n", "sout", "=", "self", ".", "sconvs", "(", "x_f", ")", "# conv on semantic graph", "\n", "sout", "=", "sout", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "# (bs, ch, 100, k) -> (bs, ch, 100)", "\n", "\n", "out", "=", "tout", "+", "identity", "+", "sout", "# fusion", "\n", "if", "not", "self", ".", "idx_list", "is", "None", ":", "\n", "            ", "self", ".", "idx_list", ".", "append", "(", "idx", ")", "\n", "", "return", "self", ".", "relu", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.create_mask": [[5, 12], ["torch.arange", "compare", "out.unsqueeze().expand.unsqueeze().expand", "combine", "lengths.unsqueeze", "out.unsqueeze().expand.transpose", "out.unsqueeze().expand.unsqueeze"], "function", ["None"], ["def", "create_mask", "(", "lengths", ",", "size", ",", "negative", "=", "False", ")", ":", "\n", "    ", "compare", "=", "torch", ".", "ge", "if", "negative", "else", "torch", ".", "lt", "\n", "combine", "=", "torch", ".", "logical_or", "if", "negative", "else", "torch", ".", "logical_and", "\n", "out", "=", "torch", ".", "arange", "(", "size", ",", "device", "=", "lengths", ".", "device", ")", "\n", "out", "=", "compare", "(", "out", ",", "lengths", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "out", "=", "out", ".", "unsqueeze", "(", "-", "2", ")", ".", "expand", "(", "*", "out", ".", "shape", "[", ":", "-", "1", "]", ",", "size", ",", "size", ")", "\n", "return", "combine", "(", "out", ",", "out", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn": [[13, 28], ["x.transpose().contiguous.transpose().contiguous", "pairwise_distance.topk", "y.transpose().contiguous.transpose().contiguous", "torch.cdist", "x.transpose().contiguous.transpose", "y.transpose().contiguous.transpose"], "function", ["None"], ["", "def", "knn", "(", "x", ",", "y", "=", "None", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    :param x: BxCxN\n    :param y: BxCxM\n    :param k: scalar\n    :return: BxMxk\n    \"\"\"", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "y", "is", "None", ":", "\n", "        ", "y", "=", "x", "\n", "", "else", ":", "\n", "        ", "y", "=", "y", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "", "pairwise_distance", "=", "-", "torch", ".", "cdist", "(", "x", ",", "y", ")", "\n", "_", ",", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn_plus_scores": [[29, 44], ["x.transpose().contiguous.transpose().contiguous", "pairwise_distance.topk", "y.transpose().contiguous.transpose().contiguous", "torch.cdist", "x.transpose().contiguous.transpose", "y.transpose().contiguous.transpose"], "function", ["None"], ["", "def", "knn_plus_scores", "(", "x", ",", "y", "=", "None", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    :param x: BxCxN\n    :param y: BxCxM\n    :param k: scalar\n    :return: BxMxk\n    \"\"\"", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "y", "is", "None", ":", "\n", "        ", "y", "=", "x", "\n", "", "else", ":", "\n", "        ", "y", "=", "y", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "", "pairwise_distance", "=", "-", "torch", ".", "cdist", "(", "x", ",", "y", ")", "\n", "scores", ",", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "# (batch_size, num_points, k)", "\n", "return", "scores", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn_plus_scores_masked": [[45, 63], ["x.transpose().contiguous.transpose().contiguous", "min", "pairwise_distance.topk", "y.transpose().contiguous.transpose().contiguous", "x.transpose().contiguous.transpose", "torch.cdist", "gcnext.create_mask", "y.transpose().contiguous.transpose", "wordlens.max"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.create_mask"], ["", "def", "knn_plus_scores_masked", "(", "x", ",", "wordlens", ",", "y", "=", "None", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    :param x: BxCxN\n    :param y: BxCxM\n    :param k: scalar\n    :return: BxMxk\n    \"\"\"", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "y", "is", "None", ":", "\n", "        ", "y", "=", "x", "\n", "", "else", ":", "\n", "        ", "y", "=", "y", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "pairwise_distance", "=", "-", "torch", ".", "cdist", "(", "x", ",", "y", ")", "+", "create_mask", "(", "wordlens", ",", "wordlens", ".", "max", "(", ")", ",", "negative", "=", "True", ")", "*", "-", "1e10", "\n", "\n", "k", "=", "min", "(", "k", ",", "x", ".", "shape", "[", "1", "]", ")", "\n", "scores", ",", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "# (batch_size, num_points, k)", "\n", "return", "scores", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature": [[65, 107], ["x.view().repeat.size", "x.view().repeat.view", "idx.view.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "feature.permute.view", "x.view().repeat.view().repeat", "x.view().repeat.size", "prev_x.size", "gcnext.knn", "torch.arange().view", "prev_x.view", "torch.cat().permute", "torch.from_numpy().to", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat().permute", "feature.permute.permute", "torch.arange", "torch.cat", "torch.from_numpy", "torch.cat", "numpy.random.choice", "feature.permute.size", "feature.permute.size"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "get_graph_feature", "(", "x", ",", "prev_x", "=", "None", ",", "k", "=", "20", ",", "idx_knn", "=", "None", ",", "r", "=", "-", "1", ",", "style", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param x:\n    :param prev_x:\n    :param k:\n    :param idx:\n    :param r: output downsampling factor (-1 for no downsampling)\n    :param style: method to get graph feature\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "if", "prev_x", "is", "None", "else", "prev_x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "prev_x", "is", "None", ":", "\n", "        ", "prev_x", "=", "x", "\n", "\n", "", "if", "idx_knn", "is", "None", ":", "\n", "        ", "idx_knn", "=", "knn", "(", "x", "=", "x", ",", "y", "=", "prev_x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "else", ":", "\n", "        ", "k", "=", "idx_knn", ".", "shape", "[", "-", "1", "]", "\n", "# print(idx_knn.shape)", "\n", "", "device", "=", "x", ".", "device", "# torch.device('cuda')", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "idx", "=", "idx_knn", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims)", "\n", "feature", "=", "prev_x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "if", "style", "==", "0", ":", "# use offset as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "1", ":", "# use feature as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "# style == 2:", "\n", "        ", "feature", "=", "feature", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# downsample if needed", "\n", "", "if", "r", "!=", "-", "1", ":", "\n", "        ", "select_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "2", ")", "//", "r", ",", "\n", "replace", "=", "False", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "feature", "=", "feature", "[", ":", ",", ":", ",", "select_idx", ",", ":", "]", "\n", "", "return", "feature", ",", "idx_knn", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature_plus_scores": [[108, 150], ["x.view().repeat.size", "x.view().repeat.view", "idx.view.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "feature.permute.view", "x.view().repeat.view().repeat", "x.view().repeat.size", "prev_x.size", "gcnext.knn_plus_scores", "torch.arange().view", "prev_x.view", "torch.cat().permute", "torch.from_numpy().to", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat().permute", "feature.permute.permute", "torch.arange", "torch.cat", "torch.from_numpy", "torch.cat", "numpy.random.choice", "feature.permute.size", "feature.permute.size"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn_plus_scores", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "get_graph_feature_plus_scores", "(", "x", ",", "prev_x", "=", "None", ",", "k", "=", "20", ",", "idx_knn", "=", "None", ",", "r", "=", "-", "1", ",", "style", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param x:\n    :param prev_x:\n    :param k:\n    :param idx:\n    :param r: output downsampling factor (-1 for no downsampling)\n    :param style: method to get graph feature\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "if", "prev_x", "is", "None", "else", "prev_x", ".", "size", "(", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "prev_x", "is", "None", ":", "\n", "        ", "prev_x", "=", "x", "\n", "\n", "", "if", "idx_knn", "is", "None", ":", "\n", "        ", "scores", ",", "idx_knn", "=", "knn_plus_scores", "(", "x", "=", "x", ",", "y", "=", "prev_x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "else", ":", "\n", "        ", "k", "=", "idx_knn", ".", "shape", "[", "-", "1", "]", "\n", "# print(idx_knn.shape)", "\n", "", "device", "=", "x", ".", "device", "# torch.device('cuda')", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "idx", "=", "idx_knn", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims)", "\n", "feature", "=", "prev_x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "if", "style", "==", "0", ":", "# use offset as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "1", ":", "# use feature as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "# style == 2:", "\n", "        ", "feature", "=", "feature", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# downsample if needed", "\n", "", "if", "r", "!=", "-", "1", ":", "\n", "        ", "select_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "2", ")", "//", "r", ",", "\n", "replace", "=", "False", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "feature", "=", "feature", "[", ":", ",", ":", ",", "select_idx", ",", ":", "]", "\n", "", "return", "feature", ",", "idx_knn", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature_plus_scores_masked": [[151, 195], ["x.view().repeat.size", "min", "x.view().repeat.view", "idx.view.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "feature.permute.view", "x.view().repeat.view().repeat", "x.view().repeat.size", "prev_x.size", "gcnext.knn_plus_scores_masked", "torch.arange().view", "prev_x.view", "torch.cat().permute", "torch.from_numpy().to", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat().permute", "feature.permute.permute", "torch.arange", "torch.cat", "torch.from_numpy", "torch.cat", "numpy.random.choice", "feature.permute.size", "feature.permute.size"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.knn_plus_scores_masked", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "get_graph_feature_plus_scores_masked", "(", "x", ",", "wordlens", ",", "prev_x", "=", "None", ",", "k", "=", "20", ",", "idx_knn", "=", "None", ",", "r", "=", "-", "1", ",", "style", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param x:\n    :param prev_x:\n    :param k:\n    :param idx:\n    :param r: output downsampling factor (-1 for no downsampling)\n    :param style: method to get graph feature\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "if", "prev_x", "is", "None", "else", "prev_x", ".", "size", "(", "2", ")", "\n", "k", "=", "min", "(", "k", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "prev_x", "is", "None", ":", "\n", "        ", "prev_x", "=", "x", "\n", "\n", "", "if", "idx_knn", "is", "None", ":", "\n", "        ", "scores", ",", "idx_knn", "=", "knn_plus_scores_masked", "(", "x", "=", "x", ",", "wordlens", "=", "wordlens", ",", "y", "=", "prev_x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "else", ":", "\n", "        ", "k", "=", "idx_knn", ".", "shape", "[", "-", "1", "]", "\n", "\n", "# print(idx_knn.shape)", "\n", "", "device", "=", "x", ".", "device", "# torch.device('cuda')", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "idx", "=", "idx_knn", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims)", "\n", "feature", "=", "prev_x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "if", "style", "==", "0", ":", "# use offset as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "1", ":", "# use feature as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "# style == 2:", "\n", "        ", "feature", "=", "feature", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# downsample if needed", "\n", "", "if", "r", "!=", "-", "1", ":", "\n", "        ", "select_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "2", ")", "//", "r", ",", "\n", "replace", "=", "False", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "feature", "=", "feature", "[", ":", ",", ":", ",", "select_idx", ",", ":", "]", "\n", "", "return", "feature", ",", "idx_knn", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.miscellaneous.mkdir": [[10, 16], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.miscellaneous.save_labels": [[18, 35], ["comm.is_main_process", "logging.getLogger", "hasattr", "os.path.join", "logging.getLogger.info", "ids_to_labels.update", "logging.getLogger.warning", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update"], ["", "", "", "def", "save_labels", "(", "dataset_list", ",", "output_dir", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "ids_to_labels", "=", "{", "}", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "'categories'", ")", ":", "\n", "                ", "ids_to_labels", ".", "update", "(", "dataset", ".", "categories", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Dataset [{}] has no categories attribute, labels.json file won't be created\"", ".", "format", "(", "\n", "dataset", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "", "if", "ids_to_labels", ":", "\n", "            ", "labels_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'labels.json'", ")", "\n", "logger", ".", "info", "(", "\"Saving labels mapping into {}\"", ".", "format", "(", "labels_file", ")", ")", "\n", "with", "open", "(", "labels_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ids_to_labels", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.miscellaneous.save_config": [[37, 43], ["comm.is_main_process", "open", "copy.deepcopy", "f.write", "copy.deepcopy.dump", "copy.deepcopy.PATHS_CATALOG.split"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process"], ["", "", "", "", "def", "save_config", "(", "cfg", ",", "path", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "cfg_dump", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "cfg_dump", ".", "PATHS_CATALOG", "=", "\"\"", ".", "join", "(", "[", "'./lib'", ",", "cfg_dump", ".", "PATHS_CATALOG", ".", "split", "(", "'/lib'", ")", "[", "-", "1", "]", "]", ")", "\n", "f", ".", "write", "(", "cfg_dump", ".", "dump", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size": [[13, 19], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank": [[21, 27], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process": [[29, 31], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize": [[33, 46], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.all_gather": [[48, 87], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.all_gather", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.all_gather", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.reduce_dict": [[89, 116], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.cleanup": [[117, 119], ["torch.destroy_process_group"], "function", ["None"], ["", "def", "cleanup", "(", ")", ":", "\n", "    ", "dist", ".", "destroy_process_group", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.__init__": [[9, 11], ["timer.Timer.reset"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.average_time": [[12, 15], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "average_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_time", "/", "self", ".", "calls", "if", "self", ".", "calls", ">", "0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.tic": [[16, 20], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ")", ":", "\n", "# using time.time instead of time.clock because time time.clock", "\n", "# does not normalize for multithreading", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.toc": [[21, 27], ["timer.Timer.add", "time.time"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.add"], ["", "def", "toc", "(", "self", ",", "average", "=", "True", ")", ":", "\n", "        ", "self", ".", "add", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", ")", "\n", "if", "average", ":", "\n", "            ", "return", "self", ".", "average_time", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.add": [[28, 32], ["None"], "methods", ["None"], ["", "", "def", "add", "(", "self", ",", "time_diff", ")", ":", "\n", "        ", "self", ".", "diff", "=", "time_diff", "\n", "self", ".", "total_time", "+=", "self", ".", "diff", "\n", "self", ".", "calls", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_time", "=", "0.0", "\n", "self", ".", "calls", "=", "0", "\n", "self", ".", "start_time", "=", "0.0", "\n", "self", ".", "diff", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.avg_time_str": [[39, 42], ["str", "datetime.timedelta"], "methods", ["None"], ["", "def", "avg_time_str", "(", "self", ")", ":", "\n", "        ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "self", ".", "average_time", ")", ")", "\n", "return", "time_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.get_time_str": [[44, 47], ["str", "datetime.timedelta"], "function", ["None"], ["", "", "def", "get_time_str", "(", "time_diff", ")", ":", "\n", "    ", "time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time_diff", ")", ")", "\n", "return", "time_str", "\n", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.position.PositionalEncoding.__init__": [[7, 18], ["torch.nn.Module.__init__", "torch.nn.Dropout", "torch.zeros", "torch.arange().unsqueeze", "torch.exp", "torch.sin", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "torch.arange().unsqueeze.PositionalEncoding.register_buffer", "torch.arange", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "100", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.position.PositionalEncoding.forward": [[19, 26], ["position.PositionalEncoding.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# print(self.pe)", "\n", "# print(x.shape) # 16,400,100", "\n", "# print(self.pe.shape)", "\n", "# exit(0)", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.position.PositionalEncoding2d.__init__": [[33, 63], ["torch.nn.Module.__init__", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "pos.unsqueeze.unsqueeze.unsqueeze", "position.PositionalEncoding2d.register_buffer", "ValueError", "torch.arange().view", "torch.arange().view", "torch.stack", "torch.stack", "torch.cat", "torch.arange", "torch.arange", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["def", "__init__", "(", "self", ",", "num_pos_feats", "=", "64", ",", "temperature", "=", "10000", ",", "max_len", "=", "100", ",", "dropout", "=", "0.0", ",", "normalize", "=", "False", ",", "scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_pos_feats", "=", "num_pos_feats", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "normalize", "=", "normalize", "\n", "if", "scale", "is", "not", "None", "and", "normalize", "is", "False", ":", "\n", "            ", "raise", "ValueError", "(", "\"normalize should be True if scale is passed\"", ")", "\n", "", "if", "scale", "is", "None", ":", "\n", "            ", "scale", "=", "2", "*", "math", ".", "pi", "\n", "", "self", ".", "scale", "=", "scale", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "num_pos_feats", ",", "max_len", ",", "max_len", ")", "\n", "x_embed", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "view", "(", "max_len", ",", "1", ")", ".", "expand", "(", "max_len", ",", "max_len", ")", "\n", "y_embed", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "view", "(", "1", ",", "max_len", ")", ".", "expand", "(", "max_len", ",", "max_len", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "eps", "=", "1e-6", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "eps", ")", "*", "self", ".", "scale", "\n", "\n", "", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "num_pos_feats", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "(", "dim_t", "//", "2", ")", "/", "self", ".", "num_pos_feats", ")", "\n", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "(", "pos_x", "[", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "3", ")", ".", "flatten", "(", "2", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "(", "pos_y", "[", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", ")", ",", "dim", "=", "3", ")", ".", "flatten", "(", "2", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "pos", "=", "pos", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pos2d'", ",", "pos", ")", "\n", "# self.dropout = nn.Dropout(p=dropout)", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.position.PositionalEncoding2d.forward": [[65, 68], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return self.dropout(x + self.pos2d)", "\n", "        ", "return", "x", "+", "self", ".", "pos2d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.logger.setup_logger": [[6, 21], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "return", "logger", "\n", "", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.logger.setup_logger_wandb": [[23, 50], ["config.get", "getattr", "logging.Formatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.info", "config.get.upper", "isinstance", "ValueError", "os.exists", "os.makedirs", "os.makedirs", "os.join", "os.basename"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.config.paths_catalog.DatasetCatalog.get"], ["", "def", "setup_logger_wandb", "(", "config", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    Configure logger on given level. Logging will occur on standard\n    output and in a log file saved in model_dir.\n    \"\"\"", "\n", "loglevel", "=", "config", ".", "get", "(", "'loglevel'", ",", "'INFO'", ")", "\n", "numeric_level", "=", "getattr", "(", "logging", ",", "loglevel", ".", "upper", "(", ")", ",", "None", ")", "\n", "if", "not", "isinstance", "(", "numeric_level", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid log level: {}'", ".", "format", "(", "loglevel", ")", ")", "\n", "\n", "", "log_format", "=", "logging", ".", "Formatter", "(", "'%(asctime)s %(message)s'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "numeric_level", ")", "\n", "if", "not", "osp", ".", "exists", "(", "cfg", ".", "OUTPUT_DIR", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "OUTPUT_DIR", ")", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "osp", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\n", "'{}.log'", ".", "format", "(", "osp", ".", "basename", "(", "cfg", ".", "OUTPUT_DIR", ")", ")", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "\n", "file_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logging", ".", "root", "=", "logger", "\n", "logging", ".", "info", "(", "\"save log, checkpoint and code to: {}\"", ".", "format", "(", "cfg", ".", "OUTPUT_DIR", ")", ")", "\n", "\n", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.registry._register_generic", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.__init__": [[11, 28], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save": [[29, 48], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.tag_last_checkpoint"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "# self.delete_previous_checkpoints(name)", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.delete_previous_checkpoints": [[50, 54], ["os.listdir", "os.remove"], "methods", ["None"], ["", "def", "delete_previous_checkpoints", "(", "self", ",", "latest", ")", ":", "\n", "        ", "for", "f_name", "in", "os", ".", "listdir", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "if", "(", "'pth'", "in", "f_name", ")", "and", "(", "'model_best_epoch'", "not", "in", "f_name", ")", "and", "(", "latest", "not", "in", "f_name", ")", ":", "\n", "                ", "os", ".", "remove", "(", "f'{self.save_dir}/{f_name}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.cleanup_data": [[55, 59], ["os.listdir", "os.remove"], "methods", ["None"], ["", "", "", "def", "cleanup_data", "(", "self", ")", ":", "\n", "        ", "for", "f_name", "in", "os", ".", "listdir", "(", "self", ".", "save_dir", ")", ":", "\n", "            ", "if", "(", "'pth'", "in", "f_name", ")", "and", "(", "'model_best_epoch'", "not", "in", "f_name", ")", ":", "\n", "                ", "os", ".", "remove", "(", "f'{self.save_dir}/{f_name}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.load": [[60, 80], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.VLGCheckpointer._load_file", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict"], ["", "", "", "def", "load", "(", "self", ",", "f", "=", "None", ",", "use_latest", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "has_checkpoint", "(", ")", "and", "use_latest", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", ")", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.has_checkpoint": [[81, 84], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "has_checkpoint", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.get_checkpoint_file": [[85, 96], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["None"], ["", "def", "get_checkpoint_file", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", "\n", "last_saved", "=", "last_saved", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[97, 101], ["os.path.join", "open", "f.write"], "methods", ["None"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer._load_file": [[102, 104], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer._load_model": [[105, 107], ["lib.utils.model_serialization.load_state_dict", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.model_serialization.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "load_state_dict", "(", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.VLGCheckpointer.__init__": [[110, 124], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VLGCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.VLGCheckpointer._load_file": [[125, 130], ["checkpoint.Checkpointer._load_file", "dict"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.VLGCheckpointer._load_file", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "loaded", "=", "super", "(", "VLGCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.__getattr__": [[18, 22], ["AttributeError"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "key", ":", "str", ")", "->", "Any", ":", "\n", "        ", "if", "key", "not", "in", "self", ":", "\n", "            ", "raise", "AttributeError", "(", "key", ")", "\n", "", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.__setattr__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "key", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.__delattr__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "key", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load": [[29, 42], ["reversed", "os.path.exists", "FileNotFoundError", "os.path.exists", "os.path.splitext", "os.path.dirname", "os.path.dirname", "fpaths.append", "os.path.join", "open", "config.Config.update", "yaml.safe_load"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update"], ["", "def", "load", "(", "self", ",", "fpath", ":", "str", ",", "*", ",", "recursive", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "fpath", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "fpath", ")", "\n", "", "fpaths", "=", "[", "fpath", "]", "\n", "if", "recursive", ":", "\n", "            ", "extension", "=", "os", ".", "path", ".", "splitext", "(", "fpath", ")", "[", "1", "]", "\n", "while", "os", ".", "path", ".", "dirname", "(", "fpath", ")", "!=", "fpath", ":", "\n", "                ", "fpath", "=", "os", ".", "path", ".", "dirname", "(", "fpath", ")", "\n", "fpaths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "fpath", ",", "'default'", "+", "extension", ")", ")", "\n", "", "", "for", "fpath", "in", "reversed", "(", "fpaths", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "fpath", ")", ":", "\n", "                ", "with", "open", "(", "fpath", ")", "as", "f", ":", "\n", "                    ", "self", ".", "update", "(", "yaml", ".", "safe_load", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.reload": [[43, 46], ["config.Config.clear", "config.Config.load"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load"], ["", "", "", "", "def", "reload", "(", "self", ",", "fpath", ":", "str", ",", "*", ",", "recursive", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "load", "(", "fpath", ",", "recursive", "=", "recursive", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update": [[57, 79], ["len", "opt.startswith", "key.split", "opt.split", "ast.literal_eval", "current.setdefault.setdefault.setdefault", "config.Config"], "methods", ["None"], ["", "", "", "@", "multimethod", "\n", "def", "update", "(", "self", ",", "opts", ":", "Union", "[", "List", ",", "Tuple", "]", ")", "->", "None", ":", "\n", "        ", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "opts", ")", ":", "\n", "            ", "opt", "=", "opts", "[", "index", "]", "\n", "if", "opt", ".", "startswith", "(", "'--'", ")", ":", "\n", "                ", "opt", "=", "opt", "[", "2", ":", "]", "\n", "", "if", "'='", "in", "opt", ":", "\n", "                ", "key", ",", "value", "=", "opt", ".", "split", "(", "'='", ",", "1", ")", "\n", "index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "key", ",", "value", "=", "opt", ",", "opts", "[", "index", "+", "1", "]", "\n", "index", "+=", "2", "\n", "", "current", "=", "self", "\n", "subkeys", "=", "key", ".", "split", "(", "'.'", ")", "\n", "try", ":", "\n", "                ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "for", "subkey", "in", "subkeys", "[", ":", "-", "1", "]", ":", "\n", "                ", "current", "=", "current", ".", "setdefault", "(", "subkey", ",", "Config", "(", ")", ")", "\n", "", "current", "[", "subkeys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict": [[80, 87], ["config.Config.dict"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "", "def", "dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "configs", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "Config", ")", ":", "\n", "                ", "value", "=", "value", ".", "dict", "(", ")", "\n", "", "configs", "[", "key", "]", "=", "value", "\n", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.hash": [[88, 91], ["json.dumps", "hashlib.sha256().hexdigest", "config.Config.dict", "hashlib.sha256", "json.dumps.encode"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "def", "hash", "(", "self", ")", "->", "str", ":", "\n", "        ", "buffer", "=", "json", ".", "dumps", "(", "self", ".", "dict", "(", ")", ",", "sort_keys", "=", "True", ")", "\n", "return", "hashlib", ".", "sha256", "(", "buffer", ".", "encode", "(", ")", ")", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.__str__": [[92, 105], ["config.Config.items", "isinstance", "text.split", "enumerate", "texts.extend", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "texts", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "Config", ")", ":", "\n", "                ", "seperator", "=", "'\\n'", "\n", "", "else", ":", "\n", "                ", "seperator", "=", "' '", "\n", "", "text", "=", "key", "+", "':'", "+", "seperator", "+", "str", "(", "value", ")", "\n", "lines", "=", "text", ".", "split", "(", "'\\n'", ")", "\n", "for", "k", ",", "line", "in", "enumerate", "(", "lines", "[", "1", ":", "]", ")", ":", "\n", "                ", "lines", "[", "k", "+", "1", "]", "=", "(", "' '", "*", "2", ")", "+", "line", "\n", "", "texts", ".", "extend", "(", "lines", ")", "\n", "", "return", "'\\n'", ".", "join", "(", "texts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.WandbUrls.__init__": [[11, 25], ["url.split", "url.split", "url.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "url", ")", ":", "\n", "\n", "        ", "hash", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "project", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "\n", "entity", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "4", "]", "\n", "\n", "self", ".", "weight_url", "=", "url", "\n", "self", ".", "log_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/logs\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "chart_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "overview_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/overview\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "self", ".", "config_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/files/hydra-config.yaml\"", ".", "format", "(", "\n", "entity", ",", "project", ",", "hash", "\n", ")", "\n", "self", ".", "overrides_url", "=", "\"https://app.wandb.ai/{}/{}/runs/{}/files/overrides.yaml\"", ".", "format", "(", "entity", ",", "project", ",", "hash", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.WandbUrls.__repr__": [[26, 32], ["wandb_utils.WandbUrls.__dict__.items", "k.upper"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "msg", "=", "\"=================================================== WANDB URLS ===================================================================\\n\"", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "msg", "+=", "\"{}: {}\\n\"", ".", "format", "(", "k", ".", "upper", "(", ")", ",", "v", ")", "\n", "", "msg", "+=", "\"=================================================================================================================================\\n\"", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb.set_urls_to_model": [[36, 40], ["wandb_utils.WandbUrls"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "set_urls_to_model", "(", "model", ",", "url", ")", ":", "\n", "        ", "wandb_urls", "=", "WandbUrls", "(", "url", ")", "\n", "model", ".", "wandb", "=", "wandb_urls", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args": [[41, 46], ["getattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "name", ")", ":", "\n", "        ", "var", "=", "getattr", "(", "cfg", ".", "wandb", ",", "name", ",", "None", ")", "\n", "if", "var", ":", "\n", "            ", "wandb_args", "[", "name", "]", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb.launch": [[47, 83], ["wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_utils.Wandb._set_to_wandb_args", "wandb_args.get", "wandb.init", "wandb.save", "wandb.save", "subprocess.check_output().decode().strip", "subprocess.check_output().decode", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "os.getcwd", "subprocess.check_output().decode", "subprocess.check_output", "subprocess.check_output"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb._set_to_wandb_args", "home.repos.pwc.inspect_result.Soldelli_MAD.config.paths_catalog.DatasetCatalog.get", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save"], ["", "", "@", "staticmethod", "\n", "def", "launch", "(", "cfg", ",", "launch", ":", "bool", ")", ":", "\n", "        ", "if", "launch", ":", "\n", "            ", "import", "wandb", "\n", "\n", "Wandb", ".", "IS_ACTIVE", "=", "True", "\n", "wandb_args", "=", "{", "}", "\n", "wandb_args", "[", "\"resume\"", "]", "=", "\"allow\"", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"tags\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"project\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"name\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"entity\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"notes\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"config\"", ")", "\n", "Wandb", ".", "_set_to_wandb_args", "(", "wandb_args", ",", "cfg", ",", "\"id\"", ")", "\n", "\n", "try", ":", "\n", "                ", "commit_sha", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"rev-parse\"", ",", "\"HEAD\"", "]", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "strip", "(", ")", "\n", "gitdiff", "=", "subprocess", ".", "check_output", "(", "[", "\"git\"", ",", "\"diff\"", ",", "\"--\"", ",", "\"':!notebooks'\"", "]", ")", ".", "decode", "(", ")", "\n", "", "except", ":", "\n", "                ", "commit_sha", "=", "\"n/a\"", "\n", "gitdiff", "=", "\"\"", "\n", "\n", "", "config", "=", "wandb_args", ".", "get", "(", "\"config\"", ",", "{", "}", ")", "\n", "wandb_args", "[", "\"config\"", "]", "=", "{", "\n", "**", "config", ",", "\n", "\"run_path\"", ":", "os", ".", "getcwd", "(", ")", ",", "\n", "\"commit\"", ":", "commit_sha", ",", "\n", "\"gitdiff\"", ":", "gitdiff", "\n", "}", "\n", "# if dist.get_rank() == 0:", "\n", "\n", "wandb", ".", "init", "(", "**", "wandb_args", ",", "dir", "=", "cfg", ".", "OUTPUT_DIR", ",", "sync_tensorboard", "=", "True", ")", "# this is the core command to init wandb", "\n", "\n", "wandb", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "cfg", ".", "OUTPUT_DIR", ",", "'config.yml'", ")", ")", "\n", "wandb", ".", "save", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "cfg", ".", "OUTPUT_DIR", ",", "'*.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.utils.wandb_utils.Wandb.add_file": [[84, 92], ["os.path.basename", "os.path.basename", "os.path.basename", "os.path.basename", "shutil.copyfile", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_file", "(", "file_path", ":", "str", ")", ":", "\n", "        ", "if", "not", "Wandb", ".", "IS_ACTIVE", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"wandb is inactive, please launch first.\"", ")", "\n", "", "import", "wandb", "\n", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "file_path", ")", "\n", "shutil", ".", "copyfile", "(", "file_path", ",", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "filename", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.Graph_Matching_Module.__init__": [[8, 19], ["torch.nn.Module.__init__", "graph_matching.Graph_Matching_Module.setup_graph_matchin_operations", "torch.nn.Sequential", "torch.nn.Conv1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.Graph_Matching_Module.setup_graph_matchin_operations"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "Graph_Matching_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initialize graph matching layers------------------------------------------", "\n", "self", ".", "setup_graph_matchin_operations", "(", "cfg", ")", "\n", "\n", "# Ourput projection 1x1 conv -----------------------------------------------", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.Graph_Matching_Module.setup_graph_matchin_operations": [[21, 35], ["dict", "torch.nn.Sequential", "graph_matching.BidirectionalGraphMatching"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "def", "setup_graph_matchin_operations", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "prm", "=", "dict", "(", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", ",", "\n", "k", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "NUM_NEIGHBOURS", ",", "\n", "groups", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "GROUPS", ",", "\n", "width_group", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "WIDTH_GROUP", ",", "\n", "enable_ordering", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "ORDERING_EDGE", ",", "\n", "enable_semantic", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "SEMANTIC_EDGE", ",", "\n", "enable_matching", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "MATCHING_EDGE", ",", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "MATCH", ".", "DROPOUT_GM", ",", "\n", ")", "\n", "\n", "gm_layers", "=", "[", "BidirectionalGraphMatching", "(", "**", "prm", ")", "]", "\n", "self", ".", "graph_matching", "=", "nn", ".", "Sequential", "(", "*", "gm_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.Graph_Matching_Module.forward": [[37, 49], ["graph_matching.Graph_Matching_Module.graph_matching", "graph_matching.Graph_Matching_Module.conv1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "'''\n            INPUTS:\n            x : Tensor = [B, Feat_dimension, temporal_resolution] \n            queries: Tensor = [B, Feat_dimension, max_num_words_in_batch]\n            wordlens: Tensor = [B]\n\n            OUTPUTS:\n            output: Tensor of shape [B, N, Feat_dimension]\n        '''", "\n", "v", ",", "q", ",", "_", "=", "self", ".", "graph_matching", "(", "[", "x", ",", "queries", ",", "wordlens", "]", ")", "\n", "return", "self", ".", "conv1x1", "(", "v", ")", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching.__init__": [[54, 117], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d", "torch.nn.ReLU", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "k", "=", "3", ",", "norm_layer", "=", "False", ",", "groups", "=", "32", ",", "width_group", "=", "4", ",", "\n", "idx", "=", "None", ",", "enable_ordering", "=", "True", ",", "enable_semantic", "=", "True", ",", "\n", "enable_matching", "=", "True", ",", "enable_skip_connection", "=", "True", ",", "dropout", "=", "0.0", ")", ":", "\n", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "if", "norm_layer", ":", "\n", "\t\t\t\t", "norm_layer", "=", "nn", ".", "BatchNorm1d", "\n", "", "width", "=", "width_group", "*", "groups", "\n", "\n", "self", ".", "tconvs", "=", "nn", ".", "ModuleDict", "(", "{", "\n", "'video'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", ",", "\n", "'query'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "}", ")", "# video temporal graph", "\n", "\n", "self", ".", "vconvs", "=", "nn", ".", "ModuleDict", "(", "{", "\n", "'video'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", ",", "\n", "'query'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "}", ")", "# video semantic graph", "\n", "\n", "self", ".", "qconvs", "=", "nn", ".", "ModuleDict", "(", "{", "\n", "'video'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", ",", "\n", "'query'", ":", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "hidden_size", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "hidden_size", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "}", ")", "# query graph", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "\n", "self", ".", "ord", ",", "self", ".", "sem", ",", "self", ".", "match", ",", "self", ".", "skip", "=", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "\n", "if", "not", "enable_ordering", ":", "\n", "\t\t\t", "self", ".", "ord", "=", "0.0", "\n", "", "if", "not", "enable_semantic", ":", "\n", "\t\t\t", "self", ".", "sem", "=", "0.0", "\n", "", "if", "not", "enable_matching", ":", "\n", "\t\t\t", "self", ".", "match", "=", "0.0", "\n", "", "if", "not", "enable_skip_connection", ":", "\n", "\t\t\t", "self", ".", "skip", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._pairwise_dot_product_similarity": [[118, 128], ["torch.bmm", "x.transpose"], "methods", ["None"], ["", "", "def", "_pairwise_dot_product_similarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\t\t", "\"\"\"Compute the dot product similarity between x and y.\n\t\tArgs:\n\t\t\tx: BxDxN float tensor.\n\t\t\ty: BxDxM float tensor.\n\n\t\tReturns:\n\t\t\ts: BxNxM float tensor, the pairwise dot product similarity.\n\t\t\"\"\"", "\n", "return", "torch", ".", "bmm", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._compute_cross_attention": [[129, 145], ["graph_matching.BidirectionalGraphMatching._pairwise_dot_product_similarity", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.softmax.transpose"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._pairwise_dot_product_similarity"], ["", "def", "_compute_cross_attention", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "\t\t", "\"\"\"Compute cross attention.\n\t\tArgs:\n\t\t\tx: BxDxN float tensor.\n\t\t\ty: BxDxM float tensor.\n\n\t\tReturns:\n\t\t\tattention_x: BxDxN float tensor.\n\t\t\tattention_y: BxDxM float tensor.\n\t\t\"\"\"", "\n", "a", "=", "self", ".", "_pairwise_dot_product_similarity", "(", "v", ",", "q", ")", "\n", "a_v", "=", "torch", ".", "softmax", "(", "a", ",", "dim", "=", "2", ")", "# i->j", "\n", "a_q", "=", "torch", ".", "softmax", "(", "a", ",", "dim", "=", "1", ")", "# j->i", "\n", "attention_v", "=", "torch", ".", "bmm", "(", "q", ",", "a_v", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attention_q", "=", "torch", ".", "bmm", "(", "v", ",", "a_q", ")", "\n", "return", "attention_v", ",", "attention_q", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._create_query_mask": [[146, 151], ["wordlens.new_zeros", "enumerate", "len", "max"], "methods", ["None"], ["", "def", "_create_query_mask", "(", "self", ",", "wordlens", ")", ":", "\n", "\t\t", "mask", "=", "wordlens", ".", "new_zeros", "(", "(", "len", "(", "wordlens", ")", ",", "1", ",", "max", "(", "wordlens", ")", ")", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "wordlens", ")", ":", "\n", "\t\t\t", "mask", "[", "i", ",", ":", ",", "l", ":", "]", "=", "1e10", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._create_query_mask2": [[153, 157], ["torch.functional.F.one_hot", "x.narrow.narrow.narrow", "x.narrow.narrow.cumsum_().mul_().unsqueeze_", "x.narrow.narrow.cumsum_().mul_", "int", "x.narrow.narrow.cumsum_"], "methods", ["None"], ["", "def", "_create_query_mask2", "(", "word_lengths", ")", ":", "\n", "\t\t", "x", "=", "F", ".", "one_hot", "(", "word_lengths", ")", "\n", "x", "=", "x", ".", "narrow", "(", "-", "1", ",", "0", ",", "x", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "\n", "return", "x", ".", "cumsum_", "(", "dim", "=", "-", "1", ")", ".", "mul_", "(", "int", "(", "1e10", ")", ")", ".", "unsqueeze_", "(", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching.update_graph": [[158, 183], ["torch.softmax", "torch.cat", "torch.cat", "lib.utils.gcnext.get_graph_feature_plus_scores", "lib.utils.gcnext.get_graph_feature_plus_scores_masked"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature_plus_scores", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.gcnext.get_graph_feature_plus_scores_masked"], ["", "def", "update_graph", "(", "self", ",", "feat", ",", "att", ",", "modality_key", ",", "wordlens", ")", ":", "\n", "\t\t", "if", "wordlens", "is", "None", ":", "\n", "\t\t\t", "neighbours", ",", "idx", ",", "scores", "=", "get_graph_feature_plus_scores", "(", "feat", ",", "k", "=", "self", ".", "k", ",", "style", "=", "2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "neighbours", ",", "idx", ",", "scores", "=", "get_graph_feature_plus_scores_masked", "(", "feat", ",", "wordlens", ",", "k", "=", "self", ".", "k", ",", "style", "=", "2", ")", "\n", "", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "\n", "neighbours", "=", "(", "neighbours", "*", "scores", "[", ":", ",", "None", ",", ":", "]", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# Compute semantic edge aggregation", "\n", "sem_featx2", "=", "torch", ".", "cat", "(", "[", "feat", ",", "neighbours", "]", ",", "dim", "=", "1", ")", "\n", "sem_feat", "=", "self", ".", "vconvs", "[", "modality_key", "]", "(", "sem_featx2", ")", "# (B, D, T, k) -> (B, D, T)", "\n", "\n", "# Compute matching edge aggregation", "\n", "match_featx2", "=", "torch", ".", "cat", "(", "[", "feat", ",", "att", "]", ",", "dim", "=", "1", ")", "\n", "match_feat", "=", "self", ".", "qconvs", "[", "modality_key", "]", "(", "match_featx2", ")", "# (B, D, L, k) -> (B, D, T)", "\n", "\n", "# Compute ordering edge aggregation (convolution with kernel=3)", "\n", "ord_feat", "=", "self", ".", "tconvs", "[", "modality_key", "]", "(", "feat", ")", "\n", "\n", "# Construct new graph (with possible skip connection)", "\n", "out", "=", "sem_feat", "*", "self", ".", "sem", "+", "match_feat", "*", "self", ".", "match", "+", "ord_feat", "*", "self", ".", "ord", "+", "feat", "*", "self", ".", "skip", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching.forward": [[184, 214], ["video_feat.contiguous.contiguous.contiguous", "query_feat.contiguous.contiguous.contiguous", "graph_matching.BidirectionalGraphMatching._compute_cross_attention", "graph_matching.BidirectionalGraphMatching.update_graph", "graph_matching.BidirectionalGraphMatching.update_graph"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching._compute_cross_attention", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching.update_graph", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.graph_matching.BidirectionalGraphMatching.update_graph"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tinput_ = [video_feat, query_feat, wordlens]\n\t\t\tvideo_feat: B,D,T\n\t\t\tquery_feat: B,D,L\n\n\t\t\tT = Number of features for video\n\t\t\tL = Number of features for language\n\t\t\tD = feature size\n\t\t\"\"\"", "\n", "video_feat", ",", "query_feat", ",", "wordlens", "=", "input_", "\n", "\n", "B", ",", "D", ",", "T", "=", "video_feat", ".", "shape", "\n", "B", ",", "Dq", ",", "L", "=", "query_feat", ".", "shape", "\n", "# assert Dq == D, 'video query embedding should be locate in the same space, meet {} v.s. {}'.format(Dq,D)", "\n", "\n", "#Preprocess features --------------------------------------------------------------", "\n", "video_feat", "=", "video_feat", ".", "contiguous", "(", ")", "# (B, D, T)", "\n", "query_feat", "=", "query_feat", ".", "contiguous", "(", ")", "# (B, D, L)", "\n", "\n", "# Compute similarities and cross attention ----------------------------------------", "\n", "v_att", ",", "q_att", "=", "self", ".", "_compute_cross_attention", "(", "video_feat", ",", "query_feat", ")", "\n", "\n", "# Video graph ---------------------------------------------------------------------", "\n", "video_graph", "=", "self", ".", "update_graph", "(", "video_feat", ",", "v_att", ",", "'video'", ",", "None", ")", "\n", "\n", "# Query graph ---------------------------------------------------------------------", "\n", "query_graph", "=", "self", ".", "update_graph", "(", "query_feat", ",", "q_att", ",", "'query'", ",", "wordlens", ")", "\n", "\n", "return", "[", "video_graph", ",", "query_graph", ",", "wordlens", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.language_modeling.Syntac_GCN.__init__": [[6, 19], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_in", ",", "channel_out", ",", "dropout", "=", "0.0", ",", "skip", "=", "False", ")", ":", "\n", "        ", "super", "(", "Syntac_GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_wc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel_in", "*", "2", ",", "channel_out", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel_out", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "wd", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel_out", ",", "channel_out", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "self", ".", "skip", "=", "skip", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.language_modeling.Syntac_GCN.forward": [[20, 56], ["queries.size", "queries.size", "queries.size", "range", "torch.stack", "torch.nonzero", "torch.cat", "language_modeling.Syntac_GCN.w_wc", "language_modeling.Syntac_GCN.squeeze", "torch.functional.F.softmax", "torch.zeros", "language_modeling.Syntac_GCN.wd", "torch.functional.F.relu", "torch.stack.append", "torch.ones_like", "torch.functional.F.softmax.unsqueeze", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "queries", ",", "wordlens", ",", "syntactic_dep", "=", "input_", "\n", "bs", "=", "queries", ".", "size", "(", "0", ")", "\n", "dim", "=", "queries", ".", "size", "(", "2", ")", "\n", "max_lens", "=", "queries", ".", "size", "(", "1", ")", "\n", "syntactic_dep", "=", "syntactic_dep", "[", ":", ",", ":", "max_lens", ",", ":", "max_lens", "]", "\n", "output", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "bs", ")", ":", "\n", "            ", "b_edge", "=", "torch", ".", "nonzero", "(", "syntactic_dep", "[", "b", ",", "...", "]", ",", "as_tuple", "=", "False", ")", "\n", "i_idx", "=", "b_edge", "[", ":", ",", "0", "]", "\n", "j_idx", "=", "b_edge", "[", ":", ",", "1", "]", "\n", "h_i", "=", "queries", "[", "b", ",", "i_idx", ",", ":", "]", "\n", "h_j", "=", "queries", "[", "b", ",", "j_idx", ",", ":", "]", "\n", "h", "=", "torch", ".", "cat", "(", "(", "h_i", ",", "h_j", ")", ",", "1", ")", "# m * 512", "\n", "# print(h.shape)", "\n", "t", "=", "self", ".", "w_wc", "(", "h", ")", "\n", "\n", "# equation 6", "\n", "T", "=", "torch", ".", "ones_like", "(", "syntactic_dep", "[", "0", ",", "...", "]", ",", "dtype", "=", "torch", ".", "float16", ")", "*", "(", "-", "100", ")", "\n", "T", "[", "i_idx", ",", "j_idx", "]", "=", "t", ".", "squeeze", "(", "-", "1", ")", "\n", "beta", "=", "F", ".", "softmax", "(", "T", ",", "dim", "=", "1", ")", "\n", "\n", "# equation 7", "\n", "H", "=", "torch", ".", "zeros", "(", "max_lens", ",", "max_lens", ",", "dim", ",", "dtype", "=", "torch", ".", "float16", ",", "device", "=", "queries", ".", "device", ")", "\n", "H", "[", "i_idx", ",", "j_idx", ",", ":", "]", "=", "self", ".", "wd", "(", "h_j", ")", "\n", "H", "=", "H", "*", "beta", ".", "unsqueeze", "(", "-", "1", ")", "\n", "H", "=", "H", "*", "(", "syntactic_dep", "[", "b", ",", "...", "]", ">", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "b_output", "=", "F", ".", "relu", "(", "queries", "[", "b", ",", "...", "]", "+", "torch", ".", "sum", "(", "H", ",", "dim", "=", "1", ")", ")", "\n", "\n", "output", ".", "append", "(", "b_output", ")", "\n", "\n", "", "output", "=", "torch", ".", "stack", "(", "output", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "skip", ":", "\n", "            ", "assert", "dim", "==", "output", ".", "shape", "[", "2", "]", ",", "'Shape of queris is {}, Shape of output is {}'", ".", "format", "(", "dim", ",", "output", ".", "shape", ")", "\n", "output", "=", "output", "+", "queries", "\n", "", "return", "[", "output", ",", "wordlens", ",", "syntactic_dep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.language_modeling.lstm_encoder.__init__": [[58, 82], ["torch.nn.Module.__init__", "torch.nn.LSTM", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "lstm_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Get relevant variables", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "query_input_size", "=", "cfg", ".", "INPUT", ".", "PRE_QUERY_SIZE", "\n", "query_hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "INTEGRATOR", ".", "QUERY_HIDDEN_SIZE", "\n", "num_lstm_layers", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "INTEGRATOR", ".", "LSTM", ".", "NUM_LAYERS", "\n", "bidirectional", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "INTEGRATOR", ".", "LSTM", ".", "BIDIRECTIONAL", "\n", "dropout_LSTM", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "INTEGRATOR", ".", "LSTM", ".", "DROPOUT", "if", "num_lstm_layers", ">", "1", "else", "0.0", "\n", "dropout_Linear", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "INTEGRATOR", ".", "DROPOUT_LINEAR", "\n", "\n", "# Initialize LSTM", "\n", "if", "bidirectional", ":", "\n", "            ", "query_hidden_size", "//=", "2", "\n", "", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "query_input_size", ",", "query_hidden_size", ",", "\n", "num_layers", "=", "num_lstm_layers", ",", "batch_first", "=", "True", ",", "\n", "dropout", "=", "dropout_LSTM", ",", "bidirectional", "=", "bidirectional", ")", "\n", "\n", "#Initialize linear mapping", "\n", "self", ".", "fc_query", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "query_hidden_size", ",", "hidden_size", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout_Linear", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.language_modeling.lstm_encoder.forward": [[85, 92], ["language_modeling.lstm_encoder.lstm.flatten_parameters", "language_modeling.lstm_encoder.fc_query().transpose", "language_modeling.lstm_encoder.lstm", "language_modeling.lstm_encoder.fc_query"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "queries", ",", "wordlens", "=", "input_", "\n", "\n", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "queries", "=", "self", ".", "lstm", "(", "queries", ")", "[", "0", "]", "\n", "\n", "return", "self", ".", "fc_query", "(", "queries", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Cross_Attention_Pooling.__init__": [[7, 15], ["torch.nn.Module.__init__", "enumerate", "moments_pooling.Cross_Attention_Pooling.mask.unsqueeze", "torch.nn.Conv1d", "torch.ones", "anchors.int"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_anchors", ",", "anchors", ",", "num_clips", ",", "device", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Cross_Attention_Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "M", "=", "num_anchors", "\n", "self", ".", "mask", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", "num_clips", ")", ",", "device", "=", "device", ")", "*", "1e10", "#Num_proposals x NUm_clips", "\n", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ".", "int", "(", ")", "[", ":", "num_anchors", "]", ")", ":", "\n", "            ", "self", ".", "mask", "[", "i", ",", "anchor", "[", "1", "]", ":", "anchor", "[", "2", "]", "+", "1", "]", "=", "0", "\n", "", "self", ".", "mask", "=", "self", ".", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "conv1d_lang", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "hidden_size", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Cross_Attention_Pooling._create_query_mask": [[16, 24], ["torch.zeros", "enumerate", "torch.cuda.is_available", "torch.zeros.to", "len", "max"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "_create_query_mask", "(", "self", ",", "wordlens", ")", ":", "\n", "        ", "q_mask", "=", "torch", ".", "zeros", "(", "(", "len", "(", "wordlens", ")", ",", "1", ",", "max", "(", "wordlens", ")", ")", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "wordlens", ")", ":", "\n", "            ", "q_mask", "[", "i", ",", ":", ",", "l", ":", "]", "=", "1e10", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "q_mask", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "return", "q_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Cross_Attention_Pooling._compute_sentence_representation": [[25, 33], ["moments_pooling.Cross_Attention_Pooling._create_query_mask", "moments_pooling.Cross_Attention_Pooling.conv1d_lang", "torch.softmax", "torch.bmm", "queries.transpose"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._create_query_mask"], ["", "", "def", "_compute_sentence_representation", "(", "self", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "'''\n        Compute attention pooled feature for language as sentence representation\n        '''", "\n", "q_mask", "=", "self", ".", "_create_query_mask", "(", "wordlens", ")", "\n", "similarity", "=", "self", ".", "conv1d_lang", "(", "queries", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "similarity", "-", "q_mask", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "scores", ",", "queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Cross_Attention_Pooling.forward": [[34, 49], ["moments_pooling.Cross_Attention_Pooling._compute_sentence_representation", "torch.softmax", "torch.bmm", "torch.bmm().expand", "moments_pooling.Cross_Attention_Pooling.mask.expand", "x.transpose", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation"], ["", "def", "forward", "(", "self", ",", "x", ",", "anchors", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "''' Compute attention pooling on top of clips features\n        Args:\n            x: BxDxNUM_CLIPS float tensor.\n            anchors: (BxNUM_PROPOSALS)x3 int tensor\n            queries: BxD\n            wordlens: BxMAX_WORDS_IN_BATCHxD\n        Returns:\n            output: BxNUM_PROPOSALSxD float tensor.\n        '''", "\n", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "queries", "=", "self", ".", "_compute_sentence_representation", "(", "queries", ",", "wordlens", ")", "\n", "similarity", "=", "torch", ".", "bmm", "(", "queries", ",", "x", ")", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "-", "self", ".", "mask", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "similarity", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "scores", ",", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling.__init__": [[53, 62], ["torch.nn.Module.__init__", "enumerate", "moments_pooling.Learnable_Cross_Attention_Pooling.mask.unsqueeze", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.ones", "anchors.int"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_anchors", ",", "anchors", ",", "num_clips", ",", "device", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Learnable_Cross_Attention_Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "M", "=", "num_anchors", "\n", "self", ".", "mask", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", "num_clips", ")", ",", "device", "=", "device", ")", "*", "1e10", "#Num_proposals x NUm_clips", "\n", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ".", "int", "(", ")", "[", ":", "num_anchors", "]", ")", ":", "\n", "            ", "self", ".", "mask", "[", "i", ",", "anchor", "[", "1", "]", ":", "anchor", "[", "2", "]", "+", "1", "]", "=", "0", "\n", "", "self", ".", "mask", "=", "self", ".", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "2", "*", "hidden_size", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv1d_lang", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "hidden_size", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._create_query_mask": [[63, 71], ["torch.zeros", "enumerate", "torch.cuda.is_available", "torch.zeros.to", "len", "max"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "_create_query_mask", "(", "self", ",", "wordlens", ")", ":", "\n", "        ", "q_mask", "=", "torch", ".", "zeros", "(", "(", "len", "(", "wordlens", ")", ",", "1", ",", "max", "(", "wordlens", ")", ")", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "wordlens", ")", ":", "\n", "            ", "q_mask", "[", "i", ",", ":", ",", "l", ":", "]", "=", "1e10", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "q_mask", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "return", "q_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation": [[72, 80], ["moments_pooling.Learnable_Cross_Attention_Pooling._create_query_mask", "moments_pooling.Learnable_Cross_Attention_Pooling.conv1d_lang", "torch.softmax", "torch.bmm().squeeze", "queries.transpose", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._create_query_mask"], ["", "", "def", "_compute_sentence_representation", "(", "self", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "'''\n        Compute attention pooled feature for language as sentence representation\n        '''", "\n", "q_mask", "=", "self", ".", "_create_query_mask", "(", "wordlens", ")", "\n", "similarity", "=", "self", ".", "conv1d_lang", "(", "queries", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "similarity", "-", "q_mask", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "scores", ",", "queries", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling.forward": [[81, 96], ["moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation().unsqueeze().expand", "torch.softmax", "torch.bmm", "moments_pooling.Learnable_Cross_Attention_Pooling.conv1d().expand", "moments_pooling.Learnable_Cross_Attention_Pooling.mask.expand", "x.transpose", "moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation().unsqueeze", "moments_pooling.Learnable_Cross_Attention_Pooling.conv1d", "moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Learnable_Cross_Attention_Pooling._compute_sentence_representation"], ["", "def", "forward", "(", "self", ",", "x", ",", "anchors", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "''' Compute attention pooling on top of clips features\n        Args:\n            x: BxDxNUM_CLIPS float tensor.\n            anchors: (BxNUM_PROPOSALS)x3 int tensor\n            queries: BxD\n            wordlens: BxMAX_WORDS_IN_BATCHxD\n        Returns:\n            output: BxNUM_PROPOSALSxD float tensor.\n        '''", "\n", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "queries", "=", "self", ".", "_compute_sentence_representation", "(", "queries", ",", "wordlens", ")", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "B", ",", "D", ",", "N", ")", "\n", "similarity", "=", "self", ".", "conv1d", "(", "torch", ".", "cat", "(", "(", "queries", ",", "x", ")", ",", "dim", "=", "1", ")", ")", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "-", "self", ".", "mask", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "similarity", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "scores", ",", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Self_Attention_Pooling.__init__": [[100, 108], ["torch.nn.Module.__init__", "enumerate", "moments_pooling.Self_Attention_Pooling.mask.unsqueeze", "torch.nn.Conv1d", "torch.ones", "anchors.int"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_anchors", ",", "anchors", ",", "num_clips", ",", "device", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "Self_Attention_Pooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "M", "=", "num_anchors", "\n", "self", ".", "mask", "=", "torch", ".", "ones", "(", "(", "num_anchors", ",", "num_clips", ")", ",", "device", "=", "device", ")", "*", "1e10", "#Num_proposals x NUm_clips", "\n", "for", "i", ",", "anchor", "in", "enumerate", "(", "anchors", ".", "int", "(", ")", "[", ":", "num_anchors", "]", ")", ":", "\n", "            ", "self", ".", "mask", "[", "i", ",", "anchor", "[", "1", "]", ":", "anchor", "[", "2", "]", "+", "1", "]", "=", "0", "\n", "", "self", ".", "mask", "=", "self", ".", "mask", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "conv1d", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "hidden_size", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.moments_pooling.Self_Attention_Pooling.forward": [[109, 123], ["torch.softmax", "torch.bmm", "moments_pooling.Self_Attention_Pooling.conv1d().expand", "moments_pooling.Self_Attention_Pooling.mask.expand", "x.transpose", "moments_pooling.Self_Attention_Pooling.conv1d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "anchors", ",", "queries", ",", "wordlens", ")", ":", "\n", "        ", "''' Compute attention pooling on top of clips features\n        Args:\n            x: BxDxNUM_CLIPS float tensor.\n            anchors: (BxNUM_PROPOSALS)x3 int tensor\n            queries: Not used (compatibility with cross attention )\n            wordlens: Not used (compatibility with cross attention )\n        Returns:\n            output: BxNUM_PROPOSALSxD float tensor.\n        '''", "\n", "B", ",", "D", ",", "N", "=", "x", ".", "shape", "\n", "similarity", "=", "self", ".", "conv1d", "(", "x", ")", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "-", "self", ".", "mask", ".", "expand", "(", "B", ",", "self", ".", "M", ",", "N", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "similarity", ",", "dim", "=", "2", ")", "\n", "return", "torch", ".", "bmm", "(", "scores", ",", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.loss.TanLoss.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_iou", ",", "max_iou", ",", "mask2d", ")", ":", "\n", "        ", "self", ".", "min_iou", ",", "self", ".", "max_iou", "=", "min_iou", ",", "max_iou", "\n", "self", ".", "mask2d", "=", "mask2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.loss.TanLoss.scale": [[9, 11], ["None"], "methods", ["None"], ["", "def", "scale", "(", "self", ",", "iou", ")", ":", "\n", "        ", "return", "(", "iou", "-", "self", ".", "min_iou", ")", "/", "(", "self", ".", "max_iou", "-", "self", ".", "min_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.loss.TanLoss.__call__": [[12, 19], ["loss.TanLoss.scale().clamp", "torch.functional.F.binary_cross_entropy_with_logits", "scores2d.masked_select", "loss.TanLoss.masked_select", "loss.TanLoss.scale"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.loss.TanLoss.scale"], ["", "def", "__call__", "(", "self", ",", "scores2d", ",", "ious2d", ")", ":", "\n", "        ", "mask", "=", "self", ".", "mask2d", "\n", "ious2d", "=", "self", ".", "scale", "(", "ious2d", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "scores2d", ".", "masked_select", "(", "mask", ")", ",", "\n", "ious2d", ".", "masked_select", "(", "mask", ")", ",", "\n", ")", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.__init__": [[14, 37], ["torch.nn.Module.__init__", "model.VLG.set_video_only_operations", "model.VLG.set_language_only_operations", "model.VLG.set_graph_matching_operations", "model.VLG.compute_anchors", "model.VLG.set_moment_pooling_operations", "model.VLG.set_proposals_scoring_operations", "model.VLG.set_loss"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_video_only_operations", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_language_only_operations", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_graph_matching_operations", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.compute_anchors", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_moment_pooling_operations", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_proposals_scoring_operations", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_loss"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "VLG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Video Preprocessing --------------------------------------------------------------------", "\n", "self", ".", "set_video_only_operations", "(", "cfg", ")", "\n", "\n", "# Language Preprocessing -----------------------------------------------------------------", "\n", "self", ".", "set_language_only_operations", "(", "cfg", ")", "\n", "\n", "# Clips Graph Matching -------------------------------------------------------------------", "\n", "self", ".", "set_graph_matching_operations", "(", "cfg", ")", "\n", "\n", "# Anchors Definition ---------------------------------------------------------------------", "\n", "self", ".", "compute_anchors", "(", "cfg", ")", "\n", "\n", "# Moment Pooling -------------------------------------------------------------------------", "\n", "self", ".", "set_moment_pooling_operations", "(", "cfg", ")", "\n", "\n", "# Prediction -----------------------------------------------------------------------------", "\n", "self", ".", "set_proposals_scoring_operations", "(", "cfg", ")", "\n", "\n", "# Loss -----------------------------------------------------------------------------------", "\n", "self", ".", "set_loss", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_1d_pos_encoder": [[38, 47], ["torch.nn.Identity", "PositionalEncoding", "ValueError"], "methods", ["None"], ["", "def", "set_1d_pos_encoder", "(", "self", ",", "cfg", ")", ":", "\n", "# pos 1D", "\n", "        ", "input_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "INPUT_SIZE", "\n", "if", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "POS", "==", "'none'", ":", "\n", "            ", "self", ".", "pos_encoder", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "POS", "==", "'cos'", ":", "\n", "            ", "self", ".", "pos_encoder", "=", "PositionalEncoding", "(", "input_size", ",", "dropout", "=", "0.0", ",", "max_len", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "NUM_CLIPS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'cfg.MODEL.VLG.FEATPOOL.POS is not defined:'", ",", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "POS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_2d_pos_encoder": [[48, 57], ["torch.nn.Identity", "PositionalEncoding2d", "ValueError"], "methods", ["None"], ["", "", "def", "set_2d_pos_encoder", "(", "self", ",", "cfg", ",", "N", ",", "input_size", ")", ":", "\n", "        ", "pos", "=", "None", "\n", "if", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "POS", "==", "'none'", ":", "\n", "            ", "pos", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "POS", "==", "'cos'", ":", "\n", "            ", "pos", "=", "PositionalEncoding2d", "(", "input_size", "//", "2", ",", "max_len", "=", "N", ",", "dropout", "=", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'cfg.MODEL.VLG.PREDICTOR.POS is not defined:'", ",", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "POS", ")", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_video_only_operations": [[58, 86], ["model.VLG.set_1d_pos_encoder", "torch.nn.Sequential", "dict", "torch.nn.Sequential", "torch.nn.AvgPool1d", "torch.nn.Conv1d", "torch.nn.Dropout", "torch.nn.ReLU", "GCNeXt"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_1d_pos_encoder", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "def", "set_video_only_operations", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "set_1d_pos_encoder", "(", "cfg", ")", "\n", "\n", "input_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "INPUT_SIZE", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "kernel_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "KERNEL_SIZE", "\n", "stride", "=", "cfg", ".", "INPUT", ".", "NUM_PRE_CLIPS", "//", "cfg", ".", "MODEL", ".", "VLG", ".", "NUM_CLIPS", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "DROPOUT", "\n", "\n", "# Setup pooling ops.", "\n", "self", ".", "feat_pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool1d", "(", "kernel_size", ",", "stride", ")", ",", "\n", "self", ".", "pos_encoder", ",", "\n", "nn", ".", "Conv1d", "(", "input_size", ",", "hidden_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "# Setup GCNeXt", "\n", "prm_GCNeXt", "=", "dict", "(", "\n", "channel_in", "=", "hidden_size", ",", "\n", "channel_out", "=", "hidden_size", ",", "\n", "k", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "NUM_NEIGHBOURS", ",", "\n", "groups", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "GROUPS", ",", "\n", "width_group", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "WIDTH_GROUP", "\n", ")", "\n", "layers", "=", "[", "GCNeXt", "(", "**", "prm_GCNeXt", ")", "]", "*", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "NUM_AGGREGATOR_LAYERS", "\n", "self", ".", "context_aggregator", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_language_only_operations": [[87, 94], ["lib.modeling.language_modeling.lstm_encoder"], "methods", ["None"], ["", "def", "set_language_only_operations", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "'''\n            Initialize one class per setup, easiest way to wrap different operations.\n            Syntactic Dependencies have been removed from this version of VLG-Net.\n            See official implementation for more details. \n        '''", "\n", "self", ".", "language_encoder", "=", "lstm_encoder", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_graph_matching_operations": [[95, 97], ["lib.modeling.graph_matching.Graph_Matching_Module"], "methods", ["None"], ["", "def", "set_graph_matching_operations", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "clip_level_fusion", "=", "Graph_Matching_Module", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_moment_pooling_operations": [[98, 119], ["dict", "Cross_Attention_Pooling", "Learnable_Cross_Attention_Pooling", "Self_Attention_Pooling", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "def", "set_moment_pooling_operations", "(", "self", ",", "cfg", ")", ":", "\n", "\n", "        ", "prm", "=", "dict", "(", "\n", "num_anchors", "=", "self", ".", "n_anchor", ",", "\n", "anchors", "=", "self", ".", "anchors", ",", "\n", "num_clips", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "NUM_CLIPS", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "VLG", ".", "MOMENT_POOLING", ".", "ATTENTION_MODE", "==", "'cross'", ":", "\n", "            ", "self", ".", "masked_attention_pooling", "=", "Cross_Attention_Pooling", "(", "**", "prm", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "VLG", ".", "MOMENT_POOLING", ".", "ATTENTION_MODE", "==", "'cross_learnable'", ":", "\n", "            ", "self", ".", "masked_attention_pooling", "=", "Learnable_Cross_Attention_Pooling", "(", "**", "prm", ")", "\n", "\n", "", "elif", "cfg", ".", "MODEL", ".", "VLG", ".", "MOMENT_POOLING", ".", "ATTENTION_MODE", "==", "'self'", ":", "\n", "            ", "self", ".", "masked_attention_pooling", "=", "Self_Attention_Pooling", "(", "**", "prm", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Select correct type of attention pooling.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_loss": [[120, 124], ["lib.modeling.loss.TanLoss"], "methods", ["None"], ["", "", "def", "set_loss", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "min_iou", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "LOSS", ".", "MIN_IOU", "\n", "max_iou", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "LOSS", ".", "MAX_IOU", "\n", "self", ".", "tanloss", "=", "TanLoss", "(", "min_iou", ",", "max_iou", ",", "mask2d", "=", "self", ".", "mask2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.compute_anchors": [[125, 156], ["max", "torch.zeros", "len", "torch.tensor().repeat", "torch.tensor().view", "torch.cat().int().to", "zip", "torch.zeros.to", "range", "range", "list", "torch.tensor", "torch.tensor", "torch.cat().int", "range", "range", "range", "range", "zip", "torch.cat", "range"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["", "def", "compute_anchors", "(", "self", ",", "cfg", ")", ":", "\n", "\n", "        ", "pooling_counts", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEAT2D", ".", "POOLING_COUNTS", "\n", "N", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "NUM_CLIPS", "\n", "B", "=", "max", "(", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", ",", "cfg", ".", "TEST", ".", "BATCH_SIZE", ")", "\n", "\n", "# same anchor as in 2D TAN", "\n", "mask2d", "=", "torch", ".", "zeros", "(", "N", ",", "N", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask2d", "[", "range", "(", "N", ")", ",", "range", "(", "N", ")", "]", "=", "1", "\n", "\n", "stride", ",", "offset", "=", "1", ",", "0", "\n", "maskij", "=", "[", "(", "i", ",", "i", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "for", "c", "in", "pooling_counts", ":", "\n", "            ", "for", "_", "in", "range", "(", "c", ")", ":", "\n", "# fill a diagonal line", "\n", "                ", "offset", "+=", "stride", "\n", "i", ",", "j", "=", "range", "(", "0", ",", "N", "-", "offset", ",", "stride", ")", ",", "range", "(", "offset", ",", "N", ",", "stride", ")", "\n", "mask2d", "[", "i", ",", "j", "]", "=", "1", "\n", "maskij", "+=", "list", "(", "zip", "(", "i", ",", "j", ")", ")", "\n", "", "stride", "*=", "2", "\n", "\n", "# save anchors", "\n", "", "n_anchor", "=", "len", "(", "maskij", ")", "\n", "anchors", "=", "torch", ".", "tensor", "(", "maskij", ")", ".", "repeat", "(", "(", "B", ",", "1", ")", ")", "\n", "batch_id", "=", "torch", ".", "tensor", "(", "[", "[", "k", "]", "*", "n_anchor", "for", "k", "in", "range", "(", "B", ")", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "anchors", "=", "torch", ".", "cat", "(", "[", "batch_id", ",", "anchors", "]", ",", "dim", "=", "-", "1", ")", ".", "int", "(", ")", ".", "to", "(", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ")", "\n", "self", ".", "n_anchor", "=", "n_anchor", "\n", "\n", "self", ".", "maskij", "=", "maskij", "\n", "(", "self", ".", "__i", ",", "self", ".", "__j", ")", "=", "zip", "(", "*", "self", ".", "maskij", ")", "\n", "self", ".", "mask2d", "=", "mask2d", ".", "to", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.mask2weight": [[157, 163], ["torch.conv2d", "mask2d[].float"], "methods", ["None"], ["", "def", "mask2weight", "(", "self", ",", "mask2d", ",", "mask_kernel", ",", "padding", "=", "0", ")", ":", "\n", "# from the feat2d.py,we can know the mask2d is 4-d", "\n", "        ", "weight", "=", "torch", ".", "conv2d", "(", "mask2d", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "float", "(", ")", ",", "\n", "mask_kernel", ",", "padding", "=", "padding", ")", "[", "0", ",", "0", "]", "\n", "weight", "[", "weight", ">", "0", "]", "=", "1", "/", "weight", "[", "weight", ">", "0", "]", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_proposals_scoring_operations": [[164, 196], ["torch.ones().to", "range", "model.VLG.set_2d_pos_encoder", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Conv2d", "model.VLG.mask2weight", "weights.append", "torch.ones", "model.VLG.mask2weight", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Dropout2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.set_2d_pos_encoder", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.mask2weight", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.mask2weight"], ["", "def", "set_proposals_scoring_operations", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "input_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "FEATPOOL", ".", "HIDDEN_SIZE", "\n", "hidden_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "HIDDEN_SIZE", "\n", "num_layers", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "NUM_STACK_LAYERS", "\n", "kernal_size", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "KERNEL_SIZE", "\n", "dropout", "=", "cfg", ".", "MODEL", ".", "VLG", ".", "PREDICTOR", ".", "DROPOUT_CONV", "\n", "\n", "# Generate weights to remove proposals during training", "\n", "mask_kernel", "=", "torch", ".", "ones", "(", "1", ",", "1", ",", "kernal_size", ",", "kernal_size", ")", ".", "to", "(", "self", ".", "mask2d", ".", "device", ")", "\n", "first_padding", "=", "(", "kernal_size", "-", "1", ")", "*", "num_layers", "//", "2", "\n", "weights", "=", "[", "self", ".", "mask2weight", "(", "self", ".", "mask2d", ",", "mask_kernel", ",", "padding", "=", "first_padding", ")", "]", "\n", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "            ", "weights", ".", "append", "(", "self", ".", "mask2weight", "(", "weights", "[", "-", "1", "]", ">", "0", ",", "mask_kernel", ")", ")", "\n", "", "self", ".", "weights", "=", "weights", "\n", "\n", "# Instantiate the 2d pos embedding with the right dimension", "\n", "self", ".", "pos2d_encoder", "=", "self", ".", "set_2d_pos_encoder", "(", "cfg", ",", "cfg", ".", "MODEL", ".", "VLG", ".", "NUM_CLIPS", ",", "input_size", ")", "\n", "convs_pred", "=", "nn", ".", "ModuleList", "(", "\n", "(", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_size", ",", "hidden_size", ",", "kernal_size", ",", "padding", "=", "first_padding", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "]", "+", "\n", "[", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "kernal_size", ")", ",", "\n", "nn", ".", "Dropout2d", "(", "dropout", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "\n", ")", ")", "\n", "self", ".", "convs_pred", "=", "nn", ".", "ModuleList", "(", "convs_pred", ")", "\n", "self", ".", "iou", "=", "nn", ".", "Conv2d", "(", "hidden_size", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.reshape2d": [[197, 202], ["x.new_zeros", "x.transpose"], "methods", ["None"], ["", "def", "reshape2d", "(", "self", ",", "x", ",", "N", ")", ":", "\n", "        ", "B", ",", "_", ",", "d", "=", "x", ".", "shape", "\n", "x2d", "=", "x", ".", "new_zeros", "(", "B", ",", "d", ",", "N", ",", "N", ")", "\n", "x2d", "[", ":", ",", ":", ",", "self", ".", "__i", ",", "self", ".", "__j", "]", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "x2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.predict_scores": [[203, 210], ["zip", "model.VLG.iou().squeeze_", "conv", "model.VLG.iou"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.iou"], ["", "def", "predict_scores", "(", "self", ",", "x", ",", "queries", ",", "wordlens", ")", ":", "\n", "# Pass through several conv1D layers", "\n", "        ", "for", "conv", ",", "weight", "in", "zip", "(", "self", ".", "convs_pred", ",", "self", ".", "weights", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "*", "weight", "\n", "\n", "# Generate score for each proposal", "\n", "", "return", "self", ".", "iou", "(", "x", ")", ".", "squeeze_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.video_encoder": [[211, 215], ["model.VLG.feat_pool", "model.VLG.context_aggregator", "model.VLG.transpose"], "methods", ["None"], ["", "def", "video_encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feat_pool", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "x", "=", "self", ".", "context_aggregator", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.fuse_and_score": [[216, 233], ["model.VLG.clip_level_fusion", "model.VLG.masked_attention_pooling", "model.VLG.reshape2d", "model.VLG.pos2d_encoder", "model.VLG.predict_scores", "queries.transpose"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.reshape2d", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.predict_scores"], ["", "def", "fuse_and_score", "(", "self", ",", "x", ",", "queries", ",", "wordlens", ")", ":", "\n", "# Graph matching ", "\n", "        ", "x", ",", "queries", "=", "self", ".", "clip_level_fusion", "(", "x", ",", "queries", ",", "wordlens", ")", "\n", "\n", "# Mmoment scoring", "\n", "B", "=", "queries", ".", "shape", "[", "0", "]", "\n", "N", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "anchor", "=", "self", ".", "anchors", "[", ":", "self", ".", "n_anchor", "*", "B", ",", ":", "]", "\n", "\n", "# Generate moments proposals", "\n", "x", "=", "self", ".", "masked_attention_pooling", "(", "x", ",", "anchor", ",", "queries", ".", "transpose", "(", "1", ",", "2", ")", ",", "wordlens", ")", "\n", "\n", "# Reshape to 2D to use conv layers for scoring", "\n", "x", "=", "self", ".", "reshape2d", "(", "x", ",", "N", ")", "\n", "x", "=", "self", ".", "pos2d_encoder", "(", "x", ")", "# pos embedding", "\n", "x", "=", "self", ".", "predict_scores", "(", "x", ",", "queries", ",", "wordlens", ")", "# conv layers + GM ", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.forward": [[234, 249], ["model.VLG.video_encoder", "model.VLG.language_encoder", "model.VLG.fuse_and_score", "model.VLG.tanloss", "model.VLG.sigmoid_", "model.VLG.mask2d.float"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.video_encoder", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.fuse_and_score"], ["", "def", "forward", "(", "self", ",", "feats", ",", "queries", ",", "wordlens", ",", "ious2d", "=", "None", ")", ":", "\n", "# Video feat encoder", "\n", "        ", "x", "=", "self", ".", "video_encoder", "(", "feats", ")", "\n", "\n", "# Query feat encoder", "\n", "queries", "=", "self", ".", "language_encoder", "(", "[", "queries", ",", "wordlens", "]", ")", "\n", "\n", "# Rest of architecture", "\n", "x", "=", "self", ".", "fuse_and_score", "(", "x", ",", "queries", ",", "wordlens", ")", "\n", "\n", "# Compute loss ", "\n", "if", "not", "ious2d", "is", "None", "and", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "tanloss", "(", "x", ",", "ious2d", ")", "\n", "\n", "", "return", "x", ".", "sigmoid_", "(", ")", "*", "self", ".", "mask2d", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.__init__.build_model": [[4, 6], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to": [[12, 18], ["tlg_batch.TLGBatch.feats.to", "tlg_batch.TLGBatch.queries.to", "tlg_batch.TLGBatch.wordlens.to"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to"], ["def", "to", "(", "self", ",", "device", ")", ":", "\n", "# self.frames = [f.to(device) for f in self.frames]", "\n", "        ", "self", ".", "feats", "=", "self", ".", "feats", ".", "to", "(", "device", ")", "\n", "self", ".", "queries", "=", "self", ".", "queries", ".", "to", "(", "device", ")", "\n", "self", ".", "wordlens", "=", "self", ".", "wordlens", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults.get_cfg_defaults": [[141, 146], ["_C.clone"], "function", ["None"], ["def", "get_cfg_defaults", "(", ")", ":", "\n", "  ", "\"\"\"Get a yacs CfgNode object with default values for my_project.\"\"\"", "\n", "# Return a clone so that the defaults will not be altered", "\n", "# This is for the \"local variable\" use pattern", "\n", "return", "_C", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults.set_hps_cfg": [[147, 284], ["yaml.safe_load.items", "filename.exists", "print", "open", "yaml.safe_load", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "defaults._select_value", "ValueError"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value", "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value"], ["", "def", "set_hps_cfg", "(", "cfg", ",", "filename", ")", ":", "\n", "    ", "\"Update Namescope with random hyper-parameters according to a YAML-file\"", "\n", "if", "not", "filename", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "f'Ignoring HPS. Not found {filename}'", ")", "\n", "return", "cfg", "\n", "", "with", "open", "(", "filename", ",", "'r'", ")", "as", "fid", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "fid", ")", "\n", "\n", "# Random search over single parameter of tied variables", "\n", "", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "'MODEL.PRETRAINV'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'PRETRAINV'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.NEG_PROB'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'NEG_PROB'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.NUM_CLIPS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'NUM_CLIPS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.HIDDEN_SIZE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'HIDDEN_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.KERNEL_SIZE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'KERNEL_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.POS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'POS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.NUM_AGGREGATOR_LAYERS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'NUM_AGGREGATOR_LAYERS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.NUM_NEIGHBOURS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'NUM_NEIGHBOURS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.GROUPS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'GROUPS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.WIDTH_GROUP'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'WIDTH_GROUP'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEATPOOL.DROPOUT'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEATPOOL'", "]", "[", "'DROPOUT'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.FEAT2D.POOLING_COUNTS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'FEAT2D'", "]", "[", "'POOLING_COUNTS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.MATCH.NUM_NEIGHBOURS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'MATCH'", "]", "[", "'NUM_NEIGHBOURS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.MATCH.GROUPS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'MATCH'", "]", "[", "'GROUPS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.MATCH.WIDTH_GROUP'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'MATCH'", "]", "[", "'WIDTH_GROUP'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.MATCH.DROPOUT_GM'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'MATCH'", "]", "[", "'DROPOUT_GM'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.MOMENT_POOLING.ATTENTION_MODE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'MOMENT_POOLING'", "]", "[", "'ATTENTION_MODE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.LSTM.NUM_LAYERS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'LSTM'", "]", "[", "'NUM_LAYERS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.LSTM.BIDIRECTIONAL'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'LSTM'", "]", "[", "'BIDIRECTIONAL'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.LSTM.DROPOUT'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'LSTM'", "]", "[", "'DROPOUT'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.DROPOUT_LINEAR'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'DROPOUT_LINEAR'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.DROPOUT_SGCN'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'DROPOUT_SGCN'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.NUM_AGGREGATOR_LAYERS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'NUM_AGGREGATOR_LAYERS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.INTEGRATOR.QUERY_HIDDEN_SIZE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'INTEGRATOR'", "]", "[", "'QUERY_HIDDEN_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.PREDICTOR.HIDDEN_SIZE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'PREDICTOR'", "]", "[", "'HIDDEN_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.PREDICTOR.POS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'PREDICTOR'", "]", "[", "'POS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.PREDICTOR.NUM_STACK_LAYERS'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'PREDICTOR'", "]", "[", "'NUM_STACK_LAYERS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.PREDICTOR.KERNEL_SIZE'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'PREDICTOR'", "]", "[", "'KERNEL_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.PREDICTOR.DROPOUT_CONV'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'PREDICTOR'", "]", "[", "'DROPOUT_CONV'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.LOSS.MIN_IOU'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'LOSS'", "]", "[", "'MIN_IOU'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'MODEL.VLG.LOSS.MAX_IOU'", ":", "\n", "            ", "cfg", "[", "'MODEL'", "]", "[", "'VLG'", "]", "[", "'LOSS'", "]", "[", "'MAX_IOU'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.LR'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'LR'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.LR_STEP_SIZE'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'LR_STEP_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.LR_GAMMA'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'LR_GAMMA'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.WEIGHT_DECAY'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'WEIGHT_DECAY'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.STRIDE'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'STRIDE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.BATCH_SIZE'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'BATCH_SIZE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'SOLVER.MAX_EPOCH'", ":", "\n", "            ", "cfg", "[", "'SOLVER'", "]", "[", "'MAX_EPOCH'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'TEST.NMS_THRESH'", ":", "\n", "            ", "cfg", "[", "'TEST'", "]", "[", "'NMS_THRESH'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'INPUT.STRIDE'", ":", "\n", "            ", "cfg", "[", "'INPUT'", "]", "[", "'STRIDE'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "elif", "k", "==", "'INPUT.NUM_PRE_CLIPS'", ":", "\n", "            ", "cfg", "[", "'INPUT'", "]", "[", "'NUM_PRE_CLIPS'", "]", "=", "_select_value", "(", "v", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized parameter {k}, check if code is provided in lib/config/defaults.py'", ")", "\n", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.config.defaults._select_value": [[286, 291], ["random.shuffle", "isinstance"], "function", ["None"], ["", "def", "_select_value", "(", "v", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "        ", "return", "v", "\n", "", "random", ".", "shuffle", "(", "v", ")", "\n", "return", "v", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.config.paths_catalog.DatasetCatalog.get": [[37, 56], ["dict", "RuntimeError", "dict", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["@", "staticmethod", "\n", "def", "get", "(", "name", ")", ":", "\n", "        ", "data_dir", "=", "DatasetCatalog", ".", "DATA_DIR", "\n", "attrs", "=", "DatasetCatalog", ".", "DATASETS", "[", "name", "]", "\n", "args", "=", "dict", "(", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"video_dir\"", "]", ")", ",", "\n", "ann_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"ann_file\"", "]", ")", ",", "\n", "feat_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"feat_file\"", "]", ")", ",", "\n", "lang_feat_file", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"lang_feat\"", "]", ")", ",", "\n", "tokenizer_folder", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "attrs", "[", "\"tokenizer_folder\"", "]", ")", ",", "\n", "split", "=", "attrs", "[", "\"split\"", "]", ",", "\n", "fps", "=", "attrs", "[", "\"fps\"", "]", ",", "\n", ")", "\n", "if", "\"MAD\"", "in", "name", ":", "\n", "            ", "return", "dict", "(", "\n", "factory", "=", "\"MADdataset\"", ",", "\n", "args", "=", "args", "\n", ")", "\n", "", "raise", "RuntimeError", "(", "\"Dataset not available: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.compute_on_dataset": [[16, 86], ["model.eval", "torch.device", "model.mask2d.float", "torch.nonzero", "tqdm.tqdm", "data_loader.dataset.get_vid", "torch.inference_mode", "model.language_encoder", "batches.queries.to.expand", "batches.wordlens.to.expand", "math.ceil", "range", "torch.cat().to", "timer.tic", "batches.to.to", "math.ceil", "range", "torch.cat", "cache_movie_features[].to.to", "cache_movie_features[].to", "batches.to.queries.to", "batches.to.wordlens.to", "len", "torch.cat().to.append", "timer.toc", "cache_movie_features[].to.append", "model.fuse_and_score().sigmoid_", "scores[].flatten", "scores[].flatten", "torch.cat", "torch.cuda.synchronize", "model.video_encoder", "model.fuse_and_score"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_vid", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.video_encoder", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.model.VLG.fuse_and_score"], ["def", "compute_on_dataset", "(", "model", ",", "data_loader", ",", "device", ",", "cfg", ",", "timer", "=", "None", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results_dict", "=", "{", "}", "\n", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "\n", "cache_movie_features", "=", "{", "}", "\n", "\n", "mask", "=", "model", ".", "mask2d", ".", "float", "(", ")", "\n", "grids", "=", "torch", ".", "nonzero", "(", "mask", ",", "as_tuple", "=", "False", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "data_loader", ")", ":", "\n", "        ", "batches", ",", "targets", ",", "idxs", "=", "batch", "\n", "movie", "=", "data_loader", ".", "dataset", ".", "get_vid", "(", "idxs", "[", "0", "]", ")", "\n", "\n", "with", "torch", ".", "inference_mode", "(", ")", ":", "\n", "            ", "if", "timer", ":", "\n", "                ", "timer", ".", "tic", "(", ")", "\n", "\n", "", "if", "movie", "not", "in", "cache_movie_features", ":", "\n", "                ", "batches", "=", "batches", ".", "to", "(", "device", ")", "\n", "queries", "=", "batches", ".", "queries", "\n", "wordlens", "=", "batches", ".", "wordlens", "\n", "\n", "# Compute video windows embeddings", "\n", "feats", "=", "[", "]", "\n", "num_windows", "=", "batches", ".", "feats", ".", "shape", "[", "1", "]", "\n", "num_batches", "=", "math", ".", "ceil", "(", "num_windows", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                    ", "batch_feat", "=", "batches", ".", "feats", "[", "0", ",", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "feats", ".", "append", "(", "model", ".", "video_encoder", "(", "batch_feat", ")", ")", "\n", "", "feats", "=", "torch", ".", "cat", "(", "feats", ")", "\n", "\n", "# Store computed features", "\n", "cache_movie_features", "[", "movie", "]", "=", "feats", ".", "to", "(", "cpu_device", ")", "\n", "", "else", ":", "\n", "                ", "feats", "=", "cache_movie_features", "[", "movie", "]", ".", "to", "(", "device", ")", "\n", "queries", "=", "batches", ".", "queries", ".", "to", "(", "device", ")", "\n", "wordlens", "=", "batches", ".", "wordlens", ".", "to", "(", "device", ")", "\n", "\n", "# Compute query embedding", "\n", "", "queries", "=", "model", ".", "language_encoder", "(", "[", "queries", ",", "wordlens", "]", ")", "\n", "_", ",", "w", ",", "d", "=", "queries", ".", "shape", "\n", "queries", "=", "queries", ".", "expand", "(", "batch_size", ",", "w", ",", "d", ")", "\n", "wordlens", "=", "wordlens", ".", "expand", "(", "batch_size", ")", "\n", "\n", "# Compute alignment", "\n", "num_windows", "=", "feats", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "math", ".", "ceil", "(", "num_windows", "/", "batch_size", ")", "\n", "\n", "output_cpu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_batches", ")", ":", "\n", "                ", "batch_feat", "=", "feats", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", "\n", "B", "=", "len", "(", "batch_feat", ")", "\n", "scores", "=", "mask", "*", "model", ".", "fuse_and_score", "(", "batch_feat", ",", "queries", "[", ":", "B", "]", ",", "wordlens", "[", ":", "B", "]", ")", ".", "sigmoid_", "(", ")", "\n", "if", "B", "==", "1", ":", "\n", "                    ", "scores", "=", "scores", "[", "grids", "[", ":", ",", "0", "]", ",", "grids", "[", ":", ",", "1", "]", "]", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "                    ", "scores", "=", "scores", "[", ":", ",", "grids", "[", ":", ",", "0", "]", ",", "grids", "[", ":", ",", "1", "]", "]", ".", "flatten", "(", ")", "\n", "", "output_cpu", ".", "append", "(", "scores", ")", "\n", "\n", "", "output_cpu", "=", "torch", ".", "cat", "(", "output_cpu", ")", ".", "to", "(", "cpu_device", ")", "\n", "if", "timer", ":", "\n", "                ", "if", "not", "device", ".", "type", "==", "'cpu'", ":", "\n", "                    ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "timer", ".", "toc", "(", ")", "\n", "\n", "", "", "results_dict", "[", "idxs", "[", "0", "]", "]", "=", "output_cpu", "\n", "", "return", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference._accumulate_predictions_from_multiple_gpus": [[87, 107], ["utils.comm.all_gather", "list", "utils.comm.is_main_process", "predictions.update", "sorted", "len", "logging.getLogger", "logging.getLogger.warning", "predictions.keys"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.all_gather", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update"], ["", "def", "_accumulate_predictions_from_multiple_gpus", "(", "predictions_per_gpu", ")", ":", "\n", "    ", "all_predictions", "=", "all_gather", "(", "predictions_per_gpu", ")", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "# merge the list of dicts", "\n", "", "predictions", "=", "{", "}", "\n", "for", "p", "in", "all_predictions", ":", "\n", "        ", "predictions", ".", "update", "(", "p", ")", "\n", "# convert a dict where the key is the index in a list", "\n", "", "idxs", "=", "list", "(", "sorted", "(", "predictions", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "idxs", ")", "!=", "idxs", "[", "-", "1", "]", "+", "1", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.inference\"", ")", "\n", "logger", ".", "warning", "(", "\n", "\"Number of samples that were gathered from multiple processes is not \"", "\n", "\"a contiguous set. Some samples might be missing from the evaluation\"", "\n", ")", "\n", "\n", "# convert to a list", "\n", "", "predictions", "=", "[", "predictions", "[", "i", "]", "for", "i", "in", "idxs", "]", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.inference": [[108, 168], ["torch.device", "utils.comm.get_world_size", "logger.info", "utils.timer.Timer", "utils.timer.Timer", "utils.timer.Timer.tic", "inference.compute_on_dataset", "utils.comm.synchronize", "utils.timer.Timer.toc", "utils.timer.get_time_str", "logger.info", "utils.timer.get_time_str", "logger.info", "inference._accumulate_predictions_from_multiple_gpus", "torch.nonzero().cpu", "lib.engine.evaluation.evaluate", "utils.comm.is_main_process", "ValueError", "len", "torch.nonzero", "len", "len", "model.mask2d.float"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.compute_on_dataset", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.get_time_str", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.timer.get_time_str", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference._accumulate_predictions_from_multiple_gpus", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.evaluate", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process"], ["", "def", "inference", "(", "\n", "model", ",", "\n", "data_loader", ",", "\n", "dataset_name", ",", "\n", "nms_thresh", ",", "\n", "name", ",", "\n", "cfg", ",", "\n", "device", "=", "\"cuda\"", ",", "\n", "logger", "=", "None", ",", "\n", "summary_writer", "=", "None", ",", "\n", ")", ":", "\n", "\n", "# convert to a torch.device for efficiency", "\n", "    ", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "num_devices", "=", "get_world_size", "(", ")", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "logger", ".", "info", "(", "\"Start evaluation on {} dataset (Size: {}).\"", ".", "format", "(", "dataset_name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "total_timer", "=", "Timer", "(", ")", "\n", "inference_timer", "=", "Timer", "(", ")", "\n", "total_timer", ".", "tic", "(", ")", "\n", "predictions", "=", "compute_on_dataset", "(", "model", ",", "data_loader", ",", "device", ",", "cfg", ",", "inference_timer", ")", "\n", "# wait for all processes to complete before measuring the time", "\n", "synchronize", "(", ")", "\n", "total_time", "=", "total_timer", ".", "toc", "(", ")", "\n", "total_time_str", "=", "get_time_str", "(", "total_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total run time: {} ({} s / inference per device, on {} devices)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_time", "*", "num_devices", "/", "len", "(", "dataset", ")", ",", "num_devices", "\n", ")", "\n", ")", "\n", "total_infer_time", "=", "get_time_str", "(", "inference_timer", ".", "total_time", ")", "\n", "logger", ".", "info", "(", "\n", "\"Model inference time: {} ({} s / inference per device, on {} devices)\"", ".", "format", "(", "\n", "total_infer_time", ",", "\n", "inference_timer", ".", "total_time", "*", "num_devices", "/", "len", "(", "dataset", ")", ",", "\n", "num_devices", ",", "\n", ")", "\n", ")", "\n", "\n", "predictions", "=", "_accumulate_predictions_from_multiple_gpus", "(", "predictions", ")", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "iou_metrics", "=", "None", "\n", "if", "'MAD'", "in", "name", ":", "\n", "        ", "iou_metrics", "=", "(", "0.1", ",", "0.3", ",", "0.5", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown dataset {name}. '", ")", "\n", "\n", "", "moments_indexes", "=", "torch", ".", "nonzero", "(", "model", ".", "mask2d", ".", "float", "(", ")", ",", "as_tuple", "=", "False", ")", ".", "cpu", "(", ")", "\n", "moments_indexes", "[", ":", ",", "1", "]", "+=", "1", "\n", "\n", "return", "evaluate", "(", "\n", "dataset", "=", "dataset", ",", "\n", "predictions", "=", "predictions", ",", "\n", "nms_thresh", "=", "nms_thresh", ",", "\n", "iou_metrics", "=", "iou_metrics", ",", "\n", "summary_writer", "=", "summary_writer", ",", "\n", "cfg", "=", "cfg", ",", "\n", "moments_indexes", "=", "moments_indexes", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.reduce_loss": [[15, 24], ["lib.utils.comm.get_world_size", "torch.no_grad", "torch.no_grad", "torch.reduce", "torch.get_rank"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_rank"], ["def", "reduce_loss", "(", "loss", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "reduce", "(", "loss", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "loss", "/=", "world_size", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.do_train": [[25, 176], ["logger.info", "lib.utils.metric_logger.MetricLogger", "model.train", "time.time", "time.time", "torch.zeros", "torch.zeros", "range", "str", "logger.info", "len", "enumerate", "scheduler.step", "time.time", "datetime.timedelta", "batches.to.to", "targets.to.to", "optimizer.zero_grad", "scaler.scale().backward", "scaler.step", "scaler.update", "optimizer.zero_grad", "time.time", "lib.utils.metric_logger.MetricLogger.update", "str", "checkpointer.save", "lib.utils.comm.synchronize", "lib.utils.comm.synchronize", "model.train", "lib.utils.comm.synchronize", "lib.utils.comm.is_main_process", "lib.utils.comm.synchronize", "model.train", "time.time", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "model", "writer.add_scalar", "lib.utils.metric_logger.MetricLogger.update", "time.time", "datetime.timedelta", "logger.info", "lib.utils.metric_logger.MetricLogger.meters.items", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "lib.engine.inference.inference", "lib.utils.comm.is_main_process", "trainer._write_to_tensorboard", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "lib.engine.inference.inference", "trainer.save_if_best_model", "lib.utils.comm.is_main_process", "trainer._write_to_tensorboard", "scaler.scale", "lib.utils.metric_logger.MetricLogger.delimiter.join().format", "writer.add_scalar", "trainer.reduce_loss", "int", "model.detach", "lib.utils.metric_logger.MetricLogger.delimiter.join", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.train", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.structures.tlg_batch.TLGBatch.to", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.train", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.synchronize", "home.repos.pwc.inspect_result.Soldelli_MAD.VLG-Net.train_net.train", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.update", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.inference", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer._write_to_tensorboard", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.inference.inference", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.save_if_best_model", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.is_main_process", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer._write_to_tensorboard", "home.repos.pwc.inspect_result.Soldelli_MAD.modeling.loss.TanLoss.scale", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.reduce_loss"], ["", "def", "do_train", "(", "\n", "cfg", ",", "\n", "writer", ",", "\n", "model", ",", "\n", "data_loader", ",", "\n", "data_loader_val", ",", "\n", "optimizer", ",", "\n", "scaler", ",", "\n", "scheduler", ",", "\n", "checkpointer", ",", "\n", "device", ",", "\n", "checkpoint_period", ",", "\n", "test_period", ",", "\n", "arguments", ",", "\n", "dataset_name", ",", "\n", "data_loader_test", "=", "None", ",", "\n", "logger", "=", "None", "\n", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Start training\"", ")", "\n", "meters", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "max_epoch", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCH", "\n", "max_recall", "=", "0", "\n", "\n", "model", ".", "train", "(", ")", "\n", "start_training_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "current_test_performance", "=", "None", "\n", "top_performance", "=", "torch", ".", "zeros", "(", "(", "2", ",", "3", ")", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "arguments", "[", "\"epoch\"", "]", ",", "max_epoch", "+", "1", ")", ":", "\n", "        ", "max_iteration", "=", "len", "(", "data_loader", ")", "\n", "last_epoch_iteration", "=", "(", "max_epoch", "-", "epoch", ")", "*", "max_iteration", "\n", "arguments", "[", "\"epoch\"", "]", "=", "epoch", "\n", "\n", "for", "iteration", ",", "(", "batches", ",", "targets", ",", "_", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "\n", "batches", "=", "batches", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "                ", "loss", "=", "model", "(", "batches", ".", "feats", ",", "\n", "batches", ".", "queries", ",", "\n", "batches", ".", "wordlens", ",", "\n", "targets", "\n", ")", "\n", "", "if", "writer", "is", "not", "None", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "loss", ",", "epoch", "*", "max_iteration", "+", "iteration", ")", "\n", "", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iteration", ":", "\n", "                ", "meters", ".", "update", "(", "loss", "=", "reduce_loss", "(", "loss", ".", "detach", "(", ")", ")", ")", "\n", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "batch_time", "=", "time", ".", "time", "(", ")", "-", "end", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "meters", ".", "update", "(", "time", "=", "batch_time", ",", "data", "=", "data_time", ")", "\n", "\n", "eta_seconds", "=", "meters", ".", "time", ".", "global_avg", "*", "(", "max_iteration", "-", "iteration", "+", "last_epoch_iteration", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "\n", "if", "iteration", "%", "20", "==", "0", "or", "iteration", "==", "max_iteration", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "meters", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "\"eta: {eta}\"", ",", "\n", "\"epoch: {epoch}/{max_epoch}\"", ",", "\n", "\"iteration: {iteration}/{max_iteration}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"lr: {lr:.6f}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", ".", "format", "(", "\n", "eta", "=", "eta_string", ",", "\n", "epoch", "=", "epoch", ",", "\n", "max_epoch", "=", "max_epoch", ",", "\n", "iteration", "=", "iteration", ",", "\n", "max_iteration", "=", "max_iteration", ",", "\n", "meters", "=", "str", "(", "meters", ")", ",", "\n", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024.0", "/", "1024.0", ",", "\n", ")", "\n", ")", "\n", "for", "name", ",", "meter", "in", "meters", ".", "meters", ".", "items", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "f'train/{name}'", ",", "meter", ".", "global_avg", ",", "iteration", ")", "\n", "\n", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "%", "checkpoint_period", "==", "0", ":", "\n", "            ", "checkpointer", ".", "save", "(", "f\"model_{epoch}e\"", ",", "**", "arguments", ")", "\n", "\n", "\n", "", "if", "data_loader_test", "is", "not", "None", "and", "test_period", ">", "0", "and", "epoch", "%", "test_period", "==", "0", ":", "\n", "            ", "synchronize", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "                ", "recall", "=", "inference", "(", "\n", "model", ",", "\n", "data_loader_test", ",", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "TEST", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "name", "=", "dataset_name", ",", "\n", "cfg", "=", "cfg", ",", "\n", "logger", "=", "logger", ",", "\n", "summary_writer", "=", "writer", ",", "\n", ")", "\n", "", "synchronize", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "current_test_performance", "=", "recall", "\n", "\n", "if", "writer", "is", "not", "None", "and", "is_main_process", "(", ")", ":", "\n", "                ", "_write_to_tensorboard", "(", "'test'", ",", "dataset_name", ",", "recall", ",", "epoch", ",", "writer", ")", "\n", "\n", "", "", "if", "data_loader_val", "is", "not", "None", "and", "test_period", ">", "0", "and", "epoch", "%", "test_period", "==", "0", ":", "\n", "            ", "synchronize", "(", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "True", ")", ":", "\n", "                ", "recall", "=", "inference", "(", "\n", "model", ",", "\n", "data_loader_val", ",", "\n", "dataset_name", "=", "cfg", ".", "DATASETS", ".", "VAL", ",", "\n", "nms_thresh", "=", "cfg", ".", "TEST", ".", "NMS_THRESH", ",", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", ",", "\n", "name", "=", "dataset_name", ",", "\n", "cfg", "=", "cfg", ",", "\n", "logger", "=", "logger", ",", "\n", "summary_writer", "=", "writer", ",", "\n", ")", "\n", "\n", "# Save current model if cyrrent val performance are higher than preivous validation performance", "\n", "", "if", "is_main_process", "(", ")", ":", "\n", "                ", "top_performance", "=", "save_if_best_model", "(", "cfg", ",", "epoch", ",", "model", ",", "dataset_name", ",", "\n", "top_performance", ",", "recall", ",", "current_test_performance", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "writer", "is", "not", "None", "and", "is_main_process", "(", ")", ":", "\n", "                ", "_write_to_tensorboard", "(", "'val'", ",", "dataset_name", ",", "recall", ",", "epoch", ",", "writer", ")", "\n", "\n", "", "", "", "total_training_time", "=", "time", ".", "time", "(", ")", "-", "start_training_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_training_time", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total training time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_training_time", "/", "(", "max_iteration", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer.save_if_best_model": [[180, 200], ["torch.save", "torch.save", "model.state_dict", "torch.save", "torch.save", "trainer._save_best_performance", "model.state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "val_recall.mean", "top_performance.mean"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer._save_best_performance"], ["", "def", "save_if_best_model", "(", "cfg", ",", "epoch", ",", "model", ",", "dataset_name", ",", "top_performance", ",", "val_recall", ",", "test_recall", ")", ":", "\n", "    ", "'''\n        Evaluate if current validation recall are higher than best recorder performance.\n        Dump model and performance in files.\n        Update top performance. \n    '''", "\n", "idx", "=", "1", "\n", "val_metric", "=", "(", "val_recall", ".", "mean", "(", "dim", "=", "0", ")", "[", "idx", ":", "]", "*", "torch", ".", "tensor", "(", "[", "1", ",", "0.25", "]", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "top_metric", "=", "(", "top_performance", ".", "mean", "(", "dim", "=", "0", ")", "[", "idx", ":", "]", "*", "torch", ".", "tensor", "(", "[", "1", ",", "0.25", "]", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "condition", "=", "val_metric", ">", "top_metric", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "cfg", ".", "OUTPUT_DIR", "+", "\"/model_best_epoch.pth\"", ")", "\n", "\n", "# save", "\n", "if", "condition", ":", "\n", "        ", "top_performance", "=", "val_recall", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "cfg", ".", "OUTPUT_DIR", "+", "\"/model_best_epoch.pth\"", ")", "\n", "_save_best_performance", "(", "dataset_name", ",", "test_recall", ",", "epoch", ",", "cfg", ")", "\n", "\n", "", "return", "top_performance", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer._write_to_tensorboard": [[201, 225], ["writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "ValueError", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item"], "function", ["None"], ["", "def", "_write_to_tensorboard", "(", "split", ",", "dataset_name", ",", "recall", ",", "epoch", ",", "writer", ")", ":", "\n", "    ", "if", "'MAD'", "in", "dataset_name", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "f'{split}/r@1_IoU=0.1'", ",", "recall", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@1_IoU=0.3'", ",", "recall", "[", "0", "]", "[", "1", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@1_IoU=0.5'", ",", "recall", "[", "0", "]", "[", "2", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@5_IoU=0.1'", ",", "recall", "[", "1", "]", "[", "0", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@5_IoU=0.3'", ",", "recall", "[", "1", "]", "[", "1", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@5_IoU=0.5'", ",", "recall", "[", "1", "]", "[", "2", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@10_IoU=0.1'", ",", "recall", "[", "2", "]", "[", "0", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@10_IoU=0.3'", ",", "recall", "[", "2", "]", "[", "1", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@10_IoU=0.5'", ",", "recall", "[", "2", "]", "[", "2", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@50_IoU=0.1'", ",", "recall", "[", "3", "]", "[", "0", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@50_IoU=0.3'", ",", "recall", "[", "3", "]", "[", "1", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@50_IoU=0.5'", ",", "recall", "[", "3", "]", "[", "2", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@100_IoU=0.1'", ",", "recall", "[", "4", "]", "[", "0", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@100_IoU=0.3'", ",", "recall", "[", "4", "]", "[", "1", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "f'{split}/r@100_IoU=0.5'", ",", "recall", "[", "4", "]", "[", "2", "]", ".", "item", "(", ")", ",", "epoch", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown dataset: {dataset_name}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.trainer._save_best_performance": [[226, 254], ["json.dump", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "[].item", "ValueError", "open"], "function", ["None"], ["", "", "def", "_save_best_performance", "(", "dataset_name", ",", "recall", ",", "epoch", ",", "cfg", ")", ":", "\n", "    ", "dump_dict", "=", "{", "}", "\n", "if", "'MAD'", "in", "dataset_name", ":", "\n", "        ", "dump_dict", "[", "'r@1_IoU=0.1'", "]", "=", "recall", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@1_IoU=0.3'", "]", "=", "recall", "[", "0", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@1_IoU=0.5'", "]", "=", "recall", "[", "0", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "dump_dict", "[", "'r@5_IoU=0.1'", "]", "=", "recall", "[", "1", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@5_IoU=0.3'", "]", "=", "recall", "[", "1", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@5_IoU=0.5'", "]", "=", "recall", "[", "1", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "dump_dict", "[", "'r@10_IoU=0.1'", "]", "=", "recall", "[", "2", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@10_IoU=0.3'", "]", "=", "recall", "[", "2", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@10_IoU=0.5'", "]", "=", "recall", "[", "2", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "dump_dict", "[", "'r@50_IoU=0.1'", "]", "=", "recall", "[", "3", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@50_IoU=0.3'", "]", "=", "recall", "[", "3", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@50_IoU=0.5'", "]", "=", "recall", "[", "3", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "\n", "dump_dict", "[", "'r@100_IoU=0.1'", "]", "=", "recall", "[", "4", "]", "[", "0", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@100_IoU=0.3'", "]", "=", "recall", "[", "4", "]", "[", "1", "]", ".", "item", "(", ")", "\n", "dump_dict", "[", "'r@100_IoU=0.5'", "]", "=", "recall", "[", "4", "]", "[", "2", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown dataset: {dataset_name}\"", ")", "\n", "\n", "\n", "", "dump_dict", "[", "'epoch'", "]", "=", "epoch", "\n", "json", ".", "dump", "(", "dump_dict", ",", "open", "(", "cfg", ".", "OUTPUT_DIR", "+", "\"/model_best_performance.json\"", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.pretty_print_results": [[12, 22], ["enumerate", "len", "len", "terminaltables.AsciiTable.append", "terminaltables.AsciiTable", "range", "logger.info", "range"], "function", ["None"], ["def", "pretty_print_results", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ",", "logger", ")", ":", "\n", "    ", "num_recall_metrics", ",", "num_iou_metrics", "=", "len", "(", "recall_metrics", ")", ",", "len", "(", "iou_metrics", ")", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "recall_metrics", ")", ":", "\n", "# Pretty print", "\n", "        ", "table", "=", "[", "[", "f'Recall@{r},mIoU@{j:.1f}'", "for", "j", "in", "iou_metrics", "]", "]", "\n", "table", ".", "append", "(", "[", "'{:.02f}'", ".", "format", "(", "recall_x_iou", "[", "i", "]", "[", "j", "]", "*", "100", ")", "for", "j", "in", "range", "(", "num_iou_metrics", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table", ")", "\n", "for", "c", "in", "range", "(", "num_iou_metrics", ")", ":", "\n", "            ", "table", ".", "justify_columns", "[", "c", "]", "=", "'center'", "\n", "", "logger", ".", "info", "(", "'\\n'", "+", "table", ".", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.save_results_evaluation": [[23, 39], ["dict", "json.dump", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "recall_x_iou.tolist", "recall_metrics.tolist", "iou_metrics.tolist", "[].split", "cfg.CHECKPOINT.split"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.dict"], ["", "", "def", "save_results_evaluation", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ",", "cfg", ")", ":", "\n", "    ", "directory", "=", "f'{cfg.OUTPUT_DIR}/evaluations/'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "dump_folder", "=", "f'{cfg.OUTPUT_DIR}/evaluations/{cfg.SPLIT}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dump_folder", ")", "\n", "\n", "", "dump_dict", "=", "dict", "(", "\n", "results", "=", "recall_x_iou", ".", "tolist", "(", ")", ",", "\n", "recall_metrics", "=", "recall_metrics", ".", "tolist", "(", ")", ",", "\n", "iou_metrics", "=", "iou_metrics", ".", "tolist", "(", ")", ",", "\n", ")", "\n", "dump_filename", "=", "f'{dump_folder}/{cfg.CHECKPOINT.split(\"/\")[-1].split(\".\")[0]}_nms_{cfg.TEST.NMS_THRESH}_stride_{cfg.TEST.STRIDE}.json'", "\n", "json", ".", "dump", "(", "dump_dict", ",", "open", "(", "dump_filename", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.nms": [[40, 58], ["scores.sort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.numel", "range", "lib.data.datasets.utils.iou", "topk.item"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.iou"], ["", "def", "nms", "(", "moments", ",", "scores", ",", "topk", ",", "thresh", ",", "relative_fps", ")", ":", "\n", "    ", "scores", ",", "ranks", "=", "scores", ".", "sort", "(", "descending", "=", "True", ")", "\n", "moments", "=", "moments", "[", "ranks", "]", "\n", "moments", "=", "moments", "/", "relative_fps", "\n", "\n", "suppressed", "=", "torch", ".", "zeros_like", "(", "moments", "[", ":", ",", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "numel", "=", "suppressed", ".", "numel", "(", ")", "\n", "for", "i", "in", "range", "(", "numel", "-", "1", ")", ":", "\n", "        ", "if", "suppressed", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "", "mask", "=", "iou", "(", "moments", "[", "i", "+", "1", ":", "]", ",", "moments", "[", "i", "]", ")", ">", "thresh", "\n", "suppressed", "[", "i", "+", "1", ":", "]", "[", "mask", "]", "=", "True", "\n", "if", "i", "%", "topk", ".", "item", "(", ")", "==", "0", ":", "\n", "            ", "if", "(", "~", "suppressed", "[", ":", "i", "]", ")", ".", "sum", "(", ")", ">=", "topk", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "moments", "=", "moments", "[", "~", "suppressed", "]", "\n", "return", "moments", "[", ":", "topk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.evaluate": [[59, 116], ["logging.getLogger", "logging.getLogger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "tqdm.tqdm", "torch.stack().sum", "torch.stack().sum", "logging.getLogger.info", "range", "evaluation.pretty_print_results", "evaluation.save_results_evaluation", "torch.tensor", "torch.tensor", "len", "len", "dataset.get_relative_stride", "dataset.get_number_of_windows", "torch.cat", "torch.cat", "dataset.get_relative_fps", "evaluation.nms", "torch.zeros", "torch.zeros", "dataset.get_moment", "lib.data.datasets.utils.iou", "enumerate", "enumerate", "evaluation.evaluate._eval"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.pretty_print_results", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.save_results_evaluation", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_relative_stride", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_number_of_windows", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_relative_fps", "home.repos.pwc.inspect_result.Soldelli_MAD.engine.evaluation.nms", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_moment", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.iou"], ["", "def", "evaluate", "(", "dataset", ",", "predictions", ",", "nms_thresh", ",", "cfg", ",", "moments_indexes", ",", "\n", "recall_metrics", "=", "(", "1", ",", "5", ",", "10", ",", "50", ",", "100", ")", ",", "\n", "iou_metrics", "=", "(", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ")", ",", "\n", "summary_writer", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"evaluate dataset using different methods based on dataset type.\n    Args:\n    Returns:\n    \"\"\"", "\n", "dataset_name", "=", "dataset", ".", "__class__", ".", "__name__", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.inference\"", ")", "\n", "logger", ".", "info", "(", "\"Performing {} evaluation (Size: {}).\"", ".", "format", "(", "dataset_name", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "num_recall_metrics", ",", "num_iou_metrics", "=", "len", "(", "recall_metrics", ")", ",", "len", "(", "iou_metrics", ")", "\n", "recall_metrics", "=", "torch", ".", "tensor", "(", "recall_metrics", ")", "\n", "iou_metrics", "=", "torch", ".", "tensor", "(", "iou_metrics", ")", "\n", "\n", "def", "_eval", "(", "dataset", ",", "idx", ",", "scores", ",", "moments_indexes", ")", ":", "\n", "# Compute moment candidates and their scores", "\n", "        ", "stride", "=", "dataset", ".", "get_relative_stride", "(", ")", "\n", "num_windows", "=", "dataset", ".", "get_number_of_windows", "(", "idx", ")", "\n", "candidates", "=", "torch", ".", "cat", "(", "[", "moments_indexes", "+", "i", "*", "stride", "for", "i", "in", "range", "(", "num_windows", ")", "]", ")", "\n", "\n", "# Sort and apply nms", "\n", "relative_fps", "=", "dataset", ".", "get_relative_fps", "(", ")", "\n", "moments", "=", "nms", "(", "candidates", ",", "scores", ",", "topk", "=", "recall_metrics", "[", "-", "1", "]", ",", "\n", "relative_fps", "=", "relative_fps", ",", "thresh", "=", "nms_thresh", ")", "\n", "\n", "# Compute performance", "\n", "recall_x_iou_idx", "=", "torch", ".", "zeros", "(", "num_recall_metrics", ",", "num_iou_metrics", ")", "\n", "gt_moment", "=", "dataset", ".", "get_moment", "(", "idx", ")", "\n", "mious", "=", "iou", "(", "moments", ",", "gt_moment", ")", "\n", "if", "len", "(", "mious", ")", "<", "recall_metrics", "[", "-", "1", "]", ":", "\n", "            ", "mious", "=", "F", ".", "pad", "(", "mious", ",", "(", "0", ",", "recall_metrics", "[", "-", "1", "]", "-", "len", "(", "mious", ")", ")", ",", "\"constant\"", ",", "0.0", ")", "\n", "", "bools", "=", "mious", "[", ":", ",", "None", "]", ".", "expand", "(", "recall_metrics", "[", "-", "1", "]", ",", "num_iou_metrics", ")", ">=", "iou_metrics", "\n", "for", "i", ",", "r", "in", "enumerate", "(", "recall_metrics", ")", ":", "\n", "            ", "recall_x_iou_idx", "[", "i", "]", "+=", "bools", "[", ":", "r", "]", ".", "any", "(", "dim", "=", "0", ")", "\n", "\n", "", "return", "recall_x_iou_idx", "\n", "\n", "", "recall_x_iou_dict", "=", "{", "}", "\n", "num_predictions", "=", "len", "(", "predictions", ")", "\n", "for", "idx", ",", "pred_scores", "in", "tqdm", "(", "enumerate", "(", "predictions", ")", ")", ":", "\n", "        ", "recall_x_iou_dict", "[", "idx", "]", "=", "_eval", "(", "dataset", ",", "idx", ",", "pred_scores", ",", "moments_indexes", ")", "\n", "", "recall_x_iou", "=", "torch", ".", "stack", "(", "list", "(", "recall_x_iou_dict", ".", "values", "(", ")", ")", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "logger", ".", "info", "(", "'{} is recall shape, should be [num_recall_metrics, num_iou_metrics]'", ".", "format", "(", "recall_x_iou", ".", "shape", ")", ")", "\n", "recall_x_iou", "/=", "num_predictions", "\n", "\n", "for", "i", "in", "range", "(", "num_recall_metrics", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_iou_metrics", ")", ":", "\n", "            ", "name", "=", "f'R@{recall_metrics[i]:.0f}-IoU={iou_metrics[j]:.1f}'", "\n", "summary_writer", ".", "add_scalar", "(", "name", ",", "recall_x_iou", "[", "i", ",", "j", "]", "*", "100", ")", "\n", "\n", "", "", "pretty_print_results", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ",", "logger", ")", "\n", "save_results_evaluation", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ",", "cfg", ")", "\n", "return", "torch", ".", "tensor", "(", "recall_x_iou", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.samplers.DistributedSampler.__init__": [[5, 8], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.samplers.DistributedSampler.__iter__": [[9, 28], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.samplers.DistributedSampler.__len__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.samplers.DistributedSampler.set_epoch": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.collate_batch.BatchCollator.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.collate_batch.BatchCollator.__call__": [[15, 24], ["list", "zip", "lib.structures.TLGBatch", "torch.stack", "torch.stack().float", "torch.nn.utils.rnn.pad_sequence().transpose", "torch.tensor", "torch.stack", "torch.nn.utils.rnn.pad_sequence"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "# [xxx, xxx, xxx], [xxx, xxx, xxx] ......", "\n", "feats", ",", "queries", ",", "wordlens", ",", "ious2d", ",", "idxs", "=", "transposed_batch", "\n", "return", "TLGBatch", "(", "\n", "feats", "=", "torch", ".", "stack", "(", "feats", ")", ".", "float", "(", ")", ",", "\n", "queries", "=", "pad_sequence", "(", "queries", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "wordlens", "=", "torch", ".", "tensor", "(", "wordlens", ")", ",", "\n", ")", ",", "torch", ".", "stack", "(", "ious2d", ")", ",", "idxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.build_dataset": [[11, 44], ["isinstance", "RuntimeError", "dataset_catalog.get", "getattr", "getattr.", "datasets.append", "len", "datasets.ConcatDataset"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.config.paths_catalog.DatasetCatalog.get"], []], "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_sampler": [[45, 53], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], []], "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_batch_data_sampler": [[54, 59], ["torch.utils.data.sampler.BatchSampler"], "function", ["None"], []], "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_loader": [[60, 111], ["lib.utils.comm.get_world_size", "lib.utils.imports.import_file", "__init__.build_dataset", "logging.getLogger", "__init__.make_data_sampler", "__init__.make_batch_data_sampler", "torch.utils.data.DataLoader", "data_loaders.append", "len", "collate_batch.BatchCollator"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.comm.get_world_size", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.build_dataset", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_data_sampler", "home.repos.pwc.inspect_result.Soldelli_MAD.data.__init__.make_batch_data_sampler"], []], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__": [[18, 59], ["super().__init__", "int", "json.load", "os.path.exists", "utils.movie2feats", "round", "open", "mad.MADdataset.load_pickle_data", "mad.MADdataset._compute_annotaions", "os.path.exists", "mad.MADdataset.load_clip_lang_feats", "ValueError", "mad.MADdataset.movies.keys", "mad.MADdataset._compute_windows_per_movie"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__init__", "home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.movie2feats", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.load_pickle_data", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._compute_annotaions", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.load_clip_lang_feats", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._compute_windows_per_movie"], ["    ", "def", "__init__", "(", "self", ",", "ann_file", ",", "root", ",", "feat_file", ",", "tokenizer_folder", ",", "num_pre_clips", ",", "\n", "num_clips", ",", "pre_query_size", ",", "split", ",", "fps", ",", "test_stride", ",", "input_stride", ",", "\n", "neg_prob", ",", "lang_feat_file", ",", "lang_feat_type", ")", ":", "\n", "        ", "super", "(", "MADdataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_words", "=", "0", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "num_clips", "=", "num_clips", "\n", "self", ".", "num_pre_clips", "=", "num_pre_clips", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "input_stride", "=", "input_stride", "\n", "self", ".", "test_stride", "=", "test_stride", "\n", "self", ".", "relative_fps", "=", "self", ".", "fps", "*", "self", ".", "num_clips", "/", "(", "self", ".", "num_pre_clips", "*", "input_stride", ")", "\n", "self", ".", "relative_stride", "=", "int", "(", "round", "(", "self", ".", "test_stride", "*", "self", ".", "num_clips", "\n", "/", "self", ".", "num_pre_clips", ")", ")", "\n", "self", ".", "neg_prob", "=", "neg_prob", "\n", "\n", "#load annotation file", "\n", "annos", "=", "json", ".", "load", "(", "open", "(", "ann_file", ",", "'r'", ")", ")", "\n", "\n", "cache", "=", "ann_file", "+", "'.pickle'", "\n", "if", "os", ".", "path", ".", "exists", "(", "cache", ")", ":", "\n", "# if cached data exist load it.", "\n", "            ", "self", ".", "load_pickle_data", "(", "cache", ")", "\n", "", "else", ":", "\n", "# otherwise compute the annotations information", "\n", "            ", "self", ".", "_compute_annotaions", "(", "annos", ",", "cache", ")", "\n", "\n", "# Get correct data for language", "\n", "", "if", "lang_feat_type", "==", "'clip'", "and", "os", ".", "path", ".", "exists", "(", "lang_feat_file", ")", ":", "\n", "            ", "self", ".", "load_clip_lang_feats", "(", "lang_feat_file", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Select a correct type of lang feat - Glove is deprecated.'", ")", "\n", "\n", "", "self", ".", "movies", "=", "{", "a", "[", "'movie'", "]", ":", "a", "[", "'movie_duration'", "]", "for", "a", "in", "self", ".", "annos", "}", "\n", "self", ".", "feats", "=", "movie2feats", "(", "feat_file", ",", "self", ".", "movies", ".", "keys", "(", ")", ")", "\n", "\n", "if", "self", ".", "max_words", ">", "50", ":", "\n", "            ", "self", ".", "max_words", "=", "50", "\n", "\n", "", "if", "not", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "_compute_windows_per_movie", "(", "test_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__getitem__": [[60, 68], ["mad.MADdataset._get_language_feature", "mad.MADdataset._get_video_features_train", "mad.MADdataset._get_video_features_test"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_language_feature", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_video_features_train", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_video_features_test"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "anno", "=", "self", ".", "annos", "[", "idx", "]", "\n", "query", ",", "wordlen", "=", "self", ".", "_get_language_feature", "(", "anno", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "feat", ",", "iou2d", "=", "self", ".", "_get_video_features_train", "(", "anno", ",", "anno", "[", "'movie'", "]", ")", "\n", "", "else", ":", "\n", "            ", "feat", ",", "iou2d", "=", "self", ".", "_get_video_features_test", "(", "anno", ",", "anno", "[", "'movie'", "]", ")", "\n", "", "return", "feat", ",", "query", ",", "wordlen", ",", "iou2d", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_duration": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_duration", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'movie_duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_relative_stride": [[75, 77], ["None"], "methods", ["None"], ["", "def", "get_relative_stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "relative_stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_relative_fps": [[78, 80], ["None"], "methods", ["None"], ["", "def", "get_relative_fps", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "relative_fps", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_sentence": [[81, 83], ["None"], "methods", ["None"], ["", "def", "get_sentence", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'sentence'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_moment": [[84, 89], ["None"], "methods", ["None"], ["", "def", "get_moment", "(", "self", ",", "idx", ")", ":", "\n", "        ", "'''\n            return moment duration in seconds\n        '''", "\n", "return", "self", ".", "annos", "[", "idx", "]", "[", "'moment'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_vid": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_vid", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "annos", "[", "idx", "]", "[", "'movie'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.get_number_of_windows": [[93, 96], ["len"], "methods", ["None"], ["", "def", "get_number_of_windows", "(", "self", ",", "idx", ")", ":", "\n", "        ", "movie", "=", "self", ".", "annos", "[", "idx", "]", "[", "'movie'", "]", "\n", "return", "len", "(", "self", ".", "windows", "[", "movie", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.load_pickle_data": [[97, 110], ["logging.getLogger", "logging.getLogger.info", "pickle.load", "open"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.utils.config.Config.load"], ["", "def", "load_pickle_data", "(", "self", ",", "cache", ")", ":", "\n", "        ", "'''\n            The function loads preprocesses annotations and compute the max lenght of the sentences.\n\n            INPUTS:\n            cache: path to pickle file from where to load preprocessed annotations\n\n            OUTPUTS:\n            None.\n        '''", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Load cache data, please wait...\"", ")", "\n", "self", ".", "annos", "=", "pk", ".", "load", "(", "open", "(", "cache", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset.load_clip_lang_feats": [[111, 119], ["max", "h5py.File", "enumerate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "load_clip_lang_feats", "(", "self", ",", "file", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "anno", "in", "enumerate", "(", "self", ".", "annos", ")", ":", "\n", "                ", "lang_feat", "=", "f", "[", "anno", "[", "'id'", "]", "]", "[", ":", "]", "\n", "self", ".", "annos", "[", "i", "]", "[", "'query'", "]", "=", "torch", ".", "from_numpy", "(", "lang_feat", ")", ".", "float", "(", ")", "\n", "self", ".", "annos", "[", "i", "]", "[", "'wordlen'", "]", "=", "len", "(", "lang_feat", ")", "\n", "\n", "", "", "self", ".", "max_words", "=", "max", "(", "[", "a", "[", "'wordlen'", "]", "for", "a", "in", "self", ".", "annos", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._compute_annotaions": [[120, 168], ["logging.getLogger", "logging.getLogger.info", "tqdm.tqdm.tqdm", "pickle.dump", "annos.items", "int", "int", "mad.MADdataset.annos.append", "open", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "max", "min"], "methods", ["None"], ["", "def", "_compute_annotaions", "(", "self", ",", "annos", ",", "cache", ")", ":", "\n", "        ", "'''\n            The function processes the annotations computing language tokenizationa and query features.\n            Construct the moment annotations for training and the target iou2d map.\n            Processed the language to obtain syntactic dependencies.\n            Dump everything in the pickle file for speading up following run.\n\n            INPUTS:\n            annos: annotations loaded from json files\n            cache: path to pickle file where to dump preprocessed annotations\n\n            OUTPUTS:\n            None.\n        '''", "\n", "# compute the annotation data and dump it in a pickle file", "\n", "self", ".", "annos", "=", "[", "]", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"vlg.trainer\"", ")", "\n", "logger", ".", "info", "(", "\"Preparing data, please wait...\"", ")", "\n", "for", "k", ",", "anno", "in", "tqdm", "(", "annos", ".", "items", "(", ")", ")", ":", "\n", "# Unpack Info ----------------------------------------------------------------", "\n", "\n", "            ", "movie", "=", "anno", "[", "'movie'", "]", "\n", "duration", "=", "anno", "[", "'movie_duration'", "]", "\n", "timestamp", "=", "anno", "[", "'ext_timestamps'", "]", "\n", "sentence", "=", "anno", "[", "'sentence'", "]", "\n", "\n", "# Process gt annotations -----------------------------------------------------", "\n", "if", "timestamp", "[", "0", "]", "<", "timestamp", "[", "1", "]", ":", "\n", "                ", "moment", "=", "torch", ".", "tensor", "(", "[", "max", "(", "timestamp", "[", "0", "]", ",", "0", ")", ",", "min", "(", "timestamp", "[", "1", "]", ",", "duration", ")", "]", ")", "\n", "\n", "", "start", "=", "int", "(", "torch", ".", "round", "(", "moment", "[", "0", "]", "*", "self", ".", "fps", ")", ")", "\n", "stop", "=", "int", "(", "torch", ".", "round", "(", "moment", "[", "1", "]", "*", "self", ".", "fps", ")", ")", "\n", "frames_idx", "=", "[", "start", ",", "stop", "]", "\n", "\n", "# Save preprocessed annotations ----------------------------------------------", "\n", "dump_dict", "=", "{", "\n", "'id'", ":", "k", ",", "\n", "'movie'", ":", "movie", ",", "\n", "'moment'", ":", "moment", ",", "\n", "'frames_idx'", ":", "frames_idx", ",", "\n", "'sentence'", ":", "sentence", ",", "\n", "'movie_duration'", ":", "duration", ",", "\n", "}", "\n", "\n", "self", ".", "annos", ".", "append", "(", "dump_dict", ")", "\n", "\n", "# save to file", "\n", "", "pk", ".", "dump", "(", "self", ".", "annos", ",", "open", "(", "cache", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_language_feature": [[169, 181], ["min"], "methods", ["None"], ["", "def", "_get_language_feature", "(", "self", ",", "anno", ")", ":", "\n", "        ", "'''\n            INPUTS:\n            anno: annotation data, contains all the preprocessed information\n\n            OUTPUTS:\n            query: features of the selected sentence\n            wordlen: length of the selected sentence \n        '''", "\n", "query", "=", "anno", "[", "'query'", "]", "[", ":", "self", ".", "max_words", "]", "\n", "wordlen", "=", "min", "(", "anno", "[", "'wordlen'", "]", ",", "self", ".", "max_words", ")", "\n", "return", "query", ",", "wordlen", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_video_features_train": [[182, 238], ["random.random", "max", "max", "min", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.moment_to_iou2d", "random.randint", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int", "int", "int", "random.sample", "round", "range"], "methods", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.moment_to_iou2d"], ["", "def", "_get_video_features_train", "(", "self", ",", "anno", ",", "movie", ")", ":", "\n", "        ", "'''\n            INPUTS:\n            anno: annotation data, contains all the preprocessed information\n            movie: movie id to select the correct features\n\n            OUTPUTS:\n            feat: movie features\n            iou2d: target matrix \n        '''", "\n", "\n", "if", "random", ".", "random", "(", ")", ">", "self", ".", "neg_prob", ":", "\n", "            ", "moment", "=", "anno", "[", "'moment'", "]", "\n", "start_idx", ",", "stop_idx", "=", "anno", "[", "'frames_idx'", "]", "\n", "num_frames", "=", "stop_idx", "-", "start_idx", "\n", "\n", "if", "num_frames", "<", "self", ".", "num_pre_clips", ":", "\n", "                ", "offset", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "num_pre_clips", "-", "num_frames", ",", "1", ")", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "center", "=", "(", "start_idx", "+", "stop_idx", ")", "/", "2", "\n", "offset", "=", "int", "(", "round", "(", "center", "/", "2", ")", ")", "\n", "\n", "# Compute features for window", "\n", "", "start_window", "=", "max", "(", "start_idx", "-", "offset", ",", "0", ")", "\n", "stop_window", "=", "start_window", "+", "self", ".", "num_pre_clips", "*", "self", ".", "input_stride", "\n", "\n", "if", "not", "stop_window", "<=", "anno", "[", "'movie_duration'", "]", "*", "self", ".", "fps", ":", "\n", "                ", "stop_window", "=", "int", "(", "anno", "[", "'movie_duration'", "]", "*", "self", ".", "fps", ")", "\n", "start_window", "=", "stop_window", "-", "self", ".", "num_pre_clips", "*", "self", ".", "input_stride", "\n", "\n", "", "feats", "=", "self", ".", "feats", "[", "movie", "]", "[", "start_window", ":", "stop_window", ":", "self", ".", "input_stride", "]", "\n", "\n", "assert", "feats", ".", "shape", "[", "0", "]", "==", "self", ".", "num_pre_clips", "\n", "\n", "# Compute moment position withint the windo", "\n", "duration", "=", "self", ".", "num_pre_clips", "/", "self", ".", "fps", "\n", "start_moment", "=", "max", "(", "(", "start_idx", "-", "start_window", ")", "/", "self", ".", "fps", ",", "0", ")", "\n", "stop_moment", "=", "min", "(", "(", "stop_idx", "-", "start_window", ")", "/", "self", ".", "fps", ",", "duration", ")", "\n", "\n", "moment", "=", "torch", ".", "tensor", "(", "[", "start_moment", ",", "stop_moment", "]", ")", "\n", "# Generate targets for training ----------------------------------------------", "\n", "iou2d", "=", "moment_to_iou2d", "(", "moment", ",", "self", ".", "num_clips", ",", "duration", ")", "\n", "", "else", ":", "\n", "            ", "start_window", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "feats", "[", "movie", "]", ".", "shape", "[", "0", "]", "-", "self", ".", "num_pre_clips", "*", "self", ".", "input_stride", ")", "\n", "stop_window", "=", "start_window", "+", "self", ".", "num_pre_clips", "*", "self", ".", "input_stride", "\n", "\n", "if", "not", "stop_window", "<=", "anno", "[", "'movie_duration'", "]", "*", "self", ".", "fps", ":", "\n", "                ", "stop_window", "=", "int", "(", "anno", "[", "'movie_duration'", "]", "*", "self", ".", "fps", ")", "\n", "start_window", "=", "stop_window", "-", "self", ".", "num_pre_clips", "*", "self", ".", "input_stride", "\n", "\n", "", "feats", "=", "self", ".", "feats", "[", "movie", "]", "[", "start_window", ":", "stop_window", ":", "self", ".", "input_stride", "]", "\n", "iou2d", "=", "torch", ".", "zeros", "(", "self", ".", "num_clips", ",", "self", ".", "num_clips", ")", "\n", "\n", "assert", "feats", ".", "shape", "[", "0", "]", "==", "self", ".", "num_pre_clips", "\n", "\n", "", "return", "feats", ",", "iou2d", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._get_video_features_test": [[239, 253], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["", "def", "_get_video_features_test", "(", "self", ",", "anno", ",", "movie", ")", ":", "\n", "        ", "'''\n            INPUTS:\n            anno: annotation data, contains all the preprocessed information\n            movie: movie id to select the correct features\n\n            OUTPUTS:\n            feat: movie features\n            iou2d: target matrix \n        '''", "\n", "\n", "windows", "=", "self", ".", "windows", "[", "movie", "]", "\n", "windows_feats", "=", "torch", ".", "stack", "(", "[", "self", ".", "feats", "[", "movie", "]", "[", "w", "[", "0", "]", ":", "w", "[", "1", "]", "]", "for", "w", "in", "windows", "]", ")", "\n", "return", "windows_feats", ",", "torch", ".", "empty", "(", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.mad.MADdataset._compute_windows_per_movie": [[254, 273], ["mad.MADdataset.movies.keys", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack().transpose", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "_compute_windows_per_movie", "(", "self", ",", "test_stride", ")", ":", "\n", "        ", "'''\n            INPUTS:\n            anno: annotation data, contains all the preprocessed information\n            movie: movie id to select the correct features\n\n            OUTPUTS:\n            feat: movie features\n            iou2d: target matrix \n        '''", "\n", "\n", "self", ".", "windows", "=", "{", "}", "\n", "for", "m", "in", "self", ".", "movies", ".", "keys", "(", ")", ":", "\n", "            ", "num_feats", "=", "len", "(", "self", ".", "feats", "[", "m", "]", ")", "\n", "\n", "starts", "=", "torch", ".", "arange", "(", "0", ",", "num_feats", "-", "self", ".", "num_pre_clips", ",", "test_stride", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "stops", "=", "starts", "+", "self", ".", "num_pre_clips", "\n", "\n", "self", ".", "windows", "[", "m", "]", "=", "torch", ".", "stack", "(", "[", "starts", ",", "stops", "]", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.iou": [[6, 12], ["candidates[].float", "candidates[].float", "gt[].float", "gt[].float", "end.min", "start.max", "end.max", "start.min", "inter.clamp"], "function", ["None"], ["from", "torch", ".", "functional", "import", "F", "\n", "from", "terminaltables", "import", "AsciiTable", "\n", "\n", "def", "_iou", "(", "candidates", ",", "gt", ")", ":", "\n", "    ", "start", ",", "end", "=", "candidates", "[", ":", ",", "0", "]", ".", "float", "(", ")", ",", "candidates", "[", ":", ",", "1", "]", ".", "float", "(", ")", "\n", "s", ",", "e", "=", "gt", "[", "0", "]", ".", "float", "(", ")", ",", "gt", "[", "1", "]", ".", "float", "(", ")", "\n", "inter", "=", "end", ".", "min", "(", "e", ")", "-", "start", ".", "max", "(", "s", ")", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.score2d_to_moments_scores": [[13, 19], ["torch.nonzero"], "function", ["None"], ["union", "=", "end", ".", "max", "(", "e", ")", "-", "start", ".", "min", "(", "s", ")", "\n", "return", "inter", ".", "clamp", "(", "min", "=", "0", ")", "/", "union", "\n", "\n", "", "def", "_pretty_print_results", "(", "recall_x_iou", ",", "recall_metrics", ",", "iou_metrics", ")", ":", "\n", "    ", "num_recall_metrics", "=", "len", "(", "recall_metrics", ")", "\n", "num_iou_metrics", "=", "len", "(", "iou_metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.moment_to_iou2d": [[20, 25], ["torch.ones", "utils.score2d_to_moments_scores", "iou().reshape", "utils.iou"], "function", ["home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.score2d_to_moments_scores", "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.iou"], ["for", "i", ",", "r", "in", "enumerate", "(", "recall_metrics", ")", ":", "\n", "# Pretty print", "\n", "        ", "table", "=", "[", "[", "f'Recall@{r},mIoU@{j:.1f}'", "for", "j", "in", "iou_metrics", "]", "]", "\n", "table", ".", "append", "(", "[", "'{:.02f}'", ".", "format", "(", "recall_x_iou", "[", "i", "]", "[", "j", "]", "*", "100", ")", "for", "j", "in", "range", "(", "num_iou_metrics", ")", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table", ")", "\n", "for", "c", "in", "range", "(", "num_iou_metrics", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Soldelli_MAD.datasets.utils.movie2feats": [[26, 31], ["os.path.exists", "h5py.File", "torch.from_numpy"], "function", ["None"], ["            ", "table", ".", "justify_columns", "[", "c", "]", "=", "'center'", "\n", "", "print", "(", "table", ".", "table", ")", "\n", "\n", "", "", "def", "_compute_proposals_feats", "(", "v_feat", ",", "windows_idx", ")", ":", "\n", "    ", "max_", "=", "len", "(", "v_feat", ")", "\n", "proposal_features", "=", "[", "]", "\n"]]}