{"home.repos.pwc.inspect_result.Maluuba_nlg-eval.test.api.test_oo_api": [[3, 22], ["nlgeval.NLGEval", "nlgeval.NLGEval.compute_individual_metrics", "nlgeval.NLGEval.compute_individual_metrics", "nlgeval.NLGEval.compute_metrics", "open", "f.readlines", "open", "f.readlines", "open", "f.readlines", "x.strip", "x.strip", "x.strip"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_metrics"], ["def", "test_oo_api", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"examples/hyp.txt\"", ")", "as", "f", ":", "\n", "        ", "hyp", "=", "f", ".", "readlines", "(", ")", "\n", "hyp", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "hyp", "]", "\n", "", "with", "open", "(", "\"examples/ref1.txt\"", ")", "as", "f", ":", "\n", "        ", "ref1", "=", "f", ".", "readlines", "(", ")", "\n", "ref1", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "ref1", "]", "\n", "", "with", "open", "(", "\"examples/ref2.txt\"", ")", "as", "f", ":", "\n", "        ", "ref2", "=", "f", ".", "readlines", "(", ")", "\n", "ref2", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "ref2", "]", "\n", "\n", "", "nlge", "=", "NLGEval", "(", ")", "\n", "\n", "res", "=", "nlge", ".", "compute_individual_metrics", "(", "[", "ref1", "[", "0", "]", "]", "+", "[", "ref2", "[", "0", "]", "]", ",", "hyp", "[", "0", "]", ")", "\n", "res", "=", "nlge", ".", "compute_individual_metrics", "(", "[", "ref1", "[", "1", "]", "]", "+", "[", "ref2", "[", "1", "]", "]", ",", "hyp", "[", "1", "]", ")", "\n", "\n", "hyp_list", "=", "hyp", "\n", "ref_list", "=", "[", "ref1", ",", "ref2", "]", "\n", "res", "=", "nlge", ".", "compute_metrics", "(", "ref_list", ",", "hyp_list", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.__init__": [[166, 207], ["set", "set", "len", "__init__.NLGEval.load_scorers", "__init__.NLGEval.load_skipthought_model", "__init__.NLGEval.load_glove", "__init__.NLGEval.metrics_to_omit.remove", "__init__.NLGEval.metrics_to_omit.add", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_scorers", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_skipthought_model", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_glove"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_scorers": [[208, 227], ["range", "__init__.NLGEval.scorers.append", "__init__.NLGEval.scorers.append", "__init__.NLGEval.scorers.append", "__init__.NLGEval.scorers.append", "__init__.NLGEval.scorers.append", "nlgeval.pycocoevalcap.bleu.bleu.Bleu", "nlgeval.pycocoevalcap.meteor.meteor.Meteor", "nlgeval.pycocoevalcap.rouge.rouge.Rouge", "nlgeval.pycocoevalcap.cider.cider.Cider", "nlgeval.pycocoevalcap.bleu.bleu.Bleu", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_skipthought_model": [[229, 238], ["skipthoughts.load_model", "skipthoughts.Encoder"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_model"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.load_glove": [[239, 246], ["Embedding"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.compute_individual_metrics": [[247, 287], ["isinstance", "a.strip", "__init__.NLGEval.skipthought_encoder.encode", "__init__.NLGEval.np.array().T.tolist", "six.moves.map", "list", "__init__.NLGEval.np.max().mean", "__init__.NLGEval.np.array().T.tolist", "six.moves.map", "__init__.NLGEval.eval_emb_metrics", "scores.split.split.split", "hyp.strip", "scorer.compute_score", "isinstance", "six.moves.map", "h.strip", "score.split", "float", "zip", "h.strip", "__init__.NLGEval.skipthought_encoder.encode", "__init__.NLGEval.np.max", "float.strip", "__init__.NLGEval.np.array", "__init__.NLGEval.cosine_similarity().diagonal", "__init__.NLGEval.np.array", "r.strip", "r.strip", "__init__.NLGEval.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.eval_emb_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.NLGEval.compute_metrics": [[288, 324], ["list", "len", "len", "__init__.NLGEval.skipthought_encoder.encode", "__init__.NLGEval.np.array().T.tolist", "six.moves.map", "list", "__init__.NLGEval.np.max().mean", "__init__.NLGEval.np.array().T.tolist", "six.moves.map", "__init__.NLGEval.eval_emb_metrics", "scores.split.split.split", "six.moves.map", "zip", "enumerate", "lines.strip", "enumerate", "scorer.compute_score", "isinstance", "six.moves.map", "h.strip", "score.split", "float", "zip", "h.strip", "__init__.NLGEval.skipthought_encoder.encode", "__init__.NLGEval.np.max", "float.strip", "__init__.NLGEval.np.array", "__init__.NLGEval.cosine_similarity().diagonal", "__init__.NLGEval.np.array", "r.strip", "r.strip", "__init__.NLGEval.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.eval_emb_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__._strip": [[15, 17], ["s.strip"], "function", ["None"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_metrics": [[19, 84], ["enumerate", "open", "f.readlines", "list", "len", "len", "skipthoughts.load_model", "skipthoughts.Encoder", "skipthoughts.Encoder.encode", "np.array().T.tolist", "six.moves.map", "list", "np.max().mean", "print", "np.array().T.tolist", "six.moves.map", "eval_emb_metrics", "print", "scores.split.split", "open", "ref_list.append", "six.moves.map", "zip", "enumerate", "lines.strip", "enumerate", "scorer.compute_score", "isinstance", "isinstance", "six.moves.map", "h.strip", "score.split", "float", "f.readlines", "nlgeval.pycocoevalcap.bleu.bleu.Bleu", "nlgeval.pycocoevalcap.meteor.meteor.Meteor", "nlgeval.pycocoevalcap.rouge.rouge.Rouge", "nlgeval.pycocoevalcap.cider.cider.Cider", "zip", "print", "scorer.close", "h.strip", "skipthoughts.Encoder.encode", "np.max", "float.strip", "print", "np.array", "np.max().mean.diagonal", "np.array", "r.strip", "r.strip", "np.max().mean."], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_model", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.eval_emb_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.close", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics": [[86, 146], ["isinstance", "isinstance", "ref.split.split", "a.strip", "skipthoughts.load_model", "skipthoughts.Encoder", "skipthoughts.Encoder.encode", "np.array().T.tolist", "six.moves.map", "list", "np.max().mean", "np.array().T.tolist", "six.moves.map", "eval_emb_metrics", "scores.split.split", "hyp.strip", "scorer.compute_score", "isinstance", "isinstance", "six.moves.map", "h.strip", "score.split", "float", "nlgeval.pycocoevalcap.bleu.bleu.Bleu", "nlgeval.pycocoevalcap.meteor.meteor.Meteor", "nlgeval.pycocoevalcap.rouge.rouge.Rouge", "nlgeval.pycocoevalcap.cider.cider.Cider", "zip", "scorer.close", "h.strip", "skipthoughts.Encoder.encode", "np.max", "float.strip", "np.array", "np.max().mean.diagonal", "np.array", "r.strip", "r.strip", "np.max().mean."], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_model", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.eval_emb_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.close", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], []], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.utils.get_data_dir": [[12, 34], ["os.environ.get", "os.environ.get", "os.path.exists", "click.secho", "utils.InvalidDataDirException", "os.path.join", "os.environ.get", "open", "json.load", "click.secho", "click.secho", "utils.InvalidDataDirException", "os.path.exists", "click.secho", "click.secho", "utils.InvalidDataDirException"], "function", ["None"], ["", "def", "get_data_dir", "(", ")", ":", "\n", "    ", "if", "os", ".", "environ", ".", "get", "(", "'NLGEVAL_DATA'", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "environ", ".", "get", "(", "'NLGEVAL_DATA'", ")", ")", ":", "\n", "            ", "click", ".", "secho", "(", "\"NLGEVAL_DATA variable is set but points to non-existent path.\"", ",", "fg", "=", "'red'", ",", "err", "=", "True", ")", "\n", "raise", "InvalidDataDirException", "(", ")", "\n", "", "return", "os", ".", "environ", ".", "get", "(", "'NLGEVAL_DATA'", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "XDG_CONFIG_HOME", ",", "'nlgeval'", ",", "'rc.json'", ")", "\n", "with", "open", "(", "cfg_file", ",", "'rt'", ")", "as", "f", ":", "\n", "                ", "rc", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rc", "[", "'data_path'", "]", ")", ":", "\n", "                    ", "click", ".", "secho", "(", "\"Data path found in {} does not exist: {} \"", "%", "(", "cfg_file", ",", "rc", "[", "'data_path'", "]", ")", ",", "fg", "=", "'red'", ",", "err", "=", "True", ")", "\n", "click", ".", "secho", "(", "\"Run `nlg-eval --setup DATA_DIR' to download or set $NLGEVAL_DATA to an existing location\"", ",", "\n", "fg", "=", "'red'", ",", "err", "=", "True", ")", "\n", "raise", "InvalidDataDirException", "(", ")", "\n", "", "return", "rc", "[", "'data_path'", "]", "\n", "", "", "except", ":", "\n", "            ", "click", ".", "secho", "(", "\"Could not determine location of data.\"", ",", "fg", "=", "'red'", ",", "err", "=", "True", ")", "\n", "click", ".", "secho", "(", "\"Run `nlg-eval --setup DATA_DIR' to download or set $NLGEVAL_DATA to an existing location\"", ",", "fg", "=", "'red'", ",", "\n", "err", "=", "True", ")", "\n", "raise", "InvalidDataDirException", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu.Bleu.__init__": [[15, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", "=", "4", ")", ":", "\n", "# default compute Blue score up to 4", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "self", ".", "_hypo_for_image", "=", "{", "}", "\n", "self", ".", "ref_for_image", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu.Bleu.compute_score": [[21, 45], ["gts.keys", "bleu_scorer.BleuScorer.BleuScorer", "bleu_scorer.BleuScorer.BleuScorer.compute_score", "gts.keys", "res.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "\n", "        ", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "bleu_scorer", "=", "BleuScorer", "(", "n", "=", "self", ".", "_n", ")", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">=", "1", ")", "\n", "\n", "bleu_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "#score, scores = bleu_scorer.compute_score(option='shortest')", "\n", "", "score", ",", "scores", "=", "bleu_scorer", ".", "compute_score", "(", "option", "=", "'closest'", ",", "verbose", "=", "0", ")", "\n", "#score, scores = bleu_scorer.compute_score(option='average', verbose=1)", "\n", "\n", "# return (bleu, bleu_info)", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu.Bleu.method": [[46, 48], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Bleu\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.copy": [[97, 104], ["bleu_scorer.BleuScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "BleuScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "new", ".", "_score", "=", "None", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.__init__": [[105, 113], ["bleu_scorer.BleuScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "special_reflen", "=", "None", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "special_reflen", "=", "special_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.cook_append": [[114, 126], ["bleu_scorer.BleuScorer.crefs.append", "bleu_scorer.cook_refs", "bleu_scorer.cook_test", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.BleuScorer.ctest.append"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "cooked_test", "=", "cook_test", "(", "test", ",", "self", ".", "crefs", "[", "-", "1", "]", ")", "\n", "self", ".", "ctest", ".", "append", "(", "cooked_test", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n", "", "", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.ratio": [[127, 130], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.score_ratio": [[131, 134], ["bleu_scorer.BleuScorer.fscore", "bleu_scorer.BleuScorer.ratio"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.ratio"], ["", "def", "score_ratio", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "'''return (bleu, len_ratio) pair'''", "\n", "return", "(", "self", ".", "fscore", "(", "option", "=", "option", ")", ",", "self", ".", "ratio", "(", "option", "=", "option", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.score_ratio_str": [[135, 137], ["bleu_scorer.BleuScorer.score_ratio"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.score_ratio"], ["", "def", "score_ratio_str", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "return", "\"%.4f (%.2f)\"", "%", "self", ".", "score_ratio", "(", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.reflen": [[138, 141], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "reflen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.testlen": [[142, 145], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "testlen", "(", "self", ",", "option", "=", "None", ")", ":", "\n", "        ", "self", ".", "compute_score", "(", "option", "=", "option", ")", "\n", "return", "self", ".", "_testlen", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.retest": [[146, 156], ["zip", "type", "len", "len", "bleu_scorer.BleuScorer.ctest.append", "bleu_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_test"], ["", "def", "retest", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "if", "type", "(", "new_test", ")", "is", "str", ":", "\n", "            ", "new_test", "=", "[", "new_test", "]", "\n", "", "assert", "len", "(", "new_test", ")", "==", "len", "(", "self", ".", "crefs", ")", ",", "new_test", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "for", "t", ",", "rs", "in", "zip", "(", "new_test", ",", "self", ".", "crefs", ")", ":", "\n", "            ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "t", ",", "rs", ")", ")", "\n", "", "self", ".", "_score", "=", "None", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.rescore": [[157, 161], ["bleu_scorer.BleuScorer.retest().compute_score", "bleu_scorer.BleuScorer.retest"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.retest"], ["", "def", "rescore", "(", "self", ",", "new_test", ")", ":", "\n", "        ", "''' replace test(s) with new test(s), and returns the new score.'''", "\n", "\n", "return", "self", ".", "retest", "(", "new_test", ")", ".", "compute_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.size": [[162, 165], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.__iadd__": [[166, 179], ["type", "bleu_scorer.BleuScorer.cook_append", "bleu_scorer.BleuScorer.compatible", "bleu_scorer.BleuScorer.ctest.extend", "bleu_scorer.BleuScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.cook_append", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.compatible"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new BleuScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "assert", "self", ".", "compatible", "(", "other", ")", ",", "\"incompatible BLEUs.\"", "\n", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "self", ".", "_score", "=", "None", "## need to recompute", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.compatible": [[180, 182], ["isinstance"], "methods", ["None"], ["", "def", "compatible", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "isinstance", "(", "other", ",", "BleuScorer", ")", "and", "self", ".", "n", "==", "other", ".", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.single_reflen": [[183, 185], ["bleu_scorer.BleuScorer._single_reflen"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "single_reflen", "(", "self", ",", "option", "=", "\"average\"", ")", ":", "\n", "        ", "return", "self", ".", "_single_reflen", "(", "self", ".", "crefs", "[", "0", "]", "[", "0", "]", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer._single_reflen": [[186, 198], ["min", "float", "len", "sum", "min", "abs"], "methods", ["None"], ["", "def", "_single_reflen", "(", "self", ",", "reflens", ",", "option", "=", "None", ",", "testlen", "=", "None", ")", ":", "\n", "\n", "        ", "if", "option", "==", "\"shortest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"average\"", ":", "\n", "            ", "reflen", "=", "float", "(", "sum", "(", "reflens", ")", ")", "/", "len", "(", "reflens", ")", "\n", "", "elif", "option", "==", "\"closest\"", ":", "\n", "            ", "reflen", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflens", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unsupported reflen option %s\"", "%", "option", "\n", "\n", "", "return", "reflen", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.recompute_score": [[199, 202], ["bleu_scorer.BleuScorer.compute_score"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "recompute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "self", ".", "_score", "=", "None", "\n", "return", "self", ".", "compute_score", "(", "option", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer.compute_score": [[203, 269], ["six.moves.xrange", "six.moves.xrange", "bleus.append", "six.moves.xrange", "print", "print", "six.moves.xrange", "bleu_scorer.BleuScorer._single_reflen", "six.moves.xrange", "bleu_list[].append", "six.moves.xrange", "print", "float", "math.exp", "len", "math.exp", "float", "float"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.BleuScorer._single_reflen"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "        ", "n", "=", "self", ".", "n", "\n", "small", "=", "1e-9", "\n", "tiny", "=", "1e-15", "## so that if guess is 0 still return 0", "\n", "bleu_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n", ")", "]", "\n", "\n", "if", "self", ".", "_score", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_score", "\n", "\n", "", "if", "option", "is", "None", ":", "\n", "            ", "option", "=", "\"average\"", "if", "len", "(", "self", ".", "crefs", ")", "==", "1", "else", "\"closest\"", "\n", "\n", "", "self", ".", "_testlen", "=", "0", "\n", "self", ".", "_reflen", "=", "0", "\n", "totalcomps", "=", "{", "'testlen'", ":", "0", ",", "'reflen'", ":", "0", ",", "'guess'", ":", "[", "0", "]", "*", "n", ",", "'correct'", ":", "[", "0", "]", "*", "n", "}", "\n", "\n", "# for each sentence", "\n", "for", "comps", "in", "self", ".", "ctest", ":", "\n", "            ", "testlen", "=", "comps", "[", "'testlen'", "]", "\n", "self", ".", "_testlen", "+=", "testlen", "\n", "\n", "if", "self", ".", "special_reflen", "is", "None", ":", "## need computation", "\n", "                ", "reflen", "=", "self", ".", "_single_reflen", "(", "comps", "[", "'reflen'", "]", ",", "option", ",", "testlen", ")", "\n", "", "else", ":", "\n", "                ", "reflen", "=", "self", ".", "special_reflen", "\n", "\n", "", "self", ".", "_reflen", "+=", "reflen", "\n", "\n", "for", "key", "in", "[", "'guess'", ",", "'correct'", "]", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "totalcomps", "[", "key", "]", "[", "k", "]", "+=", "comps", "[", "key", "]", "[", "k", "]", "\n", "\n", "# append per image bleu score", "\n", "", "", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleu", "*=", "(", "float", "(", "comps", "[", "'correct'", "]", "[", "k", "]", ")", "+", "tiny", ")", "/", "(", "float", "(", "comps", "[", "'guess'", "]", "[", "k", "]", ")", "+", "small", ")", "\n", "bleu_list", "[", "k", "]", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "testlen", "+", "tiny", ")", "/", "(", "reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "                ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                    ", "bleu_list", "[", "k", "]", "[", "-", "1", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "1", ":", "\n", "                ", "print", "(", "comps", ",", "reflen", ")", "\n", "\n", "", "", "totalcomps", "[", "'reflen'", "]", "=", "self", ".", "_reflen", "\n", "totalcomps", "[", "'testlen'", "]", "=", "self", ".", "_testlen", "\n", "\n", "bleus", "=", "[", "]", "\n", "bleu", "=", "1.", "\n", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "            ", "bleu", "*=", "float", "(", "totalcomps", "[", "'correct'", "]", "[", "k", "]", "+", "tiny", ")", "/", "(", "totalcomps", "[", "'guess'", "]", "[", "k", "]", "+", "small", ")", "\n", "bleus", ".", "append", "(", "bleu", "**", "(", "1.", "/", "(", "k", "+", "1", ")", ")", ")", "\n", "", "ratio", "=", "(", "self", ".", "_testlen", "+", "tiny", ")", "/", "(", "self", ".", "_reflen", "+", "small", ")", "## N.B.: avoid zero division", "\n", "if", "ratio", "<", "1", ":", "\n", "            ", "for", "k", "in", "range", "(", "n", ")", ":", "\n", "                ", "bleus", "[", "k", "]", "*=", "math", ".", "exp", "(", "1", "-", "1", "/", "ratio", ")", "\n", "\n", "", "", "if", "verbose", ">", "0", ":", "\n", "            ", "print", "(", "totalcomps", ")", "\n", "print", "(", "\"ratio:\"", ",", "ratio", ")", "\n", "\n", "", "self", ".", "_score", "=", "bleus", "\n", "return", "self", ".", "_score", ",", "bleu_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.precook": [[27, 38], ["s.split", "collections.defaultdict", "six.moves.xrange", "six.moves.xrange", "len", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "(", "len", "(", "words", ")", ",", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.cook_refs": [[39, 63], ["bleu_scorer.precook", "min.append", "six.iteritems", "min", "max", "maxcounts.get", "float", "len", "sum"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.'''", "\n", "\n", "reflen", "=", "[", "]", "\n", "maxcounts", "=", "{", "}", "\n", "for", "ref", "in", "refs", ":", "\n", "        ", "rl", ",", "counts", "=", "precook", "(", "ref", ",", "n", ")", "\n", "reflen", ".", "append", "(", "rl", ")", "\n", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "counts", ")", ":", "\n", "            ", "maxcounts", "[", "ngram", "]", "=", "max", "(", "maxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "", "", "if", "eff", "==", "\"shortest\"", ":", "\n", "        ", "reflen", "=", "min", "(", "reflen", ")", "\n", "", "elif", "eff", "==", "\"average\"", ":", "\n", "        ", "reflen", "=", "float", "(", "sum", "(", "reflen", ")", ")", "/", "len", "(", "reflen", ")", "\n", "\n", "## lhuang: N.B.: leave reflen computaiton to the very end!!", "\n", "\n", "## lhuang: N.B.: in case of \"closest\", keep a list of reflens!! (bad design)", "\n", "\n", "", "return", "(", "reflen", ",", "maxcounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.bleu.bleu_scorer.cook_test": [[64, 89], ["bleu_scorer.precook", "six.iteritems", "max", "min", "min", "six.moves.xrange", "refmaxcounts.get", "len", "abs"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "reflen_refmaxcounts", ",", "eff", "=", "None", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.'''", "\n", "\n", "reflen", ",", "refmaxcounts", "=", "reflen_refmaxcounts", "\n", "testlen", ",", "counts", "=", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n", "result", "=", "{", "}", "\n", "\n", "# Calculate effective reference sentence length.", "\n", "\n", "if", "eff", "==", "\"closest\"", ":", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "min", "(", "(", "abs", "(", "l", "-", "testlen", ")", ",", "l", ")", "for", "l", "in", "reflen", ")", "[", "1", "]", "\n", "", "else", ":", "## i.e., \"average\" or \"shortest\" or None", "\n", "        ", "result", "[", "\"reflen\"", "]", "=", "reflen", "\n", "\n", "", "result", "[", "\"testlen\"", "]", "=", "testlen", "\n", "\n", "result", "[", "\"guess\"", "]", "=", "[", "max", "(", "0", ",", "testlen", "-", "k", "+", "1", ")", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", "]", "\n", "\n", "result", "[", "'correct'", "]", "=", "[", "0", "]", "*", "n", "\n", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "counts", ")", ":", "\n", "        ", "result", "[", "\"correct\"", "]", "[", "len", "(", "ngram", ")", "-", "1", "]", "+=", "min", "(", "refmaxcounts", ".", "get", "(", "ngram", ",", "0", ")", ",", "count", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.Rouge.__init__": [[41, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "# vrama91: updated the value below based on discussion with Hovey", "\n", "        ", "self", ".", "beta", "=", "1.2", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.Rouge.calc_score": [[45, 76], ["candidate[].split", "max", "max", "len", "len", "reference.split", "rouge.my_lcs", "prec.append", "rec.append", "float", "float", "float", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.my_lcs"], ["", "def", "calc_score", "(", "self", ",", "candidate", ",", "refs", ")", ":", "\n", "        ", "\"\"\"\n        Compute ROUGE-L score given one candidate and references for an image\n        :param candidate: str : candidate sentence to be evaluated\n        :param refs: list of str : COCO reference sentences for the particular image to be evaluated\n        :returns score: int (ROUGE-L score for the candidate evaluated against references)\n        \"\"\"", "\n", "assert", "(", "len", "(", "candidate", ")", "==", "1", ")", "\n", "assert", "(", "len", "(", "refs", ")", ">", "0", ")", "\n", "prec", "=", "[", "]", "\n", "rec", "=", "[", "]", "\n", "\n", "# split into tokens", "\n", "token_c", "=", "candidate", "[", "0", "]", ".", "split", "(", "\" \"", ")", "\n", "\n", "for", "reference", "in", "refs", ":", "\n", "# split into tokens", "\n", "            ", "token_r", "=", "reference", ".", "split", "(", "\" \"", ")", "\n", "# compute the longest common subsequence", "\n", "lcs", "=", "my_lcs", "(", "token_r", ",", "token_c", ")", "\n", "prec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_c", ")", ")", ")", "\n", "rec", ".", "append", "(", "lcs", "/", "float", "(", "len", "(", "token_r", ")", ")", ")", "\n", "\n", "", "prec_max", "=", "max", "(", "prec", ")", "\n", "rec_max", "=", "max", "(", "rec", ")", "\n", "\n", "if", "(", "prec_max", "!=", "0", "and", "rec_max", "!=", "0", ")", ":", "\n", "            ", "score", "=", "(", "(", "1", "+", "self", ".", "beta", "**", "2", ")", "*", "prec_max", "*", "rec_max", ")", "/", "float", "(", "rec_max", "+", "self", ".", "beta", "**", "2", "*", "prec_max", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "0.0", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.Rouge.compute_score": [[77, 103], ["gts.keys", "numpy.mean", "gts.keys", "res.keys", "score.append", "numpy.array", "numpy.array", "rouge.Rouge.calc_score", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.Rouge.calc_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Computes Rouge-L score given a set of reference and candidate sentences for the dataset\n        Invoked by evaluate_captions.py \n        :param hypo_for_image: dict : candidate / test sentences with \"image name\" key and \"tokenized sentences\" as values \n        :param ref_for_image: dict : reference MS-COCO sentences with \"image name\" key and \"tokenized sentences\" as values\n        :returns: average_score: float (mean ROUGE-L score computed by averaging scores for all the images)\n        \"\"\"", "\n", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "score", "=", "[", "]", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "score", ".", "append", "(", "self", ".", "calc_score", "(", "hypo", ",", "ref", ")", ")", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "", "average_score", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", "\n", "return", "average_score", ",", "np", ".", "array", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.Rouge.method": [[104, 106], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"Rouge\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.rouge.rouge.my_lcs": [[13, 35], ["range", "len", "len", "range", "range", "len", "len", "range", "len", "max", "len", "len", "len"], "function", ["None"], ["def", "my_lcs", "(", "string", ",", "sub", ")", ":", "\n", "    ", "\"\"\"\n    Calculates longest common subsequence for a pair of tokenized strings\n    :param string : list of str : tokens from a string split using whitespace\n    :param sub : list of str : shorter string, also split using whitespace\n    :returns: length (list of int): length of the longest common subsequence between the two strings\n\n    Note: my_lcs only gives length of the longest common subsequence, not the actual LCS\n    \"\"\"", "\n", "if", "(", "len", "(", "string", ")", "<", "len", "(", "sub", ")", ")", ":", "\n", "        ", "sub", ",", "string", "=", "string", ",", "sub", "\n", "\n", "", "lengths", "=", "[", "[", "0", "for", "i", "in", "range", "(", "0", ",", "len", "(", "sub", ")", "+", "1", ")", "]", "for", "j", "in", "range", "(", "0", ",", "len", "(", "string", ")", "+", "1", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "1", ",", "len", "(", "sub", ")", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "string", ")", "+", "1", ")", ":", "\n", "            ", "if", "(", "string", "[", "i", "-", "1", "]", "==", "sub", "[", "j", "-", "1", "]", ")", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "lengths", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "lengths", "[", "i", "]", "[", "j", "]", "=", "max", "(", "lengths", "[", "i", "-", "1", "]", "[", "j", "]", ",", "lengths", "[", "i", "]", "[", "j", "-", "1", "]", ")", "\n", "\n", "", "", "", "return", "lengths", "[", "len", "(", "string", ")", "]", "[", "len", "(", "sub", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.__init__": [[31, 56], ["threading.Lock", "os.environ.copy", "subprocess.Popen", "atexit.register", "logging.warning", "psutil.virtual_memory", "os.path.dirname", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "# Used to guarantee thread safety", "\n", "        ", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "mem", "=", "'2G'", "\n", "mem_available_G", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "available", "/", "1E9", "\n", "if", "mem_available_G", "<", "2", ":", "\n", "            ", "logging", ".", "warning", "(", "\"There is less than 2GB of available memory.\\n\"", "\n", "\"Will try with limiting Meteor to 1GB of memory but this might cause issues.\\n\"", "\n", "\"If you have problems using Meteor, \"", "\n", "\"then you can try to lower the `mem` variable in meteor.py\"", ")", "\n", "mem", "=", "'1G'", "\n", "\n", "", "meteor_cmd", "=", "[", "'java'", ",", "'-jar'", ",", "'-Xmx{}'", ".", "format", "(", "mem", ")", ",", "METEOR_JAR", ",", "\n", "'-'", ",", "'-'", ",", "'-stdio'", ",", "'-l'", ",", "'en'", ",", "'-norm'", "]", "\n", "env", "=", "os", ".", "environ", ".", "copy", "(", ")", "\n", "env", "[", "'LC_ALL'", "]", "=", "\"C\"", "\n", "self", ".", "meteor_p", "=", "subprocess", ".", "Popen", "(", "meteor_cmd", ",", "\n", "cwd", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\n", "env", "=", "env", ",", "\n", "stdin", "=", "subprocess", ".", "PIPE", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "\n", "atexit", ".", "register", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.close": [[57, 67], ["atexit.unregister", "meteor.Meteor.meteor_p.kill", "meteor.Meteor.meteor_p.wait"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "if", "self", ".", "meteor_p", ":", "\n", "                ", "self", ".", "meteor_p", ".", "kill", "(", ")", "\n", "self", ".", "meteor_p", ".", "wait", "(", ")", "\n", "self", ".", "meteor_p", "=", "None", "\n", "# if the user calls close() manually, remove the", "\n", "# reference from atexit so the object can be garbage-collected.", "\n", "", "", "if", "atexit", "is", "not", "None", "and", "atexit", ".", "unregister", "is", "not", "None", ":", "\n", "            ", "atexit", ".", "unregister", "(", "self", ".", "close", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.compute_score": [[68, 97], ["gts.keys", "gts.keys", "res.keys", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "range", "float", "meteor.Meteor._stat", "meteor.enc", "len", "meteor.Meteor.meteor_p.stdout.readline", "dec().strip", "len", "scores.append", "float", "sys.stderr.write", "sys.stderr.write", "sys.stderr.write", "meteor.dec", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.strip", "meteor.dec", "meteor.Meteor.strip"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor._stat", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec"], ["", "", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "scores", "=", "[", "]", "\n", "\n", "eval_line", "=", "'EVAL'", "\n", "with", "self", ".", "lock", ":", "\n", "            ", "for", "i", "in", "imgIds", ":", "\n", "                ", "assert", "(", "len", "(", "res", "[", "i", "]", ")", "==", "1", ")", "\n", "stat", "=", "self", ".", "_stat", "(", "res", "[", "i", "]", "[", "0", "]", ",", "gts", "[", "i", "]", ")", "\n", "eval_line", "+=", "' ||| {}'", ".", "format", "(", "stat", ")", "\n", "\n", "", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "eval_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "imgIds", ")", ")", ":", "\n", "                ", "v", "=", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", "\n", "try", ":", "\n", "                    ", "scores", ".", "append", "(", "float", "(", "dec", "(", "v", ".", "strip", "(", ")", ")", ")", ")", "\n", "", "except", ":", "\n", "                    ", "sys", ".", "stderr", ".", "write", "(", "\"Error handling value: {}\\n\"", ".", "format", "(", "v", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "\"Decoded value: {}\\n\"", ".", "format", "(", "dec", "(", "v", ".", "strip", "(", ")", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "\"eval_line: {}\\n\"", ".", "format", "(", "eval_line", ")", ")", "\n", "# You can try uncommenting the next code line to show stderr from the Meteor JAR.", "\n", "# If the Meteor JAR is not writing to stderr, then the line will just hang.", "\n", "# sys.stderr.write(\"Error from Meteor:\\n{}\".format(self.meteor_p.stderr.read()))", "\n", "raise", "\n", "", "", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "\n", "", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.method": [[98, 100], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"METEOR\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor._stat": [[101, 110], ["hypothesis_str.replace.replace.replace", "re.sub", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "dec().strip", "meteor.enc", "meteor.enc", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec"], ["", "def", "_stat", "(", "self", ",", "hypothesis_str", ",", "reference_list", ")", ":", "\n", "# SCORE ||| reference 1 words ||| reference n words ||| hypothesis words", "\n", "        ", "hypothesis_str", "=", "hypothesis_str", ".", "replace", "(", "'|||'", ",", "''", ")", "\n", "score_line", "=", "' ||| '", ".", "join", "(", "(", "'SCORE'", ",", "' ||| '", ".", "join", "(", "reference_list", ")", ",", "hypothesis_str", ")", ")", "\n", "score_line", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "score_line", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "score_line", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'\\n'", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "return", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor._score": [[111, 128], ["hypothesis_str.replace().replace.replace().replace.replace().replace", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "dec().strip", "meteor.Meteor.meteor_p.stdin.write", "meteor.Meteor.meteor_p.stdin.flush", "float", "float", "meteor.enc", "meteor.enc", "dec().strip", "dec().strip", "hypothesis_str.replace().replace.replace().replace.replace", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.dec", "meteor.dec", "meteor.Meteor.meteor_p.stdout.readline", "meteor.Meteor.meteor_p.stdout.readline"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec"], ["", "def", "_score", "(", "self", ",", "hypothesis_str", ",", "reference_list", ")", ":", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "# SCORE ||| reference 1 words ||| reference n words ||| hypothesis words", "\n", "            ", "hypothesis_str", "=", "hypothesis_str", ".", "replace", "(", "'|||'", ",", "''", ")", ".", "replace", "(", "'  '", ",", "' '", ")", "\n", "score_line", "=", "' ||| '", ".", "join", "(", "(", "'SCORE'", ",", "' ||| '", ".", "join", "(", "reference_list", ")", ",", "hypothesis_str", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "score_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "stats", "=", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", "\n", "eval_line", "=", "'EVAL ||| {}'", ".", "format", "(", "stats", ")", "\n", "# EVAL ||| stats ", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "write", "(", "enc", "(", "'{}\\n'", ".", "format", "(", "eval_line", ")", ")", ")", "\n", "self", ".", "meteor_p", ".", "stdin", ".", "flush", "(", ")", "\n", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "# bug fix: there are two values returned by the jar file, one average, and one all, so do it twice", "\n", "# thanks for Andrej for pointing this out", "\n", "score", "=", "float", "(", "dec", "(", "self", ".", "meteor_p", ".", "stdout", ".", "readline", "(", ")", ")", ".", "strip", "(", ")", ")", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.__del__": [[129, 131], ["meteor.Meteor.close"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.enc": [[21, 23], ["s.encode"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], ["def", "enc", "(", "s", ")", ":", "\n", "    ", "return", "s", ".", "encode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.dec": [[25, 27], ["s.decode"], "function", ["None"], ["", "def", "dec", "(", "s", ")", ":", "\n", "    ", "return", "s", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.tests.test_meteor.TestMeteor.test_compute_score": [[10, 18], ["nlgeval.pycocoevalcap.meteor.meteor.Meteor", "nlgeval.pycocoevalcap.meteor.meteor.Meteor.compute_score", "test_meteor.TestMeteor.assertEqual", "nlgeval.pycocoevalcap.meteor.meteor.Meteor.compute_score", "test_meteor.TestMeteor.assertEqual"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["    ", "def", "test_compute_score", "(", "self", ")", ":", "\n", "        ", "m", "=", "Meteor", "(", ")", "\n", "\n", "s", "=", "m", ".", "compute_score", "(", "{", "0", ":", "[", "\"test\"", "]", "}", ",", "{", "0", ":", "[", "\"test\"", "]", "}", ")", "\n", "self", ".", "assertEqual", "(", "s", ",", "(", "1.0", ",", "[", "1.0", "]", ")", ")", "\n", "\n", "s", "=", "m", ".", "compute_score", "(", "{", "0", ":", "[", "\"\u30c6\u30b9\u30c8\"", "]", "}", ",", "{", "0", ":", "[", "\"\u30c6\u30b9\u30c8\"", "]", "}", ")", "\n", "self", ".", "assertEqual", "(", "s", ",", "(", "1.0", ",", "[", "1.0", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.tests.test_nlgeval.TestNlgEval.test_compute_metrics_oo": [[12, 89], ["nlgeval.NLGEval", "nlgeval.NLGEval.compute_individual_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "nlgeval.NLGEval.compute_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "nlgeval.NLGEval.compute_individual_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "nlgeval.NLGEval.compute_individual_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics"], ["    ", "def", "test_compute_metrics_oo", "(", "self", ")", ":", "\n", "# Create the object in the test so that it can be garbage collected once the test is done.", "\n", "        ", "n", "=", "NLGEval", "(", ")", "\n", "\n", "# Individual Metrics", "\n", "scores", "=", "n", ".", "compute_individual_metrics", "(", "ref", "=", "[", "\"this is a test\"", ",", "\n", "\"this is also a test\"", "]", ",", "\n", "hyp", "=", "\"this is a good test\"", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.799999", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.632455", ",", "scores", "[", "'Bleu_2'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.5108729", ",", "scores", "[", "'Bleu_3'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0000903602", ",", "scores", "[", "'Bleu_4'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.44434387", ",", "scores", "[", "'METEOR'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.9070631", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.8375251", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.980075", ",", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "scores", "[", "'EmbeddingAverageCosineSimilairty'", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.94509", ",", "scores", "[", "'VectorExtremaCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.960771", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "12", ",", "len", "(", "scores", ")", ")", "\n", "\n", "scores", "=", "n", ".", "compute_metrics", "(", "ref_list", "=", "[", "\n", "[", "\n", "\"this is one reference sentence for sentence1\"", ",", "\n", "\"this is a reference sentence for sentence2 which was generated by your model\"", "\n", "]", ",", "\n", "[", "\n", "\"this is one more reference sentence for sentence1\"", ",", "\n", "\"this is the second reference sentence for sentence2\"", "\n", "]", ",", "\n", "]", ",", "\n", "hyp_list", "=", "[", "\n", "\"this is the model generated sentence1 which seems good enough\"", ",", "\n", "\"this is sentence2 which has been generated by your model\"", "\n", "]", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.55", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.428174", ",", "scores", "[", "'Bleu_2'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.284043", ",", "scores", "[", "'Bleu_3'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.201143", ",", "scores", "[", "'Bleu_4'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.295797", ",", "scores", "[", "'METEOR'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.522104", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.242192", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.626149", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.88469", ",", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.568696", ",", "scores", "[", "'VectorExtremaCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.784205", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "12", ",", "len", "(", "scores", ")", ")", "\n", "\n", "# Non-ASCII tests.", "\n", "scores", "=", "n", ".", "compute_individual_metrics", "(", "ref", "=", "[", "\"Test en fran\u00e7ais.\"", ",", "\n", "\"Le test en fran\u00e7ais.\"", "]", ",", "\n", "hyp", "=", "\"Le test est en fran\u00e7ais.\"", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.799999", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.632455", ",", "scores", "[", "'Bleu_2'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0000051", ",", "scores", "[", "'Bleu_3'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0", ",", "scores", "[", "'Bleu_4'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.48372379050300296", ",", "scores", "[", "'METEOR'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.9070631", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.9192341566085815", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.906562", ",", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "scores", "[", "'EmbeddingAverageCosineSimilairty'", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.815158", ",", "scores", "[", "'VectorExtremaCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.940959", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "12", ",", "len", "(", "scores", ")", ")", "\n", "\n", "scores", "=", "n", ".", "compute_individual_metrics", "(", "ref", "=", "[", "\"\u30c6\u30b9\u30c8\"", "]", ",", "\n", "hyp", "=", "\"\u30c6\u30b9\u30c8\"", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.99999999", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.0", ",", "scores", "[", "'METEOR'", "]", ",", "places", "=", "3", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.0", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "3", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "3", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.0", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "3", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.0", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "3", ")", "\n", "self", ".", "assertEqual", "(", "12", ",", "len", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.tests.test_nlgeval.TestNlgEval.test_compute_metrics_omit": [[90, 105], ["nlgeval.NLGEval", "nlgeval.NLGEval.compute_individual_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_individual_metrics"], ["", "def", "test_compute_metrics_omit", "(", "self", ")", ":", "\n", "        ", "n", "=", "NLGEval", "(", "metrics_to_omit", "=", "[", "'Bleu_3'", ",", "'METEOR'", ",", "'EmbeddingAverageCosineSimilarity'", "]", ")", "\n", "\n", "# Individual Metrics", "\n", "scores", "=", "n", ".", "compute_individual_metrics", "(", "ref", "=", "[", "\"this is a test\"", ",", "\n", "\"this is also a test\"", "]", ",", "\n", "hyp", "=", "\"this is a good test\"", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.799999", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.632455", ",", "scores", "[", "'Bleu_2'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.9070631", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.0", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.8375251", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.94509", ",", "scores", "[", "'VectorExtremaCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.960771", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "7", ",", "len", "(", "scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.tests.test_nlgeval.TestNlgEval.test_compute_metrics": [[106, 125], ["os.path.join", "os.path.join", "nlgeval.compute_metrics", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertAlmostEqual", "test_nlgeval.TestNlgEval.assertEqual", "os.path.dirname", "os.path.join", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.__init__.compute_metrics"], ["", "def", "test_compute_metrics", "(", "self", ")", ":", "\n", "# The example from the README.", "\n", "        ", "root_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'..'", ",", "'..'", ")", "\n", "hypothesis", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'examples/hyp.txt'", ")", "\n", "references", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'examples/ref1.txt'", ")", ",", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'examples/ref2.txt'", ")", "\n", "scores", "=", "nlgeval", ".", "compute_metrics", "(", "hypothesis", ",", "references", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.55", ",", "scores", "[", "'Bleu_1'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.428174", ",", "scores", "[", "'Bleu_2'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.284043", ",", "scores", "[", "'Bleu_3'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.201143", ",", "scores", "[", "'Bleu_4'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.295797", ",", "scores", "[", "'METEOR'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.522104", ",", "scores", "[", "'ROUGE_L'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "1.242192", ",", "scores", "[", "'CIDEr'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.626149", ",", "scores", "[", "'SkipThoughtCS'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.88469", ",", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "scores", "[", "'EmbeddingAverageCosineSimilarity'", "]", ",", "scores", "[", "'EmbeddingAverageCosineSimilairty'", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.568696", ",", "scores", "[", "'VectorExtremaCosineSimilarity'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "0.784205", ",", "scores", "[", "'GreedyMatchingScore'", "]", ",", "places", "=", "5", ")", "\n", "self", ".", "assertEqual", "(", "12", ",", "len", "(", "scores", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy": [[53, 59], ["cider_scorer.CiderScorer", "copy.copy", "copy.copy"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.copy"], ["def", "copy", "(", "self", ")", ":", "\n", "        ", "''' copy the refs.'''", "\n", "new", "=", "CiderScorer", "(", "n", "=", "self", ".", "n", ")", "\n", "new", ".", "ctest", "=", "copy", ".", "copy", "(", "self", ".", "ctest", ")", "\n", "new", ".", "crefs", "=", "copy", ".", "copy", "(", "self", ".", "crefs", ")", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.__init__": [[60, 69], ["collections.defaultdict", "cider_scorer.CiderScorer.cook_append"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "        ", "''' singular instance '''", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "crefs", "=", "[", "]", "\n", "self", ".", "ctest", "=", "[", "]", "\n", "self", ".", "document_frequency", "=", "defaultdict", "(", "float", ")", "\n", "self", ".", "cook_append", "(", "test", ",", "refs", ")", "\n", "self", ".", "ref_len", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.cook_append": [[70, 79], ["cider_scorer.CiderScorer.crefs.append", "cider_scorer.cook_refs", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.CiderScorer.ctest.append", "cider_scorer.cook_test"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_refs", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_test"], ["", "def", "cook_append", "(", "self", ",", "test", ",", "refs", ")", ":", "\n", "        ", "'''called by constructor and __iadd__ to avoid creating new instances.'''", "\n", "\n", "if", "refs", "is", "not", "None", ":", "\n", "            ", "self", ".", "crefs", ".", "append", "(", "cook_refs", "(", "refs", ")", ")", "\n", "if", "test", "is", "not", "None", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "cook_test", "(", "test", ")", ")", "## N.B.: -1", "\n", "", "else", ":", "\n", "                ", "self", ".", "ctest", ".", "append", "(", "None", ")", "# lens of crefs and ctest have to match", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.size": [[80, 83], ["len", "len", "len", "len", "len"], "methods", ["None"], ["", "", "", "def", "size", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "crefs", ")", "==", "len", "(", "self", ".", "ctest", ")", ",", "\"refs/test mismatch! %d<>%d\"", "%", "(", "len", "(", "self", ".", "crefs", ")", ",", "len", "(", "self", ".", "ctest", ")", ")", "\n", "return", "len", "(", "self", ".", "crefs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.__iadd__": [[84, 95], ["type", "cider_scorer.CiderScorer.cook_append", "cider_scorer.CiderScorer.ctest.extend", "cider_scorer.CiderScorer.crefs.extend"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.cook_append"], ["", "def", "__iadd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''add an instance (e.g., from another sentence).'''", "\n", "\n", "if", "type", "(", "other", ")", "is", "tuple", ":", "\n", "## avoid creating new CiderScorer instances", "\n", "            ", "self", ".", "cook_append", "(", "other", "[", "0", "]", ",", "other", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ctest", ".", "extend", "(", "other", ".", "ctest", ")", "\n", "self", ".", "crefs", ".", "extend", "(", "other", ".", "crefs", ")", "\n", "\n", "", "return", "self", "\n", "", "def", "compute_doc_freq", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.compute_doc_freq": [[95, 106], ["set", "six.iteritems"], "methods", ["None"], ["", "def", "compute_doc_freq", "(", "self", ")", ":", "\n", "        ", "'''\n        Compute term frequency for reference data.\n        This will be used to compute idf (inverse document frequency later)\n        The term frequency is stored in the object\n        :return: None\n        '''", "\n", "for", "refs", "in", "self", ".", "crefs", ":", "\n", "# refs, k ref captions of one image", "\n", "            ", "for", "ngram", "in", "set", "(", "[", "ngram", "for", "ref", "in", "refs", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "ref", ")", "]", ")", ":", "\n", "                ", "self", ".", "document_frequency", "[", "ngram", "]", "+=", "1", "\n", "# maxcounts[ngram] = max(maxcounts.get(ngram,0), count)", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.compute_cider": [[108, 184], ["numpy.log", "zip", "six.iteritems", "float", "numpy.array", "six.moves.xrange", "float", "cider_scorer.CiderScorer.compute_cider.counts2vec"], "methods", ["None"], ["", "", "", "def", "compute_cider", "(", "self", ")", ":", "\n", "        ", "def", "counts2vec", "(", "cnts", ")", ":", "\n", "            ", "\"\"\"\n            Function maps counts of ngram to vector of tfidf weights.\n            The function returns vec, an array of dictionary that store mapping of n-gram and tf-idf weights.\n            The n-th entry of array denotes length of n-grams.\n            :param cnts:\n            :return: vec (array of dict), norm (array of float), length (int)\n            \"\"\"", "\n", "vec", "=", "[", "defaultdict", "(", "float", ")", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "length", "=", "0", "\n", "norm", "=", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", "\n", "for", "(", "ngram", ",", "term_freq", ")", "in", "six", ".", "iteritems", "(", "cnts", ")", ":", "\n", "# give word count 1 if it doesn't appear in reference corpus", "\n", "                ", "df", "=", "np", ".", "log", "(", "max", "(", "1.0", ",", "self", ".", "document_frequency", "[", "ngram", "]", ")", ")", "\n", "# ngram index", "\n", "n", "=", "len", "(", "ngram", ")", "-", "1", "\n", "# tf (term_freq) * idf (precomputed idf) for n-grams", "\n", "vec", "[", "n", "]", "[", "ngram", "]", "=", "float", "(", "term_freq", ")", "*", "(", "self", ".", "ref_len", "-", "df", ")", "\n", "# compute norm for the vector.  the norm will be used for computing similarity", "\n", "norm", "[", "n", "]", "+=", "pow", "(", "vec", "[", "n", "]", "[", "ngram", "]", ",", "2", ")", "\n", "\n", "if", "n", "==", "1", ":", "\n", "                    ", "length", "+=", "term_freq", "\n", "", "", "norm", "=", "[", "np", ".", "sqrt", "(", "n", ")", "for", "n", "in", "norm", "]", "\n", "return", "vec", ",", "norm", ",", "length", "\n", "\n", "", "def", "sim", "(", "vec_hyp", ",", "vec_ref", ",", "norm_hyp", ",", "norm_ref", ",", "length_hyp", ",", "length_ref", ")", ":", "\n", "            ", "'''\n            Compute the cosine similarity of two vectors.\n            :param vec_hyp: array of dictionary for vector corresponding to hypothesis\n            :param vec_ref: array of dictionary for vector corresponding to reference\n            :param norm_hyp: array of float for vector corresponding to hypothesis\n            :param norm_ref: array of float for vector corresponding to reference\n            :param length_hyp: int containing length of hypothesis\n            :param length_ref: int containing length of reference\n            :return: array of score for each n-grams cosine similarity\n            '''", "\n", "delta", "=", "float", "(", "length_hyp", "-", "length_ref", ")", "\n", "# measure consine similarity", "\n", "val", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "# ngram", "\n", "                ", "for", "(", "ngram", ",", "count", ")", "in", "six", ".", "iteritems", "(", "vec_hyp", "[", "n", "]", ")", ":", "\n", "# vrama91 : added clipping", "\n", "                    ", "val", "[", "n", "]", "+=", "min", "(", "vec_hyp", "[", "n", "]", "[", "ngram", "]", ",", "vec_ref", "[", "n", "]", "[", "ngram", "]", ")", "*", "vec_ref", "[", "n", "]", "[", "ngram", "]", "\n", "\n", "", "if", "(", "norm_hyp", "[", "n", "]", "!=", "0", ")", "and", "(", "norm_ref", "[", "n", "]", "!=", "0", ")", ":", "\n", "                    ", "val", "[", "n", "]", "/=", "(", "norm_hyp", "[", "n", "]", "*", "norm_ref", "[", "n", "]", ")", "\n", "\n", "", "assert", "(", "not", "math", ".", "isnan", "(", "val", "[", "n", "]", ")", ")", "\n", "# vrama91: added a length based gaussian penalty", "\n", "val", "[", "n", "]", "*=", "np", ".", "e", "**", "(", "-", "(", "delta", "**", "2", ")", "/", "(", "2", "*", "self", ".", "sigma", "**", "2", ")", ")", "\n", "", "return", "val", "\n", "\n", "# compute log reference length", "\n", "", "self", ".", "ref_len", "=", "np", ".", "log", "(", "float", "(", "len", "(", "self", ".", "crefs", ")", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "test", ",", "refs", "in", "zip", "(", "self", ".", "ctest", ",", "self", ".", "crefs", ")", ":", "\n", "# compute vector for test captions", "\n", "            ", "vec", ",", "norm", ",", "length", "=", "counts2vec", "(", "test", ")", "\n", "# compute vector for ref captions", "\n", "score", "=", "np", ".", "array", "(", "[", "0.0", "for", "_", "in", "range", "(", "self", ".", "n", ")", "]", ")", "\n", "for", "ref", "in", "refs", ":", "\n", "                ", "vec_ref", ",", "norm_ref", ",", "length_ref", "=", "counts2vec", "(", "ref", ")", "\n", "score", "+=", "sim", "(", "vec", ",", "vec_ref", ",", "norm", ",", "norm_ref", ",", "length", ",", "length_ref", ")", "\n", "# change by vrama91 - mean of ngram scores, instead of sum", "\n", "", "score_avg", "=", "np", ".", "mean", "(", "score", ")", "\n", "# divide by number of references", "\n", "score_avg", "/=", "len", "(", "refs", ")", "\n", "# multiply score by 10", "\n", "score_avg", "*=", "10.0", "\n", "# append score of an image to the score list", "\n", "scores", ".", "append", "(", "score_avg", ")", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.compute_score": [[185, 195], ["cider_scorer.CiderScorer.compute_doc_freq", "cider_scorer.CiderScorer.compute_cider", "len", "max", "numpy.mean", "numpy.array", "cider_scorer.CiderScorer.document_frequency.values", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.compute_doc_freq", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.CiderScorer.compute_cider"], ["", "def", "compute_score", "(", "self", ",", "option", "=", "None", ",", "verbose", "=", "0", ")", ":", "\n", "# compute idf", "\n", "        ", "self", ".", "compute_doc_freq", "(", ")", "\n", "# assert to check document frequency", "\n", "assert", "(", "len", "(", "self", ".", "ctest", ")", ">=", "max", "(", "self", ".", "document_frequency", ".", "values", "(", ")", ")", ")", "\n", "# compute cider score", "\n", "score", "=", "self", ".", "compute_cider", "(", ")", "\n", "# debug", "\n", "# print score", "\n", "return", "np", ".", "mean", "(", "np", ".", "array", "(", "score", ")", ")", ",", "np", ".", "array", "(", "score", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.precook": [[13, 29], ["s.split", "collections.defaultdict", "six.moves.xrange", "six.moves.xrange", "tuple", "len"], "function", ["None"], ["def", "precook", "(", "s", ",", "n", "=", "4", ",", "out", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Takes a string as input and returns an object that can be given to\n    either cook_refs or cook_test. This is optional: cook_refs and cook_test\n    can take string arguments as well.\n    :param s: string : sentence to be converted into ngrams\n    :param n: int    : number of ngrams for which representation is calculated\n    :return: term frequency vector for occuring ngrams\n    \"\"\"", "\n", "words", "=", "s", ".", "split", "(", ")", "\n", "counts", "=", "defaultdict", "(", "int", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "k", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "words", "[", "i", ":", "i", "+", "k", "]", ")", "\n", "counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_refs": [[30, 39], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.precook"], ["", "def", "cook_refs", "(", "refs", ",", "n", "=", "4", ")", ":", "## lhuang: oracle will call with \"average\"", "\n", "    ", "'''Takes a list of reference sentences for a single segment\n    and returns an object that encapsulates everything that BLEU\n    needs to know about them.\n    :param refs: list of string : reference sentences for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (list of dict)\n    '''", "\n", "return", "[", "precook", "(", "ref", ",", "n", ")", "for", "ref", "in", "refs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.cook_test": [[40, 48], ["cider_scorer.precook"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider_scorer.precook"], ["", "def", "cook_test", "(", "test", ",", "n", "=", "4", ")", ":", "\n", "    ", "'''Takes a test sentence and returns an object that\n    encapsulates everything that BLEU needs to know about it.\n    :param test: list of string : hypothesis sentence for some image\n    :param n: int : number of ngrams for which (ngram) representation is calculated\n    :return: result (dict)\n    '''", "\n", "return", "precook", "(", "test", ",", "n", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.__init__": [[18, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "test", "=", "None", ",", "refs", "=", "None", ",", "n", "=", "4", ",", "sigma", "=", "6.0", ")", ":", "\n", "# set cider to sum over 1 to 4-grams", "\n", "        ", "self", ".", "_n", "=", "n", "\n", "# set the standard deviation parameter for gaussian penalty", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score": [[24, 52], ["gts.keys", "cider_scorer.CiderScorer.CiderScorer", "cider_scorer.CiderScorer.CiderScorer.compute_score", "gts.keys", "res.keys", "type", "len", "type", "len"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.compute_score"], ["", "def", "compute_score", "(", "self", ",", "gts", ",", "res", ")", ":", "\n", "        ", "\"\"\"\n        Main function to compute CIDEr score\n        :param  hypo_for_image (dict) : dictionary with key <image> and value <tokenized hypothesis / candidate sentence>\n                ref_for_image (dict)  : dictionary with key <image> and value <tokenized reference sentence>\n        :return: cider (float) : computed CIDEr score for the corpus \n        \"\"\"", "\n", "\n", "assert", "(", "gts", ".", "keys", "(", ")", "==", "res", ".", "keys", "(", ")", ")", "\n", "imgIds", "=", "gts", ".", "keys", "(", ")", "\n", "\n", "cider_scorer", "=", "CiderScorer", "(", "n", "=", "self", ".", "_n", ",", "sigma", "=", "self", ".", "_sigma", ")", "\n", "\n", "for", "id", "in", "imgIds", ":", "\n", "            ", "hypo", "=", "res", "[", "id", "]", "\n", "ref", "=", "gts", "[", "id", "]", "\n", "\n", "# Sanity check.", "\n", "assert", "(", "type", "(", "hypo", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "hypo", ")", "==", "1", ")", "\n", "assert", "(", "type", "(", "ref", ")", "is", "list", ")", "\n", "assert", "(", "len", "(", "ref", ")", ">", "0", ")", "\n", "\n", "cider_scorer", "+=", "(", "hypo", "[", "0", "]", ",", "ref", ")", "\n", "\n", "", "(", "score", ",", "scores", ")", "=", "cider_scorer", ".", "compute_score", "(", ")", "\n", "\n", "return", "score", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.cider.cider.Cider.method": [[53, 55], ["None"], "methods", ["None"], ["", "def", "method", "(", "self", ")", ":", "\n", "        ", "return", "\"CIDEr\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.Encoder.__init__": [[96, 98], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "      ", "self", ".", "_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.Encoder.encode": [[99, 104], ["skipthoughts.Encoder.encode"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], ["", "def", "encode", "(", "self", ",", "X", ",", "use_norm", "=", "True", ",", "verbose", "=", "True", ",", "batch_size", "=", "128", ",", "use_eos", "=", "False", ")", ":", "\n", "      ", "\"\"\"\n      Encode sentences in the list X. Each entry will return a vector\n      \"\"\"", "\n", "return", "encode", "(", "self", ".", "_model", ",", "X", ",", "use_norm", ",", "verbose", ",", "batch_size", ",", "use_eos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_model": [[32, 73], ["skipthoughts.init_params", "skipthoughts.load_params", "skipthoughts.init_tparams", "skipthoughts.init_params_bi", "skipthoughts.load_params", "skipthoughts.init_tparams", "skipthoughts.build_encoder", "theano.function", "theano.function", "skipthoughts.build_encoder_bi", "theano.function", "theano.function", "skipthoughts.load_tables", "open", "six.moves.cPickle.load", "open", "six.moves.cPickle.load"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_params", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_params", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_tparams", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_params_bi", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_params", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_tparams", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.build_encoder", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.build_encoder_bi", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_tables"], ["def", "load_model", "(", ")", ":", "\n", "    ", "\"\"\"\n    Load the model with saved tables\n    \"\"\"", "\n", "# Load model options", "\n", "# print 'Loading model parameters...'", "\n", "with", "open", "(", "'%s.pkl'", "%", "path_to_umodel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "uoptions", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "'%s.pkl'", "%", "path_to_bmodel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "boptions", "=", "pkl", ".", "load", "(", "f", ")", "\n", "\n", "# Load parameters", "\n", "", "uparams", "=", "init_params", "(", "uoptions", ")", "\n", "uparams", "=", "load_params", "(", "path_to_umodel", ",", "uparams", ")", "\n", "utparams", "=", "init_tparams", "(", "uparams", ")", "\n", "bparams", "=", "init_params_bi", "(", "boptions", ")", "\n", "bparams", "=", "load_params", "(", "path_to_bmodel", ",", "bparams", ")", "\n", "btparams", "=", "init_tparams", "(", "bparams", ")", "\n", "\n", "# Extractor functions", "\n", "# print 'Compiling encoders...'", "\n", "embedding", ",", "x_mask", ",", "ctxw2v", "=", "build_encoder", "(", "utparams", ",", "uoptions", ")", "\n", "f_w2v", "=", "theano", ".", "function", "(", "[", "embedding", ",", "x_mask", "]", ",", "ctxw2v", ",", "name", "=", "'f_w2v'", ")", "\n", "embedding", ",", "x_mask", ",", "ctxw2v", "=", "build_encoder_bi", "(", "btparams", ",", "boptions", ")", "\n", "f_w2v2", "=", "theano", ".", "function", "(", "[", "embedding", ",", "x_mask", "]", ",", "ctxw2v", ",", "name", "=", "'f_w2v2'", ")", "\n", "\n", "# Tables", "\n", "# print 'Loading tables...'", "\n", "utable", ",", "btable", "=", "load_tables", "(", ")", "\n", "\n", "# Store everything we need in a dictionary", "\n", "# print 'Packing up...'", "\n", "model", "=", "{", "}", "\n", "model", "[", "'uoptions'", "]", "=", "uoptions", "\n", "model", "[", "'boptions'", "]", "=", "boptions", "\n", "model", "[", "'utable'", "]", "=", "utable", "\n", "model", "[", "'btable'", "]", "=", "btable", "\n", "model", "[", "'f_w2v'", "]", "=", "f_w2v", "\n", "model", "[", "'f_w2v2'", "]", "=", "f_w2v2", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_tables": [[75, 89], ["numpy.load", "numpy.load", "open", "open.close", "collections.OrderedDict", "collections.OrderedDict", "os.path.join", "os.path.join", "os.path.join", "words.append", "zip", "zip", "line.decode().strip", "line.decode"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.meteor.meteor.Meteor.close"], ["", "def", "load_tables", "(", ")", ":", "\n", "    ", "\"\"\"\n    Load the tables\n    \"\"\"", "\n", "words", "=", "[", "]", "\n", "utable", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path_to_tables", ",", "'utable.npy'", ")", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", "\n", "btable", "=", "numpy", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path_to_tables", ",", "'btable.npy'", ")", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "path_to_tables", ",", "'dictionary.txt'", ")", ",", "'rb'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "words", ".", "append", "(", "line", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "utable", "=", "OrderedDict", "(", "zip", "(", "words", ",", "utable", ")", ")", "\n", "btable", "=", "OrderedDict", "(", "zip", "(", "words", ",", "btable", ")", ")", "\n", "return", "utable", ",", "btable", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode": [[106, 168], ["skipthoughts.preprocess", "collections.defaultdict", "model[].keys", "numpy.zeros", "numpy.zeros", "collections.defaultdict", "enumerate", "collections.defaultdict.keys", "s.split", "ds[].append", "int", "range", "len", "len", "print", "enumerate", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "len", "len", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "len", "scipy.linalg.norm", "scipy.linalg.norm", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.preprocess"], ["", "", "def", "encode", "(", "model", ",", "X", ",", "use_norm", "=", "True", ",", "verbose", "=", "True", ",", "batch_size", "=", "128", ",", "use_eos", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Encode sentences in the list X. Each entry will return a vector\n    \"\"\"", "\n", "# first, do preprocessing", "\n", "X", "=", "preprocess", "(", "X", ")", "\n", "\n", "# word dictionary and init", "\n", "d", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "w", "in", "model", "[", "'utable'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "d", "[", "w", "]", "=", "1", "\n", "", "ufeatures", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "X", ")", ",", "model", "[", "'uoptions'", "]", "[", "'dim'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "bfeatures", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "X", ")", ",", "2", "*", "model", "[", "'boptions'", "]", "[", "'dim'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# length dictionary", "\n", "ds", "=", "defaultdict", "(", "list", ")", "\n", "captions", "=", "[", "s", ".", "split", "(", ")", "for", "s", "in", "X", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "captions", ")", ":", "\n", "        ", "ds", "[", "len", "(", "s", ")", "]", ".", "append", "(", "i", ")", "\n", "\n", "# Get features. This encodes by length, in order to avoid wasting computation", "\n", "", "for", "k", "in", "ds", ".", "keys", "(", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "k", ")", "\n", "", "numbatches", "=", "int", "(", "len", "(", "ds", "[", "k", "]", ")", "/", "batch_size", "+", "1", ")", "\n", "for", "minibatch", "in", "range", "(", "numbatches", ")", ":", "\n", "            ", "caps", "=", "ds", "[", "k", "]", "[", "minibatch", ":", ":", "numbatches", "]", "\n", "\n", "if", "use_eos", ":", "\n", "                ", "uembedding", "=", "numpy", ".", "zeros", "(", "(", "k", "+", "1", ",", "len", "(", "caps", ")", ",", "model", "[", "'uoptions'", "]", "[", "'dim_word'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "bembedding", "=", "numpy", ".", "zeros", "(", "(", "k", "+", "1", ",", "len", "(", "caps", ")", ",", "model", "[", "'boptions'", "]", "[", "'dim_word'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "", "else", ":", "\n", "                ", "uembedding", "=", "numpy", ".", "zeros", "(", "(", "k", ",", "len", "(", "caps", ")", ",", "model", "[", "'uoptions'", "]", "[", "'dim_word'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "bembedding", "=", "numpy", ".", "zeros", "(", "(", "k", ",", "len", "(", "caps", ")", ",", "model", "[", "'boptions'", "]", "[", "'dim_word'", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", "", "for", "ind", ",", "c", "in", "enumerate", "(", "caps", ")", ":", "\n", "                ", "caption", "=", "captions", "[", "c", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "caption", ")", ")", ":", "\n", "                    ", "if", "d", "[", "caption", "[", "j", "]", "]", ">", "0", ":", "\n", "                        ", "uembedding", "[", "j", ",", "ind", "]", "=", "model", "[", "'utable'", "]", "[", "caption", "[", "j", "]", "]", "\n", "bembedding", "[", "j", ",", "ind", "]", "=", "model", "[", "'btable'", "]", "[", "caption", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                        ", "uembedding", "[", "j", ",", "ind", "]", "=", "model", "[", "'utable'", "]", "[", "'UNK'", "]", "\n", "bembedding", "[", "j", ",", "ind", "]", "=", "model", "[", "'btable'", "]", "[", "'UNK'", "]", "\n", "", "", "if", "use_eos", ":", "\n", "                    ", "uembedding", "[", "-", "1", ",", "ind", "]", "=", "model", "[", "'utable'", "]", "[", "'<eos>'", "]", "\n", "bembedding", "[", "-", "1", ",", "ind", "]", "=", "model", "[", "'btable'", "]", "[", "'<eos>'", "]", "\n", "", "", "if", "use_eos", ":", "\n", "                ", "uff", "=", "model", "[", "'f_w2v'", "]", "(", "uembedding", ",", "numpy", ".", "ones", "(", "(", "len", "(", "caption", ")", "+", "1", ",", "len", "(", "caps", ")", ")", ",", "dtype", "=", "'float32'", ")", ")", "\n", "bff", "=", "model", "[", "'f_w2v2'", "]", "(", "bembedding", ",", "numpy", ".", "ones", "(", "(", "len", "(", "caption", ")", "+", "1", ",", "len", "(", "caps", ")", ")", ",", "dtype", "=", "'float32'", ")", ")", "\n", "", "else", ":", "\n", "                ", "uff", "=", "model", "[", "'f_w2v'", "]", "(", "uembedding", ",", "numpy", ".", "ones", "(", "(", "len", "(", "caption", ")", ",", "len", "(", "caps", ")", ")", ",", "dtype", "=", "'float32'", ")", ")", "\n", "bff", "=", "model", "[", "'f_w2v2'", "]", "(", "bembedding", ",", "numpy", ".", "ones", "(", "(", "len", "(", "caption", ")", ",", "len", "(", "caps", ")", ")", ",", "dtype", "=", "'float32'", ")", ")", "\n", "", "if", "use_norm", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "uff", ")", ")", ":", "\n", "                    ", "uff", "[", "j", "]", "/=", "norm", "(", "uff", "[", "j", "]", ")", "\n", "bff", "[", "j", "]", "/=", "norm", "(", "bff", "[", "j", "]", ")", "\n", "", "", "for", "ind", ",", "c", "in", "enumerate", "(", "caps", ")", ":", "\n", "                ", "ufeatures", "[", "c", "]", "=", "uff", "[", "ind", "]", "\n", "bfeatures", "[", "c", "]", "=", "bff", "[", "ind", "]", "\n", "\n", "", "", "", "features", "=", "numpy", ".", "c_", "[", "ufeatures", ",", "bfeatures", "]", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.preprocess": [[170, 184], ["nltk.data.load", "nltk.data.load.tokenize", "X.append", "nltk.tokenize.word_tokenize"], "function", ["None"], ["", "def", "preprocess", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Preprocess text for encoder\n    \"\"\"", "\n", "X", "=", "[", "]", "\n", "sent_detector", "=", "nltk", ".", "data", ".", "load", "(", "'tokenizers/punkt/english.pickle'", ")", "\n", "for", "t", "in", "text", ":", "\n", "        ", "sents", "=", "sent_detector", ".", "tokenize", "(", "t", ")", "\n", "result", "=", "''", "\n", "for", "s", "in", "sents", ":", "\n", "            ", "tokens", "=", "word_tokenize", "(", "s", ")", "\n", "result", "+=", "' '", "+", "' '", ".", "join", "(", "tokens", ")", "\n", "", "X", ".", "append", "(", "result", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.nn": [[186, 202], ["skipthoughts.encode", "scipy.linalg.norm", "numpy.dot().flatten", "print", "print", "enumerate", "numpy.argsort", "print", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.encode"], ["", "def", "nn", "(", "model", ",", "text", ",", "vectors", ",", "query", ",", "k", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Return the nearest neighbour sentences to query\n    text: list of sentences\n    vectors: the corresponding representations for text\n    query: a string to search\n    \"\"\"", "\n", "qf", "=", "encode", "(", "model", ",", "[", "query", "]", ")", "\n", "qf", "/=", "norm", "(", "qf", ")", "\n", "scores", "=", "numpy", ".", "dot", "(", "qf", ",", "vectors", ".", "T", ")", ".", "flatten", "(", ")", "\n", "sorted_args", "=", "numpy", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "sentences", "=", "[", "text", "[", "a", "]", "for", "a", "in", "sorted_args", "[", ":", "k", "]", "]", "\n", "print", "(", "'QUERY: '", "+", "query", ")", "\n", "print", "(", "'NEAREST: '", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sentences", ")", ":", "\n", "        ", "print", "(", "s", ",", "sorted_args", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.word_features": [[204, 214], ["numpy.zeros", "table.keys", "range", "len", "len", "scipy.linalg.norm"], "function", ["None"], ["", "", "def", "word_features", "(", "table", ")", ":", "\n", "    ", "\"\"\"\n    Extract word features into a normalized matrix\n    \"\"\"", "\n", "features", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "table", ")", ",", "620", ")", ",", "dtype", "=", "'float32'", ")", "\n", "keys", "=", "table", ".", "keys", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "table", ")", ")", ":", "\n", "        ", "f", "=", "table", "[", "keys", "[", "i", "]", "]", "\n", "features", "[", "i", "]", "=", "f", "/", "norm", "(", "f", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.nn_words": [[216, 229], ["table.keys", "numpy.dot().flatten", "print", "print", "enumerate", "numpy.argsort", "print", "numpy.dot"], "function", ["None"], ["", "def", "nn_words", "(", "table", ",", "wordvecs", ",", "query", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Get the nearest neighbour words\n    \"\"\"", "\n", "keys", "=", "table", ".", "keys", "(", ")", "\n", "qf", "=", "table", "[", "query", "]", "\n", "scores", "=", "numpy", ".", "dot", "(", "qf", ",", "wordvecs", ".", "T", ")", ".", "flatten", "(", ")", "\n", "sorted_args", "=", "numpy", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "words", "=", "[", "keys", "[", "a", "]", "for", "a", "in", "sorted_args", "[", ":", "k", "]", "]", "\n", "print", "(", "'QUERY: '", "+", "query", ")", "\n", "print", "(", "'NEAREST: '", ")", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "print", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p": [[231, 236], ["None"], "function", ["None"], ["", "", "def", "_p", "(", "pp", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    make prefix-appended name\n    \"\"\"", "\n", "return", "'%s_%s'", "%", "(", "pp", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_tparams": [[238, 246], ["collections.OrderedDict", "six.iteritems", "theano.shared", "theano.shared"], "function", ["None"], ["", "def", "init_tparams", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    initialize Theano shared variables according to the initial parameters\n    \"\"\"", "\n", "tparams", "=", "OrderedDict", "(", ")", "\n", "for", "kk", ",", "pp", "in", "six", ".", "iteritems", "(", "params", ")", ":", "\n", "        ", "tparams", "[", "kk", "]", "=", "theano", ".", "shared", "(", "params", "[", "kk", "]", ",", "name", "=", "kk", ")", "\n", "", "return", "tparams", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.load_params": [[248, 259], ["numpy.load", "six.iteritems", "logging.warning"], "function", ["None"], ["", "def", "load_params", "(", "path", ",", "params", ")", ":", "\n", "    ", "\"\"\"\n    load parameters\n    \"\"\"", "\n", "pp", "=", "numpy", ".", "load", "(", "path", ")", "\n", "for", "kk", ",", "vv", "in", "six", ".", "iteritems", "(", "params", ")", ":", "\n", "        ", "if", "kk", "not", "in", "pp", ":", "\n", "            ", "logging", ".", "warning", "(", "'%s is not in the archive'", ",", "kk", ")", "\n", "continue", "\n", "", "params", "[", "kk", "]", "=", "pp", "[", "kk", "]", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer": [[264, 267], ["eval", "eval"], "function", ["None"], ["def", "get_layer", "(", "name", ")", ":", "\n", "    ", "fns", "=", "layers", "[", "name", "]", "\n", "return", "(", "eval", "(", "fns", "[", "0", "]", ")", ",", "eval", "(", "fns", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_params": [[269, 282], ["collections.OrderedDict", "skipthoughts.norm_weight", "skipthoughts.get_layer"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer"], ["", "def", "init_params", "(", "options", ")", ":", "\n", "    ", "\"\"\"\n    initialize all parameters needed for the encoder\n    \"\"\"", "\n", "params", "=", "OrderedDict", "(", ")", "\n", "\n", "# embedding", "\n", "params", "[", "'Wemb'", "]", "=", "norm_weight", "(", "options", "[", "'n_words_src'", "]", ",", "options", "[", "'dim_word'", "]", ")", "\n", "\n", "# encoder: GRU", "\n", "params", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "0", "]", "(", "options", ",", "params", ",", "prefix", "=", "'encoder'", ",", "\n", "nin", "=", "options", "[", "'dim_word'", "]", ",", "dim", "=", "options", "[", "'dim'", "]", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.init_params_bi": [[284, 299], ["collections.OrderedDict", "skipthoughts.norm_weight", "skipthoughts.get_layer", "skipthoughts.get_layer"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer"], ["", "def", "init_params_bi", "(", "options", ")", ":", "\n", "    ", "\"\"\"\n    initialize all paramters needed for bidirectional encoder\n    \"\"\"", "\n", "params", "=", "OrderedDict", "(", ")", "\n", "\n", "# embedding", "\n", "params", "[", "'Wemb'", "]", "=", "norm_weight", "(", "options", "[", "'n_words_src'", "]", ",", "options", "[", "'dim_word'", "]", ")", "\n", "\n", "# encoder: GRU", "\n", "params", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "0", "]", "(", "options", ",", "params", ",", "prefix", "=", "'encoder'", ",", "\n", "nin", "=", "options", "[", "'dim_word'", "]", ",", "dim", "=", "options", "[", "'dim'", "]", ")", "\n", "params", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "0", "]", "(", "options", ",", "params", ",", "prefix", "=", "'encoder_r'", ",", "\n", "nin", "=", "options", "[", "'dim_word'", "]", ",", "dim", "=", "options", "[", "'dim'", "]", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.build_encoder": [[301, 316], ["theano.tensor3", "theano.matrix", "skipthoughts.get_layer"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer"], ["", "def", "build_encoder", "(", "tparams", ",", "options", ")", ":", "\n", "    ", "\"\"\"\n    build an encoder, given pre-computed word embeddings\n    \"\"\"", "\n", "# word embedding (source)", "\n", "embedding", "=", "tensor", ".", "tensor3", "(", "'embedding'", ",", "dtype", "=", "'float32'", ")", "\n", "x_mask", "=", "tensor", ".", "matrix", "(", "'x_mask'", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "# encoder", "\n", "proj", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "1", "]", "(", "tparams", ",", "embedding", ",", "options", ",", "\n", "prefix", "=", "'encoder'", ",", "\n", "mask", "=", "x_mask", ")", "\n", "ctx", "=", "proj", "[", "0", "]", "[", "-", "1", "]", "\n", "\n", "return", "embedding", ",", "x_mask", ",", "ctx", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.build_encoder_bi": [[318, 339], ["theano.tensor3", "theano.matrix", "theano.concatenate", "skipthoughts.get_layer", "skipthoughts.get_layer"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.get_layer"], ["", "def", "build_encoder_bi", "(", "tparams", ",", "options", ")", ":", "\n", "    ", "\"\"\"\n    build bidirectional encoder, given pre-computed word embeddings\n    \"\"\"", "\n", "# word embedding (source)", "\n", "embedding", "=", "tensor", ".", "tensor3", "(", "'embedding'", ",", "dtype", "=", "'float32'", ")", "\n", "embeddingr", "=", "embedding", "[", ":", ":", "-", "1", "]", "\n", "x_mask", "=", "tensor", ".", "matrix", "(", "'x_mask'", ",", "dtype", "=", "'float32'", ")", "\n", "xr_mask", "=", "x_mask", "[", ":", ":", "-", "1", "]", "\n", "\n", "# encoder", "\n", "proj", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "1", "]", "(", "tparams", ",", "embedding", ",", "options", ",", "\n", "prefix", "=", "'encoder'", ",", "\n", "mask", "=", "x_mask", ")", "\n", "projr", "=", "get_layer", "(", "options", "[", "'encoder'", "]", ")", "[", "1", "]", "(", "tparams", ",", "embeddingr", ",", "options", ",", "\n", "prefix", "=", "'encoder_r'", ",", "\n", "mask", "=", "xr_mask", ")", "\n", "\n", "ctx", "=", "tensor", ".", "concatenate", "(", "[", "proj", "[", "0", "]", "[", "-", "1", "]", ",", "projr", "[", "0", "]", "[", "-", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "embedding", ",", "x_mask", ",", "ctx", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.ortho_weight": [[342, 346], ["numpy.random.randn", "numpy.linalg.svd", "u.astype"], "function", ["None"], ["", "def", "ortho_weight", "(", "ndim", ")", ":", "\n", "    ", "W", "=", "numpy", ".", "random", ".", "randn", "(", "ndim", ",", "ndim", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "W", ")", "\n", "return", "u", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight": [[348, 356], ["numpy.random.uniform.astype", "skipthoughts.ortho_weight", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.ortho_weight"], ["", "def", "norm_weight", "(", "nin", ",", "nout", "=", "None", ",", "scale", "=", "0.1", ",", "ortho", "=", "True", ")", ":", "\n", "    ", "if", "nout", "==", "None", ":", "\n", "        ", "nout", "=", "nin", "\n", "", "if", "nout", "==", "nin", "and", "ortho", ":", "\n", "        ", "W", "=", "ortho_weight", "(", "nin", ")", "\n", "", "else", ":", "\n", "        ", "W", "=", "numpy", ".", "random", ".", "uniform", "(", "low", "=", "-", "scale", ",", "high", "=", "scale", ",", "size", "=", "(", "nin", ",", "nout", ")", ")", "\n", "", "return", "W", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.param_init_gru": [[358, 381], ["numpy.concatenate", "numpy.zeros().astype", "numpy.concatenate", "skipthoughts.norm_weight", "skipthoughts.ortho_weight", "numpy.zeros().astype", "skipthoughts.norm_weight", "skipthoughts.norm_weight", "skipthoughts._p", "skipthoughts._p", "numpy.zeros", "skipthoughts.ortho_weight", "skipthoughts.ortho_weight", "skipthoughts._p", "skipthoughts._p", "skipthoughts._p", "skipthoughts._p", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.ortho_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.norm_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.ortho_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.ortho_weight", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p"], ["", "def", "param_init_gru", "(", "options", ",", "params", ",", "prefix", "=", "'gru'", ",", "nin", "=", "None", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    parameter init for GRU\n    \"\"\"", "\n", "if", "nin", "==", "None", ":", "\n", "        ", "nin", "=", "options", "[", "'dim_proj'", "]", "\n", "", "if", "dim", "==", "None", ":", "\n", "        ", "dim", "=", "options", "[", "'dim_proj'", "]", "\n", "", "W", "=", "numpy", ".", "concatenate", "(", "[", "norm_weight", "(", "nin", ",", "dim", ")", ",", "\n", "norm_weight", "(", "nin", ",", "dim", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", "=", "W", "\n", "params", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "2", "*", "dim", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "U", "=", "numpy", ".", "concatenate", "(", "[", "ortho_weight", "(", "dim", ")", ",", "\n", "ortho_weight", "(", "dim", ")", "]", ",", "axis", "=", "1", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", "=", "U", "\n", "\n", "Wx", "=", "norm_weight", "(", "nin", ",", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", "=", "Wx", "\n", "Ux", "=", "ortho_weight", "(", "dim", ")", "\n", "params", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "=", "Ux", "\n", "params", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "=", "numpy", ".", "zeros", "(", "(", "dim", ",", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts.gru_layer": [[383, 440], ["theano.scan", "theano.scan", "theano.alloc", "theano.dot", "theano.dot", "theano.dot", "theano.nnet.sigmoid", "theano.nnet.sigmoid", "theano.dot", "theano.tanh", "skipthoughts._p", "skipthoughts._p", "skipthoughts.gru_layer._slice"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.skipthoughts.skipthoughts._p"], ["", "def", "gru_layer", "(", "tparams", ",", "state_below", ",", "options", ",", "prefix", "=", "'gru'", ",", "mask", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Forward pass through GRU layer\n    \"\"\"", "\n", "nsteps", "=", "state_below", ".", "shape", "[", "0", "]", "\n", "if", "state_below", ".", "ndim", "==", "3", ":", "\n", "        ", "n_samples", "=", "state_below", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "n_samples", "=", "1", "\n", "\n", "", "dim", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", ".", "shape", "[", "1", "]", "\n", "\n", "if", "mask", "==", "None", ":", "\n", "        ", "mask", "=", "tensor", ".", "alloc", "(", "1.", ",", "state_below", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "", "def", "_slice", "(", "_x", ",", "n", ",", "dim", ")", ":", "\n", "        ", "if", "_x", ".", "ndim", "==", "3", ":", "\n", "            ", "return", "_x", "[", ":", ",", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "", "return", "_x", "[", ":", ",", "n", "*", "dim", ":", "(", "n", "+", "1", ")", "*", "dim", "]", "\n", "\n", "", "state_below_", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'W'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'b'", ")", "]", "\n", "state_belowx", "=", "tensor", ".", "dot", "(", "state_below", ",", "tparams", "[", "_p", "(", "prefix", ",", "'Wx'", ")", "]", ")", "+", "tparams", "[", "_p", "(", "prefix", ",", "'bx'", ")", "]", "\n", "U", "=", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", "\n", "Ux", "=", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "\n", "\n", "def", "_step_slice", "(", "m_", ",", "x_", ",", "xx_", ",", "h_", ",", "U", ",", "Ux", ")", ":", "\n", "        ", "preact", "=", "tensor", ".", "dot", "(", "h_", ",", "U", ")", "\n", "preact", "+=", "x_", "\n", "\n", "r", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "_slice", "(", "preact", ",", "0", ",", "dim", ")", ")", "\n", "u", "=", "tensor", ".", "nnet", ".", "sigmoid", "(", "_slice", "(", "preact", ",", "1", ",", "dim", ")", ")", "\n", "\n", "preactx", "=", "tensor", ".", "dot", "(", "h_", ",", "Ux", ")", "\n", "preactx", "=", "preactx", "*", "r", "\n", "preactx", "=", "preactx", "+", "xx_", "\n", "\n", "h", "=", "tensor", ".", "tanh", "(", "preactx", ")", "\n", "\n", "h", "=", "u", "*", "h_", "+", "(", "1.", "-", "u", ")", "*", "h", "\n", "h", "=", "m_", "[", ":", ",", "None", "]", "*", "h", "+", "(", "1.", "-", "m_", ")", "[", ":", ",", "None", "]", "*", "h_", "\n", "\n", "return", "h", "\n", "\n", "", "seqs", "=", "[", "mask", ",", "state_below_", ",", "state_belowx", "]", "\n", "_step", "=", "_step_slice", "\n", "\n", "rval", ",", "updates", "=", "theano", ".", "scan", "(", "_step", ",", "\n", "sequences", "=", "seqs", ",", "\n", "outputs_info", "=", "[", "tensor", ".", "alloc", "(", "0.", ",", "n_samples", ",", "dim", ")", "]", ",", "\n", "non_sequences", "=", "[", "tparams", "[", "_p", "(", "prefix", ",", "'U'", ")", "]", ",", "\n", "tparams", "[", "_p", "(", "prefix", ",", "'Ux'", ")", "]", "]", ",", "\n", "name", "=", "_p", "(", "prefix", ",", "'_layers'", ")", ",", "\n", "n_steps", "=", "nsteps", ",", "\n", "profile", "=", "profile", ",", "\n", "strict", "=", "True", ")", "\n", "rval", "=", "[", "rval", "]", "\n", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.__init__": [[16, 23], ["nlgeval.utils.get_data_dir", "KeyedVectors.load", "os.path.join", "evaluate.Embedding.m.vectors.mean", "evaluate.Embedding.m.syn0.mean"], "methods", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.nlgeval.utils.get_data_dir"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "path", "=", "get_data_dir", "(", ")", "\n", "self", ".", "m", "=", "KeyedVectors", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'glove.6B.300d.model.bin'", ")", ",", "mmap", "=", "'r'", ")", "\n", "try", ":", "\n", "            ", "self", ".", "unk", "=", "self", ".", "m", ".", "vectors", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "self", ".", "unk", "=", "self", ".", "m", ".", "syn0", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.w2v": [[24, 27], ["numpy.concatenate"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "w2v", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "(", "self", ".", "m", ".", "syn0", ",", "self", ".", "unk", "[", "None", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.__getitem__": [[28, 33], ["len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "m", ".", "vocab", "[", "key", "]", ".", "index", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "len", "(", "self", ".", "m", ".", "syn0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.vec": [[34, 43], ["None"], "methods", ["None"], ["", "", "def", "vec", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "vectors", "=", "self", ".", "m", ".", "vectors", "\n", "", "except", "AttributeError", ":", "\n", "            ", "vectors", "=", "self", ".", "m", ".", "syn0", "\n", "", "try", ":", "\n", "            ", "return", "vectors", "[", "self", ".", "m", ".", "vocab", "[", "key", "]", ".", "index", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "return", "self", ".", "unk", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.eval_emb_metrics": [[45, 128], ["evaluate.Embedding", "set", "numpy.max", "numpy.min", "list", "emb_hyps.append", "avg_emb_hyps.append", "extreme_emb_hyps.append", "emb_refs.append", "avg_emb_refs.append", "extreme_emb_refs.append", "list", "numpy.max().mean", "rval.append", "rval.append", "list", "numpy.max().mean", "rval.append", "numpy.max().mean", "rval.append", "set.remove", "set.add", "evaluate.Embedding.vec", "numpy.sum", "numpy.linalg.norm", "numpy.any", "map", "numpy.max", "numpy.min", "list", "emb_refsource.append", "avg_emb_refsource.append", "extreme_emb_refsource.append", "map", "map", "zip", "np.max().mean.append", "word_tokenize", "numpy.sum", "numpy.isnan", "evaluate.Embedding.vec", "numpy.sum", "numpy.linalg.norm", "numpy.any", "map", "numpy.max", "numpy.max", "cosine_similarity", "cosine_similarity.max().mean", "cosine_similarity.max().mean", "score_source.append", "numpy.max", "word_tokenize", "numpy.sum", "numpy.isnan", "cosine_similarity().diagonal", "cosine_similarity().diagonal", "cosine_similarity.max", "cosine_similarity.max", "cosine_similarity", "cosine_similarity"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.vec", "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.evaluate.Embedding.vec"], ["", "", "", "def", "eval_emb_metrics", "(", "hypothesis", ",", "references", ",", "emb", "=", "None", ",", "metrics_to_omit", "=", "None", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", ".", "pairwise", "import", "cosine_similarity", "\n", "from", "nltk", ".", "tokenize", "import", "word_tokenize", "\n", "import", "numpy", "as", "np", "\n", "if", "emb", "is", "None", ":", "\n", "        ", "emb", "=", "Embedding", "(", ")", "\n", "\n", "", "if", "metrics_to_omit", "is", "None", ":", "\n", "        ", "metrics_to_omit", "=", "set", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "'EmbeddingAverageCosineSimilairty'", "in", "metrics_to_omit", ":", "\n", "            ", "metrics_to_omit", ".", "remove", "(", "'EmbeddingAverageCosineSimilairty'", ")", "\n", "metrics_to_omit", ".", "add", "(", "'EmbeddingAverageCosineSimilarity'", ")", "\n", "\n", "", "", "emb_hyps", "=", "[", "]", "\n", "avg_emb_hyps", "=", "[", "]", "\n", "extreme_emb_hyps", "=", "[", "]", "\n", "for", "hyp", "in", "hypothesis", ":", "\n", "        ", "embs", "=", "[", "emb", ".", "vec", "(", "word", ")", "for", "word", "in", "word_tokenize", "(", "hyp", ")", "]", "\n", "\n", "avg_emb", "=", "np", ".", "sum", "(", "embs", ",", "axis", "=", "0", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "sum", "(", "embs", ",", "axis", "=", "0", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "avg_emb", ")", ")", "\n", "\n", "maxemb", "=", "np", ".", "max", "(", "embs", ",", "axis", "=", "0", ")", "\n", "minemb", "=", "np", ".", "min", "(", "embs", ",", "axis", "=", "0", ")", "\n", "extreme_emb", "=", "list", "(", "map", "(", "lambda", "x", ",", "y", ":", "x", "if", "(", "(", "x", ">", "y", "or", "x", "<", "-", "y", ")", "and", "y", ">", "0", ")", "or", "(", "(", "x", "<", "y", "or", "x", ">", "-", "y", ")", "and", "y", "<", "0", ")", "else", "y", ",", "maxemb", ",", "minemb", ")", ")", "\n", "\n", "emb_hyps", ".", "append", "(", "embs", ")", "\n", "avg_emb_hyps", ".", "append", "(", "avg_emb", ")", "\n", "extreme_emb_hyps", ".", "append", "(", "extreme_emb", ")", "\n", "\n", "", "emb_refs", "=", "[", "]", "\n", "avg_emb_refs", "=", "[", "]", "\n", "extreme_emb_refs", "=", "[", "]", "\n", "for", "refsource", "in", "references", ":", "\n", "        ", "emb_refsource", "=", "[", "]", "\n", "avg_emb_refsource", "=", "[", "]", "\n", "extreme_emb_refsource", "=", "[", "]", "\n", "for", "ref", "in", "refsource", ":", "\n", "            ", "embs", "=", "[", "emb", ".", "vec", "(", "word", ")", "for", "word", "in", "word_tokenize", "(", "ref", ")", "]", "\n", "\n", "avg_emb", "=", "np", ".", "sum", "(", "embs", ",", "axis", "=", "0", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "sum", "(", "embs", ",", "axis", "=", "0", ")", ")", "\n", "assert", "not", "np", ".", "any", "(", "np", ".", "isnan", "(", "avg_emb", ")", ")", "\n", "\n", "maxemb", "=", "np", ".", "max", "(", "embs", ",", "axis", "=", "0", ")", "\n", "minemb", "=", "np", ".", "min", "(", "embs", ",", "axis", "=", "0", ")", "\n", "extreme_emb", "=", "list", "(", "map", "(", "lambda", "x", ",", "y", ":", "x", "if", "(", "(", "x", ">", "y", "or", "x", "<", "-", "y", ")", "and", "y", ">", "0", ")", "or", "(", "(", "x", "<", "y", "or", "x", ">", "-", "y", ")", "and", "y", "<", "0", ")", "else", "y", ",", "maxemb", ",", "minemb", ")", ")", "\n", "\n", "emb_refsource", ".", "append", "(", "embs", ")", "\n", "avg_emb_refsource", ".", "append", "(", "avg_emb", ")", "\n", "extreme_emb_refsource", ".", "append", "(", "extreme_emb", ")", "\n", "", "emb_refs", ".", "append", "(", "emb_refsource", ")", "\n", "avg_emb_refs", ".", "append", "(", "avg_emb_refsource", ")", "\n", "extreme_emb_refs", ".", "append", "(", "extreme_emb_refsource", ")", "\n", "\n", "", "rval", "=", "[", "]", "\n", "if", "'EmbeddingAverageCosineSimilarity'", "not", "in", "metrics_to_omit", ":", "\n", "        ", "cos_similarity", "=", "list", "(", "map", "(", "lambda", "refv", ":", "cosine_similarity", "(", "refv", ",", "avg_emb_hyps", ")", ".", "diagonal", "(", ")", ",", "avg_emb_refs", ")", ")", "\n", "cos_similarity", "=", "np", ".", "max", "(", "cos_similarity", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "rval", ".", "append", "(", "\"EmbeddingAverageCosineSimilarity: %0.6f\"", "%", "(", "cos_similarity", ")", ")", "\n", "# For backwards compatibility with an old typo before Nov 20, 2019.", "\n", "rval", ".", "append", "(", "\"EmbeddingAverageCosineSimilairty: %0.6f\"", "%", "(", "cos_similarity", ")", ")", "\n", "\n", "", "if", "'VectorExtremaCosineSimilarity'", "not", "in", "metrics_to_omit", ":", "\n", "        ", "cos_similarity", "=", "list", "(", "map", "(", "lambda", "refv", ":", "cosine_similarity", "(", "refv", ",", "extreme_emb_hyps", ")", ".", "diagonal", "(", ")", ",", "extreme_emb_refs", ")", ")", "\n", "cos_similarity", "=", "np", ".", "max", "(", "cos_similarity", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "rval", ".", "append", "(", "\"VectorExtremaCosineSimilarity: %0.6f\"", "%", "(", "cos_similarity", ")", ")", "\n", "\n", "", "if", "'GreedyMatchingScore'", "not", "in", "metrics_to_omit", ":", "\n", "        ", "scores", "=", "[", "]", "\n", "for", "emb_refsource", "in", "emb_refs", ":", "\n", "            ", "score_source", "=", "[", "]", "\n", "for", "emb_ref", ",", "emb_hyp", "in", "zip", "(", "emb_refsource", ",", "emb_hyps", ")", ":", "\n", "                ", "simi_matrix", "=", "cosine_similarity", "(", "emb_ref", ",", "emb_hyp", ")", "\n", "dir1", "=", "simi_matrix", ".", "max", "(", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "dir2", "=", "simi_matrix", ".", "max", "(", "axis", "=", "1", ")", ".", "mean", "(", ")", "\n", "score_source", ".", "append", "(", "(", "dir1", "+", "dir2", ")", "/", "2", ")", "\n", "", "scores", ".", "append", "(", "score_source", ")", "\n", "", "scores", "=", "np", ".", "max", "(", "scores", ",", "axis", "=", "0", ")", ".", "mean", "(", ")", "\n", "rval", ".", "append", "(", "\"GreedyMatchingScore: %0.6f\"", "%", "(", "scores", ")", ")", "\n", "\n", "", "rval", "=", "\"\\n\"", ".", "join", "(", "rval", ")", "\n", "return", "rval", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.generate_w2v_files.txt2bin": [[14, 19], ["KeyedVectors.load_word2vec_format", "KeyedVectors.load_word2vec_format.save", "KeyedVectors.load", "filename.replace", "filename.replace", "next", "six.iterkeys"], "function", ["None"], ["def", "txt2bin", "(", "filename", ")", ":", "\n", "    ", "m", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "filename", ")", "\n", "m", ".", "vocab", "[", "next", "(", "six", ".", "iterkeys", "(", "m", ".", "vocab", ")", ")", "]", ".", "sample_int", "=", "1", "\n", "m", ".", "save", "(", "filename", ".", "replace", "(", "'txt'", ",", "'bin'", ")", ",", "separately", "=", "None", ")", "\n", "KeyedVectors", ".", "load", "(", "filename", ".", "replace", "(", "'txt'", ",", "'bin'", ")", ",", "mmap", "=", "'r'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.generate_w2v_files.generate": [[21, 26], ["os.path.join", "os.path.join", "generate_w2v_files.txt2bin", "nlgeval.word2vec.glove2word2vec.glove2word2vec"], "function", ["home.repos.pwc.inspect_result.Maluuba_nlg-eval.word2vec.generate_w2v_files.txt2bin"], ["", "def", "generate", "(", "path", ")", ":", "\n", "    ", "glove_vector_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'glove.6B.300d.txt'", ")", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'glove.6B.300d.model.txt'", ")", "\n", "\n", "txt2bin", "(", "glove2word2vec", "(", "glove_vector_file", ",", "output_model_file", ")", ")", "\n", "\n"]]}