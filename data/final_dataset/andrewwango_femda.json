{"home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM.__init__": [[58, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "K", ",", "max_iter", "=", "200", ",", "\n", "rand_initialization", "=", "False", ",", "\n", "version", "=", "1", ",", "max_iter_fp", "=", "20", ",", "thres", "=", "None", ")", ":", "\n", "        ", "self", ".", "K", "=", "K", "\n", "self", ".", "converged_", "=", "False", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "rand_initialization", "=", "rand_initialization", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "max_iter_fp", "=", "max_iter_fp", "\n", "self", ".", "thres", "=", "thres", "\n", "self", ".", "alpha_", "=", "None", "\n", "self", ".", "mu_", "=", "None", "\n", "self", ".", "Sigma_", "=", "None", "\n", "self", ".", "tau_", "=", "None", "\n", "self", ".", "n_iter_", "=", "None", "\n", "self", ".", "labels_", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM._initialize": [[75, 156], ["numpy.random.rand", "numpy.sum", "numpy.zeros", "numpy.ones", "range", "sklearn.cluster.KMeans().fit", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.ones", "numpy.amin", "numpy.eye", "numpy.count_nonzero", "scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.reshape", "numpy.count_nonzero", "numpy.eye", "numpy.random.random_sample", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans().fit", "range", "float", "float", "numpy.amax", "numpy.amin", "numpy.count_nonzero", "sklearn.cluster.KMeans", "numpy.quantile"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit"], ["", "def", "_initialize", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Initialize all the parameters of the model:\n        theta = (alpha, mu, sigma, tau)\n        Either randomly or with kmeans centers.\n    \n        Parameters\n        ----------\n        X: array-like, shape (n, p)\n    \n        '''", "\n", "\n", "n", ",", "p", "=", "X", ".", "shape", "\n", "\n", "if", "self", ".", "rand_initialization", ":", "\n", "            ", "self", ".", "alpha_", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "K", ")", "\n", "self", ".", "alpha_", "/=", "np", ".", "sum", "(", "self", ".", "alpha_", ")", "\n", "self", ".", "mu_", "=", "(", "np", ".", "amax", "(", "X", ",", "axis", "=", "0", ")", "-", "np", ".", "amin", "(", "X", ",", "axis", "=", "0", ")", ")", "*", "np", ".", "random", ".", "random_sample", "(", "(", "self", ".", "K", ",", "p", ")", ")", "+", "np", ".", "amin", "(", "X", ",", "axis", "=", "0", ")", "\n", "self", ".", "Sigma_", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "p", ",", "p", ")", ")", "\n", "self", ".", "tau_", "=", "np", ".", "ones", "(", "(", "n", ",", "self", ".", "K", ")", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "                ", "self", ".", "Sigma_", "[", "k", "]", "=", "np", ".", "eye", "(", "p", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "            ", "one_point_clusters", "=", "False", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "self", ".", "K", ",", "max_iter", "=", "200", ")", ".", "fit", "(", "X", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "                ", "nk", "=", "np", ".", "count_nonzero", "(", "kmeans", ".", "labels_", "==", "k", ")", "\n", "\n", "if", "nk", "<=", "2", "and", "n", ">", "10", ":", "\n", "                    ", "one_point_clusters", "=", "True", "\n", "\n", "", "", "ite_filter", "=", "0", "\n", "n_filter", "=", "n", "\n", "\n", "if", "one_point_clusters", ":", "\n", "\n", "                ", "tree", "=", "cKDTree", "(", "X", ")", "#tree of nearest neighbors", "\n", "KNN", "=", "4", "\n", "dd", ",", "index", "=", "tree", ".", "query", "(", "X", ",", "k", "=", "[", "KNN", "]", ")", "# query for all points in data the Kth NN, returns distances and indexes", "\n", "\n", "dd", "=", "np", ".", "reshape", "(", "dd", ",", "(", "n", ",", ")", ")", "\n", "\n", "alpha_quantile", "=", "0.95", "\n", "\n", "while", "one_point_clusters", "and", "alpha_quantile", ">", "0.5", ":", "\n", "\n", "                    ", "ite_filter", "+=", "1", "\n", "\n", "alpha_quantile", "-=", "(", "0.1", ")", "*", "(", "ite_filter", "-", "1", ")", "\n", "\n", "one_point_clusters", "=", "False", "\n", "\n", "X_without_extremes", "=", "X", "[", "dd", "<", "np", ".", "quantile", "(", "dd", ",", "alpha_quantile", ")", ",", ":", "]", "\n", "\n", "n_filter", "=", "X_without_extremes", ".", "shape", "[", "0", "]", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "self", ".", "K", ",", "max_iter", "=", "200", ")", ".", "fit", "(", "X_without_extremes", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "                        ", "nk", "=", "np", ".", "count_nonzero", "(", "kmeans", ".", "labels_", "==", "k", ")", "\n", "\n", "if", "nk", "<=", "2", ":", "\n", "\n", "                            ", "one_point_clusters", "=", "True", "\n", "\n", "", "", "", "", "self", ".", "alpha_", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", ")", ")", "\n", "self", ".", "mu_", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "p", ")", ")", "\n", "self", ".", "Sigma_", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "p", ",", "p", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "                ", "nk", "=", "np", ".", "count_nonzero", "(", "kmeans", ".", "labels_", "==", "k", ")", "\n", "self", ".", "alpha_", "[", "k", "]", "=", "float", "(", "nk", ")", "/", "float", "(", "n_filter", ")", "\n", "self", ".", "mu_", "[", "k", "]", "=", "kmeans", ".", "cluster_centers_", "[", "k", "]", "\n", "self", ".", "Sigma_", "[", "k", "]", "=", "np", ".", "eye", "(", "p", ")", "# cov result in nan sometimes", "\n", "\n", "", "self", ".", "tau_", "=", "np", ".", "ones", "(", "(", "n", ",", "self", ".", "K", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM._e_step": [[158, 194], ["len", "numpy.zeros", "range", "numpy.sum", "scipy.stats._multivariate._PSD", "numpy.zeros.sum", "numpy.exp", "numpy.log", "numpy.log"], "methods", ["None"], ["", "", "def", "_e_step", "(", "self", ",", "X", ")", ":", "\n", "        ", "''' E-step of the algorithm\n        Computes the conditional probability of the model\n        \n        Parameters\n        ----------\n        X: array-like, shape (n, p)\n            data\n    \n        Returns\n        ----------\n        cond_prob_matrix: array-like, shape (n, K)\n             (cond_prob_matrix)_ik = P(Z_i=k|X_i=x_i)\n        '''", "\n", "n", ",", "p", "=", "X", ".", "shape", "\n", "\n", "K", "=", "len", "(", "self", ".", "alpha_", ")", "\n", "\n", "cond_prob_matrix", "=", "np", ".", "zeros", "(", "(", "n", ",", "K", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "\n", "            ", "psd", "=", "_PSD", "(", "self", ".", "Sigma_", "[", "k", "]", ")", "\n", "prec_U", ",", "logdet", "=", "psd", ".", "U", ",", "psd", ".", "log_pdet", "\n", "diff", "=", "X", "-", "self", ".", "mu_", "[", "k", "]", "\n", "logdensity", "=", "-", "0.5", "*", "(", "p", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", ")", "+", "p", "*", "np", ".", "log", "(", "self", ".", "tau_", "[", ":", ",", "k", "]", ")", "+", "logdet", "+", "p", ")", "\n", "#print(self.tau_[:,k])", "\n", "cond_prob_matrix", "[", ":", ",", "k", "]", "=", "np", ".", "exp", "(", "logdensity", ")", "*", "self", ".", "alpha_", "[", "k", "]", "\n", "\n", "", "sum_row", "=", "np", ".", "sum", "(", "cond_prob_matrix", ",", "axis", "=", "1", ")", "\n", "bool_sum_zero", "=", "(", "sum_row", "==", "0", ")", "\n", "\n", "cond_prob_matrix", "[", "bool_sum_zero", ",", ":", "]", "=", "self", ".", "alpha_", "\n", "cond_prob_matrix", "/=", "cond_prob_matrix", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "return", "cond_prob_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM._m_step": [[195, 320], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.ones", "range", "numpy.mean", "_fem.FEM.mu_[].copy", "_fem.FEM.Sigma_[].copy", "numpy.ones", "numpy.ones", "_algo_utils.regularize", "numpy.where", "numpy.linalg.inv", "numpy.where", "numpy.where", "numpy.sum", "numpy.sum.copy", "Sigma_fixed_point_new.copy", "numpy.where", "print", "_algo_utils.regularize", "numpy.where", "numpy.where", "numpy.multiply", "numpy.where", "numpy.where", "math.sqrt", "print", "numpy.sum", "numpy.sum", "numpy.where", "numpy.where", "numpy.dot", "numpy.trace", "numpy.dot", "numpy.trace", "numpy.dot", "numpy.trace", "numpy.dot", "numpy.trace", "math.sqrt", "numpy.dot", "numpy.inner", "numpy.linalg.norm", "numpy.dot", "numpy.dot", "numpy.inner", "numpy.linalg.inv", "_algo_utils.regularize"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "_m_step", "(", "self", ",", "X", ",", "cond_prob", ")", ":", "\n", "        ", "''' M-step of the algorithm\n        Updates all the parameters with the new conditional probabilities\n        \n        Parameters\n        ----------\n        X: array-like, shape (n, p)\n            data \n        cond_prob_matrix: array-like, shape (n, K)\n             (cond_prob_matrix)_ik = P(Z_i=k|X_i=x_i)\n    \n        Returns\n        ----------\n        alpha_new: array-like, shape (n,)\n            The new weights of each mixture components.\n        mu_new: array-like, shape (n, p)\n            The new mean of each mixture component.\n        Sigma_new: array-like, shape (p, p)\n            The new covariance of each mixture component.\n        tau_new: array-like, shape (n, K)\n            The collection of tau values.\n        '''", "\n", "\n", "n", ",", "p", "=", "X", ".", "shape", "\n", "\n", "alpha_new", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", ")", ")", "\n", "mu_new", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "p", ")", ")", "\n", "Sigma_new", "=", "np", ".", "zeros", "(", "(", "self", ".", "K", ",", "p", ",", "p", ")", ")", "\n", "tau_new", "=", "np", ".", "ones", "(", "(", "n", ",", "self", ".", "K", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "# UPDATE alpha:", "\n", "            ", "alpha_new", "[", "k", "]", "=", "np", ".", "mean", "(", "cond_prob", "[", ":", ",", "k", "]", ")", "\n", "\n", "# Fixed-point equation for Sigma and mu:", "\n", "# UPDATE mu", "\n", "# UPDATE Sigma", "\n", "mu_fixed_point", "=", "self", ".", "mu_", "[", "k", "]", ".", "copy", "(", ")", "\n", "Sigma_fixed_point", "=", "self", ".", "Sigma_", "[", "k", "]", ".", "copy", "(", ")", "\n", "tau_ite", "=", "np", ".", "ones", "(", "(", "n", ",", ")", ")", "\n", "tau_ite_sr", "=", "np", ".", "ones", "(", "(", "n", ",", ")", ")", "\n", "convergence_fp", "=", "False", "\n", "ite_fp", "=", "1", "\n", "mean_error", "=", "[", "]", "\n", "while", "not", "(", "convergence_fp", ")", "and", "ite_fp", "<", "self", ".", "max_iter_fp", ":", "\n", "                ", "if", "ite_fp", ">", "198", ":", "\n", "                    ", "print", "(", "\"m-step not converged\"", ",", "mean_error", "[", "-", "1", "]", ")", "\n", "", "inv_Sigma_fixed_point", "=", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "Sigma_fixed_point", ")", ")", "\n", "diff", "=", "X", "-", "mu_fixed_point", "\n", "sq_maha", "=", "(", "np", ".", "dot", "(", "diff", ",", "inv_Sigma_fixed_point", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "# multiple quadratic form", "\n", "\n", "tau_ite", "=", "sq_maha", "/", "p", "\n", "tau_ite_sr", "=", "(", "sq_maha", "**", "(", "0.5", ")", ")", "/", "p", "\n", "tau_ite", "=", "np", ".", "where", "(", "tau_ite", "<", "10", "**", "(", "-", "8", ")", ",", "10", "**", "(", "-", "8", ")", ",", "\n", "np", ".", "where", "(", "tau_ite", ">", "10", "**", "(", "8", ")", ",", "10", "**", "(", "8", ")", ",", "tau_ite", ")", ")", "\n", "tau_ite_sr", "=", "np", ".", "where", "(", "tau_ite_sr", "<", "10", "**", "(", "-", "8", ")", ",", "10", "**", "(", "-", "8", ")", ",", "\n", "np", ".", "where", "(", "tau_ite_sr", ">", "10", "**", "(", "8", ")", ",", "10", "**", "(", "8", ")", ",", "tau_ite_sr", ")", ")", "\n", "\n", "if", "self", ".", "version", "==", "1", "or", "self", ".", "version", "==", "2", ":", "\n", "                    ", "Ck", "=", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite", ")", "/", "np", ".", "sum", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite", ")", "\n", "", "else", ":", "# 3 or 4", "\n", "                    ", "Ck", "=", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite_sr", ")", "/", "np", ".", "sum", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite_sr", ")", "\n", "\n", "", "mu_fixed_point_new", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "X", ",", "Ck", "[", ":", ",", "np", ".", "newaxis", "]", ")", ",", "0", ")", "\n", "\n", "if", "self", ".", "version", "==", "2", "or", "self", ".", "version", "==", "4", ":", "# if usig new estim, update denominator", "\n", "\n", "                    ", "diff", "=", "X", "-", "mu_fixed_point_new", "\n", "sq_maha", "=", "(", "np", ".", "dot", "(", "diff", ",", "inv_Sigma_fixed_point", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "# multiple quadratic form", "\n", "tau_ite", "=", "sq_maha", "/", "p", "\n", "tau_ite_sr", "=", "(", "sq_maha", "**", "(", "0.5", ")", ")", "/", "p", "\n", "tau_ite", "=", "np", ".", "where", "(", "tau_ite", "<", "10", "**", "(", "-", "8", ")", ",", "10", "**", "(", "-", "8", ")", ",", "\n", "np", ".", "where", "(", "tau_ite", ">", "10", "**", "(", "8", ")", ",", "10", "**", "(", "8", ")", ",", "tau_ite", ")", ")", "\n", "tau_ite_sr", "=", "np", ".", "where", "(", "tau_ite_sr", "<", "10", "**", "(", "-", "8", ")", ",", "10", "**", "(", "-", "8", ")", ",", "\n", "np", ".", "where", "(", "tau_ite_sr", ">", "10", "**", "(", "8", ")", ",", "10", "**", "(", "8", ")", ",", "tau_ite_sr", ")", ")", "\n", "\n", "", "if", "self", ".", "version", "==", "1", ":", "\n", "\n", "                    ", "diff", "=", "X", "-", "mu_fixed_point", "\n", "Sigma_fixed_point_new", "=", "np", ".", "dot", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite", "*", "diff", ".", "T", ",", "diff", ")", "/", "(", "n", "*", "alpha_new", "[", "k", "]", ")", "\n", "Sigma_fixed_point_new", "*=", "p", "/", "np", ".", "trace", "(", "Sigma_fixed_point_new", ")", "\n", "\n", "", "if", "self", ".", "version", "==", "2", ":", "\n", "\n", "                    ", "diff", "=", "X", "-", "mu_fixed_point_new", "\n", "Sigma_fixed_point_new", "=", "np", ".", "dot", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite", "*", "diff", ".", "T", ",", "diff", ")", "/", "(", "n", "*", "alpha_new", "[", "k", "]", ")", "\n", "Sigma_fixed_point_new", "*=", "p", "/", "np", ".", "trace", "(", "Sigma_fixed_point_new", ")", "\n", "\n", "", "if", "self", ".", "version", "==", "3", ":", "\n", "\n", "                    ", "diff", "=", "X", "-", "mu_fixed_point", "\n", "Sigma_fixed_point_new", "=", "np", ".", "dot", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite_sr", "*", "diff", ".", "T", ",", "diff", ")", "/", "(", "n", "*", "alpha_new", "[", "k", "]", ")", "\n", "Sigma_fixed_point_new", "*=", "p", "/", "np", ".", "trace", "(", "Sigma_fixed_point_new", ")", "\n", "\n", "", "if", "self", ".", "version", "==", "4", ":", "\n", "\n", "                    ", "diff", "=", "X", "-", "mu_fixed_point_new", "\n", "Sigma_fixed_point_new", "=", "np", ".", "dot", "(", "cond_prob", "[", ":", ",", "k", "]", "/", "tau_ite_sr", "*", "diff", ".", "T", ",", "diff", ")", "/", "(", "n", "*", "alpha_new", "[", "k", "]", ")", "\n", "Sigma_fixed_point_new", "*=", "p", "/", "np", ".", "trace", "(", "Sigma_fixed_point_new", ")", "\n", "\n", "", "convergence_fp", "=", "True", "\n", "convergence_fp", "=", "convergence_fp", "and", "(", "math", ".", "sqrt", "(", "np", ".", "inner", "(", "mu_fixed_point", "-", "mu_fixed_point_new", ",", "mu_fixed_point", "-", "mu_fixed_point_new", ")", "/", "p", ")", "<", "10", "**", "(", "-", "6", ")", ")", "\n", "mean_error", "+=", "[", "(", "math", ".", "sqrt", "(", "np", ".", "inner", "(", "mu_fixed_point", "-", "mu_fixed_point_new", ",", "mu_fixed_point", "-", "mu_fixed_point_new", ")", "/", "p", ")", ")", "]", "\n", "#if convergence_fp : print(\"mean convergence\")", "\n", "convergence_fp", "=", "convergence_fp", "and", "(", "np", ".", "linalg", ".", "norm", "(", "Sigma_fixed_point_new", "-", "Sigma_fixed_point", ",", "ord", "=", "'fro'", ")", "/", "p", ")", "<", "10", "**", "(", "-", "6", ")", "\n", "if", "convergence_fp", ":", "print", "(", "\"m-step converged\"", ")", "\n", "mu_fixed_point", "=", "mu_fixed_point_new", ".", "copy", "(", ")", "\n", "Sigma_fixed_point", "=", "Sigma_fixed_point_new", ".", "copy", "(", ")", "\n", "\n", "ite_fp", "+=", "1", "\n", "\n", "", "mu_new", "[", "k", "]", "=", "mu_fixed_point", "\n", "Sigma_new", "[", "k", "]", "=", "regularize", "(", "Sigma_fixed_point", ")", "\n", "\n", "# UPDATE tau", "\n", "diff", "=", "X", "-", "mu_new", "[", "k", "]", "\n", "tau_new", "[", ":", ",", "k", "]", "=", "(", "np", ".", "dot", "(", "diff", ",", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "Sigma_new", "[", "k", "]", ")", ")", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "/", "p", "\n", "tau_new", "[", ":", ",", "k", "]", "=", "np", ".", "where", "(", "tau_new", "[", ":", ",", "k", "]", "<", "10", "**", "(", "-", "12", ")", ",", "10", "**", "(", "-", "12", ")", ",", "\n", "np", ".", "where", "(", "tau_new", "[", ":", ",", "k", "]", ">", "10", "**", "(", "12", ")", ",", "10", "**", "(", "12", ")", ",", "tau_new", "[", ":", ",", "k", "]", ")", ")", "\n", "#print(mean_error)", "\n", "#plt.plot(mean_error)", "\n", "#plt.show()", "\n", "\n", "", "return", "alpha_new", ",", "mu_new", ",", "Sigma_new", ",", "tau_new", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM.fit": [[321, 394], ["_fem.FEM._initialize", "numpy.array", "numpy.zeros().astype", "scipy.stats.chi2.ppf", "range", "_fem.FEM.labels_.astype", "_fem.FEM._e_step", "_fem.FEM._m_step", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.mean", "numpy.zeros", "numpy.argmax", "math.sqrt", "math.fabs", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.inv", "numpy.inner"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM._initialize", "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM._e_step", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._m_step"], ["", "def", "fit", "(", "self", ",", "X", ")", ":", "\n", "        ", "''' Fit the data to the model running the F-EM algorithm\n        \n        Parameters\n        ----------\n        X: array-like, shape (n, p)\n            data \n    \n        Returns\n        ----------\n        self\n        '''", "\n", "\n", "n", ",", "p", "=", "X", ".", "shape", "\n", "\n", "self", ".", "_initialize", "(", "X", ")", "\n", "\n", "convergence", "=", "False", "\n", "\n", "ite", "=", "0", "\n", "\n", "while", "not", "(", "convergence", ")", "and", "ite", "<", "self", ".", "max_iter", ":", "\n", "\n", "# Compute conditional probabilities:", "\n", "            ", "cond_prob", "=", "self", ".", "_e_step", "(", "X", ")", "\n", "\n", "# Update estimators:", "\n", "alpha_new", ",", "mu_new", ",", "Sigma_new", ",", "tau_new", "=", "self", ".", "_m_step", "(", "X", ",", "cond_prob", ")", "\n", "\n", "# Check convergence:", "\n", "if", "ite", ">", "5", ":", "# tol from fixed point should be bigger than general tolerance rate ", "\n", "                ", "convergence", "=", "True", "\n", "k", "=", "0", "\n", "while", "convergence", "and", "k", "<", "self", ".", "K", ":", "\n", "\n", "                    ", "convergence", "=", "convergence", "and", "math", ".", "sqrt", "(", "np", ".", "inner", "(", "mu_new", "[", "k", "]", "-", "self", ".", "mu_", "[", "k", "]", ",", "mu_new", "[", "k", "]", "-", "self", ".", "mu_", "[", "k", "]", ")", "/", "p", ")", "<", "10", "**", "(", "-", "5", ")", "\n", "convergence", "=", "convergence", "and", "(", "(", "np", ".", "linalg", ".", "norm", "(", "Sigma_new", "[", "k", "]", "-", "self", ".", "Sigma_", "[", "k", "]", ",", "ord", "=", "'fro'", ")", "/", "(", "p", ")", ")", "<", "10", "**", "(", "-", "5", ")", ")", "\n", "convergence", "=", "convergence", "and", "(", "math", ".", "fabs", "(", "alpha_new", "[", "k", "]", "-", "self", ".", "alpha_", "[", "k", "]", ")", "<", "10", "**", "(", "-", "3", ")", ")", "\n", "\n", "k", "+=", "1", "\n", "\n", "", "", "self", ".", "alpha_", "=", "np", ".", "copy", "(", "alpha_new", ")", "\n", "self", ".", "mu_", "=", "np", ".", "copy", "(", "mu_new", ")", "\n", "self", ".", "Sigma_", "=", "np", ".", "copy", "(", "Sigma_new", ")", "\n", "self", ".", "tau_", "=", "np", ".", "copy", "(", "tau_new", ")", "\n", "\n", "ite", "+=", "1", "\n", "\n", "", "self", ".", "labels_", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "np", ".", "argmax", "(", "cond_prob", ",", "axis", "=", "1", ")", "]", ")", "\n", "self", ".", "n_iter_", "=", "ite", "\n", "self", ".", "converged_", "=", "convergence", "\n", "\n", "# Outlier rejection ", "\n", "\n", "outlierness", "=", "np", ".", "zeros", "(", "(", "n", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "if", "self", ".", "thres", "is", "None", ":", "\n", "            ", "self", ".", "thres", "=", "0.05", "\n", "", "thres", "=", "chi2", ".", "ppf", "(", "1", "-", "self", ".", "thres", ",", "p", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "            ", "data_cluster", "=", "X", "[", "self", ".", "labels_", "==", "k", ",", ":", "]", "\n", "diff_cluster", "=", "data_cluster", "-", "self", ".", "mu_", "[", "k", "]", "\n", "sig_cluster", "=", "np", ".", "mean", "(", "diff_cluster", "*", "diff_cluster", ")", "\n", "maha_cluster", "=", "(", "np", ".", "dot", "(", "diff_cluster", ",", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Sigma_", "[", "k", "]", ")", ")", "*", "diff_cluster", ")", ".", "sum", "(", "1", ")", "/", "sig_cluster", "\n", "outlierness", "[", "self", ".", "labels_", "==", "k", "]", "=", "(", "maha_cluster", ">", "thres", ")", "\n", "\n", "", "self", ".", "labels_", "[", "outlierness", "]", "=", "-", "1", "\n", "\n", "self", ".", "labels_", "=", "self", ".", "labels_", ".", "astype", "(", "str", ")", "\n", "\n", "return", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._fem.FEM.predict": [[395, 438], ["numpy.zeros", "range", "numpy.sum", "numpy.array", "numpy.zeros().astype", "scipy.stats.chi2.ppf", "range", "new_labels.astype.astype.astype", "scipy.stats._multivariate._PSD", "numpy.mean", "numpy.zeros.sum", "numpy.mean", "numpy.exp", "numpy.zeros", "numpy.argmax", "numpy.dot", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.inv"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "Xnew", ",", "thres", "=", "None", ")", ":", "\n", "\n", "        ", "n", ",", "p", "=", "Xnew", ".", "shape", "\n", "\n", "cond_prob_matrix", "=", "np", ".", "zeros", "(", "(", "n", ",", "self", ".", "K", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "            ", "psd", "=", "_PSD", "(", "self", ".", "Sigma_", "[", "k", "]", ")", "\n", "prec_U", ",", "logdet", "=", "psd", ".", "U", ",", "psd", ".", "log_pdet", "\n", "diff", "=", "Xnew", "-", "self", ".", "mu_", "[", "k", "]", "\n", "sig", "=", "np", ".", "mean", "(", "diff", "*", "diff", ")", "\n", "maha", "=", "(", "np", ".", "dot", "(", "diff", ",", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Sigma_", "[", "k", "]", ")", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "\n", "logdensity", "=", "-", "0.5", "*", "(", "logdet", "+", "maha", ")", "\n", "cond_prob_matrix", "[", ":", ",", "k", "]", "=", "np", ".", "exp", "(", "logdensity", ")", "*", "self", ".", "alpha_", "[", "k", "]", "\n", "\n", "", "sum_row", "=", "np", ".", "sum", "(", "cond_prob_matrix", ",", "axis", "=", "1", ")", "\n", "bool_sum_zero", "=", "(", "sum_row", "==", "0", ")", "\n", "\n", "cond_prob_matrix", "[", "bool_sum_zero", ",", ":", "]", "=", "self", ".", "alpha_", "\n", "cond_prob_matrix", "/=", "cond_prob_matrix", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "new_labels", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "np", ".", "argmax", "(", "cond_prob_matrix", ",", "axis", "=", "1", ")", "]", ")", "\n", "\n", "outlierness", "=", "np", ".", "zeros", "(", "(", "n", ",", ")", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "if", "thres", "is", "None", ":", "\n", "            ", "thres", "=", "self", ".", "thres", "\n", "", "thres", "=", "chi2", ".", "ppf", "(", "1", "-", "thres", ",", "p", ")", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "K", ")", ":", "\n", "\n", "            ", "data_cluster", "=", "Xnew", "[", "new_labels", "==", "k", ",", ":", "]", "\n", "diff_cluster", "=", "data_cluster", "-", "self", ".", "mu_", "[", "k", "]", "\n", "sig_cluster", "=", "np", ".", "mean", "(", "diff_cluster", "*", "diff_cluster", ")", "\n", "maha_cluster", "=", "(", "np", ".", "dot", "(", "diff_cluster", ",", "np", ".", "linalg", ".", "inv", "(", "self", ".", "Sigma_", "[", "k", "]", ")", ")", "*", "diff_cluster", ")", ".", "sum", "(", "1", ")", "/", "sig_cluster", "\n", "outlierness", "[", "new_labels", "==", "k", "]", "=", "(", "maha_cluster", ">", "thres", ")", "\n", "\n", "", "new_labels", "[", "outlierness", "]", "=", "-", "1", "\n", "\n", "new_labels", "=", "new_labels", ".", "astype", "(", "str", ")", "\n", "\n", "return", "(", "new_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.femda.femda_.FEMDA.__init__": [[40, 42], ["_models_femda.FEMDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda.femda_.FEMDA.fit": [[43, 55], ["super().fit"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit FEMDA model according to data.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda.femda_.FEMDA.decision_function": [[56, 73], ["super().decision_function"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.decision_function"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Apply decision function (discriminant) to new data, i.e.\n        the log-posteriors. In binary case, this is instead defined as\n        the log posterior ratio of the class 1/class 0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Array of samples (test vectors).\n\n        Returns\n        -------\n        dk : ndarray of shape (n_samples,) or (n_samples, n_classes)\n            Decision function of new data per class. In 2-class case, \n            returns log likelihood ratio (n_samples,).\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "decision_function", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda.femda_.FEMDA.predict": [[74, 88], ["super().predict"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.predict"], ["", "def", "predict", "(", "self", ",", "X", ",", "percent_outliers", "=", "0", ")", ":", "\n", "        ", "\"\"\"Classify new data X and return predicted labels y.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n        percent_outliers : float, default=0\n            Optionally estimate outliers and label as -1\n\n        Returns\n        -------\n        y_pred : ndarray of shape (n_samples,)\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "predict", "(", "X", ",", "percent_outliers", "=", "percent_outliers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda.femda_.FEMDA.predict_proba": [[89, 103], ["super().predict_proba"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate probability of class membership.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Input data.\n\n        Returns\n        -------\n        C : ndarray of shape (n_samples, n_classes)\n            Estimated probabilities.\n        \"\"\"", "\n", "return", "super", "(", ")", ".", "predict_proba", "(", "X", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.__init__": [[64, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "method", "=", "'distributional'", ",", "pool_covs", "=", "True", ",", "fudge", "=", "1", ")", ":", "\n", "        ", "self", ".", "method", "=", "method", "\n", "self", ".", "pool_covs", "=", "pool_covs", "\n", "self", ".", "fudge", "=", "fudge", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._bose_k": [[69, 76], ["numpy.array"], "methods", ["None"], ["", "def", "_bose_k", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return coefficient used by Bose et al. (2015) in calculation of\n        generalised discriminant, to distinguish between different\n        Elliptically Symmetrical distributions. \n        \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis": [[77, 107], ["range", "numpy.vstack", "numpy.array", "list", "map", "numpy.linalg.inv"], "methods", ["None"], ["", "def", "_mahalanobis", "(", "self", ",", "X", ",", "ki", "=", "None", ")", ":", "#NxM -> KxN", "\n", "        ", "\"\"\"Calculate Mahalanobis distances for new data, per class,\n        according to estimated model parameters.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            New data.\n        ki : int, default=None\n            If set, only calculate according to ki-th class. If not,\n            calculate for all k classes.\n\n        Returns\n        -------\n        d : ndarray of shape (n_classes, n_samples)\n            Mahalanobis distances. If ki is set, returns distances for\n            ki-th class, shape (n_samples,)\n        \"\"\"", "\n", "ret", "=", "[", "]", "\n", "r", "=", "range", "(", "self", ".", "_K", ")", "if", "ki", "is", "None", "else", "[", "ki", "]", "\n", "for", "k", "in", "r", ":", "\n", "            ", "m", "=", "X", "-", "self", ".", "means_", "[", ":", ",", "k", "]", "\n", "kth_maha", "=", "np", ".", "array", "(", "list", "(", "map", "(", "lambda", "d", ":", "\n", "d", "@", "np", ".", "linalg", ".", "inv", "(", "self", ".", "covariance_", ")", "[", "k", ",", ":", ",", ":", "]", "@", "d", "[", ":", ",", "None", "]", ",", "m", "\n", ")", ")", ")", ".", "T", "\n", "#kth_maha = np.diag(m \\", "\n", "# @ np.linalg.inv(self.covariances)[k,:,:] @ m.T)]", "\n", "ret", "+=", "[", "kth_maha", "]", "\n", "\n", "", "return", "np", ".", "vstack", "(", "ret", ")", "if", "ki", "is", "None", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._general_discriminants": [[108, 124], ["_models_lda.LDA._mahalanobis", "_models_lda.LDA._bose_k", "numpy.log", "numpy.linalg.det"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._bose_k"], ["", "def", "_general_discriminants", "(", "self", ",", "X", ")", ":", "#KxN", "\n", "        ", "\"\"\"Calculate generalised discriminant function of new data according \n        to model per class. This is only used if the method is generalsied.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            New data.\n\n        Returns\n        -------\n        p : ndarray of shape (n_classes, n_samples)\n            Log likelihood per class of new data.\n        \"\"\"", "\n", "return", "-", "0.5", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "self", ".", "covariance_", ")", ")", "[", ":", ",", "None", "]", "*", "self", ".", "fudge", "-", "self", ".", "_bose_k", "(", ")", "[", ":", ",", "None", "]", "*", "self", ".", "_mahalanobis", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._kth_likelihood": [[125, 142], ["scipy.stats.multivariate_normal"], "methods", ["None"], ["", "def", "_kth_likelihood", "(", "self", ",", "k", ")", ":", "# non-log likelihood", "\n", "        ", "\"\"\"Return random variable which calculates likelihood of\n        kth class according to model parameters. Must have `pdf` method.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            New data.\n\n        Returns\n        -------\n        p : multi_rv_generic\n            Random variable calculating kth likelihood.\n        \"\"\"", "\n", "return", "stats", ".", "multivariate_normal", "(", "mean", "=", "self", ".", "means_", "[", ":", ",", "k", "]", ",", "\n", "cov", "=", "self", ".", "covariance_", "[", "k", ",", ":", ",", ":", "]", ",", "\n", "allow_singular", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._log_likelihoods": [[143, 159], ["numpy.log", "numpy.array", "_models_lda.LDA._kth_likelihood().pdf", "range", "_models_lda.LDA._kth_likelihood"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._kth_likelihood"], ["", "def", "_log_likelihoods", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Calculate log likelihood of new data according to model per class.\n        This is only used if the method is distributional.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            New data.\n\n        Returns\n        -------\n        p : ndarray of shape (n_classes, n_samples)\n            Log likelihood per class of new data.\n        \"\"\"", "\n", "return", "np", ".", "log", "(", "np", ".", "array", "(", "[", "self", ".", "_kth_likelihood", "(", "k", ")", ".", "pdf", "(", "X", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "_K", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._estimate_parameters": [[160, 177], ["_algo_utils.fit_gaussian"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_gaussian"], ["", "def", "_estimate_parameters", "(", "self", ",", "X", ")", ":", "#NxM -> [1xM, MxM]", "\n", "        ", "\"\"\"Estimate parameters of one class according to Gaussian class\n        conditional density. This corresponds to sample mean and sample\n        unbiased covariance.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data of one class.\n\n        Returns\n        -------\n        params : list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features)]\\\n            Estimated mean vector and covariance matrix.\n        \"\"\"", "\n", "return", "fit_gaussian", "(", "X", ")", "#[X.mean(axis=0), np.cov(X.T)]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._dk_from_method": [[178, 189], ["ValueError", "_models_lda.LDA._general_discriminants", "_models_lda.LDA._log_likelihoods", "type"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._general_discriminants", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA._log_likelihoods"], ["", "def", "_dk_from_method", "(", "self", ",", "X", ")", ":", "#NxM -> KxN", "\n", "        ", "\"\"\"\n        Choose between generalised and distributional discriminants.\n        \"\"\"", "\n", "if", "not", "(", "type", "(", "self", ".", "method", ")", "is", "str", "\n", "and", "self", ".", "method", "in", "[", "'generalised'", ",", "'distributional'", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Method must be generalised or distributional'", ")", "\n", "", "if", "self", ".", "method", "==", "'generalised'", ":", "\n", "            ", "return", "self", ".", "_general_discriminants", "(", "X", ")", "\n", "", "elif", "self", ".", "method", "==", "'distributional'", ":", "\n", "            ", "return", "self", ".", "_log_likelihoods", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.fit": [[190, 235], ["sklearn.utils.validation.check_X_y", "_models_lda.LDA._validate_data", "time.time", "sklearn.utils.multiclass.unique_labels", "len", "numpy.array", "numpy.array", "numpy.allclose", "numpy.array.sum", "numpy.array", "numpy.array.sum", "_models_lda.LDA.priors_.sum", "_models_lda.LDA._estimate_parameters", "print", "numpy.repeat", "numpy.array.sum", "numpy.zeros", "numpy.eye", "numpy.sum", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.t_LDA_FEM._estimate_parameters"], ["", "", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit Discriminant Analysis model according to data.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n        \"\"\"", "\n", "X", ",", "y", "=", "check_X_y", "(", "X", ",", "y", ")", "\n", "X", ",", "y", "=", "self", ".", "_validate_data", "(", "X", ",", "y", ",", "ensure_min_samples", "=", "2", ",", "estimator", "=", "self", ",", "\n", "dtype", "=", "[", "np", ".", "float64", ",", "np", ".", "float32", "]", ",", "ensure_min_features", "=", "2", ")", "\n", "\n", "st", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "classes_", "=", "unique_labels", "(", "y", ")", "#1xK", "\n", "self", ".", "_K", "=", "len", "(", "self", ".", "classes_", ")", "\n", "self", ".", "_M", "=", "X", ".", "shape", "[", "1", "]", "\n", "self", ".", "X_classes_", "=", "[", "X", "[", "np", ".", "where", "(", "y", "==", "k", ")", ",", ":", "]", "[", "0", ",", ":", ",", ":", "]", "\n", "for", "k", "in", "self", ".", "classes_", "]", "#Kxn_kxM", "\n", "n", "=", "np", ".", "array", "(", "[", "c", ".", "shape", "[", "0", "]", "for", "c", "in", "self", ".", "X_classes_", "]", ")", "\n", "\n", "self", ".", "priors_", "=", "n", "/", "n", ".", "sum", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "parameters_", "=", "[", "self", ".", "_estimate_parameters", "(", "c", ")", "\n", "for", "c", "in", "self", ".", "X_classes_", "]", "\n", "", "except", "np", ".", "linalg", ".", "LinAlgError", ":", "\n", "            ", "print", "(", "\"didn't even fit...\"", ")", "\n", "self", ".", "parameters_", "=", "[", "[", "np", ".", "zeros", "(", "self", ".", "_M", ")", ",", "np", ".", "eye", "(", "self", ".", "_M", ")", "]", "\n", "for", "c", "in", "self", ".", "X_classes_", "]", "\n", "\n", "", "self", ".", "means_", "=", "np", ".", "array", "(", "[", "param", "[", "0", "]", "for", "param", "in", "self", ".", "parameters_", "]", ")", ".", "T", "\n", "self", ".", "covariance_", "=", "np", ".", "array", "(", "[", "param", "[", "1", "]", "for", "param", "in", "self", ".", "parameters_", "]", ")", "\n", "self", ".", "covariance_", "=", "self", ".", "covariance_", "if", "not", "self", ".", "pool_covs", "else", "np", ".", "repeat", "(", "np", ".", "sum", "(", "n", "[", ":", ",", "None", ",", "None", "]", "*", "self", ".", "covariance_", ",", "axis", "=", "0", ")", "[", "None", ",", ":", "]", ",", "self", ".", "_K", ",", "axis", "=", "0", ")", "/", "n", ".", "sum", "(", ")", "\n", "\n", "assert", "(", "n", ".", "sum", "(", ")", "==", "X", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "self", ".", "_M", "==", "self", ".", "covariance_", ".", "shape", "[", "2", "]", ")", "\n", "assert", "(", "np", ".", "allclose", "(", "self", ".", "priors_", ".", "sum", "(", ")", ",", "1", ")", ")", "\n", "#print(\"Fitting time\", time.time()-st)", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._decision_function": [[236, 254], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_array", "_models_lda.LDA._dk_from_method", "numpy.log", "print", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._dk_from_method"], ["", "def", "_decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        Base function for all inference, so validate here.\n        Compute log-posterior of new data with likelihoods and priors.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "[", "\"means_\"", ",", "\"covariance_\"", ",", "\n", "\"priors_\"", ",", "\"parameters_\"", ",", "\"classes_\"", "]", ")", "\n", "X", "=", "check_array", "(", "X", ")", "\n", "\n", "#try:", "\n", "dk", "=", "self", ".", "_dk_from_method", "(", "X", ")", "\n", "try", ":", "\n", "            ", "pass", "\n", "", "except", "np", ".", "linalg", ".", "LinAlgError", ":", "\n", "            ", "print", "(", "\"oops\"", ")", "\n", "dk", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "classes_", ")", ",", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "dk", "=", "dk", "+", "np", ".", "log", "(", "self", ".", "priors_", "[", ":", ",", "None", "]", ")", "\n", "return", "dk", ".", "T", "#return in standard sklearn shape NxK", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.decision_function": [[255, 273], ["_models_lda.LDA._decision_function", "len"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._decision_function"], ["", "def", "decision_function", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Apply decision function (discriminant) to new data, i.e.\n        the log-posteriors. In binary case, this is instead defined as\n        the log posterior ratio of the class 1/class 0.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Array of samples (test vectors).\n\n        Returns\n        -------\n        dk : ndarray of shape (n_samples,) or (n_samples, n_classes)\n            Decision function of new data per class. In 2-class case, \n            returns log likelihood ratio (n_samples,).\n        \"\"\"", "\n", "dk", "=", "self", ".", "_decision_function", "(", "X", ")", "\n", "return", "dk", "[", ":", ",", "1", "]", "-", "dk", "[", ":", ",", "0", "]", "if", "len", "(", "self", ".", "classes_", ")", "==", "2", "else", "dk", "#NxK", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.predict": [[274, 291], ["_models_lda.LDA._decision_function", "_algo_utils.label_outliers", "numpy.nanargmax"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._decision_function", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.label_outliers"], ["", "def", "predict", "(", "self", ",", "X", ",", "percent_outliers", "=", "0", ")", ":", "\n", "        ", "\"\"\"Classify new data X and return predicted labels y.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n        percent_outliers : float, default=0\n            Optionally estimate outliers and label as -1\n\n        Returns\n        -------\n        y_pred : ndarray of shape (n_samples,)\n        \"\"\"", "\n", "dk", "=", "self", ".", "_decision_function", "(", "X", ")", "\n", "y", "=", "self", ".", "classes_", "[", "np", ".", "nanargmax", "(", "dk", ",", "axis", "=", "1", ")", "]", "\n", "return", "label_outliers", "(", "X", ",", "y", ",", "self", ".", "means_", ",", "self", ".", "covariance_", ",", "\n", "thres", "=", "percent_outliers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA.predict_proba": [[292, 308], ["_models_lda.LDA._decision_function", "numpy.exp", "numpy.exp.sum", "_models_lda.LDA.max"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._decision_function"], ["", "def", "predict_proba", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate probability of class membership.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Input data.\n\n        Returns\n        -------\n        C : ndarray of shape (n_samples, n_classes)\n            Estimated probabilities.\n        \"\"\"", "\n", "dk", "=", "self", ".", "_decision_function", "(", "X", ")", "\n", "likelihood", "=", "np", ".", "exp", "(", "dk", "-", "dk", ".", "max", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "return", "likelihood", "/", "likelihood", ".", "sum", "(", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.QDA.__init__": [[315, 317], ["_models_lda.LDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'distributional'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "method", ",", "pool_covs", "=", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.GQDA.__init__": [[34, 36], ["_models_lda.QDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "'generalised'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.GQDA._bose_k": [[37, 42], ["numpy.array"], "methods", ["None"], ["", "def", "_bose_k", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generalised discriminant coefficient according to\n        Bose et al. (2015).\n        \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "0.5", "/", "self", ".", "c_", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.GQDA.fit": [[43, 108], ["super().fit", "numpy.zeros", "numpy.log", "range", "numpy.sort", "numpy.concatenate", "numpy.zeros", "enumerate", "print", "numpy.zeros", "numpy.linalg.det", "range", "numpy.concatenate.append", "numpy.concatenate", "len", "range", "range", "numpy.array", "range", "numpy.vstack", "numpy.unique", "numpy.zeros.argmin", "_models_gqda.GQDA._mahalanobis", "_models_gqda.GQDA._mahalanobis", "_models_gqda.GQDA._mahalanobis", "_models_gqda.GQDA._mahalanobis", "numpy.vstack.append"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_lda.LDA._mahalanobis"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "c_", "=", "None", ")", ":", "\n", "        ", "\"\"\"Fit GQDA model parameters according to data.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n\n        c_ : float, default=None.\n            The generalised coefficient. If set, don't fit this parameter.\n            If not, estimate using method of error minimisation.\n        \"\"\"", "\n", "super", "(", ")", ".", "fit", "(", "X", ",", "y", ")", "#Kx[n_k, M]", "\n", "\n", "if", "c_", "is", "not", "None", ":", "\n", "            ", "self", ".", "c_", "=", "c_", "\n", "return", "self", "\n", "\n", "", "uijs", "=", "[", "np", ".", "zeros", "(", "(", "self", ".", "X_classes_", "[", "k", "]", ".", "shape", "[", "0", "]", ",", "self", ".", "_K", ",", "self", ".", "_K", ")", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "_K", ")", "]", "#Kx[n_kxIxJ]", "\n", "sij", "=", "np", ".", "zeros", "(", "(", "self", ".", "_K", ",", "self", ".", "_K", ")", ")", "\n", "logdets", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "self", ".", "covariance_", ")", ")", "#K,  ", "\n", "for", "i", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "                ", "dij_on_i", "=", "self", ".", "_mahalanobis", "(", "self", ".", "X_classes_", "[", "i", "]", ",", "ki", "=", "j", ")", "-", "self", ".", "_mahalanobis", "(", "self", ".", "X_classes_", "[", "i", "]", ",", "ki", "=", "i", ")", "#Kxn_i", "\n", "dij_on_j", "=", "self", ".", "_mahalanobis", "(", "self", ".", "X_classes_", "[", "j", "]", ",", "ki", "=", "j", ")", "-", "self", ".", "_mahalanobis", "(", "self", ".", "X_classes_", "[", "j", "]", ",", "ki", "=", "i", ")", "#Kxn_j", "\n", "sij", "[", "i", ",", "j", "]", "=", "logdets", "[", "j", "]", "-", "logdets", "[", "i", "]", "\n", "\n", "uijs", "[", "i", "]", "[", ":", ",", "i", ",", "j", "]", "=", "dij_on_i", "/", "sij", "[", "i", ",", "j", "]", "\n", "uijs", "[", "i", "]", "[", ":", ",", "j", ",", "j", "]", "=", "np", ".", "inf", "\n", "uijs", "[", "j", "]", "[", ":", ",", "i", ",", "j", "]", "=", "dij_on_j", "/", "sij", "[", "i", ",", "j", "]", "\n", "\n", "", "", "T", "=", "[", "]", "\n", "for", "uij", "in", "uijs", ":", "\n", "            ", "T", ".", "append", "(", "uij", "[", "(", "uij", ">", "0", ")", "*", "(", "uij", "<", "1", ")", "]", ")", "\n", "", "T", "=", "np", ".", "sort", "(", "np", ".", "concatenate", "(", "T", ")", ")", "\n", "T", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "0", "]", ")", ",", "T", "]", ")", "\n", "#print(T)", "\n", "MCc", "=", "np", ".", "zeros", "(", "(", "len", "(", "T", ")", ")", ")", "\n", "for", "e", ",", "c_", "in", "enumerate", "(", "T", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "                ", "Rijc", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "                    ", "if", "i", "==", "j", ":", "continue", "\n", "p", "=", "uijs", "[", "i", "]", "[", ":", ",", "i", ",", "j", "]", "\n", "to_app", "=", "p", ">", "-", "c_", "if", "sij", "[", "i", ",", "j", "]", ">", "0", "else", "p", "<", "-", "c_", "\n", "Rijc", ".", "append", "(", "self", ".", "X_classes_", "[", "i", "]", "[", "to_app", "]", ")", "\n", "", "Rijc", "=", "np", ".", "vstack", "(", "Rijc", ")", "\n", "Ric", "=", "np", ".", "unique", "(", "Rijc", ",", "axis", "=", "0", ")", "\n", "#print(Ric.shape, Rijc.shape)", "\n", "lenRic", "=", "Ric", ".", "shape", "[", "0", "]", "\n", "MCic", "=", "self", ".", "X_classes_", "[", "i", "]", ".", "shape", "[", "0", "]", "-", "lenRic", "\n", "#print(MCic, Ric.shape)", "\n", "MCc", "[", "e", "]", "+=", "MCic", "\n", "\n", "#return uijs, MCc, T", "\n", "", "", "c_star", "=", "T", "[", "MCc", ".", "argmin", "(", ")", "]", "\n", "self", ".", "c_", "=", "c_star", "if", "c_star", ">", "0", "else", "0.001", "\n", "print", "(", "\"optimal c is\"", ",", "c_star", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA.__init__": [[124, 127], ["_models_gqda.GQDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "estimation", "=", "'gaussian'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "estimation", "=", "estimation", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_t_EM": [[128, 132], ["_algo_utils.fit_t"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t"], ["", "def", "_estimate_t_EM", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate by fitting t-distribution using EM\n        \"\"\"", "\n", "return", "fit_t", "(", "X", ")", "#discarding dof parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_gaussian_MLE": [[133, 137], ["X.mean", "numpy.cov"], "methods", ["None"], ["", "def", "_estimate_gaussian_MLE", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate by fitting Gaussian according to the MLE\n        \"\"\"", "\n", "return", "[", "X", ".", "mean", "(", "axis", "=", "0", ")", ",", "np", ".", "cov", "(", "X", ".", "T", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame": [[138, 142], ["rpy2.robjects.pandas2ri.py2rpy", "pandas.DataFrame"], "methods", ["None"], ["", "def", "_get_r_frame", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Prepare data for passing into R\n        \"\"\"", "\n", "return", "pandas2ri", ".", "py2rpy", "(", "pd", ".", "DataFrame", "(", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_winsorised": [[143, 149], ["_models_gqda.RGQDA._get_r_frame", "psych.winsor", "_models_gqda.RGQDA._estimate_gaussian_MLE"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_gaussian_MLE"], ["", "def", "_estimate_winsorised", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Winsorise data and fit Gaussian\n        \"\"\"", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "winsorised", "=", "psych", ".", "winsor", "(", "frame", ",", "trim", "=", "0.1", ")", "\n", "return", "self", ".", "_estimate_gaussian_MLE", "(", "winsorised", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_MVE": [[150, 156], ["_models_gqda.RGQDA._get_r_frame", "rrcov.CovMve"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame"], ["", "def", "_estimate_MVE", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit data with Minimum Variance Ellipsoid estimator\n        \"\"\"", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "MVE", "=", "rrcov", ".", "CovMve", "(", "frame", ",", "alpha", "=", "0.5", ")", "\n", "return", "[", "MVE", ".", "slots", "[", "'center'", "]", ",", "MVE", ".", "slots", "[", "'cov'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_MCD": [[157, 164], ["print", "_models_gqda.RGQDA._get_r_frame", "rrcov.CovMcd"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame"], ["", "def", "_estimate_MCD", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit data with Minimum Covariance Determinant estimator\n        \"\"\"", "\n", "print", "(", "\"estimating...\"", ")", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "MCD", "=", "rrcov", ".", "CovMcd", "(", "frame", ",", "alpha", "=", "0.5", ")", "\n", "return", "[", "MCD", ".", "slots", "[", "'center'", "]", ",", "MCD", ".", "slots", "[", "'cov'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_S_estimator": [[165, 171], ["_models_gqda.RGQDA._get_r_frame", "rrcov.CovSest"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame"], ["", "def", "_estimate_S_estimator", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit data with robust S-estimators\n        \"\"\"", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "S", "=", "rrcov", ".", "CovSest", "(", "frame", ")", "\n", "return", "[", "S", ".", "slots", "[", "'center'", "]", ",", "S", ".", "slots", "[", "'cov'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_SD_estimator": [[172, 178], ["_models_gqda.RGQDA._get_r_frame", "rrcov.CovSde"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame"], ["", "def", "_estimate_SD_estimator", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit data with robust SD-estimators\n        \"\"\"", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "SD", "=", "rrcov", ".", "CovSde", "(", "frame", ")", "\n", "return", "[", "SD", ".", "slots", "[", "'center'", "]", ",", "SD", ".", "slots", "[", "'cov'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_M_estimator": [[179, 186], ["_models_gqda.RGQDA._get_r_frame", "SpatialNP.mvhuberM", "list"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._get_r_frame"], ["", "def", "_estimate_M_estimator", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Fit data with robust Maronna M-estimators\n        \"\"\"", "\n", "frame", "=", "self", ".", "_get_r_frame", "(", "X", ")", "\n", "M", "=", "SpatialNP", ".", "mvhuberM", "(", "frame", ")", "\n", "#print(list(M))", "\n", "return", "list", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_parameters": [[187, 217], ["_models_gqda.RGQDA._estimate_gaussian_MLE", "_models_gqda.RGQDA._estimate_t_EM", "_models_gqda.RGQDA._estimate_winsorised", "_models_gqda.RGQDA._estimate_MVE", "_models_gqda.RGQDA._estimate_MCD", "_models_gqda.RGQDA._estimate_M_estimator", "_models_gqda.RGQDA._estimate_S_estimator", "_models_gqda.RGQDA._estimate_SD_estimator"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_gaussian_MLE", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_t_EM", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_winsorised", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_MVE", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_MCD", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_M_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_S_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_gqda.RGQDA._estimate_SD_estimator"], ["", "def", "_estimate_parameters", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate parameters of one class using robust estimators.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        Returns\n        -------\n        params : list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features)]\\\n            Estimated mean vector, covariance matrix.\n        \"\"\"", "\n", "if", "self", ".", "estimation", "==", "'gaussian'", ":", "\n", "            ", "return", "self", ".", "_estimate_gaussian_MLE", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'t-EM'", ":", "\n", "            ", "return", "self", ".", "_estimate_t_EM", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'winsorised'", ":", "\n", "            ", "return", "self", ".", "_estimate_winsorised", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'MVE'", ":", "\n", "            ", "return", "self", ".", "_estimate_MVE", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'MCD'", ":", "\n", "            ", "return", "self", ".", "_estimate_MCD", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'M-estimator'", ":", "\n", "            ", "return", "self", ".", "_estimate_M_estimator", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'S-estimator'", ":", "\n", "            ", "return", "self", ".", "_estimate_S_estimator", "(", "X", ")", "\n", "", "elif", "self", ".", "estimation", "==", "'SD-estimator'", ":", "\n", "            ", "return", "self", ".", "_estimate_SD_estimator", "(", "X", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.get_reg_lambd": [[5, 9], ["None"], "function", ["None"], ["def", "get_reg_lambd", "(", ")", ":", "\n", "    ", "\"\"\"Return default regularization parameter.\n    \"\"\"", "\n", "return", "1e-5", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.regularize": [[10, 22], ["_algo_utils.get_reg_lambd", "numpy.eye", "len"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.get_reg_lambd"], ["", "def", "regularize", "(", "sigma", ",", "lambd", "=", "get_reg_lambd", "(", ")", ")", ":", "\n", "    ", "\"\"\"Regularizes matrix to avoid singular matrix issues.\n\n    Args:\n        sigma (array-like of shape (n_features, n_features)): scatter matrix\n        lambd (float, optional): reg parameter. Defaults to get_reg_lambd().\n\n    Returns:\n        array-like of shape (n_features, n_features):\n            regularized scatter matrix\n    \"\"\"", "\n", "return", "sigma", "+", "np", ".", "eye", "(", "len", "(", "sigma", ")", ")", "*", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_gaussian": [[23, 37], ["_algo_utils.get_reg_lambd", "_algo_utils.regularize", "X.sum", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.get_reg_lambd", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "fit_gaussian", "(", "X", ")", ":", "\n", "    ", "\"\"\"Fit Gaussian distribution parameters to data, with regularization.\n\n    Args:\n        X (array-like of shape (n_samples, n_features)): Training data.\n\n    Returns:\n        list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features)] :\n            Estimated mean vector and covariance matrix.\n    \"\"\"", "\n", "n_reg", "=", "X", ".", "shape", "[", "0", "]", "+", "get_reg_lambd", "(", ")", "\n", "m", "=", "(", "X", ".", "sum", "(", "axis", "=", "0", ")", "/", "n_reg", ")", "[", "None", ",", ":", "]", "\n", "return", "m", "[", "0", "]", ",", "regularize", "(", "np", ".", "dot", "(", "(", "X", "-", "m", ")", ".", "T", ",", "X", "-", "m", ")", "/", "(", "n_reg", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.t_EM_e_step": [[38, 56], ["numpy.einsum", "numpy.linalg.solve", "_algo_utils.regularize"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "t_EM_e_step", "(", "D", ",", "dof", ",", "mu", ",", "cov", ")", ":", "\n", "    ", "\"\"\"Run one E-step of the EM algorithm to fit Student-t. See Murphy,\n    Machine Learning: A Probabilistic Perspective for details.\n\n    Args:\n        D (int): n_features of data\n        dof (float): estimated degrees of freedom\n        mu (array-like of shape (n_samples, n_features)): X - mean\n        cov (array-like of shape (n_features, n_features)): estimated scatter\n\n    Returns:\n        z\n        delta\n        See Murphy for details.\n    \"\"\"", "\n", "delta", "=", "np", ".", "einsum", "(", "'ij,ij->i'", ",", "mu", ",", "np", ".", "linalg", ".", "solve", "(", "regularize", "(", "cov", ")", ",", "mu", ".", "T", ")", ".", "T", ")", "\n", "z", "=", "(", "dof", "+", "D", ")", "/", "(", "dof", "+", "delta", ")", "\n", "return", "z", ",", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t_dof": [[57, 101], ["_algo_utils.t_EM_e_step", "scipy.optimize.minimize", "mean.squeeze", "abs", "numpy.log", "numpy.log", "scipy.special.digamma", "scipy.special.gammaln", "numpy.log", "numpy.log", "scipy.special.digamma"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.t_EM_e_step"], ["", "def", "fit_t_dof", "(", "X", ",", "mean", ",", "cov", ",", "dof_0", ",", "max_iter", "=", "200", ",", "mu", "=", "None", ",", "tol", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"Fit degrees of freedom to data according to Student-t, given other \n    parameters.\n\n    Args:\n        X (array-like of shape (n_samples, n_features)): Training data.\n        mean (array-like of shape (n_features,)): Mean vector.\n        cov (array-like of shape (n_features, n_features)): Scatter matrix.\n        dof_0 (float): Initial guess of degrees of freedom.\n        max_iter (int, optional): Max number of iterations. Defaults to 200.\n        mu (array-like, optional): [description]. Defaults to None.\n            X - mean. If set, skips this calculation.\n        tol (float, optional): Convergence tolerance. Defaults to 1e-3.\n\n    Returns:\n        float: Estimated degree of freedom.\n    \"\"\"", "\n", "N", ",", "D", "=", "X", ".", "shape", "\n", "mu", "=", "mu", "if", "mu", "is", "not", "None", "else", "X", "-", "mean", ".", "squeeze", "(", ")", "[", "None", ",", ":", "]", "\n", "dof", "=", "dof_0", "\n", "i", "=", "0", "\n", "\n", "while", "i", "<", "max_iter", ":", "\n", "        ", "z", ",", "_", "=", "t_EM_e_step", "(", "D", ",", "dof", ",", "mu", ",", "cov", ")", "\n", "\n", "d_t", "=", "(", "np", ".", "log", "(", "z", ")", "+", "special", ".", "digamma", "(", "(", "dof", "+", "D", ")", "/", "2", ")", "\n", "-", "np", ".", "log", "(", "(", "dof", "+", "D", ")", "/", "2", ")", "-", "z", ")", ".", "sum", "(", ")", "\n", "dof_obj", "=", "lambda", "v", ":", "-", "(", "-", "N", "*", "special", ".", "gammaln", "(", "v", "/", "2", ")", "\n", "+", "N", "*", "v", "*", "np", ".", "log", "(", "v", "/", "2", ")", "/", "2", "+", "v", "*", "d_t", "/", "2", ")", "\n", "dof_grad", "=", "lambda", "v", ":", "-", "(", "N", "/", "2", "*", "(", "-", "special", ".", "digamma", "(", "v", "/", "2", ")", "\n", "+", "np", ".", "log", "(", "v", "/", "2", ")", "+", "1", ")", "+", "d_t", "/", "2", ")", "\n", "dof_new", "=", "optimize", ".", "minimize", "(", "dof_obj", ",", "\n", "dof", ",", "\n", "jac", "=", "dof_grad", ",", "\n", "bounds", "=", "[", "(", "0", ",", "None", ")", "]", "\n", ")", ".", "x", "\n", "\n", "if", "abs", "(", "dof_new", "-", "dof", ")", "/", "dof", "<=", "tol", ":", "\n", "            ", "dof", "=", "dof_new", "\n", "break", "\n", "", "dof", "=", "dof_new", "\n", "i", "+=", "1", "\n", "\n", "", "return", "dof", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t": [[103, 148], ["_algo_utils.fit_gaussian", "range", "_algo_utils.t_EM_e_step", "obj.append", "_algo_utils.fit_t_dof", "mean.squeeze", "_algo_utils.regularize", "print", "z.sum", "numpy.einsum", "len", "numpy.abs", "mean.squeeze", "scipy.special.gammaln", "numpy.log", "numpy.log", "numpy.linalg.slogdet"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_gaussian", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.t_EM_e_step", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t_dof", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "fit_t", "(", "X", ",", "iter", "=", "20", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Fit Student-t distribution to data, according to EM-algorithm as\n    described in Murphy, Machine Learning: A Probabilistic Perspective.\n    Initialise with Gaussian MLE estimations.\n\n    Args:\n        X (array-like of shape (n_samples, n_features)): Training data.\n        iter (int, optional): Max number of EM iterations. Defaults to 200.\n        eps (float, optional): EM convergence tolerance. Defaults to 1e-6.\n\n    Returns:\n        list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features), float] :\n            Estimated mean vector,  covariance matrix and degree of freedom.\n    \"\"\"", "\n", "N", ",", "D", "=", "X", ".", "shape", "\n", "mean", ",", "cov", "=", "fit_gaussian", "(", "X", ")", "\n", "mu", "=", "X", "-", "mean", "[", "None", ",", ":", "]", "\n", "dof", "=", "3", "\n", "obj", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "#print(\"mean at start\", i, mean)", "\n", "        ", "if", "i", ">", "198", ":", "print", "(", "\"t not converged\"", ",", "obj", "[", "-", "1", "]", ")", "\n", "# E step", "\n", "z", ",", "delta", "=", "t_EM_e_step", "(", "D", ",", "dof", ",", "mu", ",", "cov", ")", "\n", "\n", "obj", ".", "append", "(", "\n", "-", "N", "*", "np", ".", "linalg", ".", "slogdet", "(", "cov", ")", "[", "1", "]", "/", "2", "-", "(", "z", "*", "delta", ")", ".", "sum", "(", ")", "/", "2", "-", "N", "*", "special", ".", "gammaln", "(", "dof", "/", "2", ")", "+", "N", "*", "dof", "*", "np", ".", "log", "(", "dof", "/", "2", ")", "/", "2", "\n", "+", "dof", "*", "(", "np", ".", "log", "(", "z", ")", "-", "z", ")", ".", "sum", "(", ")", "/", "2", ")", "\n", "\n", "if", "len", "(", "obj", ")", ">", "1", "and", "np", ".", "abs", "(", "obj", "[", "-", "1", "]", "-", "obj", "[", "-", "2", "]", ")", "<", "eps", ":", "\n", "            ", "break", "\n", "\n", "# M step", "\n", "", "mean", "=", "(", "X", "*", "z", "[", ":", ",", "None", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "z", ".", "sum", "(", ")", "\n", "#print(\"mean at end\", i, mean)", "\n", "mu", "=", "X", "-", "mean", ".", "squeeze", "(", ")", "[", "None", ",", ":", "]", "\n", "cov", "=", "np", ".", "einsum", "(", "'ij,ik->jk'", ",", "mu", ",", "mu", "*", "z", "[", ":", ",", "None", "]", ")", "/", "N", "\n", "dof", "=", "fit_t_dof", "(", "X", ",", "None", ",", "cov", ",", "dof", ",", "max_iter", "=", "1", ",", "mu", "=", "mu", ")", "\n", "#plt.plot(obj)", "\n", "#plt.show()", "\n", "#print(obj)", "\n", "", "return", "mean", ".", "squeeze", "(", ")", ",", "regularize", "(", "cov", ")", ",", "dof", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t2": [[149, 191], ["_algo_utils.fit_gaussian", "print", "np.zeros.copy", "np.zeros.copy", "numpy.zeros", "numpy.zeros", "range", "print", "_algo_utils.regularize", "sum", "numpy.dot", "scipy.optimize.minimize", "abs", "sum", "sum", "numpy.array", "scipy.special.digamma", "scipy.special.gammaln", "abs", "abs", "numpy.array", "numpy.log", "numpy.log", "numpy.dot", "numpy.log", "scipy.special.digamma", "numpy.log", "numpy.array", "numpy.dot", "numpy.linalg.inv", "_algo_utils.regularize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_gaussian", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "fit_t2", "(", "X", ",", "eps", "=", "1e-5", ",", "max_iter", "=", "20", ")", ":", "\n", "\n", "    ", "n", ",", "m", "=", "X", ".", "shape", "\n", "n_clusters", "=", "n", "+", "1e-5", "\n", "mean", ",", "covariance", "=", "fit_gaussian", "(", "X", ")", "\n", "v", "=", "1", "\n", "\n", "convergence", "=", "False", "\n", "ite", "=", "1", "\n", "\n", "while", "(", "not", "convergence", ")", "and", "ite", "<", "max_iter", ":", "\n", "        ", "print", "(", "\"m at beginning of \"", ",", "ite", ",", "mean", ")", "\n", "prev_mean", "=", "mean", ".", "copy", "(", ")", "\n", "prev_cov", "=", "covariance", ".", "copy", "(", ")", "\n", "prev_v", "=", "v", "\n", "\n", "ite", "=", "ite", "+", "1", "\n", "mean", "=", "np", ".", "zeros", "(", "m", ")", "\n", "covariance", "=", "np", ".", "zeros", "(", "[", "m", ",", "m", "]", ")", "\n", "sum_mean_weights", "=", "1e-5", "\n", "sum_nu_weights", "=", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "mean_weight", "=", "(", "v", "+", "m", ")", "/", "(", "v", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "mean", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "covariance", ")", ")", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "mean", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "sum_mean_weights", "+=", "mean_weight", "\n", "covariance", "+=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "mean", "]", ")", ".", "T", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "mean", "]", ")", ")", "*", "mean_weight", "\n", "mean", "+=", "mean_weight", "*", "X", "[", "i", "]", "\n", "sum_nu_weights", "+=", "(", "np", ".", "log", "(", "mean_weight", ")", "-", "mean_weight", "-", "np", ".", "log", "(", "(", "v", "+", "m", ")", "/", "2", ")", "+", "special", ".", "digamma", "(", "(", "v", "+", "m", ")", "/", "2", ")", ")", "/", "n_clusters", "\n", "", "def", "f", "(", "nu", ")", ":", "\n", "            ", "return", "special", ".", "gammaln", "(", "nu", "/", "2", ")", "-", "0.5", "*", "nu", "*", "np", ".", "log", "(", "nu", "/", "2", ")", "-", "0.5", "*", "nu", "*", "sum_nu_weights", "\n", "", "def", "grad_f", "(", "nu", ")", ":", "\n", "            ", "return", "0.5", "*", "special", ".", "digamma", "(", "nu", "/", "2", ")", "-", "0.5", "*", "np", ".", "log", "(", "nu", "/", "2", ")", "-", "0.5", "-", "0.5", "*", "sum_nu_weights", "\n", "", "v", "=", "optimize", ".", "minimize", "(", "f", ",", "v", ",", "jac", "=", "grad_f", ",", "bounds", "=", "[", "(", "0", ",", "None", ")", "]", ")", ".", "x", "[", "0", "]", "\n", "\n", "mean", "/=", "sum_mean_weights", "\n", "covariance", "/=", "n_clusters", "\n", "print", "(", "\"m at end of \"", ",", "ite", ",", "mean", ")", "\n", "convergence", "=", "abs", "(", "v", "-", "prev_v", ")", "+", "sum", "(", "abs", "(", "mean", "-", "prev_mean", ")", ")", "+", "sum", "(", "sum", "(", "abs", "(", "covariance", "-", "prev_cov", ")", ")", ")", "\n", "#print(convergence, \"at step\", ite)", "\n", "convergence", "=", "False", "#convergence < eps", "\n", "\n", "", "return", "mean", ",", "regularize", "(", "covariance", ")", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.label_outliers_kth2": [[194, 217], ["_algo_utils.label_outliers_kth2.split"], "function", ["None"], ["", "def", "label_outliers_kth2", "(", "X_k", ",", "mean", ",", "cov", ",", "thres", "=", "0", ")", ":", "\n", "    ", "\"\"\"Label outliers for kth class according to Mahalanobis distance.\n\n    Args:\n        X_k (array-like of shape (n_samples, n_features)): Training data for\n            kth class.\n        mean (array-like of shape (n_features,)): Mean vector.\n        cov (array-like of shape (n_features, n_features)): Scatter matrix.\n        thres (float, optional): Mahalanobis outlier threshold. Defaults to 0.\n\n    Returns:\n        array-like of type bool, shape (n_samples,) : whether samples are \n            outliers.\n    \"\"\"", "\n", "diff", "=", "X_k", "-", "mean", "\n", "maha", "=", "(", "np", ".", "dot", "(", "diff", ",", "np", ".", "linalg", ".", "inv", "(", "cov", ")", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "\n", "def", "split", "(", "n", ",", "perc", ")", ":", "\n", "        ", "a", "=", "int", "(", "np", ".", "floor", "(", "n", "*", "perc", ")", ")", "\n", "return", "a", ",", "n", "-", "a", "\n", "", "_", ",", "n_to_keep", "=", "split", "(", "X_k", ".", "shape", "[", "0", "]", ",", "thres", ")", "\n", "t", "=", "maha", "[", "np", ".", "argsort", "(", "maha", ")", "[", "n_to_keep", "-", "1", "]", "]", "\n", "outlierness", "=", "(", "maha", ">", "t", ")", "\n", "return", "outlierness", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.label_outliers": [[218, 246], ["y.copy", "numpy.unique", "enumerate", "int", "_algo_utils.label_outliers_kth2", "numpy.where"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.label_outliers_kth2"], ["", "def", "label_outliers", "(", "X", ",", "y", ",", "means", ",", "covs", ",", "thres", "=", "0.05", ")", ":", "\n", "    ", "\"\"\"Label outliers in data according to Mahalanobis distance.\n\n    Args:\n        X_k (array-like of shape (n_samples, n_features)): Training data for\n            kth class.\n        means (array-like of shape (n_features, n_classes)): Means vectors.\n        covs (array-like of shape (n_classes, n_features, n_features)): \n            Scatter matrices.\n        thres (float, optional): Mahalanobis threshold. Defaults to 0.05.\n\n    Returns:\n        array-like (shape (n_samples,)) : preds with outliers relabelled as -1.\n    \"\"\"", "\n", "if", "thres", "==", "0", ":", "\n", "        ", "return", "y", "\n", "\n", "", "y_new", "=", "y", ".", "copy", "(", ")", "\n", "ks", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "for", "ki", ",", "k", "in", "enumerate", "(", "ks", ")", ":", "\n", "        ", "k", "=", "int", "(", "k", ")", "\n", "outlierness", "=", "label_outliers_kth2", "(", "X", "[", "y", "==", "k", ",", ":", "]", ",", "means", "[", ":", ",", "ki", "]", ",", "covs", "[", "ki", ",", ":", ",", ":", "]", ",", "\n", "thres", "=", "thres", ")", "\n", "b", "=", "np", ".", "where", "(", "y", "==", "k", ")", "[", "0", "]", "[", "outlierness", "]", "\n", "y_new", "[", "b", "]", "=", "-", "1", "#k+5", "\n", "\n", "", "return", "y_new", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA.__init__": [[18, 21], ["_models_lda.LDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "\"distributional\"", ",", "pool_covs", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "method", ",", "pool_covs", "=", "pool_covs", ")", "\n", "self", ".", "test", "=", "\"me\"", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._kth_likelihood": [[22, 27], ["scipy.stats.multivariate_t"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.multivariate_t"], ["", "def", "_kth_likelihood", "(", "self", ",", "k", ")", ":", "\n", "        ", "return", "stats", ".", "multivariate_t", "(", "loc", "=", "self", ".", "means_", "[", ":", ",", "k", "]", ",", "\n", "shape", "=", "self", ".", "covariance_", "[", "k", ",", ":", ",", ":", "]", ",", "\n", "df", "=", "self", ".", "dofs_", "[", "k", "]", ",", "\n", "allow_singular", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._estimate_parameters": [[28, 50], ["_algo_utils.fit_t"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t"], ["", "def", "_estimate_parameters", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate parameters of one class according to Student-t class\n        conditional density (mean, scatter and degree of freedom).\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        Returns\n        -------\n        params : list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features), float]\\\n            Estimated mean vector, covariance matrix, degree of freedom.\n        \"\"\"", "\n", "#        if self.test == \"me\":", "\n", "#            return fit_t(X)", "\n", "#        elif self.test == \"test\":", "\n", "#            return fit_t2(X)", "\n", "#        else:", "\n", "#            raise ValueError(\"bleuh\")", "\n", "return", "fit_t", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._bose_k": [[51, 56], ["None"], "methods", ["None"], ["", "def", "_bose_k", "(", "self", ")", ":", "\n", "        ", "\"\"\" Generalised discriminant coefficient according to\n        Bose et al. (2015), for t-distributions.\n        \"\"\"", "\n", "return", "(", "0.5", "*", "(", "1", "+", "self", ".", "_M", "/", "self", ".", "dofs_", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._general_discriminants": [[57, 63], ["super()._general_discriminants", "scipy.special.gammaln", "scipy.special.gammaln", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA._general_discriminants"], ["", "def", "_general_discriminants", "(", "self", ",", "X", ")", ":", "\n", "# Generalised discriminant formula according to Bose et al. (2015)", "\n", "        ", "v", "=", "self", ".", "dofs_", "\n", "return", "super", "(", ")", ".", "_general_discriminants", "(", "X", ")", "+", "(", "special", ".", "gammaln", "(", "(", "v", "+", "self", ".", "_M", ")", "/", "2", ")", "-", "special", ".", "gammaln", "(", "v", "/", "2", ")", "-", "0.5", "*", "self", ".", "_M", "*", "np", ".", "log", "(", "v", ")", ")", "[", ":", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_LDA.fit": [[64, 74], ["super().fit", "numpy.array().squeeze", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "# Inherit LDA.fit documentation", "\n", "        ", "super", "(", ")", ".", "fit", "(", "X", ",", "y", ")", "\n", "\n", "if", "len", "(", "self", ".", "parameters_", "[", "0", "]", ")", "<", "3", ":", "\n", "            ", "self", ".", "parameters_", "=", "[", "param", "+", "[", "200", "]", "for", "param", "in", "self", ".", "parameters_", "]", "\n", "\n", "", "self", ".", "dofs_", "=", "np", ".", "array", "(", "[", "param", "[", "2", "]", "for", "param", "in", "self", ".", "parameters_", "]", ")", ".", "squeeze", "(", ")", "#1xK", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_t_lda.t_QDA.__init__": [[79, 81], ["_models_t_lda.t_LDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'distributional'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "method", ",", "pool_covs", "=", "False", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._e_step_indicator": [[19, 35], ["numpy.ones"], "methods", ["None"], ["def", "_e_step_indicator", "(", "self", ",", "X", ")", ":", "\n", "        ", "''' Pseudo E-step of clustering algorithm where all conditional \n        probabilities are replaced by ones according to the supervised labels.\n        \n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            data\n    \n        Returns\n        ----------\n        indicator_matrix: ndarray of shape (n_samples,)\n             Matrix representing determined \"class conditional probabilities\".\n             Single row as we only are concerned with one class.\n        '''", "\n", "return", "np", ".", "ones", "(", "(", "X", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._m_step": [[36, 84], ["_algo_utils.fit_gaussian", "numpy.minimum", "numpy.linalg.inv", "mean_new.copy", "sigma_new.copy", "_algo_utils.regularize", "_algo_utils.regularize", "numpy.dot", "safety", "safety().sum", "_algo_utils.get_reg_lambd", "numpy.dot", "math.sqrt", "numpy.dot", "_algo_utils.get_reg_lambd", "numpy.linalg.norm", "safety", "safety"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_gaussian", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.get_reg_lambd", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.get_reg_lambd"], ["", "def", "_m_step", "(", "self", ",", "X", ",", "cond_prob", ",", "max_iter", "=", "20", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "''' M-step of clustering algorithm used to estimate parameters given\n        conditional probabilities.\n        \n        Parameters\n        ----------\n        X: array-like of shape (n_samples, n_features)\n            data\n        cond_prob: array-like of shape (n_samples,)\n            Conditional probability matrix from E-step, for one class only, \n            i.e (cond_prob)_ik = P(Z_i=k|X_i=x_i) where k = 0\n        max_iter: int, default=20\n            Max number of fixed point iterations\n        eps: float, default=1e-6\n            Convergence tolerance\n    \n        Returns\n        ----------\n        mean: ndarray of shape (n_features,)\n            The new mean of each mixture component.\n        sigma: ndarray of shape (n_features, n_features)\n            The new regularized covariance of each mixture component.\n        '''", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "mean", ",", "sigma", "=", "fit_gaussian", "(", "X", ")", "\n", "convergence_fp", "=", "False", "\n", "ite_fp", "=", "1", "\n", "safety", "=", "lambda", "x", ":", "np", ".", "minimum", "(", "0.5", ",", "x", ")", "\n", "while", "(", "not", "convergence_fp", ")", "and", "ite_fp", "<", "max_iter", ":", "\n", "            ", "ite_fp", "+=", "1", "\n", "\n", "sigma_inv", "=", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "sigma", ")", ")", "\n", "diff", "=", "X", "-", "mean", "\n", "sq_maha", "=", "(", "np", ".", "dot", "(", "diff", ",", "sigma_inv", ")", "*", "diff", ")", ".", "sum", "(", "1", ")", "\n", "\n", "mean_new", "=", "np", ".", "dot", "(", "safety", "(", "cond_prob", "/", "sq_maha", ")", ",", "X", ")", "/", "(", "safety", "(", "cond_prob", "/", "sq_maha", ")", ".", "sum", "(", ")", "+", "get_reg_lambd", "(", ")", ")", "\n", "\n", "sigma_new", "=", "np", ".", "dot", "(", "safety", "(", "cond_prob", "/", "sq_maha", ")", "*", "diff", ".", "T", ",", "diff", ")", "/", "(", "n", "+", "get_reg_lambd", "(", ")", ")", "*", "m", "\n", "\n", "convergence_fp", "=", "sqrt", "(", "(", "(", "mean", "-", "mean_new", ")", "**", "2", ")", ".", "sum", "(", ")", "/", "m", ")", "<", "eps", "and", "np", ".", "linalg", ".", "norm", "(", "sigma_new", "-", "sigma", ",", "ord", "=", "'fro'", ")", "/", "m", "<", "eps", "\n", "\n", "mean", "=", "mean_new", ".", "copy", "(", ")", "\n", "sigma", "=", "sigma_new", ".", "copy", "(", ")", "\n", "\n", "", "return", "mean", ",", "regularize", "(", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._estimate_parameters_with_FEM": [[85, 106], ["_models_femda._FEM_base._e_step_indicator", "_models_femda._FEM_base._m_step", "numpy.trace"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._e_step_indicator", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._m_step"], ["", "def", "_estimate_parameters_with_FEM", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate parameters (mean, scatter) of one class with FEM algorithm,\n        according to flexible Elliptically Symmetrical model.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data of one class (i.e. {X: I(Zi=k|Xi=xi)=1})\n\n        Returns\n        -------\n        params : list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features)]\\\n            Estimated mean vector and covariance matrix.\n        \"\"\"", "\n", "\n", "cond_prob", "=", "self", ".", "_e_step_indicator", "(", "X", ")", "\n", "\n", "#run M-step", "\n", "mean", ",", "cov", "=", "self", ".", "_m_step", "(", "X", ",", "cond_prob", ")", "\n", "return", "mean", ",", "cov", "*", "X", ".", "shape", "[", "1", "]", "/", "np", ".", "trace", "(", "cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.LDA_FEM._estimate_parameters": [[113, 130], ["_models_femda.LDA_FEM._estimate_parameters_with_FEM"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._estimate_parameters_with_FEM"], ["def", "_estimate_parameters", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate parameters (mean, scatter) of one class with FEM algorithm,\n        according to flexible Elliptically Symmetrical model.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data of one class (i.e. {X: I(Zi=k|Xi=xi)=1})\n\n        Returns\n        -------\n        params : list of [ndarray of shape (n_features,),\n                ndarray of shape (n_features, n_features)]\\\n            Estimated mean vector and covariance matrix.\n        \"\"\"", "\n", "\n", "return", "self", ".", "_estimate_parameters_with_FEM", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.QDA_FEM.__init__": [[136, 138], ["_models_lda.LDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'distributional'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "method", ",", "pool_covs", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.t_LDA_FEM._estimate_parameters": [[143, 150], ["_models_femda.t_LDA_FEM._estimate_parameters_with_FEM", "_algo_utils.fit_t_dof"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._estimate_parameters_with_FEM", "home.repos.pwc.inspect_result.andrewwango_femda.femda._algo_utils.fit_t_dof"], ["def", "_estimate_parameters", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Estimate parameters (mean, scatter) of one class with FEM algorithm,\n        according to flexible Elliptically Symmetrical model, along with usual\n        degrees of freedom.\n        \"\"\"", "\n", "params", "=", "self", ".", "_estimate_parameters_with_FEM", "(", "X", ")", "\n", "return", "params", "+", "[", "fit_t_dof", "(", "X", ",", "*", "params", ",", "dof_0", "=", "3", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.t_QDA_FEM.__init__": [[155, 157], ["_models_t_lda.t_LDA.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ",", "method", "=", "'distributional'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "method", ",", "pool_covs", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA.__init__": [[164, 166], ["_models_femda.QDA_FEM.__init__"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "method", "=", "'distributional'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA._simple_mahalanobis": [[167, 186], ["numpy.dot", "numpy.linalg.inv"], "methods", ["None"], ["", "def", "_simple_mahalanobis", "(", "self", ",", "X", ",", "m", ",", "S", ")", ":", "\n", "        ", "\"\"\"Calculate Mahalanobis distance of data points.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n        m : array-like of shape (n_features,)\n            Mean vector.\n        S : array-like of shape (n_features, n_features)\n            Scatter matrix.\n\n        Returns\n        -------\n        d : ndarray of shape (n_samples,)\n            Mahalanobis distances.\n        \"\"\"", "\n", "diff", "=", "X", "-", "m", "\n", "return", "(", "np", ".", "dot", "(", "diff", ",", "np", ".", "linalg", ".", "inv", "(", "S", ")", ")", "*", "diff", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA._log_likelihoods": [[187, 210], ["numpy.zeros", "range", "numpy.linalg.slogdet", "numpy.log", "_models_femda.FEMDA._simple_mahalanobis"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA._simple_mahalanobis"], ["", "def", "_log_likelihoods", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"Calculate log likelihood of new data per class according to Flexible\n        Elliptically Symmetrical model using FEM E-step implementation.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            New data.\n\n        Returns\n        -------\n        p : ndarray of shape (n_classes, n_samples)\n            Log likelihood per class of new data.\n        \"\"\"", "\n", "N", ",", "p", "=", "X", ".", "shape", "\n", "log_maha", "=", "np", ".", "zeros", "(", "(", "self", ".", "_K", ",", "N", ")", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "_K", ")", ":", "\n", "            ", "log_maha", "[", "k", ",", ":", "]", "=", "np", ".", "log", "(", "self", ".", "_simple_mahalanobis", "(", "X", ",", "\n", "self", ".", "means_", "[", ":", ",", "k", "]", ",", "self", ".", "covariance_", "[", "k", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "_", ",", "logdets", "=", "np", ".", "linalg", ".", "slogdet", "(", "self", ".", "covariance_", ")", "\n", "pik", "=", "-", "0.5", "*", "(", "p", "*", "log_maha", "+", "logdets", "[", ":", ",", "None", "]", ")", "\n", "return", "pik", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N._normalise_centered": [[218, 240], ["X.copy", "numpy.unique", "mean_estimator", "_models_femda.FEMDA_N._normalise_centered._normalise"], "methods", ["None"], ["def", "_normalise_centered", "(", "self", ",", "X", ",", "y", ",", "mean_estimator", "=", "fit_gaussian", ")", ":", "\n", "        ", "\"\"\"Estimate means and normalise data based around them.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n        \n        mean_estimator : func, default=`_algo_utils.fit_gaussian`\n            Fucnction which returns list of parameters, the first element of\n            which returns a mean vector.\n        \"\"\"", "\n", "def", "_normalise", "(", "a", ")", ":", "\n", "            ", "return", "(", "a", ".", "T", "/", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ")", ")", ".", "T", "\n", "", "X_copy", "=", "X", ".", "copy", "(", ")", "\n", "for", "k", "in", "np", ".", "unique", "(", "y", ")", ":", "\n", "            ", "mean", "=", "mean_estimator", "(", "X", "[", "y", "==", "k", "]", ")", "[", "0", "]", "\n", "X_copy", "[", "y", "==", "k", "]", "=", "_normalise", "(", "X", "[", "y", "==", "k", "]", "-", "mean", ")", "+", "mean", "\n", "", "return", "X_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit": [[241, 258], ["_models_femda.FEMDA_N._normalise_centered", "print", "print", "super().fit", "_models_femda._FEM_base._estimate_parameters_with_FEM", "_models_femda._FEM_base"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N._normalise_centered", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda.FEMDA_N.fit", "home.repos.pwc.inspect_result.andrewwango_femda.femda._models_femda._FEM_base._estimate_parameters_with_FEM"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Fit pre-normalised FEMDA model according to data. The data are \n        pre-normalised using the means pre-estimated with FEM estimation.\n\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data.\n\n        y : array-like of shape (n_samples,)\n            Target values.\n        \"\"\"", "\n", "X_n", "=", "self", ".", "_normalise_centered", "(", "X", ",", "y", ",", "mean_estimator", "=", "\n", "lambda", "x", ":", "_FEM_base", "(", ")", ".", "_estimate_parameters_with_FEM", "(", "x", ")", ")", "\n", "print", "(", "\"X\"", ",", "X", ")", "\n", "print", "(", "\"X-N\"", ",", "X_n", ")", "\n", "return", "super", "(", ")", ".", "fit", "(", "X_n", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.labo_test.labo_test": [[24, 138], ["decision_rules_comparison_simulated_data.write_parameters_file", "decision_rules_comparison_simulated_data.save_results", "decision_rules_comparison_simulated_data.write_parameters_file", "decision_rules_comparison_simulated_data.save_results", "decision_rules_comparison_simulated_data.write_parameters_file", "decision_rules_comparison_simulated_data.save_results", "decision_rules_comparison_real_data.plot_results_contamination_rate", "decision_rules_comparison_real_data.save_results", "decision_rules_comparison_real_data.save_results", "decision_rules_comparison_real_data.save_results", "decision_rules_comparison_real_data.save_results", "decision_rules_comparison_real_data.save_results", "range", "range", "range", "range", "range", "range", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.write_parameters_file", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.write_parameters_file", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.write_parameters_file", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.plot_results_contamination_rate", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results"], ["def", "labo_test", "(", "path_results_simulated_data", "=", "path_results_simulated_data", ",", "\n", "path_results_real_data", "=", "path_results_real_data", ",", "\n", "path_dataset", "=", "path_dataset", "\n", ")", ":", "\n", "\n", "####################################################################################################################################", "\n", "###################################                                                              ###################################", "\n", "###################################                  Simulations donn\u00e9es simul\u00e9es                ###################################", "\n", "###################################                                                              ###################################", "\n", "####################################################################################################################################", "\n", "\n", "    ", "if", "simulation_gi", ":", "\n", "\n", "        ", "n", "=", "25000", "# 80% for train set and 20% for test set", "\n", "K", "=", "5", "\n", "priors", "=", "[", "1", "/", "K", "for", "i", "in", "range", "(", "K", ")", "]", "\n", "m", "=", "10", "\n", "simulation_id", "=", "1", "\n", "list_scenarios", "=", "[", "\"1-0-0-0-0 : 1\"", ",", "\n", "\"0-1-0-0-0 : 1\"", ",", "\n", "\"0-0-1-0-0 : 1\"", ",", "\n", "\"0-0-0-1-0 : 1\"", ",", "\n", "\"0-0-0-0-1 : 1\"", ",", "\n", "\"1-0-0-0-0 : 2\"", ",", "\n", "\"0-1-0-0-0 : 2\"", ",", "\n", "\"0-0-1-0-0 : 2\"", ",", "\n", "\"0-0-0-1-0 : 2\"", ",", "\n", "\"0-0-0-0-1 : 2\"", ",", "\n", "\"1-0-0-0-0 : 3\"", ",", "\n", "\"0-1-0-0-0 : 3\"", ",", "\n", "\"0-0-1-0-0 : 3\"", ",", "\n", "\"0-0-0-1-0 : 3\"", ",", "\n", "\"0-0-0-0-1 : 3\"", ",", "\n", "\"0-0.5-0-0.5-0 : 1\"", ",", "\n", "\"0-0.5-0-0.5-0 : 2\"", ",", "\n", "\"0-0.5-0-0.5-0 : 3\"", ",", "\n", "\"0-0.34-0-0.33-0.33 : 1\"", ",", "\n", "\"0-0.34-0-0.33-0.33 : 2\"", ",", "\n", "\"0-0.34-0-0.33-0.33 : 3\"", ",", "\n", "\"0-0.25-0.25-0.25-0.25 : 1\"", ",", "\n", "\"0-0.25-0.25-0.25-0.25 : 2\"", ",", "\n", "\"0-0.25-0.25-0.25-0.25 : 3\"", ",", "\n", "\"0-0.25-0.5-0.25-0 : 3\"", "\n", "]", "\n", "\n", "drcs", ".", "write_parameters_file", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "0.00", ",", "list_scenarios", ",", "simulation_id", ")", "\n", "drcs", ".", "save_results", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "list_scenarios", ",", "0.00", ",", "simulation_id", ",", "nb_simulations_MC", ")", "\n", "\n", "drcs", ".", "write_parameters_file", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "0.10", ",", "list_scenarios", ",", "simulation_id", ")", "\n", "drcs", ".", "save_results", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "list_scenarios", ",", "0.10", ",", "simulation_id", ",", "nb_simulations_MC", ")", "\n", "\n", "drcs", ".", "write_parameters_file", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "0.25", ",", "list_scenarios", ",", "simulation_id", ")", "\n", "drcs", ".", "save_results", "(", "path_results_simulated_data", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "list_scenarios", ",", "0.25", ",", "simulation_id", ",", "nb_simulations_MC", ")", "\n", "\n", "####################################################################################################################################", "\n", "###################################                                                              ###################################", "\n", "###################################                  Simulations donn\u00e9es r\u00e9elles                 ###################################", "\n", "###################################                                                              ###################################", "\n", "####################################################################################################################################", "\n", "\n", "", "if", "etude_ionosphere", ":", "\n", "        ", "dataset_name", "=", "\"Ionosphere\"", "\n", "for", "P_conta", "in", "[", "i", "*", "pas", "for", "i", "in", "range", "(", "int", "(", "1", "/", "pas", ")", "+", "1", ")", "]", ":", "\n", "            ", "drcr", ".", "save_results", "(", "path_results_real_data", ",", "dataset_name", ",", "nb_simulations_MC", "=", "nb_simulations_MC", ",", "freq_shuffle", "=", "freq_shuffle", ",", "p_conta", "=", "P_conta", ",", "perc_train_set_used", "=", "perc_train_set_used", ")", "\n", "#for Perc_train_set_used in [i * pas for i in range(1, int(1/pas))]:", "\n", "#drcr.save_results(path_results_real_data, dataset_name, nb_simulations_MC = nb_simulations_MC, freq_shuffle = freq_shuffle, p_conta = p_conta, perc_train_set_used = Perc_train_set_used)", "\n", "\n", "", "", "if", "etude_statlog", ":", "\n", "        ", "dataset_name", "=", "\"Statlog\"", "\n", "for", "P_conta", "in", "[", "i", "*", "pas", "for", "i", "in", "range", "(", "int", "(", "1", "/", "pas", ")", "+", "1", ")", "]", ":", "\n", "            ", "drcr", ".", "save_results", "(", "path_results_real_data", ",", "dataset_name", ",", "nb_simulations_MC", "=", "nb_simulations_MC", ",", "freq_shuffle", "=", "freq_shuffle", ",", "p_conta", "=", "P_conta", ",", "perc_train_set_used", "=", "perc_train_set_used", ")", "\n", "#for Perc_train_set_used in [i * pas for i in range(1, int(1/pas))]:", "\n", "#drcr.save_results(path_results_real_data, dataset_name, nb_simulations_MC = nb_simulations_MC, freq_shuffle = freq_shuffle, p_conta = p_conta, perc_train_set_used = Perc_train_set_used)", "\n", "\n", "", "", "if", "etude_breast_cancer", ":", "\n", "        ", "dataset_name", "=", "\"Breast cancer\"", "\n", "for", "P_conta", "in", "[", "i", "*", "pas", "for", "i", "in", "range", "(", "int", "(", "1", "/", "pas", ")", "+", "1", ")", "]", ":", "\n", "            ", "drcr", ".", "save_results", "(", "path_results_real_data", ",", "dataset_name", ",", "nb_simulations_MC", "=", "nb_simulations_MC", ",", "freq_shuffle", "=", "freq_shuffle", ",", "p_conta", "=", "P_conta", ",", "perc_train_set_used", "=", "perc_train_set_used", ")", "\n", "#for Perc_train_set_used in [i * pas for i in range(1, int(1/pas))]:", "\n", "#drcr.save_results(path_results_real_data, dataset_name, nb_simulations_MC = nb_simulations_MC, freq_shuffle = freq_shuffle, p_conta = p_conta, perc_train_set_used = Perc_train_set_used)", "\n", "\n", "", "", "if", "etude_ecoli", ":", "\n", "        ", "dataset_name", "=", "\"Ecoli\"", "\n", "for", "P_conta", "in", "[", "i", "*", "pas", "for", "i", "in", "range", "(", "int", "(", "1", "/", "pas", ")", "+", "1", ")", "]", ":", "\n", "            ", "drcr", ".", "save_results", "(", "path_results_real_data", ",", "dataset_name", ",", "nb_simulations_MC", "=", "nb_simulations_MC", ",", "freq_shuffle", "=", "freq_shuffle", ",", "p_conta", "=", "P_conta", ",", "perc_train_set_used", "=", "perc_train_set_used", ")", "\n", "#for Perc_train_set_used in [i * pas for i in range(1, int(1/pas))]:", "\n", "#drcr.save_results(path_results_real_data, dataset_name, nb_simulations_MC = nb_simulations_MC, freq_shuffle = freq_shuffle, p_conta = p_conta, perc_train_set_used = Perc_train_set_used)", "\n", "\n", "", "", "if", "etude_spambase", ":", "\n", "        ", "dataset_name", "=", "\"Spambase\"", "\n", "for", "P_conta", "in", "[", "i", "*", "pas", "for", "i", "in", "range", "(", "int", "(", "1", "/", "pas", ")", "+", "1", ")", "]", ":", "\n", "            ", "drcr", ".", "save_results", "(", "path_results_real_data", ",", "dataset_name", ",", "nb_simulations_MC", "=", "nb_simulations_MC", ",", "freq_shuffle", "=", "freq_shuffle", ",", "p_conta", "=", "P_conta", ",", "perc_train_set_used", "=", "perc_train_set_used", ")", "\n", "#for Perc_train_set_used in [i * pas for i in range(1, int(1/pas))]:", "\n", "#drcr.save_results(path_results_real_data, dataset_name, nb_simulations_MC = nb_simulations_MC, freq_shuffle = freq_shuffle, p_conta = p_conta, perc_train_set_used = Perc_train_set_used)", "\n", "\n", "####################################################################################################################################", "\n", "###################################                                                              ###################################", "\n", "###################################                     Trac\u00e9 des r\u00e9sultats                      ###################################", "\n", "###################################                                                              ###################################", "\n", "####################################################################################################################################     ", "\n", "\n", "", "", "if", "visualization", ":", "\n", "        ", "conta_min", "=", "0.", "\n", "conta_max", "=", "1", "\n", "dataset_used_min", "=", "0.1", "\n", "dataset_used_max", "=", "1", "\n", "methods1", "=", "[", "\"LDA_g - classic\"", ",", "\"LDA_g - M\"", ",", "\"QDA_g - classic\"", ",", "\"LDA_t\"", "]", "\n", "methods2", "=", "[", "\"QDA_g - M\"", ",", "\"GQDA\"", ",", "\"QDA_t\"", ",", "\"FEMDA\"", "]", "\n", "\n", "dataset_name", "=", "\"Ionosphere\"", "\n", "name_conta", "=", "\"evolution - contamination - All results\"", "\n", "name_dataset_used", "=", "\"evolution - dataset used - All results\"", "\n", "\n", "drcr", ".", "plot_results_contamination_rate", "(", "path_results_real_data", ",", "dataset_name", ",", "methods2", ",", "name_conta", ",", "conta_min", "=", "conta_min", ",", "conta_max", "=", "conta_max", ")", "\n", "#drcr.plot_results_dataset_used(path_results_real_data, dataset_name, methods2, name_dataset_used, dataset_used_min = dataset_used_min, dataset_used_max = dataset_used_max)", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.__init__": [[579, 594], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n", ",", "all_pi", ",", "all_mu", ",", "all_sigma", ",", "all_tau", ",", "all_PDF", ",", "p_conta", ",", "conta", ")", ":", "\n", "\n", "        ", "self", ".", "m", "=", "all_sigma", ".", "shape", "[", "1", "]", "\n", "self", ".", "K", "=", "all_sigma", ".", "shape", "[", "0", "]", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "all_pi", "=", "all_pi", "\n", "self", ".", "all_mu", "=", "all_mu", "\n", "self", ".", "all_sigma", "=", "all_sigma", "\n", "self", ".", "all_tau", "=", "all_tau", "\n", "self", ".", "all_PDF", "=", "all_PDF", "\n", "self", ".", "p_conta", "=", "p_conta", "\n", "self", ".", "conta", "=", "conta", "\n", "self", ".", "X", "=", "np", ".", "zeros", "(", "[", "n", ",", "all_sigma", ".", "shape", "[", "1", "]", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "zeros", "(", "n", ")", "\n", "self", ".", "PDFs", "=", "np", ".", "zeros", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.generateSample": [[595, 606], ["numpy.random.randint", "len", "numpy.random.rand", "simulateur.dataSimulation.conta", "PDF"], "methods", ["None"], ["", "def", "generateSample", "(", "self", ",", "k", ")", ":", "\n", "\n", "        ", "mu", "=", "self", ".", "all_mu", "[", "k", "]", "\n", "sigma", "=", "self", ".", "all_sigma", "[", "k", "]", "\n", "tau", "=", "self", ".", "all_tau", "[", "k", "]", "(", ")", "\n", "j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "all_PDF", "[", "k", "]", ")", ")", "\n", "PDF", "=", "self", ".", "all_PDF", "[", "k", "]", "[", "j", "]", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "p_conta", ":", "\n", "            ", "return", "self", ".", "conta", "(", "mu", ",", "tau", "*", "sigma", ")", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "return", "PDF", "(", "mu", ",", "sigma", ",", "tau", ")", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.generateSamples": [[607, 619], ["range", "numpy.random.rand", "simulateur.dataSimulation.generateSample"], "methods", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.generateSample"], ["", "", "def", "generateSamples", "(", "self", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n", ")", ":", "\n", "            ", "RND", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "k", "=", "0", "\n", "while", "RND", ">", "self", ".", "all_pi", "[", "k", "]", ":", "\n", "\n", "                ", "RND", "=", "RND", "-", "self", ".", "all_pi", "[", "k", "]", "\n", "k", "=", "k", "+", "1", "\n", "", "self", ".", "X", "[", "i", "]", ",", "self", ".", "PDFs", "[", "i", "]", "=", "self", ".", "generateSample", "(", "k", ")", "\n", "self", ".", "labels", "[", "i", "]", "=", "k", "\n", "", "return", "self", ".", "X", ",", "self", ".", "labels", ",", "self", ".", "PDFs", "", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genereRandomCovarianceMatrix": [[176, 212], ["numpy.diag", "range", "numpy.linalg.svd", "numpy.dot", "numpy.dot", "numpy.random.rand", "numpy.random.randn", "numpy.dot", "numpy.matrix.trace", "numpy.random.rand"], "function", ["None"], ["def", "genereRandomCovarianceMatrix", "(", "m", ",", "shape", "=", "1", ")", ":", "\n", "\n", "    ", "\"\"\" Randomly generates a covariance matrix with Tr = m by first generating random eigenvalues and then \n        a random orthogonal matrix. The orthogonal matrix is drawn uniformly on O(m) and the \n        eigenvalues are drawn with a truncated N(1, shape**2).\n    \n    Parameters\n    ----------\n    m     : integer > 0\n            dimension of the data\n    shape : float \n            Standard deviation of the gaussian distribution of eigenvalues \n    Returns\n    -------\n    sigma : 2-d array, positive-definite matrix\n            random covariance matrix with controlled eigenvalues and Tr = m\n    \"\"\"", "\n", "\n", "stretch", "=", "1", "# parameter to stretch the covariance matrix ", "\n", "sigma_diag", "=", "np", ".", "diag", "(", "shape", "*", "np", ".", "random", ".", "rand", "(", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "rnd", "=", "np", ".", "random", ".", "rand", "(", ")", "\n", "if", "0.00", "<", "rnd", "<", "0.25", ":", "\n", "            ", "sigma_diag", "[", "i", "]", "[", "i", "]", "=", "sigma_diag", "[", "i", "]", "[", "i", "]", "/", "stretch", "\n", "", "if", "0.25", "<", "rnd", "<", "0.50", ":", "\n", "            ", "sigma_diag", "[", "i", "]", "[", "i", "]", "=", "sigma_diag", "[", "i", "]", "[", "i", "]", "/", "(", "2", "*", "stretch", ")", "\n", "", "if", "0.50", "<", "rnd", "<", "0.75", ":", "\n", "            ", "sigma_diag", "[", "i", "]", "[", "i", "]", "=", "sigma_diag", "[", "i", "]", "[", "i", "]", "*", "stretch", "\n", "", "if", "0.75", "<", "rnd", "<", "1.00", ":", "\n", "            ", "sigma_diag", "[", "i", "]", "[", "i", "]", "=", "sigma_diag", "[", "i", "]", "[", "i", "]", "*", "2", "*", "stretch", "\n", "\n", "", "", "u", ",", "s", ",", "vh", "=", "np", ".", "linalg", ".", "svd", "(", "np", ".", "random", ".", "randn", "(", "m", ",", "m", ")", ",", "full_matrices", "=", "False", ")", "\n", "mat_rot", "=", "np", ".", "dot", "(", "u", ",", "vh", ")", "\n", "sigma", "=", "np", ".", "dot", "(", "mat_rot", ",", "np", ".", "dot", "(", "sigma_diag", ",", "mat_rot", ".", "T", ")", ")", "\n", "\n", "return", "sigma", "*", "m", "/", "np", ".", "matrix", ".", "trace", "(", "sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_mu": [[213, 239], ["range", "all_mu.append", "numpy.array", "numpy.array", "simulateur.random_sphere_point"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.random_sphere_point"], ["", "def", "genere_all_mu", "(", "m", ",", "K", ",", "r", "=", "1", ")", ":", "\n", "\n", "    ", "\"\"\" Randomly generates the centers of the clusters on the m-dimensional r-sphere.\n    \n    Parameters\n    ----------\n    m      : integer > 0\n             dimension of the data\n    K      : integer > 0\n             number of clusters\n    r      : float > 0\n             radius of the sphere where the centers are randomly drawn\n    Returns\n    -------\n    all_mu         : 2-d array of size K*m\n                     Matrix of the mean vectors of size m of the K clusters\n    \"\"\"", "\n", "\n", "all_mu", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "         ", "all_mu", ".", "append", "(", "random_sphere_point", "(", "m", ")", "*", "r", ")", "\n", "\n", "", "if", "I_WANT_FIXED_PARAMETERS_FOR_SIMULATIONS", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "MU0", ",", "MU1", ",", "MU2", ",", "MU3", ",", "MU4", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "all_mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_sigma": [[240, 264], ["range", "all_sigma.append", "numpy.array", "numpy.array", "simulateur.genereRandomCovarianceMatrix"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genereRandomCovarianceMatrix"], ["", "", "def", "genere_all_sigma", "(", "m", ",", "K", ")", ":", "\n", "\n", "    ", "\"\"\" Randomly generates the shape matrix of the clusters.\n    \n    Parameters\n    ----------\n    m      : integer > 0\n             dimension of the data\n    K      : integer > 0\n             number of clusters\n    Returns\n    -------\n    all_sigma      : 3-d array of size K*m*m\n                     Tensor of the shape matrix of the K clusters\n    \"\"\"", "\n", "\n", "all_sigma", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "all_sigma", ".", "append", "(", "genereRandomCovarianceMatrix", "(", "m", ")", ")", "\n", "\n", "", "if", "I_WANT_FIXED_PARAMETERS_FOR_SIMULATIONS", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "SIGMA0", ",", "SIGMA1", ",", "SIGMA2", ",", "SIGMA3", ",", "SIGMA4", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "all_sigma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_PDF": [[265, 334], ["type_melanges.split", "len", "int", "numpy.random.rand", "simulateur.genere_all_PDF.genere_cluster_PDF"], "function", ["None"], ["", "", "def", "genere_all_PDF", "(", "scenario", ",", "K", ",", "test_real_shift", ",", "range_beta", "=", "10", ",", "range_nu", "=", "10", ",", "q", "=", "1000", ")", ":", "\n", "\n", "    ", "\"\"\" Randomly generates the matrix of the eventually identical K*q distributions that will be used\n        to generate the points of each cluster. Row k of the matrix corresponds to the q distributions\n        available to generate the points of cluster k. There are four families of disributions available :\n            -> Generalized gaussian distributions\n            -> Inverse gaussian distributions\n            -> t-distributions\n            -> k-distributions\n        distributions are generated according to a scenario. For example,  \"0-0.5-0-0.5-0 : 1\" means :\n            -> 0%  of multivariate classic gaussian distributions\n            -> 50% of multivariate generalized gaussian distributions\n            -> 0%  of multivariate inverse gaussian distributions\n            -> 50% of multivariate t-distributions\n            -> 0%  of multivariate k-distributions\n            \n            -> 1 : parameters for all distributions families will be the same for all the points of all clusters\n            -> 2 : parameters for all distributions families will be the same for all the points of the same clusters\n            -> 3 : parameters for all distributions families will be different for all the points\n        \n        finally, it is possible to combine different scenarios for the clusters by concatenating different mixture with\n        a ; such as \"0-0.25-0.25-0.25-0.25 ; 0-0.5-0-0.5-0 ; 0-0.34-0-0.33-0.33 ; 0-1-0-0-0 : 3\".\n            \n    Parameters\n    ----------\n    scenario   : str\n                 scenario used to generate the data\n    K          : integer > 0\n                 number of clusters\n    range_beta : integer >=0\n                 beta parameter for generalized and inverse gaussian distribution families are drawn in [1 ; 1 + range_beta]\n    range_nu   : integer >=0\n                 nu parameter for generalized and inverse gaussian distribution families are drawn in [1 ; 1 + range_beta]\n    q          : integer >=0\n                 number of distributions used to generate the points of one cluster\n    Returns\n    -------\n    all_PDF    : 2-d array of distributions of size K*q\n                 matrix of the eventually identical K*q distributions used to generate the points of all the clusters\n    \"\"\"", "\n", "\n", "type_melanges", ",", "parametres", "=", "scenario", ".", "split", "(", "\" : \"", ")", "[", "0", "]", ",", "int", "(", "scenario", ".", "split", "(", "\" : \"", ")", "[", "1", "]", ")", "\n", "types_clusters", "=", "type_melanges", ".", "split", "(", "\" ; \"", ")", "\n", "nb_types_clusters", "=", "len", "(", "types_clusters", ")", "\n", "\n", "if", "parametres", "==", "1", ":", "\n", "        ", "matrix_beta", "=", "np", ".", "ones", "(", "[", "K", ",", "q", "]", ")", "*", "(", "0.25", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "range_beta", ")", "\n", "matrix_nu", "=", "np", ".", "ones", "(", "[", "K", ",", "q", "]", ")", "*", "(", "1", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "range_nu", ")", "\n", "", "if", "parametres", "==", "2", ":", "\n", "        ", "matrix_beta", "=", "0.25", "+", "np", ".", "random", ".", "rand", "(", "K", ",", "1", ")", "@", "np", ".", "ones", "(", "[", "1", ",", "q", "]", ")", "*", "range_beta", "\n", "matrix_nu", "=", "1", "+", "np", ".", "random", ".", "rand", "(", "K", ",", "1", ")", "@", "np", ".", "ones", "(", "[", "1", ",", "q", "]", ")", "*", "range_nu", "\n", "", "if", "parametres", "==", "3", ":", "\n", "        ", "matrix_beta", "=", "0.25", "+", "np", ".", "random", ".", "rand", "(", "K", ",", "q", ")", "*", "range_beta", "\n", "matrix_nu", "=", "1", "+", "np", ".", "random", ".", "rand", "(", "K", ",", "q", ")", "*", "range_nu", "\n", "\n", "", "def", "genere_cluster_PDF", "(", "type_cluster", ")", ":", "\n", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", ",", "_", "=", "float", "(", "type_cluster", ".", "split", "(", "\"-\"", ")", "[", "0", "]", ")", ",", "float", "(", "type_cluster", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", ",", "float", "(", "type_cluster", ".", "split", "(", "\"-\"", ")", "[", "2", "]", ")", ",", "float", "(", "type_cluster", ".", "split", "(", "\"-\"", ")", "[", "3", "]", ")", ",", "float", "(", "type_cluster", ".", "split", "(", "\"-\"", ")", "[", "4", "]", ")", "\n", "rnd", "=", "np", ".", "random", ".", "rand", "(", "q", ")", "\n", "return", "[", "0", "*", "(", "rnd", "[", "j", "]", "<", "a", ")", "+", "1", "*", "(", "a", "<=", "rnd", "[", "j", "]", "<", "a", "+", "b", ")", "+", "2", "*", "(", "a", "+", "b", "<=", "rnd", "[", "j", "]", "<", "a", "+", "b", "+", "c", ")", "+", "3", "*", "(", "a", "+", "b", "+", "c", "<=", "rnd", "[", "j", "]", "<", "a", "+", "b", "+", "c", "+", "d", ")", "+", "4", "*", "(", "a", "+", "b", "+", "c", "+", "d", "<=", "rnd", "[", "j", "]", ")", "for", "j", "in", "range", "(", "q", ")", "]", "\n", "\n", "", "matrix_PDF", "=", "[", "genere_cluster_PDF", "(", "types_clusters", "[", "np", ".", "random", ".", "randint", "(", "nb_types_clusters", ")", "]", ")", "for", "i", "in", "range", "(", "K", ")", "]", "\n", "all_PDF", "=", "[", "[", "lambda", "mu", ",", "sigma", ",", "tau", ",", "nu", "=", "matrix_nu", "[", "i", "]", "[", "j", "]", ",", "beta", "=", "matrix_beta", "[", "i", "]", "[", "j", "]", ",", "PDF", "=", "matrix_PDF", "[", "i", "]", "[", "j", "]", ":", "multivariate_generalized_gaussian", "(", "mu", ",", "sigma", ",", "tau", ",", "1", ")", "*", "(", "PDF", "==", "0", ")", "+", "multivariate_generalized_gaussian", "(", "mu", ",", "sigma", ",", "tau", ",", "beta", ")", "*", "(", "PDF", "==", "1", ")", "+", "multivariate_inverse_gaussian", "(", "mu", ",", "sigma", ",", "tau", ",", "beta", ")", "*", "(", "PDF", "==", "2", ")", "+", "multivariate_t", "(", "mu", ",", "sigma", ",", "tau", ",", "nu", ")", "*", "(", "PDF", "==", "3", ")", "+", "multivariate_k", "(", "mu", ",", "sigma", ",", "tau", ",", "nu", ")", "*", "(", "PDF", "==", "4", ")", "for", "j", "in", "range", "(", "q", ")", "]", "for", "i", "in", "range", "(", "K", ")", "]", "\n", "\n", "if", "test_real_shift", ":", "\n", "        ", "list_betas", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "100", ",", "10", ")", "]", "\n", "all_PDF", "=", "[", "[", "lambda", "mu", ",", "sigma", ",", "tau", ",", "beta", "=", "list_betas", "[", "i", "]", ":", "multivariate_generalized_gaussian", "(", "mu", ",", "sigma", ",", "tau", ",", "beta", ")", "]", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "\n", "", "return", "all_PDF", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_parametres_simulation": [[335, 411], ["simulateur.genere_all_PDF", "simulateur.genere_all_mu", "simulateur.genere_all_sigma", "numpy.random.rand", "numpy.random.multivariate_normal", "numpy.random.multivariate_normal", "range", "simulateur.genere_parametres_simulation.Tau"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_PDF", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_mu", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_all_sigma"], ["", "def", "genere_parametres_simulation", "(", "m", ",", "n", ",", "K", ",", "priors", ",", "scenario", ",", "p_conta", ",", "test_real_shift", "=", "False", ")", ":", "\n", "\n", "    ", "\"\"\" Generates the parameters for the simulation.\n    \n    Parameters\n    ----------\n    m        : integer > 0\n               dimension of the data\n    n        : integer > 0\n               number of samples generated      \n    K        : integer > 0\n               number of clusters\n    priors   : 1-d list of float of size K\n               list of probability of all clusters\n    scenario : str\n               scenario used to generate the data\n    p_conta  : float >= 0\n               probability of drawing a contaminated sample  \n    Returns\n    -------\n    n         : integer > 0\n                number of samples generated \n    priors    : 1-d list of float of size K\n                list of probability of all clusters\n    all_mu    : 2-d array of size K*m\n                matrix of the mean vectors of size m of the K clusters\n    all_sigma : 3-d array of size K*m*m\n                tensor of the shape matrix of the K clusters\n    all_tau   : 1-d list of size K\n                list of K functions to simulate tau for each cluster\n    all_PDF        : list of K lists of potentially different sizes, each sub-list\n                     indicates all PDF available to generate a sample for each cluster. \n                     For each generation, a PDF is chosen uniformly randomly among the \n                     ones availables.\n    p_conta : float >= 0\n                     Probability of drawing a contaminated sample\n    conta   : function \n                     Takes as input mean and covariance matrix and returns a contaminated sample      \n    \"\"\"", "\n", "\n", "def", "conta", "(", ")", ":", "\n", "\n", "        ", "\"\"\" Generate a contaminated sample using one of the two fixed-distributions to add noise.\n        \n        Returns\n        -------\n        x     : 1-d array of size m\n                contaminated sample generated\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "return", "multivariate_normal", "(", "MU_NOISE_0", ",", "SIGMA_NOISE_0", ")", "\n", "", "else", ":", "\n", "            ", "return", "multivariate_normal", "(", "MU_NOISE_1", ",", "SIGMA_NOISE_1", ")", "\n", "\n", "", "", "def", "Tau", "(", "a", ",", "b", ")", ":", "\n", "\n", "        ", "\"\"\" Generates a nuisance parameter as a random real drawn between a and b.\n        \n        Parameters\n        ----------\n        a   : float > 0\n              lower bound for the random drawing\n        b   : float > 0\n              upper bound for the random drawing\n        Returns\n        -------\n        tau : float > 0\n              nuisance parameter\n        \"\"\"", "\n", "return", "a", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "b", "-", "a", ")", "\n", "\n", "", "list_range_tau", "=", "[", "(", "1", ",", "1", ")", "for", "k", "in", "range", "(", "K", ")", "]", "\n", "all_tau", "=", "[", "lambda", "a", "=", "list_range_tau", "[", "i", "]", "[", "0", "]", ",", "b", "=", "list_range_tau", "[", "i", "]", "[", "1", "]", ":", "Tau", "(", "1", ",", "10", ")", "for", "i", "in", "range", "(", "K", ")", "]", "\n", "all_PDF", "=", "genere_all_PDF", "(", "scenario", ",", "K", ",", "test_real_shift", ")", "\n", "\n", "return", "n", ",", "priors", ",", "genere_all_mu", "(", "m", ",", "K", ")", ",", "genere_all_sigma", "(", "m", ",", "K", ")", ",", "all_tau", ",", "all_PDF", ",", "p_conta", ",", "conta", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.random_sphere_point": [[412, 429], ["numpy.random.normal", "numpy.sqrt", "sum"], "function", ["None"], ["", "def", "random_sphere_point", "(", "m", ")", ":", "\n", "\n", "    ", "\"\"\" Generate a point uniformly drawn on the unit m-dimensional sphere\n    \n    Parameters\n    ----------\n    m : integer > 0\n        dimension of the data\n    Returns\n    -------\n    x : 1-d array of size m\n        sample generated\n    \"\"\"", "\n", "\n", "Z", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "1", ",", "m", ")", "\n", "\n", "return", "Z", "/", "np", ".", "sqrt", "(", "sum", "(", "Z", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.multivariate_generalized_gaussian": [[430, 451], ["numpy.dot", "numpy.random.gamma", "scipy.linalg.sqrtm", "simulateur.random_sphere_point", "len", "len"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.random_sphere_point"], ["", "def", "multivariate_generalized_gaussian", "(", "mu", ",", "sigma", ",", "p", ",", "beta", ")", ":", "\n", "\n", "    ", "\"\"\" Generate a sample drawn from a multivariate generalized gaussian distribution.\n    \n    Parameters\n    ----------\n    mu    : 1-d array of size m\n            mean of the distribution\n    sigma : 2-d array of size m*m\n            shape matrix with det = 1\n    p     : float > 0\n            scale parameter\n    beta  : float > 0\n            shape parameter\n    Returns\n    -------\n    x     : 1-d array of size m\n            sample generated\n    \"\"\"", "\n", "\n", "return", "mu", "+", "gamma", "(", "len", "(", "mu", ")", "/", "(", "2", "*", "beta", ")", ",", "2", ")", "**", "(", "1", "/", "(", "2", "*", "beta", ")", ")", "*", "np", ".", "dot", "(", "sqrtm", "(", "p", "*", "sigma", ")", ",", "random_sphere_point", "(", "len", "(", "mu", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.multivariate_inverse_gaussian": [[452, 473], ["numpy.random.multivariate_normal", "numpy.sqrt", "numpy.zeros", "numpy.random.wald", "len"], "function", ["None"], ["", "def", "multivariate_inverse_gaussian", "(", "mu", ",", "sigma", ",", "p", ",", "beta", ")", ":", "\n", "\n", "    ", "\"\"\" Generate a sample drawn from a multivariate t distribution.\n    \n    Parameters\n    ----------\n    mu    : 1-d array of size m\n            mean of the distribution\n    sigma : 2-d array of size m*m\n            shape matrix with det = 1\n    p     : float > 0\n            scale parameter\n    beta  : float > 0\n            shape parameter\n    Returns\n    -------\n    x     : 1-d array of size m\n            sample generated\n    \"\"\"", "\n", "\n", "return", "mu", "+", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "mu", ")", ")", ",", "p", "*", "sigma", ")", "*", "np", ".", "sqrt", "(", "wald", "(", "1", ",", "beta", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.multivariate_t": [[474, 495], ["numpy.random.multivariate_normal", "numpy.sqrt", "numpy.zeros", "len", "numpy.random.gamma"], "function", ["None"], ["", "def", "multivariate_t", "(", "mu", ",", "sigma", ",", "p", ",", "nu", ")", ":", "\n", "\n", "    ", "\"\"\" Generate a sample drawn from a multivariate t distribution.\n    \n    Parameters\n    ----------\n    mu    : 1-d array of size m\n            mean of the distribution\n    sigma : 2-d array of size m*m\n            shape matrix with det = 1\n    p     : float > 0\n            scale parameter\n    nu    : integer > 0\n            Degree of freedom of the distribution\n    Returns\n    -------\n    x     : 1-d array of size m\n            sample generated\n    \"\"\"", "\n", "\n", "return", "mu", "+", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "mu", ")", ")", ",", "p", "*", "sigma", ")", "*", "np", ".", "sqrt", "(", "1", "/", "gamma", "(", "nu", "/", "2", ",", "2", "/", "nu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.multivariate_k": [[496, 517], ["numpy.random.multivariate_normal", "numpy.sqrt", "numpy.zeros", "numpy.random.gamma", "len"], "function", ["None"], ["", "def", "multivariate_k", "(", "mu", ",", "sigma", ",", "p", ",", "nu", ")", ":", "\n", "\n", "    ", "\"\"\" Generate a sample drawn from a multivariate t distribution.\n    \n    Parameters\n    ----------\n    mu    : 1-d array of size m\n            mean of the distribution\n    sigma : 2-d array of size m*m\n            shape matrix with det = 1\n    p     : float > 0\n            scale parameter\n    nu    : integer > 0\n            Degree of freedom of the distribution\n    Returns\n    -------\n    x     : 1-d array of size m\n            sample generated\n    \"\"\"", "\n", "\n", "return", "mu", "+", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "mu", ")", ")", ",", "p", "*", "sigma", ")", "*", "np", ".", "sqrt", "(", "gamma", "(", "nu", ",", "1", "/", "nu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.run_experiments.run_experiments": [[5, 15], ["labo_test.labo_test", "os.path.join", "open", "json.load", "os.path.abspath", "run_experiments.run_experiments.full_path"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.labo_test.labo_test"], ["def", "run_experiments", "(", ")", ":", "\n", "    ", "def", "full_path", "(", "path", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "path", ")", "\n", "\n", "", "with", "open", "(", "full_path", "(", "\"paths.config\"", ")", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "labo_test", "(", "path_results_simulated_data", "=", "data", "[", "\"path_results_simulated_data\"", "]", ",", "\n", "path_results_real_data", "=", "data", "[", "\"path_results_real_data\"", "]", ",", "\n", "path_dataset", "=", "data", "[", "\"path_dataset\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.time_needed": [[17, 27], ["str", "str", "str"], "function", ["None"], ["def", "time_needed", "(", "nb_sec", ")", ":", "\n", "\n", "    ", "\"\"\" Returns a string with nb_sec converted in hours, minutes and seconds.\n    \"\"\"", "\n", "\n", "nb_heures", "=", "nb_sec", "//", "3600", "\n", "nb_min", "=", "(", "nb_sec", "-", "nb_heures", "*", "3600", ")", "//", "60", "\n", "nb_s", "=", "(", "nb_sec", "-", "nb_heures", "*", "3600", "-", "nb_min", "*", "60", ")", "\n", "\n", "return", "str", "(", "nb_heures", ")", "+", "\" h \"", "+", "str", "(", "nb_min", ")", "+", "\" min \"", "+", "str", "(", "nb_s", ")", "+", "\"s\"", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine": [[28, 58], ["decision_rules_comparison_real_data.contamine_ionosphere", "decision_rules_comparison_real_data.contamine_statlog", "decision_rules_comparison_real_data.contamine_breast_cancer", "decision_rules_comparison_real_data.contamine_ecoli", "decision_rules_comparison_real_data.contamine_spambase"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_ionosphere", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_statlog", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_breast_cancer", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_ecoli", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_spambase"], ["", "def", "contamine", "(", "X", ",", "p_conta", ",", "dataset_name", ")", ":", "\n", "\n", "    ", "\"\"\" Contaminates observations of dataset X with probability p_conta. The\n    type of contamination is specific for each dataset.\n    \n    Parameters\n    ----------\n    X              : 2-d array of size n*m\n                     dataset \n    p_conta_distri : float between 0 and 1\n                    probability to contaminate an observation\n    dataset_name   : str\n                    Dataset to contaminate\n                    \n    Returns\n    -------\n    X              : 2-d array of size n*m\n                     dataset contaminated\n    \"\"\"", "\n", "\n", "if", "dataset_name", "==", "\"Ionosphere\"", ":", "\n", "        ", "return", "contamine_ionosphere", "(", "X", ",", "p_conta", ")", "\n", "", "if", "dataset_name", "==", "\"Statlog\"", ":", "\n", "        ", "return", "contamine_statlog", "(", "X", ",", "p_conta", ")", "\n", "", "if", "dataset_name", "==", "\"Breast cancer\"", ":", "\n", "        ", "return", "contamine_breast_cancer", "(", "X", ",", "p_conta", ")", "\n", "", "if", "dataset_name", "==", "\"Ecoli\"", ":", "\n", "        ", "return", "contamine_ecoli", "(", "X", ",", "p_conta", ")", "\n", "", "if", "dataset_name", "==", "\"Spambase\"", ":", "\n", "        ", "return", "contamine_spambase", "(", "X", ",", "p_conta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_ionosphere": [[59, 68], ["range", "decision_rules_comparison_real_data.contamine_statlog", "len", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_statlog"], ["", "", "def", "contamine_ionosphere", "(", "X", ",", "p_conta", ")", ":", "\n", "\n", "    ", "\"\"\" Contamination funtion for Ionosphere dataset.\n    \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "X", "[", "i", "]", "=", "2", "*", "np", ".", "random", ".", "rand", "(", "34", ")", "-", "1", "\n", "", "", "return", "contamine_statlog", "(", "X", ",", "p_conta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_statlog": [[69, 79], ["range", "len", "numpy.random.rand", "numpy.random.multivariate_normal", "numpy.zeros", "len", "numpy.identity", "numpy.random.rand", "len", "len"], "function", ["None"], ["", "def", "contamine_statlog", "(", "X", ",", "p_conta", ")", ":", "\n", "\n", "    ", "\"\"\" Contamination funtion for Statlog Landsat Satellite dataset.\n    \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "X", "[", "i", "]", "=", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "X", "[", "i", "]", ")", ")", ",", "1e8", "*", "np", ".", "identity", "(", "len", "(", "X", "[", "i", "]", ")", ")", ")", "\n", "X", "[", "i", "]", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "X", "[", "i", "]", ")", ")", "*", "140", "+", "20", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_breast_cancer": [[80, 90], ["range", "len", "numpy.random.rand", "numpy.random.multivariate_normal", "numpy.zeros", "len", "numpy.identity", "numpy.random.rand", "len", "len"], "function", ["None"], ["", "def", "contamine_breast_cancer", "(", "X", ",", "p_conta", ")", ":", "\n", "\n", "    ", "\"\"\" Contamination funtion for breast cancer dataset.\n    \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "X", "[", "i", "]", "=", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "X", "[", "i", "]", ")", ")", ",", "1e8", "*", "np", ".", "identity", "(", "len", "(", "X", "[", "i", "]", ")", ")", ")", "\n", "X", "[", "i", "]", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "X", "[", "i", "]", ")", ")", "*", "140", "+", "20", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_ecoli": [[91, 101], ["range", "len", "numpy.random.rand", "numpy.random.multivariate_normal", "numpy.zeros", "len", "numpy.identity", "numpy.random.rand", "len", "len"], "function", ["None"], ["", "def", "contamine_ecoli", "(", "X", ",", "p_conta", ")", ":", "\n", "\n", "    ", "\"\"\" Contamination funtion for Ecoli dataset.\n    \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "X", "[", "i", "]", "=", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "X", "[", "i", "]", ")", ")", ",", "1e8", "*", "np", ".", "identity", "(", "len", "(", "X", "[", "i", "]", ")", ")", ")", "\n", "X", "[", "i", "]", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "X", "[", "i", "]", ")", ")", "*", "140", "+", "20", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_spambase": [[102, 112], ["range", "len", "numpy.random.rand", "numpy.random.multivariate_normal", "numpy.zeros", "len", "numpy.identity", "numpy.random.rand", "len", "len"], "function", ["None"], ["", "def", "contamine_spambase", "(", "X", ",", "p_conta", ")", ":", "\n", "\n", "    ", "\"\"\" Contamination funtion for Spambase dataset.\n    \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "X", "[", "i", "]", "=", "multivariate_normal", "(", "np", ".", "zeros", "(", "len", "(", "X", "[", "i", "]", ")", ")", ",", "1e8", "*", "np", ".", "identity", "(", "len", "(", "X", "[", "i", "]", ")", ")", ")", "\n", "X", "[", "i", "]", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "X", "[", "i", "]", ")", ")", "*", "140", "+", "20", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_labels": [[113, 122], ["list", "range", "set", "len", "list", "numpy.random.rand", "str", "set", "numpy.random.randint", "len", "str", "list", "set"], "function", ["None"], ["", "def", "contamine_labels", "(", "labels", ",", "p_conta", ")", ":", "\n", "\n", "    ", "confuse_dict", "=", "{", "}", "\n", "for", "i", "in", "list", "(", "set", "(", "labels", ")", ")", ":", "\n", "        ", "confuse_dict", "[", "str", "(", "i", ")", "]", "=", "list", "(", "set", "(", "labels", ")", ")", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "list", "(", "set", "(", "labels", ")", ")", ")", ")", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "p_conta", ":", "\n", "            ", "labels", "[", "i", "]", "=", "confuse_dict", "[", "str", "(", "labels", "[", "i", "]", ")", "]", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.decision_rules_specific_performance_evaluation": [[123, 379], ["decision_rules_comparison_real_data.contamine_labels", "estimateurs.classic_estimator", "estimateurs.M_estimator", "estimateurs.t_distribution_estimator", "estimateurs.femda_estimator", "decision_rules.find_optimal_c", "decision_rules.find_optimal_c", "range", "range", "len", "decision_rules.LDA_g", "predicted_label_LDA_g_classic_train.append", "decision_rules.LDA_g", "predicted_label_LDA_g_M_train.append", "decision_rules.QDA_g", "predicted_label_QDA_g_classic_train.append", "decision_rules.QDA_g", "predicted_label_QDA_g_M_train.append", "decision_rules.GQDA", "predicted_label_GQDA_classic_train.append", "decision_rules.GQDA", "predicted_label_GQDA_M_train.append", "decision_rules.LDA_t", "predicted_label_LDA_t_train.append", "decision_rules.QDA_t", "predicted_label_QDA_t_train.append", "decision_rules.FEMDA", "predicted_label_FEMDA_train.append", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "len", "decision_rules.LDA_g", "predicted_label_LDA_g_classic_test.append", "decision_rules.LDA_g", "predicted_label_LDA_g_M_test.append", "decision_rules.QDA_g", "predicted_label_QDA_g_classic_test.append", "decision_rules.QDA_g", "predicted_label_QDA_g_M_test.append", "decision_rules.GQDA", "predicted_label_GQDA_classic_test.append", "decision_rules.GQDA", "predicted_label_GQDA_M_test.append", "decision_rules.LDA_t", "predicted_label_LDA_t_test.append", "decision_rules.QDA_t", "predicted_label_QDA_t_test.append", "decision_rules.FEMDA", "predicted_label_FEMDA_test.append", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "decision_rules_comparison_real_data.decision_rules_specific_performance_evaluation.same_covariance_estimator"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.contamine_labels", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.M_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.t_distribution_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.femda_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.find_optimal_c", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.find_optimal_c", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.FEMDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.FEMDA"], ["", "def", "decision_rules_specific_performance_evaluation", "(", "X", ",", "labels", ",", "X_test", ",", "labels_test", ",", "p_conta", ",", "dataset_name", ")", ":", "\n", "\n", "    ", "\"\"\" Evaluates the error of the estimators and the performances of the different\n        decision rules : accuracy, ARI, NMI and AMI index are computed on the train and test set.\n    \n    Parameters\n    ----------\n    X           : 2-d array of size n*m\n                  train set\n    labels      : list of n integers\n                  labels of the samples of the train set\n    X_test      : 2-d array of size n*m\n                  test set\n    labels_test : list of n integers\n                  labels of the samples of the test set\n    X_test      : list containing 1-d array of size m\n                  real mean of each cluster\n    p_conta     : float between 0 and 1\n                  probability to contaminate an observation\n    \n    Returns\n    -------\n    accuracy : list of floats\n               accuracy of each decision rule for train and test set\n    ARI      : list of floats\n               ARI index of each decision rule for train and test set\n    NMI      : list of floats\n               NMI index of each decision rule for train and test set\n    AMI      : list of floats\n               AMI index of each decision rule for train and test set\n    \"\"\"", "\n", "\n", "#X = contamine(X, p_conta, dataset_name)", "\n", "labels", "=", "contamine_labels", "(", "labels", ",", "p_conta", ")", "\n", "\n", "means_classic", ",", "covariances_classic", "=", "est", ".", "classic_estimator", "(", "X", ",", "labels", ")", "\n", "means_M", ",", "covariances_M", "=", "est", ".", "M_estimator", "(", "X", ",", "labels", ")", "\n", "means_t", ",", "covariances_t", ",", "nus", "=", "est", ".", "t_distribution_estimator", "(", "X", ",", "labels", ")", "\n", "means_femda", ",", "covariances_femda", "=", "est", ".", "femda_estimator", "(", "X", ",", "labels", ")", "\n", "\n", "c_classic", "=", "dr", ".", "find_optimal_c", "(", "X", ",", "labels", ",", "means_classic", ",", "covariances_classic", ")", "\n", "c_M", "=", "dr", ".", "find_optimal_c", "(", "X", ",", "labels", ",", "means_M", ",", "covariances_M", ")", "\n", "\n", "def", "same_covariance_estimator", "(", "covariances", ")", ":", "\n", "\n", "        ", "covariance", "=", "0", "\n", "for", "covariance_cluster", "in", "covariances", ":", "\n", "            ", "covariance", "=", "covariance", "+", "covariance_cluster", "/", "len", "(", "covariances", ")", "\n", "\n", "", "return", "covariance", "\n", "\n", "", "good_classification_LDA_g_classic_train", "=", "0", "\n", "good_classification_LDA_g_M_train", "=", "0", "\n", "good_classification_QDA_g_classic_train", "=", "0", "\n", "good_classification_QDA_g_M_train", "=", "0", "\n", "good_classification_GQDA_classic_train", "=", "0", "\n", "good_classification_GQDA_M_train", "=", "0", "\n", "good_classification_LDA_t_train", "=", "0", "\n", "good_classification_QDA_t_train", "=", "0", "\n", "good_classification_FEMDA_train", "=", "0", "\n", "\n", "predicted_label_LDA_g_classic_train", "=", "[", "]", "\n", "predicted_label_LDA_g_M_train", "=", "[", "]", "\n", "predicted_label_QDA_g_classic_train", "=", "[", "]", "\n", "predicted_label_QDA_g_M_train", "=", "[", "]", "\n", "predicted_label_GQDA_classic_train", "=", "[", "]", "\n", "predicted_label_GQDA_M_train", "=", "[", "]", "\n", "predicted_label_LDA_t_train", "=", "[", "]", "\n", "predicted_label_QDA_t_train", "=", "[", "]", "\n", "predicted_label_FEMDA_train", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X", "[", "i", "]", ",", "means_classic", ",", "same_covariance_estimator", "(", "covariances_classic", ")", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_classic_train", "=", "good_classification_LDA_g_classic_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_LDA_g_classic_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X", "[", "i", "]", ",", "means_M", ",", "same_covariance_estimator", "(", "covariances_M", ")", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_M_train", "=", "good_classification_LDA_g_M_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_LDA_g_M_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_classic_train", "=", "good_classification_QDA_g_classic_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_QDA_g_classic_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X", "[", "i", "]", ",", "means_M", ",", "covariances_M", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_M_train", "=", "good_classification_QDA_g_M_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_QDA_g_M_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ",", "c_classic", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_classic_train", "=", "good_classification_GQDA_classic_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_GQDA_classic_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X", "[", "i", "]", ",", "means_M", ",", "covariances_M", ",", "c_M", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_M_train", "=", "good_classification_GQDA_M_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_GQDA_M_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_t", "(", "X", "[", "i", "]", ",", "means_t", ",", "same_covariance_estimator", "(", "covariances_t", ")", ",", "nus", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_t_train", "=", "good_classification_LDA_t_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_LDA_t_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_t", "(", "X", "[", "i", "]", ",", "means_t", ",", "covariances_t", ",", "nus", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_t_train", "=", "good_classification_QDA_t_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_QDA_t_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "FEMDA", "(", "X", "[", "i", "]", ",", "means_femda", ",", "covariances_femda", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_FEMDA_train", "=", "good_classification_FEMDA_train", "+", "1", "/", "len", "(", "X", ")", "\n", "", "predicted_label_FEMDA_train", ".", "append", "(", "predicted_label", ")", "\n", "\n", "", "if", "good_classification_GQDA_M_train", ">", "good_classification_GQDA_classic_train", ":", "\n", "        ", "good_classification_GQDA_train", "=", "good_classification_GQDA_M_train", "\n", "predicted_label_GQDA_train", "=", "predicted_label_GQDA_M_train", "\n", "", "else", ":", "\n", "        ", "good_classification_GQDA_train", "=", "good_classification_GQDA_classic_train", "\n", "predicted_label_GQDA_train", "=", "predicted_label_GQDA_classic_train", "\n", "\n", "", "accuracy_train", "=", "[", "good_classification_LDA_g_classic_train", ",", "good_classification_LDA_g_M_train", ",", "\n", "good_classification_QDA_g_classic_train", ",", "good_classification_QDA_g_M_train", ",", "\n", "good_classification_GQDA_train", ",", "good_classification_LDA_t_train", ",", "\n", "good_classification_QDA_t_train", ",", "good_classification_FEMDA_train", "]", "\n", "ARI_train", "=", "[", "adjusted_rand_score", "(", "labels", ",", "predicted_label_LDA_g_classic_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_LDA_g_M_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_QDA_g_classic_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_QDA_g_M_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_GQDA_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_LDA_t_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_QDA_t_train", ")", ",", "\n", "adjusted_rand_score", "(", "labels", ",", "predicted_label_FEMDA_train", ")", "]", "\n", "NMI_train", "=", "[", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_g_classic_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_g_M_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_g_classic_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_g_M_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_GQDA_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_t_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_t_train", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels", ",", "predicted_label_FEMDA_train", ")", "]", "\n", "AMI_train", "=", "[", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_g_classic_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_g_M_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_g_classic_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_g_M_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_GQDA_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_LDA_t_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_QDA_t_train", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels", ",", "predicted_label_FEMDA_train", ")", "]", "\n", "\n", "good_classification_LDA_g_classic_test", "=", "0", "\n", "good_classification_LDA_g_M_test", "=", "0", "\n", "good_classification_QDA_g_classic_test", "=", "0", "\n", "good_classification_QDA_g_M_test", "=", "0", "\n", "good_classification_GQDA_classic_test", "=", "0", "\n", "good_classification_GQDA_M_test", "=", "0", "\n", "good_classification_LDA_t_test", "=", "0", "\n", "good_classification_QDA_t_test", "=", "0", "\n", "good_classification_FEMDA_test", "=", "0", "\n", "\n", "predicted_label_LDA_g_classic_test", "=", "[", "]", "\n", "predicted_label_LDA_g_M_test", "=", "[", "]", "\n", "predicted_label_QDA_g_classic_test", "=", "[", "]", "\n", "predicted_label_QDA_g_M_test", "=", "[", "]", "\n", "predicted_label_GQDA_classic_test", "=", "[", "]", "\n", "predicted_label_GQDA_M_test", "=", "[", "]", "\n", "predicted_label_LDA_t_test", "=", "[", "]", "\n", "predicted_label_QDA_t_test", "=", "[", "]", "\n", "predicted_label_FEMDA_test", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X_test", ")", ")", ":", "\n", "        ", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X_test", "[", "i", "]", ",", "means_classic", ",", "same_covariance_estimator", "(", "covariances_classic", ")", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_classic_test", "=", "good_classification_LDA_g_classic_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_g_classic_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "same_covariance_estimator", "(", "covariances_M", ")", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_M_test", "=", "good_classification_LDA_g_M_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_g_M_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X_test", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_classic_test", "=", "good_classification_QDA_g_classic_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_g_classic_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "covariances_M", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_M_test", "=", "good_classification_QDA_g_M_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_g_M_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X_test", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ",", "c_classic", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_classic_test", "=", "good_classification_GQDA_classic_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_GQDA_classic_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "covariances_M", ",", "c_M", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_M_test", "=", "good_classification_GQDA_M_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_GQDA_M_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_t", "(", "X_test", "[", "i", "]", ",", "means_t", ",", "same_covariance_estimator", "(", "covariances_t", ")", ",", "nus", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_t_test", "=", "good_classification_LDA_t_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_t_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_t", "(", "X_test", "[", "i", "]", ",", "means_t", ",", "covariances_t", ",", "nus", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_t_test", "=", "good_classification_QDA_t_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_t_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "FEMDA", "(", "X_test", "[", "i", "]", ",", "means_femda", ",", "covariances_femda", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_FEMDA_test", "=", "good_classification_FEMDA_test", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_FEMDA_test", ".", "append", "(", "predicted_label", ")", "\n", "\n", "", "if", "good_classification_GQDA_M_test", ">", "good_classification_GQDA_classic_test", ":", "\n", "        ", "good_classification_GQDA_test", "=", "good_classification_GQDA_M_test", "\n", "predicted_label_GQDA_test", "=", "predicted_label_GQDA_M_test", "\n", "", "else", ":", "\n", "        ", "good_classification_GQDA_test", "=", "good_classification_GQDA_classic_test", "\n", "predicted_label_GQDA_test", "=", "predicted_label_GQDA_classic_test", "\n", "\n", "", "accuracy_test", "=", "[", "good_classification_LDA_g_classic_test", ",", "good_classification_LDA_g_M_test", ",", "\n", "good_classification_QDA_g_classic_test", ",", "good_classification_QDA_g_M_test", ",", "\n", "good_classification_GQDA_test", ",", "good_classification_LDA_t_test", ",", "\n", "good_classification_QDA_t_test", ",", "good_classification_FEMDA_test", "]", "\n", "ARI_test", "=", "[", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_g_M_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_g_M_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_GQDA_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_t_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_t_test", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_FEMDA_test", ")", "]", "\n", "NMI_test", "=", "[", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_M_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_M_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_GQDA_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_t_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_t_test", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_FEMDA_test", ")", "]", "\n", "AMI_test", "=", "[", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_M_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_M_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_GQDA_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_t_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_t_test", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_FEMDA_test", ")", "]", "\n", "\n", "return", "accuracy_train", ",", "ARI_train", ",", "NMI_train", ",", "AMI_train", ",", "accuracy_test", ",", "ARI_test", ",", "NMI_test", ",", "AMI_test", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.decision_rules_overall_performance_evaluation": [[380, 452], ["range", "time.time", "preprocessing.select_random_index", "range", "numpy.array", "decision_rules_comparison_real_data.decision_rules_specific_performance_evaluation", "vector_accuracy_train.append", "vector_ARI_train.append", "vector_NMI_train.append", "vector_AMI_train.append", "vector_accuracy_test.append", "vector_ARI_test.append", "vector_NMI_test.append", "vector_AMI_test.append", "time.time", "print", "len", "int", "len", "preprocessing.ionosphere", "preprocessing.statlog", "preprocessing.breast_cancer", "preprocessing.ecoli", "preprocessing.spambase", "np.array.append", "labels_train_reduced.append", "decision_rules_comparison_real_data.time_needed", "len", "str", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_specific_performance_evaluation", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.ionosphere", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.statlog", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.breast_cancer", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.ecoli", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.spambase", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.time_needed"], ["", "def", "decision_rules_overall_performance_evaluation", "(", "path_dataset", ",", "nb_simulations_MC", ",", "p_conta", ",", "perc_train_set_used", ",", "dataset_name", ",", "freq_shuffle", ")", ":", "\n", "\n", "    ", "\"\"\" Uses the function evalue_performances_on_simulated_data over multiple Monte Carlo simulations to evaluate\n        the performances of the different decision rules over multiple samples of the dataset.\n        Returns many lists of size nb_simulations_MC containing all the results. Saves all the results\n        under dataframe images in the file created for the simulation.\n\n    Parameters\n    ----------\n    path_dataset        : str\n                          path to download and preprocess the dataset\n    nb_simulations_MC   : integer > 0\n                          number of Monte_Carlo simulations run to average the results\n    p_conta             : float between 0 and 1\n                          probability to contaminate an observation\n    perc_train_set_used : float between 0 and 1\n                          percentage of the train set that is used in practice\n    dataset_name        : str\n                          name of the dataset used, it is useful for the contamination function\n    freq_shuffle         : integer > 0\n                          if the index of the run modulo freq_shuffle == 0, we resplit the dataset\n                          between a train and a test set, to have a different train and test set\n    \n    Returns\n    -------\n    vector_accuracy : list of list of floats\n                      list of size nb_simulations_MC of all accuracy lists returned by decision_rules_specific_performances_evaluation\n    vector_ARI      : list of list of floats\n                      list of size nb_simulations_MC of all list of ARI index returned by decision_rules_specific_performances_evaluation\n    vector_NMI      : list of list of floats\n                      list of size nb_simulations_MC of all list of NMI index returned by decision_rules_specific_performances_evaluation\n    vector_AMI      : list of list of floats\n                      list of size nb_simulations_MC of all list of AMI index returned by decision_rules_specific_performances_evaluation\n    \"\"\"", "\n", "\n", "vector_accuracy_train", ",", "vector_ARI_train", ",", "vector_NMI_train", ",", "vector_AMI_train", ",", "vector_accuracy_test", ",", "vector_ARI_test", ",", "vector_NMI_test", ",", "vector_AMI_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "nb_simu", "in", "range", "(", "nb_simulations_MC", ")", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "nb_simu", "%", "freq_shuffle", "==", "0", ":", "\n", "            ", "if", "dataset_name", "==", "\"Ionosphere\"", ":", "\n", "                ", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "pre", ".", "ionosphere", "(", "path_dataset", ")", "\n", "", "if", "dataset_name", "==", "\"Statlog\"", ":", "\n", "                ", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "pre", ".", "statlog", "(", "path_dataset", ")", "\n", "", "if", "dataset_name", "==", "\"Breast cancer\"", ":", "\n", "                ", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "pre", ".", "breast_cancer", "(", "path_dataset", ")", "\n", "", "if", "dataset_name", "==", "\"Ecoli\"", ":", "\n", "                ", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "pre", ".", "ecoli", "(", "path_dataset", ")", "\n", "", "if", "dataset_name", "==", "\"Spambase\"", ":", "\n", "                ", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "pre", ".", "spambase", "(", "path_dataset", ")", "\n", "", "", "X_train_reduced", ",", "labels_train_reduced", "=", "[", "]", ",", "[", "]", "\n", "list_index_train_set", "=", "pre", ".", "select_random_index", "(", "len", "(", "X_train", ")", ",", "int", "(", "len", "(", "X_train", ")", "*", "perc_train_set_used", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X_train", ")", ")", ":", "\n", "            ", "if", "i", "in", "list_index_train_set", ":", "\n", "                ", "X_train_reduced", ".", "append", "(", "X_train", "[", "i", "]", ")", "\n", "labels_train_reduced", ".", "append", "(", "labels_train", "[", "i", "]", ")", "\n", "", "", "X_train_reduced", "=", "np", ".", "array", "(", "X_train_reduced", ")", "\n", "accuracy_train", ",", "ARI_train", ",", "NMI_train", ",", "AMI_train", ",", "accuracy_test", ",", "ARI_test", ",", "NMI_test", ",", "AMI_test", "=", "decision_rules_specific_performance_evaluation", "(", "X_train_reduced", ",", "labels_train_reduced", ",", "X_test", ",", "labels_test", ",", "p_conta", ",", "dataset_name", ")", "\n", "vector_accuracy_train", ".", "append", "(", "accuracy_train", ")", "\n", "vector_ARI_train", ".", "append", "(", "ARI_train", ")", "\n", "vector_NMI_train", ".", "append", "(", "NMI_train", ")", "\n", "vector_AMI_train", ".", "append", "(", "AMI_train", ")", "\n", "vector_accuracy_test", ".", "append", "(", "accuracy_test", ")", "\n", "vector_ARI_test", ".", "append", "(", "ARI_test", ")", "\n", "vector_NMI_test", ".", "append", "(", "NMI_test", ")", "\n", "vector_AMI_test", ".", "append", "(", "AMI_test", ")", "\n", "\n", "finish", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "str", "(", "np", ".", "round", "(", "100", "*", "nb_simu", "/", "nb_simulations_MC", ")", ")", "+", "\" %                  \"", "+", "time_needed", "(", "int", "(", "finish", "-", "start", ")", ")", ")", "\n", "\n", "", "return", "vector_accuracy_train", ",", "vector_ARI_train", ",", "vector_NMI_train", ",", "vector_AMI_train", ",", "vector_accuracy_test", ",", "vector_ARI_test", ",", "vector_NMI_test", ",", "vector_AMI_test", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.save_results": [[453, 557], ["time.time", "print", "decision_rules_comparison_real_data.decision_rules_overall_performance_evaluation", "time.time", "print", "range", "numpy.zeros", "range", "pandas.DataFrame", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "open", "pickle.dump", "open.close", "range", "numpy.zeros", "range", "pandas.DataFrame", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "open", "pickle.dump", "open.close", "path.split", "range", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "range", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "numpy.mean", "numpy.median", "numpy.std", "numpy.min", "numpy.max", "decision_rules_comparison_real_data.time_needed", "range", "range", "range", "range", "restructured_vector_accuracy_train[].append", "restructured_vector_ARI_train[].append", "restructured_vector_NMI_train[].append", "restructured_vector_AMI_train[].append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pandas.MultiIndex.from_tuples", "str", "range", "range", "range", "range", "restructured_vector_accuracy_test[].append", "restructured_vector_ARI_test[].append", "restructured_vector_NMI_test[].append", "restructured_vector_AMI_test[].append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pandas.MultiIndex.from_tuples", "str", "int", "str", "numpy.round", "str", "numpy.round", "numpy.round", "str", "numpy.round", "str", "str", "numpy.round", "str", "numpy.round", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_overall_performance_evaluation", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.time_needed"], ["", "def", "save_results", "(", "path", ",", "dataset_name", ",", "nb_simulations_MC", "=", "10", ",", "p_conta", "=", "0", ",", "perc_train_set_used", "=", "1", ",", "freq_shuffle", "=", "10", ")", ":", "\n", "\n", "    ", "\"\"\" Uses the function decision_rules_overall_performance_evaluation to evaluate the performances of the different \n        decision rules. The results are then saved in a dataframe image and the dataframe itself is saved in a pickle\n        object.\n    \"\"\"", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"D\u00e9but de l'\u00e9tude du dataset\"", ")", "\n", "path_dataset", "=", "\"\"", "\n", "for", "s", "in", "path", ".", "split", "(", "\"/\"", ")", "[", ":", "-", "2", "]", ":", "\n", "        ", "path_dataset", "=", "path_dataset", "+", "s", "+", "\"/\"", "\n", "", "path_dataset", "=", "path_dataset", "+", "\"Datasets/\"", "\n", "vector_accuracy_train", ",", "vector_ARI_train", ",", "vector_NMI_train", ",", "vector_AMI_train", ",", "vector_accuracy_test", ",", "vector_ARI_test", ",", "vector_NMI_test", ",", "vector_AMI_test", "=", "decision_rules_overall_performance_evaluation", "(", "path_dataset", ",", "nb_simulations_MC", ",", "p_conta", ",", "perc_train_set_used", ",", "dataset_name", ",", "freq_shuffle", ")", "\n", "finish", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Fin de l'\u00e9tude du dataset -                   \"", "+", "time_needed", "(", "int", "(", "finish", "-", "start", ")", ")", ")", "\n", "\n", "restructured_vector_accuracy_train", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_ARI_train", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_NMI_train", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_AMI_train", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "nb_simulations_MC", ")", ":", "\n", "            ", "restructured_vector_accuracy_train", "[", "j", "]", ".", "append", "(", "vector_accuracy_train", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_ARI_train", "[", "j", "]", ".", "append", "(", "vector_ARI_train", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_NMI_train", "[", "j", "]", ".", "append", "(", "vector_NMI_train", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_AMI_train", "[", "j", "]", ".", "append", "(", "vector_AMI_train", "[", "k", "]", "[", "j", "]", ")", "\n", "\n", "", "", "results_array_train", "=", "np", ".", "zeros", "(", "(", "20", ",", "8", ")", ")", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "        ", "results_array_train", "[", "0", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_accuracy_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "1", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_accuracy_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "2", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_accuracy_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "3", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_accuracy_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "4", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_accuracy_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "5", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_ARI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "6", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_ARI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "7", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_ARI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "8", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_ARI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "9", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_ARI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "10", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_NMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "11", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_NMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "12", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_NMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "13", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_NMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "14", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_NMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "15", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_AMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "16", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_AMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "17", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_AMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "18", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_AMI_train", "[", "j", "]", ")", ")", "\n", "results_array_train", "[", "19", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_AMI_train", "[", "j", "]", ")", ")", "\n", "\n", "", "lines", "=", "[", "(", "\"Accuracy\"", ",", "\"Mean\"", ")", ",", "(", "\"Accuracy\"", ",", "\"Median\"", ")", ",", "(", "\"Accuracy\"", ",", "\"Std\"", ")", ",", "(", "\"Accuracy\"", ",", "\"Min\"", ")", ",", "(", "\"Accuracy\"", ",", "\"Max\"", ")", ",", "\n", "(", "\"ARI     \"", ",", "\"Mean\"", ")", ",", "(", "\"ARI     \"", ",", "\"Median\"", ")", ",", "(", "\"ARI     \"", ",", "\"Std\"", ")", ",", "(", "\"ARI     \"", ",", "\"Min\"", ")", ",", "(", "\"ARI     \"", ",", "\"Max\"", ")", ",", "\n", "(", "\"NMI     \"", ",", "\"Mean\"", ")", ",", "(", "\"NMI     \"", ",", "\"Median\"", ")", ",", "(", "\"NMI     \"", ",", "\"Std\"", ")", ",", "(", "\"NMI     \"", ",", "\"Min\"", ")", ",", "(", "\"NMI     \"", ",", "\"Max\"", ")", ",", "\n", "(", "\"AMI     \"", ",", "\"Mean\"", ")", ",", "(", "\"AMI     \"", ",", "\"Median\"", ")", ",", "(", "\"AMI     \"", ",", "\"Std\"", ")", ",", "(", "\"AMI     \"", ",", "\"Min\"", ")", ",", "(", "\"AMI     \"", ",", "\"Max\"", ")", "]", "\n", "df_results_train", "=", "pd", ".", "DataFrame", "(", "results_array_train", ",", "index", "=", "pd", ".", "MultiIndex", ".", "from_tuples", "(", "lines", ")", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_styled", "=", "df_results_train", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path", "+", "dataset_name", "+", "\"/Train set/\"", "+", "\"conta = \"", "+", "str", "(", "np", ".", "round", "(", "p_conta", ",", "2", ")", ")", "+", "\" - data used = \"", "+", "str", "(", "np", ".", "round", "(", "perc_train_set_used", ",", "2", ")", ")", "+", "\".png\"", ")", "\n", "f", "=", "open", "(", "path", "+", "dataset_name", "+", "\"/Pickles/\"", "+", "\"Train set - conta = \"", "+", "str", "(", "np", ".", "round", "(", "p_conta", ",", "2", ")", ")", "+", "\" - data used = \"", "+", "str", "(", "np", ".", "round", "(", "perc_train_set_used", ",", "2", ")", ")", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "results_array_train", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "restructured_vector_accuracy_test", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_ARI_test", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_NMI_test", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "restructured_vector_AMI_test", "=", "[", "[", "]", "for", "i", "in", "range", "(", "8", ")", "]", "\n", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "nb_simulations_MC", ")", ":", "\n", "            ", "restructured_vector_accuracy_test", "[", "j", "]", ".", "append", "(", "vector_accuracy_test", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_ARI_test", "[", "j", "]", ".", "append", "(", "vector_ARI_test", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_NMI_test", "[", "j", "]", ".", "append", "(", "vector_NMI_test", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_vector_AMI_test", "[", "j", "]", ".", "append", "(", "vector_AMI_test", "[", "k", "]", "[", "j", "]", ")", "\n", "\n", "", "", "results_array_test", "=", "np", ".", "zeros", "(", "(", "20", ",", "8", ")", ")", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "        ", "results_array_test", "[", "0", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_accuracy_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "1", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_accuracy_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "2", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_accuracy_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "3", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_accuracy_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "4", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_accuracy_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "5", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_ARI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "6", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_ARI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "7", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_ARI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "8", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_ARI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "9", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_ARI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "10", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_NMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "11", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_NMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "12", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_NMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "13", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_NMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "14", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_NMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "15", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_vector_AMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "16", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_vector_AMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "17", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_vector_AMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "18", "]", "[", "j", "]", "=", "np", ".", "min", "(", "np", ".", "array", "(", "restructured_vector_AMI_test", "[", "j", "]", ")", ")", "\n", "results_array_test", "[", "19", "]", "[", "j", "]", "=", "np", ".", "max", "(", "np", ".", "array", "(", "restructured_vector_AMI_test", "[", "j", "]", ")", ")", "\n", "\n", "", "df_results_test", "=", "pd", ".", "DataFrame", "(", "results_array_test", ",", "index", "=", "pd", ".", "MultiIndex", ".", "from_tuples", "(", "lines", ")", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_styled", "=", "df_results_test", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path", "+", "dataset_name", "+", "\"/Test set/\"", "+", "\"conta = \"", "+", "str", "(", "np", ".", "round", "(", "p_conta", ",", "2", ")", ")", "+", "\" - data used = \"", "+", "str", "(", "np", ".", "round", "(", "perc_train_set_used", ",", "2", ")", ")", "+", "\".png\"", ")", "\n", "f", "=", "open", "(", "path", "+", "dataset_name", "+", "\"/Pickles/\"", "+", "\"/Test set - conta = \"", "+", "str", "(", "np", ".", "round", "(", "p_conta", ",", "2", ")", ")", "+", "\" - data used = \"", "+", "str", "(", "np", ".", "round", "(", "perc_train_set_used", ",", "2", ")", ")", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "results_array_test", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.plot_results_contamination_rate": [[558, 596], ["matplotlib.clf", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.savefig", "open", "pickle.load", "float", "float", "matplotlib.plot", "os.listdir", "os.listdir", "list_conta.append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "int", "int", "file.split", "file.split", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["", "def", "plot_results_contamination_rate", "(", "path", ",", "dataset_name", ",", "methods", ",", "name", ",", "conta_min", "=", "0", ",", "conta_max", "=", "1", ",", "test_set_results", "=", "True", ")", ":", "\n", "\n", "    ", "path_pickle", "=", "path", "+", "dataset_name", "+", "\"/Pickles/\"", "\n", "list_conta", "=", "[", "]", "\n", "dict_accuracy", "=", "{", "\"LDA_g - classic\"", ":", "[", "]", ",", "\"LDA_g - M\"", ":", "[", "]", ",", "\n", "\"QDA_g - classic\"", ":", "[", "]", ",", "\"QDA_g - M\"", ":", "[", "]", ",", "\n", "\"GQDA\"", ":", "[", "]", ",", "\"LDA_t\"", ":", "[", "]", ",", "\"QDA_t\"", ":", "[", "]", ",", "\n", "\"FEMDA\"", ":", "[", "]", "}", "\n", "if", "test_set_results", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path_pickle", ")", "[", ":", "int", "(", "len", "(", "os", ".", "listdir", "(", "path_pickle", ")", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path_pickle", ")", "[", "int", "(", "len", "(", "os", ".", "listdir", "(", "path_pickle", ")", ")", "/", "2", ")", ":", "]", "\n", "", "files", ".", "sort", "\n", "\n", "for", "file", "in", "files", ":", "\n", "        ", "f", "=", "open", "(", "path_pickle", "+", "file", ",", "\"rb\"", ")", "\n", "results", "=", "pk", ".", "load", "(", "f", ")", "\n", "conta", "=", "float", "(", "file", ".", "split", "(", "\" - \"", ")", "[", "1", "]", "[", "8", ":", "]", ")", "\n", "dataset_used", "=", "float", "(", "file", ".", "split", "(", "\" - \"", ")", "[", "2", "]", "[", "12", ":", "]", ")", "\n", "if", "dataset_used", ">", "0.999", "and", "conta", ">=", "conta_min", "and", "conta", "<=", "conta_max", ":", "\n", "            ", "list_conta", ".", "append", "(", "conta", ")", "\n", "dict_accuracy", "[", "\"LDA_g - classic\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "0", "]", ")", "\n", "dict_accuracy", "[", "\"LDA_g - M\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "1", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_g - classic\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "2", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_g - M\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "3", "]", ")", "\n", "dict_accuracy", "[", "\"GQDA\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "4", "]", ")", "\n", "dict_accuracy", "[", "\"LDA_t\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "5", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_t\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "6", "]", ")", "\n", "dict_accuracy", "[", "\"FEMDA\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "7", "]", ")", "\n", "\n", "", "", "pl", ".", "clf", "(", ")", "\n", "for", "method", "in", "methods", ":", "\n", "        ", "pl", ".", "plot", "(", "list_conta", ",", "dict_accuracy", "[", "method", "]", ",", "\"s-\"", ",", "label", "=", "method", ")", "\n", "", "pl", ".", "legend", "(", ")", "\n", "pl", ".", "xlabel", "(", "\"Contamination rate\"", ")", "\n", "pl", ".", "ylabel", "(", "\"Accuracy in %\"", ")", "\n", "pl", ".", "grid", "(", ")", "\n", "pl", ".", "savefig", "(", "path", "+", "dataset_name", "+", "\"/\"", "+", "name", "+", "\".png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_real_data.plot_results_dataset_used": [[597, 635], ["files.sort", "matplotlib.clf", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.grid", "matplotlib.savefig", "open", "pickle.load", "float", "float", "matplotlib.plot", "os.listdir", "os.listdir", "list_dataset_used.append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "dict_accuracy[].append", "int", "int", "file.split", "file.split", "len", "len", "os.listdir", "os.listdir"], "function", ["None"], ["", "def", "plot_results_dataset_used", "(", "path", ",", "dataset_name", ",", "methods", ",", "name", ",", "dataset_used_min", "=", "0", ",", "dataset_used_max", "=", "1", ",", "test_set_results", "=", "True", ")", ":", "\n", "\n", "    ", "path_pickle", "=", "path", "+", "dataset_name", "+", "\"/Pickles/\"", "\n", "list_dataset_used", "=", "[", "]", "\n", "dict_accuracy", "=", "{", "\"LDA_g - classic\"", ":", "[", "]", ",", "\"LDA_g - M\"", ":", "[", "]", ",", "\n", "\"QDA_g - classic\"", ":", "[", "]", ",", "\"QDA_g - M\"", ":", "[", "]", ",", "\n", "\"GQDA\"", ":", "[", "]", ",", "\"LDA_t\"", ":", "[", "]", ",", "\"QDA_t\"", ":", "[", "]", ",", "\n", "\"FEMDA\"", ":", "[", "]", "}", "\n", "\n", "if", "test_set_results", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path_pickle", ")", "[", ":", "int", "(", "len", "(", "os", ".", "listdir", "(", "path_pickle", ")", ")", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path_pickle", ")", "[", "int", "(", "len", "(", "os", ".", "listdir", "(", "path_pickle", ")", ")", "/", "2", ")", ":", "]", "\n", "", "files", ".", "sort", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "f", "=", "open", "(", "path_pickle", "+", "file", ",", "\"rb\"", ")", "\n", "results", "=", "pk", ".", "load", "(", "f", ")", "\n", "conta", "=", "float", "(", "file", ".", "split", "(", "\" - \"", ")", "[", "1", "]", "[", "8", ":", "]", ")", "\n", "dataset_used", "=", "float", "(", "file", ".", "split", "(", "\" - \"", ")", "[", "2", "]", "[", "12", ":", "]", ")", "\n", "if", "conta", "<", "0.001", "and", "dataset_used", ">=", "dataset_used_min", "and", "dataset_used", "<=", "dataset_used_max", ":", "\n", "            ", "list_dataset_used", ".", "append", "(", "dataset_used", ")", "\n", "dict_accuracy", "[", "\"LDA_g - classic\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "0", "]", ")", "\n", "dict_accuracy", "[", "\"LDA_g - M\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "1", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_g - classic\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "2", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_g - M\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "3", "]", ")", "\n", "dict_accuracy", "[", "\"GQDA\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "4", "]", ")", "\n", "dict_accuracy", "[", "\"LDA_t\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "5", "]", ")", "\n", "dict_accuracy", "[", "\"QDA_t\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "6", "]", ")", "\n", "dict_accuracy", "[", "\"FEMDA\"", "]", ".", "append", "(", "results", "[", "0", "]", "[", "7", "]", ")", "\n", "\n", "", "", "pl", ".", "clf", "(", ")", "\n", "for", "method", "in", "methods", ":", "\n", "        ", "pl", ".", "plot", "(", "list_dataset_used", ",", "dict_accuracy", "[", "method", "]", ",", "\"s-\"", ",", "label", "=", "method", ")", "\n", "", "pl", ".", "legend", "(", ")", "\n", "pl", ".", "xlabel", "(", "\"Percentage of training set used\"", ")", "\n", "pl", ".", "ylabel", "(", "\"Accuracy in %\"", ")", "\n", "pl", ".", "grid", "(", ")", "\n", "pl", ".", "savefig", "(", "path", "+", "dataset_name", "+", "\"/\"", "+", "name", "+", "\".png\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g": [[4, 33], ["range", "len", "numpy.dot", "numpy.dot", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array"], "function", ["None"], ["def", "LDA_g", "(", "x", ",", "means", ",", "covariance", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean of \n        each cluster and the estimation of the mutual covariance matrix using Linear\n        Discriminant Analysis decision rule.\n    \n    Parameters\n    ----------\n    x          : m-dimensional vector\n                 observation to classify\n    means      : list containing 1-d array of size m\n                 estimation of the mean of each cluster\n    covariance : 2-d array of size m*m \n                 estimation of the mutual covariance of all clusters\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "label", "=", "0", "\n", "dist_mahal_square_min", "=", "np", ".", "inf", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "if", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariance", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "<", "dist_mahal_square_min", ":", "\n", "            ", "label", "=", "k", "\n", "dist_mahal_square_min", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariance", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g": [[34, 63], ["range", "len", "numpy.log", "numpy.log", "numpy.linalg.det", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "QDA_g", "(", "x", ",", "means", ",", "covariances", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean\n        and covariance matrix of each cluster using Quadratic Discriminant Analysis \n        decision rule.\n    \n    Parameters\n    ----------\n    x           : m-dimensional vector\n                  observation to classify\n    means       : list containing 1-d array of size m\n                  estimation of the mean of each cluster\n    covariances : list containing 2-d array of size m*m \n                  estimation of the covariance matrix of each cluster\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "label", "=", "0", "\n", "dist_mahal_square_min", "=", "np", ".", "inf", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "if", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "+", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "<", "dist_mahal_square_min", ":", "\n", "            ", "label", "=", "k", "\n", "dist_mahal_square_min", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "+", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.FEMDA": [[64, 93], ["len", "range", "len", "numpy.log", "numpy.log", "numpy.log", "numpy.log", "numpy.linalg.det", "numpy.linalg.det", "numpy.dot", "numpy.dot", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "FEMDA", "(", "x", ",", "means", ",", "covariances", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean\n        and covariance matrix of each cluster using FEMDA decision rule. \n    \n    Parameters\n    ----------\n    x           : m-dimensional vector\n                  observation to classify\n    means       : list containing 1-d array of size m\n                  estimation of the mean of each cluster\n    covariances : list containing 2-d array of size m*m \n                  estimation of the covariance matrix of each cluster\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "label", "=", "0", "\n", "dist_mahal_square_min", "=", "np", ".", "inf", "\n", "m", "=", "len", "(", "means", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "if", "0.5", "*", "m", "*", "np", ".", "log", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", ")", "+", "0.5", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "<", "dist_mahal_square_min", ":", "\n", "            ", "label", "=", "k", "\n", "dist_mahal_square_min", "=", "0.5", "*", "m", "*", "np", ".", "log", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", ")", "+", "0.5", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_t": [[94, 128], ["len", "range", "len", "numpy.dot", "numpy.log", "numpy.array", "numpy.dot", "numpy.log", "numpy.log", "numpy.log", "numpy.linalg.inv", "scipy.special.gamma", "scipy.special.gamma", "numpy.array"], "function", ["None"], ["", "def", "LDA_t", "(", "x", ",", "means", ",", "covariance", ",", "nus", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean, the\n        degree of freedom of each cluster and the estimation of the mutual covariance \n        matrix using Linear Discriminant Analysis decision rule adapted to t-distributions.\n    \n    Parameters\n    ----------\n    x          : m-dimensional vector\n                 observation to classify\n    means      : list containing 1-d array of size m\n                 estimation of the mean of each cluster\n    covariance : 2-d array of size m*m \n                 estimation of the mutual covariance of all clusters\n    nus        : list containing float\n                 estimation of the degree of freedom of each cluster\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "label", "=", "0", "\n", "max_likelihood", "=", "-", "np", ".", "inf", "\n", "m", "=", "len", "(", "means", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "d_mahal_square", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariance", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "likelihood", "=", "np", ".", "log", "(", "gamma", "(", "(", "m", "+", "nus", "[", "k", "]", ")", "/", "2", ")", ")", "-", "np", ".", "log", "(", "gamma", "(", "nus", "[", "k", "]", "/", "2", ")", ")", "+", "m", "/", "2", "*", "np", ".", "log", "(", "nus", "[", "k", "]", ")", "-", "(", "m", "+", "nus", "[", "k", "]", ")", "/", "2", "*", "np", ".", "log", "(", "1", "+", "d_mahal_square", "/", "nus", "[", "k", "]", ")", "\n", "if", "likelihood", ">", "max_likelihood", ":", "\n", "            ", "label", "=", "k", "\n", "max_likelihood", "=", "likelihood", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_t": [[129, 163], ["len", "range", "len", "numpy.dot", "numpy.log", "numpy.array", "numpy.dot", "numpy.log", "numpy.linalg.inv", "numpy.log", "numpy.log", "numpy.log", "numpy.linalg.det", "numpy.array", "scipy.special.gamma", "scipy.special.gamma"], "function", ["None"], ["", "def", "QDA_t", "(", "x", ",", "means", ",", "covariances", ",", "nus", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean,\n        covariance matrix and degree of freedom of each cluster using Quadratic Discriminant \n        Analysis decision rule adapted to t-distributions.\n    \n    Parameters\n    ----------\n    x           : m-dimensional vector\n                  observation to classify\n    means       : list containing 1-d array of size m\n                  estimation of the mean of each cluster\n    covariances : list containing 2-d array of size m*m \n                  estimation of the covariance matrix of each cluster\n    nus        : list containing float\n                 estimation of the degree of freedom of each cluster\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "label", "=", "0", "\n", "max_likelihood", "=", "-", "np", ".", "inf", "\n", "m", "=", "len", "(", "means", "[", "0", "]", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "d_mahal_square", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "likelihood", "=", "np", ".", "log", "(", "gamma", "(", "(", "m", "+", "nus", "[", "k", "]", ")", "/", "2", ")", ")", "-", "np", ".", "log", "(", "gamma", "(", "nus", "[", "k", "]", "/", "2", ")", ")", "-", "m", "/", "2", "*", "np", ".", "log", "(", "nus", "[", "k", "]", ")", "-", "0.5", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "-", "0.5", "*", "(", "m", "+", "nus", "[", "k", "]", ")", "*", "np", ".", "log", "(", "1", "+", "d_mahal_square", "/", "nus", "[", "k", "]", ")", "\n", "if", "likelihood", ">", "max_likelihood", ":", "\n", "            ", "label", "=", "k", "\n", "max_likelihood", "=", "likelihood", "\n", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA": [[164, 195], ["range", "len", "numpy.log", "numpy.log", "numpy.dot", "numpy.linalg.det", "numpy.dot", "numpy.linalg.det", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "GQDA", "(", "x", ",", "means", ",", "covariances", ",", "c", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the label of observation x using the K estimations of the mean of \n        and covariance matrix of each cluster using Generalized Quadratic Discriminant Analysis \n        decision rule with threshold equal to c.\n    \n    Parameters\n    ----------\n    x           : m-dimensional vector\n                  observation to classify\n    means       : list containing 1-d array of size m\n                  estimation of the mean of each cluster\n    covariances : list containing 2-d array of size m*m \n                  estimation of the covariance matrix of each cluster\n    c           : float between 0 and 1\n                  threshold when comparing Mahalanobis distances to covariance matrix determinants\n    Returns\n    -------\n    label      : integer\n                 label predicted\n    \"\"\"", "\n", "\n", "index_min", "=", "0", "\n", "dist_mahal_square_min", "=", "np", ".", "inf", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "means", ")", ")", ":", "\n", "        ", "if", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "+", "c", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "<", "dist_mahal_square_min", ":", "\n", "            ", "index_min", "=", "k", "\n", "dist_mahal_square_min", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "x", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "+", "c", "*", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "k", "]", ")", ")", "\n", "\n", "", "", "return", "index_min", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.find_optimal_c": [[196, 264], ["int", "numpy.zeros", "numpy.zeros", "range", "range", "all_X[].append", "range", "range", "max", "range", "list", "numpy.log", "range", "range", "range", "set", "int", "len", "range", "int", "numpy.linalg.det", "numpy.linalg.det", "R.append", "range", "int", "len", "R[].append", "R[].append", "numpy.dot", "numpy.dot", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "find_optimal_c", "(", "X", ",", "labels", ",", "means", ",", "covariances", ",", "max_candidates", "=", "10", ")", ":", "\n", "\n", "    ", "\"\"\" Determines the optimal threshold between 0 and 1 that maximizes the accuracy \n        on the train set X.\n    \n    Parameters\n    ----------\n    X              : 2-d array of size n*m\n                     matrix containing the n observations\n    labels         : list containing integer\n                     list containing the label of all observations\n    means          : list containing 1-d array of size m\n                     estimation of the mean of each cluster\n    covariances    : list containing 2-d array of size m*m \n                     estimation of the covariance matrix of each cluster\n    max_candidates : integer > 0\n                     number of candidates tested in [0,1] to find the optimal threshold\n    Returns\n    -------\n    best_c         : float between 0 and 1\n                     best candidate that maximizes the accuracy\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "K", "=", "int", "(", "max", "(", "set", "(", "labels", ")", ")", "+", "1", ")", "\n", "sigma_d", "=", "np", ".", "zeros", "(", "(", "K", ",", "K", ")", ")", "\n", "n_clusters", "=", "np", ".", "zeros", "(", "K", ")", "\n", "all_X", "=", "[", "[", "]", "for", "k", "in", "range", "(", "K", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "all_X", "[", "int", "(", "labels", "[", "i", "]", ")", "]", ".", "append", "(", "list", "(", "X", "[", "i", "]", ")", ")", "\n", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "            ", "sigma_d", "[", "i", "]", "[", "j", "]", "=", "np", ".", "log", "(", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "i", "]", ")", "/", "np", ".", "linalg", ".", "det", "(", "covariances", "[", "j", "]", ")", ")", "\n", "\n", "", "", "c_candidates", "=", "c_candidates", "=", "[", "1", "/", "max_candidates", "*", "i", "for", "i", "in", "range", "(", "max_candidates", "+", "1", ")", "]", "\n", "best_c", "=", "c_candidates", "[", "0", "]", "\n", "best_MC", "=", "np", ".", "inf", "\n", "\n", "for", "c", "in", "c_candidates", ":", "\n", "        ", "MC", "=", "0", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "R", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "if", "i", "!=", "j", ":", "\n", "                    ", "R", ".", "append", "(", "[", "]", ")", "\n", "for", "l", "in", "range", "(", "len", "(", "all_X", "[", "i", "]", ")", ")", ":", "\n", "                        ", "delta_mahal_square", "=", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_X", "[", "i", "]", "[", "l", "]", "-", "means", "[", "j", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "j", "]", ")", ",", "np", ".", "array", "(", "[", "all_X", "[", "i", "]", "[", "l", "]", "-", "means", "[", "j", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "-", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_X", "[", "i", "]", "[", "l", "]", "-", "means", "[", "i", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "covariances", "[", "i", "]", ")", ",", "np", ".", "array", "(", "[", "all_X", "[", "i", "]", "[", "l", "]", "-", "means", "[", "i", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "if", "delta_mahal_square", "/", "sigma_d", "[", "i", "]", "[", "j", "]", ">", "c", "and", "sigma_d", "[", "i", "]", "[", "j", "]", ">", "0", ":", "\n", "                            ", "R", "[", "-", "1", "]", ".", "append", "(", "l", ")", "\n", "", "if", "delta_mahal_square", "/", "sigma_d", "[", "i", "]", "[", "j", "]", "<", "c", "and", "sigma_d", "[", "i", "]", "[", "j", "]", "<", "0", ":", "\n", "                            ", "R", "[", "-", "1", "]", ".", "append", "(", "l", ")", "\n", "\n", "", "", "", "", "MCi", "=", "n_clusters", "[", "i", "]", "\n", "for", "l", "in", "range", "(", "len", "(", "all_X", "[", "i", "]", ")", ")", ":", "\n", "                ", "is_well_classified", "=", "True", "\n", "for", "j", "in", "range", "(", "K", "-", "1", ")", ":", "\n", "                    ", "is_well_classified", "=", "is_well_classified", "and", "(", "l", "in", "R", "[", "j", "]", ")", "\n", "", "if", "is_well_classified", ":", "\n", "                    ", "MCi", "=", "MCi", "-", "1", "\n", "", "", "MC", "=", "MC", "+", "MCi", "\n", "", "if", "MC", "<", "best_MC", ":", "\n", "            ", "best_MC", "=", "MC", "\n", "best_c", "=", "c", "\n", "\n", "", "", "return", "best_c", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize": [[6, 23], ["numpy.eye", "len"], "function", ["None"], ["def", "regularize", "(", "sigma", ",", "lambd", "=", "1e-5", ")", ":", "\n", "\n", "    ", "\"\"\" Returns a regularized version of the matrix sigma to avoid singular matrix issues.\n    \n    Parameters\n    ----------\n    sigma : 2-d array of size m*m\n            covariance matrix to regularize\n    lambd : float\n            covariance matrix is regularized by lambd * Id\n    Returns\n    -------\n    sigma : 2-d array of size m*m\n            regularized covariance matrix\n    \"\"\"", "\n", "\n", "return", "sigma", "+", "np", ".", "eye", "(", "len", "(", "sigma", ")", ")", "*", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator": [[24, 59], ["int", "numpy.zeros", "numpy.array", "range", "range", "range", "numpy.zeros", "max", "set", "numpy.eye", "range", "int", "int", "int", "numpy.dot", "int", "int", "int", "numpy.array", "numpy.array", "int", "int", "int"], "function", ["None"], ["", "def", "classic_estimator", "(", "X", ",", "labels", ")", ":", "\n", "\n", "    ", "\"\"\" Estimates the matrix of means and the tensor of covariances matrix of the dataset.\n    \n    Parameters\n    ----------\n    X           : 2-d array of size n*m\n                  matrix of all the samples generated\n    labels      : 1-d array of size n\n                  vector of the label of each sample\n    Returns\n    -------\n    means       : 2-d array of size K*m\n                  matrix of the estimation of the mean of the K clusters\n    covariances : 3-d array of size K*m*m\n                  tensor of the estimation of covariance matrix of the K clusters\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "K", "=", "int", "(", "max", "(", "set", "(", "labels", ")", ")", "+", "1", ")", "\n", "means", "=", "np", ".", "zeros", "(", "(", "K", ",", "m", ")", ")", "\n", "covariances", "=", "np", ".", "array", "(", "[", "np", ".", "eye", "(", "m", ")", "*", "1e-5", "for", "i", "in", "range", "(", "K", ")", "]", ")", "\n", "n_clusters", "=", "np", ".", "zeros", "(", "K", ")", "+", "1e-5", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "means", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "means", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "X", "[", "i", "]", "\n", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "1", "\n", "\n", "", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "means", "[", "k", "]", "=", "means", "[", "k", "]", "/", "n_clusters", "[", "k", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "covariances", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "covariances", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "]", ")", ".", "T", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "]", ")", ")", "/", "(", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "-", "1", ")", "\n", "\n", "", "return", "means", ",", "covariances", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.M_estimator": [[60, 112], ["int", "numpy.zeros", "range", "estimateurs.classic_estimator", "range", "estimateurs.regularize", "max", "numpy.zeros", "numpy.zeros", "range", "set", "int", "int", "sum", "sum", "abs", "sum", "min", "numpy.dot", "abs", "numpy.array", "numpy.sqrt", "numpy.array", "numpy.dot", "numpy.array", "numpy.dot", "numpy.linalg.inv", "estimateurs.regularize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "M_estimator", "(", "X", ",", "labels", ",", "eps", "=", "1e-5", ",", "max_iter", "=", "20", ")", ":", "\n", "\n", "    ", "\"\"\" Estimates the matrix of means and the tensor of covariances matrix of the dataset using M-estimators.\n        To tackle singular matrix issues, we use regularization.\n        \n    Parameters\n    ----------\n    X           : 2-d array of size n*m\n                  matrix of all the samples generated\n    labels      : 1-d array of size n\n                  vector of the label of each sample\n    eps         : float > 0\n                  criterion of termination when solving the fixed-point equation\n    max_iter    : integer > 1\n                  number of maximum iterations to solve the fixed-point equation\n    Returns\n    -------\n    means       : 2-d array of size K*m\n                  matrix of the robust estimation of the mean of the K clusters\n    covariances : 3-d array of size K*m*m\n                  tensor of the robust estimation of covariance matrix of the K clusters\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "K", "=", "int", "(", "max", "(", "set", "(", "labels", ")", ")", "+", "1", ")", "\n", "n_clusters", "=", "np", ".", "zeros", "(", "K", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "1", "\n", "", "means", ",", "covariances", "=", "classic_estimator", "(", "X", ",", "labels", ")", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "convergence", "=", "False", "\n", "ite", "=", "1", "\n", "while", "(", "not", "convergence", ")", "and", "ite", "<", "max_iter", ":", "\n", "            ", "ite", "=", "ite", "+", "1", "\n", "mean", "=", "np", ".", "zeros", "(", "m", ")", "\n", "covariance", "=", "np", ".", "zeros", "(", "[", "m", ",", "m", "]", ")", "\n", "sum_mean_weights", "=", "1e-5", "\n", "sum_mean_weights_squared", "=", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "labels", "[", "i", "]", "==", "k", ":", "\n", "                    ", "mean_weight", "=", "min", "(", "[", "[", "0.5", "]", "]", ",", "1", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "covariances", "[", "k", "]", ")", ")", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "mean", "=", "mean", "+", "mean_weight", "*", "X", "[", "i", "]", "\n", "sum_mean_weights", "=", "sum_mean_weights", "+", "mean_weight", "\n", "sum_mean_weights_squared", "=", "sum_mean_weights_squared", "+", "mean_weight", "**", "2", "\n", "covariance", "=", "covariance", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ")", "*", "mean_weight", "**", "2", "\n", "", "", "delta_mean", "=", "mean", "/", "sum_mean_weights", "-", "means", "[", "k", "]", "\n", "delta_covariance", "=", "covariance", "/", "sum_mean_weights_squared", "-", "covariances", "[", "k", "]", "\n", "means", "[", "k", "]", "=", "means", "[", "k", "]", "+", "delta_mean", "\n", "covariances", "[", "k", "]", "=", "covariances", "[", "k", "]", "+", "delta_covariance", "\n", "convergence", "=", "sum", "(", "abs", "(", "delta_mean", ")", ")", "+", "sum", "(", "sum", "(", "abs", "(", "delta_covariance", ")", ")", ")", "<", "eps", "\n", "", "covariances", "[", "k", "]", "=", "regularize", "(", "covariances", "[", "k", "]", ")", "\n", "", "return", "means", ",", "covariances", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.femda_estimator": [[113, 166], ["int", "range", "estimateurs.classic_estimator", "range", "numpy.zeros", "estimateurs.regularize", "max", "numpy.zeros", "numpy.zeros", "range", "print", "set", "int", "numpy.trace", "int", "sum", "sum", "abs", "sum", "min", "numpy.dot", "abs", "numpy.array", "numpy.dot", "numpy.array", "numpy.array", "numpy.dot", "numpy.linalg.inv", "estimateurs.regularize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "femda_estimator", "(", "X", ",", "labels", ",", "eps", "=", "1e-5", ",", "max_iter", "=", "20", ")", ":", "\n", "\n", "    ", "\"\"\" Estimates the matrix of means and the tensor of scatter matrix of the dataset using MLE estimator.\n        To tackle singular matrix issues, we use regularization.\n        \n    Parameters\n    ----------\n    X        : 2-d array of size n*m\n               matrix of all the samples generated\n    labels   : 1-d array of size n\n               vector of the label of each sample\n    eps      : float > 0\n               criterion of termination when solving the fixed-point equation\n    max_iter : integer > 1\n               number of maximum iterations to solve the fixed-point equation\n    Returns\n    -------\n    means    : 2-d array of size K*m\n               matrix of the robust estimation of the mean of the K clusters\n    shapes   : 3-d array of size K*m*m\n               tensor of the robust estimation of shape matrix of the K clusters\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "K", "=", "int", "(", "max", "(", "set", "(", "labels", ")", ")", "+", "1", ")", "\n", "n_clusters", "=", "np", ".", "zeros", "(", "K", ")", "+", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "1", "\n", "", "means", ",", "shapes", "=", "classic_estimator", "(", "X", ",", "labels", ")", "\n", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "convergence", "=", "False", "\n", "ite", "=", "1", "\n", "while", "(", "not", "convergence", ")", "and", "ite", "<", "max_iter", ":", "\n", "            ", "ite", "=", "ite", "+", "1", "\n", "mean", "=", "np", ".", "zeros", "(", "m", ")", "\n", "shape", "=", "np", ".", "zeros", "(", "[", "m", ",", "m", "]", ")", "\n", "sum_mean_weights", "=", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "labels", "[", "i", "]", "==", "k", ":", "\n", "                    ", "mean_weight", "=", "min", "(", "[", "[", "0.5", "]", "]", ",", "1", "/", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "shapes", "[", "k", "]", ")", ")", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "#print(mean_weight)", "\n", "mean", "=", "mean", "+", "mean_weight", "*", "X", "[", "i", "]", "\n", "sum_mean_weights", "=", "sum_mean_weights", "+", "mean_weight", "\n", "shape", "=", "shape", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ")", "*", "mean_weight", "\n", "", "", "delta_mean", "=", "mean", "/", "sum_mean_weights", "-", "means", "[", "k", "]", "\n", "delta_shape", "=", "shape", "*", "m", "/", "n_clusters", "[", "k", "]", "-", "shapes", "[", "k", "]", "\n", "means", "[", "k", "]", "=", "means", "[", "k", "]", "+", "delta_mean", "\n", "shapes", "[", "k", "]", "=", "shapes", "[", "k", "]", "+", "delta_shape", "\n", "print", "(", "\"trace at\"", ",", "ite", ",", "np", ".", "trace", "(", "shapes", "[", "k", "]", ")", ")", "\n", "convergence", "=", "sum", "(", "abs", "(", "delta_mean", ")", ")", "+", "sum", "(", "sum", "(", "abs", "(", "delta_shape", ")", ")", ")", "<", "eps", "\n", "", "shapes", "[", "k", "]", "=", "regularize", "(", "shapes", "[", "k", "]", ")", "\n", "", "return", "means", ",", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.t_distribution_estimator": [[167, 230], ["int", "range", "estimateurs.classic_estimator", "range", "numpy.zeros", "estimateurs.regularize", "max", "range", "numpy.zeros", "numpy.zeros", "range", "scipy.optimize.minimize", "set", "int", "int", "sum", "numpy.log", "abs", "sum", "sum", "numpy.dot", "scipy.special.gamma", "numpy.log", "abs", "abs", "numpy.array", "scipy.special.digamma", "scipy.special.digamma", "numpy.log", "numpy.dot", "numpy.array", "numpy.log", "numpy.array", "numpy.dot", "numpy.log", "numpy.linalg.inv", "estimateurs.regularize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.regularize"], ["", "def", "t_distribution_estimator", "(", "X", ",", "labels", ",", "eps", "=", "1e-5", ",", "max_iter", "=", "20", ")", ":", "\n", "\n", "    ", "\"\"\" Estimates the matrix of means and the tensor of covariances matrix of the dataset using S-estimators.\n        To tackle singular matrix issues, we use regularization.\n        \n    Parameters\n    ----------\n    X           : 2-d array of size n*m\n                  matrix of all the samples generated\n    labels      : 1-d array of size n\n                  vector of the label of each sample\n    eps         : float > 0\n                  criterion of termination when solving the fixed-point equation\n    max_iter    : integer > 1\n                  number of maximum iterations to solve the fixed-point equation\n    Returns\n    -------\n    means       : 2-d array of size K*m\n                  matrix of the estimation of the mean of the K clusters\n    covariances : 3-d array of size K*m*m\n                  tensor of the estimation of covariance matrix of the K clusters\n    nus         : 1-d array of size K\n                  vector of the estimation fof degrees of freedom of each cluster\n    \"\"\"", "\n", "\n", "n", ",", "m", "=", "X", ".", "shape", "\n", "K", "=", "int", "(", "max", "(", "set", "(", "labels", ")", ")", "+", "1", ")", "\n", "n_clusters", "=", "np", ".", "zeros", "(", "K", ")", "+", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "=", "n_clusters", "[", "int", "(", "labels", "[", "i", "]", ")", "]", "+", "1", "\n", "", "means", ",", "covariances", "=", "classic_estimator", "(", "X", ",", "labels", ")", "\n", "nus", "=", "[", "1", "for", "k", "in", "range", "(", "K", ")", "]", "\n", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "        ", "convergence", "=", "False", "\n", "ite", "=", "1", "\n", "while", "(", "not", "convergence", ")", "and", "ite", "<", "max_iter", ":", "\n", "            ", "ite", "=", "ite", "+", "1", "\n", "mean", "=", "np", ".", "zeros", "(", "m", ")", "\n", "covariance", "=", "np", ".", "zeros", "(", "[", "m", ",", "m", "]", ")", "\n", "sum_mean_weights", "=", "1e-5", "\n", "sum_nu_weights", "=", "1e-5", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "labels", "[", "i", "]", "==", "k", ":", "\n", "                    ", "mean_weight", "=", "(", "nus", "[", "k", "]", "+", "m", ")", "/", "(", "nus", "[", "k", "]", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "regularize", "(", "covariances", "[", "k", "]", ")", ")", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ")", ")", "[", "0", "]", "[", "0", "]", ")", "\n", "mean", "=", "mean", "+", "mean_weight", "*", "X", "[", "i", "]", "\n", "sum_mean_weights", "=", "sum_mean_weights", "+", "mean_weight", "\n", "covariance", "=", "covariance", "+", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ".", "T", ",", "np", ".", "array", "(", "[", "X", "[", "i", "]", "-", "means", "[", "k", "]", "]", ")", ")", "*", "mean_weight", "\n", "sum_nu_weights", "=", "sum_nu_weights", "+", "(", "np", ".", "log", "(", "mean_weight", ")", "-", "mean_weight", "-", "np", ".", "log", "(", "(", "nus", "[", "k", "]", "+", "m", ")", "/", "2", ")", "+", "digamma", "(", "(", "nus", "[", "k", "]", "+", "m", ")", "/", "2", ")", ")", "/", "n_clusters", "[", "k", "]", "\n", "", "", "def", "f", "(", "nu", ")", ":", "\n", "                ", "return", "np", ".", "log", "(", "gamma", "(", "nu", "/", "2", ")", ")", "-", "0.5", "*", "nu", "*", "np", ".", "log", "(", "nu", "/", "2", ")", "-", "0.5", "*", "nu", "*", "sum_nu_weights", "\n", "", "def", "grad_f", "(", "nu", ")", ":", "\n", "                ", "return", "0.5", "*", "digamma", "(", "nu", "/", "2", ")", "-", "0.5", "*", "np", ".", "log", "(", "nu", "/", "2", ")", "-", "0.5", "-", "0.5", "*", "sum_nu_weights", "\n", "", "res", "=", "minimize", "(", "f", ",", "nus", "[", "k", "]", ",", "jac", "=", "grad_f", ",", "bounds", "=", "[", "(", "0", ",", "None", ")", "]", ")", "\n", "delta_mean", "=", "mean", "/", "sum_mean_weights", "-", "means", "[", "k", "]", "\n", "delta_covariance", "=", "covariance", "/", "n_clusters", "[", "k", "]", "-", "covariances", "[", "k", "]", "\n", "delta_nu", "=", "res", ".", "x", "[", "0", "]", "-", "nus", "[", "k", "]", "\n", "means", "[", "k", "]", "=", "means", "[", "k", "]", "+", "delta_mean", "\n", "covariances", "[", "k", "]", "=", "covariances", "[", "k", "]", "+", "delta_covariance", "\n", "nus", "[", "k", "]", "=", "nus", "[", "k", "]", "+", "delta_nu", "\n", "convergence", "=", "abs", "(", "delta_nu", ")", "+", "sum", "(", "abs", "(", "delta_mean", ")", ")", "+", "sum", "(", "sum", "(", "abs", "(", "delta_covariance", ")", ")", ")", "<", "eps", "\n", "", "covariances", "[", "k", "]", "=", "regularize", "(", "covariances", "[", "k", "]", ")", "\n", "", "return", "means", ",", "covariances", ",", "nus", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index": [[3, 24], ["len", "numpy.random.randint", "list_index.append"], "function", ["None"], ["def", "select_random_index", "(", "n", ",", "k", ")", ":", "\n", "\n", "    ", "\"\"\" Select randomly without repetition k integers taken in the interval [0, n-1].\n        Parameters\n        ----------\n        n : int\n            n-1 is the maximum value of the index that can be drawn\n        k : int\n            number of index drawn\n    Returns\n    -------\n    list_index : list of integers\n                 list containing the index randomly drawn\n    \"\"\"", "\n", "\n", "list_index", "=", "[", "]", "\n", "while", "len", "(", "list_index", ")", "<", "k", ":", "\n", "        ", "random_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n", ")", "\n", "if", "random_index", "not", "in", "list_index", ":", "\n", "            ", "list_index", ".", "append", "(", "random_index", ")", "\n", "", "", "return", "list_index", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.ionosphere": [[25, 71], ["open", "open.readlines", "range", "preprocessing.select_random_index", "range", "X.append", "len", "range", "len", "int", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "clean_line.split", "float", "labels.append", "labels.append", "X_train.append", "labels_train.append", "X_test.append", "labels_test.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index"], ["", "def", "ionosphere", "(", "path", ")", ":", "\n", "\n", "    ", "\"\"\" Extracts the data from .data file downloaded on the website : \n        http://archive.ics.uci.edu/ml/datasets/Ionosphere. Data are then\n        randomly splitted into a train set (70% of the data) and a test set (30% of the data).\n        Data are stored in bidimensional arrays.\n    Parameters\n    ----------\n    path : str\n           path locating the .data files\n    Returns\n    -------\n    X_train      : 2-d array \n                   train set\n    labels_train : 1-d array\n                   labels of the observations in the train set\n    X_test       : 2-d array \n                   test set\n    labels_test  : 1-d array\n                   labels of the observations in the test set                   \n    \"\"\"", "\n", "\n", "X", ",", "labels", ",", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", "+", "\"ionosphere.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X", ".", "append", "(", "clean_line", ".", "split", "(", "\",\"", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "X", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "            ", "X", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'g'", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'b'", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "X", "[", "i", "]", "=", "X", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "", "list_index_train_set", "=", "select_random_index", "(", "len", "(", "X", ")", ",", "int", "(", "0.7", "*", "len", "(", "X", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "list_index_train_set", ":", "\n", "            ", "X_train", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_train", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_test", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_test", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "labels_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "labels_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.statlog": [[72, 117], ["open", "open.readlines", "range", "open", "open.readlines", "range", "X_train.append", "len", "range", "labels_train.append", "X_test.append", "len", "range", "labels_test.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "clean_line.split", "len", "float", "int", "clean_line.split", "len", "float", "int"], "function", ["None"], ["", "def", "statlog", "(", "path", ")", ":", "\n", "\n", "    ", "\"\"\" Extracts the data from .data file downloaded on the website : \n        http://archive.ics.uci.edu/ml/datasets/Statlog+%28Landsat+Satellite%29. There is a \n        file for the train set and the test set. Data are stored in bidimensional arrays.\n    Parameters\n    ----------\n    path : str\n           path locating the .data files\n    Returns\n    -------\n    X_train      : 2-d array \n                   train set\n    labels_train : 1-d array\n                   labels of the observations in the train set\n    X_test       : 2-d array \n                   test set\n    labels_test  : 1-d array\n                   labels of the observations in the test set                   \n    \"\"\"", "\n", "\n", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", "+", "\"sat_trn.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X_train", ".", "append", "(", "clean_line", ".", "split", "(", "\" \"", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X_train", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "X_train", "[", "i", "]", ")", ")", ":", "\n", "            ", "X_train", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X_train", "[", "i", "]", "[", "j", "]", ")", "\n", "", "labels_train", ".", "append", "(", "int", "(", "X_train", "[", "i", "]", "[", "-", "1", "]", ")", ")", "\n", "X_train", "[", "i", "]", "=", "X_train", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "\n", "", "f", "=", "open", "(", "path", "+", "\"sat_tst.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X_test", ".", "append", "(", "clean_line", ".", "split", "(", "\" \"", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X_test", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "X_test", "[", "i", "]", ")", ")", ":", "\n", "            ", "X_test", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X_test", "[", "i", "]", "[", "j", "]", ")", "\n", "", "labels_test", ".", "append", "(", "int", "(", "X_test", "[", "i", "]", "[", "-", "1", "]", ")", ")", "\n", "X_test", "[", "i", "]", "=", "X_test", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "labels_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "labels_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.breast_cancer": [[118, 173], ["open", "open.readlines", "range", "range", "preprocessing.select_random_index", "range", "X.append", "str", "len", "range", "len", "int", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "clean_line.split", "float", "labels.append", "labels.append", "X_train.append", "labels_train.append", "X_test.append", "labels_test.append", "float", "len", "len", "range", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index"], ["", "def", "breast_cancer", "(", "path", ")", ":", "\n", "\n", "    ", "\"\"\" Extracts the data from .data file downloaded on the website : \n        https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)\n        Data file was renamed from breast-cancer-wisconsin to breast_cancer_wisconsin.\n        Data are then randomly splitted into a train set (70% of the data) and a test set (30% of the data). \n    Data are stored in bidimensional arrays.\n    Parameters\n    ----------\n    path : str\n           path locating the .data files\n    Returns\n    -------\n    X_train      : 2-d array \n                   train set\n    labels_train : 1-d array\n                   labels of the observations in the train set\n    X_test       : 2-d array \n                   test set\n    labels_test  : 1-d array\n                   labels of the observations in the test set                   \n    \"\"\"", "\n", "\n", "X", ",", "labels", ",", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", "+", "\"breast_cancer_wisconsin.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X", ".", "append", "(", "clean_line", ".", "split", "(", "\",\"", ")", ")", "\n", "# There are missing values for the 6th coordinate of some data, we replace it ", "\n", "# by the value of another observation randomly drawn.", "\n", "", "t", "=", "[", "402", ",", "30", ",", "28", ",", "19", ",", "30", ",", "4", ",", "8", ",", "21", ",", "9", ",", "132", "]", "# numbers of 1.0, 2.0..., 10.0 values", "\n", "values_coordinate_6", "=", "[", "]", "# empirical distribution of the 6th coordinate's values", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "values_coordinate_6", "=", "values_coordinate_6", "+", "[", "float", "(", "i", "+", "1", ")", "for", "j", "in", "range", "(", "t", "[", "i", "]", ")", "]", "\n", "", "for", "i", "in", "[", "23", ",", "40", ",", "139", ",", "145", ",", "158", ",", "164", ",", "235", ",", "249", ",", "275", ",", "292", ",", "294", ",", "297", ",", "315", ",", "321", ",", "411", ",", "617", "]", ":", "# corrupted observations", "\n", "        ", "X", "[", "i", "]", "[", "6", "]", "=", "str", "(", "values_coordinate_6", "[", "np", ".", "random", ".", "randint", "(", "683", ")", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "X", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "            ", "X", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'2'", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'4'", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "X", "[", "i", "]", "=", "X", "[", "i", "]", "[", "1", ":", "-", "1", "]", "\n", "", "list_index_train_set", "=", "select_random_index", "(", "len", "(", "X", ")", ",", "int", "(", "0.7", "*", "len", "(", "X", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "list_index_train_set", ":", "\n", "            ", "X_train", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_train", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_test", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_test", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "labels_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "labels_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.ecoli": [[174, 236], ["open", "open.readlines", "range", "preprocessing.select_random_index", "range", "X.append", "len", "range", "len", "int", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "clean_line.split", "X[].remove", "float", "labels.append", "labels.append", "labels.append", "labels.append", "labels.append", "labels.append", "labels.append", "labels.append", "X_train.append", "labels_train.append", "X_test.append", "labels_test.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index"], ["", "def", "ecoli", "(", "path", ")", ":", "\n", "\n", "    ", "\"\"\" Extracts the data from .data file downloaded on the website : \n        https://archive.ics.uci.edu/ml/datasets/ecoli\n        Data are then randomly splitted into a train set (70% of the data) and a test set (30% of the data). \n    Data are stored in bidimensional arrays.\n    Parameters\n    ----------\n    path : str\n           path locating the .data files\n    Returns\n    -------\n    X_train      : 2-d array \n                   train set\n    labels_train : 1-d array\n                   labels of the observations in the train set\n    X_test       : 2-d array \n                   test set\n    labels_test  : 1-d array\n                   labels of the observations in the test set                   \n    \"\"\"", "\n", "\n", "X", ",", "labels", ",", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", "+", "\"ecoli.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X", ".", "append", "(", "clean_line", ".", "split", "(", "\"  \"", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "X", "[", "i", "]", ".", "remove", "(", "\"\"", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "for", "j", "in", "range", "(", "1", ",", "len", "(", "X", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "            ", "X", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "' cp'", ":", "\n", "            ", "labels", ".", "append", "(", "0", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "' im'", ":", "\n", "            ", "labels", ".", "append", "(", "1", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'imS'", ":", "\n", "            ", "labels", ".", "append", "(", "2", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'imL'", ":", "\n", "            ", "labels", ".", "append", "(", "3", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'imU'", ":", "\n", "            ", "labels", ".", "append", "(", "4", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "' om'", ":", "\n", "            ", "labels", ".", "append", "(", "5", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "'omL'", ":", "\n", "            ", "labels", ".", "append", "(", "6", ")", "\n", "", "if", "X", "[", "i", "]", "[", "-", "1", "]", "==", "' pp'", ":", "\n", "            ", "labels", ".", "append", "(", "7", ")", "\n", "", "X", "[", "i", "]", "=", "X", "[", "i", "]", "[", "1", ":", "-", "1", "]", "\n", "", "list_index_train_set", "=", "select_random_index", "(", "len", "(", "X", ")", ",", "int", "(", "0.7", "*", "len", "(", "X", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "list_index_train_set", ":", "\n", "            ", "X_train", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_train", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_test", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_test", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "labels_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "labels_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.spambase": [[237, 280], ["open", "open.readlines", "range", "preprocessing.select_random_index", "range", "X.append", "len", "range", "labels.append", "len", "int", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "clean_line.split", "len", "float", "int", "X_train.append", "labels_train.append", "X_test.append", "labels_test.append", "len"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.preprocessing.select_random_index"], ["", "def", "spambase", "(", "path", ")", ":", "\n", "\n", "    ", "\"\"\" Extracts the data from .data file downloaded on the website : \n        https://archive.ics.uci.edu/ml/datasets/spambase\n        Data are then randomly splitted into a train set (70% of the data) and a test set (30% of the data). \n    Data are stored in bidimensional arrays.\n    Parameters\n    ----------\n    path : str\n           path locating the .data files\n    Returns\n    -------\n    X_train      : 2-d array \n                   train set\n    labels_train : 1-d array\n                   labels of the observations in the train set\n    X_test       : 2-d array \n                   test set\n    labels_test  : 1-d array\n                   labels of the observations in the test set                   \n    \"\"\"", "\n", "\n", "X", ",", "labels", ",", "X_train", ",", "labels_train", ",", "X_test", ",", "labels_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "f", "=", "open", "(", "path", "+", "\"spambase.data\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "clean_line", "=", "line", "[", ":", "-", "1", "]", "\n", "X", ".", "append", "(", "clean_line", ".", "split", "(", "\",\"", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "X", "[", "i", "]", ")", ")", ":", "\n", "            ", "X", "[", "i", "]", "[", "j", "]", "=", "float", "(", "X", "[", "i", "]", "[", "j", "]", ")", "\n", "", "labels", ".", "append", "(", "int", "(", "X", "[", "i", "]", "[", "-", "1", "]", ")", ")", "\n", "X", "[", "i", "]", "=", "X", "[", "i", "]", "[", ":", "-", "1", "]", "\n", "", "list_index_train_set", "=", "select_random_index", "(", "len", "(", "X", ")", ",", "int", "(", "0.7", "*", "len", "(", "X", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "        ", "if", "i", "in", "list_index_train_set", ":", "\n", "            ", "X_train", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_train", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "X_test", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "labels_test", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "X_train", ")", ",", "np", ".", "array", "(", "labels_train", ")", ",", "np", ".", "array", "(", "X_test", ")", ",", "np", ".", "array", "(", "labels_test", ")", "", "", ""]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.write_parameters_file": [[12, 41], ["os.mkdir", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "open.write", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "write_parameters_file", "(", "path", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "p_conta", ",", "list_scenarios", ",", "simulation_id", ")", ":", "\n", "\n", "    ", "\"\"\" Writes the parameters of the simulation in a file .txt located in the file created to contain the\n        results of the simulation. The file is created by the function and is located by the variable path.\n    \"\"\"", "\n", "\n", "os", ".", "mkdir", "(", "path", "+", "\"Simulation \"", "+", "str", "(", "simulation_id", ")", "+", "\" - m=\"", "+", "str", "(", "m", ")", "+", "\" - K=\"", "+", "str", "(", "K", ")", "+", "\" - n=\"", "+", "str", "(", "n", ")", "+", "\" - p_conta=\"", "+", "str", "(", "p_conta", ")", ")", "\n", "\n", "fichier", "=", "open", "(", "path", "+", "\"Simulation \"", "+", "str", "(", "simulation_id", ")", "+", "\" - m=\"", "+", "str", "(", "m", ")", "+", "\" - K=\"", "+", "str", "(", "K", ")", "+", "\" - n=\"", "+", "str", "(", "n", ")", "+", "\" - p_conta=\"", "+", "str", "(", "p_conta", ")", "+", "\"/\"", "+", "\"Simulation parameters.txt\"", ",", "\"w\"", ")", "\n", "fichier", ".", "write", "(", "\"\\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ########################################################################################################################################## \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         #######################################################                            ####################################################### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         #######################################################         Parameters         ####################################################### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         #######################################################                            ####################################################### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ########################################################################################################################################## \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###                                                                                                                                    ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Dimension                                       : \"", "+", "str", "(", "m", ")", "+", "\"                                                                           ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Number of samples simulated                     : \"", "+", "str", "(", "n", ")", "+", "\"                                                                         ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Number of clusters                              : \"", "+", "str", "(", "K", ")", "+", "\"                                                                            ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Priors on the clusters                          : \"", "+", "str", "(", "priors", ")", "+", "\"                                                     ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Probability of contamination                    : \"", "+", "str", "(", "p_conta", ")", "+", "\"                                                                          ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ###     Liste des sc\u00e9narios \u00e9tudi\u00e9s                     :                                                                              ### \\n\"", ")", "\n", "for", "scenario", "in", "list_scenarios", ":", "\n", "        ", "fichier", ".", "write", "(", "\"                         ###                                                     : \"", "+", "scenario", "+", "\"                                                                ### \\n\"", ")", "\n", "", "fichier", ".", "write", "(", "\"                         ###                                                                                                                                    ### \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ########################################################################################################################################## \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ########################################################################################################################################## \\n\"", ")", "\n", "fichier", ".", "write", "(", "\"                         ########################################################################################################################################## \\n\"", ")", "\n", "fichier", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.time_needed": [[42, 52], ["str", "str", "str"], "function", ["None"], ["", "def", "time_needed", "(", "nb_sec", ")", ":", "\n", "\n", "    ", "\"\"\" Returns a string with nb_sec converted in hours, minutes and seconds.\n    \"\"\"", "\n", "\n", "nb_heures", "=", "nb_sec", "//", "3600", "\n", "nb_min", "=", "(", "nb_sec", "-", "nb_heures", "*", "3600", ")", "//", "60", "\n", "nb_s", "=", "(", "nb_sec", "-", "nb_heures", "*", "3600", "-", "nb_min", "*", "60", ")", "\n", "\n", "return", "str", "(", "nb_heures", ")", "+", "\" h \"", "+", "str", "(", "nb_min", ")", "+", "\" min \"", "+", "str", "(", "nb_s", ")", "+", "\"s\"", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_specific_performance_evaluation": [[53, 219], ["estimateurs.classic_estimator", "estimateurs.M_estimator", "estimateurs.t_distribution_estimator", "estimateurs.femda_estimator", "decision_rules.find_optimal_c", "decision_rules.find_optimal_c", "numpy.sqrt", "range", "range", "numpy.sum", "len", "len", "decision_rules.LDA_g", "predicted_label_LDA_g_classic.append", "decision_rules.LDA_g", "predicted_label_LDA_g_M.append", "decision_rules.QDA_g", "predicted_label_QDA_g_classic.append", "decision_rules.QDA_g", "predicted_label_QDA_g_M.append", "decision_rules.GQDA", "predicted_label_GQDA_classic.append", "decision_rules.GQDA", "predicted_label_GQDA_M.append", "decision_rules.LDA_t", "predicted_label_LDA_t.append", "decision_rules.QDA_t", "predicted_label_QDA_t.append", "decision_rules.FEMDA", "predicted_label_FEMDA.append", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.adjusted_rand_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.normalized_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "sklearn.metrics.cluster.adjusted_mutual_info_score", "decision_rules_comparison_simulated_data.decision_rules_specific_performance_evaluation.same_covariance_estimator"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.classic_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.M_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.t_distribution_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.estimateurs.femda_estimator", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.find_optimal_c", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.find_optimal_c", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_g", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.GQDA", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.LDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.QDA_t", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules.FEMDA"], ["", "def", "decision_rules_specific_performance_evaluation", "(", "X", ",", "labels", ",", "all_mu", ",", "all_sigma", ")", ":", "\n", "\n", "    ", "\"\"\" Evaluates the error of the estimators and the performances of the different\n        decision rules : accuracy, ARI, NMI and AMI index are computed on the test set.\n        The test set is built using the last 80% of the dataset generated.\n    \n    Parameters\n    ----------\n    X         : 2-d array of size n*m\n                dataset generated\n    labels    : list of n integers\n                labels of the samples generated\n    all_mu    : list containing 1-d array of size m\n                real mean of each cluster\n    all_sigma : list containing 2-d array of size m*m \n                real covariance matrix of each cluster\n    \n    Returns\n    -------\n    errors   : list of floats\n               relative error of each estimator\n    accuracy : list of floats\n               accuracy of each decision rule\n    ARI      : list of floats\n               ARI index of each decision rule\n    NMI      : list of floats\n               NMI index of each decision rule\n    AMI      : list of floats\n               AMI index of each decision rule\n    \"\"\"", "\n", "\n", "X_train", ",", "labels_train", "=", "X", "[", ":", "int", "(", "0.20", "*", "len", "(", "X", ")", ")", "]", ",", "labels", "[", ":", "int", "(", "0.20", "*", "len", "(", "X", ")", ")", "]", "\n", "X_test", ",", "labels_test", "=", "X", "[", "int", "(", "0.20", "*", "len", "(", "X", ")", ")", ":", "]", ",", "labels", "[", "int", "(", "0.20", "*", "len", "(", "X", ")", ")", ":", "]", "\n", "\n", "means_classic", ",", "covariances_classic", "=", "est", ".", "classic_estimator", "(", "X_train", ",", "labels_train", ")", "\n", "means_M", ",", "covariances_M", "=", "est", ".", "M_estimator", "(", "X_train", ",", "labels_train", ")", "\n", "means_t", ",", "covariances_t", ",", "nus", "=", "est", ".", "t_distribution_estimator", "(", "X_train", ",", "labels_train", ")", "\n", "means_femda", ",", "covariances_femda", "=", "est", ".", "femda_estimator", "(", "X_train", ",", "labels_train", ")", "\n", "\n", "c_classic", "=", "dr", ".", "find_optimal_c", "(", "X_train", ",", "labels_train", ",", "means_classic", ",", "covariances_classic", ")", "\n", "c_M", "=", "dr", ".", "find_optimal_c", "(", "X_train", ",", "labels_train", ",", "means_M", ",", "covariances_M", ")", "\n", "\n", "def", "same_covariance_estimator", "(", "covariances", ")", ":", "\n", "\n", "        ", "covariance", "=", "0", "\n", "for", "covariance_cluster", "in", "covariances", ":", "\n", "            ", "covariance", "=", "covariance", "+", "covariance_cluster", "/", "len", "(", "covariances", ")", "\n", "\n", "", "return", "covariance", "\n", "\n", "", "avg_mean_error_classic", "=", "0", "\n", "avg_mean_error_M", "=", "0", "\n", "avg_mean_error_t", "=", "0", "\n", "avg_mean_error_femda", "=", "0", "\n", "r", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "all_mu", "[", "0", "]", "**", "2", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "len", "(", "all_mu", ")", ")", ":", "\n", "        ", "avg_mean_error_classic", "=", "avg_mean_error_classic", "+", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_classic", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "all_sigma", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_classic", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", "[", "0", "]", "[", "0", "]", "/", "(", "len", "(", "all_mu", ")", "*", "r", ")", "\n", "avg_mean_error_M", "=", "avg_mean_error_M", "+", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_M", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "all_sigma", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_M", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", "[", "0", "]", "[", "0", "]", "/", "(", "len", "(", "all_mu", ")", "*", "r", ")", "\n", "avg_mean_error_t", "=", "avg_mean_error_t", "+", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_t", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "all_sigma", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_t", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", "[", "0", "]", "[", "0", "]", "/", "(", "len", "(", "all_mu", ")", "*", "r", ")", "\n", "avg_mean_error_femda", "=", "avg_mean_error_femda", "+", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_femda", "[", "k", "]", "]", ")", ",", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "all_sigma", "[", "k", "]", ")", ",", "np", ".", "array", "(", "[", "all_mu", "[", "k", "]", "-", "means_femda", "[", "k", "]", "]", ")", ".", "T", ")", ")", ")", "[", "0", "]", "[", "0", "]", "/", "(", "len", "(", "all_mu", ")", "*", "r", ")", "\n", "\n", "", "good_classification_LDA_g_classic", "=", "0", "\n", "good_classification_LDA_g_M", "=", "0", "\n", "good_classification_QDA_g_classic", "=", "0", "\n", "good_classification_QDA_g_M", "=", "0", "\n", "good_classification_GQDA_classic", "=", "0", "\n", "good_classification_GQDA_M", "=", "0", "\n", "good_classification_LDA_t", "=", "0", "\n", "good_classification_QDA_t", "=", "0", "\n", "good_classification_FEMDA", "=", "0", "\n", "\n", "predicted_label_LDA_g_classic", "=", "[", "]", "\n", "predicted_label_LDA_g_M", "=", "[", "]", "\n", "predicted_label_QDA_g_classic", "=", "[", "]", "\n", "predicted_label_QDA_g_M", "=", "[", "]", "\n", "predicted_label_GQDA_classic", "=", "[", "]", "\n", "predicted_label_GQDA_M", "=", "[", "]", "\n", "predicted_label_LDA_t", "=", "[", "]", "\n", "predicted_label_QDA_t", "=", "[", "]", "\n", "predicted_label_FEMDA", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "X_test", ")", ")", ":", "\n", "        ", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X_test", "[", "i", "]", ",", "means_classic", ",", "same_covariance_estimator", "(", "covariances_classic", ")", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_classic", "=", "good_classification_LDA_g_classic", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_g_classic", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_g", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "same_covariance_estimator", "(", "covariances_M", ")", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_g_M", "=", "good_classification_LDA_g_M", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_g_M", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ")", "\n", "if", "labels", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_classic", "=", "good_classification_QDA_g_classic", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_g_classic", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_g", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "covariances_M", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_g_M", "=", "good_classification_QDA_g_M", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_g_M", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X_test", "[", "i", "]", ",", "means_classic", ",", "covariances_classic", ",", "c_classic", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_classic", "=", "good_classification_GQDA_classic", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_GQDA_classic", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "GQDA", "(", "X_test", "[", "i", "]", ",", "means_M", ",", "covariances_M", ",", "c_M", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_GQDA_M", "=", "good_classification_GQDA_M", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_GQDA_M", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "LDA_t", "(", "X_test", "[", "i", "]", ",", "means_t", ",", "same_covariance_estimator", "(", "covariances_t", ")", ",", "nus", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_LDA_t", "=", "good_classification_LDA_t", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_LDA_t", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "QDA_t", "(", "X_test", "[", "i", "]", ",", "means_t", ",", "covariances_t", ",", "nus", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_QDA_t", "=", "good_classification_QDA_t", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_QDA_t", ".", "append", "(", "predicted_label", ")", "\n", "\n", "predicted_label", "=", "dr", ".", "FEMDA", "(", "X_test", "[", "i", "]", ",", "means_femda", ",", "covariances_femda", ")", "\n", "if", "labels_test", "[", "i", "]", "==", "predicted_label", ":", "\n", "            ", "good_classification_FEMDA", "=", "good_classification_FEMDA", "+", "1", "/", "len", "(", "X_test", ")", "\n", "", "predicted_label_FEMDA", ".", "append", "(", "predicted_label", ")", "\n", "\n", "", "if", "good_classification_GQDA_M", ">", "good_classification_GQDA_classic", ":", "\n", "        ", "good_classification_GQDA", "=", "good_classification_GQDA_M", "\n", "predicted_label_GQDA", "=", "predicted_label_GQDA_M", "\n", "", "else", ":", "\n", "        ", "good_classification_GQDA", "=", "good_classification_GQDA_classic", "\n", "predicted_label_GQDA", "=", "predicted_label_GQDA_classic", "\n", "\n", "", "errors", "=", "[", "avg_mean_error_classic", ",", "avg_mean_error_M", ",", "avg_mean_error_t", ",", "avg_mean_error_femda", "]", "\n", "accuracy", "=", "[", "good_classification_LDA_g_classic", ",", "good_classification_LDA_g_M", ",", "\n", "good_classification_QDA_g_classic", ",", "good_classification_QDA_g_M", ",", "\n", "good_classification_GQDA", ",", "good_classification_LDA_t", ",", "\n", "good_classification_QDA_t", ",", "good_classification_FEMDA", "]", "\n", "ARI", "=", "[", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_g_M", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_g_M", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_GQDA", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_LDA_t", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_QDA_t", ")", ",", "\n", "adjusted_rand_score", "(", "labels_test", ",", "predicted_label_FEMDA", ")", "]", "\n", "NMI", "=", "[", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_M", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_M", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_GQDA", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_t", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_t", ")", ",", "\n", "normalized_mutual_info_score", "(", "labels_test", ",", "predicted_label_FEMDA", ")", "]", "\n", "AMI", "=", "[", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_classic", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_g_M", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_classic", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_g_M", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_GQDA", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_LDA_t", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_QDA_t", ")", ",", "\n", "adjusted_mutual_info_score", "(", "labels_test", ",", "predicted_label_FEMDA", ")", "]", "\n", "\n", "return", "errors", ",", "accuracy", ",", "ARI", ",", "NMI", ",", "AMI", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_overall_performance_evaluation": [[220, 248], ["simulateur.genere_parametres_simulation", "range", "time.time", "simulateur.dataSimulation", "simu.dataSimulation.generateSamples", "decision_rules_comparison_simulated_data.decision_rules_specific_performance_evaluation", "vector_errors.append", "vector_accuracy.append", "vector_ARI.append", "vector_NMI.append", "vector_AMI.append", "time.time", "print", "decision_rules_comparison_simulated_data.time_needed", "str", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.genere_parametres_simulation", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.simulateur.dataSimulation.generateSamples", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_specific_performance_evaluation", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.time_needed"], ["", "def", "decision_rules_overall_performance_evaluation", "(", "m", ",", "n", ",", "K", ",", "priors", ",", "scenario", ",", "p_conta", ",", "nb_simulations_MC", ")", ":", "\n", "\n", "    ", "\"\"\" Uses the function evalue_performances_on_simulated_data over multiple Monte Carlo simulations to evaluate\n        the performances of the different estimators and decision rules for given paramereters for the data\n        generation. Returns many lists of size nb_simulations_MC containing all the results. Saves all the results\n        under dataframe images in the file created for the simulation.\n    \"\"\"", "\n", "\n", "vector_errors", ",", "vector_accuracy", ",", "vector_ARI", ",", "vector_NMI", ",", "vector_AMI", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "n", ",", "all_pi", ",", "all_mu", ",", "all_sigma", ",", "all_tau", ",", "all_PDF", ",", "p_conta", ",", "conta", "=", "simu", ".", "genere_parametres_simulation", "(", "m", ",", "n", ",", "K", ",", "priors", ",", "scenario", ",", "p_conta", ")", "\n", "\n", "for", "nb_simu", "in", "range", "(", "nb_simulations_MC", ")", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "data_simul", "=", "simu", ".", "dataSimulation", "(", "n", ",", "all_pi", ",", "all_mu", ",", "all_sigma", ",", "all_tau", ",", "all_PDF", ",", "p_conta", ",", "conta", ")", "\n", "X", ",", "labels", ",", "_", "=", "data_simul", ".", "generateSamples", "(", ")", "\n", "errors", ",", "accuracy", ",", "ARI", ",", "NMI", ",", "AMI", "=", "decision_rules_specific_performance_evaluation", "(", "X", ",", "labels", ",", "all_mu", ",", "all_sigma", ")", "\n", "vector_errors", ".", "append", "(", "errors", ")", "\n", "vector_accuracy", ".", "append", "(", "accuracy", ")", "\n", "vector_ARI", ".", "append", "(", "ARI", ")", "\n", "vector_NMI", ".", "append", "(", "NMI", ")", "\n", "vector_AMI", ".", "append", "(", "AMI", ")", "\n", "\n", "finish", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "str", "(", "np", ".", "round", "(", "100", "*", "nb_simu", "/", "nb_simulations_MC", ")", ")", "+", "\" %                  \"", "+", "time_needed", "(", "int", "(", "finish", "-", "start", ")", ")", ")", "\n", "\n", "", "return", "vector_errors", ",", "vector_accuracy", ",", "vector_ARI", ",", "vector_NMI", ",", "vector_AMI", "\n", "\n"]], "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.save_results": [[249, 410], ["range", "range", "range", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "open", "pickle.dump", "open.close", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "pd.DataFrame.style.background_gradient", "dataframe_image.export", "print", "len", "time.time", "print", "decision_rules_comparison_simulated_data.decision_rules_overall_performance_evaluation", "matrix_errors.append", "matrix_accuracy.append", "matrix_ARI.append", "matrix_NMI.append", "matrix_AMI.append", "time.time", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "range", "len", "range", "range", "range", "range", "range", "range", "range", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "numpy.mean", "numpy.median", "numpy.std", "str", "decision_rules_comparison_simulated_data.time_needed", "range", "len", "range", "len", "range", "len", "range", "len", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "[].append", "[].append", "[].append", "[].append", "numpy.mean", "numpy.median", "numpy.std", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int", "[].append", "numpy.array", "numpy.array", "numpy.array", "str", "str", "len", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.decision_rules_overall_performance_evaluation", "home.repos.pwc.inspect_result.andrewwango_femda.experiments.decision_rules_comparison_simulated_data.time_needed"], ["", "def", "save_results", "(", "path", ",", "m", ",", "n", ",", "K", ",", "priors", ",", "list_scenarios", ",", "p_conta", ",", "simulation_id", ",", "nb_simulations_MC", "=", "10", ")", ":", "\n", "\n", "    ", "\"\"\" Uses the function evalue_performances_for given_parameters to evaluate the performances of the different \n        estimators and decision rules for given paramereters for the data generation over multiple scenarios.\n    \"\"\"", "\n", "\n", "matrix_errors", ",", "matrix_accuracy", ",", "matrix_ARI", ",", "matrix_NMI", ",", "matrix_AMI", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"D\u00e9but de l'\u00e9tude du sc\u00e9nario\"", ")", "\n", "\n", "scenario", "=", "list_scenarios", "[", "i", "]", "\n", "vector_errors", ",", "vector_accuracy", ",", "vector_ARI", ",", "vector_NMI", ",", "vector_AMI", "=", "decision_rules_overall_performance_evaluation", "(", "m", ",", "n", ",", "K", ",", "priors", ",", "scenario", ",", "p_conta", ",", "nb_simulations_MC", ")", "\n", "matrix_errors", ".", "append", "(", "vector_errors", ")", "\n", "matrix_accuracy", ".", "append", "(", "vector_accuracy", ")", "\n", "matrix_ARI", ".", "append", "(", "vector_ARI", ")", "\n", "matrix_NMI", ".", "append", "(", "vector_NMI", ")", "\n", "matrix_AMI", ".", "append", "(", "vector_AMI", ")", "\n", "\n", "finish", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Fin de l'\u00e9tude du sc\u00e9nario - \"", "+", "str", "(", "1", "+", "i", ")", "+", "\" / \"", "+", "str", "(", "len", "(", "list_scenarios", ")", ")", "+", "\"                  \"", "+", "time_needed", "(", "int", "(", "finish", "-", "start", ")", ")", ")", "\n", "\n", "", "restructured_matrix_errors", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "5", ")", "]", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", "]", "\n", "restructured_matrix_accuracy", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "11", ")", "]", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", "]", "\n", "restructured_matrix_ARI", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "11", ")", "]", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", "]", "\n", "restructured_matrix_NMI", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "11", ")", "]", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", "]", "\n", "restructured_matrix_AMI", "=", "[", "[", "[", "]", "for", "i", "in", "range", "(", "11", ")", "]", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", "]", "\n", "matrix_mean_errors", ",", "matrix_median_errors", ",", "matrix_std_errors", "=", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "4", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "4", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "4", "]", ")", "\n", "matrix_mean_accuracy", ",", "matrix_median_accuracy", ",", "matrix_std_accuracy", "=", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", "\n", "matrix_mean_ARI", ",", "matrix_median_ARI", ",", "matrix_std_ARI", "=", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", "\n", "matrix_mean_NMI", ",", "matrix_median_NMI", ",", "matrix_std_NMI", "=", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", "\n", "matrix_mean_AMI", ",", "matrix_median_AMI", ",", "matrix_std_AMI", "=", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", ",", "np", ".", "zeros", "(", "[", "len", "(", "list_scenarios", ")", ",", "8", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "nb_simulations_MC", ")", ":", "\n", "                ", "if", "j", "<", "4", ":", "\n", "                    ", "restructured_matrix_errors", "[", "i", "]", "[", "j", "]", ".", "append", "(", "matrix_errors", "[", "i", "]", "[", "k", "]", "[", "j", "]", ")", "\n", "", "restructured_matrix_accuracy", "[", "i", "]", "[", "j", "]", ".", "append", "(", "matrix_accuracy", "[", "i", "]", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_matrix_ARI", "[", "i", "]", "[", "j", "]", ".", "append", "(", "matrix_ARI", "[", "i", "]", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_matrix_NMI", "[", "i", "]", "[", "j", "]", ".", "append", "(", "matrix_NMI", "[", "i", "]", "[", "k", "]", "[", "j", "]", ")", "\n", "restructured_matrix_AMI", "[", "i", "]", "[", "j", "]", ".", "append", "(", "matrix_AMI", "[", "i", "]", "[", "k", "]", "[", "j", "]", ")", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "list_scenarios", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "if", "j", "<", "4", ":", "\n", "                ", "matrix_mean_errors", "[", "i", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_matrix_errors", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_median_errors", "[", "i", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_matrix_errors", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_std_errors", "[", "i", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_matrix_errors", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "", "matrix_mean_accuracy", "[", "i", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_matrix_accuracy", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_median_accuracy", "[", "i", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_matrix_accuracy", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_std_accuracy", "[", "i", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_matrix_accuracy", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_mean_ARI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_matrix_ARI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_median_ARI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_matrix_ARI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_std_ARI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_matrix_ARI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_mean_NMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_matrix_NMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_median_NMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_matrix_NMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_std_NMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_matrix_NMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_mean_AMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "restructured_matrix_AMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_median_AMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "median", "(", "np", ".", "array", "(", "restructured_matrix_AMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "matrix_std_AMI", "[", "i", "]", "[", "j", "]", "=", "np", ".", "std", "(", "np", ".", "array", "(", "restructured_matrix_AMI", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "\n", "", "", "df_mean_errors", "=", "pd", ".", "DataFrame", "(", "matrix_mean_errors", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'Classic estimator'", ",", "'M-estimator'", ",", "'t-distribution estimator'", ",", "'FEMDA estimator'", "]", ")", "\n", "df_median_errors", "=", "pd", ".", "DataFrame", "(", "matrix_median_errors", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'Classic estimator'", ",", "'M-estimator'", ",", "'t-distribution estimator'", ",", "'FEMDA estimator'", "]", ")", "\n", "df_std_errors", "=", "pd", ".", "DataFrame", "(", "matrix_std_errors", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'Classic estimator'", ",", "'M-estimator'", ",", "'t-distribution estimator'", ",", "'FEMDA estimator'", "]", ")", "\n", "df_mean_accuracy", "=", "pd", ".", "DataFrame", "(", "matrix_mean_accuracy", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_median_accuracy", "=", "pd", ".", "DataFrame", "(", "matrix_median_accuracy", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_std_accuracy", "=", "pd", ".", "DataFrame", "(", "matrix_std_accuracy", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_mean_ARI", "=", "pd", ".", "DataFrame", "(", "matrix_mean_ARI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_median_ARI", "=", "pd", ".", "DataFrame", "(", "matrix_median_ARI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_std_ARI", "=", "pd", ".", "DataFrame", "(", "matrix_std_ARI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_mean_NMI", "=", "pd", ".", "DataFrame", "(", "matrix_mean_NMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_median_NMI", "=", "pd", ".", "DataFrame", "(", "matrix_median_NMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_std_NMI", "=", "pd", ".", "DataFrame", "(", "matrix_std_NMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_mean_AMI", "=", "pd", ".", "DataFrame", "(", "matrix_mean_AMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_median_AMI", "=", "pd", ".", "DataFrame", "(", "matrix_median_AMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "df_std_AMI", "=", "pd", ".", "DataFrame", "(", "matrix_std_AMI", ",", "index", "=", "[", "scenario", "for", "scenario", "in", "list_scenarios", "]", ",", "columns", "=", "[", "'LDA_g - Classic'", ",", "'LDA_g - M'", ",", "'QDA_g - Classic'", ",", "'QDA_g - M'", ",", "'GQDA'", ",", "'LDA_t'", ",", "'QDA_t'", ",", "'FEMDA'", "]", ")", "\n", "\n", "path2", "=", "path", "+", "\"Simulation \"", "+", "str", "(", "simulation_id", ")", "+", "\" - m=\"", "+", "str", "(", "m", ")", "+", "\" - K=\"", "+", "str", "(", "K", ")", "+", "\" - n=\"", "+", "str", "(", "n", ")", "+", "\" - p_conta=\"", "+", "str", "(", "p_conta", ")", "+", "\"/\"", "\n", "\n", "f", "=", "open", "(", "path2", "+", "\"Matrix errors\"", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "restructured_matrix_errors", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "path2", "+", "\"Matrix Accuracy\"", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "restructured_matrix_accuracy", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "path2", "+", "\"Matrix ARI\"", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "restructured_matrix_ARI", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "path2", "+", "\"Matrix NMI\"", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "restructured_matrix_NMI", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "f", "=", "open", "(", "path2", "+", "\"Matrix AMI\"", ",", "\"wb\"", ")", "\n", "pk", ".", "dump", "(", "restructured_matrix_AMI", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "df_styled", "=", "df_mean_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Errors - mean.png\"", ")", "\n", "df_styled", "=", "df_median_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Errors - median.png\"", ")", "\n", "df_styled", "=", "df_std_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Errors - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Accuracy - mean.png\"", ")", "\n", "df_styled", "=", "df_median_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Accuracy - median.png\"", ")", "\n", "df_styled", "=", "df_std_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - Accuracy - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - ARI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - ARI - median.png\"", ")", "\n", "df_styled", "=", "df_std_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - ARI - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - NMI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - NMI - median.png\"", ")", "\n", "df_styled", "=", "df_std_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - NMI - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - AMI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - AMI - median.png\"", ")", "\n", "df_styled", "=", "df_std_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "0", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des datasets - AMI - standard deviation.png\"", ")", "\n", "\n", "df_styled", "=", "df_mean_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Errors - mean.png\"", ")", "\n", "df_styled", "=", "df_median_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Errors - median.png\"", ")", "\n", "df_styled", "=", "df_std_errors", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Errors - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Accuracy - mean.png\"", ")", "\n", "df_styled", "=", "df_median_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Accuracy - median.png\"", ")", "\n", "df_styled", "=", "df_std_accuracy", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - Accuracy - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - ARI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - ARI - median.png\"", ")", "\n", "df_styled", "=", "df_std_ARI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - ARI - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - NMI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - NMI - median.png\"", ")", "\n", "df_styled", "=", "df_std_NMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - NMI - standard deviation.png\"", ")", "\n", "df_styled", "=", "df_mean_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - AMI - mean.png\"", ")", "\n", "df_styled", "=", "df_median_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - AMI - median.png\"", ")", "\n", "df_styled", "=", "df_std_AMI", ".", "style", ".", "background_gradient", "(", "axis", "=", "1", ")", "\n", "dfi", ".", "export", "(", "df_styled", ",", "path2", "+", "\"Comparaison des decision rules - AMI - standard deviation.png\"", ")", "\n", "\n", "print", "(", "\"La liste des sc\u00e9narios a \u00e9t\u00e9 trait\u00e9e et sauvegard\u00e9e\"", ")", "", "", ""]]}