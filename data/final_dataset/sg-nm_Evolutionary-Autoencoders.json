{"home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.__init__": [[12, 23], ["numpy.zeros().astype", "numpy.empty().astype", "numpy.empty().astype", "print", "cgp.Individual.init_gene_with_conv", "cgp.Individual.init_gene", "numpy.zeros", "numpy.empty", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene_with_conv", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene"], ["    ", "def", "__init__", "(", "self", ",", "net_info", ",", "init", ")", ":", "\n", "        ", "self", ".", "net_info", "=", "net_info", "\n", "self", ".", "gene", "=", "np", ".", "zeros", "(", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ",", "self", ".", "net_info", ".", "max_in_num", "+", "1", ")", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "is_active", "=", "np", ".", "empty", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "is_pool", "=", "np", ".", "empty", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "eval", "=", "None", "\n", "if", "init", ":", "\n", "            ", "print", "(", "'init with specific architectures'", ")", "\n", "self", ".", "init_gene_with_conv", "(", ")", "# In the case of starting only convolution", "\n", "", "else", ":", "\n", "            ", "self", ".", "init_gene", "(", ")", "# generate initial individual randomly", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.init_gene_with_conv": [[24, 85], ["enumerate", "numpy.random.randint", "numpy.min", "range", "block_ids.append", "range", "cgp.Individual.check_active", "int", "int", "block_ids.append", "cgp.Individual.net_info.func_type.index", "numpy.min", "range", "numpy.random.randint", "numpy.min", "range", "len", "range", "numpy.random.randint", "int", "numpy.random.randint", "len", "int", "numpy.random.randint", "int", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["", "", "def", "init_gene_with_conv", "(", "self", ")", ":", "\n", "# initial architecture", "\n", "        ", "arch", "=", "[", "'S_ConvBlock_64_3'", "]", "\n", "\n", "input_layer_num", "=", "int", "(", "self", ".", "net_info", ".", "input_num", "/", "self", ".", "net_info", ".", "rows", ")", "+", "1", "\n", "output_layer_num", "=", "int", "(", "self", ".", "net_info", ".", "out_num", "/", "self", ".", "net_info", ".", "rows", ")", "+", "1", "\n", "layer_ids", "=", "[", "(", "(", "self", ".", "net_info", ".", "cols", "-", "1", "-", "input_layer_num", "-", "output_layer_num", ")", "+", "i", ")", "//", "(", "len", "(", "arch", ")", ")", "for", "i", "in", "range", "(", "len", "(", "arch", ")", ")", "]", "\n", "prev_id", "=", "0", "# i.e. input layer", "\n", "current_layer", "=", "input_layer_num", "\n", "block_ids", "=", "[", "]", "# *do not connect with these ids", "\n", "\n", "# building convolution net", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "layer_ids", ")", ":", "\n", "\n", "            ", "current_layer", "+=", "idx", "\n", "n", "=", "current_layer", "*", "self", ".", "net_info", ".", "rows", "+", "np", ".", "random", ".", "randint", "(", "self", ".", "net_info", ".", "rows", ")", "\n", "block_ids", ".", "append", "(", "n", ")", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "net_info", ".", "func_type", ".", "index", "(", "arch", "[", "i", "]", ")", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "\n", "self", ".", "gene", "[", "n", "]", "[", "1", "]", "=", "prev_id", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "j", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "prev_id", "=", "n", "+", "self", ".", "net_info", ".", "input_num", "\n", "\n", "# output layer        ", "\n", "", "n", "=", "self", ".", "net_info", ".", "node_num", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "\n", "self", ".", "gene", "[", "n", "]", "[", "1", "]", "=", "prev_id", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "            ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "", "block_ids", ".", "append", "(", "n", ")", "\n", "\n", "# intermediate node", "\n", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "\n", "            ", "if", "n", "in", "block_ids", ":", "\n", "                ", "continue", "\n", "\n", "# type gene", "\n", "", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "# connection gene", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "", "self", ".", "check_active", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.init_gene": [[86, 101], ["range", "cgp.Individual.check_active", "numpy.random.randint", "numpy.min", "range", "int", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["", "def", "init_gene", "(", "self", ")", ":", "\n", "# intermediate node", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "# type gene", "\n", "            ", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "# connection gene", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "", "self", ".", "check_active", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.__check_course_to_out": [[102, 114], ["range", "cgp.Individual.__check_course_to_out"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__check_course_to_out"], ["", "def", "__check_course_to_out", "(", "self", ",", "n", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_active", "[", "n", "]", ":", "\n", "            ", "self", ".", "is_active", "[", "n", "]", "=", "True", "\n", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "if", "n", ">=", "self", ".", "net_info", ".", "node_num", ":", "# output node", "\n", "                ", "in_num", "=", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "", "else", ":", "# intermediate node", "\n", "                ", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "in_num", ")", ":", "\n", "                ", "if", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ">=", "self", ".", "net_info", ".", "input_num", ":", "\n", "                    ", "self", ".", "__check_course_to_out", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "-", "self", ".", "net_info", ".", "input_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.check_active": [[115, 121], ["range", "cgp.Individual.__check_course_to_out"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__check_course_to_out"], ["", "", "", "", "def", "check_active", "(", "self", ")", ":", "\n", "# clear", "\n", "        ", "self", ".", "is_active", "[", ":", "]", "=", "False", "\n", "# start from output nodes", "\n", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "            ", "self", ".", "__check_course_to_out", "(", "self", ".", "net_info", ".", "node_num", "+", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.__mutate": [[122, 127], ["numpy.random.randint"], "methods", ["None"], ["", "", "def", "__mutate", "(", "self", ",", "current", ",", "min_int", ",", "max_int", ")", ":", "\n", "        ", "mutated_gene", "=", "current", "\n", "while", "current", "==", "mutated_gene", ":", "\n", "            ", "mutated_gene", "=", "min_int", "+", "np", ".", "random", ".", "randint", "(", "max_int", "-", "min_int", ")", "\n", "", "return", "mutated_gene", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.mutation": [[128, 153], ["range", "cgp.Individual.check_active", "numpy.min", "range", "cgp.Individual.__mutate", "numpy.random.rand", "int", "cgp.Individual.__mutate", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate"], ["", "def", "mutation", "(", "self", ",", "mutation_rate", "=", "0.01", ")", ":", "\n", "        ", "active_check", "=", "False", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "            ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "# mutation for type gene", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "type_num", ">", "1", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "0", "]", ",", "0", ",", "type_num", ")", "\n", "if", "self", ".", "is_active", "[", "n", "]", ":", "\n", "                    ", "active_check", "=", "True", "\n", "# mutation for connection gene", "\n", "", "", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "max_connect_id", "-", "min_connect_id", ">", "1", ":", "\n", "                    ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ",", "min_connect_id", ",", "max_connect_id", ")", "\n", "if", "self", ".", "is_active", "[", "n", "]", "and", "i", "<", "in_num", ":", "\n", "                        ", "active_check", "=", "True", "\n", "\n", "", "", "", "", "self", ".", "check_active", "(", ")", "\n", "return", "active_check", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.neutral_mutation": [[154, 174], ["range", "cgp.Individual.check_active", "numpy.min", "range", "cgp.Individual.__mutate", "numpy.random.rand", "int", "cgp.Individual.__mutate", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate"], ["", "def", "neutral_mutation", "(", "self", ",", "mutation_rate", "=", "0.01", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "            ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "# mutation for type gene", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "if", "not", "self", ".", "is_active", "[", "n", "]", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "type_num", ">", "1", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "0", "]", ",", "0", ",", "type_num", ")", "\n", "# mutation for connection gene", "\n", "", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "if", "(", "not", "self", ".", "is_active", "[", "n", "]", "or", "i", ">=", "in_num", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "max_connect_id", "-", "min_connect_id", ">", "1", ":", "\n", "                    ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ",", "min_connect_id", ",", "max_connect_id", ")", "\n", "\n", "", "", "", "self", ".", "check_active", "(", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.count_active_node": [[175, 177], ["cgp.Individual.is_active.sum"], "methods", ["None"], ["", "def", "count_active_node", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "is_active", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.copy": [[178, 183], ["source.gene.copy", "source.is_active.copy"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy"], ["", "def", "copy", "(", "self", ",", "source", ")", ":", "\n", "        ", "self", ".", "net_info", "=", "source", ".", "net_info", "\n", "self", ".", "gene", "=", "source", ".", "gene", ".", "copy", "(", ")", "\n", "self", ".", "is_active", "=", "source", ".", "is_active", ".", "copy", "(", ")", "\n", "self", ".", "eval", "=", "source", ".", "eval", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.Individual.active_net_list": [[184, 200], ["numpy.arange", "numpy.cumsum", "enumerate", "net_list.append", "range"], "methods", ["None"], ["", "def", "active_net_list", "(", "self", ")", ":", "\n", "        ", "net_list", "=", "[", "[", "\"input\"", ",", "0", "]", "]", "\n", "active_cnt", "=", "np", ".", "arange", "(", "self", ".", "net_info", ".", "input_num", "+", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", "\n", "active_cnt", "[", "self", ".", "net_info", ".", "input_num", ":", "]", "=", "np", ".", "cumsum", "(", "self", ".", "is_active", ")", "\n", "\n", "for", "n", ",", "is_a", "in", "enumerate", "(", "self", ".", "is_active", ")", ":", "\n", "            ", "if", "is_a", ":", "\n", "                ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "if", "n", "<", "self", ".", "net_info", ".", "node_num", ":", "# intermediate node", "\n", "                    ", "type_str", "=", "self", ".", "net_info", ".", "func_type", "[", "t", "]", "\n", "", "else", ":", "# output node", "\n", "                    ", "type_str", "=", "self", ".", "net_info", ".", "out_type", "[", "t", "]", "\n", "\n", "", "connections", "=", "[", "active_cnt", "[", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", "]", "\n", "net_list", ".", "append", "(", "[", "type_str", "]", "+", "connections", ")", "\n", "", "", "return", "net_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP.__init__": [[204, 212], ["int", "cgp.Individual", "range", "math.log2"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net_info", ",", "eval_func", ",", "lam", "=", "4", ",", "imgSize", "=", "32", ",", "init", "=", "False", ")", ":", "\n", "        ", "self", ".", "lam", "=", "lam", "\n", "self", ".", "pop", "=", "[", "Individual", "(", "net_info", ",", "init", ")", "for", "_", "in", "range", "(", "1", "+", "self", ".", "lam", ")", "]", "\n", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "num_gen", "=", "0", "\n", "self", ".", "num_eval", "=", "0", "\n", "self", ".", "max_pool_num", "=", "int", "(", "math", ".", "log2", "(", "imgSize", ")", "-", "2", ")", "\n", "self", ".", "init", "=", "init", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP._evaluation": [[213, 230], ["cgp.CGP.eval_func", "enumerate", "numpy.zeros", "range", "len", "numpy.where", "net_lists.append", "len", "len", "pop[].active_net_list"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["", "def", "_evaluation", "(", "self", ",", "pop", ",", "eval_flag", ")", ":", "\n", "# create network list", "\n", "        ", "net_lists", "=", "[", "]", "\n", "active_index", "=", "np", ".", "where", "(", "eval_flag", ")", "[", "0", "]", "\n", "for", "i", "in", "active_index", ":", "\n", "            ", "net_lists", ".", "append", "(", "pop", "[", "i", "]", ".", "active_net_list", "(", ")", ")", "\n", "\n", "# evaluation", "\n", "", "fp", "=", "self", ".", "eval_func", "(", "net_lists", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "active_index", ")", ":", "\n", "            ", "pop", "[", "j", "]", ".", "eval", "=", "fp", "[", "i", "]", "\n", "", "evaluations", "=", "np", ".", "zeros", "(", "len", "(", "pop", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pop", ")", ")", ":", "\n", "            ", "evaluations", "[", "i", "]", "=", "pop", "[", "i", "]", ".", "eval", "\n", "\n", "", "self", ".", "num_eval", "+=", "len", "(", "net_lists", ")", "\n", "return", "evaluations", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP._log_data": [[231, 240], ["cgp.CGP.pop[].count_active_node", "log_list.append", "time.time", "cgp.CGP.pop[].active_net_list", "cgp.CGP.pop[].gene.flatten().tolist", "cgp.CGP.pop[].gene.flatten"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["", "def", "_log_data", "(", "self", ",", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "0", ")", ":", "\n", "        ", "log_list", "=", "[", "self", ".", "num_gen", ",", "self", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "self", ".", "pop", "[", "0", "]", ".", "eval", ",", "self", ".", "pop", "[", "0", "]", ".", "count_active_node", "(", ")", "]", "\n", "if", "net_info_type", "==", "'active_only'", ":", "\n", "            ", "log_list", ".", "append", "(", "self", ".", "pop", "[", "0", "]", ".", "active_net_list", "(", ")", ")", "\n", "", "elif", "net_info_type", "==", "'full'", ":", "\n", "            ", "log_list", "+=", "self", ".", "pop", "[", "0", "]", ".", "gene", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "log_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP._log_data_children": [[241, 250], ["pop.count_active_node", "log_list.append", "time.time", "pop.active_net_list", "pop.gene.flatten().tolist", "pop.gene.flatten"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["", "def", "_log_data_children", "(", "self", ",", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "0", ",", "pop", "=", "None", ")", ":", "\n", "        ", "log_list", "=", "[", "self", ".", "num_gen", ",", "self", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "pop", ".", "eval", ",", "pop", ".", "count_active_node", "(", ")", "]", "\n", "if", "net_info_type", "==", "'active_only'", ":", "\n", "            ", "log_list", ".", "append", "(", "pop", ".", "active_net_list", "(", ")", ")", "\n", "", "elif", "net_info_type", "==", "'full'", ":", "\n", "            ", "log_list", "+=", "pop", ".", "gene", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "log_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP.load_log": [[251, 258], ["numpy.array().reshape", "cgp.CGP.pop[].check_active", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["", "def", "load_log", "(", "self", ",", "log_data", ")", ":", "\n", "        ", "self", ".", "num_gen", "=", "log_data", "[", "0", "]", "\n", "self", ".", "num_eval", "=", "log_data", "[", "1", "]", "\n", "net_info", "=", "self", ".", "pop", "[", "0", "]", ".", "net_info", "\n", "self", ".", "pop", "[", "0", "]", ".", "eval", "=", "log_data", "[", "3", "]", "\n", "self", ".", "pop", "[", "0", "]", ".", "gene", "=", "np", ".", "array", "(", "log_data", "[", "5", ":", "]", ")", ".", "reshape", "(", "(", "net_info", ".", "node_num", "+", "net_info", ".", "out_num", ",", "net_info", ".", "max_in_num", "+", "1", ")", ")", "\n", "self", ".", "pop", "[", "0", "]", ".", "check_active", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp.CGP.modified_evolution": [[264, 316], ["open", "open", "open", "open", "csv.writer", "csv.writer", "csv.writer", "csv.writer", "time.time", "numpy.empty", "cgp.CGP.pop[].count_active_node", "cgp.CGP._evaluation", "print", "numpy.array", "cgp.CGP._log_data", "range", "cgp.CGP._evaluation", "cgp.CGP.argmax", "range", "print", "csv.writer.writerow", "csv.writer.writerow", "cgp.CGP.pop[].mutation", "cgp.CGP.pop[].count_active_node", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].count_active_node", "csv.writer.writerow", "csv.writer.writerow", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].neutral_mutation", "cgp.CGP._log_data", "cgp.CGP._log_data", "cgp.CGP._log_data", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].mutation", "cgp.CGP.pop[].count_active_node", "cgp.CGP._log_data_children", "cgp.CGP._log_data_children"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._evaluation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._evaluation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.neutral_mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data_children", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data_children"], ["", "def", "modified_evolution", "(", "self", ",", "max_eval", "=", "100", ",", "mutation_rate", "=", "0.01", ",", "log_file", "=", "'./log.txt'", ",", "arch_file", "=", "'./arch.txt'", ")", ":", "\n", "        ", "with", "open", "(", "log_file", ",", "'w'", ")", "as", "fw", ",", "open", "(", "arch_file", ",", "'w'", ")", "as", "fw_a", ",", "open", "(", "'child.txt'", ",", "'w'", ")", "as", "fw_c", ",", "open", "(", "'arch_child.txt'", ",", "'w'", ")", "as", "fw_ac", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "fw", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_a", "=", "csv", ".", "writer", "(", "fw_a", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_c", "=", "csv", ".", "writer", "(", "fw_c", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_ac", "=", "csv", ".", "writer", "(", "fw_ac", ",", "lineterminator", "=", "'\\n'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "eval_flag", "=", "np", ".", "empty", "(", "self", ".", "lam", ")", "\n", "\n", "active_num", "=", "self", ".", "pop", "[", "0", "]", ".", "count_active_node", "(", ")", "\n", "if", "self", ".", "init", ":", "\n", "                ", "pass", "\n", "", "else", ":", "# in the case of not using an init indiviudal", "\n", "                ", "while", "active_num", "<", "self", ".", "pop", "[", "0", "]", ".", "net_info", ".", "min_active_num", "or", "active_num", ">", "self", ".", "pop", "[", "0", "]", ".", "net_info", ".", "max_active_num", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "mutation", "(", "1.0", ")", "\n", "active_num", "=", "self", ".", "pop", "[", "0", "]", ".", "count_active_node", "(", ")", "\n", "", "", "self", ".", "_evaluation", "(", "[", "self", ".", "pop", "[", "0", "]", "]", ",", "np", ".", "array", "(", "[", "True", "]", ")", ")", "\n", "print", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "\n", "\n", "while", "self", ".", "num_gen", "<", "max_eval", ":", "\n", "                ", "self", ".", "num_gen", "+=", "1", "\n", "# reproduction", "\n", "for", "i", "in", "range", "(", "self", ".", "lam", ")", ":", "\n", "                    ", "eval_flag", "[", "i", "]", "=", "False", "\n", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "copy", "(", "self", ".", "pop", "[", "0", "]", ")", "# copy a parent", "\n", "active_num", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "count_active_node", "(", ")", "\n", "# mutation", "\n", "while", "not", "eval_flag", "[", "i", "]", "or", "active_num", "<", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "net_info", ".", "min_active_num", "or", "active_num", ">", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "net_info", ".", "max_active_num", ":", "\n", "                        ", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "copy", "(", "self", ".", "pop", "[", "0", "]", ")", "# copy a parent", "\n", "eval_flag", "[", "i", "]", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "mutation", "(", "mutation_rate", ")", "# mutation", "\n", "active_num", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "count_active_node", "(", ")", "\n", "\n", "# evaluation and selection", "\n", "", "", "evaluations", "=", "self", ".", "_evaluation", "(", "self", ".", "pop", "[", "1", ":", "]", ",", "eval_flag", "=", "eval_flag", ")", "\n", "best_arg", "=", "evaluations", ".", "argmax", "(", ")", "\n", "# save log", "\n", "for", "c", "in", "range", "(", "1", "+", "self", ".", "lam", ")", ":", "\n", "                    ", "writer_c", ".", "writerow", "(", "self", ".", "_log_data_children", "(", "net_info_type", "=", "'full'", ",", "start_time", "=", "start_time", ",", "pop", "=", "self", ".", "pop", "[", "c", "]", ")", ")", "\n", "writer_ac", ".", "writerow", "(", "self", ".", "_log_data_children", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ",", "pop", "=", "self", ".", "pop", "[", "c", "]", ")", ")", "\n", "\n", "", "if", "evaluations", "[", "best_arg", "]", ">", "self", ".", "pop", "[", "0", "]", ".", "eval", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "copy", "(", "self", ".", "pop", "[", "best_arg", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "neutral_mutation", "(", "mutation_rate", ")", "# modify the parent", "\n", "\n", "# display and save log", "\n", "", "print", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'full'", ",", "start_time", "=", "start_time", ")", ")", "\n", "writer_a", ".", "writerow", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.NoDaemonProcess._get_daemon": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "_get_daemon", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "def", "_set_daemon", "(", "self", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.NoDaemonProcess._set_daemon": [[18, 20], ["None"], "methods", ["None"], ["", "def", "_set_daemon", "(", "self", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "", "daemon", "=", "property", "(", "_get_daemon", ",", "_set_daemon", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.CNNEvaluation.__init__": [[39, 46], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu_num", ",", "dataset", "=", "'cifar10'", ",", "verbose", "=", "True", ",", "epoch_num", "=", "50", ",", "batchsize", "=", "16", ",", "imgSize", "=", "32", ")", ":", "\n", "        ", "self", ".", "gpu_num", "=", "gpu_num", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "imgSize", "=", "imgSize", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.CNNEvaluation.__call__": [[47, 57], ["numpy.zeros", "numpy.arange", "len", "len", "cgp_config.NoDaemonProcessPool", "NoDaemonProcessPool.map", "NoDaemonProcessPool.terminate", "numpy.min", "range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "net_lists", ")", ":", "\n", "        ", "evaluations", "=", "np", ".", "zeros", "(", "len", "(", "net_lists", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "net_lists", ")", ",", "self", ".", "gpu_num", ")", ":", "\n", "            ", "process_num", "=", "np", ".", "min", "(", "(", "i", "+", "self", ".", "gpu_num", ",", "len", "(", "net_lists", ")", ")", ")", "-", "i", "\n", "pool", "=", "NoDaemonProcessPool", "(", "process_num", ")", "\n", "arg_data", "=", "[", "(", "cnn_eval", ",", "net_lists", "[", "i", "+", "j", "]", ",", "j", ",", "self", ".", "epoch_num", ",", "self", ".", "batchsize", ",", "self", ".", "dataset", ",", "self", ".", "verbose", ",", "self", ".", "imgSize", ")", "for", "j", "in", "range", "(", "process_num", ")", "]", "\n", "evaluations", "[", "i", ":", "i", "+", "process_num", "]", "=", "pool", ".", "map", "(", "arg_wrapper_mp", ",", "arg_data", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "\n", "", "return", "evaluations", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.CgpInfoConvSet.__init__": [[61, 95], ["len", "len", "numpy.max", "numpy.max", "numpy.max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rows", "=", "30", ",", "cols", "=", "40", ",", "level_back", "=", "40", ",", "min_active_num", "=", "8", ",", "max_active_num", "=", "50", ")", ":", "\n", "        ", "self", ".", "input_num", "=", "1", "\n", "# \"S_\" means that the layer has a convolution layer without downsampling.", "\n", "# \"D_\" means that the layer has a convolution layer with downsampling.", "\n", "# \"Sum\" means that the layer has a skip connection.", "\n", "self", ".", "func_type", "=", "[", "'S_ConvBlock_256_1'", ",", "'S_ConvBlock_256_3'", ",", "'S_ConvBlock_256_5'", ",", "\n", "'S_ConvBlock_128_1'", ",", "'S_ConvBlock_128_3'", ",", "'S_ConvBlock_128_5'", ",", "\n", "'S_ConvBlock_64_1'", ",", "'S_ConvBlock_64_3'", ",", "'S_ConvBlock_64_5'", ",", "\n", "'S_SumConvBlock_256_1'", ",", "'S_SumConvBlock_256_3'", ",", "'S_SumConvBlock_256_5'", ",", "\n", "'S_SumConvBlock_128_1'", ",", "'S_SumConvBlock_128_3'", ",", "'S_SumConvBlock_128_5'", ",", "\n", "'S_SumConvBlock_64_1'", ",", "'S_SumConvBlock_64_3'", ",", "'S_SumConvBlock_64_5'", "]", "\n", "\n", "self", ".", "func_in_num", "=", "[", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", "]", "\n", "\n", "self", ".", "out_num", "=", "1", "\n", "self", ".", "out_type", "=", "[", "'S_DeConvBlock_1_3'", "]", "\n", "self", ".", "out_in_num", "=", "[", "1", "]", "\n", "\n", "# CGP network configuration", "\n", "self", ".", "rows", "=", "rows", "\n", "self", ".", "cols", "=", "cols", "\n", "self", ".", "node_num", "=", "rows", "*", "cols", "\n", "self", ".", "level_back", "=", "level_back", "\n", "self", ".", "min_active_num", "=", "min_active_num", "\n", "self", ".", "max_active_num", "=", "max_active_num", "\n", "\n", "self", ".", "func_type_num", "=", "len", "(", "self", ".", "func_type", ")", "\n", "self", ".", "out_type_num", "=", "len", "(", "self", ".", "out_type", ")", "\n", "self", ".", "max_in_num", "=", "np", ".", "max", "(", "[", "np", ".", "max", "(", "self", ".", "func_in_num", ")", ",", "np", ".", "max", "(", "self", ".", "out_in_num", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.arg_wrapper_mp": [[11, 13], ["None"], "function", ["None"], ["def", "arg_wrapper_mp", "(", "args", ")", ":", "\n", "    ", "return", "args", "[", "0", "]", "(", "*", "args", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cgp_config.cnn_eval": [[29, 36], ["print", "cnn_train.CNN_train", "cnn.CNN_train.", "print"], "function", ["None"], ["", "def", "cnn_eval", "(", "net", ",", "gpu_id", ",", "epoch_num", ",", "batchsize", ",", "dataset", ",", "verbose", ",", "imgSize", ")", ":", "\n", "\n", "    ", "print", "(", "'\\tgpu_id:'", ",", "gpu_id", ",", "','", ",", "net", ")", "\n", "train", "=", "cnn", ".", "CNN_train", "(", "dataset", ",", "validation", "=", "True", ",", "verbose", "=", "verbose", ",", "imgSize", "=", "imgSize", ",", "batchsize", "=", "batchsize", ")", "\n", "evaluation", "=", "train", "(", "net", ",", "gpu_id", ",", "epoch_num", "=", "epoch_num", ",", "out_model", "=", "None", ")", "\n", "print", "(", "'\\tgpu_id:'", ",", "gpu_id", ",", "', eval:'", ",", "evaluation", ")", "\n", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock.__init__": [[13, 19], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock.forward": [[20, 23], ["cnn_model.ConvBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock.__init__": [[25, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "DeConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "pad_size", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock.forward": [[32, 35], ["cnn_model.DeConvBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_last.__init__": [[37, 41], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "ConvBlock_last", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ")", "\n", "# nn.BatchNorm2d(out_size),", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_last.forward": [[44, 47], ["cnn_model.ConvBlock_last.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock_last.__init__": [[49, 53], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "DeConvBlock_last", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ")", "\n", "# nn.BatchNorm2d(out_size),", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock_last.forward": [[56, 59], ["cnn_model.DeConvBlock_last.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_s.__init__": [[61, 67], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ",", "stride", ")", ":", "\n", "        ", "super", "(", "ConvBlock_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_s.forward": [[68, 71], ["cnn_model.ConvBlock_s.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_sum.__init__": [[73, 80], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "ConvBlock_sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.ConvBlock_sum.forward": [[81, 93], ["cnn_model.ConvBlock_sum.conv1", "int", "torch.add", "torch.add", "torch.add", "torch.add", "cnn_model.ConvBlock_sum.relu", "torch.autograd.Variable().clone", "torch.autograd.Variable().clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "in_data[].size", "in_data[].size", "in_data[].size", "in_data[].size", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs1", ")", "\n", "in_data", "=", "[", "outputs", ",", "inputs2", "]", "\n", "# check of the channel size", "\n", "small_ch_id", ",", "large_ch_id", "=", "(", "0", ",", "1", ")", "if", "in_data", "[", "0", "]", ".", "size", "(", "1", ")", "<", "in_data", "[", "1", "]", ".", "size", "(", "1", ")", "else", "(", "1", ",", "0", ")", "\n", "offset", "=", "int", "(", "in_data", "[", "large_ch_id", "]", ".", "size", "(", ")", "[", "1", "]", "-", "in_data", "[", "small_ch_id", "]", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "if", "offset", "!=", "0", ":", "\n", "            ", "tmp", "=", "in_data", "[", "large_ch_id", "]", ".", "data", "[", ":", ",", ":", "offset", ",", ":", ",", ":", "]", "\n", "tmp", "=", "Variable", "(", "tmp", ")", ".", "clone", "(", ")", "\n", "in_data", "[", "small_ch_id", "]", "=", "torch", ".", "cat", "(", "[", "in_data", "[", "small_ch_id", "]", ",", "tmp", "*", "0", "]", ",", "1", ")", "\n", "", "out", "=", "torch", ".", "add", "(", "in_data", "[", "0", "]", ",", "in_data", "[", "1", "]", ")", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock_sum.__init__": [[95, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "DeConvBlock_sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "pad_size", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.DeConvBlock_sum.forward": [[103, 110], ["cnn_model.DeConvBlock_sum.conv1", "F.pad", "torch.add", "torch.add", "torch.add", "torch.add", "cnn_model.DeConvBlock_sum.relu", "cnn_model.DeConvBlock_sum.size", "inputs2.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "outputs1", "=", "self", ".", "conv1", "(", "inputs1", ")", "\n", "offset", "=", "outputs1", ".", "size", "(", ")", "[", "2", "]", "-", "inputs2", ".", "size", "(", ")", "[", "2", "]", "\n", "padding", "=", "2", "*", "[", "offset", "//", "2", ",", "offset", "//", "2", "]", "\n", "outputs2", "=", "F", ".", "pad", "(", "inputs2", ",", "padding", ")", "\n", "out", "=", "torch", ".", "add", "(", "outputs1", ",", "outputs2", ")", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.CGP2CNN_autoencoder.__init__": [[114, 209], ["torch.Module.__init__", "collections.OrderedDict", "copy.deepcopy", "cnn_model.CGP2CNN_autoencoder.cgp_inverse.reverse", "range", "range", "range", "torch.ModuleList", "torch.ModuleList", "name.split", "int", "int", "len", "int", "name.split", "int", "int", "name.split", "int", "int", "range", "range", "range", "math.fabs", "len", "range", "range", "range", "len", "len", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "len", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "len", "len", "cnn_model.ConvBlock", "cnn_model.ConvBlock_s", "cnn_model.ConvBlock", "cnn_model.ConvBlock_s", "cnn_model.ConvBlock", "cnn_model.ConvBlock_sum", "cnn_model.DeConvBlock", "cnn_model.DeConvBlock_sum", "cnn_model.DeConvBlock_last", "cnn_model.ConvBlock_last", "cnn_model.DeConvBlock_last", "cnn_model.ConvBlock_last", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cgp", ",", "in_channel", ",", "n_class", ",", "imgSize", ")", ":", "\n", "        ", "super", "(", "CGP2CNN_autoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cgp", "=", "cgp", "\n", "self", ".", "pool_size", "=", "2", "\n", "self", ".", "arch", "=", "OrderedDict", "(", ")", "\n", "self", ".", "encode", "=", "[", "]", "\n", "self", ".", "decode", "=", "[", "]", "\n", "self", ".", "channel_num", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "self", ".", "size", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "self", ".", "channel_num", "[", "0", "]", "=", "in_channel", "\n", "self", ".", "size", "[", "0", "]", "=", "imgSize", "\n", "# encoder", "\n", "i", "=", "0", "\n", "for", "name", ",", "in1", "in", "self", ".", "cgp", ":", "\n", "            ", "if", "name", "==", "'input'", "or", "'DeConv'", "in", "name", ":", "\n", "                ", "i", "+=", "1", "\n", "continue", "\n", "", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "if", "down", "==", "'S'", ":", "\n", "                ", "self", ".", "channel_num", "[", "i", "]", "=", "out_size", "\n", "self", ".", "size", "[", "i", "]", "=", "self", ".", "size", "[", "in1", "]", "\n", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock_s", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "channel_num", "[", "i", "]", "=", "out_size", "\n", "self", ".", "size", "[", "i", "]", "=", "self", ".", "size", "[", "in1", "]", "\n", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock_s", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "\n", "# decoder", "\n", "", "self", ".", "channel_num_d", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "i", "-=", "2", "# skip the last layer", "\n", "self", ".", "channel_num_d", "[", "0", "]", "=", "self", ".", "channel_num", "[", "i", "]", "\n", "self", ".", "channel_num_d", "[", "1", "]", "=", "self", ".", "channel_num", "[", "i", "]", "\n", "i", "=", "0", "\n", "self", ".", "cgp_inverse", "=", "copy", ".", "deepcopy", "(", "self", ".", "cgp", ")", "\n", "self", ".", "cgp_inverse", ".", "reverse", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", ":", "\n", "            ", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "=", "int", "(", "math", ".", "fabs", "(", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "-", "(", "len", "(", "self", ".", "cgp_inverse", ")", "-", "3", ")", ")", ")", "\n", "", "for", "j", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", "-", "1", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "i", "+=", "1", "\n", "continue", "\n", "", "name", "=", "self", ".", "cgp_inverse", "[", "j", "]", "[", "0", "]", "\n", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "self", ".", "channel_num_d", "[", "i", "]", "=", "out_size", "\n", "if", "down", "==", "'S'", ":", "\n", "                ", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_sum", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_sum", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "# the last layer", "\n", "", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "            ", "name", "=", "self", ".", "cgp_inverse", "[", "j", "]", "[", "0", "]", "\n", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "self", ".", "channel_num_d", "[", "-", "1", "]", "=", "out_size", "\n", "if", "down", "==", "'S'", ":", "\n", "                ", "if", "func", "==", "'DeConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "func", "==", "'DeConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "\n", "", "", "", "self", ".", "network", "=", "self", ".", "encode", "+", "self", ".", "decode", "\n", "self", ".", "layer_module", "=", "nn", ".", "ModuleList", "(", "self", ".", "network", ")", "\n", "self", ".", "outputs", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", "-", "1", ")", "]", "\n", "self", ".", "outputs_d", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", "]", "\n", "self", ".", "outputs_sum", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.CGP2CNN_autoencoder.main": [[210, 259], ["layer", "len", "isinstance", "layer", "layer", "len", "len", "isinstance", "isinstance", "layer", "isinstance", "layer", "isinstance", "layer", "layer", "layer", "layer"], "methods", ["None"], ["", "def", "main", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "\n", "outputs", "=", "self", ".", "outputs", "\n", "outputs", "[", "0", "]", "=", "x", "# input image", "\n", "outputs_d", "=", "self", ".", "outputs_d", "\n", "outputs_sum", "=", "self", ".", "outputs_sum", "\n", "nodeID", "=", "1", "\n", "sumID", "=", "0", "\n", "decodeID", "=", "1", "\n", "flag", "=", "True", "\n", "for", "layer", "in", "self", ".", "layer_module", ":", "\n", "# encoder", "\n", "            ", "if", "nodeID", "<=", "len", "(", "self", ".", "encode", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "ConvBlock_s", ")", ":", "\n", "                    ", "outputs", "[", "nodeID", "]", "=", "layer", "(", "outputs", "[", "self", ".", "cgp", "[", "nodeID", "]", "[", "1", "]", "]", ")", "\n", "outputs_sum", "[", "sumID", "]", "=", "outputs", "[", "nodeID", "]", "\n", "sumID", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "outputs", "[", "nodeID", "]", "=", "layer", "(", "outputs", "[", "self", ".", "cgp", "[", "nodeID", "]", "[", "1", "]", "]", ")", "\n", "# decoder", "\n", "", "", "elif", "nodeID", "<", "(", "len", "(", "self", ".", "decode", ")", "+", "len", "(", "self", ".", "encode", ")", ")", ":", "\n", "                ", "if", "flag", ":", "\n", "                    ", "outputs_d", "[", "0", "]", "=", "outputs", "[", "nodeID", "-", "1", "]", "\n", "outputs_d", "[", "1", "]", "=", "outputs", "[", "nodeID", "-", "1", "]", "\n", "del", "outputs", "\n", "flag", "=", "False", "\n", "if", "isinstance", "(", "layer", ",", "ConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "DeConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "layer", ",", "ConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "DeConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ")", "\n", "", "", "decodeID", "+=", "1", "\n", "", "nodeID", "+=", "1", "\n", "# the last layer", "\n", "", "layer", "=", "self", ".", "layer_module", "[", "-", "1", "]", "\n", "out", "=", "layer", "(", "outputs_d", "[", "decodeID", "-", "1", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_model.CGP2CNN_autoencoder.forward": [[260, 262], ["cnn_model.CGP2CNN_autoencoder.main"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.CGP2CNN_autoencoder.main"], ["", "def", "forward", "(", "self", ",", "x", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.__init__": [[101, 152], ["print", "print", "print", "exit", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "int", "int", "int", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "validation", "=", "True", ",", "verbose", "=", "True", ",", "imgSize", "=", "32", ",", "batchsize", "=", "16", ")", ":", "\n", "# dataset_name: name of data set ('bsds'(color) or 'bsds_gray')", "\n", "# validation: [True]  model train/validation mode", "\n", "#             [False] model test mode for final evaluation of the evolved model", "\n", "#                     (raining data : all training data, test data : all test data)", "\n", "# verbose: flag of display", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "imgSize", "=", "imgSize", "\n", "self", ".", "validation", "=", "validation", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "\n", "# load dataset", "\n", "if", "dataset_name", "==", "'bsds'", "or", "dataset_name", "==", "'bsds_gray'", ":", "\n", "            ", "if", "dataset_name", "==", "'bsds'", ":", "\n", "                ", "self", ".", "n_class", "=", "10", "\n", "self", ".", "channel", "=", "3", "\n", "self", ".", "num_work", "=", "2", "\n", "data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "64", ",", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/train'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/val'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/retrain'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/test'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "", "elif", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                ", "self", ".", "n_class", "=", "10", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "num_work", "=", "2", "\n", "data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "64", ",", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/train'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/val'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/retrain'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/test'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "", "print", "(", "'train num    '", ",", "len", "(", "self", ".", "dataloader", ".", "dataset", ")", ")", "\n", "print", "(", "'val/test num '", ",", "len", "(", "self", ".", "test_dataloader", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\tInvalid input dataset name at CNN_train()'", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.__call__": [[153, 236], ["cnn_model.CGP2CNN_autoencoder", "cnn_model.CGP2CNN_autoencoder.cuda", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss.cuda", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "input.cuda.cuda.cuda", "range", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "cnn_model.CGP2CNN_autoencoder.parameters", "os.path.exists", "os.mkdir", "time.time", "cnn_model.CGP2CNN_autoencoder.children", "enumerate", "print", "print", "cnn_model.CGP2CNN_autoencoder.state_dict", "print", "module.train", "data.cuda.cuda.cuda", "range", "int", "input.cuda.cuda.resize_as_().copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "cnn_train.CNN_train.gaussian_noise", "torch.Adam.zero_grad", "torch.MSELoss.", "nn.MSELoss.backward", "torch.Adam.step", "time.time", "cnn_model.CGP2CNN_autoencoder.children", "cnn_train.CNN_train.__test_per_std", "cnn_model.CGP2CNN_autoencoder.children", "cnn_train.CNN_train.__test_per_std", "random.randint", "cnn_model.CGP2CNN_autoencoder.", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "module.train", "module.train", "input.cuda.cuda.resize_as_", "traceback.print_exc", "len"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.gaussian_noise", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__test_per_std", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__test_per_std"], ["", "", "def", "__call__", "(", "self", ",", "cgp", ",", "gpuID", ",", "epoch_num", "=", "200", ",", "out_model", "=", "'mymodel.model'", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'GPUID    :'", ",", "gpuID", ")", "\n", "print", "(", "'epoch_num:'", ",", "epoch_num", ")", "\n", "\n", "# model", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "model", "=", "CGP2CNN_autoencoder", "(", "cgp", ",", "self", ".", "channel", ",", "self", ".", "n_class", ",", "self", ".", "imgSize", ")", "\n", "model", ".", "cuda", "(", "gpuID", ")", "\n", "# Loss and Optimizer", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "criterion", ".", "cuda", "(", "gpuID", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "input", "=", "torch", ".", "FloatTensor", "(", "self", ".", "batchsize", ",", "self", ".", "channel", ",", "self", ".", "imgSize", ",", "self", ".", "imgSize", ")", "\n", "input", "=", "input", ".", "cuda", "(", "gpuID", ")", "\n", "# Noise level", "\n", "std_list", "=", "[", "30", ",", "50", ",", "70", "]", "\n", "n", "=", "50", "\n", "# for outputs", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./outputs'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./outputs'", ")", "\n", "\n", "# Train loop", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "epoch_num", "+", "1", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'epoch'", ",", "epoch", ")", "\n", "", "train_loss", "=", "0", "\n", "ite", "=", "0", "\n", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                ", "module", ".", "train", "(", "True", ")", "\n", "", "for", "_", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "                ", "if", "self", ".", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# for gray scale images", "\n", "", "data", "=", "data", ".", "cuda", "(", "gpuID", ")", "\n", "std", "=", "std_list", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "std_list", ")", "-", "1", ")", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "n", ",", "1", ")", ":", "\n", "                    ", "input", ".", "resize_as_", "(", "data", ")", ".", "copy_", "(", "data", ")", "\n", "input_", "=", "Variable", "(", "input", ")", "\n", "data_noise", "=", "self", ".", "gaussian_noise", "(", "input_", ",", "0.0", ",", "std", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "                        ", "output", "=", "model", "(", "data_noise", ",", "None", ")", "\n", "", "except", ":", "\n", "                        ", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "0.", "\n", "", "loss", "=", "criterion", "(", "output", ",", "input_", ")", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "ite", "==", "0", ":", "\n", "                        ", "vutils", ".", "save_image", "(", "data_noise", ".", "data", ",", "'./noise_samples%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "input_", ".", "data", ",", "'./org_samples%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "output", ".", "data", ",", "'./output%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "", "", "ite", "+=", "1", "\n", "", "print", "(", "'Train set : Average loss: {:.4f}'", ".", "format", "(", "train_loss", ")", ")", "\n", "print", "(", "'time '", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                ", "if", "epoch", "==", "epoch_num", ":", "\n", "                    ", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                        ", "module", ".", "train", "(", "False", ")", "\n", "", "t_loss", "=", "self", ".", "__test_per_std", "(", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                    ", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                        ", "module", ".", "train", "(", "False", ")", "\n", "", "t_loss", "=", "self", ".", "__test_per_std", "(", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", "\n", "", "if", "epoch", "==", "200", ":", "\n", "                    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "tmp", "=", "param_group", "[", "'lr'", "]", "\n", "", "tmp", "*=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "tmp", "\n", "", "", "if", "epoch", "==", "400", ":", "\n", "                    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "tmp", "=", "param_group", "[", "'lr'", "]", "\n", "", "tmp", "*=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "tmp", "\n", "# save the model", "\n", "", "", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./model_%d.pth'", "%", "int", "(", "gpuID", ")", ")", "\n", "return", "t_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.gaussian_noise": [[239, 243], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "inp.data.new().normal_", "inp.data.new", "inp.size"], "methods", ["None"], ["", "def", "gaussian_noise", "(", "self", ",", "inp", ",", "mean", ",", "std", ")", ":", "\n", "        ", "noise", "=", "Variable", "(", "inp", ".", "data", ".", "new", "(", "inp", ".", "size", "(", ")", ")", ".", "normal_", "(", "mean", ",", "std", ")", ")", "\n", "noise", "=", "torch", ".", "div", "(", "noise", ",", "255.0", ")", "\n", "return", "inp", "+", "noise", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.calcPSNR": [[245, 253], ["skimage.measure.compare_psnr"], "methods", ["None"], ["", "def", "calcPSNR", "(", "self", ",", "image1", ",", "image2", ")", ":", "\n", "        ", "image1", "*=", "255", "\n", "image2", "*=", "255", "\n", "image1", "[", "image1", ">", "255", "]", "=", "255", "\n", "image1", "[", "image1", "<", "0", "]", "=", "0", "\n", "image2", "[", "image2", ">", "255", "]", "=", "255", "\n", "image2", "[", "image2", "<", "0", "]", "=", "0", "\n", "return", "compare_psnr", "(", "image1", ",", "image2", ",", "data_range", "=", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.__test_per_std": [[255, 307], ["len", "print", "enumerate", "print", "print", "data.cuda.cuda.cuda", "input.resize_as_().copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "cnn_train.CNN_train.gaussian_noise", "criterion", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "model", "math.log10", "input.resize_as_", "traceback.print_exc", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.CNN_train.gaussian_noise"], ["", "def", "__test_per_std", "(", "self", ",", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", ":", "\n", "        ", "test_loss", "=", "0", "\n", "total_psnr", "=", "0", "\n", "for", "std", "in", "std_list", ":", "\n", "            ", "print", "(", "'std'", ",", "std", ")", "\n", "ite", "=", "0", "\n", "psnr", "=", "0", "\n", "psnr2", "=", "0", "\n", "psnr3", "=", "0", "\n", "for", "_", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "self", ".", "test_dataloader", ")", ":", "\n", "                ", "if", "self", ".", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "", "data", "=", "data", ".", "cuda", "(", "gpuID", ")", "\n", "input", ".", "resize_as_", "(", "data", ")", ".", "copy_", "(", "data", ")", "\n", "input_", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", "\n", "data_noise", "=", "self", ".", "gaussian_noise", "(", "input_", ",", "0.0", ",", "std", ")", "\n", "try", ":", "\n", "                    ", "output", "=", "model", "(", "data_noise", ",", "None", ")", "\n", "", "except", ":", "\n", "                    ", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "0.", "\n", "", "loss", "=", "criterion", "(", "output", ",", "input_", ")", "\n", "psnr", "+=", "-", "10", "*", "math", ".", "log10", "(", "loss", ".", "data", "[", "0", "]", ")", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "\n", "# # PSNR", "\n", "# img1 = (output.data).cpu().numpy()", "\n", "# img2 = (input_.data).cpu().numpy()", "\n", "# imdf = img2*255.0 - img1*255.0", "\n", "# imdf = imdf ** 2", "\n", "# rmse = np.sqrt(np.mean(imdf))", "\n", "# psnr2 += 20 * math.log10(255.0/rmse)", "\n", "# psnr3 += self.calcPSNR(img2, img1)", "\n", "\n", "# save images", "\n", "vutils", ".", "save_image", "(", "output", ".", "data", ",", "'./outputs/test_output_std%02d_%03d.png'", "%", "(", "int", "(", "std", ")", ",", "int", "(", "ite", ")", ")", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "data_noise", ".", "data", ",", "'./outputs/test_output_std%02d_%03d_.png'", "%", "(", "int", "(", "std", ")", ",", "int", "(", "ite", ")", ")", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "input_", ".", "data", ",", "'./outputs/test_output_std%02d_%03d__.png'", "%", "(", "int", "(", "std", ")", ",", "int", "(", "ite", ")", ")", ",", "normalize", "=", "False", ")", "\n", "ite", "+=", "1", "\n", "", "psnr", "/=", "(", "ite", ")", "\n", "# psnr2 /= (ite)", "\n", "# psnr3 /= (ite)", "\n", "test_loss", "/=", "(", "ite", ")", "\n", "total_psnr", "+=", "psnr", "\n", "print", "(", "'Test PSNR: {:.4f}'", ".", "format", "(", "psnr", ")", ")", "\n", "# print('Test PSNR2: {:.4f}'.format(psnr2))", "\n", "# print('Test PSNR3: {:.4f}'.format(psnr3))", "\n", "print", "(", "'Test loss : {:.4f}'", ".", "format", "(", "test_loss", ")", ")", "\n", "\n", "", "total_psnr", "/=", "len", "(", "std_list", ")", "\n", "return", "total_psnr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init": [[25, 32], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init_normal": [[33, 42], ["classname.find", "m.apply", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "apply", "(", "weights_init_normal_", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init_normal_": [[43, 52], ["classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_normal_", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init_xavier": [[53, 62], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init_kaiming": [[63, 72], ["classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.weights_init_orthogonal": [[73, 83], ["print", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "print", "(", "classname", ")", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Denoising.cnn_train.init_weights": [[84, 96], ["print", "net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "    ", "print", "(", "'initialization method [%s]'", "%", "init_type", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__init__": [[14, 25], ["numpy.zeros().astype", "numpy.empty().astype", "numpy.empty().astype", "print", "cgp.Individual.init_gene_with_conv", "cgp.Individual.init_gene", "numpy.zeros", "numpy.empty", "numpy.empty"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene_with_conv", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene"], ["self", ".", "gene", "=", "np", ".", "zeros", "(", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ",", "self", ".", "net_info", ".", "max_in_num", "+", "1", ")", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "is_active", "=", "np", ".", "empty", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "is_pool", "=", "np", ".", "empty", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ".", "astype", "(", "bool", ")", "\n", "self", ".", "eval", "=", "None", "\n", "if", "init", ":", "\n", "            ", "print", "(", "'init with specific architectures'", ")", "\n", "self", ".", "init_gene_with_conv", "(", ")", "# In the case of starting only convolution", "\n", "", "else", ":", "\n", "            ", "self", ".", "init_gene", "(", ")", "# generate initial individual randomly", "\n", "\n", "", "", "def", "init_gene_with_conv", "(", "self", ")", ":", "\n", "# initial architecture", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene_with_conv": [[26, 84], ["enumerate", "numpy.random.randint", "numpy.min", "range", "block_ids.append", "range", "cgp.Individual.check_active", "int", "int", "block_ids.append", "cgp.Individual.net_info.func_type.index", "numpy.min", "range", "numpy.random.randint", "numpy.min", "range", "len", "range", "numpy.random.randint", "int", "numpy.random.randint", "len", "int", "numpy.random.randint", "int", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["        ", "arch", "=", "[", "'S_ConvBlock_64_3'", "]", "\n", "\n", "input_layer_num", "=", "int", "(", "self", ".", "net_info", ".", "input_num", "/", "self", ".", "net_info", ".", "rows", ")", "+", "1", "\n", "output_layer_num", "=", "int", "(", "self", ".", "net_info", ".", "out_num", "/", "self", ".", "net_info", ".", "rows", ")", "+", "1", "\n", "layer_ids", "=", "[", "(", "(", "self", ".", "net_info", ".", "cols", "-", "1", "-", "input_layer_num", "-", "output_layer_num", ")", "+", "i", ")", "//", "(", "len", "(", "arch", ")", ")", "for", "i", "in", "range", "(", "len", "(", "arch", ")", ")", "]", "\n", "prev_id", "=", "0", "# i.e. input layer", "\n", "current_layer", "=", "input_layer_num", "\n", "block_ids", "=", "[", "]", "# *do not connect with these ids", "\n", "\n", "# building convolution net", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "layer_ids", ")", ":", "\n", "\n", "            ", "current_layer", "+=", "idx", "\n", "n", "=", "current_layer", "*", "self", ".", "net_info", ".", "rows", "+", "np", ".", "random", ".", "randint", "(", "self", ".", "net_info", ".", "rows", ")", "\n", "block_ids", ".", "append", "(", "n", ")", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "net_info", ".", "func_type", ".", "index", "(", "arch", "[", "i", "]", ")", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "\n", "self", ".", "gene", "[", "n", "]", "[", "1", "]", "=", "prev_id", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "j", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "prev_id", "=", "n", "+", "self", ".", "net_info", ".", "input_num", "\n", "\n", "# output layer        ", "\n", "", "n", "=", "self", ".", "net_info", ".", "node_num", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "\n", "self", ".", "gene", "[", "n", "]", "[", "1", "]", "=", "prev_id", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "            ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "", "block_ids", ".", "append", "(", "n", ")", "\n", "\n", "# intermediate node", "\n", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "\n", "            ", "if", "n", "in", "block_ids", ":", "\n", "                ", "continue", "\n", "\n", "# type gene", "\n", "", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "# connection gene", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "", "self", ".", "check_active", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.init_gene": [[85, 100], ["range", "cgp.Individual.check_active", "numpy.random.randint", "numpy.min", "range", "int", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["\n", "", "def", "init_gene", "(", "self", ")", ":", "\n", "# intermediate node", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "# type gene", "\n", "            ", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "np", ".", "random", ".", "randint", "(", "type_num", ")", "\n", "# connection gene", "\n", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "min_connect_id", "+", "np", ".", "random", ".", "randint", "(", "max_connect_id", "-", "min_connect_id", ")", "\n", "\n", "", "", "self", ".", "check_active", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__check_course_to_out": [[101, 113], ["range", "cgp.Individual.__check_course_to_out"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__check_course_to_out"], ["\n", "", "def", "__check_course_to_out", "(", "self", ",", "n", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_active", "[", "n", "]", ":", "\n", "            ", "self", ".", "is_active", "[", "n", "]", "=", "True", "\n", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "if", "n", ">=", "self", ".", "net_info", ".", "node_num", ":", "# output node", "\n", "                ", "in_num", "=", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "", "else", ":", "# intermediate node", "\n", "                ", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "in_num", ")", ":", "\n", "                ", "if", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ">=", "self", ".", "net_info", ".", "input_num", ":", "\n", "                    ", "self", ".", "__check_course_to_out", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "-", "self", ".", "net_info", ".", "input_num", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active": [[114, 119], ["range", "cgp.Individual.__check_course_to_out"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__check_course_to_out"], ["\n", "", "", "", "", "def", "check_active", "(", "self", ")", ":", "\n", "# clear", "\n", "        ", "self", ".", "is_active", "[", ":", "]", "=", "False", "\n", "# start from output nodes", "\n", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "out_num", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_pool": [[120, 129], ["range"], "methods", ["None"], ["            ", "self", ".", "__check_course_to_out", "(", "self", ".", "net_info", ".", "node_num", "+", "n", ")", "\n", "\n", "", "", "def", "__mutate", "(", "self", ",", "current", ",", "min_int", ",", "max_int", ")", ":", "\n", "        ", "mutated_gene", "=", "current", "\n", "while", "current", "==", "mutated_gene", ":", "\n", "            ", "mutated_gene", "=", "min_int", "+", "np", ".", "random", ".", "randint", "(", "max_int", "-", "min_int", ")", "\n", "", "return", "mutated_gene", "\n", "\n", "", "def", "mutation", "(", "self", ",", "mutation_rate", "=", "0.01", ")", ":", "\n", "        ", "active_check", "=", "False", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate": [[131, 136], ["numpy.random.randint"], "methods", ["None"], ["for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "            ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "# mutation for type gene", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "type_num", ">", "1", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "0", "]", ",", "0", ",", "type_num", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.mutation": [[137, 162], ["range", "cgp.Individual.check_active", "numpy.min", "range", "cgp.Individual.__mutate", "numpy.random.rand", "int", "cgp.Individual.__mutate", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate"], ["if", "self", ".", "is_active", "[", "n", "]", ":", "\n", "                    ", "active_check", "=", "True", "\n", "# mutation for connection gene", "\n", "", "", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n", "max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "max_connect_id", "-", "min_connect_id", ">", "1", ":", "\n", "                    ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ",", "min_connect_id", ",", "max_connect_id", ")", "\n", "if", "self", ".", "is_active", "[", "n", "]", "and", "i", "<", "in_num", ":", "\n", "                        ", "active_check", "=", "True", "\n", "\n", "", "", "", "", "self", ".", "check_active", "(", ")", "\n", "return", "active_check", "\n", "\n", "", "def", "neutral_mutation", "(", "self", ",", "mutation_rate", "=", "0.01", ")", ":", "\n", "        ", "for", "n", "in", "range", "(", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", ":", "\n", "            ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "# mutation for type gene", "\n", "type_num", "=", "self", ".", "net_info", ".", "func_type_num", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_type_num", "\n", "if", "not", "self", ".", "is_active", "[", "n", "]", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "type_num", ">", "1", ":", "\n", "                ", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "0", "]", ",", "0", ",", "type_num", ")", "\n", "# mutation for connection gene", "\n", "", "col", "=", "np", ".", "min", "(", "(", "int", "(", "n", "/", "self", ".", "net_info", ".", "rows", ")", ",", "self", ".", "net_info", ".", "cols", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.neutral_mutation": [[163, 183], ["range", "cgp.Individual.check_active", "numpy.min", "range", "cgp.Individual.__mutate", "numpy.random.rand", "int", "cgp.Individual.__mutate", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.__mutate"], ["max_connect_id", "=", "col", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "\n", "min_connect_id", "=", "(", "col", "-", "self", ".", "net_info", ".", "level_back", ")", "*", "self", ".", "net_info", ".", "rows", "+", "self", ".", "net_info", ".", "input_num", "if", "col", "-", "self", ".", "net_info", ".", "level_back", ">=", "0", "else", "0", "\n", "in_num", "=", "self", ".", "net_info", ".", "func_in_num", "[", "t", "]", "if", "n", "<", "self", ".", "net_info", ".", "node_num", "else", "self", ".", "net_info", ".", "out_in_num", "[", "t", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", ":", "\n", "                ", "if", "(", "not", "self", ".", "is_active", "[", "n", "]", "or", "i", ">=", "in_num", ")", "and", "np", ".", "random", ".", "rand", "(", ")", "<", "mutation_rate", "and", "max_connect_id", "-", "min_connect_id", ">", "1", ":", "\n", "                    ", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "=", "self", ".", "__mutate", "(", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", ",", "min_connect_id", ",", "max_connect_id", ")", "\n", "\n", "", "", "", "self", ".", "check_active", "(", ")", "\n", "return", "False", "\n", "\n", "", "def", "count_active_node", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "is_active", ".", "sum", "(", ")", "\n", "\n", "", "def", "copy", "(", "self", ",", "source", ")", ":", "\n", "        ", "self", ".", "net_info", "=", "source", ".", "net_info", "\n", "self", ".", "gene", "=", "source", ".", "gene", ".", "copy", "(", ")", "\n", "self", ".", "is_active", "=", "source", ".", "is_active", ".", "copy", "(", ")", "\n", "self", ".", "eval", "=", "source", ".", "eval", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node": [[184, 186], ["cgp.Individual.is_active.sum"], "methods", ["None"], ["", "def", "active_net_list", "(", "self", ")", ":", "\n", "        ", "net_list", "=", "[", "[", "\"input\"", ",", "0", "]", "]", "\n", "active_cnt", "=", "np", ".", "arange", "(", "self", ".", "net_info", ".", "input_num", "+", "self", ".", "net_info", ".", "node_num", "+", "self", ".", "net_info", ".", "out_num", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy": [[187, 192], ["source.gene.copy", "source.is_active.copy"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy"], ["active_cnt", "[", "self", ".", "net_info", ".", "input_num", ":", "]", "=", "np", ".", "cumsum", "(", "self", ".", "is_active", ")", "\n", "\n", "for", "n", ",", "is_a", "in", "enumerate", "(", "self", ".", "is_active", ")", ":", "\n", "            ", "if", "is_a", ":", "\n", "                ", "t", "=", "self", ".", "gene", "[", "n", "]", "[", "0", "]", "\n", "if", "n", "<", "self", ".", "net_info", ".", "node_num", ":", "# intermediate node", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list": [[193, 209], ["numpy.arange", "numpy.cumsum", "enumerate", "net_list.append", "range"], "methods", ["None"], ["                    ", "type_str", "=", "self", ".", "net_info", ".", "func_type", "[", "t", "]", "\n", "", "else", ":", "# output node", "\n", "                    ", "type_str", "=", "self", ".", "net_info", ".", "out_type", "[", "t", "]", "\n", "\n", "", "connections", "=", "[", "active_cnt", "[", "self", ".", "gene", "[", "n", "]", "[", "i", "+", "1", "]", "]", "for", "i", "in", "range", "(", "self", ".", "net_info", ".", "max_in_num", ")", "]", "\n", "net_list", ".", "append", "(", "[", "type_str", "]", "+", "connections", ")", "\n", "", "", "return", "net_list", "\n", "\n", "\n", "# CGP with (1 + \\lambda)-ES", "\n", "", "", "class", "CGP", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "net_info", ",", "eval_func", ",", "lam", "=", "4", ",", "imgSize", "=", "32", ",", "init", "=", "False", ")", ":", "\n", "        ", "self", ".", "lam", "=", "lam", "\n", "self", ".", "pop", "=", "[", "Individual", "(", "net_info", ",", "init", ")", "for", "_", "in", "range", "(", "1", "+", "self", ".", "lam", ")", "]", "\n", "self", ".", "eval_func", "=", "eval_func", "\n", "self", ".", "num_gen", "=", "0", "\n", "self", ".", "num_eval", "=", "0", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP.__init__": [[214, 224], ["int", "print", "cgp.Individual", "range", "math.log2"], "methods", ["None"], ["# create network list", "\n", "        ", "net_lists", "=", "[", "]", "\n", "active_index", "=", "np", ".", "where", "(", "eval_flag", ")", "[", "0", "]", "\n", "for", "i", "in", "active_index", ":", "\n", "            ", "net_lists", ".", "append", "(", "pop", "[", "i", "]", ".", "active_net_list", "(", ")", ")", "\n", "\n", "# evaluation", "\n", "", "fp", "=", "self", ".", "eval_func", "(", "net_lists", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "active_index", ")", ":", "\n", "            ", "pop", "[", "j", "]", ".", "eval", "=", "fp", "[", "i", "]", "\n", "", "evaluations", "=", "np", ".", "zeros", "(", "len", "(", "pop", ")", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._evaluation": [[225, 242], ["cgp.CGP.eval_func", "enumerate", "numpy.zeros", "range", "len", "numpy.where", "net_lists.append", "len", "len", "pop[].active_net_list"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["for", "i", "in", "range", "(", "len", "(", "pop", ")", ")", ":", "\n", "            ", "evaluations", "[", "i", "]", "=", "pop", "[", "i", "]", ".", "eval", "\n", "\n", "", "self", ".", "num_eval", "+=", "len", "(", "net_lists", ")", "\n", "return", "evaluations", "\n", "\n", "", "def", "_log_data", "(", "self", ",", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "0", ")", ":", "\n", "        ", "log_list", "=", "[", "self", ".", "num_gen", ",", "self", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "self", ".", "pop", "[", "0", "]", ".", "eval", ",", "self", ".", "pop", "[", "0", "]", ".", "count_active_node", "(", ")", "]", "\n", "if", "net_info_type", "==", "'active_only'", ":", "\n", "            ", "log_list", ".", "append", "(", "self", ".", "pop", "[", "0", "]", ".", "active_net_list", "(", ")", ")", "\n", "", "elif", "net_info_type", "==", "'full'", ":", "\n", "            ", "log_list", "+=", "self", ".", "pop", "[", "0", "]", ".", "gene", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "log_list", "\n", "\n", "", "def", "_log_data_children", "(", "self", ",", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "0", ",", "pop", "=", "None", ")", ":", "\n", "        ", "log_list", "=", "[", "self", ".", "num_gen", ",", "self", ".", "num_eval", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "pop", ".", "eval", ",", "pop", ".", "count_active_node", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data": [[243, 252], ["cgp.CGP.pop[].count_active_node", "log_list.append", "time.time", "cgp.CGP.pop[].active_net_list", "cgp.CGP.pop[].gene.flatten().tolist", "cgp.CGP.pop[].gene.flatten"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["if", "net_info_type", "==", "'active_only'", ":", "\n", "            ", "log_list", ".", "append", "(", "pop", ".", "active_net_list", "(", ")", ")", "\n", "", "elif", "net_info_type", "==", "'full'", ":", "\n", "            ", "log_list", "+=", "pop", ".", "gene", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "return", "log_list", "\n", "\n", "", "def", "load_log", "(", "self", ",", "log_data", ")", ":", "\n", "        ", "self", ".", "num_gen", "=", "log_data", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data_children": [[253, 262], ["pop.count_active_node", "log_list.append", "time.time", "pop.active_net_list", "pop.gene.flatten().tolist", "pop.gene.flatten"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.active_net_list"], ["self", ".", "num_eval", "=", "log_data", "[", "1", "]", "\n", "net_info", "=", "self", ".", "pop", "[", "0", "]", ".", "net_info", "\n", "self", ".", "pop", "[", "0", "]", ".", "eval", "=", "log_data", "[", "3", "]", "\n", "self", ".", "pop", "[", "0", "]", ".", "gene", "=", "np", ".", "array", "(", "log_data", "[", "5", ":", "]", ")", ".", "reshape", "(", "(", "net_info", ".", "node_num", "+", "net_info", ".", "out_num", ",", "net_info", ".", "max_in_num", "+", "1", ")", ")", "\n", "self", ".", "pop", "[", "0", "]", ".", "check_active", "(", ")", "\n", "\n", "# Evolution CGP:", "\n", "#   At each iteration:", "\n", "#     - Generate lambda individuals in which at least one active node changes (i.e., forced mutation)", "\n", "#     - Mutate the best individual with neutral mutation (unchanging the active nodes)", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP.load_log": [[263, 270], ["numpy.array().reshape", "cgp.CGP.pop[].check_active", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_active"], ["#         if the best individual is not updated.", "\n", "", "def", "modified_evolution", "(", "self", ",", "max_eval", "=", "100", ",", "mutation_rate", "=", "0.01", ",", "log_file", "=", "'./log.txt'", ",", "arch_file", "=", "'./arch.txt'", ")", ":", "\n", "        ", "with", "open", "(", "log_file", ",", "'w'", ")", "as", "fw", ",", "open", "(", "arch_file", ",", "'w'", ")", "as", "fw_a", ",", "open", "(", "'child.txt'", ",", "'w'", ")", "as", "fw_c", ",", "open", "(", "'arch_child.txt'", ",", "'w'", ")", "as", "fw_ac", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "fw", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_a", "=", "csv", ".", "writer", "(", "fw_a", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_c", "=", "csv", ".", "writer", "(", "fw_c", ",", "lineterminator", "=", "'\\n'", ")", "\n", "writer_ac", "=", "csv", ".", "writer", "(", "fw_ac", ",", "lineterminator", "=", "'\\n'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP.modified_evolution": [[275, 333], ["open", "csv.writer", "time.time", "numpy.empty", "cgp.CGP.pop[].count_active_node", "cgp.CGP.pop[].check_pool", "cgp.CGP._evaluation", "print", "numpy.array", "cgp.CGP._log_data", "range", "cgp.CGP._evaluation", "cgp.CGP.argmax", "open", "csv.writer", "range", "open.close", "print", "open", "csv.writer", "csv.writer.writerow", "open", "csv.writer", "csv.writer.writerow", "open.close", "open.close", "cgp.CGP.pop[].mutation", "cgp.CGP.pop[].count_active_node", "cgp.CGP.pop[].check_pool", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].count_active_node", "cgp.CGP.pop[].check_pool", "csv.writer.writerow", "csv.writer.writerow", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].neutral_mutation", "cgp.CGP._log_data", "cgp.CGP._log_data", "cgp.CGP._log_data", "cgp.CGP.pop[].copy", "cgp.CGP.pop[].mutation", "cgp.CGP.pop[].count_active_node", "cgp.CGP.pop[].check_pool", "cgp.CGP._log_data_children", "cgp.CGP._log_data_children"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_pool", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._evaluation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._evaluation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_pool", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_pool", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.neutral_mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.copy", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.mutation", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.count_active_node", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.Individual.check_pool", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data_children", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp.CGP._log_data_children"], ["if", "self", ".", "init", ":", "\n", "                ", "pass", "\n", "", "else", ":", "# in the case of not using an init indiviudal", "\n", "                ", "while", "active_num", "<", "self", ".", "pop", "[", "0", "]", ".", "net_info", ".", "min_active_num", "or", "active_num", ">", "self", ".", "pop", "[", "0", "]", ".", "net_info", ".", "max_active_num", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "mutation", "(", "1.0", ")", "\n", "active_num", "=", "self", ".", "pop", "[", "0", "]", ".", "count_active_node", "(", ")", "\n", "", "", "self", ".", "_evaluation", "(", "[", "self", ".", "pop", "[", "0", "]", "]", ",", "np", ".", "array", "(", "[", "True", "]", ")", ")", "\n", "print", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "\n", "\n", "while", "self", ".", "num_gen", "<", "max_eval", ":", "\n", "                ", "self", ".", "num_gen", "+=", "1", "\n", "# reproduction", "\n", "for", "i", "in", "range", "(", "self", ".", "lam", ")", ":", "\n", "                    ", "eval_flag", "[", "i", "]", "=", "False", "\n", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "copy", "(", "self", ".", "pop", "[", "0", "]", ")", "# copy a parent", "\n", "active_num", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "count_active_node", "(", ")", "\n", "# mutation", "\n", "while", "not", "eval_flag", "[", "i", "]", "or", "active_num", "<", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "net_info", ".", "min_active_num", "or", "active_num", ">", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "net_info", ".", "max_active_num", ":", "\n", "                        ", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "copy", "(", "self", ".", "pop", "[", "0", "]", ")", "# copy a parent", "\n", "eval_flag", "[", "i", "]", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "mutation", "(", "mutation_rate", ")", "# mutation", "\n", "active_num", "=", "self", ".", "pop", "[", "i", "+", "1", "]", ".", "count_active_node", "(", ")", "\n", "\n", "# evaluation and selection", "\n", "", "", "evaluations", "=", "self", ".", "_evaluation", "(", "self", ".", "pop", "[", "1", ":", "]", ",", "eval_flag", "=", "eval_flag", ")", "\n", "best_arg", "=", "evaluations", ".", "argmax", "(", ")", "\n", "# save log", "\n", "for", "c", "in", "range", "(", "1", "+", "self", ".", "lam", ")", ":", "\n", "                    ", "writer_c", ".", "writerow", "(", "self", ".", "_log_data_children", "(", "net_info_type", "=", "'full'", ",", "start_time", "=", "start_time", ",", "pop", "=", "self", ".", "pop", "[", "c", "]", ")", ")", "\n", "writer_ac", ".", "writerow", "(", "self", ".", "_log_data_children", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ",", "pop", "=", "self", ".", "pop", "[", "c", "]", ")", ")", "\n", "\n", "", "if", "evaluations", "[", "best_arg", "]", ">", "self", ".", "pop", "[", "0", "]", ".", "eval", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "copy", "(", "self", ".", "pop", "[", "best_arg", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "pop", "[", "0", "]", ".", "neutral_mutation", "(", "mutation_rate", ")", "# modify the parent", "\n", "\n", "# display and save log", "\n", "", "print", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "writer", ".", "writerow", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'full'", ",", "start_time", "=", "start_time", ")", ")", "\n", "writer_a", ".", "writerow", "(", "self", ".", "_log_data", "(", "net_info_type", "=", "'active_only'", ",", "start_time", "=", "start_time", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.NoDaemonProcess._get_daemon": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "_get_daemon", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "def", "_set_daemon", "(", "self", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.NoDaemonProcess._set_daemon": [[18, 20], ["None"], "methods", ["None"], ["", "def", "_set_daemon", "(", "self", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "", "daemon", "=", "property", "(", "_get_daemon", ",", "_set_daemon", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.CNNEvaluation.__init__": [[39, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "gpu_num", ",", "dataset", "=", "'cifar10'", ",", "verbose", "=", "True", ",", "epoch_num", "=", "50", ",", "batchsize", "=", "16", ",", "imgSize", "=", "32", ")", ":", "\n", "        ", "self", ".", "gpu_num", "=", "gpu_num", "\n", "self", ".", "epoch_num", "=", "epoch_num", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "imgSize", "=", "imgSize", "\n", "\n", "", "def", "__call__", "(", "self", ",", "net_lists", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.CNNEvaluation.__call__": [[48, 59], ["numpy.zeros", "numpy.arange", "len", "len", "cgp_config.NoDaemonProcessPool", "NoDaemonProcessPool.map", "NoDaemonProcessPool.terminate", "numpy.min", "range", "len"], "methods", ["None"], ["        ", "evaluations", "=", "np", ".", "zeros", "(", "len", "(", "net_lists", ")", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "0", ",", "len", "(", "net_lists", ")", ",", "self", ".", "gpu_num", ")", ":", "\n", "            ", "process_num", "=", "np", ".", "min", "(", "(", "i", "+", "self", ".", "gpu_num", ",", "len", "(", "net_lists", ")", ")", ")", "-", "i", "\n", "pool", "=", "NoDaemonProcessPool", "(", "process_num", ")", "\n", "arg_data", "=", "[", "(", "cnn_eval", ",", "net_lists", "[", "i", "+", "j", "]", ",", "j", ",", "self", ".", "epoch_num", ",", "self", ".", "batchsize", ",", "self", ".", "dataset", ",", "self", ".", "verbose", ",", "self", ".", "imgSize", ")", "for", "j", "in", "range", "(", "process_num", ")", "]", "\n", "evaluations", "[", "i", ":", "i", "+", "process_num", "]", "=", "pool", ".", "map", "(", "arg_wrapper_mp", ",", "arg_data", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "\n", "", "return", "evaluations", "\n", "\n", "\n", "# network configurations", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.CgpInfoConvSet.__init__": [[63, 95], ["len", "len", "numpy.max", "numpy.max", "numpy.max"], "methods", ["None"], ["# \"S_\" means that the layer has a convolution layer without downsampling.", "\n", "# \"D_\" means that the layer has a convolution layer with downsampling.", "\n", "# \"Sum\" means that the layer has a skip connection.", "\n", "self", ".", "func_type", "=", "[", "'S_ConvBlock_256_1'", ",", "'S_ConvBlock_256_3'", ",", "'S_ConvBlock_256_5'", ",", "\n", "'S_ConvBlock_128_1'", ",", "'S_ConvBlock_128_3'", ",", "'S_ConvBlock_128_5'", ",", "\n", "'S_ConvBlock_64_1'", ",", "'S_ConvBlock_64_3'", ",", "'S_ConvBlock_64_5'", ",", "\n", "'S_SumConvBlock_256_1'", ",", "'S_SumConvBlock_256_3'", ",", "'S_SumConvBlock_256_5'", ",", "\n", "'S_SumConvBlock_128_1'", ",", "'S_SumConvBlock_128_3'", ",", "'S_SumConvBlock_128_5'", ",", "\n", "'S_SumConvBlock_64_1'", ",", "'S_SumConvBlock_64_3'", ",", "'S_SumConvBlock_64_5'", "]", "\n", "\n", "self", ".", "func_in_num", "=", "[", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "1", "]", "\n", "\n", "self", ".", "out_num", "=", "1", "\n", "self", ".", "out_type", "=", "[", "'S_DeConvBlock_1_3'", "]", "\n", "self", ".", "out_in_num", "=", "[", "1", "]", "\n", "\n", "# CGP network configuration", "\n", "self", ".", "rows", "=", "rows", "\n", "self", ".", "cols", "=", "cols", "\n", "self", ".", "node_num", "=", "rows", "*", "cols", "\n", "self", ".", "level_back", "=", "level_back", "\n", "self", ".", "min_active_num", "=", "min_active_num", "\n", "self", ".", "max_active_num", "=", "max_active_num", "\n", "\n", "self", ".", "func_type_num", "=", "len", "(", "self", ".", "func_type", ")", "\n", "self", ".", "out_type_num", "=", "len", "(", "self", ".", "out_type", ")", "\n", "self", ".", "max_in_num", "=", "np", ".", "max", "(", "[", "np", ".", "max", "(", "self", ".", "func_in_num", ")", ",", "np", ".", "max", "(", "self", ".", "out_in_num", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.arg_wrapper_mp": [[11, 13], ["None"], "function", ["None"], ["def", "arg_wrapper_mp", "(", "args", ")", ":", "\n", "    ", "return", "args", "[", "0", "]", "(", "*", "args", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cgp_config.cnn_eval": [[29, 36], ["print", "cnn_train.CNN_train", "cnn.CNN_train.", "print"], "function", ["None"], ["", "def", "cnn_eval", "(", "net", ",", "gpu_id", ",", "epoch_num", ",", "batchsize", ",", "dataset", ",", "verbose", ",", "imgSize", ")", ":", "\n", "\n", "    ", "print", "(", "'\\tgpu_id:'", ",", "gpu_id", ",", "','", ",", "net", ")", "\n", "train", "=", "cnn", ".", "CNN_train", "(", "dataset", ",", "validation", "=", "True", ",", "verbose", "=", "verbose", ",", "imgSize", "=", "imgSize", ",", "batchsize", "=", "batchsize", ")", "\n", "evaluation", "=", "train", "(", "net", ",", "gpu_id", ",", "epoch_num", "=", "epoch_num", ",", "out_model", "=", "None", ")", "\n", "print", "(", "'\\tgpu_id:'", ",", "gpu_id", ",", "', eval:'", ",", "evaluation", ")", "\n", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock.__init__": [[15, 21], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock.forward": [[22, 25], ["cnn_model.ConvBlock.conv1"], "methods", ["None"], ["return", "outputs", "\n", "\n", "", "", "class", "DeConvBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock.__init__": [[27, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "pad_size", ",", "output_padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock.forward": [[34, 37], ["cnn_model.DeConvBlock.conv1"], "methods", ["None"], ["return", "outputs", "\n", "\n", "", "", "class", "ConvBlock_last", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_last.__init__": [[39, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ")", "\n", "# nn.BatchNorm2d(out_size),", "\n", "# nn.Tanh())", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_last.forward": [[46, 49], ["cnn_model.ConvBlock_last.conv1"], "methods", ["None"], ["return", "outputs", "\n", "\n", "", "", "class", "DeConvBlock_last", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock_last.__init__": [[51, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ")", "\n", "# nn.BatchNorm2d(out_size),", "\n", "# nn.Tanh())", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock_last.forward": [[58, 61], ["cnn_model.DeConvBlock_last.conv1"], "methods", ["None"], ["return", "outputs", "\n", "\n", "", "", "class", "ConvBlock_s", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ",", "stride", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlockTranspose.__init__": [[63, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlockTranspose.forward": [[70, 73], ["cnn_model.ConvBlockTranspose.conv1"], "methods", ["None"], ["return", "outputs", "\n", "\n", "", "", "class", "ConvBlock_sum", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_cat.__init__": [[75, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["pad_size", "=", "kernel", "//", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "kernel", ",", "padding", "=", "pad_size", ",", "bias", "=", "False", ")", ",", "\n", "# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_cat.forward": [[82, 85], ["cnn_model.ConvBlock_cat.conv1"], "methods", ["None"], ["        ", "outputs", "=", "self", ".", "conv1", "(", "inputs1", ")", "\n", "in_data", "=", "[", "outputs", ",", "inputs2", "]", "\n", "# check of the channel size", "\n", "small_ch_id", ",", "large_ch_id", "=", "(", "0", ",", "1", ")", "if", "in_data", "[", "0", "]", ".", "size", "(", "1", ")", "<", "in_data", "[", "1", "]", ".", "size", "(", "1", ")", "else", "(", "1", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_s.__init__": [[87, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["if", "offset", "!=", "0", ":", "\n", "            ", "tmp", "=", "in_data", "[", "large_ch_id", "]", ".", "data", "[", ":", ",", ":", "offset", ",", ":", ",", ":", "]", "\n", "tmp", "=", "Variable", "(", "tmp", ")", ".", "clone", "(", ")", "\n", "in_data", "[", "small_ch_id", "]", "=", "torch", ".", "cat", "(", "[", "in_data", "[", "small_ch_id", "]", ",", "tmp", "*", "0", "]", ",", "1", ")", "\n", "", "out", "=", "torch", ".", "add", "(", "in_data", "[", "0", "]", ",", "in_data", "[", "1", "]", ")", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_s.forward": [[94, 97], ["cnn_model.ConvBlock_s.conv1"], "methods", ["None"], ["", "", "class", "DeConvBlock_sum", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "kernel", ")", ":", "\n", "        ", "super", "(", "DeConvBlock_sum", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad_size", "=", "kernel", "//", "2", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_sum.__init__": [[99, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["# nn.BatchNorm2d(out_size),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "        ", "outputs1", "=", "self", ".", "conv1", "(", "inputs1", ")", "\n", "offset", "=", "outputs1", ".", "size", "(", ")", "[", "2", "]", "-", "inputs2", ".", "size", "(", ")", "[", "2", "]", "\n", "padding", "=", "2", "*", "[", "offset", "//", "2", ",", "offset", "//", "2", "]", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.ConvBlock_sum.forward": [[107, 119], ["cnn_model.ConvBlock_sum.conv1", "int", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cnn_model.ConvBlock_sum.relu", "torch.autograd.Variable().clone", "torch.autograd.Variable().clone", "torch.autograd.Variable().clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "in_data[].size", "in_data[].size", "in_data[].size", "in_data[].size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["None"], ["outputs2", "=", "F", ".", "pad", "(", "inputs2", ",", "padding", ")", "\n", "out", "=", "torch", ".", "add", "(", "outputs1", ",", "outputs2", ")", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n", "\n", "\n", "", "", "class", "CGP2CNN_autoencoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "cgp", ",", "in_channel", ",", "n_class", ",", "imgSize", ")", ":", "\n", "        ", "super", "(", "CGP2CNN_autoencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cgp", "=", "cgp", "\n", "self", ".", "pool_size", "=", "2", "\n", "self", ".", "arch", "=", "OrderedDict", "(", ")", "\n", "self", ".", "encode", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock_sum.__init__": [[121, 128], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["self", ".", "channel_num", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "self", ".", "size", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "self", ".", "channel_num", "[", "0", "]", "=", "in_channel", "\n", "self", ".", "size", "[", "0", "]", "=", "imgSize", "\n", "# encoder", "\n", "i", "=", "0", "\n", "for", "name", ",", "in1", "in", "self", ".", "cgp", ":", "\n", "            ", "if", "name", "==", "'input'", "or", "'DeConv'", "in", "name", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.DeConvBlock_sum.forward": [[129, 136], ["cnn_model.DeConvBlock_sum.conv1", "torch.pad", "torch.pad", "torch.pad", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cnn_model.DeConvBlock_sum.relu", "cnn_model.DeConvBlock_sum.size", "inputs2.size"], "methods", ["None"], ["                ", "i", "+=", "1", "\n", "continue", "\n", "", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "if", "down", "==", "'S'", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.CGP2CNN_autoencoder.__init__": [[141, 240], ["torch.Module.__init__", "collections.OrderedDict", "copy.deepcopy", "cnn_model.CGP2CNN_autoencoder.cgp_inverse.reverse", "range", "range", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "name.split", "int", "int", "len", "int", "name.split", "int", "int", "name.split", "int", "int", "range", "range", "range", "math.fabs", "len", "range", "range", "range", "len", "len", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "cnn_model.CGP2CNN_autoencoder.encode.append", "len", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "cnn_model.CGP2CNN_autoencoder.decode.append", "len", "len", "cnn_model.ConvBlock", "cnn_model.ConvBlock_s", "cnn_model.ConvBlock", "cnn_model.ConvBlock_s", "cnn_model.ConvBlock", "cnn_model.ConvBlock_sum", "cnn_model.DeConvBlock", "cnn_model.DeConvBlock_sum", "cnn_model.DeConvBlock_last", "cnn_model.ConvBlock_last", "cnn_model.DeConvBlock_last", "cnn_model.ConvBlock_last", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__"], ["", "else", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock_s", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "channel_num", "[", "i", "]", "=", "out_size", "\n", "self", ".", "size", "[", "i", "]", "=", "self", ".", "size", "[", "in1", "]", "\n", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "encode", ".", "append", "(", "ConvBlock_s", "(", "self", ".", "channel_num", "[", "in1", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "2", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "\n", "# decoder", "\n", "", "self", ".", "channel_num_d", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", ")", "]", "\n", "i", "-=", "2", "# skip the last layer", "\n", "self", ".", "channel_num_d", "[", "0", "]", "=", "self", ".", "channel_num", "[", "i", "]", "\n", "self", ".", "channel_num_d", "[", "1", "]", "=", "self", ".", "channel_num", "[", "i", "]", "\n", "i", "=", "0", "\n", "self", ".", "cgp_inverse", "=", "copy", ".", "deepcopy", "(", "self", ".", "cgp", ")", "\n", "self", ".", "cgp_inverse", ".", "reverse", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", ":", "\n", "            ", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "=", "int", "(", "math", ".", "fabs", "(", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "-", "(", "len", "(", "self", ".", "cgp_inverse", ")", "-", "3", ")", ")", ")", "\n", "", "for", "j", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", "-", "1", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "i", "+=", "1", "\n", "continue", "\n", "", "name", "=", "self", ".", "cgp_inverse", "[", "j", "]", "[", "0", "]", "\n", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "self", ".", "channel_num_d", "[", "i", "]", "=", "out_size", "\n", "if", "down", "==", "'S'", ":", "\n", "                ", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ",", "stride", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_sum", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "func", "==", "'ConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_sum", "(", "self", ".", "channel_num_d", "[", "self", ".", "cgp_inverse", "[", "j", "]", "[", "1", "]", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "# the last layer", "\n", "", "for", "j", "in", "range", "(", "1", ")", ":", "\n", "            ", "name", "=", "self", ".", "cgp_inverse", "[", "j", "]", "[", "0", "]", "\n", "key", "=", "name", ".", "split", "(", "'_'", ")", "\n", "down", "=", "key", "[", "0", "]", "\n", "func", "=", "key", "[", "1", "]", "\n", "out_size", "=", "int", "(", "key", "[", "2", "]", ")", "\n", "kernel", "=", "int", "(", "key", "[", "3", "]", ")", "\n", "self", ".", "channel_num_d", "[", "-", "1", "]", "=", "out_size", "\n", "if", "down", "==", "'S'", ":", "\n", "                ", "if", "func", "==", "'DeConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "func", "==", "'DeConvBlock'", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "DeConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "decode", ".", "append", "(", "ConvBlock_last", "(", "self", ".", "channel_num_d", "[", "i", "-", "1", "]", ",", "out_size", ",", "kernel", ")", ")", "\n", "\n", "", "", "", "self", ".", "network", "=", "self", ".", "encode", "+", "self", ".", "decode", "\n", "self", ".", "layer_module", "=", "nn", ".", "ModuleList", "(", "self", ".", "network", ")", "\n", "self", ".", "outputs", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp", ")", "-", "1", ")", "]", "\n", "self", ".", "outputs_d", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", "]", "\n", "self", ".", "outputs_sum", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "cgp_inverse", ")", ")", "]", "\n", "\n", "", "def", "main", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "\n", "outputs", "=", "self", ".", "outputs", "\n", "outputs", "[", "0", "]", "=", "x", "# input image", "\n", "outputs_d", "=", "self", ".", "outputs_d", "\n", "outputs_sum", "=", "self", ".", "outputs_sum", "\n", "nodeID", "=", "1", "\n", "sumID", "=", "0", "\n", "decodeID", "=", "1", "\n", "flag", "=", "True", "\n", "for", "layer", "in", "self", ".", "layer_module", ":", "\n", "# encoder", "\n", "            ", "if", "nodeID", "<=", "len", "(", "self", ".", "encode", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "ConvBlock_s", ")", ":", "\n", "                    ", "outputs", "[", "nodeID", "]", "=", "layer", "(", "outputs", "[", "self", ".", "cgp", "[", "nodeID", "]", "[", "1", "]", "]", ")", "\n", "outputs_sum", "[", "sumID", "]", "=", "outputs", "[", "nodeID", "]", "\n", "sumID", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "outputs", "[", "nodeID", "]", "=", "layer", "(", "outputs", "[", "self", ".", "cgp", "[", "nodeID", "]", "[", "1", "]", "]", ")", "\n", "# decoder", "\n", "", "", "elif", "nodeID", "<", "(", "len", "(", "self", ".", "decode", ")", "+", "len", "(", "self", ".", "encode", ")", ")", ":", "\n", "                ", "if", "flag", ":", "\n", "                    ", "outputs_d", "[", "0", "]", "=", "outputs", "[", "nodeID", "-", "1", "]", "\n", "outputs_d", "[", "1", "]", "=", "outputs", "[", "nodeID", "-", "1", "]", "\n", "del", "outputs", "\n", "flag", "=", "False", "\n", "if", "isinstance", "(", "layer", ",", "ConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "DeConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.CGP2CNN_autoencoder.main": [[241, 291], ["layer", "len", "isinstance", "layer", "layer", "len", "len", "isinstance", "isinstance", "layer", "isinstance", "layer", "isinstance", "layer", "layer", "layer", "layer"], "methods", ["None"], ["outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "layer", ",", "ConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "DeConvBlock_sum", ")", ":", "\n", "                        ", "sumID", "-=", "1", "\n", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ",", "outputs_sum", "[", "sumID", "]", ")", "\n", "", "else", ":", "\n", "                        ", "outputs_d", "[", "decodeID", "]", "=", "layer", "(", "outputs_d", "[", "self", ".", "cgp_inverse", "[", "decodeID", "]", "[", "1", "]", "]", ")", "\n", "", "", "decodeID", "+=", "1", "\n", "", "nodeID", "+=", "1", "\n", "# the last layer", "\n", "", "layer", "=", "self", ".", "layer_module", "[", "-", "1", "]", "\n", "out", "=", "layer", "(", "outputs_d", "[", "decodeID", "-", "1", "]", ")", "\n", "return", "out", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.CGP2CNN_autoencoder.forward": [[292, 294], ["cnn_model.CGP2CNN_autoencoder.main"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_model.CGP2CNN_autoencoder.main"], []], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__init__": [[101, 159], ["print", "print", "print", "exit", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torchvision.SVHN", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "int", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "int", "int", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "int", "int", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Scale", "torchvision.Scale", "torchvision.Scale", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset_name", ",", "validation", "=", "True", ",", "verbose", "=", "True", ",", "imgSize", "=", "32", ",", "batchsize", "=", "16", ")", ":", "\n", "# dataset_name: name of data set ('bsds'(color) or 'bsds_gray')", "\n", "# validation: [True]  model train/validation mode", "\n", "#             [False] model test mode for final evaluation of the evolved model", "\n", "#                     (raining data : all training data, test data : all test data)", "\n", "# verbose: flag of display", "\n", "        ", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "imgSize", "=", "imgSize", "\n", "self", ".", "validation", "=", "validation", "\n", "self", ".", "batchsize", "=", "batchsize", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "\n", "# load dataset", "\n", "if", "dataset_name", "==", "'bsds'", "or", "dataset_name", "==", "'bsds_gray'", ":", "\n", "            ", "if", "dataset_name", "==", "'bsds'", ":", "\n", "                ", "self", ".", "n_class", "=", "10", "\n", "self", ".", "channel", "=", "3", "\n", "self", ".", "num_work", "=", "2", "\n", "data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "64", ",", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/train'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/val'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/retrain'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/color/test'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "", "elif", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                ", "self", ".", "n_class", "=", "10", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "num_work", "=", "2", "\n", "data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "64", ",", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "test_data_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/train'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/val'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/retrain'", ",", "transform", "=", "data_transform", ")", "\n", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "self", ".", "batchsize", ",", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "test_dataset", "=", "dset", ".", "ImageFolder", "(", "root", "=", "'/dataset/BSDS500/gray/test'", ",", "transform", "=", "test_data_transform", ")", "\n", "self", ".", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "self", ".", "num_work", ")", ")", "\n", "", "", "print", "(", "'train num    '", ",", "len", "(", "self", ".", "dataloader", ".", "dataset", ")", ")", "\n", "print", "(", "'val/test num '", ",", "len", "(", "self", ".", "test_dataloader", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\tInvalid input dataset name at CNN_train()'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "", "def", "__call__", "(", "self", ",", "cgp", ",", "gpuID", ",", "epoch_num", "=", "200", ",", "out_model", "=", "'mymodel.model'", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'GPUID    :'", ",", "gpuID", ")", "\n", "print", "(", "'epoch_num:'", ",", "epoch_num", ")", "\n", "\n", "# model", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__call__": [[160, 255], ["cnn_model.CGP2CNN_autoencoder", "model.cpu.cpu.cuda", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss.cuda", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "input.cuda.cuda.cuda", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "int", "int", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "model.cpu.cpu.cpu", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "print", "model.cpu.cpu.parameters", "os.path.exists", "os.mkdir", "time.time", "model.cpu.cpu.children", "enumerate", "print", "print", "model.cpu.cpu.state_dict", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "print", "module.train", "input.cuda.cuda.resize_as_().copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Adam.zero_grad", "torch.MSELoss.", "nn.MSELoss.backward", "torch.Adam.step", "int", "data.cuda", "target.cuda", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model.cpu.cpu.", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "time.time", "model.cpu.cpu.children", "cnn_train.CNN_train.__test_per_std", "model.cpu.cpu.children", "cnn_train.CNN_train.__test_per_std", "input.cuda.cuda.resize_as_", "cnn_train.CNN_train.random_pixel_mask", "cnn_train.CNN_train.half_mask", "traceback.print_exc", "module.train", "module.train"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__test_per_std", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__test_per_std", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.random_pixel_mask", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.half_mask"], ["model", "=", "CGP2CNN_autoencoder", "(", "cgp", ",", "self", ".", "channel", ",", "self", ".", "n_class", ",", "self", ".", "imgSize", ")", "\n", "model", ".", "cuda", "(", "gpuID", ")", "\n", "# Loss and Optimizer", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "criterion", ".", "cuda", "(", "gpuID", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "input", "=", "torch", ".", "FloatTensor", "(", "self", ".", "batchsize", ",", "self", ".", "channel", ",", "self", ".", "imgSize", ",", "self", ".", "imgSize", ")", "\n", "input", "=", "input", ".", "cuda", "(", "gpuID", ")", "\n", "# Noise level", "\n", "std_list", "=", "[", "30", ",", "50", ",", "70", "]", "\n", "n", "=", "50", "\n", "# for outputs", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./outputs'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./outputs'", ")", "\n", "\n", "# Train loop", "\n", "", "for", "epoch", "in", "range", "(", "1", ",", "epoch_num", "+", "1", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'epoch'", ",", "epoch", ")", "\n", "", "train_loss", "=", "0", "\n", "ite", "=", "0", "\n", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                ", "module", ".", "train", "(", "True", ")", "\n", "", "for", "_", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "                ", "if", "self", ".", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "# for gray scale images", "\n", "", "data", "=", "data", ".", "cuda", "(", "gpuID", ")", "\n", "std", "=", "std_list", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "std_list", ")", "-", "1", ")", "]", "\n", "for", "_", "in", "range", "(", "1", ",", "n", ",", "1", ")", ":", "\n", "                    ", "input", ".", "resize_as_", "(", "data", ")", ".", "copy_", "(", "data", ")", "\n", "input_", "=", "Variable", "(", "input", ")", "\n", "data_noise", "=", "self", ".", "gaussian_noise", "(", "input_", ",", "0.0", ",", "std", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "try", ":", "\n", "                        ", "output", "=", "model", "(", "data_noise", ",", "None", ")", "\n", "", "except", ":", "\n", "                        ", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "0.", "\n", "", "loss", "=", "criterion", "(", "output", ",", "input_", ")", "\n", "train_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "ite", "==", "0", ":", "\n", "                        ", "vutils", ".", "save_image", "(", "data_noise", ".", "data", ",", "'./noise_samples%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "input_", ".", "data", ",", "'./org_samples%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "vutils", ".", "save_image", "(", "output", ".", "data", ",", "'./output%d.png'", "%", "gpuID", ",", "normalize", "=", "False", ")", "\n", "", "", "ite", "+=", "1", "\n", "", "print", "(", "'Train set : Average loss: {:.4f}'", ".", "format", "(", "train_loss", ")", ")", "\n", "print", "(", "'time '", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "if", "self", ".", "validation", ":", "\n", "                ", "if", "epoch", "==", "epoch_num", ":", "\n", "                    ", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                        ", "module", ".", "train", "(", "False", ")", "\n", "", "t_loss", "=", "self", ".", "__test_per_std", "(", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                    ", "for", "module", "in", "model", ".", "children", "(", ")", ":", "\n", "                        ", "module", ".", "train", "(", "False", ")", "\n", "", "t_loss", "=", "self", ".", "__test_per_std", "(", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", "\n", "", "if", "epoch", "==", "200", ":", "\n", "                    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "tmp", "=", "param_group", "[", "'lr'", "]", "\n", "", "tmp", "*=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "tmp", "\n", "", "", "if", "epoch", "==", "400", ":", "\n", "                    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "tmp", "=", "param_group", "[", "'lr'", "]", "\n", "", "tmp", "*=", "0.1", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                        ", "param_group", "[", "'lr'", "]", "=", "tmp", "\n", "# save the model", "\n", "", "", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./model_%d.pth'", "%", "int", "(", "gpuID", ")", ")", "\n", "return", "t_loss", "\n", "\n", "\n", "# generate gaussian noise", "\n", "", "def", "gaussian_noise", "(", "self", ",", "inp", ",", "mean", ",", "std", ")", ":", "\n", "        ", "noise", "=", "Variable", "(", "inp", ".", "data", ".", "new", "(", "inp", ".", "size", "(", ")", ")", ".", "normal_", "(", "mean", ",", "std", ")", ")", "\n", "noise", "=", "torch", ".", "div", "(", "noise", ",", "255.0", ")", "\n", "return", "inp", "+", "noise", "\n", "\n", "# calc PSNR by using \"compare_psnr of skimage.measure\"", "\n", "", "def", "calcPSNR", "(", "self", ",", "image1", ",", "image2", ")", ":", "\n", "        ", "image1", "*=", "255", "\n", "image2", "*=", "255", "\n", "image1", "[", "image1", ">", "255", "]", "=", "255", "\n", "image1", "[", "image1", "<", "0", "]", "=", "0", "\n", "image2", "[", "image2", ">", "255", "]", "=", "255", "\n", "image2", "[", "image2", "<", "0", "]", "=", "0", "\n", "return", "compare_psnr", "(", "image1", ",", "image2", ",", "data_range", "=", "255", ")", "\n", "\n", "# For validation/test", "\n", "", "def", "__test_per_std", "(", "self", ",", "model", ",", "criterion", ",", "gpuID", ",", "input", ",", "std_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.random_pixel_mask": [[257, 264], ["torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["total_psnr", "=", "0", "\n", "for", "std", "in", "std_list", ":", "\n", "            ", "print", "(", "'std'", ",", "std", ")", "\n", "ite", "=", "0", "\n", "psnr", "=", "0", "\n", "psnr2", "=", "0", "\n", "psnr3", "=", "0", "\n", "for", "_", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "self", ".", "test_dataloader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.half_mask": [[265, 282], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "int", "numpy.random.rand", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "inp.size", "inp.size", "inp.size", "inp.size", "inp.size", "inp.size"], "methods", ["None"], ["                ", "if", "self", ".", "dataset_name", "==", "'bsds_gray'", ":", "\n", "                    ", "data", "=", "data", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "", "data", "=", "data", ".", "cuda", "(", "gpuID", ")", "\n", "input", ".", "resize_as_", "(", "data", ")", ".", "copy_", "(", "data", ")", "\n", "input_", "=", "Variable", "(", "input", ",", "volatile", "=", "True", ")", "\n", "data_noise", "=", "self", ".", "gaussian_noise", "(", "input_", ",", "0.0", ",", "std", ")", "\n", "try", ":", "\n", "                    ", "output", "=", "model", "(", "data_noise", ",", "None", ")", "\n", "", "except", ":", "\n", "                    ", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "0.", "\n", "", "loss", "=", "criterion", "(", "output", ",", "input_", ")", "\n", "psnr", "+=", "-", "10", "*", "math", ".", "log10", "(", "loss", ".", "data", "[", "0", "]", ")", "\n", "test_loss", "+=", "loss", ".", "data", "[", "0", "]", "\n", "\n", "# # PSNR", "\n", "# img1 = (output.data).cpu().numpy()", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.calcPSNR": [[283, 291], ["skimage.measure.compare_psnr"], "methods", ["None"], ["# img2 = (input_.data).cpu().numpy()", "\n", "# imdf = img2*255.0 - img1*255.0", "\n", "# imdf = imdf ** 2", "\n", "# rmse = np.sqrt(np.mean(imdf))", "\n", "# psnr2 += 20 * math.log10(255.0/rmse)", "\n", "# psnr3 += self.calcPSNR(img2, img1)", "\n", "\n", "# save images", "\n", "vutils", ".", "save_image", "(", "output", ".", "data", ",", "'./outputs/test_output_std%02d_%03d.png'", "%", "(", "int", "(", "std", ")", ",", "int", "(", "ite", ")", ")", ",", "normalize", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.__test_per_std": [[293, 341], ["enumerate", "print", "print", "input.resize_as_().copy_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion", "data.cuda", "target.cuda", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "model", "math.log10", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "input.resize_as_", "cnn_train.CNN_train.random_pixel_mask", "cnn_train.CNN_train.half_mask", "traceback.print_exc", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.random_pixel_mask", "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.CNN_train.half_mask"], ["vutils", ".", "save_image", "(", "input_", ".", "data", ",", "'./outputs/test_output_std%02d_%03d__.png'", "%", "(", "int", "(", "std", ")", ",", "int", "(", "ite", ")", ")", ",", "normalize", "=", "False", ")", "\n", "ite", "+=", "1", "\n", "", "psnr", "/=", "(", "ite", ")", "\n", "# psnr2 /= (ite)", "\n", "# psnr3 /= (ite)", "\n", "test_loss", "/=", "(", "ite", ")", "\n", "total_psnr", "+=", "psnr", "\n", "print", "(", "'Test PSNR: {:.4f}'", ".", "format", "(", "psnr", ")", ")", "\n", "# print('Test PSNR2: {:.4f}'.format(psnr2))", "\n", "# print('Test PSNR3: {:.4f}'.format(psnr3))", "\n", "print", "(", "'Test loss : {:.4f}'", ".", "format", "(", "test_loss", ")", ")", "\n", "\n", "", "total_psnr", "/=", "len", "(", "std_list", ")", "\n", "return", "total_psnr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init": [[25, 32], ["classname.find", "m.weight.data.normal_", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init_normal": [[33, 42], ["classname.find", "m.apply", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "apply", "(", "weights_init_normal_", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init_normal_": [[43, 52], ["classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_normal_", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init_xavier": [[53, 62], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init_kaiming": [[63, 72], ["classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.weights_init_orthogonal": [[73, 83], ["print", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "print", "(", "classname", ")", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sg-nm_Evolutionary-Autoencoders.Inpainting.cnn_train.init_weights": [[84, 96], ["print", "net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "    ", "print", "(", "'initialization method [%s]'", "%", "init_type", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]]}