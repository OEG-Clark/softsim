{"home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.logger.setup_logger": [[12, 33], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "os.path.join", "os.makedirs", "logging.getLogger.info", "pprint.pformat", "os.path.splitext"], "function", ["None"], ["def", "setup_logger", "(", "cfg", ",", "phase", ",", "quiet", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'rekognition'", ")", "\n", "level", "=", "logging", ".", "DEBUG", "if", "cfg", ".", "VERBOSE", "else", "logging", ".", "INFO", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "'log.txt'", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "OUTPUT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "log_file", "=", "os", ".", "path", ".", "splitext", "(", "cfg", ".", "MODEL", ".", "CHECKPOINT", ")", "[", "0", "]", "+", "'.txt'", "\n", "", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "if", "not", "quiet", ":", "\n", "        ", "logger", ".", "info", "(", "pprint", ".", "pformat", "(", "cfg", ")", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.parse_args": [[11, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Rekognition Online Action Detection'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--config_file'", ",", "\n", "default", "=", "''", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path to yaml config file'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu'", ",", "\n", "default", "=", "'0'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'specify visible devices'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'opts'", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "'*'", ",", "\n", "help", "=", "'modify config options using the command-line'", ",", "\n", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.assert_and_infer_cfg": [[34, 86], ["os.join", "open", "cfg.DATA.TEST_SESSION_SET.remove", "cfg.DATA.TEST_SESSION_SET.remove", "[].split", "os.join", "json.load", "os.splitext"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["", "def", "assert_and_infer_cfg", "(", "cfg", ",", "args", ")", ":", "\n", "# Setup the visible devices", "\n", "    ", "cfg", ".", "GPU", "=", "args", ".", "gpu", "\n", "\n", "# Infer data info", "\n", "with", "open", "(", "cfg", ".", "DATA", ".", "DATA_INFO", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data_info", "=", "json", ".", "load", "(", "f", ")", "[", "cfg", ".", "DATA", ".", "DATA_NAME", "]", "\n", "\n", "", "cfg", ".", "DATA", ".", "DATA_ROOT", "=", "data_info", "[", "'data_root'", "]", "if", "cfg", ".", "DATA", ".", "DATA_ROOT", "is", "None", "else", "cfg", ".", "DATA", ".", "DATA_ROOT", "\n", "cfg", ".", "DATA", ".", "CLASS_NAMES", "=", "data_info", "[", "'class_names'", "]", "if", "cfg", ".", "DATA", ".", "CLASS_NAMES", "is", "None", "else", "cfg", ".", "DATA", ".", "CLASS_NAMES", "\n", "cfg", ".", "DATA", ".", "NUM_CLASSES", "=", "data_info", "[", "'num_classes'", "]", "if", "cfg", ".", "DATA", ".", "NUM_CLASSES", "is", "None", "else", "cfg", ".", "DATA", ".", "NUM_CLASSES", "\n", "cfg", ".", "DATA", ".", "IGNORE_INDEX", "=", "data_info", "[", "'ignore_index'", "]", "if", "cfg", ".", "DATA", ".", "IGNORE_INDEX", "is", "None", "else", "cfg", ".", "DATA", ".", "IGNORE_INDEX", "\n", "cfg", ".", "DATA", ".", "METRICS", "=", "data_info", "[", "'metrics'", "]", "if", "cfg", ".", "DATA", ".", "METRICS", "is", "None", "else", "cfg", ".", "DATA", ".", "METRICS", "\n", "cfg", ".", "DATA", ".", "FPS", "=", "data_info", "[", "'fps'", "]", "if", "cfg", ".", "DATA", ".", "FPS", "is", "None", "else", "cfg", ".", "DATA", ".", "FPS", "\n", "cfg", ".", "DATA", ".", "TRAIN_SESSION_SET", "=", "data_info", "[", "'train_session_set'", "]", "if", "cfg", ".", "DATA", ".", "TRAIN_SESSION_SET", "is", "None", "else", "cfg", ".", "DATA", ".", "TRAIN_SESSION_SET", "\n", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", "=", "data_info", "[", "'test_session_set'", "]", "if", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", "is", "None", "else", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", "\n", "\n", "# Ignore two mis-labeled videos", "\n", "if", "False", "and", "cfg", ".", "DATA_NAME", "==", "'THUMOS'", ":", "\n", "        ", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", ".", "remove", "(", "'video_test_0000270'", ")", "\n", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", ".", "remove", "(", "'video_test_0001496'", ")", "\n", "\n", "# Input assertions", "\n", "", "assert", "cfg", ".", "INPUT", ".", "MODALITY", "in", "[", "'visual'", ",", "'motion'", ",", "'twostream'", "]", "\n", "\n", "# Infer memory", "\n", "if", "cfg", ".", "MODEL", ".", "MODEL_NAME", "in", "[", "'LSTR'", "]", ":", "\n", "        ", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_LENGTH", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_SECONDS", "*", "cfg", ".", "DATA", ".", "FPS", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SECONDS", "*", "cfg", ".", "DATA", ".", "FPS", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SECONDS", "*", "cfg", ".", "DATA", ".", "FPS", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "TOTAL_MEMORY_LENGTH", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_LENGTH", "+", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "+", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "\n", "assert", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_LENGTH", "%", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_SAMPLE_RATE", "==", "0", "\n", "assert", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "%", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SAMPLE_RATE", "==", "0", "\n", "assert", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "%", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SAMPLE_RATE", "==", "0", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_NUM_SAMPLES", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_LENGTH", "//", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_SAMPLE_RATE", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "//", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SAMPLE_RATE", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "//", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SAMPLE_RATE", "\n", "cfg", ".", "MODEL", ".", "LSTR", ".", "TOTAL_MEMORY_NUM_SAMPLES", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "AGES_MEMORY_NUM_SAMPLES", "+", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "+", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "\n", "\n", "assert", "cfg", ".", "MODEL", ".", "LSTR", ".", "INFERENCE_MODE", "in", "[", "'batch'", ",", "'stream'", "]", "\n", "\n", "# Infer output dir", "\n", "", "config_name", "=", "osp", ".", "splitext", "(", "args", ".", "config_file", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "1", ":", "]", "\n", "cfg", ".", "OUTPUT_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "*", "config_name", ")", "\n", "if", "cfg", ".", "SESSION", ":", "\n", "        ", "cfg", ".", "OUTPUT_DIR", "=", "osp", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "cfg", ".", "SESSION", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.load_cfg": [[88, 97], ["parser.parse_args", "rekognition_online_action_detection.config.defaults.get_cfg", "parser.assert_and_infer_cfg", "rekognition_online_action_detection.config.defaults.get_cfg.merge_from_file", "rekognition_online_action_detection.config.defaults.get_cfg.merge_from_list"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.parse_args", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.config.defaults.get_cfg", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.parser.assert_and_infer_cfg"], ["", "", "def", "load_cfg", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "get_cfg", "(", ")", "\n", "if", "args", ".", "config_file", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "if", "args", ".", "opts", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "", "assert_and_infer_cfg", "(", "cfg", ",", "args", ")", "\n", "return", "cfg", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.__init__": [[11, 13], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.register": [[14, 24], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry._register_generic", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.__init__": [[13, 23], ["checkpointer.Checkpointer._load_checkpoint", "checkpointer.Checkpointer.checkpoint.get", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer._load_checkpoint"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "phase", ")", ":", "\n", "\n", "# Load pretrained checkpoint", "\n", "        ", "self", ".", "checkpoint", "=", "self", ".", "_load_checkpoint", "(", "cfg", ".", "MODEL", ".", "CHECKPOINT", ")", "\n", "if", "self", ".", "checkpoint", "is", "not", "None", "and", "phase", "==", "'train'", ":", "\n", "            ", "cfg", ".", "SOLVER", ".", "START_EPOCH", "+=", "self", ".", "checkpoint", ".", "get", "(", "'epoch'", ",", "0", ")", "\n", "", "elif", "self", ".", "checkpoint", "is", "None", "and", "phase", "!=", "'train'", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Cannot find checkpoint {}'", ".", "format", "(", "cfg", ".", "MODEL", ".", "CHECKPOINT", ")", ")", "\n", "\n", "", "self", ".", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load": [[24, 29], ["model.load_state_dict", "optimizer.load_state_dict"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "self", ".", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "self", ".", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.save": [[30, 36], ["torch.save", "os.join", "optimizer.state_dict", "model.module.state_dict", "model.state_dict", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.save"], ["", "", "", "def", "save", "(", "self", ",", "epoch", ",", "model", ",", "optimizer", ")", ":", "\n", "        ", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "module", ".", "state_dict", "(", ")", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "else", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "osp", ".", "join", "(", "self", ".", "output_dir", ",", "'epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer._load_checkpoint": [[37, 41], ["os.isfile", "torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["", "def", "_load_checkpoint", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "if", "checkpoint", "is", "not", "None", "and", "osp", ".", "isfile", "(", "checkpoint", ")", ":", "\n", "            ", "return", "torch", ".", "load", "(", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.setup_checkpointer": [[43, 45], ["checkpointer.Checkpointer"], "function", ["None"], ["", "", "def", "setup_checkpointer", "(", "cfg", ",", "phase", ")", ":", "\n", "    ", "return", "Checkpointer", "(", "cfg", ",", "phase", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.env.setup_random_seed": [[16, 25], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "setup_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.env.setup_environment": [[27, 33], ["torch.device", "env.setup_random_seed", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.env.setup_random_seed"], ["", "def", "setup_environment", "(", "cfg", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "GPU", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "if", "cfg", ".", "SEED", "is", "not", "None", ":", "\n", "        ", "setup_random_seed", "(", "cfg", ".", "SEED", ")", "\n", "", "return", "device", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.__init__": [[18, 33], ["getattr", "perframe_data_layers.LSTRDataLayer._init_dataset", "phase.upper"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer._init_dataset"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "cfg", ".", "DATA", ".", "DATA_ROOT", "\n", "self", ".", "visual_feature", "=", "cfg", ".", "INPUT", ".", "VISUAL_FEATURE", "\n", "self", ".", "motion_feature", "=", "cfg", ".", "INPUT", ".", "MOTION_FEATURE", "\n", "self", ".", "target_perframe", "=", "cfg", ".", "INPUT", ".", "TARGET_PERFRAME", "\n", "self", ".", "sessions", "=", "getattr", "(", "cfg", ".", "DATA", ",", "phase", ".", "upper", "(", ")", "+", "'_SESSION_SET'", ")", "\n", "self", ".", "long_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "\n", "self", ".", "long_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SAMPLE_RATE", "\n", "self", ".", "long_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "\n", "self", ".", "work_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "\n", "self", ".", "work_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SAMPLE_RATE", "\n", "self", ".", "work_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "\n", "self", ".", "training", "=", "phase", "==", "'train'", "\n", "\n", "self", ".", "_init_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.shuffle": [[34, 36], ["perframe_data_layers.LSTRDataLayer._init_dataset"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer._init_dataset"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer._init_dataset": [[37, 47], ["numpy.load", "zip", "os.join", "numpy.random.randint", "range", "range", "perframe_data_layers.LSTRDataLayer.inputs.append"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["", "def", "_init_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "inputs", "=", "[", "]", "\n", "for", "session", "in", "self", ".", "sessions", ":", "\n", "            ", "target", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "target_perframe", ",", "session", "+", "'.npy'", ")", ")", "\n", "seed", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "work_memory_length", ")", "if", "self", ".", "training", "else", "0", "\n", "for", "work_start", ",", "work_end", "in", "zip", "(", "\n", "range", "(", "seed", ",", "target", ".", "shape", "[", "0", "]", ",", "self", ".", "work_memory_length", ")", ",", "\n", "range", "(", "seed", "+", "self", ".", "work_memory_length", ",", "target", ".", "shape", "[", "0", "]", ",", "self", ".", "work_memory_length", ")", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "[", "\n", "session", ",", "work_start", ",", "work_end", ",", "target", "[", "work_start", ":", "work_end", "]", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.segment_sampler": [[49, 52], ["numpy.linspace", "numpy.sort().astype", "numpy.sort"], "methods", ["None"], ["", "", "", "def", "segment_sampler", "(", "self", ",", "start", ",", "end", ",", "num_samples", ")", ":", "\n", "        ", "indices", "=", "np", ".", "linspace", "(", "start", ",", "end", ",", "num_samples", ")", "\n", "return", "np", ".", "sort", "(", "indices", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.uniform_sampler": [[53, 59], ["numpy.sort().astype", "numpy.arange", "numpy.concatenate", "numpy.sort", "numpy.zeros"], "methods", ["None"], ["", "def", "uniform_sampler", "(", "self", ",", "start", ",", "end", ",", "num_samples", ",", "sample_rate", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "start", ",", "end", "+", "1", ")", "[", ":", ":", "sample_rate", "]", "\n", "padding", "=", "num_samples", "-", "indices", ".", "shape", "[", "0", "]", "\n", "if", "padding", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "padding", ")", ",", "indices", ")", ")", "\n", "", "return", "np", ".", "sort", "(", "indices", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.__getitem__": [[60, 122], ["numpy.load", "numpy.load", "numpy.arange().clip", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "os.join", "os.join", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "numpy.concatenate.astype", "torch.as_tensor.astype", "torch.as_tensor.astype", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.arange", "max", "perframe_data_layers.LSTRDataLayer.segment_sampler().clip", "perframe_data_layers.LSTRDataLayer.uniform_sampler().clip", "bisect.bisect_right", "float", "torch.as_tensor.astype", "torch.as_tensor.astype", "perframe_data_layers.LSTRDataLayer.segment_sampler", "perframe_data_layers.LSTRDataLayer.uniform_sampler"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.segment_sampler", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.uniform_sampler"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "session", ",", "work_start", ",", "work_end", ",", "target", "=", "self", ".", "inputs", "[", "index", "]", "\n", "\n", "visual_inputs", "=", "np", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "visual_feature", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "motion_inputs", "=", "np", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "motion_feature", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "\n", "# Get target", "\n", "target", "=", "target", "[", ":", ":", "self", ".", "work_memory_sample_rate", "]", "\n", "\n", "# Get work memory", "\n", "work_indices", "=", "np", ".", "arange", "(", "work_start", ",", "work_end", ")", ".", "clip", "(", "0", ")", "\n", "work_indices", "=", "work_indices", "[", ":", ":", "self", ".", "work_memory_sample_rate", "]", "\n", "work_visual_inputs", "=", "visual_inputs", "[", "work_indices", "]", "\n", "work_motion_inputs", "=", "motion_inputs", "[", "work_indices", "]", "\n", "\n", "# Get long memory", "\n", "if", "self", ".", "long_memory_num_samples", ">", "0", ":", "\n", "            ", "long_start", ",", "long_end", "=", "max", "(", "0", ",", "work_start", "-", "self", ".", "long_memory_length", ")", ",", "work_start", "-", "1", "\n", "if", "self", ".", "training", ":", "\n", "                ", "long_indices", "=", "self", ".", "segment_sampler", "(", "\n", "long_start", ",", "\n", "long_end", ",", "\n", "self", ".", "long_memory_num_samples", ")", ".", "clip", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "long_indices", "=", "self", ".", "uniform_sampler", "(", "\n", "long_start", ",", "\n", "long_end", ",", "\n", "self", ".", "long_memory_num_samples", ",", "\n", "self", ".", "long_memory_sample_rate", ")", ".", "clip", "(", "0", ")", "\n", "", "long_visual_inputs", "=", "visual_inputs", "[", "long_indices", "]", "\n", "long_motion_inputs", "=", "motion_inputs", "[", "long_indices", "]", "\n", "\n", "# Get memory key padding mask", "\n", "memory_key_padding_mask", "=", "np", ".", "zeros", "(", "long_indices", ".", "shape", "[", "0", "]", ")", "\n", "last_zero", "=", "bisect_right", "(", "long_indices", ",", "0", ")", "-", "1", "\n", "if", "last_zero", ">", "0", ":", "\n", "                ", "memory_key_padding_mask", "[", ":", "last_zero", "]", "=", "float", "(", "'-inf'", ")", "\n", "", "", "else", ":", "\n", "            ", "long_visual_inputs", "=", "None", "\n", "long_motion_inputs", "=", "None", "\n", "memory_key_padding_mask", "=", "None", "\n", "\n", "# Get all memory", "\n", "", "if", "long_visual_inputs", "is", "not", "None", "and", "long_motion_inputs", "is", "not", "None", ":", "\n", "            ", "fusion_visual_inputs", "=", "np", ".", "concatenate", "(", "(", "long_visual_inputs", ",", "work_visual_inputs", ")", ")", "\n", "fusion_motion_inputs", "=", "np", ".", "concatenate", "(", "(", "long_motion_inputs", ",", "work_motion_inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "fusion_visual_inputs", "=", "work_visual_inputs", "\n", "fusion_motion_inputs", "=", "work_motion_inputs", "\n", "\n", "# Convert to tensor", "\n", "", "fusion_visual_inputs", "=", "torch", ".", "as_tensor", "(", "fusion_visual_inputs", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "fusion_motion_inputs", "=", "torch", ".", "as_tensor", "(", "fusion_motion_inputs", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "target", "=", "torch", ".", "as_tensor", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "if", "memory_key_padding_mask", "is", "not", "None", ":", "\n", "            ", "memory_key_padding_mask", "=", "torch", ".", "as_tensor", "(", "memory_key_padding_mask", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "fusion_visual_inputs", ",", "fusion_motion_inputs", ",", "memory_key_padding_mask", ",", "target", "\n", "", "else", ":", "\n", "            ", "return", "fusion_visual_inputs", ",", "fusion_motion_inputs", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.__init__": [[131, 154], ["getattr", "numpy.load", "zip", "phase.upper", "os.join", "range", "range", "perframe_data_layers.LSTRBatchInferenceDataLayer.inputs.append"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "phase", "=", "'test'", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "cfg", ".", "DATA", ".", "DATA_ROOT", "\n", "self", ".", "visual_feature", "=", "cfg", ".", "INPUT", ".", "VISUAL_FEATURE", "\n", "self", ".", "motion_feature", "=", "cfg", ".", "INPUT", ".", "MOTION_FEATURE", "\n", "self", ".", "target_perframe", "=", "cfg", ".", "INPUT", ".", "TARGET_PERFRAME", "\n", "self", ".", "sessions", "=", "getattr", "(", "cfg", ".", "DATA", ",", "phase", ".", "upper", "(", ")", "+", "'_SESSION_SET'", ")", "\n", "self", ".", "long_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "\n", "self", ".", "long_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SAMPLE_RATE", "\n", "self", ".", "long_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "\n", "self", ".", "work_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "\n", "self", ".", "work_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SAMPLE_RATE", "\n", "self", ".", "work_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "\n", "\n", "assert", "phase", "==", "'test'", ",", "'phase must be `test` for batch inference, got {}'", "\n", "\n", "self", ".", "inputs", "=", "[", "]", "\n", "for", "session", "in", "self", ".", "sessions", ":", "\n", "            ", "target", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "target_perframe", ",", "session", "+", "'.npy'", ")", ")", "\n", "for", "work_start", ",", "work_end", "in", "zip", "(", "\n", "range", "(", "0", ",", "target", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "\n", "range", "(", "self", ".", "work_memory_length", ",", "target", ".", "shape", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "                ", "self", ".", "inputs", ".", "append", "(", "[", "\n", "session", ",", "work_start", ",", "work_end", ",", "target", "[", "work_start", ":", "work_end", "]", ",", "target", ".", "shape", "[", "0", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.uniform_sampler": [[156, 162], ["numpy.sort().astype", "numpy.arange", "numpy.concatenate", "numpy.sort", "numpy.zeros"], "methods", ["None"], ["", "", "", "def", "uniform_sampler", "(", "self", ",", "start", ",", "end", ",", "num_samples", ",", "sample_rate", ")", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "start", ",", "end", "+", "1", ")", "[", ":", ":", "sample_rate", "]", "\n", "padding", "=", "num_samples", "-", "indices", ".", "shape", "[", "0", "]", "\n", "if", "padding", ">", "0", ":", "\n", "            ", "indices", "=", "np", ".", "concatenate", "(", "(", "np", ".", "zeros", "(", "padding", ")", ",", "indices", ")", ")", "\n", "", "return", "np", ".", "sort", "(", "indices", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.__getitem__": [[163, 221], ["numpy.load", "numpy.load", "numpy.arange().clip", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "os.join", "os.join", "perframe_data_layers.LSTRBatchInferenceDataLayer.uniform_sampler().clip", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.astype", "numpy.concatenate.astype", "torch.as_tensor.astype", "torch.as_tensor.astype", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "numpy.arange", "max", "bisect.bisect_right", "float", "torch.as_tensor.astype", "torch.as_tensor.astype", "perframe_data_layers.LSTRBatchInferenceDataLayer.uniform_sampler"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.uniform_sampler"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "session", ",", "work_start", ",", "work_end", ",", "target", ",", "num_frames", "=", "self", ".", "inputs", "[", "index", "]", "\n", "\n", "visual_inputs", "=", "np", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "visual_feature", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "motion_inputs", "=", "np", ".", "load", "(", "\n", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "motion_feature", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "\n", "# Get target", "\n", "target", "=", "target", "[", ":", ":", "self", ".", "work_memory_sample_rate", "]", "\n", "\n", "# Get work memory", "\n", "work_indices", "=", "np", ".", "arange", "(", "work_start", ",", "work_end", ")", ".", "clip", "(", "0", ")", "\n", "work_indices", "=", "work_indices", "[", ":", ":", "self", ".", "work_memory_sample_rate", "]", "\n", "work_visual_inputs", "=", "visual_inputs", "[", "work_indices", "]", "\n", "work_motion_inputs", "=", "motion_inputs", "[", "work_indices", "]", "\n", "\n", "# Get long memory", "\n", "if", "self", ".", "long_memory_num_samples", ">", "0", ":", "\n", "            ", "long_start", ",", "long_end", "=", "max", "(", "0", ",", "work_start", "-", "self", ".", "long_memory_length", ")", ",", "work_start", "-", "1", "\n", "long_indices", "=", "self", ".", "uniform_sampler", "(", "\n", "long_start", ",", "\n", "long_end", ",", "\n", "self", ".", "long_memory_num_samples", ",", "\n", "self", ".", "long_memory_sample_rate", ")", ".", "clip", "(", "0", ")", "\n", "long_visual_inputs", "=", "visual_inputs", "[", "long_indices", "]", "\n", "long_motion_inputs", "=", "motion_inputs", "[", "long_indices", "]", "\n", "\n", "# Get memory key padding mask", "\n", "memory_key_padding_mask", "=", "np", ".", "zeros", "(", "long_indices", ".", "shape", "[", "0", "]", ")", "\n", "last_zero", "=", "bisect_right", "(", "long_indices", ",", "0", ")", "-", "1", "\n", "if", "last_zero", ">", "0", ":", "\n", "                ", "memory_key_padding_mask", "[", ":", "last_zero", "]", "=", "float", "(", "'-inf'", ")", "\n", "", "", "else", ":", "\n", "            ", "long_visual_inputs", "=", "None", "\n", "long_motion_inputs", "=", "None", "\n", "memory_key_padding_mask", "=", "None", "\n", "\n", "# Get all memory", "\n", "", "if", "long_visual_inputs", "is", "not", "None", "and", "long_motion_inputs", "is", "not", "None", ":", "\n", "            ", "fusion_visual_inputs", "=", "np", ".", "concatenate", "(", "(", "long_visual_inputs", ",", "work_visual_inputs", ")", ")", "\n", "fusion_motion_inputs", "=", "np", ".", "concatenate", "(", "(", "long_motion_inputs", ",", "work_motion_inputs", ")", ")", "\n", "", "else", ":", "\n", "            ", "fusion_visual_inputs", "=", "work_visual_inputs", "\n", "fusion_motion_inputs", "=", "work_motion_inputs", "\n", "\n", "# Convert to tensor", "\n", "", "fusion_visual_inputs", "=", "torch", ".", "as_tensor", "(", "fusion_visual_inputs", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "fusion_motion_inputs", "=", "torch", ".", "as_tensor", "(", "fusion_motion_inputs", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "target", "=", "torch", ".", "as_tensor", "(", "target", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "if", "memory_key_padding_mask", "is", "not", "None", ":", "\n", "            ", "memory_key_padding_mask", "=", "torch", ".", "as_tensor", "(", "memory_key_padding_mask", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "(", "fusion_visual_inputs", ",", "fusion_motion_inputs", ",", "memory_key_padding_mask", ",", "target", ",", "\n", "session", ",", "work_indices", ",", "num_frames", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "fusion_visual_inputs", ",", "fusion_motion_inputs", ",", "target", ",", "\n", "session", ",", "work_indices", ",", "num_frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRBatchInferenceDataLayer.__len__": [[222, 224], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.datasets.build_dataset": [[16, 19], ["data_layer"], "function", ["None"], ["def", "build_dataset", "(", "cfg", ",", "phase", ",", "tag", "=", "''", ")", ":", "\n", "    ", "data_layer", "=", "DATA_LAYERS", "[", "cfg", ".", "MODEL", ".", "MODEL_NAME", "+", "tag", "+", "cfg", ".", "DATA", ".", "DATA_NAME", "]", "\n", "return", "data_layer", "(", "cfg", ",", "phase", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.datasets.build_data_loader": [[21, 30], ["torch.DataLoader", "datasets.build_dataset"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.datasets.build_dataset"], ["", "def", "build_data_loader", "(", "cfg", ",", "phase", ")", ":", "\n", "    ", "data_loader", "=", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "build_dataset", "(", "cfg", ",", "phase", ")", ",", "\n", "batch_size", "=", "cfg", ".", "DATA_LOADER", ".", "BATCH_SIZE", ",", "\n", "shuffle", "=", "True", "if", "phase", "==", "'train'", "else", "False", ",", "\n", "num_workers", "=", "cfg", ".", "DATA_LOADER", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "cfg", ".", "DATA_LOADER", ".", "PIN_MEMORY", ",", "\n", ")", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.config.defaults.get_cfg": [[134, 136], ["_C.clone"], "function", ["None"], ["def", "get_cfg", "(", ")", ":", "\n", "    ", "return", "_C", ".", "clone", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.MultiStepLR.__init__": [[30, 42], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Milestones should be a list of increasing integers. Got {}'", ".", "format", "(", "milestones", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.MultiStepLR.get_lr": [[43, 48], ["bisect.bisect_left"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "base_lr", "\n", "*", "self", ".", "gamma", "**", "bisect_left", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.MultiStepLR._compute_values": [[50, 53], ["lr_scheduler.MultiStepLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupMultiStepLR.__init__": [[57, 75], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "0.3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "'linear'", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Milestones should be a list of increasing integers. Got {}'", ".", "format", "(", "milestones", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupMultiStepLR.get_lr": [[76, 88], ["lr_scheduler._get_warmup_factor_at_iter", "bisect.bisect_left"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "\n", "self", ".", "last_epoch", ",", "\n", "self", ".", "warmup_iters", ",", "\n", "self", ".", "warmup_factor", ",", "\n", ")", "\n", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_left", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupMultiStepLR._compute_values": [[90, 93], ["lr_scheduler.WarmupMultiStepLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.CosineLR.__init__": [[97, 103], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "max_iters", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "max_iters", "=", "max_iters", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.CosineLR.get_lr": [[104, 110], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "base_lr", "\n", "*", "0.5", "\n", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "max_iters", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.CosineLR._compute_values": [[112, 115], ["lr_scheduler.CosineLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.__init__": [[119, 132], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "max_iters", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "0.3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "'linear'", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "max_iters", "=", "max_iters", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.get_lr": [[133, 146], ["lr_scheduler._get_warmup_factor_at_iter", "math.cos"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler._get_warmup_factor_at_iter"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "_get_warmup_factor_at_iter", "(", "\n", "self", ".", "warmup_method", ",", "\n", "self", ".", "last_epoch", ",", "\n", "self", ".", "warmup_iters", ",", "\n", "self", ".", "warmup_factor", ",", "\n", ")", "\n", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "0.5", "\n", "*", "(", "1.0", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "self", ".", "last_epoch", "/", "self", ".", "max_iters", ")", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR._compute_values": [[148, 151], ["lr_scheduler.WarmupCosineLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.WarmupCosineLR.get_lr"], ["", "def", "_compute_values", "(", "self", ")", ":", "\n", "# The new interface", "\n", "        ", "return", "self", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler._get_warmup_factor_at_iter": [[12, 26], ["ValueError"], "function", ["None"], ["def", "_get_warmup_factor_at_iter", "(", "warmup_method", ",", "\n", "this_iter", ",", "\n", "warmup_iters", ",", "\n", "warmup_factor", ")", ":", "\n", "    ", "if", "this_iter", ">=", "warmup_iters", ":", "\n", "        ", "return", "1.0", "\n", "\n", "", "if", "warmup_method", "==", "'constant'", ":", "\n", "        ", "return", "warmup_factor", "\n", "", "elif", "warmup_method", "==", "'linear'", ":", "\n", "        ", "alpha", "=", "this_iter", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown warmup method: {}'", ".", "format", "(", "warmup_method", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.build_scheduler": [[153, 210], ["lr_scheduler.MultiStepLR", "int", "lr_scheduler.WarmupMultiStepLR", "lr_scheduler.CosineLR", "int", "lr_scheduler.WarmupCosineLR", "RuntimeError"], "function", ["None"], ["", "", "def", "build_scheduler", "(", "cfg", ",", "optimizer", ",", "num_iters_per_epoch", ")", ":", "\n", "    ", "\"\"\"Unlike the PyTorch version, our schedulers adjust the learning rate\n    according to iteration rather than epoch.\n    \"\"\"", "\n", "# Set last epoch (here 'epoch' is actually 'iters')", "\n", "last_epoch", "=", "(", "cfg", ".", "SOLVER", ".", "START_EPOCH", "-", "1", ")", "*", "num_iters_per_epoch", "\n", "\n", "if", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "SCHEDULER_NAME", "==", "'multistep'", ":", "\n", "# Convert milestones epochs to iters", "\n", "        ", "milestones", "=", "[", "(", "i", "-", "1", ")", "*", "num_iters_per_epoch", "for", "i", "in", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "MILESTONES", "]", "\n", "\n", "scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", ",", "\n", "milestones", "=", "milestones", ",", "\n", "gamma", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "GAMMA", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "SCHEDULER_NAME", "==", "'warmup_multistep'", ":", "\n", "# Convert milestones epochs to iters", "\n", "        ", "milestones", "=", "[", "(", "i", "-", "1", ")", "*", "num_iters_per_epoch", "for", "i", "in", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "MILESTONES", "]", "\n", "\n", "# Convert warmup epochs to iters", "\n", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_ITERS", "=", "int", "(", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_EPOCHS", "*", "num_iters_per_epoch", ")", "\n", "\n", "scheduler", "=", "WarmupMultiStepLR", "(", "\n", "optimizer", ",", "\n", "milestones", "=", "milestones", ",", "\n", "gamma", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "GAMMA", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_FACTOR", ",", "\n", "warmup_iters", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_ITERS", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_METHOD", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "SCHEDULER_NAME", "==", "'cosine'", ":", "\n", "# Get max number of iters", "\n", "        ", "max_iters", "=", "cfg", ".", "SOLVER", ".", "NUM_EPOCHS", "*", "num_iters_per_epoch", "\n", "\n", "scheduler", "=", "CosineLR", "(", "\n", "optimizer", ",", "\n", "max_iters", "=", "max_iters", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "SCHEDULER_NAME", "==", "'warmup_cosine'", ":", "\n", "# Get max number of iters", "\n", "        ", "max_iters", "=", "cfg", ".", "SOLVER", ".", "NUM_EPOCHS", "*", "num_iters_per_epoch", "\n", "\n", "# Convert warmup epochs to iters", "\n", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_ITERS", "=", "int", "(", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_EPOCHS", "*", "num_iters_per_epoch", ")", "\n", "\n", "scheduler", "=", "WarmupCosineLR", "(", "\n", "optimizer", ",", "\n", "max_iters", "=", "max_iters", ",", "\n", "gamma", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "GAMMA", ",", "\n", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_FACTOR", ",", "\n", "warmup_iters", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_ITERS", ",", "\n", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "WARMUP_METHOD", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown lr scheduler: {}'", ".", "format", "(", "cfg", ".", "SOLVER", ".", "SCHEDULER", ".", "SCHEDULER_NAME", ")", ")", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.optimizers.build_optimizer": [[9, 28], ["torch.SGD", "torch.Adam", "torch.AdamW", "RuntimeError", "model.parameters", "model.parameters", "model.parameters"], "function", ["None"], ["def", "build_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "if", "cfg", ".", "SOLVER", ".", "OPTIMIZER", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "'initial_lr'", ":", "cfg", ".", "SOLVER", ".", "BASE_LR", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "\n", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "OPTIMIZER", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "'initial_lr'", ":", "cfg", ".", "SOLVER", ".", "BASE_LR", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ",", "\n", ")", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "OPTIMIZER", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", ",", "'initial_lr'", ":", "cfg", ".", "SOLVER", ".", "BASE_LR", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown optimizer: {}'", ".", "format", "(", "cfg", ".", "SOLVER", ".", "OPTIMIZER", ")", ")", "\n", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.lstr.LSTR.__init__": [[14, 80], ["torch.Module.__init__", "transformer.PositionalEncoding", "torch.Linear", "torch.Linear", "feature_head.build_feature_head", "feature_head.build_feature_head", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lstr.LSTR.register_parameter", "lstr.LSTR.register_parameter", "transformer.TransformerDecoderLayer", "transformer.TransformerDecoder", "transformer.TransformerEncoderLayer", "transformer.TransformerEncoder", "transformer.layer_norm", "transformer.layer_norm", "lstr.LSTR.enc_queries.append", "transformer.TransformerDecoderLayer", "lstr.LSTR.enc_modules.append", "lstr.LSTR.enc_queries.append", "transformer.TransformerEncoderLayer", "lstr.LSTR.enc_modules.append", "torch.Embedding", "torch.Embedding", "transformer.TransformerDecoder", "transformer.TransformerEncoder", "transformer.layer_norm", "transformer.layer_norm"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.feature_head.build_feature_head", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.feature_head.build_feature_head", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.layer_norm", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.layer_norm", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.layer_norm", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.layer_norm"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "LSTR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Build long feature heads", "\n", "self", ".", "long_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "\n", "self", ".", "long_enabled", "=", "self", ".", "long_memory_num_samples", ">", "0", "\n", "if", "self", ".", "long_enabled", ":", "\n", "            ", "self", ".", "feature_head_long", "=", "build_feature_head", "(", "cfg", ")", "\n", "\n", "# Build work feature head", "\n", "", "self", ".", "work_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "\n", "self", ".", "work_enabled", "=", "self", ".", "work_memory_num_samples", ">", "0", "\n", "if", "self", ".", "work_enabled", ":", "\n", "            ", "self", ".", "feature_head_work", "=", "build_feature_head", "(", "cfg", ")", "\n", "\n", "", "self", ".", "d_model", "=", "self", ".", "feature_head_work", ".", "d_model", "\n", "self", ".", "num_heads", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "NUM_HEADS", "\n", "self", ".", "dim_feedforward", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "DIM_FEEDFORWARD", "\n", "self", ".", "dropout", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "DROPOUT", "\n", "self", ".", "activation", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "ACTIVATION", "\n", "self", ".", "num_classes", "=", "cfg", ".", "DATA", ".", "NUM_CLASSES", "\n", "\n", "# Build position encoding", "\n", "self", ".", "pos_encoding", "=", "tr", ".", "PositionalEncoding", "(", "self", ".", "d_model", ",", "self", ".", "dropout", ")", "\n", "\n", "# Build LSTR encoder", "\n", "if", "self", ".", "long_enabled", ":", "\n", "            ", "self", ".", "enc_queries", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "enc_modules", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "param", "in", "cfg", ".", "MODEL", ".", "LSTR", ".", "ENC_MODULE", ":", "\n", "                ", "if", "param", "[", "0", "]", "!=", "-", "1", ":", "\n", "                    ", "self", ".", "enc_queries", ".", "append", "(", "nn", ".", "Embedding", "(", "param", "[", "0", "]", ",", "self", ".", "d_model", ")", ")", "\n", "enc_layer", "=", "tr", ".", "TransformerDecoderLayer", "(", "\n", "self", ".", "d_model", ",", "self", ".", "num_heads", ",", "self", ".", "dim_feedforward", ",", "\n", "self", ".", "dropout", ",", "self", ".", "activation", ")", "\n", "self", ".", "enc_modules", ".", "append", "(", "tr", ".", "TransformerDecoder", "(", "\n", "enc_layer", ",", "param", "[", "1", "]", ",", "tr", ".", "layer_norm", "(", "self", ".", "d_model", ",", "param", "[", "2", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "enc_queries", ".", "append", "(", "None", ")", "\n", "enc_layer", "=", "tr", ".", "TransformerEncoderLayer", "(", "\n", "self", ".", "d_model", ",", "self", ".", "num_heads", ",", "self", ".", "dim_feedforward", ",", "\n", "self", ".", "dropout", ",", "self", ".", "activation", ")", "\n", "self", ".", "enc_modules", ".", "append", "(", "tr", ".", "TransformerEncoder", "(", "\n", "enc_layer", ",", "param", "[", "1", "]", ",", "tr", ".", "layer_norm", "(", "self", ".", "d_model", ",", "param", "[", "2", "]", ")", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'enc_queries'", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "'enc_modules'", ",", "None", ")", "\n", "\n", "# Build LSTR decoder", "\n", "", "if", "self", ".", "long_enabled", ":", "\n", "            ", "param", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "DEC_MODULE", "\n", "dec_layer", "=", "tr", ".", "TransformerDecoderLayer", "(", "\n", "self", ".", "d_model", ",", "self", ".", "num_heads", ",", "self", ".", "dim_feedforward", ",", "\n", "self", ".", "dropout", ",", "self", ".", "activation", ")", "\n", "self", ".", "dec_modules", "=", "tr", ".", "TransformerDecoder", "(", "\n", "dec_layer", ",", "param", "[", "1", "]", ",", "tr", ".", "layer_norm", "(", "self", ".", "d_model", ",", "param", "[", "2", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "param", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "DEC_MODULE", "\n", "dec_layer", "=", "tr", ".", "TransformerEncoderLayer", "(", "\n", "self", ".", "d_model", ",", "self", ".", "num_heads", ",", "self", ".", "dim_feedforward", ",", "\n", "self", ".", "dropout", ",", "self", ".", "activation", ")", "\n", "self", ".", "dec_modules", "=", "tr", ".", "TransformerEncoder", "(", "\n", "dec_layer", ",", "param", "[", "1", "]", ",", "tr", ".", "layer_norm", "(", "self", ".", "d_model", ",", "param", "[", "2", "]", ")", ")", "\n", "\n", "# Build classifier", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.lstr.LSTR.forward": [[81, 141], ["lstr.LSTR.classifier", "lstr.LSTR.transpose", "lstr.LSTR.pos_encoding", "lstr.LSTR.pos_encoding", "transformer.generate_square_subsequent_mask", "mask.to.to.to", "lstr.LSTR.feature_head_long().transpose", "len", "zip", "lstr.LSTR.feature_head_work().transpose", "lstr.LSTR.dec_modules", "lstr.LSTR.dec_modules", "lstr.LSTR.feature_head_long", "enc_query.weight.unsqueeze().repeat", "enc_module", "enc_module", "lstr.LSTR.feature_head_work", "enc_query.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.generate_square_subsequent_mask"], ["", "def", "forward", "(", "self", ",", "visual_inputs", ",", "motion_inputs", ",", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "long_enabled", ":", "\n", "# Compute long memories", "\n", "            ", "long_memories", "=", "self", ".", "pos_encoding", "(", "self", ".", "feature_head_long", "(", "\n", "visual_inputs", "[", ":", ",", ":", "self", ".", "long_memory_num_samples", "]", ",", "\n", "motion_inputs", "[", ":", ",", ":", "self", ".", "long_memory_num_samples", "]", ",", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "enc_modules", ")", ">", "0", ":", "\n", "                ", "enc_queries", "=", "[", "\n", "enc_query", ".", "weight", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "long_memories", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "if", "enc_query", "is", "not", "None", "else", "None", "\n", "for", "enc_query", "in", "self", ".", "enc_queries", "\n", "]", "\n", "\n", "# Encode long memories", "\n", "if", "enc_queries", "[", "0", "]", "is", "not", "None", ":", "\n", "                    ", "long_memories", "=", "self", ".", "enc_modules", "[", "0", "]", "(", "enc_queries", "[", "0", "]", ",", "long_memories", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "", "else", ":", "\n", "                    ", "long_memories", "=", "self", ".", "enc_modules", "[", "0", "]", "(", "long_memories", ")", "\n", "", "for", "enc_query", ",", "enc_module", "in", "zip", "(", "enc_queries", "[", "1", ":", "]", ",", "self", ".", "enc_modules", "[", "1", ":", "]", ")", ":", "\n", "                    ", "if", "enc_query", "is", "not", "None", ":", "\n", "                        ", "long_memories", "=", "enc_module", "(", "enc_query", ",", "long_memories", ")", "\n", "", "else", ":", "\n", "                        ", "long_memories", "=", "enc_module", "(", "long_memories", ")", "\n", "\n", "# Concatenate memories", "\n", "", "", "", "", "if", "self", ".", "long_enabled", ":", "\n", "            ", "memory", "=", "long_memories", "\n", "\n", "", "if", "self", ".", "work_enabled", ":", "\n", "# Compute work memories", "\n", "            ", "work_memories", "=", "self", ".", "pos_encoding", "(", "self", ".", "feature_head_work", "(", "\n", "visual_inputs", "[", ":", ",", "self", ".", "long_memory_num_samples", ":", "]", ",", "\n", "motion_inputs", "[", ":", ",", "self", ".", "long_memory_num_samples", ":", "]", ",", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "padding", "=", "self", ".", "long_memory_num_samples", ")", "\n", "\n", "# Build mask", "\n", "mask", "=", "tr", ".", "generate_square_subsequent_mask", "(", "\n", "work_memories", ".", "shape", "[", "0", "]", ")", "\n", "mask", "=", "mask", ".", "to", "(", "work_memories", ".", "device", ")", "\n", "\n", "# Compute output", "\n", "if", "self", ".", "long_enabled", ":", "\n", "                ", "output", "=", "self", ".", "dec_modules", "(", "\n", "work_memories", ",", "\n", "memory", "=", "memory", ",", "\n", "tgt_mask", "=", "mask", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "dec_modules", "(", "\n", "work_memories", ",", "\n", "src_mask", "=", "mask", ",", "\n", ")", "\n", "\n", "# Compute classification score", "\n", "", "", "score", "=", "self", ".", "classifier", "(", "output", ")", "\n", "\n", "return", "score", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.lstr.LSTRStream.__init__": [[146, 154], ["lstr.LSTR.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "LSTRStream", ",", "self", ")", ".", "__init__", "(", "cfg", ")", "\n", "\n", "############################", "\n", "# Cache for stream inference", "\n", "############################", "\n", "self", ".", "long_memories_cache", "=", "None", "\n", "self", ".", "compressed_long_memories_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.lstr.LSTRStream.stream_inference": [[155, 245], ["lstr.LSTRStream.classifier", "lstr.LSTRStream.transpose", "len", "lstr.LSTRStream.feature_head_long().transpose", "lstr.LSTRStream.enc_modules[].stream_inference", "zip", "zip", "lstr.LSTRStream.pos_encoding", "transformer.generate_square_subsequent_mask", "mask.to.to.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstr.LSTRStream.feature_head_work().transpose", "lstr.LSTRStream.dec_modules", "lstr.LSTRStream.dec_modules", "lstr.LSTRStream.feature_head_long", "enc_query.weight.unsqueeze().repeat", "enc_module", "enc_module", "enc_query.weight.unsqueeze().repeat", "enc_module", "enc_module", "lstr.LSTRStream.feature_head_work", "enc_query.weight.unsqueeze", "enc_query.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.stream_inference", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.generate_square_subsequent_mask"], ["", "def", "stream_inference", "(", "self", ",", "\n", "long_visual_inputs", ",", "\n", "long_motion_inputs", ",", "\n", "work_visual_inputs", ",", "\n", "work_motion_inputs", ",", "\n", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "long_enabled", ",", "'Long-term memory cannot be empty for stream inference'", "\n", "assert", "len", "(", "self", ".", "enc_modules", ")", ">", "0", ",", "'LSTR encoder cannot be disabled for stream inference'", "\n", "\n", "if", "(", "long_visual_inputs", "is", "not", "None", ")", "and", "(", "long_motion_inputs", "is", "not", "None", ")", ":", "\n", "# Compute long memories", "\n", "            ", "long_memories", "=", "self", ".", "feature_head_long", "(", "\n", "long_visual_inputs", ",", "\n", "long_motion_inputs", ",", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "long_memories_cache", "is", "None", ":", "\n", "                ", "self", ".", "long_memories_cache", "=", "long_memories", "\n", "", "else", ":", "\n", "                ", "self", ".", "long_memories_cache", "=", "torch", ".", "cat", "(", "(", "\n", "self", ".", "long_memories_cache", "[", "1", ":", "]", ",", "long_memories", "\n", ")", ")", "\n", "\n", "", "long_memories", "=", "self", ".", "long_memories_cache", "\n", "pos", "=", "self", ".", "pos_encoding", ".", "pe", "[", ":", "self", ".", "long_memory_num_samples", ",", ":", "]", "\n", "\n", "enc_queries", "=", "[", "\n", "enc_query", ".", "weight", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "long_memories", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "if", "enc_query", "is", "not", "None", "else", "None", "\n", "for", "enc_query", "in", "self", ".", "enc_queries", "\n", "]", "\n", "\n", "# Encode long memories", "\n", "long_memories", "=", "self", ".", "enc_modules", "[", "0", "]", ".", "stream_inference", "(", "enc_queries", "[", "0", "]", ",", "long_memories", ",", "pos", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "self", ".", "compressed_long_memories_cache", "=", "long_memories", "\n", "for", "enc_query", ",", "enc_module", "in", "zip", "(", "enc_queries", "[", "1", ":", "]", ",", "self", ".", "enc_modules", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "enc_query", "is", "not", "None", ":", "\n", "                    ", "long_memories", "=", "enc_module", "(", "enc_query", ",", "long_memories", ")", "\n", "", "else", ":", "\n", "                    ", "long_memories", "=", "enc_module", "(", "long_memories", ")", "\n", "", "", "", "else", ":", "\n", "            ", "long_memories", "=", "self", ".", "compressed_long_memories_cache", "\n", "\n", "enc_queries", "=", "[", "\n", "enc_query", ".", "weight", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "long_memories", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "if", "enc_query", "is", "not", "None", "else", "None", "\n", "for", "enc_query", "in", "self", ".", "enc_queries", "\n", "]", "\n", "\n", "# Encode long memories", "\n", "for", "enc_query", ",", "enc_module", "in", "zip", "(", "enc_queries", "[", "1", ":", "]", ",", "self", ".", "enc_modules", "[", "1", ":", "]", ")", ":", "\n", "                ", "if", "enc_query", "is", "not", "None", ":", "\n", "                    ", "long_memories", "=", "enc_module", "(", "enc_query", ",", "long_memories", ")", "\n", "", "else", ":", "\n", "                    ", "long_memories", "=", "enc_module", "(", "long_memories", ")", "\n", "\n", "# Concatenate memories", "\n", "", "", "", "if", "self", ".", "long_enabled", ":", "\n", "            ", "memory", "=", "long_memories", "\n", "\n", "", "if", "self", ".", "work_enabled", ":", "\n", "# Compute work memories", "\n", "            ", "work_memories", "=", "self", ".", "pos_encoding", "(", "self", ".", "feature_head_work", "(", "\n", "work_visual_inputs", ",", "\n", "work_motion_inputs", ",", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "padding", "=", "self", ".", "long_memory_num_samples", ")", "\n", "\n", "# Build mask", "\n", "mask", "=", "tr", ".", "generate_square_subsequent_mask", "(", "\n", "work_memories", ".", "shape", "[", "0", "]", ")", "\n", "mask", "=", "mask", ".", "to", "(", "work_memories", ".", "device", ")", "\n", "\n", "# Compute output", "\n", "if", "self", ".", "long_enabled", ":", "\n", "                ", "output", "=", "self", ".", "dec_modules", "(", "\n", "work_memories", ",", "\n", "memory", "=", "memory", ",", "\n", "tgt_mask", "=", "mask", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "dec_modules", "(", "\n", "work_memories", ",", "\n", "src_mask", "=", "mask", ",", "\n", ")", "\n", "\n", "# Compute classification score", "\n", "", "", "score", "=", "self", ".", "classifier", "(", "output", ")", "\n", "\n", "return", "score", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.models.build_model": [[11, 16], ["model.apply", "model.to"], "function", ["None"], ["def", "build_model", "(", "cfg", ",", "device", "=", "None", ")", ":", "\n", "    ", "model", "=", "META_ARCHITECTURES", "[", "cfg", ".", "MODEL", ".", "MODEL_NAME", "]", "(", "cfg", ")", "\n", "from", ".", "weights_init", "import", "weights_init", "\n", "model", ".", "apply", "(", "weights_init", ")", "\n", "return", "model", ".", "to", "(", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.feature_head.BaseFeatureHead.__init__": [[26, 55], ["torch.Module.__init__", "RuntimeError", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "BaseFeatureHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "cfg", ".", "INPUT", ".", "MODALITY", "in", "[", "'visual'", ",", "'motion'", ",", "'twostream'", "]", ":", "\n", "            ", "self", ".", "with_visual", "=", "'motion'", "not", "in", "cfg", ".", "INPUT", ".", "MODALITY", "\n", "self", ".", "with_motion", "=", "'visual'", "not", "in", "cfg", ".", "INPUT", ".", "MODALITY", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown modality of {}'", ".", "format", "(", "cfg", ".", "INPUT", ".", "MODALITY", ")", ")", "\n", "\n", "", "if", "self", ".", "with_visual", "and", "self", ".", "with_motion", ":", "\n", "            ", "visual_size", "=", "FEATURE_SIZES", "[", "cfg", ".", "INPUT", ".", "VISUAL_FEATURE", "]", "\n", "motion_size", "=", "FEATURE_SIZES", "[", "cfg", ".", "INPUT", ".", "MOTION_FEATURE", "]", "\n", "fusion_size", "=", "visual_size", "+", "motion_size", "\n", "", "elif", "self", ".", "with_visual", ":", "\n", "            ", "fusion_size", "=", "FEATURE_SIZES", "[", "cfg", ".", "INPUT", ".", "VISUAL_FEATURE", "]", "\n", "", "elif", "self", ".", "with_motion", ":", "\n", "            ", "fusion_size", "=", "FEATURE_SIZES", "[", "cfg", ".", "INPUT", ".", "MOTION_FEATURE", "]", "\n", "\n", "", "self", ".", "d_model", "=", "fusion_size", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "FEATURE_HEAD", ".", "LINEAR_ENABLED", ":", "\n", "            ", "if", "cfg", ".", "MODEL", ".", "FEATURE_HEAD", ".", "LINEAR_OUT_FEATURES", "!=", "-", "1", ":", "\n", "                ", "self", ".", "d_model", "=", "cfg", ".", "MODEL", ".", "FEATURE_HEAD", ".", "LINEAR_OUT_FEATURES", "\n", "", "self", ".", "input_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "fusion_size", ",", "self", ".", "d_model", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_linear", "=", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.feature_head.BaseFeatureHead.forward": [[56, 65], ["feature_head.BaseFeatureHead.input_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "visual_input", ",", "motion_input", ")", ":", "\n", "        ", "if", "self", ".", "with_visual", "and", "self", ".", "with_motion", ":", "\n", "            ", "fusion_input", "=", "torch", ".", "cat", "(", "(", "visual_input", ",", "motion_input", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "self", ".", "with_visual", ":", "\n", "            ", "fusion_input", "=", "visual_input", "\n", "", "elif", "self", ".", "with_motion", ":", "\n", "            ", "fusion_input", "=", "motion_input", "\n", "", "fusion_input", "=", "self", ".", "input_linear", "(", "fusion_input", ")", "\n", "return", "fusion_input", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.feature_head.build_feature_head": [[67, 70], ["feature_head"], "function", ["None"], ["", "", "def", "build_feature_head", "(", "cfg", ")", ":", "\n", "    ", "feature_head", "=", "FEATURE_HEADS", "[", "cfg", ".", "DATA", ".", "DATA_NAME", "]", "\n", "return", "feature_head", "(", "cfg", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.weights_init.weights_init": [[9, 34], ["isinstance", "torch.init.kaiming_uniform_", "isinstance", "torch.init.normal_", "isinstance", "math.sqrt", "torch.init.normal_", "torch.init.xavier_normal_", "isinstance", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.normal_", "torch.init.xavier_normal_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "math", ".", "sqrt", "(", "5", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose1d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "mean", "=", "1", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "mean", "=", "1", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.DotProductAttention.__init__": [[11, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DotProductAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.DotProductAttention.forward": [[16, 28], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "attn_output_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "", "attn_output_weights", "=", "F", ".", "softmax", "(", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_output_weights", "=", "F", ".", "dropout", "(", "attn_output_weights", ",", "\n", "p", "=", "self", ".", "dropout", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "v", ")", "\n", "return", "attn_output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.DotProductAttentionStream.__init__": [[32, 40], ["multihead_attention.DotProductAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "DotProductAttentionStream", ",", "self", ")", ".", "__init__", "(", "dropout", ")", "\n", "\n", "############################", "\n", "# Cache for stream inference", "\n", "############################", "\n", "self", ".", "k_weights_cache", "=", "None", "\n", "self", ".", "k_pos_weights_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.DotProductAttentionStream.stream_inference": [[41, 63], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k[].transpose", "k.transpose", "k_pos.transpose"], "methods", ["None"], ["", "def", "stream_inference", "(", "self", ",", "q", ",", "k", ",", "v", ",", "k_pos", ",", "v_pos", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "k_weights_cache", "is", "not", "None", ":", "\n", "            ", "k_weights_new", "=", "torch", ".", "bmm", "(", "q", ",", "k", "[", ":", ",", "[", "-", "1", "]", "]", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "k_weights", "=", "torch", ".", "cat", "(", "(", "self", ".", "k_weights_cache", "[", ":", ",", ":", ",", "1", ":", "]", ",", "k_weights_new", ")", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "k_weights_cache", "=", "k_weights", "\n", "k_pos_weights", "=", "self", ".", "k_pos_weights_cache", "\n", "", "else", ":", "\n", "            ", "k_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "k_weights_cache", "=", "k_weights", "\n", "k_pos_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k_pos", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "k_pos_weights_cache", "=", "k_pos_weights", "\n", "", "attn_output_weights", "=", "k_weights", "+", "k_pos_weights", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "", "attn_output_weights", "=", "F", ".", "softmax", "(", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_output_weights", "=", "F", ".", "dropout", "(", "attn_output_weights", ",", "\n", "p", "=", "self", ".", "dropout", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "(", "v", "+", "v_pos", ")", ")", "\n", "return", "attn_output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.MultiheadAttention.__init__": [[67, 96], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "multihead_attention.DotProductAttention", "torch.Parameter", "torch.Parameter", "torch.Parameter", "RuntimeError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "multihead_attention.MultiheadAttention.register_parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.0", ",", "bias", "=", "True", ",", "kdim", "=", "None", ",", "vdim", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiheadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "kdim", "=", "kdim", "if", "kdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "vdim", "=", "vdim", "if", "vdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "_qkv_same_embed_dim", "=", "self", ".", "kdim", "==", "embed_dim", "and", "self", ".", "vdim", "==", "embed_dim", "\n", "\n", "if", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "self", ".", "in_proj_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Do not support q, k, v have different dimensions'", ")", "\n", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "\n", "if", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "\n", "", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "\n", "", "self", ".", "dotproductattention", "=", "DotProductAttention", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.MultiheadAttention.forward": [[97, 158], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous().view().transpose", "multihead_attention.MultiheadAttention.dotproductattention", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "float", "attn_mask.reshape.reshape.unsqueeze().repeat", "attn_mask.reshape.reshape.unsqueeze().repeat", "attn_mask.reshape.reshape.reshape", "key_padding_mask.reshape.reshape.unsqueeze().repeat", "key_padding_mask.reshape.reshape.unsqueeze().repeat", "key_padding_mask.reshape.reshape.reshape", "multihead_attention.MultiheadAttention.out_proj", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous().view", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "attn_mask.reshape.reshape.unsqueeze", "attn_mask.reshape.reshape.unsqueeze", "key_padding_mask.reshape.reshape.unsqueeze", "key_padding_mask.reshape.reshape.unsqueeze", "q.contiguous().view().transpose.contiguous().view().transpose.contiguous", "k.contiguous().view().transpose.contiguous().view().transpose.contiguous", "v.contiguous().view().transpose.contiguous().view().transpose.contiguous", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attn_mask", "=", "None", ",", "key_padding_mask", "=", "None", ")", ":", "\n", "        ", "tsz", ",", "bsz", ",", "embed_dim", "=", "q", ".", "shape", "[", "0", "]", ",", "q", ".", "shape", "[", "1", "]", ",", "q", ".", "shape", "[", "2", "]", "\n", "\n", "head_dim", "=", "embed_dim", "//", "self", ".", "num_heads", "\n", "assert", "head_dim", "*", "self", ".", "num_heads", "==", "embed_dim", ",", "'embed_dim must be divisible by num_heads'", "\n", "scaling", "=", "float", "(", "head_dim", ")", "**", "-", "0.5", "\n", "\n", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "None", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "            ", "_b", "=", "_b", "[", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "q", ",", "_w", ",", "_b", ")", "\n", "\n", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "            ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "F", ".", "linear", "(", "k", ",", "_w", ",", "_b", ")", "\n", "\n", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "            ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v", "=", "F", ".", "linear", "(", "v", ",", "_w", ",", "_b", ")", "\n", "\n", "q", "=", "q", "*", "scaling", "\n", "\n", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bsz", ",", "1", ",", "1", ")", "\n", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_heads", ",", "1", ",", "1", ")", "\n", "attn_mask", "=", "attn_mask", ".", "reshape", "(", "-", "1", ",", "*", "attn_mask", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tsz", ",", "1", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_heads", ",", "1", ",", "1", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "reshape", "(", "-", "1", ",", "*", "key_padding_mask", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", "and", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "attn_mask", "+", "key_padding_mask", "\n", "", "elif", "attn_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "attn_mask", "\n", "", "elif", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "key_padding_mask", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "\n", "", "attn_output", "=", "self", ".", "dotproductattention", "(", "q", ",", "k", ",", "v", ",", "mask", ")", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tsz", ",", "bsz", ",", "\n", "self", ".", "embed_dim", ")", "\n", "return", "self", ".", "out_proj", "(", "attn_output", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.MultiheadAttentionStream.__init__": [[162, 175], ["multihead_attention.MultiheadAttention.__init__", "multihead_attention.DotProductAttentionStream"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.0", ",", "bias", "=", "True", ",", "kdim", "=", "None", ",", "vdim", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiheadAttentionStream", ",", "self", ")", ".", "__init__", "(", "embed_dim", ",", "num_heads", ",", "dropout", ",", "bias", ",", "kdim", ",", "vdim", ")", "\n", "\n", "self", ".", "dotproductattention", "=", "DotProductAttentionStream", "(", "dropout", ")", "\n", "\n", "############################", "\n", "# Cache for stream inference", "\n", "############################", "\n", "self", ".", "q_cache", "=", "None", "\n", "self", ".", "k_cache", "=", "None", "\n", "self", ".", "v_cache", "=", "None", "\n", "self", ".", "k_pos_cache", "=", "None", "\n", "self", ".", "v_pos_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.multihead_attention.MultiheadAttentionStream.stream_inference": [[176, 275], ["torch.linear.contiguous().view().transpose", "torch.linear.contiguous().view().transpose", "torch.linear.contiguous().view().transpose", "torch.linear.contiguous().view().transpose", "torch.linear.contiguous().view().transpose", "multihead_attention.MultiheadAttentionStream.dotproductattention.stream_inference", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "float", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "attn_mask.reshape.reshape.unsqueeze().repeat", "attn_mask.reshape.reshape.unsqueeze().repeat", "attn_mask.reshape.reshape.reshape", "key_padding_mask.reshape.reshape.unsqueeze().repeat", "key_padding_mask.reshape.reshape.unsqueeze().repeat", "key_padding_mask.reshape.reshape.reshape", "multihead_attention.MultiheadAttentionStream.out_proj", "torch.linear.contiguous().view", "torch.linear.contiguous().view", "torch.linear.contiguous().view", "torch.linear.contiguous().view", "torch.linear.contiguous().view", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "attn_mask.reshape.reshape.unsqueeze", "attn_mask.reshape.reshape.unsqueeze", "key_padding_mask.reshape.reshape.unsqueeze", "key_padding_mask.reshape.reshape.unsqueeze", "torch.linear.contiguous", "torch.linear.contiguous", "torch.linear.contiguous", "torch.linear.contiguous", "torch.linear.contiguous", "attn_output.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.stream_inference"], ["", "def", "stream_inference", "(", "self", ",", "q", ",", "k", ",", "v", ",", "pos", ",", "attn_mask", "=", "None", ",", "key_padding_mask", "=", "None", ")", ":", "\n", "        ", "tsz", ",", "bsz", ",", "embed_dim", "=", "q", ".", "shape", "[", "0", "]", ",", "q", ".", "shape", "[", "1", "]", ",", "q", ".", "shape", "[", "2", "]", "\n", "\n", "head_dim", "=", "embed_dim", "//", "self", ".", "num_heads", "\n", "assert", "head_dim", "*", "self", ".", "num_heads", "==", "embed_dim", ",", "'embed_dim must be divisible by num_heads'", "\n", "scaling", "=", "float", "(", "head_dim", ")", "**", "-", "0.5", "\n", "\n", "if", "self", ".", "q_cache", "is", "not", "None", ":", "\n", "            ", "q", "=", "self", ".", "q_cache", "\n", "", "else", ":", "\n", "            ", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "None", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "q", ",", "_w", ",", "_b", ")", "\n", "self", ".", "q_cache", "=", "q", "\n", "\n", "", "assert", "(", "self", ".", "k_cache", "is", "None", ")", "==", "(", "self", ".", "k_pos_cache", "is", "None", ")", "\n", "if", "self", ".", "k_cache", "is", "not", "None", ":", "\n", "            ", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k_new", "=", "F", ".", "linear", "(", "k", "[", "[", "-", "1", "]", "]", ",", "_w", ",", "None", ")", "\n", "k", "=", "torch", ".", "cat", "(", "(", "self", ".", "k_cache", "[", "1", ":", "]", ",", "k_new", ")", ")", "\n", "self", ".", "k_cache", "=", "k", "\n", "k_pos", "=", "self", ".", "k_pos_cache", "\n", "", "else", ":", "\n", "            ", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "F", ".", "linear", "(", "k", ",", "_w", ",", "None", ")", "\n", "self", ".", "k_cache", "=", "k", "\n", "k_pos", "=", "F", ".", "linear", "(", "pos", ",", "_w", ",", "_b", ")", "\n", "self", ".", "k_pos_cache", "=", "k_pos", "\n", "\n", "", "assert", "(", "self", ".", "v_cache", "is", "None", ")", "==", "(", "self", ".", "v_pos_cache", "is", "None", ")", "\n", "if", "self", ".", "v_cache", "is", "not", "None", ":", "\n", "            ", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v_new", "=", "F", ".", "linear", "(", "v", "[", "[", "-", "1", "]", "]", ",", "_w", ",", "None", ")", "\n", "v", "=", "torch", ".", "cat", "(", "(", "self", ".", "v_cache", "[", "1", ":", "]", ",", "v_new", ")", ")", "\n", "self", ".", "v_cache", "=", "v", "\n", "v_pos", "=", "self", ".", "v_pos_cache", "\n", "", "else", ":", "\n", "            ", "_b", "=", "self", ".", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "self", ".", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v", "=", "F", ".", "linear", "(", "v", ",", "_w", ",", "None", ")", "\n", "self", ".", "v_cache", "=", "v", "\n", "v_pos", "=", "F", ".", "linear", "(", "pos", ",", "_w", ",", "_b", ")", "\n", "self", ".", "v_pos_cache", "=", "v_pos", "\n", "\n", "", "q", "=", "q", "*", "scaling", "\n", "\n", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k_pos", "=", "k_pos", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v_pos", "=", "v_pos", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "bsz", ",", "1", ",", "1", ")", "\n", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_heads", ",", "1", ",", "1", ")", "\n", "attn_mask", "=", "attn_mask", ".", "reshape", "(", "-", "1", ",", "*", "attn_mask", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "tsz", ",", "1", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_heads", ",", "1", ",", "1", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "reshape", "(", "-", "1", ",", "*", "key_padding_mask", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", "and", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "attn_mask", "+", "key_padding_mask", "\n", "", "elif", "attn_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "attn_mask", "\n", "", "elif", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "key_padding_mask", "\n", "", "else", ":", "\n", "            ", "mask", "=", "None", "\n", "\n", "", "attn_output", "=", "self", ".", "dotproductattention", ".", "stream_inference", "(", "q", ",", "k", ",", "v", ",", "k_pos", ",", "v_pos", ",", "mask", ")", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tsz", ",", "bsz", ",", "\n", "self", ".", "embed_dim", ")", "\n", "return", "self", ".", "out_proj", "(", "attn_output", ")", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.Transformer.__init__": [[15, 36], ["torch.Module.__init__", "transformer.TransformerEncoderLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "transformer.TransformerEncoder", "transformer.TransformerDecoderLayer", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "transformer.TransformerDecoder"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", "=", "512", ",", "nhead", "=", "8", ",", "num_encoder_layers", "=", "6", ",", "\n", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "\n", "activation", "=", "'relu'", ",", "custom_encoder", "=", "None", ",", "custom_decoder", "=", "None", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "custom_encoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "encoder", "=", "custom_encoder", "\n", "", "else", ":", "\n", "            ", "encoder_layer", "=", "TransformerEncoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "encoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "encoder", "=", "TransformerEncoder", "(", "encoder_layer", ",", "num_encoder_layers", ",", "encoder_norm", ")", "\n", "\n", "", "if", "custom_decoder", "is", "not", "None", ":", "\n", "            ", "self", ".", "decoder", "=", "custom_decoder", "\n", "", "else", ":", "\n", "            ", "decoder_layer", "=", "TransformerDecoderLayer", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "decoder_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "decoder", "=", "TransformerDecoder", "(", "decoder_layer", ",", "num_decoder_layers", ",", "decoder_norm", ")", "\n", "\n", "", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.Transformer.forward": [[37, 51], ["transformer.Transformer.encoder", "transformer.Transformer.decoder", "src.size", "tgt.size", "RuntimeError", "RuntimeError", "src.size", "tgt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "src_mask", "=", "None", ",", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "src_key_padding_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "if", "src", ".", "size", "(", "1", ")", "!=", "tgt", ".", "size", "(", "1", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'the batch number of src and tgt must be equal'", ")", "\n", "\n", "", "if", "src", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", "or", "tgt", ".", "size", "(", "2", ")", "!=", "self", ".", "d_model", ":", "\n", "            ", "raise", "RuntimeError", "(", "'the feature number of src and tgt must be equal to d_model'", ")", "\n", "\n", "", "memory", "=", "self", ".", "encoder", "(", "src", ",", "mask", "=", "src_mask", ",", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "output", "=", "self", ".", "decoder", "(", "tgt", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerEncoder.__init__": [[55, 61], ["torch.Module.__init__", "transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "_get_clones", "(", "encoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerEncoder.forward": [[62, 73], ["mod", "transformer.TransformerEncoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "src_mask", "=", "None", ",", "src_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "src", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "src_mask", "=", "src_mask", ",", "\n", "src_key_padding_mask", "=", "src_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoder.__init__": [[77, 83], ["torch.Module.__init__", "transformer._get_clones"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_clones"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformerDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "_get_clones", "(", "decoder_layer", ",", "num_layers", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "norm", "=", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoder.stream_inference": [[84, 102], ["transformer.TransformerDecoder.layers[].stream_inference", "len", "RuntimeError", "transformer.TransformerDecoder.norm"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.stream_inference"], ["", "def", "stream_inference", "(", "self", ",", "tgt", ",", "memory", ",", "pos", ",", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "if", "len", "(", "self", ".", "layers", ")", "!=", "1", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Number of layers cannot larger than 1 for stream inference'", ")", "\n", "\n", "", "output", "=", "self", ".", "layers", "[", "0", "]", ".", "stream_inference", "(", "output", ",", "memory", ",", "pos", ",", "\n", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoder.forward": [[103, 118], ["mod", "transformer.TransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "output", "=", "mod", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerEncoderLayer.__init__": [[122, 138], ["torch.Module.__init__", "multihead_attention.MultiheadAttentionStream", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerEncoderLayer.__setstate__": [[139, 143], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerEncoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerEncoderLayer.forward": [[144, 153], ["transformer.TransformerEncoderLayer.norm1", "transformer.TransformerEncoderLayer.linear2", "transformer.TransformerEncoderLayer.norm2", "transformer.TransformerEncoderLayer.self_attn", "transformer.TransformerEncoderLayer.dropout1", "transformer.TransformerEncoderLayer.dropout", "transformer.TransformerEncoderLayer.dropout2", "transformer.TransformerEncoderLayer.activation", "transformer.TransformerEncoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "src_mask", "=", "None", ",", "src_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "src2", "=", "self", ".", "self_attn", "(", "src", ",", "src", ",", "src", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.__init__": [[157, 181], ["torch.Module.__init__", "multihead_attention.MultiheadAttentionStream", "multihead_attention.MultiheadAttentionStream", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "'relu'", ")", ":", "\n", "        ", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n", "############################", "\n", "# Cache for stream inference", "\n", "############################", "\n", "self", ".", "tgt_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.__setstate__": [[182, 186], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "if", "'activation'", "not", "in", "state", ":", "\n", "            ", "state", "[", "'activation'", "]", "=", "F", ".", "relu", "\n", "", "super", "(", "TransformerDecoderLayer", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.stream_inference": [[187, 205], ["transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.multihead_attn.stream_inference", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.stream_inference"], ["", "def", "stream_inference", "(", "self", ",", "tgt", ",", "memory", ",", "pos", ",", "tgt_mask", "=", "None", ",", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "tgt_cache", "is", "None", ":", "\n", "            ", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "self", ".", "tgt_cache", "=", "tgt", "\n", "", "else", ":", "\n", "            ", "tgt", "=", "self", ".", "tgt_cache", "\n", "", "tgt2", "=", "self", ".", "multihead_attn", ".", "stream_inference", "(", "tgt", ",", "memory", ",", "memory", ",", "pos", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer.TransformerDecoderLayer.forward": [[206, 220], ["transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.norm3", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "tgt_mask", "=", "None", ",", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "memory_key_padding_mask", "=", "None", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_clones": [[222, 224], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "_get_clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "i", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.transformer._get_activation_fn": [[226, 233], ["RuntimeError"], "function", ["None"], ["", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "'relu'", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "elif", "activation", "==", "'gelu'", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "\n", "", "raise", "RuntimeError", "(", "'activation should be relu/gelu, not {}'", ".", "format", "(", "activation", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.layer_norm": [[9, 11], ["torch.LayerNorm"], "function", ["None"], ["def", "layer_norm", "(", "d_model", ",", "condition", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "LayerNorm", "(", "d_model", ")", "if", "condition", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.utils.generate_square_subsequent_mask": [[13, 17], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float"], "function", ["None"], ["", "def", "generate_square_subsequent_mask", "(", "sz", ")", ":", "\n", "    ", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.position_encoding.PositionalEncoding.__init__": [[12, 24], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze().transpose", "position_encoding.PositionalEncoding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "pe.unsqueeze().transpose.unsqueeze().transpose.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "(", "-", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.transformer.position_encoding.PositionalEncoding.forward": [[25, 28], ["position_encoding.PositionalEncoding.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "padding", "=", "0", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "pe", "[", "padding", ":", "padding", "+", "x", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.BinaryCrossEntropyLoss.__init__": [[18, 22], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "-", "100", ")", ":", "\n", "        ", "super", "(", "BinaryCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.BinaryCrossEntropyLoss.forward": [[23, 25], ["criterions.BinaryCrossEntropyLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.SingleCrossEntropyLoss.__init__": [[30, 35], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "-", "100", ")", ":", "\n", "        ", "super", "(", "SingleCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "\n", "reduction", "=", "reduction", ",", "ignore_index", "=", "ignore_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.SingleCrossEntropyLoss.forward": [[36, 38], ["criterions.SingleCrossEntropyLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "criterion", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__": [[43, 48], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "-", "100", ")", ":", "\n", "        ", "super", "(", "MultipCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.MultipCrossEntropyLoss.forward": [[49, 71], ["torch.LogSoftmax().to", "torch.LogSoftmax().to", "torch.LogSoftmax().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "torch.LogSoftmax().to.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.LogSoftmax().to.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "to", "(", "input", ".", "device", ")", "\n", "\n", "if", "self", ".", "ignore_index", ">=", "0", ":", "\n", "            ", "notice_index", "=", "[", "i", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "-", "1", "]", ")", "if", "i", "!=", "self", ".", "ignore_index", "]", "\n", "output", "=", "torch", ".", "sum", "(", "-", "target", "[", ":", ",", "notice_index", "]", "*", "logsoftmax", "(", "input", "[", ":", ",", "notice_index", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "output", "[", "target", "[", ":", ",", "self", ".", "ignore_index", "]", "!=", "1", "]", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "                ", "return", "torch", ".", "sum", "(", "output", "[", "target", "[", ":", ",", "self", ".", "ignore_index", "]", "!=", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "return", "output", "[", "target", "[", ":", ",", "self", ".", "ignore_index", "]", "!=", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "torch", ".", "sum", "(", "-", "target", "*", "logsoftmax", "(", "input", ")", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "reduction", "==", "'mean'", ":", "\n", "                ", "return", "torch", ".", "mean", "(", "output", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "                ", "return", "torch", ".", "sum", "(", "output", ")", "\n", "", "else", ":", "\n", "                ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.build_criterion": [[73, 83], ["RuntimeError"], "function", ["None"], ["", "", "", "", "def", "build_criterion", "(", "cfg", ",", "device", "=", "None", ")", ":", "\n", "    ", "criterion", "=", "{", "}", "\n", "for", "name", ",", "params", "in", "cfg", ".", "MODEL", ".", "CRITERIONS", ":", "\n", "        ", "if", "name", "in", "CRITERIONS", ":", "\n", "            ", "if", "'ignore_index'", "not", "in", "params", ":", "\n", "                ", "params", "[", "'ignore_index'", "]", "=", "cfg", ".", "DATA", ".", "IGNORE_INDEX", "\n", "", "criterion", "[", "name", "]", "=", "CRITERIONS", "[", "name", "]", "(", "**", "params", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Unknown criterion: {}'", ".", "format", "(", "name", ")", ")", "\n", "", "", "return", "criterion", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.postprocessing.postprocessing": [[7, 37], ["numpy.copy", "np.copy.reshape", "numpy.append().reshape", "numpy.append().reshape", "numpy.append().reshape", "numpy.append().reshape", "numpy.squeeze", "numpy.copy", "numpy.where", "numpy.max", "numpy.where", "numpy.append", "numpy.append", "numpy.append", "numpy.append", "numpy.concatenate", "prob[].reshape", "prob[].reshape"], "function", ["None"], ["def", "postprocessing", "(", "data_name", ")", ":", "\n", "\n", "    ", "def", "thumos_postprocessing", "(", "ground_truth", ",", "prediction", ",", "smooth", "=", "False", ",", "switch", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        We follow (Shou et al., 2017) and adopt their perframe postprocessing method on THUMOS'14 datset.\n        Source: https://bitbucket.org/columbiadvmm/cdc/src/master/THUMOS14/eval/PreFrameLabeling/compute_framelevel_mAP.m\n        \"\"\"", "\n", "\n", "# Simple temporal smoothing via NMS of 5-frames window", "\n", "if", "smooth", ":", "\n", "            ", "prob", "=", "np", ".", "copy", "(", "prediction", ")", "\n", "prob1", "=", "prob", ".", "reshape", "(", "1", ",", "prob", ".", "shape", "[", "0", "]", ",", "prob", ".", "shape", "[", "1", "]", ")", "\n", "prob2", "=", "np", ".", "append", "(", "prob", "[", "0", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "prob", "[", "0", ":", "-", "1", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "prob", ".", "shape", "[", "0", "]", ",", "prob", ".", "shape", "[", "1", "]", ")", "\n", "prob3", "=", "np", ".", "append", "(", "prob", "[", "1", ":", ",", ":", "]", ",", "prob", "[", "-", "1", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "prob", ".", "shape", "[", "0", "]", ",", "prob", ".", "shape", "[", "1", "]", ")", "\n", "prob4", "=", "np", ".", "append", "(", "prob", "[", "0", ":", "2", ",", ":", "]", ",", "prob", "[", "0", ":", "-", "2", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "prob", ".", "shape", "[", "0", "]", ",", "prob", ".", "shape", "[", "1", "]", ")", "\n", "prob5", "=", "np", ".", "append", "(", "prob", "[", "2", ":", ",", ":", "]", ",", "prob", "[", "-", "2", ":", ",", ":", "]", ",", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "prob", ".", "shape", "[", "0", "]", ",", "prob", ".", "shape", "[", "1", "]", ")", "\n", "probsmooth", "=", "np", ".", "squeeze", "(", "np", ".", "max", "(", "np", ".", "concatenate", "(", "(", "prob1", ",", "prob2", ",", "prob3", ",", "prob4", ",", "prob5", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ")", "\n", "prediction", "=", "np", ".", "copy", "(", "probsmooth", ")", "\n", "\n", "# Assign cliff diving (5) as diving (8)", "\n", "", "if", "switch", ":", "\n", "            ", "switch_index", "=", "np", ".", "where", "(", "prediction", "[", ":", ",", "5", "]", ">", "prediction", "[", ":", ",", "8", "]", ")", "[", "0", "]", "\n", "prediction", "[", "switch_index", ",", "8", "]", "=", "prediction", "[", "switch_index", ",", "5", "]", "\n", "\n", "# Remove ambiguous (21)", "\n", "", "valid_index", "=", "np", ".", "where", "(", "ground_truth", "[", ":", ",", "21", "]", "!=", "1", ")", "[", "0", "]", "\n", "\n", "return", "ground_truth", "[", "valid_index", "]", ",", "prediction", "[", "valid_index", "]", "\n", "\n", "", "return", "{", "'THUMOS'", ":", "thumos_postprocessing", "}", ".", "get", "(", "data_name", ",", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.evalution.eval_perframe": [[13, 26], ["compute_result.register", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "metrics.perframe_average_precision", "postprocessing.postprocessing"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.register", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.perframe_average_precision", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.postprocessing.postprocessing"], ["@", "compute_result", ".", "register", "(", "'perframe'", ")", "\n", "def", "eval_perframe", "(", "cfg", ",", "ground_truth", ",", "prediction", ",", "**", "kwargs", ")", ":", "\n", "    ", "class_names", "=", "kwargs", ".", "get", "(", "'class_names'", ",", "cfg", ".", "DATA", ".", "CLASS_NAMES", ")", "\n", "ignore_index", "=", "kwargs", ".", "get", "(", "'ignore_index'", ",", "cfg", ".", "DATA", ".", "IGNORE_INDEX", ")", "\n", "metrics", "=", "kwargs", ".", "get", "(", "'metrics'", ",", "cfg", ".", "DATA", ".", "METRICS", ")", "\n", "postprocessing", "=", "kwargs", ".", "get", "(", "'postprocessing'", ",", "default_pp", "(", "cfg", ".", "DATA", ".", "DATA_NAME", ")", ")", "\n", "return", "perframe_average_precision", "(", "\n", "ground_truth", "=", "ground_truth", ",", "\n", "prediction", "=", "prediction", ",", "\n", "class_names", "=", "class_names", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "metrics", ",", "\n", "postprocessing", "=", "postprocessing", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.evalution.eval_perstage": [[29, 42], ["compute_result.register", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "metrics.perstage_average_precision", "postprocessing.postprocessing"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.register", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.perstage_average_precision", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.postprocessing.postprocessing"], ["", "@", "compute_result", ".", "register", "(", "'perstage'", ")", "\n", "def", "eval_perstage", "(", "cfg", ",", "ground_truth", ",", "prediction", ",", "**", "kwargs", ")", ":", "\n", "    ", "class_names", "=", "kwargs", ".", "get", "(", "'class_names'", ",", "cfg", ".", "DATA", ".", "CLASS_NAMES", ")", "\n", "ignore_index", "=", "kwargs", ".", "get", "(", "'ignore_index'", ",", "cfg", ".", "DATA", ".", "IGNORE_INDEX", ")", "\n", "metrics", "=", "kwargs", ".", "get", "(", "'metrics'", ",", "cfg", ".", "DATA", ".", "METRICS", ")", "\n", "postprocessing", "=", "kwargs", ".", "get", "(", "'postprocessing'", ",", "default_pp", "(", "cfg", ".", "DATA", ".", "DATA_NAME", ")", ")", "\n", "return", "perstage_average_precision", "(", "\n", "ground_truth", "=", "ground_truth", ",", "\n", "prediction", "=", "prediction", ",", "\n", "class_names", "=", "class_names", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "metrics", ",", "\n", "postprocessing", "=", "postprocessing", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.calibrated_average_precision_score": [[11, 24], ["y_true_sorted.astype", "numpy.abs", "numpy.cumsum", "numpy.cumsum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.argsort", "y_true_sorted.astype", "numpy.finfo", "numpy.finfo"], "function", ["None"], ["def", "calibrated_average_precision_score", "(", "y_true", ",", "y_score", ")", ":", "\n", "    ", "\"\"\"Compute calibrated average precision (cAP), which is particularly\n    proposed for the TVSeries dataset.\n    \"\"\"", "\n", "y_true_sorted", "=", "y_true", "[", "np", ".", "argsort", "(", "-", "y_score", ")", "]", "\n", "tp", "=", "y_true_sorted", ".", "astype", "(", "float", ")", "\n", "fp", "=", "np", ".", "abs", "(", "y_true_sorted", ".", "astype", "(", "float", ")", "-", "1", ")", "\n", "tps", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "fps", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "ratio", "=", "np", ".", "sum", "(", "tp", "==", "0", ")", "/", "np", ".", "sum", "(", "tp", ")", "\n", "cprec", "=", "tps", "/", "(", "tps", "+", "fps", "/", "(", "ratio", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "cap", "=", "np", ".", "sum", "(", "cprec", "[", "tp", "==", "1", "]", ")", "/", "np", ".", "sum", "(", "tp", ")", "\n", "return", "cap", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.perframe_average_precision": [[26, 64], ["collections.OrderedDict", "numpy.array", "numpy.array", "set", "collections.OrderedDict", "enumerate", "numpy.mean", "postprocessing", "list", "RuntimeError", "numpy.any", "result[].values", "compute_score"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.postprocessing.postprocessing"], ["", "def", "perframe_average_precision", "(", "ground_truth", ",", "\n", "prediction", ",", "\n", "class_names", ",", "\n", "ignore_index", ",", "\n", "metrics", ",", "\n", "postprocessing", ")", ":", "\n", "    ", "\"\"\"Compute (frame-level) average precision between ground truth and\n    predictions data frames.\n    \"\"\"", "\n", "result", "=", "OrderedDict", "(", ")", "\n", "ground_truth", "=", "np", ".", "array", "(", "ground_truth", ")", "\n", "prediction", "=", "np", ".", "array", "(", "prediction", ")", "\n", "\n", "# Postprocessing", "\n", "if", "postprocessing", "is", "not", "None", ":", "\n", "        ", "ground_truth", ",", "prediction", "=", "postprocessing", "(", "ground_truth", ",", "prediction", ")", "\n", "\n", "# Build metrics", "\n", "", "if", "metrics", "==", "'AP'", ":", "\n", "        ", "compute_score", "=", "average_precision_score", "\n", "", "elif", "metrics", "==", "'cAP'", ":", "\n", "        ", "compute_score", "=", "calibrated_average_precision_score", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown metrics: {}'", ".", "format", "(", "metrics", ")", ")", "\n", "\n", "# Ignore backgroud class", "\n", "", "ignore_index", "=", "set", "(", "[", "0", ",", "ignore_index", "]", ")", "\n", "\n", "# Compute average precision", "\n", "result", "[", "'per_class_AP'", "]", "=", "OrderedDict", "(", ")", "\n", "for", "idx", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "        ", "if", "idx", "not", "in", "ignore_index", ":", "\n", "            ", "if", "np", ".", "any", "(", "ground_truth", "[", ":", ",", "idx", "]", ")", ":", "\n", "                ", "result", "[", "'per_class_AP'", "]", "[", "class_name", "]", "=", "compute_score", "(", "\n", "ground_truth", "[", ":", ",", "idx", "]", ",", "prediction", "[", ":", ",", "idx", "]", ")", "\n", "", "", "", "result", "[", "'mean_AP'", "]", "=", "np", ".", "mean", "(", "list", "(", "result", "[", "'per_class_AP'", "]", ".", "values", "(", ")", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.get_stage_pred_scores": [[66, 90], ["range", "range", "len", "len", "len", "ValueError", "max", "len", "stage_gt_targets.extend", "stage_pred_scores.extend", "numpy.array", "numpy.array", "stage_gt_targets.append", "stage_pred_scores.append", "range", "int", "range", "range", "starts.append", "ends.append", "len", "len", "int", "len", "len"], "function", ["None"], ["", "def", "get_stage_pred_scores", "(", "gt_targets", ",", "pred_scores", ",", "perc_s", ",", "perc_e", ")", ":", "\n", "    ", "starts", "=", "[", "]", "\n", "ends", "=", "[", "]", "\n", "stage_gt_targets", "=", "[", "]", "\n", "stage_pred_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_targets", ")", ")", ":", "\n", "        ", "if", "gt_targets", "[", "i", "]", "==", "0", ":", "\n", "            ", "stage_gt_targets", ".", "append", "(", "gt_targets", "[", "i", "]", ")", "\n", "stage_pred_scores", ".", "append", "(", "pred_scores", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "i", "==", "0", "or", "gt_targets", "[", "i", "-", "1", "]", "==", "0", ":", "\n", "                ", "starts", ".", "append", "(", "i", ")", "\n", "", "if", "i", "==", "len", "(", "gt_targets", ")", "-", "1", "or", "gt_targets", "[", "i", "+", "1", "]", "==", "0", ":", "\n", "                ", "ends", ".", "append", "(", "i", ")", "\n", "", "", "", "if", "len", "(", "starts", ")", "!=", "len", "(", "ends", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'starts and ends cannot pair!'", ")", "\n", "\n", "", "action_lens", "=", "[", "ends", "[", "i", "]", "-", "starts", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "starts", ")", ")", "]", "\n", "stage_starts", "=", "[", "starts", "[", "i", "]", "+", "int", "(", "action_lens", "[", "i", "]", "*", "perc_s", ")", "for", "i", "in", "range", "(", "len", "(", "starts", ")", ")", "]", "\n", "stage_ends", "=", "[", "max", "(", "stage_starts", "[", "i", "]", "+", "1", ",", "starts", "[", "i", "]", "+", "int", "(", "action_lens", "[", "i", "]", "*", "perc_e", ")", ")", "for", "i", "in", "range", "(", "len", "(", "starts", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "starts", ")", ")", ":", "\n", "        ", "stage_gt_targets", ".", "extend", "(", "gt_targets", "[", "stage_starts", "[", "i", "]", ":", "stage_ends", "[", "i", "]", "]", ")", "\n", "stage_pred_scores", ".", "extend", "(", "pred_scores", "[", "stage_starts", "[", "i", "]", ":", "stage_ends", "[", "i", "]", "]", ")", "\n", "", "return", "np", ".", "array", "(", "stage_gt_targets", ")", ",", "np", ".", "array", "(", "stage_pred_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.perstage_average_precision": [[92, 136], ["collections.OrderedDict", "numpy.array", "numpy.array", "set", "range", "postprocessing", "collections.OrderedDict", "enumerate", "numpy.mean", "RuntimeError", "list", "collections.OrderedDict", "metrics.get_stage_pred_scores", "compute_score", "[].values"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.postprocessing.postprocessing", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.evaluation.metrics.get_stage_pred_scores"], ["", "def", "perstage_average_precision", "(", "ground_truth", ",", "\n", "prediction", ",", "\n", "class_names", ",", "\n", "ignore_index", ",", "\n", "metrics", ",", "\n", "postprocessing", ")", ":", "\n", "    ", "result", "=", "OrderedDict", "(", ")", "\n", "ground_truth", "=", "np", ".", "array", "(", "ground_truth", ")", "\n", "prediction", "=", "np", ".", "array", "(", "prediction", ")", "\n", "\n", "# Postprocessing", "\n", "if", "postprocessing", "is", "not", "None", ":", "\n", "        ", "ground_truth", ",", "prediction", "=", "postprocessing", "(", "ground_truth", ",", "prediction", ")", "\n", "\n", "# Build metrics", "\n", "", "if", "metrics", "==", "'AP'", ":", "\n", "        ", "compute_score", "=", "average_precision_score", "\n", "", "elif", "metrics", "==", "'cAP'", ":", "\n", "        ", "compute_score", "=", "calibrated_average_precision_score", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Unknown metrics: {}'", ".", "format", "(", "metrics", ")", ")", "\n", "\n", "# Ignore backgroud class", "\n", "", "ignore_index", "=", "set", "(", "[", "0", ",", "ignore_index", "]", ")", "\n", "\n", "# Compute average precision", "\n", "for", "perc_s", "in", "range", "(", "10", ")", ":", "\n", "        ", "perc_e", "=", "perc_s", "+", "1", "\n", "stage_name", "=", "'{:2}%_{:3}%'", ".", "format", "(", "perc_s", "*", "10", ",", "perc_e", "*", "10", ")", "\n", "result", "[", "stage_name", "]", "=", "OrderedDict", "(", "{", "'per_class_AP'", ":", "OrderedDict", "(", ")", "}", ")", "\n", "for", "idx", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "            ", "if", "idx", "not", "in", "ignore_index", ":", "\n", "                ", "stage_gt_targets", ",", "stage_pred_scores", "=", "get_stage_pred_scores", "(", "\n", "(", "ground_truth", "[", ":", ",", "idx", "]", "==", "1", ")", ".", "astype", "(", "int", ")", ",", "\n", "prediction", "[", ":", ",", "idx", "]", ",", "\n", "perc_s", "/", "10", ",", "\n", "perc_e", "/", "10", ",", "\n", ")", "\n", "result", "[", "stage_name", "]", "[", "'per_class_AP'", "]", "[", "class_name", "]", "=", "compute_score", "(", "stage_gt_targets", ",", "stage_pred_scores", ")", "\n", "", "", "result", "[", "stage_name", "]", "[", "'mean_AP'", "]", "=", "np", ".", "mean", "(", "list", "(", "result", "[", "stage_name", "]", "[", "'per_class_AP'", "]", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.engines.engines.do_train": [[10, 29], ["None"], "function", ["None"], ["def", "do_train", "(", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ")", ":", "\n", "    ", "return", "TRAINERS", "[", "cfg", ".", "MODEL", ".", "MODEL_NAME", "]", "(", "\n", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.engines.engines.do_inference": [[31, 40], ["None"], "function", ["None"], ["", "def", "do_inference", "(", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ")", ":", "\n", "    ", "return", "INFERENCES", "[", "cfg", ".", "MODEL", ".", "MODEL_NAME", "]", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.base_trainers.perframe_det_trainer.do_perframe_det_train": [[13, 96], ["range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "time.time", "time.time", "log.append", "log.append", "log.append", "logger.info", "checkpointer.save", "data_loaders[].dataset.shuffle", "nn.DataParallel.train", "log.append", "torch.set_grad_enabled", "torch.set_grad_enabled", "tqdm.tqdm", "enumerate", "data[].to", "nn.DataParallel.", "det_score.softmax().cpu().tolist.reshape", "det_target.cpu().tolist.reshape", "tqdm.tqdm.set_postfix", "len", "det_loss.item", "optimizer.zero_grad", "det_loss.backward", "optimizer.step", "scheduler.step", "det_score.softmax().cpu().tolist.softmax().cpu().tolist", "det_target.cpu().tolist.cpu().tolist", "det_pred_scores.extend", "det_gt_targets.extend", "len", "phase.capitalize", "x.to", "det_loss.item", "det_score.softmax().cpu().tolist.softmax().cpu", "det_target.cpu().tolist.cpu", "scheduler.get_last_lr", "det_score.softmax().cpu().tolist.softmax"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.save", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.perframe_data_layers.LSTRDataLayer.shuffle"], ["def", "do_perframe_det_train", "(", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ")", ":", "\n", "# Setup model on multiple GPUs", "\n", "    ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "cfg", ".", "SOLVER", ".", "START_EPOCH", ",", "cfg", ".", "SOLVER", ".", "START_EPOCH", "+", "cfg", ".", "SOLVER", ".", "NUM_EPOCHS", ")", ":", "\n", "# Reset", "\n", "        ", "det_losses", "=", "{", "phase", ":", "0.0", "for", "phase", "in", "cfg", ".", "SOLVER", ".", "PHASES", "}", "\n", "det_pred_scores", "=", "[", "]", "\n", "det_gt_targets", "=", "[", "]", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "phase", "in", "cfg", ".", "SOLVER", ".", "PHASES", ":", "\n", "            ", "training", "=", "phase", "==", "'train'", "\n", "model", ".", "train", "(", "training", ")", "\n", "\n", "with", "torch", ".", "set_grad_enabled", "(", "training", ")", ":", "\n", "                ", "pbar", "=", "tqdm", "(", "data_loaders", "[", "phase", "]", ",", "\n", "desc", "=", "'{}ing epoch {}'", ".", "format", "(", "phase", ".", "capitalize", "(", ")", ",", "epoch", ")", ")", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "pbar", ",", "start", "=", "1", ")", ":", "\n", "                    ", "batch_size", "=", "data", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "det_target", "=", "data", "[", "-", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "det_score", "=", "model", "(", "*", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "data", "[", ":", "-", "1", "]", "]", ")", "\n", "det_score", "=", "det_score", ".", "reshape", "(", "-", "1", ",", "cfg", ".", "DATA", ".", "NUM_CLASSES", ")", "\n", "det_target", "=", "det_target", ".", "reshape", "(", "-", "1", ",", "cfg", ".", "DATA", ".", "NUM_CLASSES", ")", "\n", "det_loss", "=", "criterion", "[", "'MCE'", "]", "(", "det_score", ",", "det_target", ")", "\n", "det_losses", "[", "phase", "]", "+=", "det_loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "# Output log for current batch", "\n", "pbar", ".", "set_postfix", "(", "{", "\n", "'lr'", ":", "'{:.7f}'", ".", "format", "(", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", ",", "\n", "'det_loss'", ":", "'{:.5f}'", ".", "format", "(", "det_loss", ".", "item", "(", ")", ")", ",", "\n", "}", ")", "\n", "\n", "if", "training", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "det_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "# Prepare for evaluation", "\n", "                        ", "det_score", "=", "det_score", ".", "softmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "det_target", "=", "det_target", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "det_pred_scores", ".", "extend", "(", "det_score", ")", "\n", "det_gt_targets", ".", "extend", "(", "det_target", ")", "\n", "", "", "", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Output log for current epoch", "\n", "log", "=", "[", "]", "\n", "log", ".", "append", "(", "'Epoch {:2}'", ".", "format", "(", "epoch", ")", ")", "\n", "log", ".", "append", "(", "'train det_loss: {:.5f}'", ".", "format", "(", "\n", "det_losses", "[", "'train'", "]", "/", "len", "(", "data_loaders", "[", "'train'", "]", ".", "dataset", ")", ",", "\n", ")", ")", "\n", "if", "'test'", "in", "cfg", ".", "SOLVER", ".", "PHASES", ":", "\n", "# Compute result", "\n", "            ", "det_result", "=", "compute_result", "[", "'perframe'", "]", "(", "\n", "cfg", ",", "\n", "det_gt_targets", ",", "\n", "det_pred_scores", ",", "\n", ")", "\n", "log", ".", "append", "(", "'test det_loss: {:.5f} det_mAP: {:.5f}'", ".", "format", "(", "\n", "det_losses", "[", "'test'", "]", "/", "len", "(", "data_loaders", "[", "'test'", "]", ".", "dataset", ")", ",", "\n", "det_result", "[", "'mean_AP'", "]", ",", "\n", ")", ")", "\n", "", "log", ".", "append", "(", "'running time: {:.2f} sec'", ".", "format", "(", "\n", "end", "-", "start", ",", "\n", ")", ")", "\n", "logger", ".", "info", "(", "' | '", ".", "join", "(", "log", ")", ")", "\n", "\n", "# Save checkpoint for model and optimizer", "\n", "checkpointer", ".", "save", "(", "epoch", ",", "model", ",", "optimizer", ")", "\n", "\n", "# Shuffle dataset for next epoch", "\n", "data_loaders", "[", "'train'", "]", ".", "dataset", ".", "shuffle", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.base_inferences.perframe_det_batch_inference.do_perframe_det_batch_inference": [[16, 67], ["model.eval", "torch.utils.data.DataLoader", "pickle.dump", "logger.info", "torch.no_grad", "tqdm.tqdm", "enumerate", "open", "numpy.concatenate", "numpy.concatenate", "rekognition_online_action_detection.datasets.build_dataset", "model", "score.softmax().cpu().numpy.softmax().cpu().numpy", "enumerate", "list", "list", "zip", "gt_targets.values", "pred_scores.values", "score.softmax().cpu().numpy.softmax().cpu", "numpy.zeros", "numpy.zeros", "os.splitext", "x.to", "score.softmax().cpu().numpy.softmax"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.datasets.build_dataset"], ["def", "do_perframe_det_batch_inference", "(", "cfg", ",", "model", ",", "device", ",", "logger", ")", ":", "\n", "# Setup model to test mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "build_dataset", "(", "cfg", ",", "phase", "=", "'test'", ",", "tag", "=", "'BatchInference'", ")", ",", "\n", "batch_size", "=", "cfg", ".", "DATA_LOADER", ".", "BATCH_SIZE", "*", "16", ",", "\n", "num_workers", "=", "cfg", ".", "DATA_LOADER", ".", "NUM_WORKERS", ",", "\n", "pin_memory", "=", "cfg", ".", "DATA_LOADER", ".", "PIN_MEMORY", ",", "\n", ")", "\n", "\n", "# Collect scores and targets", "\n", "pred_scores", "=", "{", "}", "\n", "gt_targets", "=", "{", "}", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "data_loader", ",", "desc", "=", "'BatchInference'", ")", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "pbar", ",", "start", "=", "1", ")", ":", "\n", "            ", "target", "=", "data", "[", "-", "4", "]", "\n", "\n", "score", "=", "model", "(", "*", "[", "x", ".", "to", "(", "device", ")", "for", "x", "in", "data", "[", ":", "-", "4", "]", "]", ")", "\n", "score", "=", "score", ".", "softmax", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "bs", ",", "(", "session", ",", "query_indices", ",", "num_frames", ")", "in", "enumerate", "(", "zip", "(", "*", "data", "[", "-", "3", ":", "]", ")", ")", ":", "\n", "                ", "if", "session", "not", "in", "pred_scores", ":", "\n", "                    ", "pred_scores", "[", "session", "]", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "cfg", ".", "DATA", ".", "NUM_CLASSES", ")", ")", "\n", "", "if", "session", "not", "in", "gt_targets", ":", "\n", "                    ", "gt_targets", "[", "session", "]", "=", "np", ".", "zeros", "(", "(", "num_frames", ",", "cfg", ".", "DATA", ".", "NUM_CLASSES", ")", ")", "\n", "\n", "", "if", "query_indices", "[", "0", "]", "==", "0", ":", "\n", "                    ", "pred_scores", "[", "session", "]", "[", "query_indices", "]", "=", "score", "[", "bs", "]", "\n", "gt_targets", "[", "session", "]", "[", "query_indices", "]", "=", "target", "[", "bs", "]", "\n", "", "else", ":", "\n", "                    ", "pred_scores", "[", "session", "]", "[", "query_indices", "[", "-", "1", "]", "]", "=", "score", "[", "bs", "]", "[", "-", "1", "]", "\n", "gt_targets", "[", "session", "]", "[", "query_indices", "[", "-", "1", "]", "]", "=", "target", "[", "bs", "]", "[", "-", "1", "]", "\n", "\n", "# Save scores and targets", "\n", "", "", "", "", "pkl", ".", "dump", "(", "{", "\n", "'cfg'", ":", "cfg", ",", "\n", "'perframe_pred_scores'", ":", "pred_scores", ",", "\n", "'perframe_gt_targets'", ":", "gt_targets", ",", "\n", "}", ",", "open", "(", "osp", ".", "splitext", "(", "cfg", ".", "MODEL", ".", "CHECKPOINT", ")", "[", "0", "]", "+", "'.pkl'", ",", "'wb'", ")", ")", "\n", "\n", "# Compute results", "\n", "result", "=", "compute_result", "[", "'perframe'", "]", "(", "\n", "cfg", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "gt_targets", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "pred_scores", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'Action detection perframe m{}: {:.5f}'", ".", "format", "(", "\n", "cfg", ".", "DATA", ".", "METRICS", ",", "result", "[", "'mean_AP'", "]", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.lstr.lstr_inference.do_lstr_batch_inference": [[17, 32], ["engines.INFERENCES.register", "lstr_inference.do_lstr_stream_inference", "base_inferences.perframe_det_batch_inference.do_perframe_det_batch_inference"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.register", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.lstr.lstr_inference.do_lstr_stream_inference", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.base_inferences.perframe_det_batch_inference.do_perframe_det_batch_inference"], ["@", "registry", ".", "register", "(", "'LSTR'", ")", "\n", "def", "do_lstr_batch_inference", "(", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ")", ":", "\n", "    ", "if", "cfg", ".", "MODEL", ".", "LSTR", ".", "INFERENCE_MODE", "==", "'stream'", ":", "\n", "        ", "do_lstr_stream_inference", "(", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ")", "\n", "", "else", ":", "\n", "        ", "do_perframe_det_batch_inference", "(", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.lstr.lstr_inference.do_lstr_stream_inference": [[34, 119], ["model.eval", "torch.as_tensor().unsqueeze().to", "len", "RuntimeError", "torch.no_grad", "enumerate", "numpy.load", "numpy.load", "numpy.load", "time.time", "zip", "logger.info", "time.time", "logger.info", "torch.as_tensor().unsqueeze", "os.join", "os.join", "os.join", "range", "range", "numpy.arange().clip", "lstr_inference.do_lstr_stream_inference.to_device"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["", "", "def", "do_lstr_stream_inference", "(", "cfg", ",", "model", ",", "device", ",", "logger", ")", ":", "\n", "# Setup model to test mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "# Collect scores and targets", "\n", "pred_scores", "=", "[", "]", "\n", "gt_targets", "=", "[", "]", "\n", "\n", "def", "to_device", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "return", "torch", ".", "as_tensor", "(", "x", ".", "astype", "(", "dtype", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "long_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_LENGTH", "\n", "long_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_SAMPLE_RATE", "\n", "long_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "LONG_MEMORY_NUM_SAMPLES", "\n", "work_memory_length", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_LENGTH", "\n", "work_memory_sample_rate", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_SAMPLE_RATE", "\n", "work_memory_num_samples", "=", "cfg", ".", "MODEL", ".", "LSTR", ".", "WORK_MEMORY_NUM_SAMPLES", "\n", "\n", "if", "len", "(", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", ")", "!=", "1", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Only support testing one video each time for stream inference, will fix later'", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "session_idx", ",", "session", "in", "enumerate", "(", "cfg", ".", "DATA", ".", "TEST_SESSION_SET", ")", ":", "\n", "            ", "visual_inputs", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "cfg", ".", "DATA", ".", "DATA_ROOT", ",", "cfg", ".", "INPUT", ".", "VISUAL_FEATURE", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "motion_inputs", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "cfg", ".", "DATA", ".", "DATA_ROOT", ",", "cfg", ".", "INPUT", ".", "MOTION_FEATURE", ",", "session", "+", "'.npy'", ")", ",", "mmap_mode", "=", "'r'", ")", "\n", "target", "=", "np", ".", "load", "(", "osp", ".", "join", "(", "cfg", ".", "DATA", ".", "DATA_ROOT", ",", "cfg", ".", "INPUT", ".", "TARGET_PERFRAME", ",", "session", "+", "'.npy'", ")", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "work_start", ",", "work_end", "in", "zip", "(", "range", "(", "0", ",", "target", ".", "shape", "[", "0", "]", "+", "1", ")", ",", "\n", "range", "(", "work_memory_length", ",", "target", ".", "shape", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "# Get target", "\n", "                ", "target", "=", "target", "[", ":", ":", "work_memory_sample_rate", "]", "\n", "\n", "# Get work memory", "\n", "work_indices", "=", "np", ".", "arange", "(", "work_start", ",", "work_end", ")", ".", "clip", "(", "0", ")", "\n", "work_indices", "=", "work_indices", "[", ":", ":", "work_memory_sample_rate", "]", "\n", "work_visual_inputs", "=", "to_device", "(", "visual_inputs", "[", "work_indices", "]", ")", "\n", "work_motion_inputs", "=", "to_device", "(", "motion_inputs", "[", "work_indices", "]", ")", "\n", "\n", "# Get long memory", "\n", "long_end", "=", "work_start", "-", "1", "\n", "if", "long_end", "==", "-", "1", ":", "\n", "                    ", "long_indices", "=", "[", "0", "for", "_", "in", "range", "(", "long_memory_num_samples", ")", "]", "\n", "long_visual_inputs", "=", "to_device", "(", "visual_inputs", "[", "long_indices", "]", ")", "\n", "long_motion_inputs", "=", "to_device", "(", "motion_inputs", "[", "long_indices", "]", ")", "\n", "", "elif", "long_end", "%", "long_memory_sample_rate", "==", "0", ":", "\n", "                    ", "long_indices", "=", "long_indices", "[", "1", ":", "]", "+", "[", "long_end", "]", "\n", "long_visual_inputs", "=", "to_device", "(", "visual_inputs", "[", "[", "long_end", "]", "]", ")", "\n", "long_motion_inputs", "=", "to_device", "(", "motion_inputs", "[", "[", "long_end", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "long_visual_inputs", "=", "None", "\n", "long_motion_inputs", "=", "None", "\n", "\n", "# Get memory key padding mask", "\n", "", "memory_key_padding_mask", "=", "np", ".", "zeros", "(", "len", "(", "long_indices", ")", ")", "\n", "last_zero", "=", "bisect_right", "(", "long_indices", ",", "0", ")", "-", "1", "\n", "if", "last_zero", ">", "0", ":", "\n", "                    ", "memory_key_padding_mask", "[", ":", "last_zero", "]", "=", "float", "(", "'-inf'", ")", "\n", "", "memory_key_padding_mask", "=", "torch", ".", "as_tensor", "(", "memory_key_padding_mask", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "\n", "score", "=", "model", ".", "stream_inference", "(", "\n", "long_visual_inputs", ",", "\n", "long_motion_inputs", ",", "\n", "work_visual_inputs", ",", "\n", "work_motion_inputs", ",", "\n", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "score", "=", "score", ".", "softmax", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "work_start", "==", "0", ":", "\n", "                    ", "gt_targets", ".", "extend", "(", "list", "(", "target", "[", ":", "work_end", "]", ")", ")", "\n", "pred_scores", ".", "extend", "(", "list", "(", "score", ")", ")", "\n", "", "else", ":", "\n", "                    ", "gt_targets", ".", "append", "(", "list", "(", "target", "[", "work_end", "-", "1", "]", ")", ")", "\n", "pred_scores", ".", "append", "(", "list", "(", "score", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "", "result", "=", "compute_result", "[", "'perframe'", "]", "(", "\n", "cfg", ",", "\n", "gt_targets", ",", "\n", "pred_scores", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'mAP of video {}: {:.5f}'", ".", "format", "(", "session", ",", "result", "[", "'mean_AP'", "]", ")", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'Running time: {:.3f} seconds'", ".", "format", "(", "end_time", "-", "start_time", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.lstr.lstr_trainer.do_lstr_train": [[8, 27], ["engines.TRAINERS.register", "base_trainers.perframe_det_trainer.do_perframe_det_train"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.registry.Registry.register", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.base_trainers.perframe_det_trainer.do_perframe_det_train"], ["@", "registry", ".", "register", "(", "'LSTR'", ")", "\n", "def", "do_lstr_train", "(", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ")", ":", "\n", "    ", "do_perframe_det_train", "(", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.tools.test_net.main": [[12, 29], ["rekognition_online_action_detection.utils.env.setup_environment", "rekognition_online_action_detection.utils.checkpointer.setup_checkpointer", "rekognition_online_action_detection.utils.logger.setup_logger", "rekognition_online_action_detection.models.build_model", "rekognition_online_action_detection.utils.checkpointer.setup_checkpointer.load", "rekognition_online_action_detection.engines.do_inference"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.env.setup_environment", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.setup_checkpointer", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.logger.setup_logger", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.models.build_model", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.engines.engines.do_inference"], ["def", "main", "(", "cfg", ")", ":", "\n", "# Setup configurations", "\n", "    ", "device", "=", "setup_environment", "(", "cfg", ")", "\n", "checkpointer", "=", "setup_checkpointer", "(", "cfg", ",", "phase", "=", "'test'", ")", "\n", "logger", "=", "setup_logger", "(", "cfg", ",", "phase", "=", "'test'", ")", "\n", "\n", "# Build model", "\n", "model", "=", "build_model", "(", "cfg", ",", "device", ")", "\n", "\n", "# Load pretrained model", "\n", "checkpointer", ".", "load", "(", "model", ")", "\n", "\n", "do_inference", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "device", ",", "\n", "logger", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.tools.train_net.main": [[16, 54], ["rekognition_online_action_detection.utils.env.setup_environment", "rekognition_online_action_detection.utils.checkpointer.setup_checkpointer", "rekognition_online_action_detection.utils.logger.setup_logger", "rekognition_online_action_detection.models.build_model", "rekognition_online_action_detection.criterions.build_criterion", "rekognition_online_action_detection.optimizers.build_optimizer", "rekognition_online_action_detection.utils.checkpointer.setup_checkpointer.load", "rekognition_online_action_detection.optimizers.build_scheduler", "rekognition_online_action_detection.engines.do_train", "rekognition_online_action_detection.datasets.build_data_loader", "len"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.env.setup_environment", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.setup_checkpointer", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.logger.setup_logger", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.models.models.build_model", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.criterions.criterions.build_criterion", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.optimizers.build_optimizer", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.optimizers.lr_scheduler.build_scheduler", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.engines.engines.do_train", "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.datasets.datasets.build_data_loader"], ["def", "main", "(", "cfg", ")", ":", "\n", "# Setup configurations", "\n", "    ", "device", "=", "setup_environment", "(", "cfg", ")", "\n", "checkpointer", "=", "setup_checkpointer", "(", "cfg", ",", "phase", "=", "'train'", ")", "\n", "logger", "=", "setup_logger", "(", "cfg", ",", "phase", "=", "'train'", ")", "\n", "\n", "# Build data loaders", "\n", "data_loaders", "=", "{", "\n", "phase", ":", "build_data_loader", "(", "cfg", ",", "phase", ")", "\n", "for", "phase", "in", "cfg", ".", "SOLVER", ".", "PHASES", "\n", "}", "\n", "\n", "# Build model", "\n", "model", "=", "build_model", "(", "cfg", ",", "device", ")", "\n", "\n", "# Build criterion", "\n", "criterion", "=", "build_criterion", "(", "cfg", ",", "device", ")", "\n", "\n", "# Build optimizer", "\n", "optimizer", "=", "build_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# Load pretrained model and optimizer", "\n", "checkpointer", ".", "load", "(", "model", ",", "optimizer", ")", "\n", "\n", "# Build scheduler", "\n", "scheduler", "=", "build_scheduler", "(", "\n", "cfg", ",", "optimizer", ",", "len", "(", "data_loaders", "[", "'train'", "]", ")", ")", "\n", "\n", "do_train", "(", "\n", "cfg", ",", "\n", "data_loaders", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "device", ",", "\n", "checkpointer", ",", "\n", "logger", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.eval.eval_perframe.eval_perframe": [[14, 28], ["pickle.load", "logging.info", "open", "numpy.concatenate", "numpy.concatenate", "list", "list", "perframe_gt_targets.values", "perframe_pred_scores.values"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["def", "eval_perframe", "(", "pred_scores_file", ")", ":", "\n", "    ", "pred_scores", "=", "pkl", ".", "load", "(", "open", "(", "pred_scores_file", ",", "'rb'", ")", ")", "\n", "cfg", "=", "pred_scores", "[", "'cfg'", "]", "\n", "perframe_gt_targets", "=", "pred_scores", "[", "'perframe_gt_targets'", "]", "\n", "perframe_pred_scores", "=", "pred_scores", "[", "'perframe_pred_scores'", "]", "\n", "\n", "# Compute results", "\n", "result", "=", "compute_result", "[", "'perframe'", "]", "(", "\n", "cfg", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "perframe_gt_targets", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "perframe_pred_scores", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n", "logging", ".", "info", "(", "'Action detection perframe m{}: {:.5f}'", ".", "format", "(", "\n", "cfg", ".", "DATA", ".", "METRICS", ",", "result", "[", "'mean_AP'", "]", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.eval.eval_perstage.eval_perstage": [[14, 29], ["pickle.load", "open", "numpy.concatenate", "numpy.concatenate", "logging.info", "list", "list", "perframe_gt_targets.values", "perframe_pred_scores.values"], "function", ["home.repos.pwc.inspect_result.amazon-research_long-short-term-transformer.utils.checkpointer.Checkpointer.load"], ["def", "eval_perstage", "(", "pred_scores_file", ")", ":", "\n", "    ", "pred_scores", "=", "pkl", ".", "load", "(", "open", "(", "pred_scores_file", ",", "'rb'", ")", ")", "\n", "cfg", "=", "pred_scores", "[", "'cfg'", "]", "\n", "perframe_gt_targets", "=", "pred_scores", "[", "'perframe_gt_targets'", "]", "\n", "perframe_pred_scores", "=", "pred_scores", "[", "'perframe_pred_scores'", "]", "\n", "\n", "# Compute results", "\n", "result", "=", "compute_result", "[", "'perstage'", "]", "(", "\n", "cfg", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "perframe_gt_targets", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "concatenate", "(", "list", "(", "perframe_pred_scores", ".", "values", "(", ")", ")", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n", "for", "stage_name", "in", "result", ":", "\n", "        ", "logging", ".", "info", "(", "'Perframe m{} of stage {}: {:.5f}'", ".", "format", "(", "\n", "cfg", ".", "DATA", ".", "METRICS", ",", "stage_name", ",", "result", "[", "stage_name", "]", "[", "'mean_AP'", "]", "\n", ")", ")", "\n"]]}