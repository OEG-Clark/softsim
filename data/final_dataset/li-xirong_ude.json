{"home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_anno_path": [[7, 10], ["os.path.join"], "function", ["None"], ["def", "get_anno_path", "(", "collection", ",", "domain", ",", "annotation_name", ",", "concept", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "anno_path", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'Annotations'", ",", "'Image'", ",", "annotation_name", ",", "domain", ",", "'%s.txt'", "%", "concept", ")", "\n", "return", "anno_path", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_pred_path": [[11, 15], ["os.path.join"], "function", ["None"], ["", "def", "get_pred_path", "(", "test_collection", ",", "domain", ",", "model_name", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "annotation_name", "=", "col2anno", "[", "test_collection", "]", "\n", "pred_path", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "test_collection", ",", "'Predictions'", ",", "annotation_name", ",", "domain", ",", "model_name", ",", "'id.concept.score.txt'", ")", "\n", "return", "pred_path", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_imset": [[16, 21], ["os.path.join", "x.strip", "len", "len", "open", "x.strip", "set"], "function", ["None"], ["", "def", "read_imset", "(", "collection", ",", "domain", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "imset_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'ImageSets'", ",", "'%s.txt'", "%", "domain", ")", "\n", "imset", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "imset_file", ")", "if", "x", ".", "strip", "(", ")", "]", "\n", "assert", "(", "len", "(", "set", "(", "imset", ")", ")", "==", "len", "(", "imset", ")", ")", "\n", "return", "imset", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_domain_list": [[23, 28], ["os.path.join", "x.strip", "len", "len", "open", "x.strip", "set"], "function", ["None"], ["", "def", "read_domain_list", "(", "collection", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "domain_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'Annotations'", ",", "'domains.txt'", ")", "\n", "domain_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "domain_file", ")", "if", "x", ".", "strip", "(", ")", "]", "\n", "assert", "(", "len", "(", "set", "(", "domain_list", ")", ")", "==", "len", "(", "domain_list", ")", ")", "\n", "return", "domain_list", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_concept_list": [[30, 35], ["os.path.join", "x.strip", "len", "len", "open().readlines", "x.strip", "set", "open"], "function", ["None"], ["", "def", "read_concept_list", "(", "collection", ",", "annotation_name", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "concept_file", "=", "os", ".", "path", ".", "join", "(", "rootpath", ",", "collection", ",", "'Annotations'", ",", "annotation_name", ")", "\n", "concepts", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "open", "(", "concept_file", ")", ".", "readlines", "(", ")", "if", "x", ".", "strip", "(", ")", "]", "\n", "assert", "(", "len", "(", "set", "(", "concepts", ")", ")", "==", "len", "(", "concepts", ")", ")", "\n", "return", "concepts", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_anno": [[37, 45], ["open", "line.strip().split", "pos_img_list.append", "len", "len", "int", "set", "line.strip"], "function", ["None"], ["", "def", "read_anno", "(", "anno_path", ")", ":", "\n", "    ", "pos_img_list", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "anno_path", ")", ":", "\n", "        ", "imgid", ",", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "assert", "(", "int", "(", "label", ")", "==", "1", ")", "\n", "pos_img_list", ".", "append", "(", "imgid", ")", "\n", "", "assert", "(", "len", "(", "set", "(", "pos_img_list", ")", ")", "==", "len", "(", "pos_img_list", ")", ")", "\n", "return", "pos_img_list", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_full_anno": [[47, 58], ["common.read_concept_list", "common.get_anno_path", "common.read_anno"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_concept_list", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_anno_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_anno"], ["", "def", "read_full_anno", "(", "collection", ",", "domain", ",", "annotation_name", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "concepts", "=", "read_concept_list", "(", "collection", ",", "annotation_name", ",", "rootpath", ")", "\n", "gt", "=", "{", "}", "\n", "\n", "for", "concept", "in", "concepts", ":", "\n", "        ", "anno_path", "=", "get_anno_path", "(", "collection", ",", "domain", ",", "annotation_name", ",", "concept", ",", "rootpath", ")", "\n", "pos_img_list", "=", "read_anno", "(", "anno_path", ")", "\n", "for", "im", "in", "pos_img_list", ":", "\n", "            ", "assert", "(", "im", "not", "in", "gt", ")", "\n", "gt", "[", "im", "]", "=", "concept", "\n", "", "", "return", "gt", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_pred": [[59, 67], ["open().readlines", "line.strip().split", "open", "line.strip"], "function", ["None"], ["", "def", "read_pred", "(", "pred_path", ")", ":", "\n", "    ", "lines", "=", "open", "(", "pred_path", ")", ".", "readlines", "(", ")", "\n", "pred", "=", "{", "}", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "imgid", ",", "concept", ",", "score", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "pred", "[", "imgid", "]", "=", "concept", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.common.compute_accuracy": [[68, 76], ["preds.items", "len", "len", "len"], "function", ["None"], ["", "def", "compute_accuracy", "(", "preds", ",", "gts", ")", ":", "\n", "    ", "assert", "(", "len", "(", "preds", ")", "==", "len", "(", "gts", ")", ")", "\n", "count", "=", "0.0", "\n", "for", "imgid", ",", "pred_y", "in", "preds", ".", "items", "(", ")", ":", "\n", "        ", "if", "pred_y", "==", "gts", "[", "imgid", "]", ":", "\n", "            ", "count", "=", "count", "+", "1", "\n", "", "", "accuracy", "=", "count", "/", "len", "(", "preds", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.eval_per_task.evaluate_per_task": [[14, 38], ["common.read_full_anno", "common.read_full_anno", "common.get_pred_path", "common.get_pred_path", "common.read_pred", "common.read_pred", "perf_table.append", "common.compute_accuracy", "common.compute_accuracy"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_full_anno", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_full_anno", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_pred_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_pred_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_pred", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_pred", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.compute_accuracy", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.compute_accuracy"], ["def", "evaluate_per_task", "(", "test_collection", ",", "source_domain", ",", "target_domain", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "networks", "=", "'ResNet50 DDC_ResNet50 CDAN_ResNet50 KDDE_DDC_ResNet50 KDDE_CDAN_ResNet50'", ".", "split", "(", ")", "\n", "anno_name", "=", "col2anno", "[", "test_collection", "]", "\n", "source_gts", "=", "read_full_anno", "(", "test_collection", ",", "source_domain", ",", "anno_name", ",", "rootpath", ")", "\n", "target_gts", "=", "read_full_anno", "(", "test_collection", ",", "target_domain", ",", "anno_name", ",", "rootpath", ")", "\n", "perf_table", "=", "[", "]", "\n", "\n", "for", "network", "in", "networks", ":", "\n", "        ", "if", "'ResNet50'", "==", "network", ":", "\n", "            ", "model_name", "=", "'_'", ".", "join", "(", "[", "network", ",", "source_domain", "]", ")", "\n", "", "else", ":", "\n", "            ", "model_name", "=", "'_'", ".", "join", "(", "[", "network", ",", "source_domain", ",", "target_domain", "]", ")", "\n", "\n", "", "source_pred_path", "=", "get_pred_path", "(", "test_collection", ",", "source_domain", ",", "model_name", ",", "rootpath", ")", "\n", "target_pred_path", "=", "get_pred_path", "(", "test_collection", ",", "target_domain", ",", "model_name", ",", "rootpath", ")", "\n", "\n", "source_preds", "=", "read_pred", "(", "source_pred_path", ")", "\n", "target_preds", "=", "read_pred", "(", "target_pred_path", ")", "\n", "source_accuracy", "=", "compute_accuracy", "(", "source_preds", ",", "source_gts", ")", "*", "100", "\n", "target_accuracy", "=", "compute_accuracy", "(", "target_preds", ",", "target_gts", ")", "*", "100", "\n", "expand_accuracy", "=", "(", "source_accuracy", "+", "target_accuracy", ")", "/", "2.0", "\n", "perf_table", ".", "append", "(", "(", "model_name", ",", "source_accuracy", ",", "target_accuracy", ",", "expand_accuracy", ")", ")", "\n", "\n", "", "return", "perf_table", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_anno": [[5, 20], ["common.read_concept_list", "common.read_imset", "set().intersection", "common.get_anno_path", "common.read_anno", "len", "len", "set", "len", "len", "len", "len", "set", "set", "common.ROOT_PATH"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_concept_list", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_imset", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_anno_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_anno"], ["def", "verify_anno", "(", "collection", ",", "domain", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "annotation_name", "=", "col2anno", "[", "collection", "]", "\n", "concepts", "=", "read_concept_list", "(", "collection", ",", "annotation_name", ",", "rootpath", ")", "\n", "pos_set", "=", "[", "]", "\n", "for", "concept", "in", "concepts", ":", "\n", "        ", "anno_path", "=", "get_anno_path", "(", "collection", ",", "domain", ",", "annotation_name", ",", "concept", ",", "rootpath", ")", "\n", "pos_img_list", "=", "read_anno", "(", "anno_path", ")", "\n", "pos_set", "+=", "pos_img_list", "\n", "\n", "# since it is a multi-class problem, there shall be overlap between positive sets of distinct concepts", "\n", "", "assert", "(", "len", "(", "set", "(", "pos_set", ")", ")", "==", "len", "(", "pos_set", ")", ")", "\n", "whole_set", "=", "read_imset", "(", "collection", ",", "domain", ",", "rootpath", ")", "\n", "common", "=", "set", "(", "pos_set", ")", ".", "intersection", "(", "set", "(", "whole_set", ")", ")", "\n", "assert", "(", "len", "(", "common", ")", "==", "len", "(", "pos_set", ")", ")", "\n", "assert", "(", "len", "(", "common", ")", "==", "len", "(", "whole_set", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_imsets": [[22, 35], ["common.read_domain_list", "common.read_imset", "set().intersection", "print", "common.read_imset", "print", "len", "len", "set", "len", "len", "set", "len", "len", "common.ROOT_PATH"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_domain_list", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_imset", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_imset"], ["", "def", "verify_imsets", "(", "collection", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "    ", "domain_list", "=", "read_domain_list", "(", "collection", ",", "rootpath", ")", "\n", "subset", "=", "[", "]", "\n", "for", "domain", "in", "domain_list", ":", "\n", "        ", "imset_per_domain", "=", "read_imset", "(", "collection", ",", "domain", ",", "rootpath", ")", "\n", "print", "(", "'%s, %s, %d images'", "%", "(", "collection", ",", "domain", ",", "len", "(", "imset_per_domain", ")", ")", ")", "\n", "subset", "+=", "imset_per_domain", "\n", "\n", "", "whole_set", "=", "read_imset", "(", "collection", ",", "collection", ",", "rootpath", ")", "\n", "assert", "(", "len", "(", "subset", ")", "==", "len", "(", "whole_set", ")", ")", "\n", "common", "=", "set", "(", "subset", ")", ".", "intersection", "(", "set", "(", "whole_set", ")", ")", "\n", "assert", "(", "len", "(", "common", ")", "==", "len", "(", "whole_set", ")", ")", "\n", "print", "(", "'%s -> %d images'", "%", "(", "collection", ",", "len", "(", "whole_set", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_pred": [[37, 44], ["common.read_pred", "common.read_imset", "set().intersection", "len", "len", "set", "len", "len", "set", "common.read_pred.keys"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_pred", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_imset"], ["", "def", "verify_pred", "(", "collection", ",", "domain", ",", "pred_path", ",", "rootpath", "=", "ROOT_PATH", ")", ":", "\n", "#print ('verifying (%s,%s) -> %s' % (collection, domain, pred_path))", "\n", "    ", "im2concept", "=", "read_pred", "(", "pred_path", ")", "\n", "testset", "=", "read_imset", "(", "collection", ",", "domain", ",", "rootpath", ")", "\n", "assert", "(", "len", "(", "im2concept", ")", "==", "len", "(", "testset", ")", ")", "\n", "common", "=", "set", "(", "im2concept", ".", "keys", "(", ")", ")", ".", "intersection", "(", "set", "(", "testset", ")", ")", "\n", "assert", "(", "len", "(", "common", ")", "==", "len", "(", "testset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_collections": [[46, 75], ["common.read_domain_list", "print", "print", "print", "print", "print", "sanity_check.verify_imsets", "common.get_pred_path", "sanity_check.verify_pred", "list", "list.remove", "sanity_check.verify_anno", "common.get_pred_path", "sanity_check.verify_pred"], "function", ["home.repos.pwc.inspect_result.li-xirong_ude.None.common.read_domain_list", "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_imsets", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_pred_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_pred", "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_anno", "home.repos.pwc.inspect_result.li-xirong_ude.None.common.get_pred_path", "home.repos.pwc.inspect_result.li-xirong_ude.None.sanity_check.verify_pred"], ["", "def", "verify_collections", "(", "collection_list", ")", ":", "\n", "    ", "networks", "=", "'DDC_ResNet50 CDAN_ResNet50 KDDE_DDC_ResNet50 KDDE_CDAN_ResNet50'", ".", "split", "(", ")", "\n", "\n", "test_collection", "=", "collection_list", "[", "1", "]", "\n", "domains", "=", "read_domain_list", "(", "test_collection", ",", "rootpath", "=", "ROOT_PATH", ")", "\n", "print", "(", "'Domains of %s: %s'", "%", "(", "test_collection", ",", "domains", ")", ")", "\n", "print", "(", "\"start check anno & imsets\"", ")", "\n", "for", "collection", "in", "collection_list", ":", "\n", "        ", "for", "domain", "in", "domains", ":", "\n", "            ", "verify_anno", "(", "collection", ",", "domain", ",", "ROOT_PATH", ")", "\n", "", "verify_imsets", "(", "collection", ",", "ROOT_PATH", ")", "\n", "", "print", "(", "\"ok, over\"", ")", "\n", "\n", "\n", "print", "(", "\"start check pred\"", ")", "\n", "\n", "for", "target_domain", "in", "domains", ":", "\n", "        ", "pred_path", "=", "get_pred_path", "(", "test_collection", ",", "target_domain", ",", "'ResNet50_%s'", "%", "target_domain", ",", "rootpath", "=", "ROOT_PATH", ")", "\n", "verify_pred", "(", "test_collection", ",", "target_domain", ",", "pred_path", ",", "rootpath", "=", "ROOT_PATH", ")", "\n", "\n", "source_domains", "=", "list", "(", "domains", ")", "\n", "source_domains", ".", "remove", "(", "target_domain", ")", "\n", "for", "network", "in", "networks", ":", "\n", "            ", "for", "src_domain", "in", "source_domains", ":", "\n", "                ", "model_name", "=", "'_'", ".", "join", "(", "[", "network", ",", "src_domain", ",", "target_domain", "]", ")", "\n", "pred_path", "=", "get_pred_path", "(", "test_collection", ",", "target_domain", ",", "model_name", ",", "rootpath", "=", "ROOT_PATH", ")", "\n", "verify_pred", "(", "test_collection", ",", "target_domain", ",", "pred_path", ",", "rootpath", "=", "ROOT_PATH", ")", "\n", "\n", "", "", "", "print", "(", "\"ok, over\"", ")", "\n", "\n"]]}