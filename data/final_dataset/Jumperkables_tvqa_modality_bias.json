{"home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.BaseOptions.__init__": [[13, 17], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "opt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.BaseOptions.initialize": [[18, 103], ["config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "config.BaseOptions.parser.add_argument", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"debug mode, break all loops\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--results_dir_base\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/.results/test\"", ")", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--log_freq\"", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "\"print, save training info\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "3e-4", ",", "help", "=", "\"learning rate\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "help", "=", "\"weight decay\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--n_epoch\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"number of epochs to run\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--max_es_cnt\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"number of epochs to early stop\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--bsz\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "\"mini-batch size\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--test_bsz\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"mini-batch size for testing\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"gpu ordinal, -1 indicates cpu\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_core_driver\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"hdf5 driver, default use `core` (load into RAM), if specified, use `None`\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--word_count_threshold\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"word vocabulary threshold\"", ")", "\n", "# model config", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_glove\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"not use glove vectors\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_ts\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"no timestep annotation, use full length feature\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--input_streams\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "choices", "=", "[", "\"vcpt\"", ",", "\"sub\"", ",", "\"imagenet\"", ",", "\"regional\"", "]", ",", "#added regional support here", "\n", "help", "=", "\"input streams for the model\"", ")", "\n", "\n", "################ Jumperkables's Additions and alterations", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--jobname\"", ",", "type", "=", "str", ",", "default", "=", "\"default_job_name\"", ",", "help", "=", "\"name of the job\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--modelname\"", ",", "type", "=", "str", ",", "default", "=", "\"tvqa_abc\"", ",", "help", "=", "\"name of the model ot use\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lrtype\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"adam\"", ",", "\"cyclic\"", ",", "\"radam\"", ",", "\"lrelu\"", "]", ",", "default", "=", "\"adam\"", ",", "help", "=", "\"Kind of learning rate\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--poolnonlin\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"tanh\"", ",", "\"relu\"", ",", "\"sigmoid\"", ",", "\"None\"", ",", "\"lrelu\"", "]", ",", "default", "=", "\"None\"", ",", "help", "=", "\"add nonlinearities to pooling layer\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pool_dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"Dropout value for the projections\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--testrun\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"set True to stop writing and visdom\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--topk\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"To use instead of max pooling\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--nosub\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Ignore the sub stream\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--noimg\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Ignore the imgnet stream\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--noqs\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"dont use questions, only answers\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pool_type\"", ",", "type", "=", "str", ",", "default", "=", "\"default\"", ",", "choices", "=", "[", "\"default\"", ",", "\"LinearSum\"", ",", "\"ConcatMLP\"", ",", "\"MCB\"", ",", "\"MFH\"", ",", "\"MFB\"", ",", "\"MLB\"", ",", "\"Block\"", ",", "\"Tucker\"", ",", "\"BlockTucker\"", ",", "\"Mutan\"", "]", ",", "help", "=", "\"Which pooling technique to use\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pool_in_dims\"", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "300", ",", "300", "]", ",", "help", "=", "\"Input dimensions to pooling layers\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pool_out_dim\"", ",", "type", "=", "int", ",", "default", "=", "600", ",", "help", "=", "\"Output dimension to pooling layers\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--pool_hidden_dim\"", ",", "type", "=", "int", ",", "default", "=", "1500", ",", "help", "=", "\"Some pooling types come with a hidden internal dimension\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--bert\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"default\"", ",", "\"mine\"", ",", "\"multi_choice\"", ",", "\"qa\"", "]", ",", "default", "=", "None", ",", "help", "=", "\"What kind of BERT model to use\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--reg_feat_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/regional_features/100p.h5\"", ")", ",", "\n", "help", "=", "\"regional features\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--my_vcpt\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Use my extracted visual concepts\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--regional_topk\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Pick top-k scoring regional features across all frames\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lanecheck\"", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "\"Validation lane checks\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--lanecheck_path\"", ",", "type", "=", "str", ",", "help", "=", "\"Validation lane check path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--best_path\"", ",", "type", "=", "str", ",", "help", "=", "\"Path to best model\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--disable_streams\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "nargs", "=", "\"+\"", ",", "choices", "=", "[", "\"vcpt\"", ",", "\"sub\"", ",", "\"imagenet\"", ",", "\"regional\"", "]", ",", "#added regional support here", "\n", "help", "=", "\"disable the input stream from voting in the softmax of model outputs\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dset\"", ",", "choices", "=", "[", "\"valid\"", ",", "\"test\"", ",", "\"train\"", "]", ",", "default", "=", "\"valid\"", ",", "type", "=", "str", ",", "help", "=", "\"The dataset to use\"", ")", "\n", "########################", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--n_layers_cls\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"number of layers in classifier\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--hsz1\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "\"hidden size for the first lstm\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--hsz2\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"hidden size for the second lstm\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--embedding_size\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"word embedding dim\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--max_sub_l\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"max length for subtitle\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--max_vcpt_l\"", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "\"max length for visual concepts\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--max_vid_l\"", ",", "type", "=", "int", ",", "default", "=", "480", ",", "help", "=", "\"max length for video feature\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vocab_size\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"vocabulary size\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--no_normalize_v\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"do not normalize video featrue\"", ")", "\n", "# Data paths", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--train_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/tvqa_train_processed.json\"", ")", ",", "\n", "help", "=", "\"train set path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--valid_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/tvqa_val_processed.json\"", ")", ",", "\n", "help", "=", "\"valid set path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--test_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/tvqa_test_public_processed.json\"", ")", ",", "\n", "help", "=", "\"test set path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--glove_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/word_embeddings/glove.6B.300d.txt\"", ")", ",", "\n", "help", "=", "\"GloVe pretrained vector path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vcpt_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/vcpt_features/det_visual_concepts_hq.pickle\"", ")", ",", "\n", "help", "=", "\"visual concepts feature path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vid_feat_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/imagenet_features/tvqa_imagenet_pool5_hq.h5\"", ")", ",", "\n", "help", "=", "\"imagenet feature path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vid_feat_size\"", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "\n", "help", "=", "\"visual feature dimension\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--word2idx_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/cache/word2idx.pickle\"", ")", ",", "\n", "help", "=", "\"word2idx cache path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--idx2word_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/cache/idx2word.pickle\"", ")", ",", "\n", "help", "=", "\"idx2word cache path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--vocab_embedding_path\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/cache/vocab_embedding.pickle\"", ")", ",", "\n", "help", "=", "\"vocab_embedding cache path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--deep_cca\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"To perform deep cca\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--deep_cca_layers\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"How many layers in deep cca\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--dual_stream\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Activate the dual stream lane that will use BLP\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--rubi\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"implement RUBI protocol\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--rubi_qloss_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"question loss weight from RUBiCriterion\"", ")", "\n", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.BaseOptions.display_save": [[104, 117], ["vars", "print", "sorted", "print", "vars.items", "print", "isinstance", "os.path.join", "utils.save_json_pretty", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_json_pretty"], ["", "def", "display_save", "(", "self", ",", "options", ",", "results_dir", ")", ":", "\n", "        ", "\"\"\"save config info for future reference, and print\"\"\"", "\n", "args", "=", "vars", "(", "options", ")", "# type == dict", "\n", "# Display settings", "\n", "print", "(", "'------------ Options -------------'", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "args", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "(", "'%s: %s'", "%", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ")", ")", ")", "\n", "", "print", "(", "'-------------- End ----------------'", ")", "\n", "\n", "# Save settings", "\n", "if", "not", "isinstance", "(", "self", ",", "TestOptions", ")", ":", "\n", "            ", "option_file_path", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'opt.json'", ")", "# not yaml file indeed", "\n", "save_json_pretty", "(", "args", ",", "option_file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.BaseOptions.parse": [[118, 148], ["config.BaseOptions.parser.parse_args", "torch.device", "config.BaseOptions.initialize", "isinstance", "utils.load_json", "os.path.isdir", "config.BaseOptions.display_save", "os.path.join", "setattr", "os.makedirs", "shutil.rmtree", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.initialize", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_json", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.BaseOptions.display_save"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"parse cmd line arguments and do some preprocessing\"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "results_dir", "=", "opt", ".", "results_dir_base", "#+ time.strftime(\"_%Y_%m_%d_%H_%M_%S\")", "\n", "\n", "if", "isinstance", "(", "self", ",", "TestOptions", ")", "and", "False", ":", "\n", "            ", "options", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "\"results\"", ",", "opt", ".", "model_dir", ",", "\"opt.json\"", ")", ")", "\n", "for", "arg", "in", "options", ":", "\n", "                ", "setattr", "(", "opt", ",", "arg", ",", "options", "[", "arg", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "os", ".", "path", ".", "isdir", "(", "results_dir", ")", ")", ":", "\n", "                ", "if", "not", "opt", ".", "lanecheck", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "results_dir", ")", "\n", "os", ".", "makedirs", "(", "results_dir", ")", "\n", "", "", "else", ":", "\n", "                ", "os", ".", "makedirs", "(", "results_dir", ")", "\n", "", "self", ".", "display_save", "(", "opt", ",", "results_dir", ")", "\n", "\n", "", "opt", ".", "normalize_v", "=", "not", "opt", ".", "no_normalize_v", "\n", "opt", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "opt", ".", "device", "if", "opt", ".", "device", ">=", "0", "else", "\"cpu\"", ")", "\n", "opt", ".", "with_ts", "=", "not", "opt", ".", "no_ts", "\n", "opt", ".", "input_streams", "=", "[", "]", "if", "opt", ".", "input_streams", "is", "None", "else", "opt", ".", "input_streams", "\n", "opt", ".", "vid_feat_flag", "=", "True", "if", "\"imagenet\"", "in", "opt", ".", "input_streams", "else", "False", "\n", "opt", ".", "h5driver", "=", "None", "if", "opt", ".", "no_core_driver", "else", "\"core\"", "\n", "opt", ".", "results_dir", "=", "results_dir", "\n", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.config.TestOptions.initialize": [[152, 156], ["config.BaseOptions.initialize", "config.TestOptions.parser.add_argument", "config.TestOptions.parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.initialize"], ["def", "initialize", "(", "self", ")", ":", "\n", "        ", "BaseOptions", ".", "initialize", "(", "self", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--model_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"dir contains the model file\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "default", "=", "\"valid\"", ",", "help", "=", "\"valid/test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.train": [[23, 144], ["dset.set_mode", "model.train", "torch.utils.data.DataLoader", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "tqdm.tqdm", "rubi_model.train", "enumerate", "tvqa_dataset.preprocess_inputs", "opt.plotter.text_plot", "train_loss.append", "pred_ids.eq().cpu().numpy().tolist", "open", "f.write", "scheduler.batch_step", "model", "model", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "criterion", "optimizer.zero_grad", "criterion.backward", "q_loss.backward", "optimizer.step", "criterion.item", "valid_acc_log.append", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.train", "dset.set_mode", "os.path.join", "Exception", "rubi_model", "criterion", "criterion", "str", "outputs[].data.max", "model.data.max", "pred_ids.eq().cpu().numpy", "sum", "float", "sum", "float", "opt.writer.add_scalar", "opt.writer.add_scalar", "opt.plotter.plot", "opt.plotter.plot", "main.validate", "main.validate_lanecheck", "opt.plotter.plot", "torch.save", "torch.save", "torch.save", "len", "len", "len", "opt.plotter.text_plot", "utils.save_pickle", "model.state_dict", "os.path.join", "pred_ids.eq().cpu", "str", "pred_ids.eq", "round"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.train", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.train", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.preprocess_inputs", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.text_plot", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.step", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.step", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.train", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.validate.validate", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.validate_lanecheck", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.text_plot", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle"], ["def", "train", "(", "opt", ",", "dset", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "previous_best_acc", ",", "scheduler", ")", ":", "\n", "    ", "dset", ".", "set_mode", "(", "\"train\"", ")", "\n", "if", "opt", ".", "rubi", ":", "# Model and the question/subtitle only rubi style model ill be packed together, unpack here", "\n", "        ", "model", ",", "rubi_model", "=", "model", "\n", "rubi_model", ".", "train", "(", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "train_loader", "=", "DataLoader", "(", "dset", ",", "batch_size", "=", "opt", ".", "bsz", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "pad_collate", ")", "\n", "train_loss", "=", "[", "]", "\n", "valid_acc_log", "=", "[", "\"batch_idx\\tacc\"", "]", "\n", "train_corrects", "=", "[", "]", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "for", "batch_idx", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "train_loader", ")", ")", ":", "\n", "# Process inputs", "\n", "        ", "if", "(", "opt", ".", "lrtype", "==", "\"cyclic\"", ")", ":", "\n", "            ", "scheduler", ".", "batch_step", "(", ")", "\n", "", "model_inputs", ",", "targets", ",", "_", "=", "preprocess_inputs", "(", "batch", ",", "opt", ".", "max_sub_l", ",", "opt", ".", "max_vcpt_l", ",", "opt", ".", "max_vid_l", ",", "\n", "device", "=", "opt", ".", "device", ")", "\n", "# model output", "\n", "if", "opt", ".", "dual_stream", ":", "\n", "            ", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "if", "opt", ".", "lanecheck", ":", "\n", "                ", "raise", "Exception", "(", "\"Not implemeneted lanechecking with dual stream\"", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "if", "opt", ".", "rubi", ":", "\n", "                ", "rubi_outputs", "=", "rubi_model", "(", "*", "model_inputs", ")", "\n", "\n", "# Loss ", "\n", "", "", "if", "not", "opt", ".", "rubi", ":", "\n", "            ", "if", "opt", ".", "lanecheck", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", "[", "-", "1", "]", ",", "targets", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "lanecheck", ":", "\n", "                ", "rubi_in", "=", "{", "# This may be confusing, but this is because of my naming scheme conflicting with Remi's", "\n", "'logits'", ":", "None", ",", "\n", "'logits_q'", ":", "rubi_outputs", "[", "-", "1", "]", ",", "\n", "'logits_rubi'", ":", "outputs", "[", "-", "1", "]", "\n", "}", "\n", "", "else", ":", "\n", "                ", "rubi_in", "=", "{", "# This may be confusing, but this is because of my naming scheme conflicting with Remi's", "\n", "'logits'", ":", "None", ",", "\n", "'logits_q'", ":", "rubi_outputs", ",", "\n", "'logits_rubi'", ":", "outputs", "\n", "}", "\n", "\n", "", "rubi_targets", "=", "{", "\n", "'class_id'", ":", "targets", "\n", "}", "\n", "losses", "=", "criterion", "(", "rubi_in", ",", "rubi_targets", ")", "\n", "loss", ",", "q_loss", "=", "losses", "[", "'loss_mm_q'", "]", ",", "losses", "[", "'loss_q'", "]", "# loss is the fused rubi loss", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "q_loss", ".", "backward", "(", ")", "# push the question loss backwards too", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "opt", ".", "plotter", ".", "text_plot", "(", "opt", ".", "jobname", "+", "\" epoch\"", ",", "opt", ".", "jobname", "+", "\" \"", "+", "str", "(", "epoch", ")", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "opt", ".", "lanecheck", ":", "\n", "            ", "pred_ids", "=", "outputs", "[", "-", "1", "]", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "pred_ids", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "", "train_corrects", "+=", "pred_ids", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "if", "(", "batch_idx", "%", "opt", ".", "log_freq", "==", "2", ")", ":", "#(opt.log_freq-1)):", "\n", "            ", "niter", "=", "epoch", "*", "len", "(", "train_loader", ")", "+", "batch_idx", "\n", "train_acc", "=", "sum", "(", "train_corrects", ")", "/", "float", "(", "len", "(", "train_corrects", ")", ")", "\n", "train_loss", "=", "sum", "(", "train_loss", ")", "/", "float", "(", "len", "(", "train_loss", ")", ")", "#from train_corrects", "\n", "\n", "# Plotting", "\n", "if", "opt", ".", "testrun", "==", "False", ":", "\n", "                ", "opt", ".", "writer", ".", "add_scalar", "(", "\"Train/Acc\"", ",", "train_acc", ",", "niter", ")", "\n", "opt", ".", "writer", ".", "add_scalar", "(", "\"Train/Loss\"", ",", "train_loss", ",", "niter", ")", "\n", "opt", ".", "plotter", ".", "plot", "(", "\"accuracy\"", ",", "\"train\"", ",", "opt", ".", "jobname", ",", "niter", ",", "train_acc", ")", "\n", "opt", ".", "plotter", ".", "plot", "(", "\"loss\"", ",", "\"train\"", ",", "opt", ".", "jobname", ",", "niter", ",", "train_loss", ")", "\n", "\n", "# Validation", "\n", "", "if", "opt", ".", "dual_stream", "or", "opt", ".", "deep_cca", ":", "\n", "                ", "valid_acc", ",", "_", "=", "validate", "(", "opt", ",", "dset", ",", "model", ",", "mode", "=", "\"valid\"", ")", "\n", "", "else", ":", "\n", "                ", "valid_acc", ",", "val_lanecheck_dict", "=", "validate_lanecheck", "(", "opt", ",", "dset", ",", "model", ",", "mode", "=", "\"valid\"", ")", "\n", "", "if", "opt", ".", "testrun", "==", "False", ":", "\n", "#opt.writer.add_scalar(\"Valid/Loss\", valid_loss, niter)", "\n", "                ", "opt", ".", "plotter", ".", "plot", "(", "\"accuracy\"", ",", "\"val\"", ",", "opt", ".", "jobname", ",", "niter", ",", "valid_acc", ")", "\n", "#opt.plotter.plot(\"loss\", \"val\", opt.jobname, niter, valid_loss)", "\n", "", "valid_log_str", "=", "\"%02d\\t%.4f\"", "%", "(", "batch_idx", ",", "valid_acc", ")", "\n", "valid_acc_log", ".", "append", "(", "valid_log_str", ")", "\n", "\n", "# If this is the best run yet", "\n", "if", "valid_acc", ">", "previous_best_acc", ":", "\n", "                ", "previous_best_acc", "=", "valid_acc", "\n", "\n", "# Plot best accuracy so far in text box", "\n", "if", "opt", ".", "testrun", "==", "False", ":", "\n", "                    ", "opt", ".", "plotter", ".", "text_plot", "(", "opt", ".", "jobname", "+", "\" val\"", ",", "opt", ".", "jobname", "+", "\" val \"", "+", "str", "(", "round", "(", "previous_best_acc", ",", "4", ")", ")", ")", "\n", "\n", "# Save the predictions for validation and training datasets, and the state dictionary of the model", "\n", "#_, train_lanecheck_dict = validate_lanecheck(opt, dset, model, mode=\"train\")", "\n", "", "if", "(", "not", "opt", ".", "dual_stream", ")", "and", "(", "not", "opt", ".", "deep_cca", ")", ":", "\n", "                    ", "save_pickle", "(", "val_lanecheck_dict", ",", "opt", ".", "lanecheck_path", "+", "'_valid'", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "\"best_valid.pth\"", ")", ")", "\n", "\n", "# reset to train", "\n", "", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "dset", ".", "set_mode", "(", "\"train\"", ")", "\n", "train_corrects", "=", "[", "]", "\n", "train_loss", "=", "[", "]", "\n", "\n", "", "if", "opt", ".", "debug", ":", "\n", "            ", "break", "\n", "\n", "# additional log", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "results_dir", ",", "\"valid_acc.log\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"\\n\"", ".", "join", "(", "valid_acc_log", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "return", "previous_best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.validate_lanecheck": [[151, 204], ["dset.set_mode", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "torch.utils.data.DataLoader", "enumerate", "tvqa_dataset.preprocess_inputs", "model", "pred_ids.eq().cpu().numpy().tolist", "range", "sum", "float", "outputs.data.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "opt.input_streams.remove", "pred_ids.eq().cpu().numpy", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "pred_ids.eq().cpu", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "pred_ids.eq", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.preprocess_inputs"], ["", "def", "validate_lanecheck", "(", "opt", ",", "dset", ",", "model", ",", "mode", "=", "\"valid\"", ")", ":", "\n", "    ", "dset", ".", "set_mode", "(", "mode", ")", "# Change mode to training here", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dset", ",", "batch_size", "=", "opt", ".", "test_bsz", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "pad_collate", ")", "\n", "lanecheck_dict", "=", "{", "}", "\n", "valid_corrects", "=", "[", "]", "\n", "#opt.lanecheck = True", "\n", "if", "opt", ".", "disable_streams", "is", "not", "None", ":", "\n", "        ", "for", "d_stream", "in", "opt", ".", "disable_streams", ":", "\n", "            ", "if", "d_stream", "in", "opt", ".", "input_streams", ":", "\n", "                ", "opt", ".", "input_streams", ".", "remove", "(", "d_stream", ")", "\n", "", "", "", "else", ":", "\n", "        ", "opt", ".", "disable_streams", "=", "[", "]", "\n", "\n", "", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "# Accuracy", "\n", "        ", "model_inputs", ",", "targets", ",", "qids", "=", "preprocess_inputs", "(", "batch", ",", "opt", ".", "max_sub_l", ",", "opt", ".", "max_vcpt_l", ",", "opt", ".", "max_vid_l", ",", "\n", "device", "=", "opt", ".", "device", ")", "\n", "sub_out", ",", "vcpt_out", ",", "vid_out", ",", "reg_out", ",", "regtopk_out", ",", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "pred_ids", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "valid_corrects", "+=", "pred_ids", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Add the ground truth to the end of each output response, and then the predicted ID for the question after that", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", "and", "not", "opt", ".", "dual_stream", ":", "\n", "            ", "sub_out", "=", "torch", ".", "cat", "(", "(", "sub_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", "and", "not", "opt", ".", "dual_stream", ":", "\n", "            ", "vcpt_out", "=", "torch", ".", "cat", "(", "(", "vcpt_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "'imagenet'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "vid_out", "=", "torch", ".", "cat", "(", "(", "vid_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "(", "'regional'", "in", "opt", ".", "input_streams", ")", "and", "opt", ".", "regional_topk", "==", "-", "1", ":", "\n", "            ", "reg_out", "=", "torch", ".", "cat", "(", "(", "reg_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "regional_topk", "!=", "-", "1", ":", "\n", "            ", "regtopk_out", "=", "torch", ".", "cat", "(", "(", "regtopk_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Add them to the lanecheck dictionary", "\n", "", "for", "id_idx", "in", "range", "(", "len", "(", "qids", ")", ")", ":", "\n", "            ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "=", "{", "}", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'sub_out'", "]", "=", "sub_out", "[", "id_idx", "]", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vcpt_out'", "]", "=", "vcpt_out", "[", "id_idx", "]", "\n", "", "if", "'imagenet'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vid_out'", "]", "=", "vid_out", "[", "id_idx", "]", "\n", "", "if", "(", "'regional'", "in", "opt", ".", "input_streams", ")", "and", "opt", ".", "regional_topk", "==", "-", "1", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'reg_out'", "]", "=", "reg_out", "[", "id_idx", "]", "\n", "", "if", "opt", ".", "regional_topk", "!=", "-", "1", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'regtopk_out'", "]", "=", "regtopk_out", "[", "id_idx", "]", "\n", "\n", "", "", "", "valid_acc", "=", "sum", "(", "valid_corrects", ")", "/", "float", "(", "len", "(", "valid_corrects", ")", ")", "\n", "lanecheck_dict", "[", "'acc'", "]", "=", "valid_acc", "\n", "#opt.lanecheck = False", "\n", "return", "valid_acc", ",", "lanecheck_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.main.validate": [[210, 242], ["dset.set_mode", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "torch.utils.data.DataLoader", "enumerate", "tvqa_dataset.preprocess_inputs", "criterion", "valid_loss.append", "pred_ids.eq().cpu().numpy().tolist", "sum", "float", "sum", "float", "model", "model", "int", "criterion.item", "model.data.max", "len", "len", "pred_ids.eq().cpu().numpy", "pred_ids.eq().cpu", "pred_ids.eq"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.preprocess_inputs"], ["", "def", "validate", "(", "opt", ",", "dset", ",", "model", ",", "mode", "=", "\"valid\"", ")", ":", "\n", "    ", "dset", ".", "set_mode", "(", "mode", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dset", ",", "batch_size", "=", "opt", ".", "test_bsz", ",", "shuffle", "=", "False", ",", "collate_fn", "=", "pad_collate", ")", "\n", "\n", "valid_qids", "=", "[", "]", "\n", "valid_loss", "=", "[", "]", "\n", "valid_corrects", "=", "[", "]", "\n", "for", "_", ",", "batch", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "model_inputs", ",", "targets", ",", "qids", "=", "preprocess_inputs", "(", "batch", ",", "opt", ".", "max_sub_l", ",", "opt", ".", "max_vcpt_l", ",", "opt", ".", "max_vid_l", ",", "\n", "device", "=", "opt", ".", "device", ")", "\n", "if", "opt", ".", "dual_stream", ":", "\n", "            ", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "\n", "", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "valid_qids", "+=", "[", "int", "(", "x", ")", "for", "x", "in", "qids", "]", "\n", "valid_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "pred_ids", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "valid_corrects", "+=", "pred_ids", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "if", "opt", ".", "debug", ":", "\n", "            ", "break", "\n", "\n", "", "", "valid_acc", "=", "sum", "(", "valid_corrects", ")", "/", "float", "(", "len", "(", "valid_corrects", ")", ")", "\n", "valid_loss", "=", "sum", "(", "valid_loss", ")", "/", "float", "(", "len", "(", "valid_loss", ")", ")", "\n", "\n", "return", "valid_acc", ",", "valid_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.__init__": [[16, 97], ["utils.load_json", "utils.load_json", "utils.load_json", "tvqa_dataset.TVQADataset.get_cur_dict", "h5py.File", "utils.load_pickle", "numpy.asarray", "numpy.append", "h5py.File", "transformers.BertTokenizer.from_pretrained", "len", "open", "f.readlines", "numpy.asarray", "x.strip", "h5py.File", "transformers.BertTokenizer.from_pretrained", "list", "utils.files_exist", "print", "tvqa_dataset.TVQADataset.build_word_vocabulary", "print", "utils.load_pickle", "utils.load_pickle", "utils.load_pickle", "transformers.BertTokenizer.from_pretrained", "tvqa_dataset.TVQADataset.raw_valid[].keys"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_json", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_json", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_json", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.get_cur_dict", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.files_exist", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.build_word_vocabulary", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "raw_train", "=", "load_json", "(", "opt", ".", "train_path", ")", "\n", "self", ".", "raw_test", "=", "load_json", "(", "opt", ".", "test_path", ")", "\n", "self", ".", "raw_valid", "=", "load_json", "(", "opt", ".", "valid_path", ")", "\n", "self", ".", "vfeat_load", "=", "opt", ".", "vid_feat_flag", "\n", "self", ".", "reg_flag", "=", "\"regional\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "regtopk_flag", "=", "(", "-", "1", "!=", "opt", ".", "regional_topk", ")", "\n", "\n", "# Options are useful to access", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# Regional features loading", "\n", "if", "self", ".", "reg_flag", ":", "\n", "            ", "self", ".", "reg_h5", "=", "h5py", ".", "File", "(", "opt", ".", "reg_feat_path", ",", "\"r\"", ",", "driver", "=", "None", ")", "\n", "# Visual concept loaded", "\n", "", "if", "not", "opt", ".", "my_vcpt", ":", "# Their visual concepts", "\n", "            ", "self", ".", "vcpt_dict", "=", "load_pickle", "(", "opt", ".", "vcpt_path", ")", "\n", "", "else", ":", "\n", "# Load the visual concepts classes i got", "\n", "            ", "with", "open", "(", "'/home/jumperkables/regional_stuff/faster-rcnn.pytorch/data/pretrained_model/objects_vocab.txt'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "pascal_classes", "=", "np", ".", "asarray", "(", "[", "'__background__'", "]", ")", "\n", "pascal_classes", "=", "np", ".", "append", "(", "pascal_classes", ",", "np", ".", "asarray", "(", "data", ")", ")", "\n", "self", ".", "vcpt_classes", "=", "[", "x", ".", "strip", "(", "'\\n'", ")", "for", "x", "in", "pascal_classes", "]", "\n", "if", "not", "self", ".", "reg_flag", ":", "# even if we're not using regional features, we still need that file for my classes", "\n", "                ", "self", ".", "reg_h5", "=", "h5py", ".", "File", "(", "opt", ".", "reg_feat_path", ",", "\"r\"", ",", "driver", "=", "None", ")", "\n", "\n", "# Video features", "\n", "", "", "if", "self", ".", "vfeat_load", ":", "\n", "            ", "self", ".", "vid_h5", "=", "h5py", ".", "File", "(", "opt", ".", "vid_feat_path", ",", "\"r\"", ",", "driver", "=", "None", ")", "#opt.h5driver)", "\n", "\n", "# Get bert model ready", "\n", "", "if", "opt", ".", "bert", "==", "\"default\"", ":", "\n", "            ", "self", ".", "bert_tokeniser", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"multi_choice\"", ":", "\n", "            ", "self", ".", "bert_tokeniser", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"qa\"", ":", "\n", "            ", "self", ".", "bert_tokeniser", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "\n", "\n", "", "self", ".", "glove_embedding_path", "=", "opt", ".", "glove_path", "\n", "self", ".", "normalize_v", "=", "opt", ".", "normalize_v", "\n", "self", ".", "with_ts", "=", "opt", ".", "with_ts", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "cur_data_dict", "=", "self", ".", "get_cur_dict", "(", ")", "\n", "\n", "# set word embedding / vocabulary", "\n", "self", ".", "embedding_dim", "=", "opt", ".", "embedding_size", "\n", "if", "opt", ".", "bert", "is", "None", ":", "\n", "            ", "self", ".", "word2idx_path", "=", "opt", ".", "word2idx_path", "\n", "self", ".", "idx2word_path", "=", "opt", ".", "idx2word_path", "\n", "self", ".", "vocab_embedding_path", "=", "opt", ".", "vocab_embedding_path", "\n", "self", ".", "word2idx", "=", "{", "\"<pad>\"", ":", "0", ",", "\"<unk>\"", ":", "1", ",", "\"<eos>\"", ":", "2", "}", "\n", "self", ".", "idx2word", "=", "{", "0", ":", "\"<pad>\"", ",", "1", ":", "\"<unk>\"", ",", "2", ":", "\"<eos>\"", "}", "\n", "self", ".", "offset", "=", "len", "(", "self", ".", "word2idx", ")", "\n", "\n", "# set entry keys", "\n", "", "if", "self", ".", "with_ts", ":", "\n", "            ", "self", ".", "text_keys", "=", "[", "\"q\"", ",", "\"a0\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ",", "\"a4\"", ",", "\"located_sub_text\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "text_keys", "=", "[", "\"q\"", ",", "\"a0\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ",", "\"a4\"", ",", "\"sub_text\"", "]", "\n", "", "self", ".", "vcpt_key", "=", "\"vcpt\"", "\n", "self", ".", "label_key", "=", "\"answer_idx\"", "\n", "self", ".", "qid_key", "=", "\"qid\"", "\n", "self", ".", "vid_name_key", "=", "\"vid_name\"", "\n", "self", ".", "located_frm_key", "=", "\"located_frame\"", "\n", "for", "k", "in", "self", ".", "text_keys", "+", "[", "self", ".", "vcpt_key", ",", "self", ".", "qid_key", ",", "self", ".", "vid_name_key", "]", ":", "\n", "            ", "if", "k", "==", "\"vcpt\"", ":", "\n", "                ", "continue", "\n", "", "assert", "k", "in", "list", "(", "self", ".", "raw_valid", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "\n", "# build/load vocabulary", "\n", "", "if", "opt", ".", "bert", "is", "None", ":", "\n", "            ", "if", "not", "files_exist", "(", "[", "self", ".", "word2idx_path", ",", "self", ".", "idx2word_path", ",", "self", ".", "vocab_embedding_path", "]", ")", ":", "\n", "                ", "print", "(", "\"\\nNo cache founded.\"", ")", "\n", "self", ".", "build_word_vocabulary", "(", "word_count_threshold", "=", "opt", ".", "word_count_threshold", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"\\nLoading cache ...\"", ")", "\n", "self", ".", "word2idx", "=", "load_pickle", "(", "self", ".", "word2idx_path", ")", "\n", "self", ".", "idx2word", "=", "load_pickle", "(", "self", ".", "idx2word_path", ")", "\n", "self", ".", "vocab_embedding", "=", "load_pickle", "(", "self", ".", "vocab_embedding_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode": [[98, 101], ["tvqa_dataset.TVQADataset.get_cur_dict"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.get_cur_dict"], ["", "", "", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "cur_data_dict", "=", "self", ".", "get_cur_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.get_cur_dict": [[102, 109], ["None"], "methods", ["None"], ["", "def", "get_cur_dict", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "raw_train", "\n", "", "elif", "self", ".", "mode", "==", "'valid'", ":", "\n", "            ", "return", "self", ".", "raw_valid", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "return", "self", ".", "raw_test", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.__len__": [[110, 112], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "cur_data_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.__getitem__": [[113, 246], ["items.append", "items.append", "items.append", "items.append", "tvqa_dataset.TVQADataset.vcpt_bert", "tvqa_dataset.TVQADataset.bert_tokeniser.encode", "items.append", "items.append", "items.append", "items.append", "items.append", "torch.zeros", "torch.zeros", "torch.zeros", "items.append", "items.append", "max", "enumerate", "Exception", "tvqa_dataset.TVQADataset.numericalize_vcpt", "int", "torch.from_numpy", "torch.from_numpy", "torch.nn.functional.normalize", "max", "torch.stack", "Exception", "torch.nn.functional.normalize", "max", "range", "Exception", "torch.nn.functional.normalize", "tvqa_dataset.TVQADataset.numericalize", "tvqa_dataset.TVQADataset.bert_tokeniser.encode", "range", "torch.from_numpy", "min", "torch.from_numpy", "torch.from_numpy", "torch.flatten.append", "torch.flatten.append", "torch.zeros", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.sort", "int", "range", "len", "int", "numpy.array", "range", "int", "numpy.array", "numpy.array", "range", "[].keys", "str", "min", "[].keys", "min", "[].keys", "torch.cat", "torch.cat", "int", "str", "str", "str", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.vcpt_bert", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.numericalize_vcpt", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.numericalize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "items", "=", "[", "]", "\n", "if", "self", ".", "with_ts", ":", "\n", "            ", "cur_start", ",", "cur_end", "=", "self", ".", "cur_data_dict", "[", "index", "]", "[", "self", ".", "located_frm_key", "]", "\n", "", "cur_vid_name", "=", "self", ".", "cur_data_dict", "[", "index", "]", "[", "self", ".", "vid_name_key", "]", "\n", "#if cur_vid_name == 'friends_s10e17-18_seg02_clip_16':", "\n", "#    import ipdb; ipdb.set_trace()", "\n", "\n", "# add text keys", "\n", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "            ", "for", "k", "in", "self", ".", "text_keys", ":", "\n", "                ", "items", ".", "append", "(", "self", ".", "numericalize", "(", "self", ".", "cur_data_dict", "[", "index", "]", "[", "k", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "k", "in", "self", ".", "text_keys", ":", "\n", "                ", "items", ".", "append", "(", "self", ".", "bert_tokeniser", ".", "encode", "(", "self", ".", "cur_data_dict", "[", "index", "]", "[", "k", "]", ",", "add_special_tokens", "=", "True", ")", ")", "\n", "\n", "\n", "# add vcpt", "\n", "", "", "if", "(", "self", ".", "opt", ".", "my_vcpt", ")", ":", "# use my visual concepts? # my_vcpt", "\n", "# TEST IF MY VISUAL CONCEPTS ARE LOADED INTO THEIR CLASSES PROPERLY", "\n", "# self.vcpt_classes", "\n", "            ", "if", "self", ".", "with_ts", ":", "\n", "                ", "if", "cur_start", "==", "0", ":", "\n", "                    ", "cur_start", "=", "1", "\n", "", "max_idx", "=", "max", "(", "[", "int", "(", "frm", ")", "for", "frm", "in", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'classes'", "]", ".", "keys", "(", ")", "]", ")", "\n", "cur_vis_sen", "=", "[", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'classes'", "]", "[", "str", "(", "frame_indx", ")", "]", "for", "frame_indx", "in", "range", "(", "cur_start", ",", "min", "(", "cur_end", ",", "max_idx", ")", ")", "]", "\n", "cur_vis_sen", "=", "[", "[", "obj", "for", "obj", "in", "frame", "]", "for", "frame", "in", "cur_vis_sen", "]", "# Get all of the class indexes", "\n", "for", "j", ",", "frame", "in", "enumerate", "(", "cur_vis_sen", ")", ":", "\n", "                    ", "for", "xx", "in", "range", "(", "len", "(", "frame", ")", ")", ":", "\n", "                        ", "frame", "[", "xx", "]", "=", "self", ".", "vcpt_classes", "[", "int", "(", "frame", "[", "xx", "]", ")", "]", "\n", "", "cur_vis_sen", "[", "j", "]", "=", "\" , \"", ".", "join", "(", "frame", ")", "\n", "", "", "else", ":", "# handled by vid_path", "\n", "                ", "raise", "Exception", "(", "\"Not implemented regional without ts\"", ")", "\n", "# if self.normalize_v:", "\n", "#     cur_reg_feat = nn.functional.normalize(cur_reg_feat, p=2, dim=1)", "\n", "", "", "else", ":", "# use their visual concepts", "\n", "            ", "if", "self", ".", "with_ts", ":", "\n", "                ", "cur_vis_sen", "=", "self", ".", "vcpt_dict", "[", "cur_vid_name", "]", "[", "cur_start", ":", "cur_end", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "cur_vis_sen", "=", "self", ".", "vcpt_dict", "[", "cur_vid_name", "]", "\n", "", "", "if", "self", ".", "opt", ".", "bert", "is", "not", "None", ":", "# If using bert", "\n", "#import ipdb; ipdb.set_trace()", "\n", "            ", "cur_vis_sen", "=", "\" , \"", ".", "join", "(", "cur_vis_sen", ")", "\n", "cur_vis_sen", "=", "self", ".", "vcpt_bert", "(", "cur_vis_sen", ")", "\n", "cur_vis_sen", "=", "self", ".", "bert_tokeniser", ".", "encode", "(", "cur_vis_sen", ",", "add_special_tokens", "=", "True", ")", "\n", "items", ".", "append", "(", "cur_vis_sen", ")", "\n", "", "else", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "            ", "cur_vis_sen", "=", "\" , \"", ".", "join", "(", "cur_vis_sen", ")", "\n", "items", ".", "append", "(", "self", ".", "numericalize_vcpt", "(", "cur_vis_sen", ")", ")", "\n", "\n", "\n", "# # add other keys", "\n", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "items", ".", "append", "(", "666", ")", "# this value will not be used", "\n", "", "else", ":", "\n", "            ", "items", ".", "append", "(", "int", "(", "self", ".", "cur_data_dict", "[", "index", "]", "[", "self", ".", "label_key", "]", ")", ")", "\n", "", "for", "k", "in", "[", "self", ".", "qid_key", "]", ":", "\n", "            ", "items", ".", "append", "(", "self", ".", "cur_data_dict", "[", "index", "]", "[", "k", "]", ")", "\n", "", "items", ".", "append", "(", "cur_vid_name", ")", "\n", "\n", "\n", "# add visual feature", "\n", "if", "self", ".", "vfeat_load", ":", "\n", "            ", "if", "self", ".", "with_ts", ":", "\n", "                ", "cur_vid_feat", "=", "torch", ".", "from_numpy", "(", "self", ".", "vid_h5", "[", "cur_vid_name", "]", "[", "cur_start", ":", "cur_end", "]", ")", "\n", "", "else", ":", "# handled by vid_path", "\n", "                ", "cur_vid_feat", "=", "torch", ".", "from_numpy", "(", "self", ".", "vid_h5", "[", "cur_vid_name", "]", "[", ":", "480", "]", ")", "\n", "", "if", "self", ".", "normalize_v", ":", "\n", "                ", "cur_vid_feat", "=", "nn", ".", "functional", ".", "normalize", "(", "cur_vid_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "cur_vid_feat", "=", "torch", ".", "zeros", "(", "[", "2", ",", "2", "]", ")", "# dummy placeholder", "\n", "", "items", ".", "append", "(", "cur_vid_feat", ")", "\n", "\n", "\n", "# add regional feature", "\n", "if", "self", ".", "reg_flag", "and", "not", "self", ".", "regtopk_flag", ":", "# here regional feature", "\n", "            ", "if", "self", ".", "with_ts", ":", "\n", "                ", "if", "cur_start", "==", "0", ":", "\n", "                    ", "cur_start", "=", "1", "\n", "", "max_idx", "=", "max", "(", "[", "int", "(", "frm", ")", "for", "frm", "in", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'features'", "]", ".", "keys", "(", ")", "]", ")", "\n", "cur_reg_feat", "=", "[", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'features'", "]", "[", "str", "(", "frame_indx", ")", "]", ")", ")", "for", "frame_indx", "in", "range", "(", "cur_start", ",", "min", "(", "cur_end", ",", "max_idx", ")", ")", "]", "\n", "cur_reg_feat", "=", "torch", ".", "stack", "(", "cur_reg_feat", ")", "\n", "", "else", ":", "# handled by vid_path", "\n", "                ", "raise", "Exception", "(", "\"regional Not implemented regional without ts\"", ")", "\n", "", "if", "self", ".", "normalize_v", ":", "\n", "                ", "cur_reg_feat", "=", "nn", ".", "functional", ".", "normalize", "(", "cur_reg_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "######## Tester", "\n", "#import ipdb; ipdb.set_trace()", "\n", "########", "\n", "", "", "else", ":", "\n", "            ", "cur_reg_feat", "=", "torch", ".", "zeros", "(", "[", "2", ",", "2", ",", "2", "]", ")", "# dummy placeholder", "\n", "", "items", ".", "append", "(", "cur_reg_feat", ")", "\n", "\n", "# add topk regional feature", "\n", "if", "self", ".", "regtopk_flag", "and", "self", ".", "reg_flag", ":", "# here regional feature", "\n", "            ", "if", "self", ".", "with_ts", ":", "\n", "                ", "if", "cur_start", "==", "0", ":", "\n", "                    ", "cur_start", "=", "1", "\n", "", "max_idx", "=", "max", "(", "[", "int", "(", "frm", ")", "for", "frm", "in", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'features'", "]", ".", "keys", "(", ")", "]", ")", "\n", "cur_regtopk_feat", "=", "[", "]", "\n", "cur_regtopk_scores", "=", "[", "]", "\n", "for", "frame_indx", "in", "range", "(", "cur_start", ",", "min", "(", "cur_end", ",", "max_idx", ")", ")", ":", "\n", "                    ", "to_add_feat", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'features'", "]", "[", "str", "(", "frame_indx", ")", "]", ")", ")", "\n", "to_add_score", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "self", ".", "reg_h5", "[", "cur_vid_name", "]", "[", "'scores'", "]", "[", "str", "(", "frame_indx", ")", "]", ")", ")", "\n", "if", "to_add_feat", ".", "shape", "[", "0", "]", "!=", "20", ":", "\n", "                        ", "to_do", "=", "20", "-", "to_add_feat", ".", "shape", "[", "0", "]", "\n", "for", "yy", "in", "range", "(", "to_do", ")", ":", "# If there aren't 20 detections per frame pad with zero detections", "\n", "                            ", "to_add_feat", "=", "torch", ".", "cat", "(", "(", "to_add_feat", ",", "torch", ".", "zeros", "(", "1", ",", "2048", ")", ")", ",", "dim", "=", "0", ")", "\n", "to_add_score", "=", "torch", ".", "cat", "(", "(", "to_add_score", ",", "torch", ".", "zeros", "(", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "", "", "cur_regtopk_feat", ".", "append", "(", "to_add_feat", ")", "\n", "cur_regtopk_scores", ".", "append", "(", "to_add_score", ")", "\n", "", "if", "cur_regtopk_feat", "==", "[", "]", ":", "# If no detections in the specified range return nothing", "\n", "                    ", "cur_regtopk_feat", "=", "torch", ".", "zeros", "(", "2", ",", "2048", ")", "\n", "", "else", ":", "\n", "                    ", "cur_regtopk_feat", "=", "torch", ".", "stack", "(", "cur_regtopk_feat", ")", "\n", "cur_regtopk_scores", "=", "torch", ".", "stack", "(", "cur_regtopk_scores", ")", "\n", "\n", "cur_regtopk_feat", "=", "torch", ".", "flatten", "(", "cur_regtopk_feat", ",", "end_dim", "=", "1", ")", "# order the tensors by score", "\n", "cur_regtopk_scores", "=", "torch", ".", "flatten", "(", "cur_regtopk_scores", ",", "end_dim", "=", "1", ")", "# order the tensors by score", "\n", "\n", "cur_regtopk_scores", ",", "order", "=", "torch", ".", "sort", "(", "cur_regtopk_scores", ",", "0", ",", "True", ")", "\n", "cur_regtopk_feat", "=", "cur_regtopk_feat", "[", "order", "]", "\n", "cur_regtopk_feat", "=", "cur_regtopk_feat", "[", ":", "self", ".", "opt", ".", "regional_topk", "]", "\n", "", "", "else", ":", "# handled by vid_path", "\n", "                ", "raise", "Exception", "(", "\"Top-k regional Not implemented regional without ts\"", ")", "\n", "", "if", "self", ".", "normalize_v", ":", "\n", "                ", "cur_regtopk_feat", "=", "nn", ".", "functional", ".", "normalize", "(", "cur_regtopk_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "cur_regtopk_feat", "=", "torch", ".", "zeros", "(", "[", "2", ",", "2", "]", ")", "# dummy placeholder", "\n", "", "items", ".", "append", "(", "cur_regtopk_feat", ")", "\n", "\n", "return", "items", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.line_to_words": [[247, 255], ["line.lower().split", "line.split", "line.lower"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "line_to_words", "(", "cls", ",", "line", ",", "eos", "=", "True", ",", "downcase", "=", "True", ")", ":", "\n", "        ", "eos_word", "=", "\"<eos>\"", "\n", "words", "=", "line", ".", "lower", "(", ")", ".", "split", "(", ")", "if", "downcase", "else", "line", ".", "split", "(", ")", "\n", "# !!!! remove comma here, since they are too many of them", "\n", "words", "=", "[", "w", "for", "w", "in", "words", "if", "w", "!=", "\",\"", "]", "\n", "words", "=", "words", "+", "[", "eos_word", "]", "if", "eos", "else", "words", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.numericalize": [[256, 261], ["tvqa_dataset.TVQADataset.line_to_words"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.line_to_words"], ["", "def", "numericalize", "(", "self", ",", "sentence", ",", "eos", "=", "True", ")", ":", "\n", "        ", "\"\"\"convert words to indices\"\"\"", "\n", "sentence_indices", "=", "[", "self", ".", "word2idx", "[", "w", "]", "if", "w", "in", "self", ".", "word2idx", "else", "self", ".", "word2idx", "[", "\"<unk>\"", "]", "\n", "for", "w", "in", "self", ".", "line_to_words", "(", "sentence", ",", "eos", "=", "eos", ")", "]", "# 1 is <unk>, unknown", "\n", "return", "sentence_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.numericalize_vcpt": [[262, 276], ["vcpt_sentence.lower().split", "words.append", "words.extend", "vcpt_sentence.lower", "unique_pairs.append", "pair.split"], "methods", ["None"], ["", "def", "numericalize_vcpt", "(", "self", ",", "vcpt_sentence", ")", ":", "\n", "        ", "\"\"\"convert words to indices, additionally removes duplicated attr-object pairs\"\"\"", "\n", "attr_obj_pairs", "=", "vcpt_sentence", ".", "lower", "(", ")", ".", "split", "(", "\",\"", ")", "# comma is also removed", "\n", "unique_pairs", "=", "[", "]", "\n", "for", "pair", "in", "attr_obj_pairs", ":", "\n", "            ", "if", "pair", "not", "in", "unique_pairs", ":", "\n", "                ", "unique_pairs", ".", "append", "(", "pair", ")", "\n", "", "", "words", "=", "[", "]", "\n", "for", "pair", "in", "unique_pairs", ":", "\n", "            ", "words", ".", "extend", "(", "pair", ".", "split", "(", ")", ")", "\n", "", "words", ".", "append", "(", "\"<eos>\"", ")", "\n", "sentence_indices", "=", "[", "self", ".", "word2idx", "[", "w", "]", "if", "w", "in", "self", ".", "word2idx", "else", "self", ".", "word2idx", "[", "\"<unk>\"", "]", "\n", "for", "w", "in", "words", "]", "\n", "return", "sentence_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.vcpt_bert": [[277, 289], ["vcpt_sentence.lower().split", "words.append", "words.extend", "vcpt_sentence.lower", "unique_pairs.append", "pair.split"], "methods", ["None"], ["", "def", "vcpt_bert", "(", "self", ",", "vcpt_sentence", ")", ":", "\n", "        ", "\"\"\"convert words to indices, additionally removes duplicated attr-object pairs\"\"\"", "\n", "attr_obj_pairs", "=", "vcpt_sentence", ".", "lower", "(", ")", ".", "split", "(", "\",\"", ")", "# comma is also removed", "\n", "unique_pairs", "=", "[", "]", "\n", "for", "pair", "in", "attr_obj_pairs", ":", "\n", "            ", "if", "pair", "not", "in", "unique_pairs", ":", "\n", "                ", "unique_pairs", ".", "append", "(", "pair", ")", "\n", "", "", "words", "=", "[", "]", "\n", "for", "pair", "in", "unique_pairs", ":", "\n", "            ", "words", ".", "extend", "(", "pair", ".", "split", "(", ")", ")", "\n", "", "words", ".", "append", "(", "\"\"", ")", "\n", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.load_glove": [[290, 302], ["open", "f.readlines", "line.strip().split", "numpy.asarray", "line.strip", "float"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "load_glove", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\" Load glove embeddings into a python dict\n        returns { word (str) : vector_embedding (torch.FloatTensor) }\"\"\"", "\n", "glove", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "values", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\" \"", ")", "# space separator", "\n", "word", "=", "values", "[", "0", "]", "\n", "vector", "=", "np", ".", "asarray", "(", "[", "float", "(", "e", ")", "for", "e", "in", "values", "[", "1", ":", "]", "]", ")", "\n", "glove", "[", "word", "]", "=", "vector", "\n", "", "", "return", "glove", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.build_word_vocabulary": [[303, 343], ["print", "print", "enumerate", "print", "print", "tvqa_dataset.TVQADataset.load_glove", "print", "numpy.zeros", "list", "tqdm.tqdm.tqdm", "print", "print", "utils.save_pickle", "utils.save_pickle", "utils.save_pickle", "print", "all_sentences.extend", "tvqa_dataset.TVQADataset.line_to_words", "tvqa_dataset.TVQADataset.keys", "list", "len", "range", "word_counts.get", "len", "len", "len", "len", "numpy.random.randn", "list", "tvqa_dataset.TVQADataset.word2idx.keys"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.load_glove", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.line_to_words"], ["", "def", "build_word_vocabulary", "(", "self", ",", "word_count_threshold", "=", "0", ")", ":", "\n", "        ", "\"\"\"borrowed this implementation from @karpathy's neuraltalk.\"\"\"", "\n", "print", "(", "\"Building word vocabulary starts.\\n\"", ")", "\n", "all_sentences", "=", "[", "]", "\n", "for", "k", "in", "self", ".", "text_keys", ":", "\n", "            ", "all_sentences", ".", "extend", "(", "[", "ele", "[", "k", "]", "for", "ele", "in", "self", ".", "raw_train", "]", ")", "\n", "\n", "", "word_counts", "=", "{", "}", "\n", "for", "sentence", "in", "all_sentences", ":", "\n", "            ", "for", "w", "in", "self", ".", "line_to_words", "(", "sentence", ",", "eos", "=", "False", ",", "downcase", "=", "True", ")", ":", "\n", "                ", "word_counts", "[", "w", "]", "=", "word_counts", ".", "get", "(", "w", ",", "0", ")", "+", "1", "\n", "\n", "", "", "vocab", "=", "[", "w", "for", "w", "in", "word_counts", "if", "word_counts", "[", "w", "]", ">=", "word_count_threshold", "and", "w", "not", "in", "list", "(", "self", ".", "word2idx", ".", "keys", "(", ")", ")", "]", "\n", "print", "(", "(", "\"Vocabulary Size %d (<pad> <unk> <eos> excluded) using word_count_threshold %d.\\n\"", "%", "\n", "(", "len", "(", "vocab", ")", ",", "word_count_threshold", ")", ")", ")", "\n", "\n", "# build index and vocabularies", "\n", "for", "idx", ",", "w", "in", "enumerate", "(", "vocab", ")", ":", "\n", "            ", "self", ".", "word2idx", "[", "w", "]", "=", "idx", "+", "self", ".", "offset", "\n", "self", ".", "idx2word", "[", "idx", "+", "self", ".", "offset", "]", "=", "w", "\n", "", "print", "(", "(", "\"word2idx size: %d, idx2word size: %d.\\n\"", "%", "(", "len", "(", "self", ".", "word2idx", ")", ",", "len", "(", "self", ".", "idx2word", ")", ")", ")", ")", "\n", "\n", "# Make glove embedding.", "\n", "print", "(", "(", "\"Loading glove embedding at path : %s. \\n\"", "%", "self", ".", "glove_embedding_path", ")", ")", "\n", "glove_full", "=", "self", ".", "load_glove", "(", "self", ".", "glove_embedding_path", ")", "\n", "print", "(", "\"Glove Loaded, building word2idx, idx2word mapping. This may take a while.\\n\"", ")", "\n", "glove_matrix", "=", "np", ".", "zeros", "(", "[", "len", "(", "self", ".", "idx2word", ")", ",", "self", ".", "embedding_dim", "]", ")", "\n", "glove_keys", "=", "list", "(", "glove_full", ".", "keys", "(", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "list", "(", "range", "(", "len", "(", "self", ".", "idx2word", ")", ")", ")", ")", ":", "\n", "            ", "w", "=", "self", ".", "idx2word", "[", "i", "]", "\n", "w_embed", "=", "glove_full", "[", "w", "]", "if", "w", "in", "glove_keys", "else", "np", ".", "random", ".", "randn", "(", "self", ".", "embedding_dim", ")", "*", "0.4", "\n", "glove_matrix", "[", "i", ",", ":", "]", "=", "w_embed", "\n", "", "self", ".", "vocab_embedding", "=", "glove_matrix", "\n", "print", "(", "(", "\"Vocab embedding size is :\"", ",", "glove_matrix", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"Saving cache files ...\\n\"", ")", "\n", "save_pickle", "(", "self", ".", "word2idx", ",", "self", ".", "word2idx_path", ")", "\n", "save_pickle", "(", "self", ".", "idx2word", ",", "self", ".", "idx2word_path", ")", "\n", "save_pickle", "(", "glove_matrix", ",", "self", ".", "vocab_embedding_path", ")", "\n", "print", "(", "\"Building  vocabulary done.\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.Batch.__init__": [[346, 348], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "__doc__", "=", "\"empty initialization\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.Batch.get_batch": [[349, 357], ["cls", "zip", "setattr"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_batch", "(", "cls", ",", "keys", "=", "None", ",", "values", "=", "None", ")", ":", "\n", "        ", "\"\"\"Create a Batch directly from a number of Variables.\"\"\"", "\n", "batch", "=", "cls", "(", ")", "\n", "assert", "keys", "is", "not", "None", "and", "values", "is", "not", "None", "\n", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", ":", "\n", "            ", "setattr", "(", "batch", ",", "k", ",", "v", ")", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.pad_collate": [[359, 426], ["list", "enumerate", "tvqa_dataset.Batch.get_batch", "torch.LongTensor", "torch.zeros().long", "enumerate", "torch.LongTensor", "sequences[].size", "torch.zeros().float", "enumerate", "torch.LongTensor", "torch.zeros().float", "enumerate", "torch.LongTensor", "torch.zeros().float", "enumerate", "zip", "torch.LongTensor", "all_values.append", "len", "torch.zeros", "len", "torch.zeros", "len", "torch.zeros", "len", "torch.zeros", "tvqa_dataset.pad_collate.pad_sequences"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.Batch.get_batch"], ["", "", "def", "pad_collate", "(", "data", ")", ":", "\n", "    ", "\"\"\"Creates mini-batch tensors from the list of tuples (src_seq, trg_seq).\"\"\"", "\n", "def", "pad_sequences", "(", "sequences", ")", ":", "\n", "        ", "sequences", "=", "[", "torch", ".", "LongTensor", "(", "s", ")", "for", "s", "in", "sequences", "]", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "padded_seqs", "=", "torch", ".", "zeros", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "idx", "]", "\n", "padded_seqs", "[", "idx", ",", ":", "end", "]", "=", "seq", "[", ":", "end", "]", "\n", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "", "def", "pad_video_sequences", "(", "sequences", ")", ":", "\n", "        ", "\"\"\"sequences is a list of torch float tensors (created from numpy)\"\"\"", "\n", "#import ipdb; ipdb.set_trace()", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "v_dim", "=", "sequences", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "padded_seqs", "=", "torch", ".", "zeros", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ",", "v_dim", ")", ".", "float", "(", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "idx", "]", "\n", "padded_seqs", "[", "idx", ",", ":", "end", "]", "=", "seq", "\n", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "", "def", "pad_regional_sequences", "(", "sequences", ")", ":", "\n", "        ", "\"\"\"sequences is a list of torch float tensors created by jumperkables\"\"\"", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "padded_seqs", "=", "torch", ".", "zeros", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ",", "sequences", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "sequences", "[", "0", "]", ".", "shape", "[", "2", "]", ")", ".", "float", "(", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "idx", "]", "\n", "padded_seqs", "[", "idx", ",", ":", "end", "]", "=", "seq", "\n", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "", "def", "pad_regtopk_sequences", "(", "sequences", ")", ":", "\n", "        ", "\"\"\"Implemented by jumperkables\"\"\"", "\n", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", ")", "\n", "padded_seqs", "=", "torch", ".", "zeros", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ",", "sequences", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "for", "idx", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "idx", "]", "\n", "padded_seqs", "[", "idx", ",", ":", "end", "]", "=", "seq", "\n", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "# separate source and target sequences", "\n", "", "column_data", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "text_keys", "=", "[", "\"q\"", ",", "\"a0\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ",", "\"a4\"", ",", "\"sub\"", ",", "\"vcpt\"", "]", "\n", "label_key", "=", "\"answer_idx\"", "\n", "qid_key", "=", "\"qid\"", "\n", "vid_name_key", "=", "\"vid_name\"", "\n", "vid_feat_key", "=", "\"vid\"", "\n", "reg_feat_key", "=", "\"reg\"", "\n", "reg_topk_key", "=", "\"regtopk\"", "\n", "all_keys", "=", "text_keys", "+", "[", "label_key", ",", "qid_key", ",", "vid_name_key", ",", "vid_feat_key", ",", "reg_feat_key", ",", "reg_topk_key", "]", "\n", "all_values", "=", "[", "]", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "all_keys", ")", ":", "\n", "        ", "if", "k", "in", "text_keys", ":", "\n", "            ", "all_values", ".", "append", "(", "pad_sequences", "(", "column_data", "[", "i", "]", ")", ")", "\n", "", "elif", "k", "==", "label_key", ":", "\n", "            ", "all_values", ".", "append", "(", "torch", ".", "LongTensor", "(", "column_data", "[", "i", "]", ")", ")", "\n", "", "elif", "k", "==", "vid_feat_key", ":", "\n", "            ", "all_values", ".", "append", "(", "pad_video_sequences", "(", "column_data", "[", "i", "]", ")", ")", "\n", "", "elif", "k", "==", "reg_feat_key", ":", "\n", "            ", "all_values", ".", "append", "(", "pad_regional_sequences", "(", "column_data", "[", "i", "]", ")", ")", "\n", "", "elif", "k", "==", "reg_topk_key", ":", "\n", "            ", "all_values", ".", "append", "(", "pad_regtopk_sequences", "(", "column_data", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_values", ".", "append", "(", "column_data", "[", "i", "]", ")", "\n", "\n", "", "", "batched_data", "=", "Batch", ".", "get_batch", "(", "keys", "=", "all_keys", ",", "values", "=", "all_values", ")", "\n", "return", "batched_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.preprocess_inputs": [[428, 455], ["getattr", "target_data.to.to", "getattr", "getattr", "min", "model_in_list.extend", "model_in_list.extend", "ctx.size", "ctx.size", "ctx_l.clamp.clamp", "ctx.to", "ctx_l.clamp.to", "v[].to", "v[].to"], "function", ["None"], ["", "def", "preprocess_inputs", "(", "batched_data", ",", "max_sub_l", ",", "max_vcpt_l", ",", "max_vid_l", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "    ", "\"\"\"clip and move to target device\"\"\"", "\n", "# imagenet in preprocessing to figure out how to do the same for regional feautes", "\n", "max_len_dict", "=", "{", "\"sub\"", ":", "max_sub_l", ",", "\"vcpt\"", ":", "max_vcpt_l", ",", "\"vid\"", ":", "max_vid_l", ",", "\"reg\"", ":", "max_vid_l", "}", "\n", "text_keys", "=", "[", "\"q\"", ",", "\"a0\"", ",", "\"a1\"", ",", "\"a2\"", ",", "\"a3\"", ",", "\"a4\"", ",", "\"sub\"", ",", "\"vcpt\"", "]", "\n", "label_key", "=", "\"answer_idx\"", "\n", "qid_key", "=", "\"qid\"", "\n", "vid_feat_key", "=", "\"vid\"", "\n", "reg_feat_key", "=", "\"reg\"", "\n", "regtopk_feat_key", "=", "\"regtopk\"", "\n", "model_in_list", "=", "[", "]", "\n", "for", "k", "in", "text_keys", "+", "[", "vid_feat_key", ",", "reg_feat_key", ",", "regtopk_feat_key", "]", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "        ", "v", "=", "getattr", "(", "batched_data", ",", "k", ")", "\n", "if", "k", "in", "max_len_dict", ":", "\n", "            ", "ctx", ",", "ctx_l", "=", "v", "\n", "max_l", "=", "min", "(", "ctx", ".", "size", "(", "1", ")", ",", "max_len_dict", "[", "k", "]", ")", "\n", "if", "ctx", ".", "size", "(", "1", ")", ">", "max_l", ":", "\n", "                ", "ctx_l", "=", "ctx_l", ".", "clamp", "(", "min", "=", "1", ",", "max", "=", "max_l", ")", "\n", "ctx", "=", "ctx", "[", ":", ",", ":", "max_l", "]", "\n", "", "model_in_list", ".", "extend", "(", "[", "ctx", ".", "to", "(", "device", ")", ",", "ctx_l", ".", "to", "(", "device", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "model_in_list", ".", "extend", "(", "[", "v", "[", "0", "]", ".", "to", "(", "device", ")", ",", "v", "[", "1", "]", ".", "to", "(", "device", ")", "]", ")", "\n", "", "", "target_data", "=", "getattr", "(", "batched_data", ",", "label_key", ")", "\n", "target_data", "=", "target_data", ".", "to", "(", "device", ")", "\n", "qid_data", "=", "getattr", "(", "batched_data", ",", "qid_key", ")", "\n", "return", "model_in_list", ",", "target_data", ",", "qid_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.read_json_lines": [[8, 15], ["open", "f.readlines", "json.loads", "lines.append", "l.strip"], "function", ["None"], ["def", "read_json_lines", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "[", "]", "\n", "for", "l", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "loaded_l", "=", "json", ".", "loads", "(", "l", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "lines", ".", "append", "(", "loaded_l", ")", "\n", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_json": [[17, 20], ["open", "json.dump"], "function", ["None"], ["", "def", "save_json", "(", "data", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_json_pretty": [[22, 26], ["open", "f.write", "json.dumps"], "function", ["None"], ["", "", "def", "save_json_pretty", "(", "data", ",", "file_path", ")", ":", "\n", "    ", "\"\"\"save formatted json, use this one for some json config files\"\"\"", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "data", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_json": [[28, 31], ["open", "json.load"], "function", ["None"], ["", "", "def", "load_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle": [[33, 36], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pickle", "(", "data", ",", "data_path", ")", ":", "\n", "    ", "with", "open", "(", "data_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle": [[38, 41], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.mkdirp": [[43, 46], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdirp", "(", "p", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.files_exist": [[48, 54], ["os.path.exists"], "function", ["None"], ["", "", "def", "files_exist", "(", "filepath_list", ")", ":", "\n", "    ", "\"\"\"check whether all the files exist\"\"\"", "\n", "for", "ele", "in", "filepath_list", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "ele", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.merge_two_dicts": [[57, 61], ["x.copy", "x.copy.update"], "function", ["None"], ["", "def", "merge_two_dicts", "(", "x", ",", "y", ")", ":", "\n", "    ", "z", "=", "x", ".", "copy", "(", ")", "# start with x's keys and values", "\n", "z", ".", "update", "(", "y", ")", "# modifies z with y's keys and values & returns None", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.rubi_criterion.RUBiCriterion.__init__": [[41, 47], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "question_loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "question_loss_weight", "=", "question_loss_weight", "\n", "self", ".", "fusion_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "size_average", "=", "False", ")", "\n", "self", ".", "question_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "size_average", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.rubi_criterion.RUBiCriterion.forward": [[48, 62], ["rubi_criterion.RUBiCriterion.fusion_loss", "rubi_criterion.RUBiCriterion.question_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "net_out", ",", "batch", ")", ":", "\n", "        ", "out", "=", "{", "}", "\n", "# logits = net_out['logits']", "\n", "logits_q", "=", "net_out", "[", "'logits_q'", "]", "\n", "logits_rubi", "=", "net_out", "[", "'logits_rubi'", "]", "\n", "class_id", "=", "batch", "[", "'class_id'", "]", "#.squeeze(1)", "\n", "fusion_loss", "=", "self", ".", "fusion_loss", "(", "logits_rubi", ",", "class_id", ")", "\n", "question_loss", "=", "self", ".", "question_loss", "(", "logits_q", ",", "class_id", ")", "\n", "loss", "=", "fusion_loss", "+", "self", ".", "question_loss_weight", "*", "question_loss", "\n", "\n", "out", "[", "'loss'", "]", "=", "loss", "\n", "out", "[", "'loss_mm_q'", "]", "=", "fusion_loss", "\n", "out", "[", "'loss_q'", "]", "=", "question_loss", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.save_dataset_dicts_by_qid.dset2dict": [[9, 15], ["enumerate", "utils.save_pickle", "print", "os.path.expanduser"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle"], ["def", "dset2dict", "(", "dset", ",", "name", ")", ":", "\n", "    ", "dset_dict", "=", "{", "}", "\n", "for", "idx", ",", "question", "in", "enumerate", "(", "dset", ")", ":", "\n", "        ", "dset_dict", "[", "question", "[", "'qid'", "]", "]", "=", "question", "\n", "", "save_pickle", "(", "dset_dict", ",", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/\"", "+", "name", "+", "\"_dict.pickle\"", ")", ")", "\n", "print", "(", "name", ",", "\"Done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.validate.validate": [[24, 126], ["dset.set_mode", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "torch.utils.data.DataLoader", "enumerate", "print", "save_pickle", "BertTokenizer.from_pretrained", "load_pickle", "print", "tvqa_dataset.preprocess_inputs", "pred_ids.eq().cpu().numpy().tolist", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "range", "sum", "float", "round", "model", "outputs.data.max", "getattr", "getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "opt.input_streams.remove", "pred_ids.eq().cpu().numpy", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "torch.cat.cpu().squeeze", "targets.cpu().float().unsqueeze", "pred_ids.cpu().float().unsqueeze", "BertTokenizer.from_pretrained.decode", "BertTokenizer.from_pretrained.decode", "len", "pred_ids.eq().cpu", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "torch.cat.cpu", "targets.cpu().float", "pred_ids.cpu().float", "int", "int", "int", "int", "int", "int", "pred_ids.eq", "int", "int", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu", "targets.cpu", "pred_ids.cpu"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.TVQADataset.set_mode", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.save_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.tvqa_dataset.preprocess_inputs"], ["def", "validate", "(", "opt", ",", "dset", ",", "model", ",", "mode", "=", "\"valid\"", ")", ":", "\n", "    ", "dset", ".", "set_mode", "(", "opt", ".", "dset", ")", "# Change mode to training here", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dset", ",", "batch_size", "=", "opt", ".", "test_bsz", ",", "shuffle", "=", "True", ",", "collate_fn", "=", "pad_collate", ")", "\n", "if", "opt", ".", "bert", "!=", "None", ":", "\n", "        ", "bert_tok", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "else", ":", "\n", "# Word embedding lookup GloVE", "\n", "        ", "from", "utils", "import", "load_pickle", "\n", "idx2word", "=", "load_pickle", "(", "opt", ".", "idx2word_path", ")", "\n", "#valid_qids = []", "\n", "", "lanecheck_dict", "=", "{", "}", "\n", "valid_corrects", "=", "[", "]", "\n", "if", "opt", ".", "disable_streams", "is", "not", "None", ":", "\n", "        ", "for", "d_stream", "in", "opt", ".", "disable_streams", ":", "\n", "            ", "if", "d_stream", "in", "opt", ".", "input_streams", ":", "\n", "                ", "opt", ".", "input_streams", ".", "remove", "(", "d_stream", ")", "\n", "", "", "", "else", ":", "\n", "        ", "opt", ".", "disable_streams", "=", "[", "]", "\n", "", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "        ", "print", "(", "round", "(", "batch_idx", "/", "len", "(", "valid_loader", ")", "*", "100", ",", "2", ")", ",", "\"percent complete\"", ")", "\n", "model_inputs", ",", "targets", ",", "qids", "=", "preprocess_inputs", "(", "batch", ",", "opt", ".", "max_sub_l", ",", "opt", ".", "max_vcpt_l", ",", "opt", ".", "max_vid_l", ",", "\n", "device", "=", "opt", ".", "device", ")", "\n", "if", "opt", ".", "lanecheck", ":", "\n", "            ", "sub_out", ",", "vcpt_out", ",", "vid_out", ",", "reg_out", ",", "regtopk_out", ",", "outputs", "=", "model", "(", "*", "model_inputs", ")", "\n", "", "pred_ids", "=", "outputs", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "valid_corrects", "+=", "pred_ids", ".", "eq", "(", "targets", ".", "data", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "#valid_qids += [int(x) for x in qids]", "\n", "\n", "batch_q", ",", "_", "=", "getattr", "(", "batch", ",", "'q'", ")", "\n", "batch_a0", ",", "_", "=", "getattr", "(", "batch", ",", "'a0'", ")", "\n", "batch_a1", ",", "_", "=", "getattr", "(", "batch", ",", "'a1'", ")", "\n", "batch_a2", ",", "_", "=", "getattr", "(", "batch", ",", "'a2'", ")", "\n", "batch_a3", ",", "_", "=", "getattr", "(", "batch", ",", "'a3'", ")", "\n", "batch_a4", ",", "_", "=", "getattr", "(", "batch", ",", "'a4'", ")", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "batch_sub", ",", "_", "=", "getattr", "(", "batch", ",", "'sub'", ")", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "batch_vcpt", ",", "_", "=", "getattr", "(", "batch", ",", "'vcpt'", ")", "\n", "\n", "# Add the ground truth to the end of each output response, and then the predicted ID for the question after that", "\n", "", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "sub_out", "=", "torch", ".", "cat", "(", "(", "sub_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "vcpt_out", "=", "torch", ".", "cat", "(", "(", "vcpt_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "'imagenet'", "in", "opt", ".", "input_streams", ":", "\n", "            ", "vid_out", "=", "torch", ".", "cat", "(", "(", "vid_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "(", "'regional'", "in", "opt", ".", "input_streams", ")", "and", "opt", ".", "regional_topk", "==", "-", "1", ":", "\n", "            ", "reg_out", "=", "torch", ".", "cat", "(", "(", "reg_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "if", "opt", ".", "regional_topk", "!=", "-", "1", ":", "\n", "            ", "regtopk_out", "=", "torch", ".", "cat", "(", "(", "regtopk_out", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "pred_ids", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Add them to the lanecheck dictionary", "\n", "", "for", "id_idx", "in", "range", "(", "len", "(", "qids", ")", ")", ":", "\n", "            ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "=", "{", "}", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'sub_out'", "]", "=", "sub_out", "[", "id_idx", "]", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vcpt_out'", "]", "=", "vcpt_out", "[", "id_idx", "]", "\n", "", "if", "'imagenet'", "in", "opt", ".", "input_streams", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vid_out'", "]", "=", "vid_out", "[", "id_idx", "]", "\n", "", "if", "(", "'regional'", "in", "opt", ".", "input_streams", ")", "and", "opt", ".", "regional_topk", "==", "-", "1", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'reg_out'", "]", "=", "reg_out", "[", "id_idx", "]", "\n", "", "if", "opt", ".", "regional_topk", "!=", "-", "1", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'regtopk_out'", "]", "=", "regtopk_out", "[", "id_idx", "]", "\n", "\n", "#Vcpt", "\n", "#decode from bert", "\n", "", "if", "opt", ".", "bert", "!=", "None", ":", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'q'", "]", "=", "bert_tok", ".", "decode", "(", "batch_q", "[", "id_idx", "]", ")", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a0'", "]", "=", "bert_tok", ".", "decode", "(", "batch_a0", "[", "id_idx", "]", ")", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a1'", "]", "=", "bert_tok", ".", "decode", "(", "batch_a1", "[", "id_idx", "]", ")", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a2'", "]", "=", "bert_tok", ".", "decode", "(", "batch_a2", "[", "id_idx", "]", ")", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a3'", "]", "=", "bert_tok", ".", "decode", "(", "batch_a3", "[", "id_idx", "]", ")", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a4'", "]", "=", "bert_tok", ".", "decode", "(", "batch_a4", "[", "id_idx", "]", ")", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "                    ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'sub'", "]", "=", "bert_tok", ".", "decode", "(", "batch_sub", "[", "id_idx", "]", ")", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "                    ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vcpt'", "]", "=", "bert_tok", ".", "decode", "(", "batch_vcpt", "[", "id_idx", "]", ")", "\n", "", "", "else", ":", "\n", "# Decode from GloVE", "\n", "#idx2word", "\n", "                ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'q'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_q", "[", "id_idx", "]", "]", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a0'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_a0", "[", "id_idx", "]", "]", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a1'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_a1", "[", "id_idx", "]", "]", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a2'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_a2", "[", "id_idx", "]", "]", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a3'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_a3", "[", "id_idx", "]", "]", "\n", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'a4'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_a4", "[", "id_idx", "]", "]", "\n", "if", "'sub'", "in", "opt", ".", "input_streams", ":", "\n", "                    ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'sub'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_sub", "[", "id_idx", "]", "]", "\n", "", "if", "'vcpt'", "in", "opt", ".", "input_streams", ":", "\n", "                    ", "lanecheck_dict", "[", "qids", "[", "id_idx", "]", "]", "[", "'vcpt'", "]", "=", "[", "idx2word", "[", "int", "(", "word", ")", "]", "for", "word", "in", "batch_vcpt", "[", "id_idx", "]", "]", "\n", "\n", "", "", "", "", "valid_acc", "=", "sum", "(", "valid_corrects", ")", "/", "float", "(", "len", "(", "valid_corrects", ")", ")", "\n", "lanecheck_dict", "[", "'valid_acc'", "]", "=", "valid_acc", "\n", "print", "(", "'valid acc'", ",", "valid_acc", ")", "\n", "from", "utils", "import", "save_pickle", "\n", "save_pickle", "(", "lanecheck_dict", ",", "opt", ".", "lanecheck_path", "+", "'_'", "+", "opt", ".", "dset", ")", "\n", "return", "valid_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.BaseOptions.__init__": [[17, 21], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "opt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.BaseOptions.initialize": [[22, 26], ["violin_plot_old.BaseOptions.parser.add_argument", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\"--lanecheck_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid\"", ")", ",", "\n", "help", "=", "\"Validation lane check path\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.BaseOptions.parse": [[27, 34], ["violin_plot_old.BaseOptions.parser.parse_args", "violin_plot_old.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"parse cmd line arguments and do some preprocessing\"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.confusion_matrix_tn_fn": [[35, 45], ["None"], "function", ["None"], ["", "", "def", "confusion_matrix_tn_fn", "(", "a_idx", ",", "ground_truth", ",", "prediciton", ")", ":", "\n", "# if(a_idx == ground_truth) and (a_idx == prediciton):", "\n", "#     return('True Positive')", "\n", "# if(a_idx != ground_truth) and (a_idx == prediciton):", "\n", "#     return('False Positive')", "\n", "    ", "if", "(", "a_idx", "==", "ground_truth", ")", "and", "(", "a_idx", "!=", "prediciton", ")", ":", "\n", "        ", "return", "(", "'False Negative'", ")", "\n", "", "if", "(", "a_idx", "!=", "ground_truth", ")", "and", "(", "a_idx", "!=", "prediciton", ")", ":", "\n", "        ", "return", "(", "'True Negative'", ")", "\n", "", "return", "(", "'Ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.confusion_matrix_tp_fp": [[46, 56], ["None"], "function", ["None"], ["", "def", "confusion_matrix_tp_fp", "(", "a_idx", ",", "ground_truth", ",", "prediciton", ")", ":", "\n", "    ", "if", "(", "a_idx", "==", "ground_truth", ")", "and", "(", "a_idx", "==", "prediciton", ")", ":", "\n", "        ", "return", "(", "'True Positive'", ")", "\n", "", "if", "(", "a_idx", "!=", "ground_truth", ")", "and", "(", "a_idx", "==", "prediciton", ")", ":", "\n", "        ", "return", "(", "'False Positive'", ")", "\n", "# if(a_idx == ground_truth) and (a_idx != prediciton):", "\n", "#     return('False Negative')", "\n", "# if(a_idx != ground_truth) and (a_idx != prediciton):", "\n", "#     return('True Negative')", "\n", "", "return", "(", "'Ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot_old.one_plot": [[60, 174], ["seaborn.set", "utils.load_pickle", "random.choice", "utils.load_pickle.items", "seaborn.set", "seaborn.set_style", "matplotlib.subplots", "x_labels.append", "print", "print", "pandas.DataFrame", "seaborn.violinplot", "matplotlib.title", "matplotlib.show", "list", "random.choice.get", "random.choice.get", "random.choice.get", "random.choice.get", "random.choice.get", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "x_labels.append", "x_labels.append", "x_labels.append", "x_labels.append", "utils.load_pickle.values", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "seaborn.light_palette", "seaborn.light_palette", "seaborn.light_palette", "seaborn.light_palette", "violin_plot_old.confusion_matrix_tn_fn", "enumerate", "violin_plot_old.confusion_matrix_tn_fn", "enumerate", "violin_plot_old.confusion_matrix_tn_fn", "enumerate", "violin_plot_old.confusion_matrix_tn_fn", "enumerate"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tn_fn", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tn_fn", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tn_fn", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tn_fn"], ["", "def", "one_plot", "(", "opt", ")", ":", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ",", "palette", "=", "\"pastel\"", ",", "color_codes", "=", "True", ")", "\n", "# Font settings for plot", "\n", "import", "matplotlib", "\n", "# matplotlib.rc('font', family='sans-serif') ", "\n", "# matplotlib.rc('font', serif='Helvetica Neue') ", "\n", "# matplotlib.rc('text', usetex='false') ", "\n", "# matplotlib.rcParams['font.family'] = 'cursive'", "\n", "\n", "# Load dictionary", "\n", "lanecheck_dict", "=", "utils", ".", "load_pickle", "(", "opt", ".", "lanecheck_path", ")", "\n", "\n", "# Lanecheck out", "\n", "sub_out", "=", "[", "]", "\n", "vcpt_out", "=", "[", "]", "\n", "vid_out", "=", "[", "]", "\n", "reg_out", "=", "[", "]", "\n", "regtopk_out", "=", "[", "]", "\n", "\n", "# Check what out features are needed", "\n", "sub_flag", "=", "True", "\n", "vcpt_flag", "=", "True", "\n", "vid_flag", "=", "True", "\n", "reg_flag", "=", "True", "\n", "regtopk_flag", "=", "True", "\n", "check", "=", "random", ".", "choice", "(", "list", "(", "lanecheck_dict", ".", "values", "(", ")", ")", ")", "\n", "if", "check", ".", "get", "(", "'sub_out'", ")", "is", "None", ":", "\n", "        ", "sub_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'vcpt_out'", ")", "is", "None", ":", "\n", "        ", "vcpt_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'vid_out'", ")", "is", "None", ":", "\n", "        ", "vid_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'reg_out'", ")", "is", "None", ":", "\n", "        ", "reg_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'regtopk_out'", ")", "is", "None", ":", "\n", "        ", "regtopk_flag", "=", "False", "\n", "\n", "# Iterate through the lanecheck items", "\n", "", "del", "lanecheck_dict", "[", "'acc'", "]", "\n", "for", "qid", ",", "q_dict", "in", "lanecheck_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "sub_flag", ":", "\n", "            ", "sub_out", ".", "append", "(", "q_dict", "[", "'sub_out'", "]", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "            ", "vcpt_out", ".", "append", "(", "q_dict", "[", "'vcpt_out'", "]", ")", "\n", "", "if", "vid_flag", ":", "\n", "            ", "vid_out", ".", "append", "(", "q_dict", "[", "'vid_out'", "]", ")", "\n", "", "if", "reg_flag", ":", "\n", "            ", "reg_out", ".", "append", "(", "q_dict", "[", "'reg_out'", "]", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "            ", "regtopk_out", ".", "append", "(", "q_dict", "[", "'regtopk_out'", "]", ")", "\n", "", "", "if", "sub_flag", ":", "\n", "        ", "sub_out", "=", "np", ".", "stack", "(", "sub_out", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "        ", "vcpt_out", "=", "np", ".", "stack", "(", "vcpt_out", ")", "\n", "", "if", "vid_flag", ":", "\n", "        ", "vid_out", "=", "np", ".", "stack", "(", "vid_out", ")", "\n", "", "if", "reg_flag", ":", "\n", "        ", "reg_out", "=", "np", ".", "stack", "(", "reg_out", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "        ", "regtopk_out", "=", "np", ".", "stack", "(", "regtopk_out", ")", "\n", "\n", "", "import", "pandas", "as", "pd", "\n", "\n", "# Plot settings", "\n", "pal_tp_fp", "=", "{", "\"True Positive\"", ":", "sns", ".", "light_palette", "(", "\"green\"", ")", "[", "1", "]", ",", "\"False Positive\"", ":", "sns", ".", "light_palette", "(", "\"red\"", ")", "[", "1", "]", "}", "\n", "pal_tn_fn", "=", "{", "\"True Negative\"", ":", "sns", ".", "light_palette", "(", "\"red\"", ")", "[", "1", "]", ",", "\"False Negative\"", ":", "sns", ".", "light_palette", "(", "\"orange\"", ")", "[", "1", "]", "}", "\n", "plot_no", "=", "1", "\n", "\n", "sns", ".", "set", "(", "font_scale", "=", "3.0", ")", "\n", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "x_labels", "=", "[", "]", "\n", "if", "sub_flag", ":", "\n", "        ", "sub_out", "=", "[", "(", "'Subtitles'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tn_fn", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "sub_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "sub_out", "=", "[", "element", "for", "element", "in", "sub_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Subtitles'", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "        ", "vcpt_out", "=", "[", "(", "'Visual Concepts'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tn_fn", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "vcpt_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "vcpt_out", "=", "[", "element", "for", "element", "in", "vcpt_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Visual Concepts'", ")", "\n", "", "if", "vid_flag", ":", "\n", "        ", "vid_out", "=", "[", "(", "'ImageNet'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tn_fn", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "vid_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "vid_out", "=", "[", "element", "for", "element", "in", "vid_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'ImageNet'", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "        ", "regtopk_out", "=", "[", "(", "'Regional Features'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tn_fn", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "regtopk_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "regtopk_out", "=", "[", "element", "for", "element", "in", "regtopk_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Regional Features'", ")", "\n", "", "x_labels", ".", "append", "(", "'Nothing inparticular'", ")", "\n", "#plt.xticks([])", "\n", "data", "=", "[", "]", "\n", "data", "+=", "[", "(", "''", ",", "38", ",", "1", ",", "1", ",", "\"True Negative\"", ")", "]", "\n", "data", "+=", "[", "(", "'1'", ",", "-", "7", ",", "1", ",", "1", ",", "\"True Negative\"", ")", "]", "\n", "data", "+=", "sub_out", "\n", "data", "+=", "vcpt_out", "\n", "data", "+=", "vid_out", "\n", "data", "+=", "regtopk_out", "\n", "\n", "maxx", "=", "0", "\n", "minn", "=", "0", "\n", "for", "dtuple", "in", "data", ":", "\n", "        ", "if", "maxx", "<", "dtuple", "[", "1", "]", ":", "\n", "            ", "maxx", "=", "dtuple", "[", "1", "]", "\n", "", "if", "minn", ">", "dtuple", "[", "1", "]", ":", "\n", "            ", "minn", "=", "dtuple", "[", "1", "]", "\n", "", "", "print", "(", "maxx", ")", "\n", "print", "(", "minn", ")", "\n", "\n", "# data += [('', 38.594997, 1, 1, \"False Positive\")]", "\n", "#data += [('1', -5.7718792, 1, 1, \"False Positive\")]", "\n", "data", "=", "pd", ".", "DataFrame", "(", "data", ",", "columns", "=", "[", "''", ",", "'Vote Contribution'", ",", "'ground_truth'", ",", "'prediction'", ",", "'Answer Type'", "]", ")", "\n", "sns", ".", "violinplot", "(", "data", "=", "data", ",", "palette", "=", "pal_tn_fn", ",", "inner", "=", "\"quart\"", ",", "linewidth", "=", "2.5", ",", "hue", "=", "'Answer Type'", ",", "x", "=", "''", ",", "y", "=", "'Vote Contribution'", ",", "split", "=", "True", ",", "legend", "=", "False", ",", "legend_out", "=", "True", ")", "\n", "plt", ".", "title", "(", "'SVIR Trained Model'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.lanecheck_on_models.off_streams": [[10, 76], ["filey.items", "print", "answers.index", "max"], "function", ["None"], ["def", "off_streams", "(", "filey", ",", "args", ")", ":", "\n", "    ", "del", "filey", "[", "'acc'", "]", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# Initialise all streams", "\n", "vcpt_flag", "=", "False", "\n", "sub_flag", "=", "False", "\n", "imagenet_flag", "=", "False", "\n", "regtopk_flag", "=", "False", "\n", "\n", "# Turn on all relevant streams", "\n", "if", "'vcpt'", "in", "args", ".", "input_streams", ":", "\n", "        ", "vcpt_flag", "=", "True", "\n", "", "if", "'sub'", "in", "args", ".", "input_streams", ":", "\n", "        ", "sub_flag", "=", "True", "\n", "", "if", "'imagenet'", "in", "args", ".", "input_streams", ":", "\n", "        ", "imagenet_flag", "=", "True", "\n", "", "if", "(", "'regional'", "in", "args", ".", "input_streams", ")", "and", "(", "args", ".", "regional_topk", "!=", "-", "1", ")", ":", "\n", "        ", "regtopk_flag", "=", "True", "\n", "\n", "# Turn off all disabled streams", "\n", "", "if", "'vcpt'", "in", "args", ".", "off_streams", ":", "\n", "        ", "vcpt_flag", "=", "False", "\n", "", "if", "'sub'", "in", "args", ".", "off_streams", ":", "\n", "        ", "sub_flag", "=", "False", "\n", "", "if", "'imagenet'", "in", "args", ".", "off_streams", ":", "\n", "        ", "imagenet_flag", "=", "False", "\n", "", "if", "(", "'regional'", "in", "args", ".", "off_streams", ")", "and", "(", "args", ".", "regional_topk", "!=", "-", "1", ")", ":", "\n", "        ", "regtopk_flag", "=", "False", "\n", "\n", "# Aggregate all responses", "\n", "", "for", "q_dict", "in", "filey", ".", "items", "(", ")", ":", "\n", "        ", "answers", "=", "[", "0", "]", "*", "5", "\n", "ground_truth", "=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "5", "]", "\n", "if", "vcpt_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "1", "]", "[", "'vcpt_out'", "]", "[", "4", "]", "\n", "", "if", "sub_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "1", "]", "[", "'sub_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "1", "]", "[", "'sub_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "1", "]", "[", "'sub_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "1", "]", "[", "'sub_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "1", "]", "[", "'sub_out'", "]", "[", "4", "]", "\n", "", "if", "imagenet_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "1", "]", "[", "'vid_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "1", "]", "[", "'vid_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "1", "]", "[", "'vid_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "1", "]", "[", "'vid_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "1", "]", "[", "'vid_out'", "]", "[", "4", "]", "\n", "", "if", "regtopk_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "1", "]", "[", "'regtopk_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "1", "]", "[", "'regtopk_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "1", "]", "[", "'regtopk_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "1", "]", "[", "'regtopk_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "1", "]", "[", "'regtopk_out'", "]", "[", "4", "]", "\n", "\n", "# The predicted answer from all wanted lanes", "\n", "", "guess", "=", "answers", ".", "index", "(", "max", "(", "answers", ")", ")", "\n", "if", "guess", "==", "ground_truth", ":", "\n", "            ", "correct", "+=", "1", "\n", "", "total", "+=", "1", "\n", "", "print", "(", "correct", "*", "100", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.create_q_type_dict": [[16, 96], ["enumerate", "word.lower", "question_dict[].split"], "function", ["None"], ["def", "create_q_type_dict", "(", "dset", ",", "name", ")", ":", "\n", "    ", "what_dict", "=", "{", "'after'", ":", "{", "}", ",", "'when'", ":", "{", "}", ",", "'before'", ":", "{", "}", ",", "'other'", ":", "{", "}", "}", "# Potentially do multiple for if multiple of these clauses are used, for now just take first", "\n", "who_dict", "=", "{", "'after'", ":", "{", "}", ",", "'when'", ":", "{", "}", ",", "'before'", ":", "{", "}", ",", "'other'", ":", "{", "}", "}", "\n", "why_dict", "=", "{", "'after'", ":", "{", "}", ",", "'when'", ":", "{", "}", ",", "'before'", ":", "{", "}", ",", "'other'", ":", "{", "}", "}", "\n", "where_dict", "=", "{", "'after'", ":", "{", "}", ",", "'when'", ":", "{", "}", ",", "'before'", ":", "{", "}", ",", "'other'", ":", "{", "}", "}", "\n", "how_dict", "=", "{", "'after'", ":", "{", "}", ",", "'when'", ":", "{", "}", ",", "'before'", ":", "{", "}", ",", "'other'", ":", "{", "}", "}", "\n", "which_dict", "=", "{", "}", "\n", "other_dict", "=", "{", "}", "# Anything that fails to classify by first word goes here", "\n", "\n", "# Iterate over questions and check, qid:question in each type", "\n", "for", "idx", ",", "question_dict", "in", "enumerate", "(", "dset", ")", ":", "\n", "        ", "question", "=", "[", "word", ".", "lower", "(", ")", "for", "word", "in", "question_dict", "[", "'q'", "]", ".", "split", "(", ")", "]", "\n", "if", "question", "[", "0", "]", "==", "'what'", ":", "\n", "            ", "if", "'when'", "in", "question", ":", "\n", "                ", "what_dict", "[", "'when'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'before'", "in", "question", ":", "\n", "                ", "what_dict", "[", "'before'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'after'", "in", "question", ":", "\n", "                ", "what_dict", "[", "'after'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "else", ":", "\n", "                ", "what_dict", "[", "'other'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "", "elif", "question", "[", "0", "]", "==", "'who'", ":", "\n", "            ", "if", "'when'", "in", "question", ":", "\n", "                ", "who_dict", "[", "'when'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'before'", "in", "question", ":", "\n", "                ", "who_dict", "[", "'before'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'after'", "in", "question", ":", "\n", "                ", "who_dict", "[", "'after'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "else", ":", "\n", "                ", "who_dict", "[", "'other'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "", "elif", "question", "[", "0", "]", "==", "'why'", ":", "\n", "            ", "if", "'when'", "in", "question", ":", "\n", "                ", "why_dict", "[", "'when'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'before'", "in", "question", ":", "\n", "                ", "why_dict", "[", "'before'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'after'", "in", "question", ":", "\n", "                ", "why_dict", "[", "'after'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "else", ":", "\n", "                ", "why_dict", "[", "'other'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "", "elif", "question", "[", "0", "]", "==", "'where'", ":", "\n", "            ", "if", "'when'", "in", "question", ":", "\n", "                ", "where_dict", "[", "'when'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'before'", "in", "question", ":", "\n", "                ", "where_dict", "[", "'before'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'after'", "in", "question", ":", "\n", "                ", "where_dict", "[", "'after'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "else", ":", "\n", "                ", "where_dict", "[", "'other'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "", "elif", "question", "[", "0", "]", "==", "'how'", ":", "\n", "            ", "if", "'when'", "in", "question", ":", "\n", "                ", "how_dict", "[", "'when'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'before'", "in", "question", ":", "\n", "                ", "how_dict", "[", "'before'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "elif", "'after'", "in", "question", ":", "\n", "                ", "how_dict", "[", "'after'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "", "else", ":", "\n", "                ", "how_dict", "[", "'other'", "]", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "", "elif", "question", "[", "0", "]", "==", "'which'", ":", "\n", "            ", "which_dict", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "", "else", ":", "\n", "            ", "other_dict", "[", "question_dict", "[", "'qid'", "]", "]", "=", "question_dict", "\n", "\n", "# Create the overall question type dictionary and save", "\n", "", "", "q_type_dict", "=", "{", "\n", "'what'", ":", "what_dict", ",", "\n", "'who'", ":", "who_dict", ",", "\n", "'why'", ":", "why_dict", ",", "\n", "'where'", ":", "where_dict", ",", "\n", "'how'", ":", "how_dict", ",", "\n", "'which'", ":", "which_dict", ",", "\n", "'other'", ":", "other_dict", "\n", "}", "\n", "#save_pickle(q_type_dict, os.path.expanduser(\"~/kable_management/data/tvqa/q_type/\"+name+\"_q_type_dict.pickle\"))", "\n", "return", "q_type_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.plot_qtype_dict": [[97, 176], ["len", "len", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.rcParams.update", "matplotlib.subplots", "ax.axis", "matplotlib.get_cmap", "plt.get_cmap.", "ax.pie", "matplotlib.setp", "matplotlib.get_cmap", "plt.get_cmap.", "ax.pie", "matplotlib.setp", "matplotlib.title", "ax.legend", "matplotlib.show", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "Line2D", "Line2D", "Line2D", "str", "str", "str", "str", "str", "str", "str", "plt.get_cmap.", "plt.get_cmap.", "plt.get_cmap.", "round", "round", "round", "round", "round", "round", "round", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "function", ["None"], ["", "def", "plot_qtype_dict", "(", "qtype_dict", ",", "name", ",", "jobname", ")", ":", "\n", "# Get the counts of each question type and sub-type", "\n", "    ", "what_after", ",", "what_before", ",", "what_when", ",", "what_other", "=", "len", "(", "qtype_dict", "[", "'what'", "]", "[", "'after'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'what'", "]", "[", "'before'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'what'", "]", "[", "'when'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'what'", "]", "[", "'other'", "]", ")", "\n", "who_after", ",", "who_before", ",", "who_when", ",", "who_other", "=", "len", "(", "qtype_dict", "[", "'who'", "]", "[", "'after'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'who'", "]", "[", "'before'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'who'", "]", "[", "'when'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'who'", "]", "[", "'other'", "]", ")", "\n", "why_after", ",", "why_before", ",", "why_when", ",", "why_other", "=", "len", "(", "qtype_dict", "[", "'why'", "]", "[", "'after'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'why'", "]", "[", "'before'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'why'", "]", "[", "'when'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'why'", "]", "[", "'other'", "]", ")", "\n", "where_after", ",", "where_before", ",", "where_when", ",", "where_other", "=", "len", "(", "qtype_dict", "[", "'where'", "]", "[", "'after'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'where'", "]", "[", "'before'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'where'", "]", "[", "'when'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'where'", "]", "[", "'other'", "]", ")", "\n", "how_after", ",", "how_before", ",", "how_when", ",", "how_other", "=", "len", "(", "qtype_dict", "[", "'how'", "]", "[", "'after'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'how'", "]", "[", "'before'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'how'", "]", "[", "'when'", "]", ")", ",", "len", "(", "qtype_dict", "[", "'how'", "]", "[", "'other'", "]", ")", "\n", "\n", "what", "=", "what_after", "+", "what_before", "+", "what_when", "+", "what_other", "\n", "who", "=", "who_after", "+", "who_before", "+", "who_when", "+", "who_other", "\n", "why", "=", "why_after", "+", "why_before", "+", "why_when", "+", "why_other", "\n", "where", "=", "where_after", "+", "where_before", "+", "where_when", "+", "where_other", "\n", "how", "=", "how_after", "+", "how_before", "+", "how_when", "+", "how_other", "\n", "which", "=", "len", "(", "qtype_dict", "[", "'which'", "]", ")", "\n", "other", "=", "len", "(", "qtype_dict", "[", "'other'", "]", ")", "\n", "\n", "# Plot details", "\n", "####### Font", "\n", "import", "matplotlib", "\n", "#matplotlib.rc('xtick', labelsize=20)     ", "\n", "#matplotlib.rc('ytick', labelsize=20)", "\n", "# font = {", "\n", "#     'family' : 'sans-serif',", "\n", "#     'weight' : 'normal',", "\n", "#     'size'   : 18,", "\n", "#     #'fontname' : 'Arial'", "\n", "# }\t", "\n", "# matplotlib.rc('font', **font)", "\n", "#import ipdb; ipdb.set_trace()", "\n", "matplotlib", ".", "rc", "(", "'font'", ",", "family", "=", "'sans-serif'", ")", "\n", "matplotlib", ".", "rc", "(", "'font'", ",", "serif", "=", "'Helvetica Neue'", ")", "\n", "matplotlib", ".", "rc", "(", "'text'", ",", "usetex", "=", "'false'", ")", "\n", "matplotlib", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "18", "}", ")", "\n", "matplotlib", ".", "rcParams", "[", "'font.family'", "]", "=", "'cursive'", "\n", "#######################################", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "width", "=", "0.3", "\n", "\n", "# Outer ring", "\n", "#cm = plt.get_cmap(\"tab20b\")", "\n", "#cout = cm([0, 4, 8, 12, 16, 20, 21])", "\n", "cm", "=", "plt", ".", "get_cmap", "(", "\"Dark2\"", ")", "\n", "counts", "=", "[", "what", ",", "who", ",", "why", ",", "where", ",", "how", ",", "which", ",", "other", "]", "\n", "cout", "=", "cm", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", ",", "7", ",", "7", "]", ")", "\n", "labels", "=", "[", "\n", "'What ('", "+", "str", "(", "round", "(", "100", "*", "what", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'Who ('", "+", "str", "(", "round", "(", "100", "*", "who", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'Why ('", "+", "str", "(", "round", "(", "100", "*", "why", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'Where ('", "+", "str", "(", "round", "(", "100", "*", "where", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'How ('", "+", "str", "(", "round", "(", "100", "*", "how", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'Which ('", "+", "str", "(", "round", "(", "100", "*", "which", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", ",", "\n", "'Other ('", "+", "str", "(", "round", "(", "100", "*", "other", "/", "sum", "(", "counts", ")", ",", "1", ")", ")", "+", "'%)'", "\n", "]", "\n", "# 'Who', 'Why', 'Where', 'How', 'Which', 'Other']", "\n", "pie", ",", "_", "=", "ax", ".", "pie", "(", "counts", ",", "radius", "=", "1", ",", "labels", "=", "labels", ",", "colors", "=", "cout", ")", "\n", "plt", ".", "setp", "(", "pie", ",", "width", "=", "width", ",", "edgecolor", "=", "'white'", ")", "\n", "\n", "# Inner ring", "\n", "# cm = plt.get_cmap(\"tab20b\")", "\n", "# cin = cm([i for i in range(22)])", "\n", "cm", "=", "plt", ".", "get_cmap", "(", "\"tab20c\"", ")", "\n", "cin", "=", "cm", "(", "[", "17", ",", "18", ",", "19", ",", "0", "]", "*", "5", "+", "[", "16", ",", "16", "]", ")", "\n", "counts", "=", "[", "what_after", ",", "what_before", ",", "what_when", ",", "what_other", ",", "who_after", ",", "who_before", ",", "who_when", ",", "who_other", ",", "why_after", ",", "why_before", ",", "why_when", ",", "why_other", ",", "where_after", ",", "where_before", ",", "where_when", ",", "where_other", ",", "how_after", ",", "how_before", ",", "how_when", ",", "how_other", ",", "which", ",", "other", "]", "\n", "#labels = ['what_after', 'what_before', 'what_when', 'what_other', 'who_after', 'who_before', 'who_when', 'who_other', 'why_after', 'why_before', 'why_when', 'why_other', 'where_after', 'where_before', 'where_when', 'where_other', 'how_after', 'how_before', 'how_when', 'how_other', 'which', 'other']", "\n", "#labels = ['after', 'before', 'when', 'other', 'after', 'before', 'when', 'other', 'after', 'before', 'when', 'other', 'after', 'before', 'when', 'other', 'after', 'before', 'when', 'other', 'which', 'other']", "\n", "#labels = ['after', 'before', 'when', '', 'after', 'before', 'when', '', 'after', 'before', 'when', '', 'after', 'before', 'when', '', 'after', 'before', 'when', '', '', '']", "\n", "#labels = ['A', 'B', 'W', '']*5+['','']", "\n", "pie2", ",", "_", "=", "ax", ".", "pie", "(", "counts", ",", "radius", "=", "1", "-", "width", ",", "labeldistance", "=", "0.7", ",", "colors", "=", "cin", ")", "#labels=labels, labeldistance=0.7, colors=cin)", "\n", "plt", ".", "setp", "(", "pie2", ",", "width", "=", "width", ",", "edgecolor", "=", "'white'", ")", "\n", "plt", ".", "title", "(", "f\"{jobname} Dataset Q-Type Distribution\"", ")", "#(name+' Dataset Question Type Distribution')", "\n", "from", "matplotlib", ".", "lines", "import", "Line2D", "\n", "custom_lines", "=", "[", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "cm", "(", "17", ")", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "cm", "(", "18", ")", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "cm", "(", "19", ")", ",", "lw", "=", "4", ")", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "ax", ".", "legend", "(", "custom_lines", ",", "[", "'When'", ",", "'Before'", ",", "'After'", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "name", ",", "\"Plotted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.plot_acc_by_type": [[179, 277], ["utils.load_pickle", "utils.load_pickle", "random.choice", "random.choice.keys", "utils.load_pickle.items", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].keys", "val_qtype_dict[].keys", "matplotlib.subplots", "ax.axis", "matplotlib.get_cmap", "plt.get_cmap.", "ax.pie", "matplotlib.setp", "plt.get_cmap.", "ax.pie", "matplotlib.setp", "matplotlib.title", "matplotlib.show", "print", "os.path.expanduser", "list", "round", "utils.load_pickle.values", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "plot_acc_by_type", "(", "args", ",", "model_name", ")", ":", "\n", "    ", "val_qtype_dict", "=", "load_pickle", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/q_type/val_q_type_dict.pickle\"", ")", ")", "\n", "lanecheck_dict", "=", "load_pickle", "(", "args", ".", "lanecheck_path", ")", "\n", "del", "lanecheck_dict", "[", "'valid_acc'", "]", "# Validation accuracy kept here for other code, delete it to avoid problems", "\n", "correct_dict", "=", "{", "}", "# Dictionary for each question in the validation set storing if the model got that question right", "\n", "check_dict", "=", "random", ".", "choice", "(", "list", "(", "lanecheck_dict", ".", "values", "(", ")", ")", ")", "\n", "for", "key", "in", "check_dict", ".", "keys", "(", ")", ":", "# Any of the possible feature lanes the model may have", "\n", "        ", "if", "key", "in", "[", "'sub_out'", ",", "'vcpt_out'", ",", "'vid_out'", ",", "'reg_out'", ",", "'regtopk_out'", "]", ":", "\n", "            ", "check_key", "=", "key", "\n", "break", "\n", "", "", "for", "qid", ",", "question_dict", "in", "lanecheck_dict", ".", "items", "(", ")", ":", "\n", "        ", "correct", "=", "(", "question_dict", "[", "check_key", "]", "[", "5", "]", "==", "question_dict", "[", "check_key", "]", "[", "6", "]", ")", "# 5 is ground truth, 6 is predicted", "\n", "correct_dict", "[", "qid", "]", "=", "correct", "\n", "\n", "", "what_correct", ",", "what_not", "=", "0", ",", "0", "\n", "who_correct", ",", "who_not", "=", "0", ",", "0", "\n", "why_correct", ",", "why_not", "=", "0", ",", "0", "\n", "where_correct", ",", "where_not", "=", "0", ",", "0", "\n", "how_correct", ",", "how_not", "=", "0", ",", "0", "\n", "which_correct", ",", "which_not", "=", "0", ",", "0", "\n", "other_correct", ",", "other_not", "=", "0", ",", "0", "\n", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'what'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "what_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "what_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'who'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "who_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "who_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'why'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "why_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "why_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'where'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "where_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "where_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'how'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "how_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "how_not", "+=", "1", "\n", "", "", "", "for", "qid", "in", "val_qtype_dict", "[", "'which'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "            ", "which_correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "which_not", "+=", "1", "\n", "", "", "for", "qid", "in", "val_qtype_dict", "[", "'other'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "            ", "other_correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "other_not", "+=", "1", "\n", "", "", "what", "=", "what_correct", "+", "what_not", "\n", "who", "=", "who_correct", "+", "who_not", "\n", "why", "=", "why_correct", "+", "why_not", "\n", "where", "=", "where_correct", "+", "where_not", "\n", "how", "=", "how_correct", "+", "how_not", "\n", "which", "=", "which_correct", "+", "which_not", "\n", "other", "=", "other_correct", "+", "other_not", "\n", "\n", "# Plot details", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "width", "=", "0.3", "\n", "cm", "=", "plt", ".", "get_cmap", "(", "\"tab20c\"", ")", "\n", "\n", "# Outer ring", "\n", "cout", "=", "cm", "(", "[", "0", ",", "4", ",", "8", ",", "12", ",", "16", ",", "20", ",", "21", "]", ")", "\n", "counts", "=", "[", "what", ",", "who", ",", "why", ",", "where", ",", "how", ",", "which", ",", "other", "]", "\n", "labels", "=", "[", "'what'", ",", "'who'", ",", "'why'", ",", "'where'", ",", "'how'", ",", "'which'", ",", "'other'", "]", "\n", "pie", ",", "_", "=", "ax", ".", "pie", "(", "counts", ",", "radius", "=", "1", ",", "labels", "=", "labels", ",", "colors", "=", "cout", ")", "\n", "plt", ".", "setp", "(", "pie", ",", "width", "=", "width", ",", "edgecolor", "=", "'white'", ")", "\n", "\n", "# Inner Ring", "\n", "cin", "=", "cm", "(", "[", "1", ",", "2", ",", "5", ",", "6", ",", "9", ",", "10", ",", "13", ",", "14", ",", "17", ",", "18", ",", "21", ",", "22", ",", "23", ",", "24", "]", ")", "\n", "counts", "=", "[", "what_correct", ",", "what_not", ",", "who_correct", ",", "who_not", ",", "why_correct", ",", "why_not", ",", "where_correct", ",", "where_not", ",", "how_correct", ",", "how_not", ",", "which_correct", ",", "which_not", ",", "other_correct", ",", "other_not", "]", "\n", "labels", "=", "[", "'correct\\n'", "+", "str", "(", "round", "(", "what_correct", "/", "(", "what_correct", "+", "what_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "what_not", "/", "(", "what_correct", "+", "what_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "who_correct", "/", "(", "who_correct", "+", "who_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "who_not", "/", "(", "who_correct", "+", "who_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "why_correct", "/", "(", "why_correct", "+", "why_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "why_not", "/", "(", "why_correct", "+", "why_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "where_correct", "/", "(", "where_correct", "+", "where_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "where_not", "/", "(", "where_correct", "+", "where_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "how_correct", "/", "(", "how_correct", "+", "how_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "how_not", "/", "(", "how_correct", "+", "how_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "which_correct", "/", "(", "which_correct", "+", "which_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "which_not", "/", "(", "which_correct", "+", "which_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "\n", "'correct\\n'", "+", "str", "(", "round", "(", "other_correct", "/", "(", "other_correct", "+", "other_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "'not\\n'", "+", "str", "(", "round", "(", "other_not", "/", "(", "other_correct", "+", "other_not", ")", ",", "4", ")", "*", "100", ")", "+", "'%'", ",", "]", "\n", "pie2", ",", "_", "=", "ax", ".", "pie", "(", "counts", ",", "radius", "=", "1", "-", "width", ",", "labels", "=", "labels", ",", "labeldistance", "=", "0.7", ",", "colors", "=", "cin", ")", "\n", "plt", ".", "setp", "(", "pie2", ",", "width", "=", "width", ",", "edgecolor", "=", "'white'", ")", "\n", "total_acc", "=", "round", "(", "(", "what_correct", "+", "who_correct", "+", "why_correct", "+", "where_correct", "+", "how_correct", "+", "which_correct", "+", "other_correct", ")", "/", "(", "what", "+", "who", "+", "why", "+", "where", "+", "how", "+", "which", "+", "other", ")", ",", "4", ")", "*", "100", "\n", "plt", ".", "title", "(", "model_name", "+", "' Dataset Question Type Distribution.\\n Overall Acc:'", "+", "str", "(", "total_acc", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "print", "(", "model_name", ",", "\"Plotted\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.conc_dist": [[281, 303], ["utils.load_pickle", "utils.load_pickle", "ipdb.set_trace", "random.choice", "random.choice.keys", "utils.load_pickle.items", "list", "utils.load_pickle.values"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "conc_dist", "(", "lanecheck_path", ")", ":", "\n", "    ", "lanecheck_dict", "=", "load_pickle", "(", "lanecheck_path", ")", "\n", "acc", "=", "lanecheck_dict", "[", "'acc'", "]", "\n", "qids_by_conc", "=", "load_pickle", "(", "\"/home/jumperkables/kable_management/projects/a_vs_c/tvqa/avc_statistics/qids_by_conc.pickle\"", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "del", "lanecheck_dict", "[", "'acc'", "]", "# Validation accuracy kept here for other code, delete it to avoid problems", "\n", "correct_dict", "=", "{", "}", "# Dictionary for each question in the validation set storing if the model got that question right", "\n", "check_dict", "=", "random", ".", "choice", "(", "list", "(", "lanecheck_dict", ".", "values", "(", ")", ")", ")", "\n", "for", "key", "in", "check_dict", ".", "keys", "(", ")", ":", "# Any of the possible feature lanes the model may have", "\n", "        ", "if", "key", "in", "[", "'sub_out'", ",", "'vcpt_out'", ",", "'vid_out'", ",", "'reg_out'", ",", "'regtopk_out'", "]", ":", "\n", "            ", "check_key", "=", "key", "\n", "break", "\n", "", "", "for", "qid", ",", "question_dict", "in", "lanecheck_dict", ".", "items", "(", ")", ":", "\n", "        ", "correct", "=", "(", "question_dict", "[", "check_key", "]", "[", "5", "]", "==", "question_dict", "[", "check_key", "]", "[", "6", "]", ")", "# 5 is ground truth, 6 is predicted", "\n", "correct_dict", "[", "qid", "]", "=", "correct", "\n", "\n", "", "none", ",", "zero", ",", "to_100", ",", "to_200", ",", "to_300", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "to_400", ",", "to_500", ",", "to_600", ",", "to_700", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "#for qid in qids_by_conc[\"None\"]:", "\n", "\n", "return", "ret_data", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.qtype_dist": [[305, 384], ["utils.load_pickle", "utils.load_pickle", "random.choice", "random.choice.keys", "utils.load_pickle.items", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].values", "val_qtype_dict[].keys", "val_qtype_dict[].keys", "os.path.expanduser", "list", "utils.load_pickle.values"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "qtype_dist", "(", "lanecheck_path", ")", ":", "\n", "    ", "lanecheck_dict", "=", "load_pickle", "(", "lanecheck_path", ")", "\n", "val_qtype_dict", "=", "load_pickle", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/data/tvqa/q_type/val_q_type_dict.pickle\"", ")", ")", "\n", "acc", "=", "lanecheck_dict", "[", "'acc'", "]", "\n", "del", "lanecheck_dict", "[", "'acc'", "]", "# Validation accuracy kept here for other code, delete it to avoid problems", "\n", "correct_dict", "=", "{", "}", "# Dictionary for each question in the validation set storing if the model got that question right", "\n", "check_dict", "=", "random", ".", "choice", "(", "list", "(", "lanecheck_dict", ".", "values", "(", ")", ")", ")", "\n", "for", "key", "in", "check_dict", ".", "keys", "(", ")", ":", "# Any of the possible feature lanes the model may have", "\n", "        ", "if", "key", "in", "[", "'sub_out'", ",", "'vcpt_out'", ",", "'vid_out'", ",", "'reg_out'", ",", "'regtopk_out'", "]", ":", "\n", "            ", "check_key", "=", "key", "\n", "break", "\n", "", "", "for", "qid", ",", "question_dict", "in", "lanecheck_dict", ".", "items", "(", ")", ":", "\n", "        ", "correct", "=", "(", "question_dict", "[", "check_key", "]", "[", "5", "]", "==", "question_dict", "[", "check_key", "]", "[", "6", "]", ")", "# 5 is ground truth, 6 is predicted", "\n", "correct_dict", "[", "qid", "]", "=", "correct", "\n", "\n", "", "what_correct", ",", "what_not", "=", "0", ",", "0", "\n", "who_correct", ",", "who_not", "=", "0", ",", "0", "\n", "why_correct", ",", "why_not", "=", "0", ",", "0", "\n", "where_correct", ",", "where_not", "=", "0", ",", "0", "\n", "how_correct", ",", "how_not", "=", "0", ",", "0", "\n", "which_correct", ",", "which_not", "=", "0", ",", "0", "\n", "other_correct", ",", "other_not", "=", "0", ",", "0", "\n", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'what'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "what_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "what_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'who'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "who_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "who_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'why'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "why_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "why_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'where'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "where_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "where_not", "+=", "1", "\n", "", "", "", "for", "sub_type_dict", "in", "val_qtype_dict", "[", "'how'", "]", ".", "values", "(", ")", ":", "\n", "        ", "for", "qid", "in", "sub_type_dict", ":", "\n", "            ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "                ", "how_correct", "+=", "1", "\n", "", "else", ":", "\n", "                ", "how_not", "+=", "1", "\n", "", "", "", "for", "qid", "in", "val_qtype_dict", "[", "'which'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "            ", "which_correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "which_not", "+=", "1", "\n", "", "", "for", "qid", "in", "val_qtype_dict", "[", "'other'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "correct_dict", "[", "qid", "]", ":", "\n", "            ", "other_correct", "+=", "1", "\n", "", "else", ":", "\n", "            ", "other_not", "+=", "1", "\n", "", "", "what", "=", "what_correct", "+", "what_not", "\n", "who", "=", "who_correct", "+", "who_not", "\n", "why", "=", "why_correct", "+", "why_not", "\n", "where", "=", "where_correct", "+", "where_not", "\n", "how", "=", "how_correct", "+", "how_not", "\n", "which", "=", "which_correct", "+", "which_not", "\n", "other", "=", "other_correct", "+", "other_not", "\n", "ret_data", "=", "[", "\n", "what_correct", ",", "what_not", ",", "\n", "who_correct", ",", "who_not", ",", "\n", "why_correct", ",", "why_not", ",", "\n", "where_correct", ",", "where_not", ",", "\n", "how_correct", ",", "how_not", ",", "\n", "which_correct", ",", "which_not", ",", "\n", "other_correct", ",", "other_not", "\n", "]", "\n", "return", "ret_data", ",", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.magnum_opus": [[389, 516], ["numpy.chararray", "enumerate", "utils.load_pickle", "enumerate", "enumerate", "question_type.survey", "matplotlib.show", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "enumerate", "question_type.qtype_dist", "question_type.qtype_dist", "len", "len", "range", "range", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.survey", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.qtype_dist", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.qtype_dist"], ["", "def", "magnum_opus", "(", ")", ":", "\n", "#jerry_subpath = '/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/'", "\n", "#ncc_subpath = '/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/ncc/results/'", "\n", "#paths = [", "\n", "#     ncc_subpath+'tvqa_abc_v/',", "\n", "#     ncc_subpath+'tvqa_abc_v_bert/',", "\n", "#     ncc_subpath+'tvqa_abc_i/',", "\n", "#     ncc_subpath+'tvqa_abc_i_bert/',", "\n", "#     jerry_subpath+'tvqa_abc_r/',", "\n", "#     jerry_subpath+'tvqa_abc_r_bert/',", "\n", "#     ncc_subpath+'tvqa_abc_vi/',", "\n", "#     ncc_subpath+'tvqa_abc_vi_bert/',", "\n", "#     jerry_subpath+'tvqa_abc_vir/',", "\n", "#     jerry_subpath+'tvqa_abc_vir_bert/',", "\n", "#     ncc_subpath+'tvqa_abc_s/',", "\n", "#     ncc_subpath+'tvqa_abc_s_bert/',", "\n", "#     ncc_subpath+'tvqa_abc_si/',", "\n", "#     ncc_subpath+'tvqa_abc_si_bert/',", "\n", "#     ncc_subpath+'tvqa_abc_svi/',", "\n", "#     ncc_subpath+'tvqa_abc_svi_bert/',", "\n", "#     jerry_subpath+'tvqa_abc_svir/',", "\n", "#     jerry_subpath+'tvqa_abc_svir_bert/'", "\n", "# ]", "\n", "    ", "subpath", "=", "\"/home/jumperkables/kable_management/projects/a_vs_c/tvqa/before_stopwords\"", "\n", "with_stpwrd_subpath", "=", "\"/home/jumperkables/kable_management/projects/a_vs_c/tvqa\"", "\n", "paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"concgt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"conclt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"vi_concgt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"vi_conclt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"concgt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"conclt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"vi_concgt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "with_stpwrd_subpath", ",", "\"vi_conclt500\"", ")", ",", "\n", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"concgt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"conclt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"vi_concgt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"vi_conclt300\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"concgt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"conclt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"vi_concgt500\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "subpath", ",", "\"vi_conclt500\"", ")", "\n", "]", "\n", "valid_plot_paths", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "'lanecheck_dict.pickle_valid'", ")", "for", "path", "in", "paths", "]", "\n", "#train_plot_paths = [path+'lanecheck_dict.pickle_train' for path in paths]", "\n", "#valid_plot_paths = [path+'lanecheck_dict.pickle_valid' for path in paths]", "\n", "# Here put a list of paths to lanecheck dictionaries for training or validation outputs.i", "\n", "# With corresponding labels for each lanecheck model", "\n", "labels", "=", "[", "\n", "'SVI_C>300_ws'", ",", "\n", "'SVI_C<300_ws'", ",", "\n", "'VI_C>300_ws'", ",", "\n", "'VI_C<300_ws'", ",", "\n", "'SVI_C>500_ws'", ",", "\n", "'SVI_C<500_ws'", ",", "\n", "'VI_C>500_ws'", ",", "\n", "'VI_C<500_ws'", ",", "\n", "\n", "'SVI_C>300'", ",", "\n", "'SVI_C<300'", ",", "\n", "'VI_C>300'", ",", "\n", "'VI_C<300'", ",", "\n", "'SVI_C>500'", ",", "\n", "'SVI_C<500'", ",", "\n", "'VI_C>500'", ",", "\n", "'VI_C<500'", "\n", "]", "\n", "\n", "# Labels and plot paths from here", "\n", "label_matrix", "=", "np", ".", "chararray", "(", "(", "len", "(", "labels", ")", ",", "len", "(", "labels", ")", ")", ",", "itemsize", "=", "19", ")", "\n", "for", "idx0", ",", "label0", "in", "enumerate", "(", "labels", ")", ":", "\n", "        ", "for", "idx1", ",", "label1", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "label_matrix", "[", "idx0", "]", "[", "idx1", "]", "=", "label0", "+", "'/'", "+", "label1", "\n", "\n", "# An example breakdown of question types correct vs incorrect", "\n", "", "", "qtype_dict", "=", "load_pickle", "(", "'/home/jumperkables/kable_management/data/tvqa/q_type/val_q_type_dict.pickle'", ")", "\n", "category_names", "=", "[", "\n", "'what_correct'", ",", "'what_not'", ",", "\n", "'who_correct'", ",", "'who_not'", ",", "\n", "'why_correct'", ",", "'why_not'", ",", "\n", "'where_correct'", ",", "'where_not'", ",", "\n", "'how_correct'", ",", "'how_not'", ",", "\n", "'which_correct'", ",", "'which_not'", ",", "\n", "'other_correct'", ",", "'other_not'", "\n", "]", "\n", "\n", "glove_labels", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "]", "#if i%2 == 0 ]", "\n", "bert_labels", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "if", "i", "%", "2", "==", "1", "]", "\n", "\n", "glove_paths", "=", "[", "valid_plot_paths", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "valid_plot_paths", ")", ")", "]", "#if i%2 == 0 ]", "\n", "bert_paths", "=", "[", "valid_plot_paths", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "valid_plot_paths", ")", ")", "if", "i", "%", "2", "==", "1", "]", "\n", "\n", "#####################", "\n", "# # GloVe", "\n", "#glove_results = {}", "\n", "#glove_accuracies = {}", "\n", "#for i, path in enumerate(glove_paths):", "\n", "#    model_results, model_acc = conc_dist(path) # Model name: array of stacked data, accuracy at the end", "\n", "#    glove_results[glove_labels[i]] = model_results", "\n", "#    glove_accuracies[glove_labels[i]] = model_acc  ", "\n", "#survey(glove_results, category_names, glove_accuracies)", "\n", "#plt.show()", "\n", "#####################", "\n", "#import sys; sys.exit()", "\n", "\n", "# GloVe", "\n", "glove_results", "=", "{", "}", "\n", "glove_accuracies", "=", "{", "}", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "glove_paths", ")", ":", "\n", "        ", "model_results", ",", "model_acc", "=", "qtype_dist", "(", "path", ")", "# Model name: array of stacked data, accuracy at the end", "\n", "glove_results", "[", "glove_labels", "[", "i", "]", "]", "=", "model_results", "\n", "glove_accuracies", "[", "glove_labels", "[", "i", "]", "]", "=", "model_acc", "\n", "\n", "# Bert", "\n", "", "bert_results", "=", "{", "}", "\n", "bert_accuracies", "=", "{", "}", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "bert_paths", ")", ":", "\n", "        ", "model_results", ",", "model_acc", "=", "qtype_dist", "(", "path", ")", "# Model name: array of stacked data, accuracy at the end", "\n", "bert_results", "[", "bert_labels", "[", "i", "]", "]", "=", "model_results", "\n", "bert_accuracies", "[", "bert_labels", "[", "i", "]", "]", "=", "model_acc", "\n", "\n", "\n", "#Glove", "\n", "#import ipdb; ipdb.set_trace()", "\n", "", "survey", "(", "glove_results", ",", "category_names", ",", "glove_accuracies", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# BERT", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.question_type.survey": [[521, 604], ["list", "list", "numpy.array", "numpy.asarray", "matplotlib.rc", "matplotlib.figure", "pandas.DataFrame", "seaborn.heatmap", "sys.exit", "numpy.ndarray", "range", "matplotlib.rc", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_xticks", "fig.add_subplot.set_xticklabels", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.bar", "fig.add_subplot.hlines", "fig.add_subplot.legend", "results.keys", "list.values", "list", "matplotlib.get_cmap", "len", "range", "numpy.arange", "results.values", "range", "seaborn.color_palette", "len", "len", "range", "numpy.asarray", "range", "len", "len", "len"], "function", ["None"], ["", "def", "survey", "(", "results", ",", "category_names", ",", "accuracies", ")", ":", "\n", "    ", "\"\"\"\n    Parameters\n    ----------\n    results : dict\n        A mapping from question labels to a list of answers per category.\n        It is assumed all lists contain the same number of entries and that\n        it matches the length of *category_names*.\n    category_names : list of str\n        The category labels.\n    \"\"\"", "\n", "# Collecting data for plots", "\n", "labels", "=", "list", "(", "results", ".", "keys", "(", ")", ")", "\n", "accuracies", "=", "list", "(", "accuracies", ".", "values", "(", ")", ")", "\n", "accuracies", "=", "[", "100", "*", "i", "for", "i", "in", "accuracies", "]", "\n", "data", "=", "np", ".", "array", "(", "list", "(", "results", ".", "values", "(", ")", ")", ")", "\n", "data_accs", "=", "[", "[", "100", "*", "modl", "[", "i", "]", "/", "(", "modl", "[", "i", "]", "+", "modl", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "modl", ")", ",", "2", ")", "]", "for", "modl", "in", "data", "]", "\n", "data_offset", "=", "np", ".", "asarray", "(", "[", "np", ".", "asarray", "(", "data_accs", "[", "i", "]", ")", "-", "accuracies", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", "]", ")", "\n", "data_offset", "=", "data_offset", "/", "100", "\n", "qtype_labels", "=", "[", "'What'", ",", "'Who'", ",", "'Why'", ",", "'Where'", ",", "'How'", ",", "'Which'", ",", "'Other'", "]", "\n", "labels", "=", "[", "f\"({labels[i]} {accuracies[i]:.2f}%)\"", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "]", "\n", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "14", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "data_offset", "=", "pd", ".", "DataFrame", "(", "data_offset", ")", "\n", "data_offset", ".", "columns", "=", "qtype_labels", "\n", "data_offset", ".", "index", "=", "labels", "\n", "ax", "=", "sns", ".", "heatmap", "(", "data_offset", ",", "annot", "=", "True", ",", "center", "=", "0", ",", "fmt", "=", "\".2%\"", ",", "cmap", "=", "sns", ".", "color_palette", "(", "\"vlag\"", ",", "as_cmap", "=", "True", ")", ")", "\n", "return", "fig", ",", "ax", "\n", "sys", ".", "exit", "(", ")", "\n", "# Colours details", "\n", "#correct_colours = plt.get_cmap('tab20')([1,3,5,7,9,11,13])", "\n", "correct_colours", "=", "plt", ".", "get_cmap", "(", "'Dark2'", ")", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "5", ",", "6", ",", "8", "]", ")", "\n", "#incorrect_colours = plt.get_cmap('tab20')([0,2,4,6,8,10,12])", "\n", "\n", "# Get the end ", "\n", "correct_end", "=", "np", ".", "ndarray", "(", "(", "7", ",", "len", "(", "data", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "7", ")", ":", "\n", "            ", "correct_end", "[", "j", "]", "[", "i", "]", "=", "data", "[", "i", "]", "[", "2", "*", "j", "]", "*", "100", "/", "(", "data", "[", "i", "]", "[", "2", "*", "j", "]", "+", "data", "[", "i", "]", "[", "2", "*", "j", "+", "1", "]", ")", "\n", "\n", "# Figure settings", "\n", "", "", "import", "matplotlib", "\n", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "24", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "ind", "=", "np", ".", "arange", "(", "len", "(", "data", ")", ")", "*", "2", "\n", "width", "=", "0.2", "# the width of the bars", "\n", "width1", "=", "width", "*", "1", "\n", "\n", "#Set font size", "\n", "ax", ".", "set_xlabel", "(", "''", ",", "fontsize", "=", "24", ")", "#xlabel", "\n", "ax", ".", "set_ylabel", "(", "'%'", ",", "fontsize", "=", "24", ")", "#ylabel", "\n", "ax", ".", "set_xticks", "(", "ind", ")", "\n", "ax", ".", "set_xticklabels", "(", "labels", ",", "fontsize", "=", "24", ")", "\n", "\n", "# #Plot incorect bars", "\n", "# rects_iwhat = ax.bar(ind-3*width, [100]*len(data), width1, color=incorrect_colours[0])", "\n", "# rects_iwho  = ax.bar(ind-2*width, [100]*len(data), width1, color=incorrect_colours[1])", "\n", "# rects_iwhy  = ax.bar(ind-1*width, [100]*len(data), width1, color=incorrect_colours[2])", "\n", "# rects_iwhere= ax.bar(ind, [100]*len(data), width1, color=incorrect_colours[3])", "\n", "# rects_ihow  = ax.bar(ind+1*width, [100]*len(data), width1, color=incorrect_colours[4])", "\n", "# rects_iwhich= ax.bar(ind+2*width, [100]*len(data), width1, color=incorrect_colours[5])", "\n", "# rects_iother= ax.bar(ind+3*width, [100]*len(data), width1, color=incorrect_colours[6])", "\n", "\n", "# Plot correct", "\n", "rects_cwhat", "=", "ax", ".", "bar", "(", "ind", "-", "3", "*", "width", ",", "correct_end", "[", "0", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "0", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_cwho", "=", "ax", ".", "bar", "(", "ind", "-", "2", "*", "width", ",", "correct_end", "[", "1", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "1", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_cwhy", "=", "ax", ".", "bar", "(", "ind", "-", "1", "*", "width", ",", "correct_end", "[", "2", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "2", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_cwhere", "=", "ax", ".", "bar", "(", "ind", ",", "correct_end", "[", "3", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "3", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_chow", "=", "ax", ".", "bar", "(", "ind", "+", "1", "*", "width", ",", "correct_end", "[", "4", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "4", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_cwhich", "=", "ax", ".", "bar", "(", "ind", "+", "2", "*", "width", ",", "correct_end", "[", "5", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "5", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "rects_cother", "=", "ax", ".", "bar", "(", "ind", "+", "3", "*", "width", ",", "correct_end", "[", "6", "]", ",", "width1", ",", "color", "=", "correct_colours", "[", "6", "]", ",", "edgecolor", "=", "'black'", ")", "\n", "\n", "#Plot Accuracies", "\n", "acc_lines", "=", "ax", ".", "hlines", "(", "accuracies", ",", "ind", "-", "3.5", "*", "width", ",", "ind", "+", "3.5", "*", "width", ",", "linestyle", "=", "'dashed'", ",", "color", "=", "'r'", ")", "\n", "\n", "\n", "# Legend and appropriate handles", "\n", "ax", ".", "legend", "(", "qtype_labels", ",", "loc", "=", "'upper left'", ")", "#, fontsize='small')", "\n", "\n", "\n", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.__init__": [[8, 16], ["getpass.getuser", "visdom.Visdom", "visdom_plotter.VisdomLinePlotter.viz.get_env_list", "visdom_plotter.VisdomLinePlotter.viz.delete_env"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_name", "=", "'main'", ")", ":", "\n", "        ", "if", "getpass", ".", "getuser", "(", ")", "==", "\"jumperkables\"", ":", "\n", "            ", "self", ".", "viz", "=", "visdom", ".", "Visdom", "(", ")", "\n", "", "self", ".", "env", "=", "env_name", "\n", "# Remove an enviroment if it exists", "\n", "if", "env_name", "in", "self", ".", "viz", ".", "get_env_list", "(", ")", ":", "\n", "            ", "self", ".", "viz", ".", "delete_env", "(", "env_name", ")", "\n", "", "self", ".", "plots", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.plot": [[17, 27], ["visdom_plotter.VisdomLinePlotter.viz.line", "visdom_plotter.VisdomLinePlotter.viz.line", "numpy.array", "numpy.array", "dict", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "plot", "(", "self", ",", "var_name", ",", "split_name", ",", "title_name", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "var_name", "not", "in", "self", ".", "plots", ":", "\n", "            ", "self", ".", "plots", "[", "var_name", "]", "=", "self", ".", "viz", ".", "line", "(", "X", "=", "np", ".", "array", "(", "[", "x", ",", "x", "]", ")", ",", "Y", "=", "np", ".", "array", "(", "[", "y", ",", "y", "]", ")", ",", "env", "=", "self", ".", "env", ",", "opts", "=", "dict", "(", "\n", "legend", "=", "[", "split_name", "]", ",", "\n", "title", "=", "title_name", ",", "\n", "xlabel", "=", "'Epochs'", ",", "\n", "ylabel", "=", "var_name", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "viz", ".", "line", "(", "X", "=", "np", ".", "array", "(", "[", "x", "]", ")", ",", "Y", "=", "np", ".", "array", "(", "[", "y", "]", ")", ",", "env", "=", "self", ".", "env", ",", "win", "=", "self", ".", "plots", "[", "var_name", "]", ",", "name", "=", "split_name", ",", "update", "=", "'append'", ")", "\n", "", "", "def", "text_plot", "(", "self", ",", "var_name", ",", "t", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.visdom_plotter.VisdomLinePlotter.text_plot": [[27, 32], ["visdom_plotter.VisdomLinePlotter.viz.text", "visdom_plotter.VisdomLinePlotter.viz.text"], "methods", ["None"], ["", "", "def", "text_plot", "(", "self", ",", "var_name", ",", "t", ")", ":", "\n", "        ", "if", "var_name", "not", "in", "self", ".", "plots", ":", "\n", "            ", "self", ".", "plots", "[", "var_name", "]", "=", "self", ".", "viz", ".", "text", "(", "text", "=", "t", ",", "env", "=", "self", ".", "env", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "viz", ".", "text", "(", "text", "=", "t", ",", "env", "=", "self", ".", "env", ",", "win", "=", "self", ".", "plots", "[", "var_name", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.in_notin": [[13, 31], ["set", "set", "list", "print", "list", "list", "round", "set", "set", "len", "len"], "function", ["None"], ["def", "in_notin", "(", "model_dict", ",", "qid_list", ",", "in_list", ",", "not_in_list", ",", "validortrain", ")", ":", "# For convenience, leaving in list empty will assume all are to be considered", "\n", "    ", "import", "copy", "\n", "# Full QID list", "\n", "in_qids", "=", "[", "]", "\n", "not_in_qids", "=", "[", "]", "\n", "# For all models in the in_list", "\n", "for", "model", "in", "in_list", ":", "\n", "        ", "in_qids", "+=", "model_dict", "[", "model", "]", "\n", "", "for", "model", "in", "not_in_list", ":", "\n", "        ", "not_in_qids", "+=", "model_dict", "[", "model", "]", "\n", "\n", "# Unique QIDs", "\n", "", "in_qids", "=", "set", "(", "list", "(", "set", "(", "in_qids", ")", ")", ")", "\n", "not_in_qids", "=", "set", "(", "list", "(", "set", "(", "not_in_qids", ")", ")", ")", "\n", "in_qids", "=", "list", "(", "in_qids", "-", "not_in_qids", ")", "\n", "#in_qids = [qid for qid in in_qids if qid not in not_in_qids]", "\n", "print", "(", "round", "(", "len", "(", "in_qids", ")", "*", "100", "/", "len", "(", "qid_list", ")", ",", "2", ")", ",", "in_list", ",", "not_in_list", ",", "validortrain", ")", "\n", "return", "(", "in_qids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.popular_vote": [[32, 49], ["pdb.set_trace", "set", "set", "list", "print", "list", "list", "round", "set", "set", "len", "len"], "function", ["None"], ["", "def", "popular_vote", "(", "model_dict", ",", "qid_list", ",", "listy", ",", "validortrain", ")", ":", "# For convenience, leaving in list empty will assume all are to be considered", "\n", "# Full QID list", "\n", "    ", "listy", "=", "[", "]", "\n", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "# For all models in the in_list", "\n", "for", "model", "in", "listy", ":", "\n", "        ", "in_qids", "+=", "model_dict", "[", "model", "]", "\n", "", "for", "model", "in", "not_in_list", ":", "\n", "        ", "not_in_qids", "+=", "model_dict", "[", "model", "]", "\n", "\n", "# Unique QIDs", "\n", "", "in_qids", "=", "set", "(", "list", "(", "set", "(", "in_qids", ")", ")", ")", "\n", "not_in_qids", "=", "set", "(", "list", "(", "set", "(", "not_in_qids", ")", ")", ")", "\n", "in_qids", "=", "list", "(", "in_qids", "-", "not_in_qids", ")", "\n", "#in_qids = [qid for qid in in_qids if qid not in not_in_qids]", "\n", "print", "(", "round", "(", "len", "(", "in_qids", ")", "*", "100", "/", "len", "(", "qid_list", ")", ",", "2", ")", ",", "in_list", ",", "not_in_list", ",", "validortrain", ")", "\n", "return", "(", "in_qids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.correct_on_qid_streams": [[51, 126], ["utils.load_pickle", "utils.load_pickle.items", "answers.index", "max", "correct_qids.append"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "correct_on_qid_streams", "(", "opts", ")", ":", "\n", "    ", "path", ",", "on_streams", ",", "off_streams", "=", "opts", "\n", "dicty", "=", "load_pickle", "(", "path", ")", "\n", "del", "dicty", "[", "'acc'", "]", "\n", "correct_qids", "=", "[", "]", "\n", "\n", "# Initialise all streams", "\n", "vcpt_flag", "=", "False", "\n", "sub_flag", "=", "False", "\n", "imagenet_flag", "=", "False", "\n", "regtopk_flag", "=", "False", "\n", "\n", "# Turn on all relevant streams", "\n", "if", "'vcpt'", "in", "on_streams", ":", "\n", "        ", "vcpt_flag", "=", "True", "\n", "", "if", "'sub'", "in", "on_streams", ":", "\n", "        ", "sub_flag", "=", "True", "\n", "", "if", "'imagenet'", "in", "on_streams", ":", "\n", "        ", "imagenet_flag", "=", "True", "\n", "", "if", "'regional'", "in", "on_streams", ":", "\n", "        ", "regtopk_flag", "=", "True", "\n", "\n", "# Turn off all disabled streams", "\n", "", "if", "'vcpt'", "in", "off_streams", ":", "\n", "        ", "vcpt_flag", "=", "False", "\n", "", "if", "'sub'", "in", "off_streams", ":", "\n", "        ", "sub_flag", "=", "False", "\n", "", "if", "'imagenet'", "in", "off_streams", ":", "\n", "        ", "imagenet_flag", "=", "False", "\n", "", "if", "'regional'", "in", "off_streams", ":", "\n", "        ", "regtopk_flag", "=", "False", "\n", "\n", "# Aggregate all responses", "\n", "", "for", "qid", ",", "q_dict", "in", "dicty", ".", "items", "(", ")", ":", "\n", "        ", "answers", "=", "[", "0", "]", "*", "5", "\n", "try", ":", "\n", "            ", "ground_truth", "=", "q_dict", "[", "'vcpt_out'", "]", "[", "5", "]", "\n", "", "except", ":", "\n", "            ", "try", ":", "\n", "                ", "ground_truth", "=", "q_dict", "[", "'sub_out'", "]", "[", "5", "]", "\n", "", "except", ":", "\n", "                ", "try", ":", "\n", "                    ", "ground_truth", "=", "q_dict", "[", "'vid_out'", "]", "[", "5", "]", "\n", "", "except", ":", "\n", "                    ", "ground_truth", "=", "q_dict", "[", "'regtopk_out'", "]", "[", "5", "]", "\n", "", "", "", "if", "vcpt_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "'vcpt_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "'vcpt_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "'vcpt_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "'vcpt_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "'vcpt_out'", "]", "[", "4", "]", "\n", "", "if", "sub_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "'sub_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "'sub_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "'sub_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "'sub_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "'sub_out'", "]", "[", "4", "]", "\n", "", "if", "imagenet_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "'vid_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "'vid_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "'vid_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "'vid_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "'vid_out'", "]", "[", "4", "]", "\n", "", "if", "regtopk_flag", ":", "\n", "            ", "answers", "[", "0", "]", "+=", "q_dict", "[", "'regtopk_out'", "]", "[", "0", "]", "\n", "answers", "[", "1", "]", "+=", "q_dict", "[", "'regtopk_out'", "]", "[", "1", "]", "\n", "answers", "[", "2", "]", "+=", "q_dict", "[", "'regtopk_out'", "]", "[", "2", "]", "\n", "answers", "[", "3", "]", "+=", "q_dict", "[", "'regtopk_out'", "]", "[", "3", "]", "\n", "answers", "[", "4", "]", "+=", "q_dict", "[", "'regtopk_out'", "]", "[", "4", "]", "\n", "\n", "# The predicted answer from all wanted lanes", "\n", "", "guess", "=", "answers", ".", "index", "(", "max", "(", "answers", ")", ")", "####HERE", "\n", "if", "guess", "==", "ground_truth", ":", "\n", "            ", "correct_qids", ".", "append", "(", "qid", ")", "\n", "", "", "return", "(", "correct_qids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams": [[127, 138], ["streams.append", "streams.append", "streams.append", "streams.append"], "function", ["None"], ["", "def", "streams", "(", "stringy", ")", ":", "\n", "    ", "streams", "=", "[", "]", "\n", "if", "'V'", "in", "stringy", ":", "\n", "        ", "streams", ".", "append", "(", "'vcpt'", ")", "\n", "", "if", "'I'", "in", "stringy", ":", "\n", "        ", "streams", ".", "append", "(", "'imagenet'", ")", "\n", "", "if", "'R'", "in", "stringy", ":", "\n", "        ", "streams", ".", "append", "(", "'regional'", ")", "\n", "", "if", "'S'", "in", "stringy", ":", "\n", "        ", "streams", ".", "append", "(", "'sub'", ")", "\n", "", "return", "streams", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.create_correct_qid_matrix": [[139, 228], ["glove_train_opts.append", "glove_train_opts.append", "glove_train_opts.append", "glove_train_opts.append", "glove_train_opts.append", "glove_valid_opts.append", "glove_valid_opts.append", "glove_valid_opts.append", "glove_valid_opts.append", "glove_valid_opts.append", "bert_train_opts.append", "bert_train_opts.append", "bert_train_opts.append", "bert_train_opts.append", "bert_train_opts.append", "bert_valid_opts.append", "bert_valid_opts.append", "bert_valid_opts.append", "bert_valid_opts.append", "bert_valid_opts.append", "print", "print", "print", "print", "print", "inclusion_exclusion.correct_on_qid_streams", "inclusion_exclusion.correct_on_qid_streams", "inclusion_exclusion.correct_on_qid_streams", "inclusion_exclusion.correct_on_qid_streams", "inclusion_exclusion.streams", "range", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "range", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "range", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "range", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "inclusion_exclusion.streams", "range", "range", "range", "range", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.correct_on_qid_streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.correct_on_qid_streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.correct_on_qid_streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.correct_on_qid_streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.streams"], ["", "def", "create_correct_qid_matrix", "(", ")", ":", "\n", "    ", "jerry_subpath", "=", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/'", "\n", "ncc_subpath", "=", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/ncc/results/'", "\n", "paths", "=", "[", "\n", "ncc_subpath", "+", "'tvqa_abc_v/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_v_bert/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_i/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_i_bert/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_r/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_r_bert/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_vi/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_vi_bert/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_vir/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_vir_bert/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_s/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_s_bert/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_si/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_si_bert/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_svi/'", ",", "\n", "ncc_subpath", "+", "'tvqa_abc_svi_bert/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_svir/'", ",", "\n", "jerry_subpath", "+", "'tvqa_abc_svir_bert/'", "\n", "]", "\n", "train_plot_paths", "=", "[", "path", "+", "'lanecheck_dict.pickle_train'", "for", "path", "in", "paths", "]", "\n", "valid_plot_paths", "=", "[", "path", "+", "'lanecheck_dict.pickle_valid'", "for", "path", "in", "paths", "]", "\n", "labels", "=", "[", "\n", "'V'", ",", "\n", "'V'", ",", "\n", "'I'", ",", "\n", "'I'", ",", "\n", "'R'", ",", "\n", "'R'", ",", "\n", "'VI'", ",", "\n", "'VI'", ",", "\n", "'VIR'", ",", "\n", "'VIR'", ",", "\n", "'S'", ",", "\n", "'S'", ",", "\n", "'SI'", ",", "\n", "'SI'", ",", "\n", "'SVI'", ",", "\n", "'SVI'", ",", "\n", "'SVIR'", ",", "\n", "'SVIR'", "\n", "]", "\n", "\n", "# Glove Train", "\n", "glove_train_opts", "=", "[", "(", "train_plot_paths", "[", "i", "]", ",", "streams", "(", "labels", "[", "i", "]", ")", ",", "[", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "if", "i", "%", "2", "==", "0", "]", "\n", "glove_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"S\"", ")", ")", ")", "\n", "glove_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"V\"", ")", ")", ")", "\n", "glove_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"I\"", ")", ")", ")", "\n", "glove_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"R\"", ")", ")", ")", "\n", "glove_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"VIR\"", ")", ")", ")", "\n", "# Glove Valid", "\n", "glove_valid_opts", "=", "[", "(", "valid_plot_paths", "[", "i", "]", ",", "streams", "(", "labels", "[", "i", "]", ")", ",", "[", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "if", "i", "%", "2", "==", "0", "]", "\n", "glove_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"S\"", ")", ")", ")", "\n", "glove_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"V\"", ")", ")", ")", "\n", "glove_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"I\"", ")", ")", ")", "\n", "glove_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"R\"", ")", ")", ")", "\n", "glove_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"VIR\"", ")", ")", ")", "\n", "# BERT Train", "\n", "bert_train_opts", "=", "[", "(", "train_plot_paths", "[", "i", "]", ",", "streams", "(", "labels", "[", "i", "]", ")", ",", "[", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "if", "i", "%", "2", "==", "1", "]", "\n", "bert_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"S\"", ")", ")", ")", "\n", "bert_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"V\"", ")", ")", ")", "\n", "bert_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"I\"", ")", ")", ")", "\n", "bert_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"R\"", ")", ")", ")", "\n", "bert_train_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_train'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"VIR\"", ")", ")", ")", "\n", "# BERT Valid", "\n", "bert_valid_opts", "=", "[", "(", "valid_plot_paths", "[", "i", "]", ",", "streams", "(", "labels", "[", "i", "]", ")", ",", "[", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "if", "i", "%", "2", "==", "1", "]", "\n", "bert_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"S\"", ")", ")", ")", "\n", "bert_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"V\"", ")", ")", ")", "\n", "bert_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"I\"", ")", ")", ")", "\n", "bert_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"R\"", ")", ")", ")", "\n", "bert_valid_opts", ".", "append", "(", "(", "'/home/jumperkables/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid'", ",", "streams", "(", "\"SVIR\"", ")", ",", "streams", "(", "\"VIR\"", ")", ")", ")", "\n", "\n", "# Returning Correct QIDS", "\n", "extra_labels", "=", "[", "'SVIR S-off'", ",", "'SVIR V-off'", ",", "'SVIR I-off'", ",", "'SVIR R-off'", ",", "'SVIR VIR-off'", "]", "\n", "labels", "=", "[", "'V'", ",", "'I'", ",", "'R'", ",", "'VI'", ",", "'VIR'", ",", "'S'", ",", "'SI'", ",", "'SVI'", ",", "'SVIR'", "]", "\n", "labels", "=", "labels", "+", "extra_labels", "\n", "print", "(", "\"Starting\"", ")", "\n", "glove_train_correct_qids", "=", "{", "labels", "[", "i", "]", ":", "correct_on_qid_streams", "(", "glove_train_opts", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "}", "\n", "print", "(", "\"Glove_train done\"", ")", "\n", "glove_valid_correct_qids", "=", "{", "labels", "[", "i", "]", ":", "correct_on_qid_streams", "(", "glove_valid_opts", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "}", "\n", "print", "(", "\"Glove_valid done\"", ")", "\n", "bert_train_correct_qids", "=", "{", "labels", "[", "i", "]", ":", "correct_on_qid_streams", "(", "bert_train_opts", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "}", "\n", "print", "(", "\"bert_train done\"", ")", "\n", "bert_valid_correct_qids", "=", "{", "labels", "[", "i", "]", ":", "correct_on_qid_streams", "(", "bert_valid_opts", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", "}", "\n", "print", "(", "\"bert_valid done\"", ")", "\n", "return", "glove_train_correct_qids", ",", "glove_valid_correct_qids", ",", "bert_train_correct_qids", ",", "bert_valid_correct_qids", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.plot_qtype_heatmap_table": [[230, 249], ["shiftedColorMap", "plt.subplots", "heatmap", "annotate_heatmap", "fig.tight_layout", "plt.ylabel", "plt.show"], "function", ["None"], ["", "def", "plot_qtype_heatmap_table", "(", "qids_matrix", ",", "qids_labels", ")", ":", "\n", "    ", "global", "maxx", "\n", "global", "minn", "\n", "from", "heatmap_table", "import", "shiftedColorMap", ",", "heatmap", ",", "annotate_heatmap", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "qtype_labels", "=", "[", "'(55.6%) What'", ",", "'(11.6%) Who'", ",", "'(10.4%) Why'", ",", "'(11.7%) Where'", ",", "'(9.0%) How'", ",", "'(0.7%) Which'", ",", "'(1.1%) Other'", "]", "\n", "colours", "=", "plt", ".", "cm", ".", "bwr", "#normal(vals))", "\n", "colours", "=", "shiftedColorMap", "(", "colours", ",", "start", "=", "0", ",", "midpoint", "=", "1", "-", "(", "maxx", "/", "(", "maxx", "-", "minn", ")", ")", ",", "stop", "=", "1", ",", "name", "=", "'shifted'", ")", "\n", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "#im, cbar", "\n", "im", ",", "cbar", "=", "heatmap", "(", "qids_matrix", ",", "qids_labels", ",", "qtype_labels", ",", "ax", "=", "ax", ",", "\n", "cmap", "=", "colours", ",", "cbarlabel", "=", "'%'", "+", "' Increase in Each Question Type'", ")", "\n", "texts", "=", "annotate_heatmap", "(", "im", ",", "valfmt", "=", "\"{x:.1f}%\"", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "ylabel", "(", "'Subset Name'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.inclusion_exclusion.qids_2_qtype_dist": [[250, 271], ["utils.load_pickle", "utils.load_pickle", "sum", "list", "max", "min", "os.path.expanduser", "os.path.expanduser", "list.values", "range"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "qids_2_qtype_dist", "(", "qids", ")", ":", "\n", "    ", "global", "maxx", "\n", "global", "minn", "\n", "qid2qtype", "=", "load_pickle", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/mk8+-tvqa/dataset_paper/val_qid2qtype.pickle\"", ")", ")", "\n", "average", "=", "load_pickle", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/mk8+-tvqa/dataset_paper/val_qtype_averages.pickle\"", ")", ")", "\n", "idx_dict", "=", "{", "'what'", ":", "0", ",", "'who'", ":", "1", ",", "'why'", ":", "2", ",", "'where'", ":", "3", ",", "'how'", ":", "4", ",", "'which'", ":", "5", ",", "'other'", ":", "6", "}", "\n", "ret_data", "=", "[", "0", "]", "*", "7", "\n", "for", "qid", "in", "qids", ":", "\n", "        ", "ret_data", "[", "idx_dict", "[", "qid2qtype", "[", "qid", "]", "]", "]", "+=", "1", "\n", "", "total", "=", "sum", "(", "ret_data", ")", "\n", "ret_data", "=", "[", "i", "/", "total", "for", "i", "in", "ret_data", "]", "\n", "average", "=", "list", "(", "average", ".", "values", "(", ")", ")", "\n", "#print(average)", "\n", "ret_data", "=", "[", "100", "*", "(", "ret_data", "[", "i", "]", "-", "average", "[", "i", "]", ")", "/", "average", "[", "i", "]", "for", "i", "in", "range", "(", "7", ")", "]", "# offset each one from the average", "\n", "maxxy", "=", "max", "(", "ret_data", ")", "\n", "minny", "=", "min", "(", "ret_data", ")", "\n", "if", "(", "maxxy", ">", "maxx", ")", ":", "\n", "        ", "maxx", "=", "maxxy", "\n", "", "if", "(", "minny", "<", "minn", ")", ":", "\n", "        ", "minn", "=", "minny", "\n", "", "return", "(", "ret_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.save_matrix_for_heatmap.ioveru": [[13, 37], ["utils.load_pickle", "utils.load_pickle", "utils.load_pickle.keys", "utils.load_pickle.items", "utils.load_pickle.items", "len", "len", "list", "list", "sub_dict.popitem", "correct_d0.append", "sub_dict.popitem", "correct_d1.append", "set().union", "set().intersection", "set", "set"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["def", "ioveru", "(", "d_path_0", ",", "d_path_1", ")", ":", "\n", "    ", "if", "d_path_0", "==", "d_path_1", ":", "\n", "        ", "return", "1", "\n", "", "dict_0", "=", "load_pickle", "(", "d_path_0", ")", "\n", "dict_1", "=", "load_pickle", "(", "d_path_1", ")", "\n", "acc_0", "=", "dict_0", "[", "'acc'", "]", "\n", "acc_1", "=", "dict_1", "[", "'acc'", "]", "\n", "del", "dict_0", "[", "'acc'", "]", "\n", "del", "dict_1", "[", "'acc'", "]", "\n", "correct_d0", "=", "[", "]", "\n", "correct_d1", "=", "[", "]", "\n", "total", "=", "dict_0", ".", "keys", "(", ")", "\n", "for", "qid", ",", "sub_dict", "in", "dict_0", ".", "items", "(", ")", ":", "\n", "        ", "check", "=", "sub_dict", ".", "popitem", "(", ")", "[", "1", "]", "\n", "if", "check", "[", "5", "]", "==", "check", "[", "6", "]", ":", "\n", "            ", "correct_d0", ".", "append", "(", "qid", ")", "\n", "", "", "for", "qid", ",", "sub_dict", "in", "dict_1", ".", "items", "(", ")", ":", "\n", "        ", "check", "=", "sub_dict", ".", "popitem", "(", ")", "[", "1", "]", "\n", "if", "check", "[", "5", "]", "==", "check", "[", "6", "]", ":", "\n", "            ", "correct_d1", ".", "append", "(", "qid", ")", "\n", "", "", "union", "=", "len", "(", "list", "(", "set", "(", "correct_d0", ")", ".", "union", "(", "correct_d1", ")", ")", ")", "\n", "intersection", "=", "len", "(", "list", "(", "set", "(", "correct_d0", ")", ".", "intersection", "(", "correct_d1", ")", ")", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "return", "(", "intersection", "/", "union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.save_matrix_for_heatmap.answer_agreement": [[38, 61], ["utils.load_pickle", "utils.load_pickle", "utils.load_pickle.keys", "len", "dict_0[].popitem", "dict_1[].popitem", "agree.append", "disagree.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "answer_agreement", "(", "d_path_0", ",", "d_path_1", ")", ":", "\n", "    ", "if", "d_path_0", "==", "d_path_1", ":", "\n", "        ", "return", "1", "\n", "", "dict_0", "=", "load_pickle", "(", "d_path_0", ")", "\n", "dict_1", "=", "load_pickle", "(", "d_path_1", ")", "\n", "acc_0", "=", "dict_0", "[", "'acc'", "]", "\n", "acc_1", "=", "dict_1", "[", "'acc'", "]", "\n", "del", "dict_0", "[", "'acc'", "]", "\n", "del", "dict_1", "[", "'acc'", "]", "\n", "#import ipdb; ipdb.set_trace()", "\n", "agree", "=", "[", "]", "\n", "disagree", "=", "[", "]", "\n", "for", "qid", "in", "dict_0", ".", "keys", "(", ")", ":", "\n", "        ", "check_0", "=", "dict_0", "[", "qid", "]", ".", "popitem", "(", ")", "[", "1", "]", "\n", "check_1", "=", "dict_1", "[", "qid", "]", ".", "popitem", "(", ")", "[", "1", "]", "\n", "if", "check_0", "[", "6", "]", "==", "check_1", "[", "6", "]", ":", "\n", "            ", "agree", ".", "append", "(", "qid", ")", "\n", "", "else", ":", "\n", "            ", "disagree", ".", "append", "(", "qid", ")", "\n", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "", "", "return", "(", "len", "(", "agree", ")", "/", "(", "len", "(", "agree", ")", "+", "len", "(", "disagree", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.save_matrix_for_heatmap.answers_per_q": [[63, 75], ["utils.load_pickle", "utils.load_pickle.keys", "dict_0[].popitem"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle"], ["", "def", "answers_per_q", "(", "d_path_0", ")", ":", "\n", "    ", "dict_0", "=", "load_pickle", "(", "d_path_0", ")", "\n", "acc_0", "=", "dict_0", "[", "'acc'", "]", "\n", "del", "dict_0", "[", "'acc'", "]", "\n", "#import ipdb; ipdb.set_trace()", "\n", "qid2a", "=", "{", "}", "\n", "for", "qid", "in", "dict_0", ".", "keys", "(", ")", ":", "\n", "        ", "check_0", "=", "dict_0", "[", "qid", "]", ".", "popitem", "(", ")", "[", "1", "]", "\n", "qid2a", "[", "qid", "]", "=", "(", "check_0", "[", "5", "]", ",", "check_0", "[", "6", "]", ")", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "", "return", "(", "qid2a", ",", "acc_0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.__init__": [[17, 21], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "opt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.initialize": [[22, 27], ["violin_plot.BaseOptions.parser.add_argument", "violin_plot.BaseOptions.parser.add_argument", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "\"--lanecheck_path\"", ",", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/kable_management/mk8+-tvqa/dataset_paper/jerry/results/tvqa_abc_svir_bert/lanecheck_dict.pickle_valid\"", ")", ",", "\n", "help", "=", "\"Validation lane check path\"", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\"--jobname\"", ",", "type", "=", "str", ",", "help", "=", "\"This jobname is plotted as the title of the plot\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.parse": [[28, 35], ["violin_plot.BaseOptions.parser.parse_args", "violin_plot.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.BaseOptions.initialize"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "\"\"\"parse cmd line arguments and do some preprocessing\"\"\"", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tn_fn": [[36, 46], ["None"], "function", ["None"], ["", "", "def", "confusion_matrix_tn_fn", "(", "a_idx", ",", "ground_truth", ",", "prediciton", ")", ":", "\n", "# if(a_idx == ground_truth) and (a_idx == prediciton):", "\n", "#     return('True Positive')", "\n", "# if(a_idx != ground_truth) and (a_idx == prediciton):", "\n", "#     return('False Positive')", "\n", "    ", "if", "(", "a_idx", "==", "ground_truth", ")", "and", "(", "a_idx", "!=", "prediciton", ")", ":", "\n", "        ", "return", "(", "'False Negative'", ")", "\n", "", "if", "(", "a_idx", "!=", "ground_truth", ")", "and", "(", "a_idx", "!=", "prediciton", ")", ":", "\n", "        ", "return", "(", "'True Negative'", ")", "\n", "", "return", "(", "'Ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tp_fp": [[47, 57], ["None"], "function", ["None"], ["", "def", "confusion_matrix_tp_fp", "(", "a_idx", ",", "ground_truth", ",", "prediciton", ")", ":", "\n", "    ", "if", "(", "a_idx", "==", "ground_truth", ")", "and", "(", "a_idx", "==", "prediciton", ")", ":", "\n", "        ", "return", "(", "'True Positive'", ")", "\n", "", "if", "(", "a_idx", "!=", "ground_truth", ")", "and", "(", "a_idx", "==", "prediciton", ")", ":", "\n", "        ", "return", "(", "'False Positive'", ")", "\n", "# if(a_idx == ground_truth) and (a_idx != prediciton):", "\n", "#     return('False Negative')", "\n", "# if(a_idx != ground_truth) and (a_idx != prediciton):", "\n", "#     return('True Negative')", "\n", "", "return", "(", "'Ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.one_plot": [[61, 176], ["seaborn.set", "utils.load_pickle", "random.choice", "utils.load_pickle.items", "seaborn.set", "seaborn.set_style", "matplotlib.subplots", "x_labels.append", "print", "print", "pandas.DataFrame", "seaborn.violinplot", "matplotlib.title", "matplotlib.show", "list", "random.choice.get", "random.choice.get", "random.choice.get", "random.choice.get", "random.choice.get", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "x_labels.append", "x_labels.append", "x_labels.append", "x_labels.append", "utils.load_pickle.values", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "seaborn.light_palette", "seaborn.light_palette", "seaborn.light_palette", "seaborn.light_palette", "violin_plot.confusion_matrix_tp_fp", "enumerate", "violin_plot.confusion_matrix_tp_fp", "enumerate", "violin_plot.confusion_matrix_tp_fp", "enumerate", "violin_plot.confusion_matrix_tp_fp", "enumerate"], "function", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.None.utils.load_pickle", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tp_fp", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tp_fp", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tp_fp", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.violin_plot.confusion_matrix_tp_fp"], ["", "def", "one_plot", "(", "opt", ")", ":", "\n", "    ", "sns", ".", "set", "(", "style", "=", "\"whitegrid\"", ",", "palette", "=", "\"pastel\"", ",", "color_codes", "=", "True", ")", "\n", "# Font settings for plot", "\n", "import", "matplotlib", "\n", "#matplotlib.use('GTK')", "\n", "# matplotlib.rc('font', family='sans-serif') ", "\n", "# matplotlib.rc('font', serif='Helvetica Neue') ", "\n", "# matplotlib.rc('text', usetex='false') ", "\n", "# matplotlib.rcParams['font.family'] = 'cursive'", "\n", "\n", "# Load dictionary", "\n", "lanecheck_dict", "=", "utils", ".", "load_pickle", "(", "opt", ".", "lanecheck_path", ")", "\n", "\n", "# Lanecheck out", "\n", "sub_out", "=", "[", "]", "\n", "vcpt_out", "=", "[", "]", "\n", "vid_out", "=", "[", "]", "\n", "reg_out", "=", "[", "]", "\n", "regtopk_out", "=", "[", "]", "\n", "\n", "# Check what out features are needed", "\n", "sub_flag", "=", "True", "\n", "vcpt_flag", "=", "True", "\n", "vid_flag", "=", "True", "\n", "reg_flag", "=", "True", "\n", "regtopk_flag", "=", "True", "\n", "check", "=", "random", ".", "choice", "(", "list", "(", "lanecheck_dict", ".", "values", "(", ")", ")", ")", "\n", "if", "check", ".", "get", "(", "'sub_out'", ")", "is", "None", ":", "\n", "        ", "sub_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'vcpt_out'", ")", "is", "None", ":", "\n", "        ", "vcpt_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'vid_out'", ")", "is", "None", ":", "\n", "        ", "vid_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'reg_out'", ")", "is", "None", ":", "\n", "        ", "reg_flag", "=", "False", "\n", "", "if", "check", ".", "get", "(", "'regtopk_out'", ")", "is", "None", ":", "\n", "        ", "regtopk_flag", "=", "False", "\n", "\n", "# Iterate through the lanecheck items", "\n", "", "del", "lanecheck_dict", "[", "'acc'", "]", "\n", "for", "qid", ",", "q_dict", "in", "lanecheck_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "sub_flag", ":", "\n", "            ", "sub_out", ".", "append", "(", "q_dict", "[", "'sub_out'", "]", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "            ", "vcpt_out", ".", "append", "(", "q_dict", "[", "'vcpt_out'", "]", ")", "\n", "", "if", "vid_flag", ":", "\n", "            ", "vid_out", ".", "append", "(", "q_dict", "[", "'vid_out'", "]", ")", "\n", "", "if", "reg_flag", ":", "\n", "            ", "reg_out", ".", "append", "(", "q_dict", "[", "'reg_out'", "]", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "            ", "regtopk_out", ".", "append", "(", "q_dict", "[", "'regtopk_out'", "]", ")", "\n", "", "", "if", "sub_flag", ":", "\n", "        ", "sub_out", "=", "np", ".", "stack", "(", "sub_out", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "        ", "vcpt_out", "=", "np", ".", "stack", "(", "vcpt_out", ")", "\n", "", "if", "vid_flag", ":", "\n", "        ", "vid_out", "=", "np", ".", "stack", "(", "vid_out", ")", "\n", "", "if", "reg_flag", ":", "\n", "        ", "reg_out", "=", "np", ".", "stack", "(", "reg_out", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "        ", "regtopk_out", "=", "np", ".", "stack", "(", "regtopk_out", ")", "\n", "\n", "", "import", "pandas", "as", "pd", "\n", "\n", "# Plot settings", "\n", "pal_tp_fp", "=", "{", "\"True Positive\"", ":", "sns", ".", "light_palette", "(", "\"green\"", ")", "[", "1", "]", ",", "\"False Positive\"", ":", "sns", ".", "light_palette", "(", "\"red\"", ")", "[", "1", "]", "}", "\n", "pal_tn_fn", "=", "{", "\"True Negative\"", ":", "sns", ".", "light_palette", "(", "\"red\"", ")", "[", "1", "]", ",", "\"False Negative\"", ":", "sns", ".", "light_palette", "(", "\"orange\"", ")", "[", "1", "]", "}", "\n", "plot_no", "=", "1", "\n", "\n", "sns", ".", "set", "(", "font_scale", "=", "1.5", ")", "\n", "sns", ".", "set_style", "(", "\"whitegrid\"", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "x_labels", "=", "[", "]", "\n", "if", "sub_flag", ":", "\n", "        ", "sub_out", "=", "[", "(", "'Subtitles'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tp_fp", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "sub_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "sub_out", "=", "[", "element", "for", "element", "in", "sub_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Subtitles'", ")", "\n", "", "if", "vcpt_flag", ":", "\n", "        ", "vcpt_out", "=", "[", "(", "'Visual Concepts'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tp_fp", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "vcpt_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "vcpt_out", "=", "[", "element", "for", "element", "in", "vcpt_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Visual Concepts'", ")", "\n", "", "if", "vid_flag", ":", "\n", "        ", "vid_out", "=", "[", "(", "'ImageNet'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tp_fp", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "vid_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "vid_out", "=", "[", "element", "for", "element", "in", "vid_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'ImageNet'", ")", "\n", "", "if", "regtopk_flag", ":", "\n", "        ", "regtopk_out", "=", "[", "(", "'Regional Features'", ",", "value", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ",", "confusion_matrix_tp_fp", "(", "a_idx", ",", "aa", "[", "5", "]", ",", "aa", "[", "6", "]", ")", ")", "for", "aa", "in", "regtopk_out", "for", "a_idx", ",", "value", "in", "enumerate", "(", "aa", "[", ":", "5", "]", ")", "]", "\n", "regtopk_out", "=", "[", "element", "for", "element", "in", "regtopk_out", "if", "element", "[", "4", "]", "!=", "'Ignore'", "]", "\n", "x_labels", ".", "append", "(", "'Regional Features'", ")", "\n", "", "x_labels", ".", "append", "(", "'Nothing inparticular'", ")", "\n", "#plt.xticks([])", "\n", "data", "=", "[", "]", "\n", "#data += [('', 38, 1, 1, \"True Negative\")]", "\n", "#data += [('1', -7, 1, 1, \"True Negative\")]", "\n", "data", "+=", "sub_out", "\n", "data", "+=", "vcpt_out", "\n", "data", "+=", "vid_out", "\n", "data", "+=", "regtopk_out", "\n", "\n", "maxx", "=", "0", "\n", "minn", "=", "0", "\n", "for", "dtuple", "in", "data", ":", "\n", "        ", "if", "maxx", "<", "dtuple", "[", "1", "]", ":", "\n", "            ", "maxx", "=", "dtuple", "[", "1", "]", "\n", "", "if", "minn", ">", "dtuple", "[", "1", "]", ":", "\n", "            ", "minn", "=", "dtuple", "[", "1", "]", "\n", "", "", "print", "(", "maxx", ")", "\n", "print", "(", "minn", ")", "\n", "\n", "# data += [('', 38.594997, 1, 1, \"False Positive\")]", "\n", "#data += [('1', -5.7718792, 1, 1, \"False Positive\")]", "\n", "data", "=", "pd", ".", "DataFrame", "(", "data", ",", "columns", "=", "[", "''", ",", "'Vote Contribution'", ",", "'ground_truth'", ",", "'prediction'", ",", "'Answer Type'", "]", ")", "\n", "sns", ".", "violinplot", "(", "data", "=", "data", ",", "palette", "=", "pal_tp_fp", ",", "inner", "=", "\"quart\"", ",", "linewidth", "=", "2.5", ",", "hue", "=", "'Answer Type'", ",", "x", "=", "''", ",", "y", "=", "'Vote Contribution'", ",", "split", "=", "True", ",", "legend", "=", "False", ",", "legend_out", "=", "True", ")", "\n", "plt", ".", "title", "(", "opt", ".", "jobname", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.RAdam.__init__": [[212, 216], ["dict", "torch.optim.optimizer.Optimizer.__init__", "range"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.RAdam.__setstate__": [[217, 219], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.RAdam.step": [[220, 284], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.PlainRAdam.__init__": [[287, 291], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.PlainRAdam.__setstate__": [[292, 294], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.PlainRAdam.step": [[295, 348], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "math.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'RAdam does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "", "else", ":", "\n", "                    ", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "\n", "", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.__init__": [[352, 356], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "weight_decay", "=", "0", ",", "warmup", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "warmup", "=", "warmup", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.__setstate__": [[357, 359], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.tools.radam.AdamW.step": [[360, 413], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.RNNEncoder.__init__": [[14, 31], ["torch.Module.__init__", "getattr", "rnn_type.upper"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["def", "__init__", "(", "self", ",", "word_embedding_size", ",", "hidden_size", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ",", "return_hidden", "=", "True", ",", "return_outputs", "=", "True", ")", ":", "\n", "        ", "super", "(", "RNNEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"  \n        :param word_embedding_size: rnn input size\n        :param hidden_size: rnn output size\n        :param dropout_p: between rnn layers, only useful when n_layer >= 2\n        \"\"\"", "\n", "self", ".", "rnn_type", "=", "rnn_type", "\n", "self", ".", "n_dirs", "=", "2", "if", "bidirectional", "else", "1", "\n", "# - add return_hidden keyword arg to reduce computation if hidden is not needed.", "\n", "self", ".", "return_hidden", "=", "return_hidden", "\n", "self", ".", "return_outputs", "=", "return_outputs", "\n", "self", ".", "rnn", "=", "getattr", "(", "nn", ",", "rnn_type", ".", "upper", "(", ")", ")", "(", "word_embedding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "dropout", "=", "dropout_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.RNNEncoder.sort_batch": [[32, 39], ["lengths.sort", "range", "len", "len", "list"], "methods", ["None"], ["", "def", "sort_batch", "(", "self", ",", "seq", ",", "lengths", ")", ":", "\n", "        ", "sorted_lengths", ",", "perm_idx", "=", "lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "reverse_indices", "=", "[", "0", "]", "*", "len", "(", "perm_idx", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "perm_idx", ")", ")", ":", "\n", "            ", "reverse_indices", "[", "perm_idx", "[", "i", "]", "]", "=", "i", "\n", "", "sorted_seq", "=", "seq", "[", "perm_idx", "]", "\n", "return", "sorted_seq", ",", "list", "(", "sorted_lengths", ")", ",", "reverse_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.RNNEncoder.forward": [[40, 77], ["range", "rnn.RNNEncoder.sort_batch", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "rnn.RNNEncoder.rnn", "len", "len", "len", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "hidden.view.view.transpose().contiguous", "hidden.view.view.view", "rnn.RNNEncoder.rnn_type.lower", "hidden.view.view.size", "hidden.view.view.transpose"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.RNNEncoder.sort_batch"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"\n        inputs, sorted_inputs -> (B, T, D)\n        lengths -> (B, )\n        outputs -> (B, T, n_dirs * D)\n        hidden -> (n_layers * n_dirs, B, D) -> (B, n_dirs * D)  keep the last layer\n        - add total_length in pad_packed_sequence for compatiblity with nn.DataParallel, --remove it\n        \"\"\"", "\n", "#if(inputs.shape[2]==900):", "\n", "#import ipdb; ipdb.set_trace()", "\n", "assert", "len", "(", "inputs", ")", "==", "len", "(", "lengths", ")", "\n", "#######################", "\n", "#import ipdb; ipdb.set_trace()", "\n", "# Solve the padding for 0 problem", "\n", "for", "x", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "            ", "if", "(", "lengths", "[", "x", "]", "==", "0", ")", ":", "\n", "                ", "lengths", "[", "x", "]", "=", "1", "\n", "#######################", "\n", "", "", "sorted_inputs", ",", "sorted_lengths", ",", "reverse_indices", "=", "self", ".", "sort_batch", "(", "inputs", ",", "lengths", ")", "\n", "packed_inputs", "=", "pack_padded_sequence", "(", "sorted_inputs", ",", "sorted_lengths", ",", "batch_first", "=", "True", ")", "\n", "outputs", ",", "hidden", "=", "self", ".", "rnn", "(", "packed_inputs", ")", "\n", "if", "self", ".", "return_outputs", ":", "\n", "# outputs, lengths = pad_packed_sequence(outputs, batch_first=True, total_length=int(max(lengths)))", "\n", "            ", "outputs", ",", "lengths", "=", "pad_packed_sequence", "(", "outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs", "=", "outputs", "[", "reverse_indices", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "None", "\n", "", "if", "self", ".", "return_hidden", ":", "#", "\n", "            ", "if", "self", ".", "rnn_type", ".", "lower", "(", ")", "==", "\"lstm\"", ":", "\n", "                ", "hidden", "=", "hidden", "[", "0", "]", "\n", "", "hidden", "=", "hidden", "[", "-", "self", ".", "n_dirs", ":", ",", ":", ",", ":", "]", "\n", "hidden", "=", "hidden", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "hidden", "=", "hidden", ".", "view", "(", "hidden", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "hidden", "=", "hidden", "[", "reverse_indices", "]", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "None", "\n", "", "return", "outputs", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time": [[79, 87], ["torch.stack", "torch.stack", "outputs[].max", "range", "len", "int"], "function", ["None"], ["", "", "def", "max_along_time", "(", "outputs", ",", "lengths", ")", ":", "\n", "    ", "\"\"\" Get maximum responses from RNN outputs along time axis\n    :param outputs: (B, T, D)\n    :param lengths: (B, )\n    :return: (B, D)\n    \"\"\"", "\n", "outputs", "=", "[", "outputs", "[", "i", ",", ":", "int", "(", "lengths", "[", "i", "]", ")", ",", ":", "]", ".", "max", "(", "dim", "=", "0", ")", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "return", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time": [[88, 103], ["range", "torch.stack", "torch.stack", "len", "returns.append", "outs.mean", "outputs[].topk", "outputs[].topk", "int", "int"], "function", ["None"], ["", "def", "max_avg_along_time", "(", "outputs", ",", "lengths", ",", "k", ")", ":", "# Average the top k responses", "\n", "    ", "\"\"\" Get average of the top n maximum responses from RNN outputs along time axis\n    If n>lengths simply take the average instead\n    :param outputs: (B, T, D)\n    :param lengths: (B, )\n    :return: (B, D)\n    \"\"\"", "\n", "returns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", ":", "\n", "        ", "if", "(", "lengths", "[", "i", "]", ">=", "k", ")", ":", "\n", "            ", "outs", "=", "outputs", "[", "i", ",", ":", "int", "(", "lengths", "[", "i", "]", ")", ",", ":", "]", ".", "topk", "(", "k", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "outs", "=", "outputs", "[", "i", ",", ":", "int", "(", "lengths", "[", "i", "]", ")", ",", ":", "]", ".", "topk", "(", "lengths", "[", "i", "]", ",", "dim", "=", "0", ")", "[", "0", "]", "\n", "", "returns", ".", "append", "(", "outs", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "returns", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.mean_along_time": [[104, 112], ["torch.stack", "torch.stack", "outputs[].mean", "range", "len", "int"], "function", ["None"], ["", "def", "mean_along_time", "(", "outputs", ",", "lengths", ")", ":", "\n", "    ", "\"\"\" Get mean responses from RNN outputs along time axis\n    :param outputs: (B, T, D)\n    :param lengths: (B, )\n    :return: (B, D)\n    \"\"\"", "\n", "outputs", "=", "[", "outputs", "[", "i", ",", ":", "int", "(", "lengths", "[", "i", "]", ")", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "for", "i", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "return", "torch", ".", "stack", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.__init__": [[22, 203], ["torch.nn.Module.__init__", "bidaf.BidafAttn", "torch.nn.Embedding", "torch.nn.Embedding", "tvqa_abc_bert_nofc.ABC.bert.parameters", "bidaf.BidafAttn", "rnn.RNNEncoder", "rnn.RNNEncoder", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "torch.nn.Sequential", "torch.nn.Sequential", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "BertModel.from_pretrained", "fusions.LinearSum", "fusions.ConcatMLP", "fusions.MCB", "fusions.MFH", "fusions.MFB", "fusions.MLB", "fusions.Block", "fusions.Tucker", "fusions.BlockTucker", "fusions.Mutan", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "BertForMultipleChoice.from_pretrained", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "DeepCCAModels.DeepCCA", "DeepCCAModels.DeepCCA", "DeepCCAModels.DeepCCA", "DeepCCAModels.DeepCCA", "DeepCCAModels.DeepCCA", "DeepCCAModels.DeepCCA", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "BertForQuestionAnswering.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ABC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vid_flag", "=", "\"imagenet\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "sub_flag", "=", "\"sub\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "vcpt_flag", "=", "\"vcpt\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "reg_flag", "=", "\"regional\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "regtopk_flag", "=", "(", "-", "1", "!=", "opt", ".", "regional_topk", ")", "\n", "self", ".", "topk", "=", "opt", ".", "topk", "\n", "self", ".", "opt", "=", "opt", "\n", "hidden_size_1", "=", "opt", ".", "hsz1", "\n", "hidden_size_2", "=", "opt", ".", "hsz2", "\n", "n_layers_cls", "=", "opt", ".", "n_layers_cls", "\n", "vid_feat_size", "=", "opt", ".", "vid_feat_size", "\n", "embedding_size", "=", "opt", ".", "embedding_size", "\n", "\n", "# For BERT", "\n", "if", "opt", ".", "bert", "is", "None", ":", "\n", "            ", "vocab_size", "=", "opt", ".", "vocab_size", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_size", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "bert", "in", "[", "\"default\"", "]", ":", "\n", "                ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"multi_choice\"", ":", "\n", "                ", "self", ".", "bert", "=", "BertForMultipleChoice", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"qa\"", ":", "\n", "                ", "self", ".", "bert", "=", "BertForQuestionAnswering", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "for", "param", "in", "self", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "bidaf", "=", "BidafAttn", "(", "hidden_size_1", "*", "3", ",", "method", "=", "\"dot\"", ")", "# no parameter for dot", "\n", "if", "opt", ".", "dual_stream", ":", "\n", "            ", "self", ".", "bidaf2", "=", "BidafAttn", "(", "hidden_size_1", "*", "3", ",", "method", "=", "\"dot\"", ")", "\n", "", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "            ", "self", ".", "lstm_raw", "=", "RNNEncoder", "(", "300", ",", "hidden_size_1", ",", "bidirectional", "=", "True", ",", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "#changed", "\n", "", "else", ":", "\n", "            ", "self", ".", "lstm_raw", "=", "RNNEncoder", "(", "768", ",", "hidden_size_1", ",", "bidirectional", "=", "True", ",", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "#####################################################################################################################", "\n", "", "if", "self", ".", "opt", ".", "pool_type", "is", "not", "\"default\"", ":", "\n", "            ", "activation", "=", "'leaky_relu'", "\n", "dropout", "=", "0.2", "\n", "choices", "=", "{", "\n", "\"default\"", ":", "None", ",", "\n", "\n", "\"LinearSum\"", ":", "fusions", ".", "LinearSum", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1200", "\n", "activ_input", "=", "activation", ",", "activ_output", "=", "activation", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"ConcatMLP\"", ":", "fusions", ".", "ConcatMLP", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "dimensions", "=", "[", "opt", ".", "pool_hidden_dim", ",", "opt", ".", "pool_hidden_dim", "]", ",", "#[500,500]", "\n", "activation", "=", "activation", ",", "\n", "dropout", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"MCB\"", ":", "fusions", ".", "MCB", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#16000 ## Not usable with pytorch 1.0 or late apparently", "\n", "activ_output", "=", "activation", ",", "\n", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"MFH\"", ":", "fusions", ".", "MFH", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "factor", "=", "2", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1200", "\n", "activ_input", "=", "activation", ",", "activ_output", "=", "activation", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"MFB\"", ":", "fusions", ".", "MFB", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "factor", "=", "2", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1200", "\n", "activ_input", "=", "activation", ",", "activ_output", "=", "activation", ",", "normalize", "=", "True", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_norm", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"MLB\"", ":", "fusions", ".", "MLB", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1200", "\n", "activ_input", "=", "activation", ",", "activ_output", "=", "activation", ",", "normalize", "=", "True", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"Block\"", ":", "fusions", ".", "Block", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1600 NO ACITVATIONS IN HERE CURRENTLY", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"Tucker\"", ":", "fusions", ".", "Tucker", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1600 NO ACITVATIONS IN HERE CURRENTLY", "\n", "normalize", "=", "True", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"BlockTucker\"", ":", "fusions", ".", "BlockTucker", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1600 NO ACITVATIONS IN HERE CURRENTLY", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", ",", "\n", "\n", "\"Mutan\"", ":", "fusions", ".", "Mutan", "(", "\n", "input_dims", "=", "opt", ".", "pool_in_dims", ",", "output_dim", "=", "opt", ".", "pool_out_dim", ",", "mm_dim", "=", "opt", ".", "pool_hidden_dim", ",", "#1600 NO ACITVATIONS IN HERE CURRENTLY", "\n", "normalize", "=", "True", ",", "\n", "dropout_input", "=", "dropout", ",", "dropout_pre_lin", "=", "dropout", ",", "dropout_output", "=", "dropout", "\n", ")", "\n", "}", "\n", "self", ".", "blp", "=", "choices", "[", "self", ".", "opt", ".", "pool_type", "]", "\n", "#####################################################################################################################", "\n", "\n", "\n", "", "if", "self", ".", "vid_flag", ":", "\n", "            ", "print", "(", "\"activate video stream\"", ")", "\n", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "                ", "self", ".", "video_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "video_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "768", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "self", ".", "lstm_mature_vid", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_vid", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "if", "self", ".", "opt", ".", "deep_cca", ":", "\n", "                ", "if", "self", ".", "opt", ".", "bert", "==", "\"default\"", ":", "\n", "                    ", "self", ".", "dcca_vidqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "dcca_vidqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "sub_flag", ":", "\n", "            ", "print", "(", "\"activate sub stream\"", ")", "\n", "self", ".", "lstm_mature_sub", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_sub", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "if", "self", ".", "opt", ".", "deep_cca", ":", "\n", "                ", "if", "self", ".", "opt", ".", "bert", "==", "\"default\"", ":", "\n", "                    ", "self", ".", "dcca_subqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "dcca_subqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "vcpt_flag", ":", "\n", "            ", "print", "(", "\"activate vcpt stream\"", ")", "\n", "self", ".", "lstm_mature_vcpt", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_vcpt", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "if", "self", ".", "opt", ".", "deep_cca", ":", "\n", "                ", "if", "self", ".", "opt", ".", "bert", "==", "\"default\"", ":", "\n", "                    ", "self", ".", "dcca_vcptqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "dcca_vcptqa", "=", "DeepCCA", "(", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "[", "embedding_size", "]", "*", "opt", ".", "deep_cca_layers", ",", "embedding_size", ",", "embedding_size", ",", "embedding_size", ",", "True", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "reg_flag", "and", "not", "self", ".", "regtopk_flag", ":", "\n", "            ", "print", "(", "\"activate regional stream\"", ")", "\n", "self", ".", "regional_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "self", ".", "lstm_mature_reg", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_reg", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n", "", "if", "self", ".", "regtopk_flag", ":", "\n", "            ", "print", "(", "\"activate regional-topk stream\"", ")", "\n", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "                ", "self", ".", "regionaltopk_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "regionaltopk_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "768", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "self", ".", "lstm_mature_regtopk", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_regtopk", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.load_embedding": [[206, 208], ["tvqa_abc_bert_nofc.ABC.embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "load_embedding", "(", "self", ",", "pretrained_embedding", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "pretrained_embedding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.forward": [[209, 322], ["tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.video_fc", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "tvqa_abc_bert_nofc.ABC.video_fc", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "tvqa_abc_bert_nofc.ABC.regional_fc", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "tvqa_abc_bert_nofc.ABC.regionaltopk_fc", "tvqa_abc_bert_nofc.ABC.lstm_raw", "tvqa_abc_bert_nofc.ABC.stream_processor", "out.squeeze", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "tvqa_abc_bert_nofc.ABC.embedding", "out.squeeze", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert", "tvqa_abc_bert_nofc.ABC.bert"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor"], ["", "def", "forward", "(", "self", ",", "q", ",", "q_l", ",", "a0", ",", "a0_l", ",", "a1", ",", "a1_l", ",", "a2", ",", "a2_l", ",", "a3", ",", "a3_l", ",", "a4", ",", "a4_l", ",", "\n", "sub", ",", "sub_l", ",", "vcpt", ",", "vcpt_l", ",", "vid", ",", "vid_l", ",", "reg", ",", "reg_l", ",", "regtopk", ",", "regtopk_l", ")", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "        ", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "# For BERT", "\n", "            ", "e_q", "=", "self", ".", "embedding", "(", "q", ")", "\n", "e_a0", "=", "self", ".", "embedding", "(", "a0", ")", "\n", "e_a1", "=", "self", ".", "embedding", "(", "a1", ")", "\n", "e_a2", "=", "self", ".", "embedding", "(", "a2", ")", "\n", "e_a3", "=", "self", ".", "embedding", "(", "a3", ")", "\n", "e_a4", "=", "self", ".", "embedding", "(", "a4", ")", "\n", "\n", "raw_out_q", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_q", ",", "q_l", ")", "\n", "raw_out_a0", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a0", ",", "a0_l", ")", "\n", "raw_out_a1", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a1", ",", "a1_l", ")", "\n", "raw_out_a2", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a2", ",", "a2_l", ")", "\n", "raw_out_a3", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a3", ",", "a3_l", ")", "\n", "raw_out_a4", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "e_q", "=", "self", ".", "bert", "(", "q", ")", "[", "0", "]", "\n", "e_a0", "=", "self", ".", "bert", "(", "a0", ")", "[", "0", "]", "\n", "e_a1", "=", "self", ".", "bert", "(", "a1", ")", "[", "0", "]", "\n", "e_a2", "=", "self", ".", "bert", "(", "a2", ")", "[", "0", "]", "\n", "e_a3", "=", "self", ".", "bert", "(", "a3", ")", "[", "0", "]", "\n", "e_a4", "=", "self", ".", "bert", "(", "a4", ")", "[", "0", "]", "\n", "\n", "raw_out_q", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_q", ",", "q_l", ")", "\n", "raw_out_a0", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a0", ",", "a0_l", ")", "\n", "raw_out_a1", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a1", ",", "a1_l", ")", "\n", "raw_out_a2", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a2", ",", "a2_l", ")", "\n", "raw_out_a3", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a3", ",", "a3_l", ")", "\n", "raw_out_a4", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a4", ",", "a4_l", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "dual_stream", ":", "\n", "# Sub stream", "\n", "            ", "if", "(", "self", ".", "opt", ".", "bert", "is", "None", ")", ":", "# For BERT", "\n", "                ", "e_sub", "=", "self", ".", "embedding", "(", "sub", ")", "#Subtitles embedded", "\n", "", "else", ":", "\n", "                ", "e_sub", "=", "self", ".", "bert", "(", "sub", ")", "[", "0", "]", "\n", "", "raw_out_sub", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_sub", ",", "sub_l", ")", "#through lstm", "\n", "# Vid stream", "\n", "e_vid", "=", "self", ".", "video_fc", "(", "vid", ")", "\n", "raw_out_vid", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_vid", ",", "vid_l", ")", "\n", "\n", "# Stream Processing", "\n", "## For dual streaming, lstm, classifiers, ctx embeddings and their lengths are packed together as tuples for unpacking in the stream_processor object", "\n", "dual_stream_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_vid", ",", "\n", "self", ".", "classifier_vid", ",", "\n", "(", "raw_out_vid", ",", "raw_out_sub", ")", ",", "\n", "(", "vid_l", ",", "sub_l", ")", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"dual\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "dual_stream_out", "=", "0", "\n", "\n", "\n", "", "if", "self", ".", "sub_flag", "and", "(", "'sub'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", "and", "not", "self", ".", "opt", ".", "dual_stream", ":", "\n", "            ", "if", "(", "self", ".", "opt", ".", "bert", "is", "None", ")", ":", "# For BERT", "\n", "                ", "e_sub", "=", "self", ".", "embedding", "(", "sub", ")", "#Subtitles embedded", "\n", "", "else", ":", "\n", "                ", "e_sub", "=", "self", ".", "bert", "(", "sub", ")", "[", "0", "]", "\n", "", "raw_out_sub", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_sub", ",", "sub_l", ")", "#through lstm", "\n", "sub_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_sub", ",", "self", ".", "classifier_sub", ",", "raw_out_sub", ",", "sub_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"sub\"", ")", "#Fusion happens in here for subtitles", "\n", "", "else", ":", "\n", "            ", "sub_out", "=", "0", "\n", "\n", "", "if", "self", ".", "vcpt_flag", "and", "(", "'vcpt'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", "and", "not", "self", ".", "opt", ".", "dual_stream", ":", "\n", "            ", "if", "(", "self", ".", "opt", ".", "bert", "is", "None", ")", ":", "# For BERT", "\n", "                ", "e_vcpt", "=", "self", ".", "embedding", "(", "vcpt", ")", "\n", "", "else", ":", "\n", "                ", "e_vcpt", "=", "self", ".", "bert", "(", "vcpt", ")", "[", "0", "]", "\n", "", "raw_out_vcpt", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_vcpt", ",", "vcpt_l", ")", "\n", "vcpt_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_vcpt", ",", "self", ".", "classifier_vcpt", ",", "raw_out_vcpt", ",", "vcpt_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"vcpt\"", ")", "\n", "", "else", ":", "\n", "            ", "vcpt_out", "=", "0", "\n", "\n", "", "if", "self", ".", "vid_flag", "and", "(", "'vid'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", "and", "not", "self", ".", "opt", ".", "dual_stream", ":", "\n", "            ", "e_vid", "=", "self", ".", "video_fc", "(", "vid", ")", "\n", "raw_out_vid", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_vid", ",", "vid_l", ")", "\n", "vid_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_vid", ",", "self", ".", "classifier_vid", ",", "raw_out_vid", ",", "vid_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"vid\"", ")", "\n", "", "else", ":", "\n", "            ", "vid_out", "=", "0", "\n", "\n", "#### Reg ####", "\n", "", "if", "self", ".", "reg_flag", "and", "not", "self", ".", "regtopk_flag", "and", "not", "self", ".", "opt", ".", "dual_stream", ":", "\n", "            ", "e_reg", "=", "self", ".", "regional_fc", "(", "reg", ")", "\n", "raw_out_reg", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_reg", ",", "reg_l", ")", "\n", "reg_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_reg", ",", "self", ".", "classifier_reg", ",", "raw_out_reg", ",", "reg_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"reg\"", ")", "\n", "", "else", ":", "\n", "            ", "reg_out", "=", "0", "\n", "\n", "#### Reg Top k ####", "\n", "", "if", "self", ".", "regtopk_flag", "and", "(", "'regional'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", "and", "not", "self", ".", "opt", ".", "dual_stream", ":", "\n", "            ", "e_regtopk", "=", "self", ".", "regionaltopk_fc", "(", "regtopk", ")", "\n", "raw_out_regtopk", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_regtopk", ",", "regtopk_l", ")", "\n", "regtopk_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_regtopk", ",", "self", ".", "classifier_regtopk", ",", "raw_out_regtopk", ",", "regtopk_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ",", "self", ".", "opt", ",", "\"regtopk\"", ")", "\n", "", "else", ":", "\n", "            ", "regtopk_out", "=", "0", "\n", "", "out", "=", "sub_out", "+", "vcpt_out", "+", "vid_out", "+", "reg_out", "+", "regtopk_out", "+", "dual_stream_out", "# adding zeros has no effect on backward", "\n", "if", "self", ".", "opt", ".", "lanecheck", ":", "\n", "            ", "return", "sub_out", ",", "vcpt_out", ",", "vid_out", ",", "reg_out", ",", "regtopk_out", ",", "out", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.stream_processor": [[323, 481], ["tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.bidaf2", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.bidaf", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "tvqa_abc_bert_nofc.ABC.bidaf", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "tvqa_abc_bert_nofc.ABC.blp().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "tvqa_abc_bert_nofc.ABC.blp", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "v_q.view", "s_q.view", "v_a0.view", "s_a0.view", "v_a1.view", "s_a1.view", "v_a2.view", "s_a2.view", "v_a3.view", "s_a3.view", "v_a4.view", "s_a4.view", "range", "range", "range", "tvqa_abc_bert_nofc.ABC.dcca_subqa", "tvqa_abc_bert_nofc.ABC.dcca_vidqa", "tvqa_abc_bert_nofc.ABC.dcca_vcptqa", "u_q.view", "ctx_embed.view", "u_a0.view", "ctx_embed.view", "u_a1.view", "ctx_embed.view", "u_a2.view", "ctx_embed.view", "u_a3.view", "ctx_embed.view", "u_a4.view", "ctx_embed.view", "u_q.reshape", "ctx_embed.reshape", "u_q.reshape", "ctx_embed.reshape", "u_q.reshape", "ctx_embed.reshape", "u_q.reshape", "ctx_embed.reshape", "u_q.reshape", "ctx_embed.reshape", "u_q.reshape", "ctx_embed.reshape"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time"], ["", "", "def", "stream_processor", "(", "self", ",", "lstm_mature", ",", "classifier", ",", "ctx_embed", ",", "ctx_l", ",", "\n", "q_embed", ",", "q_l", ",", "a0_embed", ",", "a0_l", ",", "a1_embed", ",", "a1_l", ",", "a2_embed", ",", "a2_l", ",", "a3_embed", ",", "a3_l", ",", "a4_embed", ",", "a4_l", ",", "opt", ",", "stream_name", ")", ":", "\n", "        ", "if", "opt", ".", "dual_stream", ":", "\n", "            ", "ctx_embed", ",", "ctx_embed2", "=", "ctx_embed", "# ctx_embed = vid, ctx_embed2 = sub", "\n", "ctx_l", ",", "ctx_l2", "=", "ctx_l", "\n", "# process the extra vid stream here", "\n", "v_q", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "q_embed", ",", "q_l", ")", "\n", "v_a0", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a0_embed", ",", "a0_l", ")", "\n", "v_a1", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a1_embed", ",", "a1_l", ")", "\n", "v_a2", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a2_embed", ",", "a2_l", ")", "\n", "v_a3", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a3_embed", ",", "a3_l", ")", "\n", "v_a4", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a4_embed", ",", "a4_l", ")", "\n", "s_q", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "q_embed", ",", "q_l", ")", "\n", "s_a0", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "a0_embed", ",", "a0_l", ")", "\n", "s_a1", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "a1_embed", ",", "a1_l", ")", "\n", "s_a2", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "a2_embed", ",", "a2_l", ")", "\n", "s_a3", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "a3_embed", ",", "a3_l", ")", "\n", "s_a4", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed2", ",", "ctx_l2", ",", "a4_embed", ",", "a4_l", ")", "\n", "\n", "s_q", ",", "_", "=", "self", ".", "bidaf2", "(", "v_q", ",", "ctx_l", ",", "s_q", ",", "ctx_l2", ")", "\n", "s_a0", ",", "_", "=", "self", ".", "bidaf2", "(", "v_a0", ",", "ctx_l", ",", "s_a0", ",", "ctx_l2", ")", "\n", "s_a1", ",", "_", "=", "self", ".", "bidaf2", "(", "v_a1", ",", "ctx_l", ",", "s_a1", ",", "ctx_l2", ")", "\n", "s_a2", ",", "_", "=", "self", ".", "bidaf2", "(", "v_a2", ",", "ctx_l", ",", "s_a2", ",", "ctx_l2", ")", "\n", "s_a3", ",", "_", "=", "self", ".", "bidaf2", "(", "v_a3", ",", "ctx_l", ",", "s_a3", ",", "ctx_l2", ")", "\n", "s_a4", ",", "_", "=", "self", ".", "bidaf2", "(", "v_a4", ",", "ctx_l", ",", "s_a4", ",", "ctx_l2", ")", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "q_ctx", "=", "self", ".", "blp", "(", "[", "v_q", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_q", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_q", ".", "shape", "[", "0", "]", ",", "v_q", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a0_ctx", "=", "self", ".", "blp", "(", "[", "v_a0", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_a0", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_a0", ".", "shape", "[", "0", "]", ",", "v_a0", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a1_ctx", "=", "self", ".", "blp", "(", "[", "v_a1", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_a1", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_a1", ".", "shape", "[", "0", "]", ",", "v_a1", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a2_ctx", "=", "self", ".", "blp", "(", "[", "v_a2", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_a2", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_a2", ".", "shape", "[", "0", "]", ",", "v_a2", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a3_ctx", "=", "self", ".", "blp", "(", "[", "v_a3", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_a3", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_a3", ".", "shape", "[", "0", "]", ",", "v_a3", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a4_ctx", "=", "self", ".", "blp", "(", "[", "v_a4", ".", "view", "(", "-", "1", ",", "300", ")", ",", "s_a4", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "v_a4", ".", "shape", "[", "0", "]", ",", "v_a4", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "\n", "fuse_a0", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a0_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a1", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a1_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a2", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a2_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a3", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a3_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a4", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a4_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "mature_maxout_a0", ",", "_", "=", "lstm_mature", "(", "fuse_a0", ",", "ctx_l", ")", "\n", "mature_maxout_a1", ",", "_", "=", "lstm_mature", "(", "fuse_a1", ",", "ctx_l", ")", "\n", "mature_maxout_a2", ",", "_", "=", "lstm_mature", "(", "fuse_a2", ",", "ctx_l", ")", "\n", "mature_maxout_a3", ",", "_", "=", "lstm_mature", "(", "fuse_a3", ",", "ctx_l", ")", "\n", "mature_maxout_a4", ",", "_", "=", "lstm_mature", "(", "fuse_a4", ",", "ctx_l", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "if", "self", ".", "topk", "==", "1", ":", "\n", "                ", "mature_maxout_a0", "=", "max_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "mature_maxout_a0", "=", "max_avg_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_avg_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_avg_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_avg_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_avg_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "mature_answers", "=", "torch", ".", "cat", "(", "[", "\n", "mature_maxout_a0", ",", "mature_maxout_a1", ",", "mature_maxout_a2", ",", "mature_maxout_a3", ",", "mature_maxout_a4", "\n", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "classifier", "(", "mature_answers", ")", "# (B, 5)", "\n", "return", "out", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "opt", ".", "noqs", ":", "\n", "                ", "u_q", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "q_embed", ",", "q_l", ")", "\n", "", "u_a0", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a0_embed", ",", "a0_l", ")", "\n", "u_a1", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a1_embed", ",", "a1_l", ")", "\n", "u_a2", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a2_embed", ",", "a2_l", ")", "\n", "u_a3", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a3_embed", ",", "a3_l", ")", "\n", "u_a4", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a4_embed", ",", "a4_l", ")", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "if", "\"default\"", "in", "opt", ".", "pool_type", ":", "\n", "                ", "if", "not", "opt", ".", "noqs", ":", "\n", "                    ", "if", "self", ".", "opt", ".", "deep_cca", ":", "\n", "                        ", "if", "stream_name", "==", "\"sub\"", ":", "\n", "                            ", "for", "i", "in", "range", "(", "ctx_embed", ".", "shape", "[", "1", "]", ")", ":", "\n", "#u_q[:,i], ctx_embed[:,i] = self.dcca_subqa(u_q[:,i], ctx_embed[:,i])", "\n", "                                ", "reconstruct", "=", "ctx_embed", ".", "shape", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "reshape", "(", "-", "1", ",", "300", ")", "\n", "u_q", ",", "ctx_embed", "=", "self", ".", "dcca_subqa", "(", "u_q", ",", "ctx_embed", ")", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "reconstruct", ")", ",", "ctx_embed", ".", "reshape", "(", "reconstruct", ")", "\n", "\n", "", "", "if", "stream_name", "==", "\"vid\"", ":", "\n", "                            ", "for", "i", "in", "range", "(", "ctx_embed", ".", "shape", "[", "1", "]", ")", ":", "\n", "#u_q[:,i], ctx_embed[:,i] = self.dcca_vidqa(u_q[:,i], ctx_embed[:,i])", "\n", "                                ", "reconstruct", "=", "ctx_embed", ".", "shape", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "reshape", "(", "-", "1", ",", "300", ")", "\n", "u_q", ",", "ctx_embed", "=", "self", ".", "dcca_vidqa", "(", "u_q", ",", "ctx_embed", ")", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "reconstruct", ")", ",", "ctx_embed", ".", "reshape", "(", "reconstruct", ")", "\n", "\n", "\n", "", "", "if", "stream_name", "==", "\"vcpt\"", ":", "\n", "                            ", "for", "i", "in", "range", "(", "ctx_embed", ".", "shape", "[", "1", "]", ")", ":", "\n", "#u_q[:,i], ctx_embed[:,i] = self.dcca_vcptqa(u_q[:,i], ctx_embed[:,i])", "\n", "                                ", "reconstruct", "=", "ctx_embed", ".", "shape", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "reshape", "(", "-", "1", ",", "300", ")", "\n", "u_q", ",", "ctx_embed", "=", "self", ".", "dcca_vcptqa", "(", "u_q", ",", "ctx_embed", ")", "\n", "u_q", ",", "ctx_embed", "=", "u_q", ".", "reshape", "(", "reconstruct", ")", ",", "ctx_embed", ".", "reshape", "(", "reconstruct", ")", "\n", "\n", "\n", "\n", "\n", "\n", "", "", "", "fuse_a0", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a0", ",", "u_q", ",", "u_a0", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a1", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a1", ",", "u_q", ",", "u_a1", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a2", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a2", ",", "u_q", ",", "u_a2", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a3", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a3", ",", "u_q", ",", "u_a3", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a4", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a4", ",", "u_q", ",", "u_a4", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "#", "\n", "                    ", "fuse_a0", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a0", ",", "u_a0", "*", "ctx_embed", ",", "u_a0", "+", "ctx_embed", ",", "(", "u_a0", "*", "ctx_embed", ")", "*", "(", "u_a0", "+", "ctx_embed", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a1", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a1", ",", "u_a1", "*", "ctx_embed", ",", "u_a1", "+", "ctx_embed", ",", "(", "u_a1", "*", "ctx_embed", ")", "*", "(", "u_a1", "+", "ctx_embed", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a2", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a2", ",", "u_a2", "*", "ctx_embed", ",", "u_a2", "+", "ctx_embed", ",", "(", "u_a2", "*", "ctx_embed", ")", "*", "(", "u_a2", "+", "ctx_embed", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a3", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a3", ",", "u_a3", "*", "ctx_embed", ",", "u_a3", "+", "ctx_embed", ",", "(", "u_a3", "*", "ctx_embed", ")", "*", "(", "u_a3", "+", "ctx_embed", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a4", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a4", ",", "u_a4", "*", "ctx_embed", ",", "u_a4", "+", "ctx_embed", ",", "(", "u_a4", "*", "ctx_embed", ")", "*", "(", "u_a4", "+", "ctx_embed", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "                ", "q_ctx", "=", "self", ".", "blp", "(", "[", "u_q", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_q", ".", "shape", "[", "0", "]", ",", "u_q", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a0_ctx", "=", "self", ".", "blp", "(", "[", "u_a0", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_a0", ".", "shape", "[", "0", "]", ",", "u_a0", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a1_ctx", "=", "self", ".", "blp", "(", "[", "u_a1", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_a1", ".", "shape", "[", "0", "]", ",", "u_a1", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a2_ctx", "=", "self", ".", "blp", "(", "[", "u_a2", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_a2", ".", "shape", "[", "0", "]", ",", "u_a2", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a3_ctx", "=", "self", ".", "blp", "(", "[", "u_a3", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_a3", ".", "shape", "[", "0", "]", ",", "u_a3", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "a4_ctx", "=", "self", ".", "blp", "(", "[", "u_a4", ".", "view", "(", "-", "1", ",", "300", ")", ",", "ctx_embed", ".", "view", "(", "-", "1", ",", "300", ")", "]", ")", ".", "view", "(", "u_a4", ".", "shape", "[", "0", "]", ",", "u_a4", ".", "shape", "[", "1", "]", ",", "opt", ".", "pool_out_dim", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "fuse_a0", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a0_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a1", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a1_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a2", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a2_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a3", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a3_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "fuse_a4", "=", "torch", ".", "cat", "(", "[", "q_ctx", ",", "a4_ctx", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "mature_maxout_a0", ",", "_", "=", "lstm_mature", "(", "fuse_a0", ",", "ctx_l", ")", "\n", "mature_maxout_a1", ",", "_", "=", "lstm_mature", "(", "fuse_a1", ",", "ctx_l", ")", "\n", "mature_maxout_a2", ",", "_", "=", "lstm_mature", "(", "fuse_a2", ",", "ctx_l", ")", "\n", "mature_maxout_a3", ",", "_", "=", "lstm_mature", "(", "fuse_a3", ",", "ctx_l", ")", "\n", "mature_maxout_a4", ",", "_", "=", "lstm_mature", "(", "fuse_a4", ",", "ctx_l", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "if", "self", ".", "topk", "==", "1", ":", "\n", "                ", "mature_maxout_a0", "=", "max_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "mature_maxout_a0", "=", "max_avg_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_avg_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_avg_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_avg_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_avg_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "mature_answers", "=", "torch", ".", "cat", "(", "[", "\n", "mature_maxout_a0", ",", "mature_maxout_a1", ",", "mature_maxout_a2", ",", "mature_maxout_a3", ",", "mature_maxout_a4", "\n", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "classifier", "(", "mature_answers", ")", "# (B, 5)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.pointer_network": [[482, 484], ["None"], "methods", ["None"], ["", "", "def", "pointer_network", "(", ")", ":", "\n", "        ", "pass", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc.ABC.get_fake_inputs": [[484, 500], ["torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "range", "range", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_fake_inputs", "(", "device", "=", "\"cuda:0\"", ")", ":", "\n", "        ", "bsz", "=", "16", "\n", "q", "=", "torch", ".", "ones", "(", "bsz", ",", "25", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "q_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "25", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a", "=", "torch", ".", "ones", "(", "bsz", ",", "5", ",", "20", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a_l", "=", "torch", ".", "ones", "(", "bsz", ",", "5", ")", ".", "fill_", "(", "20", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a0", ",", "a1", ",", "a2", ",", "a3", ",", "a4", "=", "[", "a", "[", ":", ",", "i", ",", ":", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "a0_l", ",", "a1_l", ",", "a2_l", ",", "a3_l", ",", "a4_l", "=", "[", "a_l", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "sub", "=", "torch", ".", "ones", "(", "bsz", ",", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "sub_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vcpt", "=", "torch", ".", "ones", "(", "bsz", ",", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vcpt_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vid", "=", "torch", ".", "ones", "(", "bsz", ",", "100", ",", "2048", ")", ".", "to", "(", "device", ")", "\n", "vid_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "100", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "q", ",", "q_l", ",", "a0", ",", "a0_l", ",", "a1", ",", "a1_l", ",", "a2", ",", "a2_l", ",", "a3", ",", "a3_l", ",", "a4", ",", "a4_l", ",", "sub", ",", "sub_l", ",", "vcpt", ",", "vcpt_l", ",", "vid", ",", "vid_l", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.__init__": [[14, 110], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Sequential", "torch.nn.Sequential", "tvqa_abc_bert_nofc_bert-glove.ABC.bert.parameters", "bidaf.BidafAttn", "rnn.RNNEncoder", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "BertModel.from_pretrained", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "print", "torch.nn.Sequential", "torch.nn.Sequential", "rnn.RNNEncoder", "mlp.MLP", "print", "rnn.RNNEncoder", "mlp.MLP", "BertForMultipleChoice.from_pretrained", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "BertForQuestionAnswering.from_pretrained", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "ABC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vid_flag", "=", "\"imagenet\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "sub_flag", "=", "\"sub\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "vcpt_flag", "=", "\"vcpt\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "reg_flag", "=", "\"regional\"", "in", "opt", ".", "input_streams", "\n", "self", ".", "regtopk_flag", "=", "(", "-", "1", "!=", "opt", ".", "regional_topk", ")", "\n", "self", ".", "topk", "=", "opt", ".", "topk", "\n", "self", ".", "opt", "=", "opt", "\n", "hidden_size_1", "=", "opt", ".", "hsz1", "\n", "hidden_size_2", "=", "opt", ".", "hsz2", "\n", "n_layers_cls", "=", "opt", ".", "n_layers_cls", "\n", "vid_feat_size", "=", "opt", ".", "vid_feat_size", "\n", "embedding_size", "=", "opt", ".", "embedding_size", "\n", "\n", "# For BERT", "\n", "vocab_size", "=", "opt", ".", "vocab_size", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_size", ")", "\n", "self", ".", "bert_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "768", ",", "300", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "if", "opt", ".", "bert", "in", "[", "\"default\"", "]", ":", "\n", "            ", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"multi_choice\"", ":", "\n", "            ", "self", ".", "bert", "=", "BertForMultipleChoice", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "elif", "opt", ".", "bert", "==", "\"qa\"", ":", "\n", "            ", "self", ".", "bert", "=", "BertForQuestionAnswering", ".", "from_pretrained", "(", "'bert-base-uncased'", ")", "\n", "", "for", "param", "in", "self", ".", "bert", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "bidaf", "=", "BidafAttn", "(", "hidden_size_1", "*", "3", ",", "method", "=", "\"dot\"", ")", "# no parameter for dot", "\n", "\n", "self", ".", "lstm_raw", "=", "RNNEncoder", "(", "300", ",", "hidden_size_1", ",", "bidirectional", "=", "True", ",", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "#changed", "\n", "\n", "\n", "if", "self", ".", "vid_flag", ":", "\n", "            ", "print", "(", "\"activate video stream\"", ")", "\n", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "                ", "self", ".", "video_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "video_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "768", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "self", ".", "lstm_mature_vid", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_vid", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n", "", "if", "self", ".", "sub_flag", ":", "\n", "            ", "print", "(", "\"activate sub stream\"", ")", "\n", "self", ".", "lstm_mature_sub", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_sub", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n", "", "if", "self", ".", "vcpt_flag", ":", "\n", "            ", "print", "(", "\"activate vcpt stream\"", ")", "\n", "self", ".", "lstm_mature_vcpt", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_vcpt", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n", "", "if", "self", ".", "reg_flag", "and", "not", "self", ".", "regtopk_flag", ":", "\n", "            ", "print", "(", "\"activate regional stream\"", ")", "\n", "self", ".", "regional_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "self", ".", "lstm_mature_reg", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_reg", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n", "", "if", "self", ".", "regtopk_flag", ":", "\n", "            ", "print", "(", "\"activate regional-topk stream\"", ")", "\n", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "\n", "                ", "self", ".", "regionaltopk_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "embedding_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "regionaltopk_fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "768", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "", "self", ".", "lstm_mature_regtopk", "=", "RNNEncoder", "(", "hidden_size_1", "*", "2", "*", "5", ",", "hidden_size_2", ",", "bidirectional", "=", "True", ",", "\n", "dropout_p", "=", "0", ",", "n_layers", "=", "1", ",", "rnn_type", "=", "\"lstm\"", ")", "\n", "self", ".", "classifier_regtopk", "=", "MLP", "(", "hidden_size_2", "*", "2", ",", "1", ",", "500", ",", "n_layers_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.load_embedding": [[113, 115], ["tvqa_abc_bert_nofc_bert-glove.ABC.embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "load_embedding", "(", "self", ",", "pretrained_embedding", ")", ":", "\n", "        ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "pretrained_embedding", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.forward": [[116, 206], ["tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "tvqa_abc_bert_nofc_bert-glove.ABC.bert_fc", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "tvqa_abc_bert_nofc_bert-glove.ABC.video_fc", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "tvqa_abc_bert_nofc_bert-glove.ABC.regional_fc", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "tvqa_abc_bert_nofc_bert-glove.ABC.regionaltopk_fc", "tvqa_abc_bert_nofc_bert-glove.ABC.lstm_raw", "tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "out.squeeze", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.bert", "tvqa_abc_bert_nofc_bert-glove.ABC.embedding", "out.squeeze", "tvqa_abc_bert_nofc_bert-glove.ABC.bert"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor"], ["", "def", "forward", "(", "self", ",", "q", ",", "q_l", ",", "a0", ",", "a0_l", ",", "a1", ",", "a1_l", ",", "a2", ",", "a2_l", ",", "a3", ",", "a3_l", ",", "a4", ",", "a4_l", ",", "\n", "sub", ",", "sub_l", ",", "vcpt", ",", "vcpt_l", ",", "vid", ",", "vid_l", ",", "reg", ",", "reg_l", ",", "regtopk", ",", "regtopk_l", ")", ":", "\n", "#import ipdb; ipdb.set_trace()", "\n", "        ", "if", "self", ".", "opt", ".", "bert", "is", "None", ":", "# For BERT", "\n", "            ", "e_q", "=", "self", ".", "embedding", "(", "q", ")", "\n", "e_a0", "=", "self", ".", "embedding", "(", "a0", ")", "\n", "e_a1", "=", "self", ".", "embedding", "(", "a1", ")", "\n", "e_a2", "=", "self", ".", "embedding", "(", "a2", ")", "\n", "e_a3", "=", "self", ".", "embedding", "(", "a3", ")", "\n", "e_a4", "=", "self", ".", "embedding", "(", "a4", ")", "\n", "\n", "raw_out_q", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_q", ",", "q_l", ")", "\n", "raw_out_a0", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a0", ",", "a0_l", ")", "\n", "raw_out_a1", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a1", ",", "a1_l", ")", "\n", "raw_out_a2", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a2", ",", "a2_l", ")", "\n", "raw_out_a3", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a3", ",", "a3_l", ")", "\n", "raw_out_a4", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "e_q", "=", "self", ".", "bert", "(", "q", ")", "[", "0", "]", "\n", "e_a0", "=", "self", ".", "bert", "(", "a0", ")", "[", "0", "]", "\n", "e_a1", "=", "self", ".", "bert", "(", "a1", ")", "[", "0", "]", "\n", "e_a2", "=", "self", ".", "bert", "(", "a2", ")", "[", "0", "]", "\n", "e_a3", "=", "self", ".", "bert", "(", "a3", ")", "[", "0", "]", "\n", "e_a4", "=", "self", ".", "bert", "(", "a4", ")", "[", "0", "]", "\n", "\n", "raw_out_q", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_q", ",", "q_l", ")", "\n", "raw_out_a0", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a0", ",", "a0_l", ")", "\n", "raw_out_a1", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a1", ",", "a1_l", ")", "\n", "raw_out_a2", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a2", ",", "a2_l", ")", "\n", "raw_out_a3", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a3", ",", "a3_l", ")", "\n", "raw_out_a4", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_a4", ",", "a4_l", ")", "\n", "\n", "", "if", "self", ".", "sub_flag", "and", "(", "'sub'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", ":", "\n", "            ", "if", "(", "self", ".", "opt", ".", "bert", "is", "None", ")", ":", "# For BERT", "\n", "                ", "e_sub", "=", "self", ".", "embedding", "(", "sub", ")", "#Subtitles embedded", "\n", "", "else", ":", "\n", "                ", "e_sub", "=", "self", ".", "bert", "(", "sub", ")", "[", "0", "]", "\n", "", "raw_out_sub", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_sub", ",", "sub_l", ")", "#through lstm", "\n", "sub_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_sub", ",", "self", ".", "classifier_sub", ",", "raw_out_sub", ",", "sub_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ")", "#Fusion happens in here for subtitles", "\n", "", "else", ":", "\n", "            ", "sub_out", "=", "0", "\n", "\n", "", "if", "self", ".", "vcpt_flag", "and", "(", "'vcpt'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", ":", "\n", "\n", "            ", "vcpt", "=", "self", ".", "bert_fc", "(", "vcpt", ")", "\n", "e_vcpt", "=", "self", ".", "embedding", "(", "vcpt", ")", "\n", "\n", "raw_out_vcpt", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_vcpt", ",", "vcpt_l", ")", "\n", "vcpt_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_vcpt", ",", "self", ".", "classifier_vcpt", ",", "raw_out_vcpt", ",", "vcpt_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "vcpt_out", "=", "0", "\n", "\n", "", "if", "self", ".", "vid_flag", "and", "(", "'vid'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", ":", "\n", "            ", "e_vid", "=", "self", ".", "video_fc", "(", "vid", ")", "\n", "\n", "raw_out_vid", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_vid", ",", "vid_l", ")", "\n", "vid_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_vid", ",", "self", ".", "classifier_vid", ",", "raw_out_vid", ",", "vid_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "vid_out", "=", "0", "\n", "\n", "#### Reg ####", "\n", "", "if", "self", ".", "reg_flag", "and", "not", "self", ".", "regtopk_flag", ":", "\n", "            ", "e_reg", "=", "self", ".", "regional_fc", "(", "reg", ")", "\n", "raw_out_reg", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_reg", ",", "reg_l", ")", "\n", "reg_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_reg", ",", "self", ".", "classifier_reg", ",", "raw_out_reg", ",", "reg_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "reg_out", "=", "0", "\n", "\n", "#### Reg Top k ####", "\n", "", "if", "self", ".", "regtopk_flag", "and", "(", "'regional'", "not", "in", "self", ".", "opt", ".", "disable_streams", ")", ":", "\n", "            ", "e_regtopk", "=", "self", ".", "regionaltopk_fc", "(", "regtopk", ")", "\n", "raw_out_regtopk", ",", "_", "=", "self", ".", "lstm_raw", "(", "e_regtopk", ",", "regtopk_l", ")", "\n", "regtopk_out", "=", "self", ".", "stream_processor", "(", "self", ".", "lstm_mature_regtopk", ",", "self", ".", "classifier_regtopk", ",", "raw_out_regtopk", ",", "regtopk_l", ",", "\n", "raw_out_q", ",", "q_l", ",", "raw_out_a0", ",", "a0_l", ",", "raw_out_a1", ",", "a1_l", ",", "\n", "raw_out_a2", ",", "a2_l", ",", "raw_out_a3", ",", "a3_l", ",", "raw_out_a4", ",", "a4_l", ")", "\n", "", "else", ":", "\n", "            ", "regtopk_out", "=", "0", "\n", "", "out", "=", "sub_out", "+", "vcpt_out", "+", "vid_out", "+", "reg_out", "+", "regtopk_out", "# adding zeros has no effect on backward", "\n", "if", "self", ".", "opt", ".", "lanecheck", ":", "\n", "            ", "return", "sub_out", ",", "vcpt_out", ",", "vid_out", ",", "reg_out", ",", "regtopk_out", ",", "out", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.stream_processor": [[207, 246], ["tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "tvqa_abc_bert_nofc_bert-glove.ABC.bidaf", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "lstm_mature", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "rnn.max_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "max_avg_along_time().unsqueeze", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "rnn.max_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time", "max_avg_along_time"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.rnn.max_avg_along_time"], ["", "", "def", "stream_processor", "(", "self", ",", "lstm_mature", ",", "classifier", ",", "ctx_embed", ",", "ctx_l", ",", "\n", "q_embed", ",", "q_l", ",", "a0_embed", ",", "a0_l", ",", "a1_embed", ",", "a1_l", ",", "a2_embed", ",", "a2_l", ",", "a3_embed", ",", "a3_l", ",", "a4_embed", ",", "a4_l", ")", ":", "\n", "        ", "u_q", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "q_embed", ",", "q_l", ")", "\n", "u_a0", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a0_embed", ",", "a0_l", ")", "\n", "u_a1", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a1_embed", ",", "a1_l", ")", "\n", "u_a2", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a2_embed", ",", "a2_l", ")", "\n", "u_a3", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a3_embed", ",", "a3_l", ")", "\n", "u_a4", ",", "_", "=", "self", ".", "bidaf", "(", "ctx_embed", ",", "ctx_l", ",", "a4_embed", ",", "a4_l", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "concat_a0", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a0", ",", "u_q", ",", "u_a0", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "concat_a1", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a1", ",", "u_q", ",", "u_a1", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "concat_a2", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a2", ",", "u_q", ",", "u_a2", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "concat_a3", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a3", ",", "u_q", ",", "u_a3", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "concat_a4", "=", "torch", ".", "cat", "(", "[", "ctx_embed", ",", "u_a4", ",", "u_q", ",", "u_a4", "*", "ctx_embed", ",", "u_q", "*", "ctx_embed", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "mature_maxout_a0", ",", "_", "=", "lstm_mature", "(", "concat_a0", ",", "ctx_l", ")", "\n", "mature_maxout_a1", ",", "_", "=", "lstm_mature", "(", "concat_a1", ",", "ctx_l", ")", "\n", "mature_maxout_a2", ",", "_", "=", "lstm_mature", "(", "concat_a2", ",", "ctx_l", ")", "\n", "mature_maxout_a3", ",", "_", "=", "lstm_mature", "(", "concat_a3", ",", "ctx_l", ")", "\n", "mature_maxout_a4", ",", "_", "=", "lstm_mature", "(", "concat_a4", ",", "ctx_l", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "if", "self", ".", "topk", "==", "1", ":", "\n", "            ", "mature_maxout_a0", "=", "max_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "mature_maxout_a0", "=", "max_avg_along_time", "(", "mature_maxout_a0", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a1", "=", "max_avg_along_time", "(", "mature_maxout_a1", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a2", "=", "max_avg_along_time", "(", "mature_maxout_a2", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a3", "=", "max_avg_along_time", "(", "mature_maxout_a3", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "mature_maxout_a4", "=", "max_avg_along_time", "(", "mature_maxout_a4", ",", "ctx_l", ",", "self", ".", "topk", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "", "mature_answers", "=", "torch", ".", "cat", "(", "[", "\n", "mature_maxout_a0", ",", "mature_maxout_a1", ",", "mature_maxout_a2", ",", "mature_maxout_a3", ",", "mature_maxout_a4", "\n", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "classifier", "(", "mature_answers", ")", "# (B, 5)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.pointer_network": [[247, 249], ["None"], "methods", ["None"], ["", "def", "pointer_network", "(", ")", ":", "\n", "        ", "pass", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.tvqa_abc_bert_nofc_bert-glove.ABC.get_fake_inputs": [[249, 265], ["torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().fill_().long().to", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "range", "range", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones().fill_().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones().fill_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_fake_inputs", "(", "device", "=", "\"cuda:0\"", ")", ":", "\n", "        ", "bsz", "=", "16", "\n", "q", "=", "torch", ".", "ones", "(", "bsz", ",", "25", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "q_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "25", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a", "=", "torch", ".", "ones", "(", "bsz", ",", "5", ",", "20", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a_l", "=", "torch", ".", "ones", "(", "bsz", ",", "5", ")", ".", "fill_", "(", "20", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "a0", ",", "a1", ",", "a2", ",", "a3", ",", "a4", "=", "[", "a", "[", ":", ",", "i", ",", ":", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "a0_l", ",", "a1_l", ",", "a2_l", ",", "a3_l", ",", "a4_l", "=", "[", "a_l", "[", ":", ",", "i", "]", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "sub", "=", "torch", ".", "ones", "(", "bsz", ",", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "sub_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vcpt", "=", "torch", ".", "ones", "(", "bsz", ",", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vcpt_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "300", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "vid", "=", "torch", ".", "ones", "(", "bsz", ",", "100", ",", "2048", ")", ".", "to", "(", "device", ")", "\n", "vid_l", "=", "torch", ".", "ones", "(", "bsz", ")", ".", "fill_", "(", "100", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "return", "q", ",", "q_l", ",", "a0", ",", "a0_l", ",", "a1", ",", "a1_l", ",", "a2", ",", "a2_l", ",", "a3", ",", "a3_l", ",", "a4", ",", "a4_l", ",", "sub", ",", "sub_l", ",", "vcpt", ",", "vcpt_l", ",", "vid", ",", "vid_l", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.lstm_attn.AttentionModel.__init__": [[10, 37], ["super().__init__", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "batch_size", ",", "output_size", ",", "hidden_size", ",", "vocab_size", ",", "embedding_length", ",", "weights", ")", ":", "\n", "\t\t", "super", "(", "AttentionModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t--------\n\t\t\n\t\t\"\"\"", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_length", "=", "embedding_length", "\n", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_length", ")", "\n", "self", ".", "word_embeddings", ".", "weights", "=", "nn", ".", "Parameter", "(", "weights", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embedding_length", ",", "hidden_size", ")", "\n", "self", ".", "label", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "#self.attn_fc_layer = nn.Linear()", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.lstm_attn.AttentionModel.attention_net": [[39, 70], ["final_state.squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "final_state.squeeze.unsqueeze", "lstm_output.transpose", "torch.nn.functional.softmax.unsqueeze"], "methods", ["None"], ["", "def", "attention_net", "(", "self", ",", "lstm_output", ",", "final_state", ")", ":", "\n", "\n", "\t\t", "\"\"\" \n\t\tNow we will incorporate Attention mechanism in our LSTM model. In this new model, we will use attention to compute soft alignment score corresponding\n\t\tbetween each of the hidden_state and the last hidden_state of the LSTM. We will be using torch.bmm for the batch matrix multiplication.\n\t\t\n\t\tArguments\n\t\t---------\n\t\t\n\t\tlstm_output : Final output of the LSTM which contains hidden layer outputs for each sequence.\n\t\tfinal_state : Final time-step hidden state (h_n) of the LSTM\n\t\t\n\t\t---------\n\t\t\n\t\tReturns : It performs attention mechanism by first computing weights for each of the sequence present in lstm_output and and then finally computing the\n\t\t\t\t  new hidden state.\n\t\t\t\t  \n\t\tTensor Size :\n\t\t\t\t\thidden.size() = (batch_size, hidden_size)\n\t\t\t\t\tattn_weights.size() = (batch_size, num_seq)\n\t\t\t\t\tsoft_attn_weights.size() = (batch_size, num_seq)\n\t\t\t\t\tnew_hidden_state.size() = (batch_size, hidden_size)\n\t\t\t\t\t  \n\t\t\"\"\"", "\n", "\n", "hidden", "=", "final_state", ".", "squeeze", "(", "0", ")", "\n", "attn_weights", "=", "torch", ".", "bmm", "(", "lstm_output", ",", "hidden", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "soft_attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "1", ")", "\n", "new_hidden_state", "=", "torch", ".", "bmm", "(", "lstm_output", ".", "transpose", "(", "1", ",", "2", ")", ",", "soft_attn_weights", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "return", "new_hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.lstm_attn.AttentionModel.forward": [[71, 102], ["lstm_attn.AttentionModel.word_embeddings", "input.permute.permute.permute", "lstm_attn.AttentionModel.lstm", "output.permute.permute.permute", "lstm_attn.AttentionModel.attention_net", "lstm_attn.AttentionModel.label", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.selfAttn.SelfAttention.attention_net"], ["", "def", "forward", "(", "self", ",", "input_sentences", ",", "batch_size", "=", "None", ")", ":", "\n", "\n", "\t\t", "\"\"\" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class which receives its input as the new_hidden_state which is basically the output of the Attention network.\n\t\tfinal_output.shape = (batch_size, output_size)\n\t\t\n\t\t\"\"\"", "\n", "\n", "input", "=", "self", ".", "word_embeddings", "(", "input_sentences", ")", "\n", "input", "=", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "batch_size", "is", "None", ":", "\n", "\t\t\t", "h_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "h_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "output", ",", "(", "final_hidden_state", ",", "final_cell_state", ")", "=", "self", ".", "lstm", "(", "input", ",", "(", "h_0", ",", "c_0", ")", ")", "# final_hidden_state.size() = (1, batch_size, hidden_size) ", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# output.size() = (batch_size, num_seq, hidden_size)", "\n", "\n", "attn_output", "=", "self", ".", "attention_net", "(", "output", ",", "final_hidden_state", ")", "\n", "logits", "=", "self", ".", "label", "(", "attn_output", ")", "\n", "\n", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.DeepCCAModels.MlpNet.__init__": [[9, 24], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "len", "layers.append", "layers.append", "len", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes", ",", "input_size", ")", ":", "\n", "        ", "super", "(", "MlpNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layer_sizes", "=", "[", "input_size", "]", "+", "layer_sizes", "\n", "for", "l_id", "in", "range", "(", "len", "(", "layer_sizes", ")", "-", "1", ")", ":", "\n", "            ", "if", "l_id", "==", "len", "(", "layer_sizes", ")", "-", "2", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "layer_sizes", "[", "l_id", "]", ",", "layer_sizes", "[", "l_id", "+", "1", "]", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "layer_sizes", "[", "l_id", "]", ",", "layer_sizes", "[", "l_id", "+", "1", "]", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", ")", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.DeepCCAModels.MlpNet.forward": [[25, 29], ["layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.DeepCCAModels.DeepCCA.__init__": [[32, 36], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "DeepCCAModels.MlpNet", "DeepCCAModels.MlpNet"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layer_sizes1", ",", "layer_sizes2", ",", "input_size1", ",", "input_size2", ",", "outdim_size", ",", "use_all_singular_values", ",", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", ":", "\n", "        ", "super", "(", "DeepCCA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model1", "=", "MlpNet", "(", "layer_sizes1", ",", "input_size1", ")", "#.double()", "\n", "self", ".", "model2", "=", "MlpNet", "(", "layer_sizes2", ",", "input_size2", ")", "#.double()", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.DeepCCAModels.DeepCCA.forward": [[39, 51], ["DeepCCAModels.DeepCCA.model1", "DeepCCAModels.DeepCCA.model2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "\"\"\"\n\n        x1, x2 are the vectors needs to be make correlated\n        dim=[batch_size, feats]\n\n        \"\"\"", "\n", "# feature * batch_size", "\n", "output1", "=", "self", ".", "model1", "(", "x1", ")", "\n", "output2", "=", "self", ".", "model2", "(", "x2", ")", "\n", "\n", "return", "output1", ",", "output2", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.__init__": [[13, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["def", "__init__", "(", "self", ",", "channel_size", ",", "method", "=", "\"original\"", ",", "get_h", "=", "False", ")", ":", "\n", "        ", "super", "(", "BidafAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\"\"\"\n        This method do biDaf from s2 to s1:\n            The return value will have the same size as s1.\n        :param channel_size: Hidden size of the input\n        \"\"\"", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "get_h", "=", "get_h", "\n", "if", "method", "==", "\"original\"", ":", "\n", "            ", "self", ".", "mlp", "=", "nn", ".", "Linear", "(", "channel_size", "*", "3", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.similarity": [[25, 51], ["torch.bmm.data.new().fill_().byte", "torch.bmm.data.new().fill_().byte", "torch.bmm.data.new().fill_().byte", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm.data.masked_fill_", "torch.bmm.data.masked_fill_", "torch.bmm.data.masked_fill_", "s1.size", "s2.size", "s1.unsqueeze().repeat", "s2.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bidaf.BidafAttn.mlp().squeeze", "zip", "torch.autograd.Variable.data.byte", "torch.autograd.Variable.data.byte", "torch.autograd.Variable.data.byte", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.data.new().fill_", "torch.bmm.data.new().fill_", "torch.bmm.data.new().fill_", "float", "s1.unsqueeze", "s2.unsqueeze", "bidaf.BidafAttn.mlp", "s2.transpose", "torch.bmm.data.new", "torch.bmm.data.new", "torch.bmm.data.new", "torch.bmm.size", "torch.bmm.size", "torch.bmm.size"], "methods", ["None"], ["", "", "def", "similarity", "(", "self", ",", "s1", ",", "l1", ",", "s2", ",", "l2", ")", ":", "\n", "        ", "\"\"\"\n        :param s1: [B, t1, D]\n        :param l1: [B]\n        :param s2: [B, t2, D]\n        :param l2: [B]\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "method", "==", "\"original\"", ":", "\n", "            ", "t1", "=", "s1", ".", "size", "(", "1", ")", "\n", "t2", "=", "s2", ".", "size", "(", "1", ")", "\n", "repeat_s1", "=", "s1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "t2", ",", "1", ")", "# [B, T1, T2, D]", "\n", "repeat_s2", "=", "s2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "t1", ",", "1", ",", "1", ")", "# [B, T1, T2, D]", "\n", "packed_s1_s2", "=", "torch", ".", "cat", "(", "[", "repeat_s1", ",", "repeat_s2", ",", "repeat_s1", "*", "repeat_s2", "]", ",", "dim", "=", "3", ")", "# [B, T1, T2, D*3]", "\n", "s", "=", "self", ".", "mlp", "(", "packed_s1_s2", ")", ".", "squeeze", "(", ")", "# s is the similarity matrix from biDAF paper. [B, T1, T2]", "\n", "", "elif", "self", ".", "method", "==", "\"dot\"", ":", "\n", "            ", "s", "=", "torch", ".", "bmm", "(", "s1", ",", "s2", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n", "", "s_mask", "=", "s", ".", "data", ".", "new", "(", "*", "s", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", ".", "byte", "(", ")", "# [B, T1, T2]", "\n", "# Init similarity mask using lengths", "\n", "for", "i", ",", "(", "l_1", ",", "l_2", ")", "in", "enumerate", "(", "zip", "(", "l1", ",", "l2", ")", ")", ":", "\n", "            ", "s_mask", "[", "i", "]", "[", ":", "l_1", ",", ":", "l_2", "]", "=", "0", "\n", "\n", "", "s_mask", "=", "Variable", "(", "s_mask", ")", "\n", "s", ".", "data", ".", "masked_fill_", "(", "s_mask", ".", "data", ".", "byte", "(", ")", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.get_u_tile": [[52, 62], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.data.masked_fill_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_u_tile", "(", "cls", ",", "s", ",", "s2", ")", ":", "\n", "        ", "\"\"\"\n        attended vectors of s2 for each word in s1,\n        signify which words in s2 are most relevant to words in s1\n        \"\"\"", "\n", "a_weight", "=", "F", ".", "softmax", "(", "s", ",", "dim", "=", "2", ")", "# [B, t1, t2]", "\n", "a_weight", ".", "data", ".", "masked_fill_", "(", "a_weight", ".", "data", "!=", "a_weight", ".", "data", ",", "0", ")", "# remove nan from softmax on -inf", "\n", "u_tile", "=", "torch", ".", "bmm", "(", "a_weight", ",", "s2", ")", "# [B, t1, t2] * [B, t2, D] -> [B, t1, D]", "\n", "return", "u_tile", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.get_h_tile": [[63, 73], ["s1.size", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.softmax().unsqueeze", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.bmm().repeat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_h_tile", "(", "cls", ",", "s", ",", "s1", ")", ":", "\n", "        ", "\"\"\"\n        attended vectors of s1\n        which words in s1 is most similar to each words in s2\n        \"\"\"", "\n", "t1", "=", "s1", ".", "size", "(", "1", ")", "\n", "b_weight", "=", "F", ".", "softmax", "(", "torch", ".", "max", "(", "s", ",", "dim", "=", "2", ")", "[", "0", "]", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "# [b, t2]", "\n", "h_tile", "=", "torch", ".", "bmm", "(", "b_weight", ",", "s1", ")", ".", "repeat", "(", "1", ",", "t1", ",", "1", ")", "# repeat to match s1 # [B, t1, D]", "\n", "return", "h_tile", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.forward": [[74, 80], ["bidaf.BidafAttn.similarity", "bidaf.BidafAttn.get_u_tile", "bidaf.BidafAttn.get_h_tile"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.similarity", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.get_u_tile", "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.bidaf.BidafAttn.get_h_tile"], ["", "def", "forward", "(", "self", ",", "s1", ",", "l1", ",", "s2", ",", "l2", ")", ":", "\n", "        ", "s", "=", "self", ".", "similarity", "(", "s1", ",", "l1", ",", "s2", ",", "l2", ")", "\n", "u_tile", "=", "self", ".", "get_u_tile", "(", "s", ",", "s2", ")", "\n", "# h_tile = self.get_h_tile(s, s1)", "\n", "h_tile", "=", "self", ".", "get_h_tile", "(", "s", ",", "s1", ")", "if", "self", ".", "get_h", "else", "None", "\n", "return", "u_tile", ",", "h_tile", "\n", "# return u_tile", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.mlp.MLP.__init__": [[8, 25], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "layers.append", "layers.extend", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "hsz", ",", "n_layers", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "prev_dim", "=", "in_dim", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "i", "==", "n_layers", "-", "1", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "prev_dim", ",", "out_dim", ")", ")", "\n", "", "else", ":", "\n", "                ", "layers", ".", "extend", "(", "[", "\n", "nn", ".", "Linear", "(", "prev_dim", ",", "hsz", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "]", ")", "\n", "prev_dim", "=", "hsz", "\n", "\n", "", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.mlp.MLP.forward": [[26, 28], ["mlp.MLP.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.selfAttn.SelfAttention.__init__": [[9, 42], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__"], ["\t", "def", "__init__", "(", "self", ",", "batch_size", ",", "output_size", ",", "hidden_size", ",", "vocab_size", ",", "embedding_length", ",", "weights", ")", ":", "\n", "\t\t", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\"\"\"\n\t\tArguments\n\t\t---------\n\t\tbatch_size : Size of the batch which is same as the batch_size of the data returned by the TorchText BucketIterator\n\t\toutput_size : 2 = (pos, neg)\n\t\thidden_sie : Size of the hidden_state of the LSTM\n\t\tvocab_size : Size of the vocabulary containing unique words\n\t\tembedding_length : Embeddding dimension of GloVe word embeddings\n\t\tweights : Pre-trained GloVe word_embeddings which we will use to create our word_embedding look-up table \n\t\t\n\t\t--------\n\t\t\n\t\t\"\"\"", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_length", "=", "embedding_length", "\n", "self", ".", "weights", "=", "weights", "\n", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_length", ")", "\n", "self", ".", "word_embeddings", ".", "weights", "=", "nn", ".", "Parameter", "(", "weights", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "dropout", "=", "0.8", "\n", "self", ".", "bilstm", "=", "nn", ".", "LSTM", "(", "embedding_length", ",", "hidden_size", ",", "dropout", "=", "self", ".", "dropout", ",", "bidirectional", "=", "True", ")", "\n", "# We will use da = 350, r = 30 & penalization_coeff = 1 as per given in the self-attention original ICLR paper", "\n", "self", ".", "W_s1", "=", "nn", ".", "Linear", "(", "2", "*", "hidden_size", ",", "350", ")", "\n", "self", ".", "W_s2", "=", "nn", ".", "Linear", "(", "350", ",", "30", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "30", "*", "2", "*", "hidden_size", ",", "2000", ")", "\n", "self", ".", "label", "=", "nn", ".", "Linear", "(", "2000", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.selfAttn.SelfAttention.attention_net": [[43, 65], ["selfAttn.SelfAttention.SelfAttention.W_s2", "torch.nn.functional.softmax.permute", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.tanh", "torch.nn.functional.tanh", "selfAttn.SelfAttention.SelfAttention.W_s1"], "methods", ["None"], ["", "def", "attention_net", "(", "self", ",", "lstm_output", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\tNow we will use self attention mechanism to produce a matrix embedding of the input sentence in which every row represents an\n\t\tencoding of the inout sentence but giving an attention to a specific part of the sentence. We will use 30 such embedding of \n\t\tthe input sentence and then finally we will concatenate all the 30 sentence embedding vectors and connect it to a fully \n\t\tconnected layer of size 2000 which will be connected to the output layer of size 2 returning logits for our two classes i.e., \n\t\tpos & neg.\n\t\tArguments\n\t\t---------\n\t\tlstm_output = A tensor containing hidden states corresponding to each time step of the LSTM network.\n\t\t---------\n\t\tReturns : Final Attention weight matrix for all the 30 different sentence embedding in which each of 30 embeddings give\n\t\t\t\t  attention to different parts of the input sentence.\n\t\tTensor size : lstm_output.size() = (batch_size, num_seq, 2*hidden_size)\n\t\t\t\t\t  attn_weight_matrix.size() = (batch_size, 30, num_seq)\n\t\t\"\"\"", "\n", "attn_weight_matrix", "=", "self", ".", "W_s2", "(", "F", ".", "tanh", "(", "self", ".", "W_s1", "(", "lstm_output", ")", ")", ")", "\n", "attn_weight_matrix", "=", "attn_weight_matrix", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "attn_weight_matrix", "=", "F", ".", "softmax", "(", "attn_weight_matrix", ",", "dim", "=", "2", ")", "\n", "\n", "return", "attn_weight_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.selfAttn.SelfAttention.forward": [[66, 105], ["selfAttn.SelfAttention.SelfAttention.word_embeddings", "input.permute.permute.permute", "selfAttn.SelfAttention.SelfAttention.bilstm", "output.permute.permute.permute", "selfAttn.SelfAttention.SelfAttention.attention_net", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "selfAttn.SelfAttention.SelfAttention.fc_layer", "selfAttn.SelfAttention.SelfAttention.label", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.bmm.view", "torch.bmm.view", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.bmm.size", "torch.bmm.size", "torch.bmm.size", "torch.bmm.size"], "methods", ["home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.selfAttn.SelfAttention.attention_net"], ["", "def", "forward", "(", "self", ",", "input_sentences", ",", "batch_size", "=", "None", ")", ":", "\n", "\n", "\t\t", "\"\"\" \n\t\tParameters\n\t\t----------\n\t\tinput_sentence: input_sentence of shape = (batch_size, num_sequences)\n\t\tbatch_size : default = None. Used only for prediction on a single sentence after training (batch_size = 1)\n\t\t\n\t\tReturns\n\t\t-------\n\t\tOutput of the linear layer containing logits for pos & neg class.\n\t\t\n\t\t\"\"\"", "\n", "\n", "input", "=", "self", ".", "word_embeddings", "(", "input_sentences", ")", "\n", "input", "=", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "if", "batch_size", "is", "None", ":", "\n", "\t\t\t", "h_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "h_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "c_0", "=", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "output", ",", "(", "h_n", ",", "c_n", ")", "=", "self", ".", "bilstm", "(", "input", ",", "(", "h_0", ",", "c_0", ")", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "# output.size() = (batch_size, num_seq, 2*hidden_size)", "\n", "# h_n.size() = (1, batch_size, hidden_size)", "\n", "# c_n.size() = (1, batch_size, hidden_size)", "\n", "attn_weight_matrix", "=", "self", ".", "attention_net", "(", "output", ")", "\n", "# attn_weight_matrix.size() = (batch_size, r, num_seq)", "\n", "# output.size() = (batch_size, num_seq, 2*hidden_size)", "\n", "hidden_matrix", "=", "torch", ".", "bmm", "(", "attn_weight_matrix", ",", "output", ")", "\n", "# hidden_matrix.size() = (batch_size, r, 2*hidden_size)", "\n", "# Let's now concatenate the hidden_matrix and connect it to the fully connected layer.", "\n", "fc_out", "=", "self", ".", "fc_layer", "(", "hidden_matrix", ".", "view", "(", "-", "1", ",", "hidden_matrix", ".", "size", "(", ")", "[", "1", "]", "*", "hidden_matrix", ".", "size", "(", ")", "[", "2", "]", ")", ")", "\n", "logits", "=", "self", ".", "label", "(", "fc_out", ")", "\n", "# logits.size() = (batch_size, output_size)", "\n", "\n", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.__init__": [[6, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "outdim_size", ",", "use_all_singular_values", ",", "device", ")", ":", "\n", "        ", "self", ".", "outdim_size", "=", "outdim_size", "\n", "self", ".", "use_all_singular_values", "=", "use_all_singular_values", "\n", "self", ".", "device", "=", "device", "\n", "# print(device)", "\n"]], "home.repos.pwc.inspect_result.Jumperkables_tvqa_modality_bias.model.objectives.cca_loss.loss": [[12, 87], ["H1.size", "H1.size", "torch.symeig", "torch.symeig", "torch.matmul", "torch.matmul", "torch.matmul", "H1.t", "H2.t", "H1.mean().unsqueeze", "H2.mean().unsqueeze", "torch.matmul", "torch.gt().nonzero", "torch.gt().nonzero", "torch.matmul", "V1.t", "torch.matmul", "V2.t", "torch.matmul", "torch.trace", "torch.sqrt", "torch.symeig", "torch.sum", "H2bar.t", "torch.matmul", "torch.eye", "torch.matmul", "torch.eye", "torch.diag", "torch.diag", "torch.matmul", "torch.matmul", "U.topk", "torch.sqrt", "H1.mean", "H2.mean", "H1bar.t", "H2bar.t", "torch.gt", "torch.gt", "torch.matmul.t", "torch.matmul.t"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "H1", ",", "H2", ")", ":", "\n", "        ", "\"\"\"\n\n        It is the loss function of CCA as introduced in the original paper. There can be other formulations.\n\n        \"\"\"", "\n", "\n", "r1", "=", "1e-3", "\n", "r2", "=", "1e-3", "\n", "eps", "=", "1e-9", "\n", "\n", "H1", ",", "H2", "=", "H1", ".", "t", "(", ")", ",", "H2", ".", "t", "(", ")", "\n", "# assert torch.isnan(H1).sum().item() == 0", "\n", "# assert torch.isnan(H2).sum().item() == 0", "\n", "\n", "o1", "=", "o2", "=", "H1", ".", "size", "(", "0", ")", "\n", "\n", "m", "=", "H1", ".", "size", "(", "1", ")", "\n", "#         print(H1.size())", "\n", "\n", "H1bar", "=", "H1", "-", "H1", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "H2bar", "=", "H2", "-", "H2", ".", "mean", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "# assert torch.isnan(H1bar).sum().item() == 0", "\n", "# assert torch.isnan(H2bar).sum().item() == 0", "\n", "\n", "SigmaHat12", "=", "(", "1.0", "/", "(", "m", "-", "1", ")", ")", "*", "torch", ".", "matmul", "(", "H1bar", ",", "H2bar", ".", "t", "(", ")", ")", "\n", "SigmaHat11", "=", "(", "1.0", "/", "(", "m", "-", "1", ")", ")", "*", "torch", ".", "matmul", "(", "H1bar", ",", "\n", "H1bar", ".", "t", "(", ")", ")", "+", "r1", "*", "torch", ".", "eye", "(", "o1", ",", "device", "=", "self", ".", "device", ")", "\n", "SigmaHat22", "=", "(", "1.0", "/", "(", "m", "-", "1", ")", ")", "*", "torch", ".", "matmul", "(", "H2bar", ",", "\n", "H2bar", ".", "t", "(", ")", ")", "+", "r2", "*", "torch", ".", "eye", "(", "o2", ",", "device", "=", "self", ".", "device", ")", "\n", "# assert torch.isnan(SigmaHat11).sum().item() == 0", "\n", "# assert torch.isnan(SigmaHat12).sum().item() == 0", "\n", "# assert torch.isnan(SigmaHat22).sum().item() == 0", "\n", "\n", "# Calculating the root inverse of covariance matrices by using eigen decomposition", "\n", "[", "D1", ",", "V1", "]", "=", "torch", ".", "symeig", "(", "SigmaHat11", ",", "eigenvectors", "=", "True", ")", "\n", "[", "D2", ",", "V2", "]", "=", "torch", ".", "symeig", "(", "SigmaHat22", ",", "eigenvectors", "=", "True", ")", "\n", "# assert torch.isnan(D1).sum().item() == 0", "\n", "# assert torch.isnan(D2).sum().item() == 0", "\n", "# assert torch.isnan(V1).sum().item() == 0", "\n", "# assert torch.isnan(V2).sum().item() == 0", "\n", "\n", "# Added to increase stability", "\n", "posInd1", "=", "torch", ".", "gt", "(", "D1", ",", "eps", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "D1", "=", "D1", "[", "posInd1", "]", "\n", "V1", "=", "V1", "[", ":", ",", "posInd1", "]", "\n", "posInd2", "=", "torch", ".", "gt", "(", "D2", ",", "eps", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "\n", "D2", "=", "D2", "[", "posInd2", "]", "\n", "V2", "=", "V2", "[", ":", ",", "posInd2", "]", "\n", "# print(posInd1.size())", "\n", "# print(posInd2.size())", "\n", "\n", "SigmaHat11RootInv", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "matmul", "(", "V1", ",", "torch", ".", "diag", "(", "D1", "**", "-", "0.5", ")", ")", ",", "V1", ".", "t", "(", ")", ")", "\n", "SigmaHat22RootInv", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "matmul", "(", "V2", ",", "torch", ".", "diag", "(", "D2", "**", "-", "0.5", ")", ")", ",", "V2", ".", "t", "(", ")", ")", "\n", "\n", "Tval", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "SigmaHat11RootInv", ",", "\n", "SigmaHat12", ")", ",", "SigmaHat22RootInv", ")", "\n", "#         print(Tval.size())", "\n", "\n", "if", "self", ".", "use_all_singular_values", ":", "\n", "# all singular values are used to calculate the correlation", "\n", "            ", "tmp", "=", "torch", ".", "trace", "(", "torch", ".", "matmul", "(", "Tval", ".", "t", "(", ")", ",", "Tval", ")", ")", "\n", "# print(tmp)", "\n", "corr", "=", "torch", ".", "sqrt", "(", "tmp", ")", "\n", "# assert torch.isnan(corr).item() == 0", "\n", "", "else", ":", "\n", "# just the top self.outdim_size singular values are used", "\n", "            ", "U", ",", "V", "=", "torch", ".", "symeig", "(", "torch", ".", "matmul", "(", "\n", "Tval", ".", "t", "(", ")", ",", "Tval", ")", ",", "eigenvectors", "=", "True", ")", "\n", "# U = U[torch.gt(U, eps).nonzero()[:, 0]]", "\n", "U", "=", "U", ".", "topk", "(", "self", ".", "outdim_size", ")", "[", "0", "]", "\n", "corr", "=", "torch", ".", "sum", "(", "torch", ".", "sqrt", "(", "U", ")", ")", "\n", "", "return", "-", "corr", "\n", "", "", ""]]}