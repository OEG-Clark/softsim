{"home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_MGMRA.adjust_learning_rate": [[271, 287], ["range", "len"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "<", "10", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "epoch", "+", "1", ")", "/", "10", "\n", "", "elif", "epoch", ">=", "10", "and", "epoch", "<", "20", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "epoch", ">=", "20", "and", "epoch", "<", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "elif", "epoch", ">=", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.1", "*", "lr", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer", ".", "param_groups", ")", "-", "1", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "i", "+", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_MGMRA.train": [[289, 371], ["train_MGMRA.adjust_learning_rate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "time.time", "enumerate", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.autograd.Variable.size", "utils.AverageMeter.update", "time.time", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "net", "criterion_id", "criterion_tri", "range", "criterion_tri", "criterion_tri", "criterion_id", "criterion_part", "net", "criterion_id", "criterion_tri", "out0.max", "loss.item", "criterion_id.item", "print", "time.time", "torch.autograd.Variable.long", "criterion_id", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "predicted.eq().sum().item", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "time.time", "len", "torch.autograd.Variable.long", "criterion_tri", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.adjust_learning_rate", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.train", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "\n", "    ", "current_lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "id_loss", "=", "AverageMeter", "(", ")", "\n", "tri_loss", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# switch to train mode", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "input1", ",", "input2", ",", "label1", ",", "label2", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "(", "label1", ",", "label2", ")", ",", "0", ")", "\n", "\n", "input1", "=", "Variable", "(", "input1", ".", "cuda", "(", ")", ")", "\n", "input2", "=", "Variable", "(", "input2", ".", "cuda", "(", ")", ")", "\n", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "            ", "feat", ",", "out0", ",", "feat_all", ",", "feat_mem", ",", "out_mem", ",", "out_part", "=", "net", "(", "input1", ",", "input2", ")", "\n", "loss_id", "=", "criterion_id", "(", "out0", "[", "0", "]", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_tri_l", ",", "batch_acc", "=", "criterion_tri", "(", "feat", "[", "0", "]", ",", "labels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feat", ")", "-", "1", ")", ":", "\n", "                ", "loss_id", "+=", "criterion_id", "(", "out0", "[", "i", "+", "1", "]", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_tri_l", "+=", "criterion_tri", "(", "feat", "[", "i", "+", "1", "]", ",", "labels", ")", "[", "0", "]", "\n", "", "loss_tri", ",", "batch_acc", "=", "criterion_tri", "(", "feat_all", ",", "labels", ")", "\n", "loss_tri", "+=", "loss_tri_l", "*", "args", ".", "w_center", "# ", "\n", "correct", "+=", "batch_acc", "\n", "### for mem branch", "\n", "loss_tri_mem", ",", "batch_acc", "=", "criterion_tri", "(", "feat_mem", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_id_mem", "=", "criterion_id", "(", "out_mem", ",", "labels", ".", "long", "(", ")", ")", "\n", "\n", "loss_part", "=", "criterion_part", "(", "out_part", "[", "0", "]", ",", "out_part", "[", "1", "]", ")", "\n", "loss", "=", "loss_id", "+", "loss_tri", "+", "loss_id_mem", "*", "0.1", "+", "loss_tri_mem", "+", "(", "loss_part", "-", "0.1", ")", "*", "0.1", "\n", "", "else", ":", "\n", "            ", "feat", ",", "out0", "=", "net", "(", "input1", ",", "input2", ")", "\n", "loss_id", "=", "criterion_id", "(", "out0", ",", "labels", ")", "\n", "\n", "loss_tri", ",", "batch_acc", "=", "criterion_tri", "(", "feat", ",", "labels", ")", "\n", "correct", "+=", "(", "batch_acc", "/", "2", ")", "\n", "_", ",", "predicted", "=", "out0", ".", "max", "(", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "loss", "=", "loss_id", "+", "loss_tri", "*", "args", ".", "w_center", "# ", "\n", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update P", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "id_loss", ".", "update", "(", "loss_id", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_loss", ".", "update", "(", "loss_tri", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{}][{}/{}] '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'lr:{:.3f} '", "\n", "'Loss: {train_loss.val:.4f} ({train_loss.avg:.4f}) '", "\n", "'iLoss: {id_loss.val:.4f} ({id_loss.avg:.4f}) '", "\n", "'TLoss: {tri_loss.val:.4f} ({tri_loss.avg:.4f}) '", "\n", "'Accu: {:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "current_lr", ",", "\n", "100.", "*", "correct", "/", "total", ",", "batch_time", "=", "batch_time", ",", "\n", "train_loss", "=", "train_loss", ",", "id_loss", "=", "id_loss", ",", "tri_loss", "=", "tri_loss", ")", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'total_loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'id_loss'", ",", "id_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'tri_loss'", ",", "tri_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "current_lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_MGMRA.test": [[373, 455], ["net.eval", "print", "time.time", "numpy.zeros", "numpy.zeros", "print", "net.eval", "print", "time.time", "numpy.zeros", "numpy.zeros", "print", "time.time", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "re_rank.random_walk", "eval_metrics.eval_regdb", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.autograd.Variable.size", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.autograd.Variable", "re_rank.random_walk", "re_rank.k_reciprocal", "eval_metrics.eval_regdb", "eval_metrics.eval_sysu", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "time.time", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "time.time", "re_rank.k_reciprocal", "eval_metrics.eval_sysu", "time.time", "numpy.matmul", "net.detach().cpu", "net.detach().cpu", "feat_att.detach().cpu", "net.detach().cpu", "net.detach().cpu", "feat_att.detach().cpu", "numpy.transpose", "numpy.matmul", "numpy.transpose", "net.detach", "net.detach", "feat_att.detach", "net.detach", "net.detach", "feat_att.detach"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.random_walk", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.random_walk", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.k_reciprocal", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.k_reciprocal", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "        ", "feat_dim", "=", "args", ".", "num_strips", "*", "args", ".", "local_feat_dim", "\n", "", "else", ":", "\n", "        ", "feat_dim", "=", "2048", "\n", "", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feat_dim", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feat_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# switch to evaluation", "\n", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feat_dim", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feat_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "args", ".", "re_rank", "==", "'random_walk'", ":", "\n", "        ", "distmat", "=", "random_walk", "(", "query_feat", ",", "gall_feat", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "random_walk", "(", "query_feat_att", ",", "gall_feat_att", ")", "\n", "", "elif", "args", ".", "re_rank", "==", "'k_reciprocal'", ":", "\n", "        ", "distmat", "=", "k_reciprocal", "(", "query_feat", ",", "gall_feat", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "k_reciprocal", "(", "query_feat_att", ",", "gall_feat_att", ")", "\n", "", "elif", "args", ".", "re_rank", "==", "'no'", ":", "\n", "# compute the similarity", "\n", "        ", "distmat", "=", "-", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "-", "np", ".", "matmul", "(", "query_feat_att", ",", "np", ".", "transpose", "(", "gall_feat_att", ")", ")", "\n", "\n", "# evaluation", "\n", "", "if", "dataset", "==", "'regdb'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_regdb", "(", "distmat", ",", "query_label", ",", "gall_label", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_regdb", "(", "distmat_att", ",", "query_label", ",", "gall_label", ")", "\n", "", "elif", "dataset", "==", "'sysu'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_sysu", "(", "distmat", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_sysu", "(", "distmat_att", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "", "print", "(", "'Evaluation Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'rank1'", ",", "cmc", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP'", ",", "mAP", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP'", ",", "mINP", ",", "epoch", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'rank1_att'", ",", "cmc_att", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP_att'", ",", "mINP_att", ",", "epoch", ")", "\n", "\n", "return", "cmc", ",", "mAP", ",", "mINP", ",", "cmc_att", ",", "mAP_att", ",", "mINP_att", "\n", "", "else", ":", "\n", "        ", "return", "cmc", ",", "mAP", ",", "mINP", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.Normalize.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.Normalize.forward": [[12, 16], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.Non_local.__init__": [[18, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduc_ratio", "=", "2", ")", ":", "\n", "        ", "super", "(", "Non_local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "reduc_ratio", "//", "reduc_ratio", "\n", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0.0", ")", "\n", "\n", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.Non_local.forward": [[45, 70], ["x.size", "model_mine.Non_local.g().view", "g_x.permute.permute.permute", "model_mine.Non_local.theta().view", "theta_x.permute.permute.permute", "model_mine.Non_local.phi().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "model_mine.Non_local.W", "model_mine.Non_local.g", "model_mine.Non_local.theta", "model_mine.Non_local.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n                :param x: (b, c, t, h, w)\n                :return:\n                '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "# f_div_C = torch.nn.functional.softmax(f, dim=-1)", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.visible_module.__init__": [[95, 114], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "visible_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_v", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "visible", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "visible", ".", "conv1", "=", "model_v", ".", "conv1", "\n", "self", ".", "visible", ".", "bn1", "=", "model_v", ".", "bn1", "\n", "self", ".", "visible", ".", "relu", "=", "model_v", ".", "relu", "\n", "self", ".", "visible", ".", "maxpool", "=", "model_v", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_v", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.visible_module.forward": [[115, 128], ["model_mine.visible_module.visible.conv1", "model_mine.visible_module.visible.bn1", "model_mine.visible_module.visible.relu", "model_mine.visible_module.visible.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "visible", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.thermal_module.__init__": [[131, 150], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "thermal_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_t", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "thermal", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "thermal", ".", "conv1", "=", "model_t", ".", "conv1", "\n", "self", ".", "thermal", ".", "bn1", "=", "model_t", ".", "bn1", "\n", "self", ".", "thermal", ".", "relu", "=", "model_t", ".", "relu", "\n", "self", ".", "thermal", ".", "maxpool", "=", "model_t", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_t", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.thermal_module.forward": [[151, 164], ["model_mine.thermal_module.thermal.conv1", "model_mine.thermal_module.thermal.bn1", "model_mine.thermal_module.thermal.relu", "model_mine.thermal_module.thermal.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "thermal", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.base_resnet.__init__": [[167, 185], ["torch.Module.__init__", "resnet.resnet50", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "base_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_base", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "model_base", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "share_net", "=", "share_net", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "self", ".", "base", "=", "model_base", "\n", "", "else", ":", "\n", "            ", "self", ".", "base", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "4", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_base", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.base_resnet.forward": [[186, 204], ["model_mine.base_resnet.base.conv1", "model_mine.base_resnet.base.bn1", "model_mine.base_resnet.base.relu", "model_mine.base_resnet.base.maxpool", "model_mine.base_resnet.base.layer1", "model_mine.base_resnet.base.layer2", "model_mine.base_resnet.base.layer3", "model_mine.base_resnet.base.layer4", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "base", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "base", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "share_net", ">", "4", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.embed_net.__init__": [[208, 256], ["torch.Module.__init__", "model_mine.thermal_module", "model_mine.visible_module", "model_mine.base_resnet", "model_mine.Normalize", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model_mine.embed_net.bottleneck.bias.requires_grad_", "torch.Linear", "torch.Linear", "torch.Linear", "model_mine.embed_net.bottleneck.apply", "model_mine.embed_net.classifier.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.apply", "model_mine.embed_net.local_conv_list.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "model_mine.embed_net.fc_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "no_local", "=", "'off'", ",", "gm_pool", "=", "'on'", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ",", "pcb", "=", "'on'", ",", "local_feat_dim", "=", "256", ",", "num_strips", "=", "6", ")", ":", "\n", "        ", "super", "(", "embed_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thermal_module", "=", "thermal_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "visible_module", "=", "visible_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "base_resnet", "=", "base_resnet", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "\n", "self", ".", "non_local", "=", "no_local", "\n", "self", ".", "pcb", "=", "pcb", "\n", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "pool_dim", "=", "2048", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "gm_pool", "=", "gm_pool", "\n", "\n", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "self", ".", "num_stripes", "=", "num_strips", "\n", "local_conv_out_channels", "=", "local_feat_dim", "\n", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "conv", "=", "nn", ".", "Conv2d", "(", "pool_dim", ",", "local_conv_out_channels", ",", "1", ")", "\n", "conv", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "local_conv_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "conv", ",", "\n", "nn", ".", "BatchNorm2d", "(", "local_conv_out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "self", ".", "fc_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "fc", "=", "nn", ".", "Linear", "(", "local_conv_out_channels", ",", "class_num", ")", "\n", "init", ".", "normal_", "(", "fc", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_list", ".", "append", "(", "fc", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.embed_net.forward": [[260, 336], ["model_mine.embed_net.visible_module", "model_mine.embed_net.thermal_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_mine.embed_net.base_resnet", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_mine.embed_net.bottleneck", "model_mine.embed_net.visible_module", "torch.max_pool2d.view", "local_feat_list.append", "hasattr", "model_mine.embed_net.l2norm", "model_mine.embed_net.view", "model_mine.embed_net.avgpool", "x_pool.view.view.view", "model_mine.embed_net.thermal_module", "model_mine.embed_net.size", "model_mine.embed_net.size", "torch.max_pool2d.view", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d.view", "torch.max_pool2d.size", "logits_list.append", "x_pool.view.view.size", "x_pool.view.view.size", "model_mine.embed_net.classifier", "model_mine.embed_net.l2norm", "model_mine.embed_net.l2norm", "model_mine.embed_net.size", "model_mine.embed_net.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model_mine.embed_net.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "modal", "=", "0", ")", ":", "\n", "        ", "if", "modal", "==", "0", ":", "\n", "            ", "x1", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "x2", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "0", ")", "\n", "", "elif", "modal", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "", "elif", "modal", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "\n", "# shared block", "\n", "", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "base_resnet", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "feat", "=", "x", "\n", "assert", "feat", ".", "size", "(", "2", ")", "%", "self", ".", "num_stripes", "==", "0", "\n", "stripe_h", "=", "int", "(", "feat", ".", "size", "(", "2", ")", "/", "self", ".", "num_stripes", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "logits_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "# shape [N, C, 1, 1]", "\n", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "# gm pool", "\n", "                    ", "local_feat", "=", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "local_feat", ".", "shape", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "10.0", "# regDB: 10.0    SYSU: 3.0", "\n", "local_feat", "=", "(", "torch", ".", "mean", "(", "local_feat", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                    ", "local_feat", "=", "F", ".", "max_pool2d", "(", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", ",", "(", "stripe_h", ",", "feat", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "\n", "\n", "# shape [N, c, 1, 1]", "\n", "", "local_feat", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "local_feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "feat", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "# shape [N, c]", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "local_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "local_feat_list", ".", "append", "(", "local_feat", ")", "\n", "\n", "\n", "if", "hasattr", "(", "self", ",", "'fc_list'", ")", ":", "\n", "                    ", "logits_list", ".", "append", "(", "self", ".", "fc_list", "[", "i", "]", "(", "local_feat", ")", ")", "\n", "\n", "", "", "feat_all", "=", "[", "lf", "for", "lf", "in", "local_feat_list", "]", "\n", "feat_all", "=", "torch", ".", "cat", "(", "feat_all", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "return", "local_feat_list", ",", "logits_list", ",", "feat_all", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "feat_all", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "                ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "3.0", "\n", "x_pool", "=", "(", "torch", ".", "mean", "(", "x", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "                ", "x_pool", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x_pool", ".", "size", "(", "0", ")", ",", "x_pool", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "feat", "=", "self", ".", "bottleneck", "(", "x_pool", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "return", "x_pool", ",", "self", ".", "classifier", "(", "feat", ")", "#, scores", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "x_pool", ")", ",", "self", ".", "l2norm", "(", "feat", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.weights_init_kaiming": [[73, 84], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_mine.weights_init_classifier": [[85, 91], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemoryUnit.__init__": [[12, 32], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.AdaptiveAvgPool1d", "memory_SGMRA.MemoryUnit.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ")", ":", "\n", "        ", "super", "(", "MemoryUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n        the instance PTT is divided into cls_number x ptt_number per cls x part number per ptt\n        '''", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "part_num", "=", "part_num", "\n", "\n", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# M", "\n", "self", ".", "fea_dim", "=", "fea_dim", "# C", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", ")", ")", "# M x C", "\n", "#self.sem_weight = Parameter(torch.Tensor(self.num_cls, self.fea_dim)) # N x C", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "# self.hard_sparse_shrink_opt = nn.Hardshrink(lambd=shrink_thres)", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemoryUnit.reset_parameters": [[33, 38], ["memory_SGMRA.MemoryUnit.weight.data.uniform_", "math.sqrt", "memory_SGMRA.MemoryUnit.bias.data.uniform_", "memory_SGMRA.MemoryUnit.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemoryUnit.get_update_query": [[39, 60], ["mem.size", "torch.zeros().cuda", "range", "torch.nonzero", "torch.nonzero.size", "torch.zeros", "torch.sum", "max_indices.squeeze", "query[].squeeze", "torch.max"], "methods", ["None"], ["", "", "def", "get_update_query", "(", "self", ",", "mem", ",", "max_indices", ",", "score", ",", "query", ")", ":", "\n", "        ", "m", ",", "d", "=", "mem", ".", "size", "(", ")", "\n", "\n", "query_update", "=", "torch", ".", "zeros", "(", "(", "m", ",", "d", ")", ")", ".", "cuda", "(", ")", "\n", "#random_update = torch.zeros((m,d)).cuda()", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "idx", "=", "torch", ".", "nonzero", "(", "max_indices", ".", "squeeze", "(", "1", ")", "==", "i", ")", "\n", "a", ",", "_", "=", "idx", ".", "size", "(", ")", "\n", "#ex = update_indices[0][i]", "\n", "if", "a", "!=", "0", ":", "\n", "#random_idx = torch.randperm(a)[0]", "\n", "#idx = idx[idx != ex]", "\n", "#                     query_update[i] = torch.sum(query[idx].squeeze(1), dim=0)", "\n", "                ", "query_update", "[", "i", "]", "=", "torch", ".", "sum", "(", "(", "(", "score", "[", "idx", ",", "i", "]", "/", "torch", ".", "max", "(", "score", "[", ":", ",", "i", "]", ")", ")", "*", "query", "[", "idx", "]", ".", "squeeze", "(", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "#random_update[i] = query[random_idx] * (score[random_idx,i] / torch.max(score[:,i]))", "\n", "", "else", ":", "\n", "                ", "query_update", "[", "i", "]", "=", "0", "\n", "#random_update[i] = 0", "\n", "\n", "\n", "", "", "return", "query_update", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemoryUnit.forward": [[61, 88], ["torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_SGMRA.MemoryUnit.weight.permute", "torch.nn.functional.linear", "memory_SGMRA.hard_shrink_relu", "torch.nn.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "residual", "=", "False", ")", ":", "\n", "        ", "'''\n        this is a bottom-up hierarchical stastic and summaration module\n        all steps in main flow follow  part -> prototype -> cls\n        input = NHW x C\n        total PTT M =  num_cls (L) x ptt_num (T) x part_num (P)\n        dimension C = fea_dim\n        '''", "\n", "### for global part-unware instance PTT, act as sub flow", "\n", "att_weight", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ")", "# we doesn't split the part dimension, there it is part-unaware NHW x M", "\n", "att_weight", "=", "F", ".", "softmax", "(", "att_weight", ",", "dim", "=", "1", ")", "# NHW x M", "\n", "### update ###", "\n", "#_, gather_indice = torch.topk(att_weight, 1, dim=1)", "\n", "#ins_mem_sample_driven = self.get_update_query(self.weight, gather_indice, att_weight,input)", "\n", "#self.weight.data = F.normalize(ins_mem_sample_driven+ self.weight, dim=1)", "\n", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "att_weight", "=", "hard_shrink_relu", "(", "att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "att_weight", "=", "F", ".", "normalize", "(", "att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "mem_trans", "=", "self", ".", "weight", ".", "permute", "(", "1", ",", "0", ")", "# Mem^T, MxC", "\n", "output", "=", "F", ".", "linear", "(", "att_weight", ",", "mem_trans", ")", "# AttWeight x Mem^T^T = AW x Mem, (TxM) x (MxC) = TxC", "\n", "\n", "\n", "\n", "#return {'output': output, 'att': att_weight}  # output, att_weight", "\n", "return", "{", "'output'", ":", "output", ",", "'att'", ":", "None", ",", "'sem_attn'", ":", "self", ".", "weight", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemoryUnit.extra_repr": [[90, 93], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'mem_dim={}, fea_dim={}'", ".", "format", "(", "\n", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemModule.__init__": [[98, 111], ["torch.nn.Module.__init__", "memory_SGMRA.MemoryUnit"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "MemModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "part_num", "=", "part_num", "\n", "ins_mem", "=", "False", "\n", "if", "ins_mem", ":", "\n", "            ", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# part-level instance", "\n", "", "else", ":", "\n", "            ", "self", ".", "mem_dim", "=", "num_cls", "# global semantic", "\n", "", "self", ".", "fea_dim", "=", "fea_dim", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "self", ".", "memory", "=", "MemoryUnit", "(", "self", ".", "ptt_num", ",", "self", ".", "num_cls", ",", "self", ".", "part_num", ",", "self", ".", "fea_dim", ",", "self", ".", "shrink_thres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.MemModule.forward": [[112, 153], ["len", "input.permute.contiguous", "input.permute.view", "memory_SGMRA.MemModule.memory", "input.permute", "y.permute.permute.view", "y.permute.permute.permute", "att.permute.permute.view", "att.permute.permute.permute", "input.permute", "y.permute.permute.view", "y.permute.permute.permute", "input.permute", "print", "y.permute.permute.view", "y.permute.permute.permute", "att.permute.permute.view", "att.permute.permute.permute", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "s", "=", "input", ".", "data", ".", "shape", "\n", "l", "=", "len", "(", "s", ")", "\n", "\n", "if", "l", "==", "3", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "l", "==", "4", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "elif", "l", "==", "5", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "[", "]", "\n", "print", "(", "'wrong feature map size'", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "s", "[", "1", "]", ")", "\n", "#", "\n", "y_and", "=", "self", ".", "memory", "(", "x", ")", "\n", "#", "\n", "y", "=", "y_and", "[", "'output'", "]", "\n", "att", "=", "y_and", "[", "'att'", "]", "\n", "\n", "if", "l", "==", "3", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "att", "=", "att", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "self", ".", "mem_dim", ")", "\n", "att", "=", "att", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "l", "==", "4", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "#att = att.view(s[0], s[2], s[3], self.mem_dim)", "\n", "#att = att.permute(0, 3, 1, 2)", "\n", "", "elif", "l", "==", "5", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "att", "=", "att", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", ",", "self", ".", "mem_dim", ")", "\n", "att", "=", "att", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "x", "\n", "att", "=", "att", "\n", "print", "(", "'wrong feature map size'", ")", "\n", "", "return", "y", ",", "y_and", "[", "'sem_attn'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_SGMRA.hard_shrink_relu": [[155, 158], ["torch.nn.functional.relu", "torch.abs"], "function", ["None"], ["", "", "def", "hard_shrink_relu", "(", "input", ",", "lambd", "=", "0", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "output", "=", "(", "F", ".", "relu", "(", "input", "-", "lambd", ")", "*", "input", ")", "/", "(", "torch", ".", "abs", "(", "input", "-", "lambd", ")", "+", "epsilon", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_manager.process_query_sysu": [[6, 36], ["os.path.join", "sorted", "open", "file.read().splitlines", "query_img.append", "query_id.append", "query_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_ir.extend", "os.listdir"], "function", ["None"], ["def", "process_query_sysu", "(", "data_path", ",", "mode", "=", "'all'", ",", "relabel", "=", "False", ")", ":", "\n", "    ", "if", "mode", "==", "'all'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "ir_cameras", "=", "[", "'cam3'", ",", "'cam6'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "files_ir", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "ir_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_ir", ".", "extend", "(", "new_files", ")", "\n", "", "", "", "query_img", "=", "[", "]", "\n", "query_id", "=", "[", "]", "\n", "query_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_ir", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "query_img", ".", "append", "(", "img_path", ")", "\n", "query_id", ".", "append", "(", "pid", ")", "\n", "query_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "query_img", ",", "np", ".", "array", "(", "query_id", ")", ",", "np", ".", "array", "(", "query_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_manager.process_gallery_sysu": [[37, 68], ["random.seed", "os.path.join", "sorted", "open", "file.read().splitlines", "gall_img.append", "gall_id.append", "gall_cam.append", "numpy.array", "numpy.array", "int", "os.path.join", "os.path.isdir", "int", "int", "file.read", "ids[].split", "sorted", "files_rgb.append", "random.choice", "os.listdir"], "function", ["None"], ["", "def", "process_gallery_sysu", "(", "data_path", ",", "mode", "=", "'all'", ",", "trial", "=", "0", ",", "relabel", "=", "False", ")", ":", "\n", "\n", "    ", "random", ".", "seed", "(", "trial", ")", "\n", "\n", "if", "mode", "==", "'all'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", ",", "'cam4'", ",", "'cam5'", "]", "\n", "", "elif", "mode", "==", "'indoor'", ":", "\n", "        ", "rgb_cameras", "=", "[", "'cam1'", ",", "'cam2'", "]", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'exp/test_id.txt'", ")", "\n", "files_rgb", "=", "[", "]", "\n", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "ids", "=", "file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "ids", "=", "[", "int", "(", "y", ")", "for", "y", "in", "ids", "[", "0", "]", ".", "split", "(", "','", ")", "]", "\n", "ids", "=", "[", "\"%04d\"", "%", "x", "for", "x", "in", "ids", "]", "\n", "\n", "", "for", "id", "in", "sorted", "(", "ids", ")", ":", "\n", "        ", "for", "cam", "in", "rgb_cameras", ":", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "cam", ",", "id", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "new_files", "=", "sorted", "(", "[", "img_dir", "+", "'/'", "+", "i", "for", "i", "in", "os", ".", "listdir", "(", "img_dir", ")", "]", ")", "\n", "files_rgb", ".", "append", "(", "random", ".", "choice", "(", "new_files", ")", ")", "\n", "", "", "", "gall_img", "=", "[", "]", "\n", "gall_id", "=", "[", "]", "\n", "gall_cam", "=", "[", "]", "\n", "for", "img_path", "in", "files_rgb", ":", "\n", "        ", "camid", ",", "pid", "=", "int", "(", "img_path", "[", "-", "15", "]", ")", ",", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "gall_img", ".", "append", "(", "img_path", ")", "\n", "gall_id", ".", "append", "(", "pid", ")", "\n", "gall_cam", ".", "append", "(", "camid", ")", "\n", "", "return", "gall_img", ",", "np", ".", "array", "(", "gall_id", ")", ",", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_manager.process_test_regdb": [[69, 82], ["open", "open().read().splitlines", "numpy.array", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["", "def", "process_test_regdb", "(", "img_dir", ",", "trial", "=", "1", ",", "modal", "=", "'visible'", ")", ":", "\n", "    ", "if", "modal", "==", "'visible'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "", "elif", "modal", "==", "'thermal'", ":", "\n", "        ", "input_data_path", "=", "img_dir", "+", "'idx/test_thermal_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "\n", "", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n", "file_image", "=", "[", "img_dir", "+", "'/'", "+", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "np", ".", "array", "(", "file_label", ")", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.Normalize.__init__": [[13, 16], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.Normalize.forward": [[17, 21], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.Non_local.__init__": [[23, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduc_ratio", "=", "2", ")", ":", "\n", "        ", "super", "(", "Non_local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "reduc_ratio", "//", "reduc_ratio", "\n", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0.0", ")", "\n", "\n", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.Non_local.forward": [[50, 75], ["x.size", "model_MGMRA.Non_local.g().view", "g_x.permute.permute.permute", "model_MGMRA.Non_local.theta().view", "theta_x.permute.permute.permute", "model_MGMRA.Non_local.phi().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "model_MGMRA.Non_local.W", "model_MGMRA.Non_local.g", "model_MGMRA.Non_local.theta", "model_MGMRA.Non_local.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n                :param x: (b, c, t, h, w)\n                :return:\n                '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "# f_div_C = torch.nn.functional.softmax(f, dim=-1)", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.visible_module.__init__": [[100, 119], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "visible_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_v", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "visible", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "visible", ".", "conv1", "=", "model_v", ".", "conv1", "\n", "self", ".", "visible", ".", "bn1", "=", "model_v", ".", "bn1", "\n", "self", ".", "visible", ".", "relu", "=", "model_v", ".", "relu", "\n", "self", ".", "visible", ".", "maxpool", "=", "model_v", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_v", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.visible_module.forward": [[120, 133], ["model_MGMRA.visible_module.visible.conv1", "model_MGMRA.visible_module.visible.bn1", "model_MGMRA.visible_module.visible.relu", "model_MGMRA.visible_module.visible.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "visible", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.thermal_module.__init__": [[136, 155], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "thermal_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_t", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "thermal", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "thermal", ".", "conv1", "=", "model_t", ".", "conv1", "\n", "self", ".", "thermal", ".", "bn1", "=", "model_t", ".", "bn1", "\n", "self", ".", "thermal", ".", "relu", "=", "model_t", ".", "relu", "\n", "self", ".", "thermal", ".", "maxpool", "=", "model_t", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_t", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.thermal_module.forward": [[156, 169], ["model_MGMRA.thermal_module.thermal.conv1", "model_MGMRA.thermal_module.thermal.bn1", "model_MGMRA.thermal_module.thermal.relu", "model_MGMRA.thermal_module.thermal.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "thermal", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.base_resnet.__init__": [[172, 190], ["torch.Module.__init__", "resnet.resnet50", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "base_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_base", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "model_base", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "share_net", "=", "share_net", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "self", ".", "base", "=", "model_base", "\n", "", "else", ":", "\n", "            ", "self", ".", "base", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "4", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_base", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.base_resnet.forward": [[191, 209], ["model_MGMRA.base_resnet.base.conv1", "model_MGMRA.base_resnet.base.bn1", "model_MGMRA.base_resnet.base.relu", "model_MGMRA.base_resnet.base.maxpool", "model_MGMRA.base_resnet.base.layer1", "model_MGMRA.base_resnet.base.layer2", "model_MGMRA.base_resnet.base.layer3", "model_MGMRA.base_resnet.base.layer4", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "base", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "base", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "share_net", ">", "4", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.embed_net.__init__": [[213, 270], ["torch.Module.__init__", "model_MGMRA.thermal_module", "model_MGMRA.visible_module", "model_MGMRA.base_resnet", "model_MGMRA.Normalize", "memory_MGMRA.MemModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "model_MGMRA.embed_net.classifier.apply", "model_MGMRA.embed_net.bottleneck.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model_MGMRA.embed_net.bottleneck.bias.requires_grad_", "torch.Linear", "torch.Linear", "torch.Linear", "model_MGMRA.embed_net.bottleneck.apply", "model_MGMRA.embed_net.classifier.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.apply", "model_MGMRA.embed_net.local_conv_list.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "model_MGMRA.embed_net.fc_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "no_local", "=", "'off'", ",", "gm_pool", "=", "'on'", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ",", "pcb", "=", "'on'", ",", "local_feat_dim", "=", "256", ",", "num_strips", "=", "6", ")", ":", "\n", "        ", "super", "(", "embed_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thermal_module", "=", "thermal_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "visible_module", "=", "visible_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "base_resnet", "=", "base_resnet", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "\n", "self", ".", "non_local", "=", "no_local", "\n", "self", ".", "pcb", "=", "pcb", "\n", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "pool_dim", "=", "2048", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "gm_pool", "=", "gm_pool", "\n", "\n", "##memory module ", "\n", "self", ".", "mem_rep", "=", "MemModule", "(", "ptt_num", "=", "5", ",", "num_cls", "=", "206", ",", "part_num", "=", "6", ",", "fea_dim", "=", "pool_dim", ",", "shrink_thres", "=", "0.0025", ")", "\n", "self", ".", "pool_mem", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "self", ".", "num_stripes", "=", "num_strips", "\n", "local_conv_out_channels", "=", "local_feat_dim", "\n", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "conv", "=", "nn", ".", "Conv2d", "(", "pool_dim", ",", "local_conv_out_channels", ",", "1", ")", "\n", "conv", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "local_conv_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "conv", ",", "\n", "nn", ".", "BatchNorm2d", "(", "local_conv_out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "self", ".", "fc_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "fc", "=", "nn", ".", "Linear", "(", "local_conv_out_channels", ",", "class_num", ")", "\n", "init", ".", "normal_", "(", "fc", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_list", ".", "append", "(", "fc", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.embed_net.forward": [[274, 384], ["model_MGMRA.embed_net.visible_module", "model_MGMRA.embed_net.thermal_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_MGMRA.embed_net.base_resnet", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_MGMRA.embed_net.pool_mem().view", "model_MGMRA.embed_net.bottleneck", "random.shuffle", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "model_MGMRA.embed_net.bottleneck", "model_MGMRA.embed_net.visible_module", "torch.max_pool2d.view", "local_feat_list.append", "local_feat_mem_list.append", "hasattr", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model_MGMRA.embed_net.l2norm", "model_MGMRA.embed_net.view", "model_MGMRA.embed_net.avgpool", "x_pool.view.view.view", "model_MGMRA.embed_net.thermal_module", "model_MGMRA.embed_net.size", "model_MGMRA.embed_net.size", "model_MGMRA.embed_net.mem_rep", "local_feat_mem_part_list.append", "torch.max_pool2d.view", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d.view", "torch.max_pool2d.size", "logits_list.append", "model_MGMRA.embed_net.pool_mem", "range", "model_MGMRA.embed_net.classifier", "x_pool.view.view.size", "x_pool.view.view.size", "model_MGMRA.embed_net.classifier", "model_MGMRA.embed_net.l2norm", "model_MGMRA.embed_net.l2norm", "model_MGMRA.embed_net.size", "model_MGMRA.embed_net.size", "len", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model_MGMRA.embed_net.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "modal", "=", "0", ")", ":", "\n", "        ", "if", "modal", "==", "0", ":", "\n", "            ", "x1", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "x2", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "0", ")", "\n", "", "elif", "modal", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "", "elif", "modal", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "\n", "# shared block", "\n", "", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "base_resnet", "(", "x", ")", "\n", "\n", "## memory module ", "\n", "#x_mem, att_mem = self.mem_rep(x)", "\n", "#x_mem += x", "\n", "#x_mem_pool = self.pool_mem(x_mem).view(x_mem.size(0), x_mem.size(1))", "\n", "#x_mem_feat = self.bottleneck(x_mem_pool)", "\n", "\n", "\n", "", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "feat", "=", "x", "\n", "assert", "feat", ".", "size", "(", "2", ")", "%", "self", ".", "num_stripes", "==", "0", "\n", "stripe_h", "=", "int", "(", "feat", ".", "size", "(", "2", ")", "/", "self", ".", "num_stripes", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "logits_list", "=", "[", "]", "\n", "local_feat_mem_list", "=", "[", "]", "\n", "local_feat_mem_part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "# shape [N, C, 1, 1]", "\n", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "# gm pool", "\n", "                    ", "local_feat", "=", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", "\n", "local_feat_mem", ",", "_", ",", "local_feat_mem_part", "=", "self", ".", "mem_rep", "(", "local_feat", ")", "\n", "\n", "local_feat_mem_part_list", ".", "append", "(", "local_feat_mem_part", ")", "\n", "local_feat_mem", "=", "local_feat", "+", "local_feat_mem", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "local_feat", ".", "shape", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "3.0", "# regDB: 10.0    SYSU: 3.0", "\n", "local_feat", "=", "(", "torch", ".", "mean", "(", "local_feat", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                    ", "local_feat", "=", "F", ".", "max_pool2d", "(", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", ",", "(", "stripe_h", ",", "feat", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "\n", "\n", "# shape [N, c, 1, 1]", "\n", "", "local_feat", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "local_feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "feat", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "# shape [N, c]", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "local_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "local_feat_list", ".", "append", "(", "local_feat", ")", "\n", "local_feat_mem_list", ".", "append", "(", "local_feat_mem", ")", "\n", "\n", "\n", "if", "hasattr", "(", "self", ",", "'fc_list'", ")", ":", "\n", "                    ", "logits_list", ".", "append", "(", "self", ".", "fc_list", "[", "i", "]", "(", "local_feat", ")", ")", "\n", "\n", "\n", "\n", "", "", "feat_all", "=", "[", "lf", "for", "lf", "in", "local_feat_list", "]", "\n", "feat_all", "=", "torch", ".", "cat", "(", "feat_all", ",", "dim", "=", "1", ")", "\n", "\n", "feat_all_mem", "=", "[", "lf", "for", "lf", "in", "local_feat_mem_list", "]", "\n", "feat_all_mem", "=", "torch", ".", "cat", "(", "feat_all_mem", ",", "dim", "=", "2", ")", "\n", "\n", "lf_mem_pool", "=", "self", ".", "pool_mem", "(", "feat_all_mem", ")", ".", "view", "(", "feat_all_mem", ".", "size", "(", "0", ")", ",", "feat_all_mem", ".", "size", "(", "1", ")", ")", "\n", "lf_mem_feat", "=", "self", ".", "bottleneck", "(", "lf_mem_pool", ")", "\n", "\n", "### this part is for part alignment, we then would change the discription here", "\n", "feat_all_part", "=", "[", "lf", "for", "lf", "in", "local_feat_mem_part_list", "]", "\n", "index", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "feat_all_part", ")", ")", "]", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "feat_all_part_shuffle", "=", "[", "feat_all_part", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "feat_all_part_chunk", "=", "torch", ".", "cat", "(", "feat_all_part_shuffle", ",", "dim", "=", "1", ")", "\n", "p_1", ",", "p_2", "=", "torch", ".", "chunk", "(", "feat_all_part_chunk", ",", "2", ",", "1", ")", "\n", "\n", "\n", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#return local_feat_list, logits_list, feat_all , x_mem_pool+ lf_mem_pool, self.classifier(x_mem_feat+lf_mem_feat)", "\n", "                ", "return", "local_feat_list", ",", "logits_list", ",", "feat_all", ",", "lf_mem_pool", ",", "self", ".", "classifier", "(", "lf_mem_feat", ")", ",", "[", "p_1", ",", "p_2", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "feat_all", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "                ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "3.0", "\n", "x_pool", "=", "(", "torch", ".", "mean", "(", "x", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "                ", "x_pool", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x_pool", ".", "size", "(", "0", ")", ",", "x_pool", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "feat", "=", "self", ".", "bottleneck", "(", "x_pool", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "return", "x_pool", ",", "self", ".", "classifier", "(", "feat", ")", "#, scores", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "x_pool", ")", ",", "self", ".", "l2norm", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.weights_init_kaiming": [[78, 89], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_MGMRA.weights_init_classifier": [[90, 96], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_HCT.adjust_learning_rate": [[271, 286], ["range", "len"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer_P", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "<", "10", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "epoch", "+", "1", ")", "/", "10", "\n", "", "elif", "10", "<=", "epoch", "<", "20", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "20", "<=", "epoch", "<", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "elif", "epoch", ">=", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "\n", "", "optimizer_P", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.1", "*", "lr", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer_P", ".", "param_groups", ")", "-", "1", ")", ":", "\n", "        ", "optimizer_P", ".", "param_groups", "[", "i", "+", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_HCT.train": [[288, 390], ["train_HCT.adjust_learning_rate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "time.time", "enumerate", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.AverageMeter.update", "criterion1", "criterion2", "tr_entropy_loss_func", "tri_mem_loss_fuc", "out0.max", "optimizer_P.zero_grad", "loss.backward", "optimizer_P.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.autograd.Variable.size", "utils.AverageMeter.update", "time.time", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "net", "criterion1", "net", "criterion1", "criterion2", "torch.autograd.Variable.long", "predicted.eq().sum().item", "loss.item", "criterion1.item", "loss_tri.item", "loss_mem_tri.item", "tr_entropy_loss_func.item", "print", "time.time", "criterion_hc", "torch.autograd.Variable.long", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "time.time", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.adjust_learning_rate", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.train", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "# adjust learning rate", "\n", "    ", "current_lr", "=", "adjust_learning_rate", "(", "optimizer_P", ",", "epoch", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "id_loss", "=", "AverageMeter", "(", ")", "\n", "tri_loss", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "tri_mem_loss", "=", "AverageMeter", "(", ")", "\n", "ce_mem_loss", "=", "AverageMeter", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# switch to train mode", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "input1", ",", "input2", ",", "label1", ",", "label2", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "(", "label1", ",", "label2", ")", ",", "0", ")", "\n", "\n", "input1", "=", "Variable", "(", "input1", ".", "cuda", "(", ")", ")", "\n", "input2", "=", "Variable", "(", "input2", ".", "cuda", "(", ")", ")", "\n", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "# Forward into the network", "\n", "            ", "feat", ",", "out0", ",", "feat_att", ",", "out_att", ",", "att_mem", ",", "feat_mem", "=", "net", "(", "input1", ",", "input2", ")", "\n", "# Part attention loss", "\n", "loss_p", "=", "criterion1", "(", "out_att", ",", "labels", ")", "\n", "if", "args", ".", "hcloss", "!=", "'no'", ":", "\n", "                ", "loss_p_hc", ",", "_", "=", "criterion_hc", "(", "feat_att", ",", "labels", ")", "\n", "", "", "else", ":", "\n", "# Forward into the network", "\n", "            ", "feat", ",", "out0", ",", "att_mem", ",", "feat_mem", ",", "x_mem_feat", ",", "out_mem", "=", "net", "(", "input1", ",", "input2", ")", "\n", "loss_mem_br_cls", "=", "criterion1", "(", "out_mem", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_mem_br_tri", ",", "_", "=", "criterion2", "(", "x_mem_feat", ",", "labels", ")", "\n", "\n", "\n", "# baseline loss: identity loss + triplet loss Eq. (1)", "\n", "", "loss_id", "=", "criterion1", "(", "out0", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_tri", ",", "batch_acc", "=", "criterion2", "(", "feat", ",", "labels", ")", "\n", "# loss mem att", "\n", "loss_mem", "=", "tr_entropy_loss_func", "(", "att_mem", ")", "\n", "loss_mem_tri", ",", "_", "=", "tri_mem_loss_fuc", "(", "feat_mem", ",", "labels", ",", "att_mem", ")", "\n", "#att_mem_c_1 , att_mem_c_2 = att_mem_c.chunk(2,dim=0)", "\n", "#loss_mem_c = l1_mem_loss_func(att_mem_c_1, att_mem_c_2)", "\n", "#loss_hc, _ = criterion_hc(feat, labels)", "\n", "correct", "+=", "(", "batch_acc", "/", "2", ")", "\n", "_", ",", "predicted", "=", "out0", ".", "max", "(", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "# Instance-level part-aggregated feature learning Eq. (10)", "\n", "            ", "if", "args", ".", "hcloss", "!=", "'no'", ":", "\n", "                ", "loss", "=", "loss_id", "+", "loss_tri", "+", "loss_p", "+", "loss_p_hc", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_id", "+", "loss_tri", "+", "loss_p", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "loss_id", "+", "loss_tri", "#+ loss_hc", "\n", "\n", "", "loss", "=", "loss", "+", "loss_mem", "+", "loss_mem_tri", "+", "loss_mem_br_cls", "*", "0.1", "+", "loss_mem_br_tri", "#+ loss_mem_c", "\n", "#loss = loss + loss_mem_tri", "\n", "\n", "# optimization", "\n", "optimizer_P", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_P", ".", "step", "(", ")", "\n", "\n", "# log different loss components", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "id_loss", ".", "update", "(", "loss_id", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_loss", ".", "update", "(", "loss_tri", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_mem_loss", ".", "update", "(", "loss_mem_tri", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "ce_mem_loss", ".", "update", "(", "loss_mem", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "#graph_loss.update(loss_G.item(), 2 * input1.size(0))", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{}][{}/{}] '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'lr:{:.2f} '", "\n", "'Loss: {train_loss.val:.4f} ({train_loss.avg:.4f}) '", "\n", "'iLoss: {id_loss.val:.4f} ({id_loss.avg:.4f}) '", "\n", "'TLoss: {tri_loss.val:.4f} ({tri_loss.avg:.4f}) '", "\n", "'TriMem: {trimem.val:.4f} ({trimem.avg:.4f}) '", "\n", "'CeMem: {cemem.val:.4f} ({cemem.avg:.4f}) '", "\n", "'Accu: {:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "current_lr", ",", "\n", "100.", "*", "correct", "/", "total", ",", "batch_time", "=", "batch_time", ",", "\n", "train_loss", "=", "train_loss", ",", "id_loss", "=", "id_loss", ",", "tri_loss", "=", "tri_loss", ",", "trimem", "=", "tri_mem_loss", ",", "cemem", "=", "ce_mem_loss", ")", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'total_loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'id_loss'", ",", "id_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'tri_loss'", ",", "tri_loss", ".", "avg", ",", "epoch", ")", "\n", "#writer.add_scalar('graph_loss', graph_loss.avg, epoch)", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "current_lr", ",", "epoch", ")", "\n", "# computer wG", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_HCT.test": [[393, 465], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "time.time", "np.matmul", "print", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "np.transpose", "np.matmul", "eval_metrics.eval_regdb", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.autograd.Variable.size", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.autograd.Variable", "np.transpose", "eval_metrics.eval_regdb", "eval_metrics.eval_sysu", "torch.autograd.Variable.cuda", "net", "feat_att.detach().cpu().numpy", "feat.detach().cpu().numpy", "net", "feat.detach().cpu().numpy", "x_mem_feat.detach().cpu().numpy", "time.time", "torch.autograd.Variable.cuda", "net", "feat_att.detach().cpu().numpy", "feat.detach().cpu().numpy", "net", "feat.detach().cpu().numpy", "x_mem_feat.detach().cpu().numpy", "time.time", "eval_metrics.eval_sysu", "time.time", "feat_att.detach().cpu", "feat.detach().cpu", "feat.detach().cpu", "x_mem_feat.detach().cpu", "feat_att.detach().cpu", "feat.detach().cpu", "feat.detach().cpu", "x_mem_feat.detach().cpu", "feat_att.detach", "feat.detach", "feat.detach", "x_mem_feat.detach", "feat_att.detach", "feat.detach", "feat.detach", "x_mem_feat.detach"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feature_dim", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feature_dim_att", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                 ", "feat", ",", "x_mem_feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "x_mem_feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# switch to evaluation", "\n", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feature_dim", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feature_dim_att", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat", ",", "x_mem_feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "x_mem_feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# compute the similarity", "\n", "distmat", "=", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "        ", "distmat_att", "=", "np", ".", "matmul", "(", "query_feat_att", ",", "np", ".", "transpose", "(", "gall_feat_att", ")", ")", "\n", "\n", "# evaluation", "\n", "", "if", "dataset", "==", "'regdb'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_regdb", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "            ", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_regdb", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ")", "\n", "", "", "elif", "dataset", "==", "'sysu'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_sysu", "(", "-", "distmat", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "            ", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_sysu", "(", "-", "distmat_att", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "", "", "print", "(", "'Evaluation Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'rank1'", ",", "cmc", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP'", ",", "mAP", ",", "epoch", ")", "\n", "if", "args", ".", "cpool", "!=", "'no'", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'rank1_att'", ",", "cmc_att", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP_att'", ",", "mINP_att", ",", "epoch", ")", "\n", "return", "cmc", ",", "mAP", ",", "mINP", ",", "cmc_att", ",", "mAP_att", ",", "mINP_att", "\n", "", "else", ":", "\n", "        ", "return", "cmc", ",", "mAP", ",", "mINP", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.SYSUData.__init__": [[7, 23], ["numpy.load", "numpy.load", "numpy.load", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transform", "=", "None", ",", "colorIndex", "=", "None", ",", "thermalIndex", "=", "None", ")", ":", "\n", "\n", "#data_dir = 'E:\\chenfeng\\dataset\\SYSU-MM01/'", "\n", "# Load training images (path) and labels", "\n", "        ", "train_color_image", "=", "np", ".", "load", "(", "data_dir", "+", "'train_rgb_resized_img.npy'", ")", "\n", "self", ".", "train_color_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_rgb_resized_label.npy'", ")", "\n", "\n", "train_thermal_image", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_img.npy'", ")", "\n", "self", ".", "train_thermal_label", "=", "np", ".", "load", "(", "data_dir", "+", "'train_ir_resized_label.npy'", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.SYSUData.__getitem__": [[24, 33], ["data_loader.SYSUData.transform", "data_loader.SYSUData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.SYSUData.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.RegDBData.__init__": [[39, 76], ["data_loader.load_data", "data_loader.load_data", "range", "numpy.array", "range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.load_data", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.load_data"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "trial", ",", "transform", "=", "None", ",", "colorIndex", "=", "None", ",", "thermalIndex", "=", "None", ")", ":", "\n", "# Load training images (path) and labels", "\n", "#data_dir = 'E:\\chenfeng\\dataset\\RegDB/'", "\n", "        ", "train_color_list", "=", "data_dir", "+", "'idx/train_visible_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "train_thermal_list", "=", "data_dir", "+", "'idx/train_thermal_{}'", ".", "format", "(", "trial", ")", "+", "'.txt'", "\n", "\n", "color_img_file", ",", "train_color_label", "=", "load_data", "(", "train_color_list", ")", "\n", "thermal_img_file", ",", "train_thermal_label", "=", "load_data", "(", "train_thermal_list", ")", "\n", "\n", "train_color_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "color_img_file", ")", ")", ":", "\n", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "color_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_color_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_color_image", "=", "np", ".", "array", "(", "train_color_image", ")", "\n", "\n", "train_thermal_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "thermal_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "thermal_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "144", ",", "288", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "train_thermal_image", ".", "append", "(", "pix_array", ")", "\n", "", "train_thermal_image", "=", "np", ".", "array", "(", "train_thermal_image", ")", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_color_image", "=", "train_color_image", "\n", "self", ".", "train_color_label", "=", "train_color_label", "\n", "\n", "# BGR to RGB", "\n", "self", ".", "train_thermal_image", "=", "train_thermal_image", "\n", "self", ".", "train_thermal_label", "=", "train_thermal_label", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "cIndex", "=", "colorIndex", "\n", "self", ".", "tIndex", "=", "thermalIndex", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.RegDBData.__getitem__": [[77, 86], ["data_loader.RegDBData.transform", "data_loader.RegDBData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "train_color_image", "[", "self", ".", "cIndex", "[", "index", "]", "]", ",", "self", ".", "train_color_label", "[", "self", ".", "cIndex", "[", "index", "]", "]", "\n", "img2", ",", "target2", "=", "self", ".", "train_thermal_image", "[", "self", ".", "tIndex", "[", "index", "]", "]", ",", "self", ".", "train_thermal_label", "[", "self", ".", "tIndex", "[", "index", "]", "]", "\n", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "\n", "return", "img1", ",", "img2", ",", "target1", ",", "target2", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.RegDBData.__len__": [[87, 89], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_color_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestData.__init__": [[91, 103], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n", "        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "test_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestData.__getitem__": [[104, 108], ["data_loader.TestData.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestData.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestDataOld.__init__": [[113, 125], ["range", "numpy.array", "len", "PIL.Image.open", "img.resize.resize.resize", "numpy.array", "numpy.array.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "test_img_file", ",", "test_label", ",", "transform", "=", "None", ",", "img_size", "=", "(", "144", ",", "288", ")", ")", ":", "\n", "\n", "        ", "test_image", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_img_file", ")", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "data_dir", "+", "test_img_file", "[", "i", "]", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "test_image", ".", "append", "(", "pix_array", ")", "\n", "", "test_image", "=", "np", ".", "array", "(", "test_image", ")", "\n", "self", ".", "test_image", "=", "test_image", "\n", "self", ".", "test_label", "=", "test_label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestDataOld.__getitem__": [[126, 130], ["data_loader.TestDataOld.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img1", ",", "target1", "=", "self", ".", "test_image", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", "\n", "img1", "=", "self", ".", "transform", "(", "img1", ")", "\n", "return", "img1", ",", "target1", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.TestDataOld.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "test_image", ")", "\n", "", "", "def", "load_data", "(", "input_data_path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.data_loader.load_data": [[133, 141], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["", "", "def", "load_data", "(", "input_data_path", ")", ":", "\n", "    ", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of image and labels", "\n", "file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "file_label", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu": [[6, 83], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.invert", "new_match.cumsum", "np.asarray().astype.append", "orig_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "np.asarray().astype.sum", "numpy.unique", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "numpy.asarray", "sorted", "enumerate"], "function", ["None"], ["def", "eval_sysu", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "\"\"\"Evaluation with sysu metric\n    Key: for each query identity, its gallery images from the same camera view are discarded. \"Following the original setting in ite dataset\"\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "pred_label", "=", "g_pids", "[", "indices", "]", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "new_all_cmc", "=", "[", "]", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "q_camid", "==", "3", ")", "&", "(", "g_camids", "[", "order", "]", "==", "2", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# the cmc calculation is different from standard protocol", "\n", "# we follow the protocol of the author's released code", "\n", "new_cmc", "=", "pred_label", "[", "q_idx", "]", "[", "keep", "]", "\n", "new_index", "=", "np", ".", "unique", "(", "new_cmc", ",", "return_index", "=", "True", ")", "[", "1", "]", "\n", "new_cmc", "=", "[", "new_cmc", "[", "index", "]", "for", "index", "in", "sorted", "(", "new_index", ")", "]", "\n", "\n", "new_match", "=", "(", "new_cmc", "==", "q_pid", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "new_cmc", "=", "new_match", ".", "cumsum", "(", ")", "\n", "new_all_cmc", ".", "append", "(", "new_cmc", "[", ":", "max_rank", "]", ")", "\n", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "orig_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "# standard CMC", "\n", "\n", "new_all_cmc", "=", "np", ".", "asarray", "(", "new_all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_all_cmc", "=", "new_all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "new_all_cmc", ",", "mAP", ",", "mINP", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb": [[86, 150], ["numpy.argsort", "numpy.ones().astype", "range", "numpy.asarray().astype", "numpy.mean", "numpy.mean", "print", "numpy.ones().astype", "numpy.invert", "raw_cmc.cumsum", "numpy.where", "numpy.max", "all_INP.append", "np.asarray().astype.append", "raw_cmc.sum", "raw_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.ones", "numpy.any", "numpy.asarray", "raw_cmc.cumsum.sum", "numpy.asarray", "numpy.ones", "enumerate"], "function", ["None"], ["", "def", "eval_regdb", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "max_rank", "=", "20", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "all_INP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "\n", "# only two cameras", "\n", "q_camids", "=", "np", ".", "ones", "(", "num_q", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "g_camids", "=", "2", "*", "np", ".", "ones", "(", "num_g", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "raw_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "raw_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "\n", "# compute mINP", "\n", "# refernece Deep Learning for Person Re-identification: A Survey and Outlook", "\n", "pos_idx", "=", "np", ".", "where", "(", "raw_cmc", "==", "1", ")", "\n", "pos_max_idx", "=", "np", ".", "max", "(", "pos_idx", ")", "\n", "inp", "=", "cmc", "[", "pos_max_idx", "]", "/", "(", "pos_max_idx", "+", "1.0", ")", "\n", "all_INP", ".", "append", "(", "inp", ")", "\n", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "raw_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "raw_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "mINP", "=", "np", ".", "mean", "(", "all_INP", ")", "\n", "return", "all_cmc", ",", "mAP", ",", "mINP", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemoryUnit.__init__": [[11, 33], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.AdaptiveAvgPool1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "memory_module_MGMRA.MemoryUnit.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ")", ":", "\n", "        ", "super", "(", "MemoryUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n        the instance PTT is divided into cls_number x ptt_number per cls x part number per ptt\n        '''", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "part_num", "=", "part_num", "\n", "\n", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# M", "\n", "self", ".", "fea_dim", "=", "fea_dim", "# C", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", ")", ")", "# M x C", "\n", "#self.sem_weight = Parameter(torch.Tensor(self.num_cls, self.fea_dim)) # N x C", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "# self.hard_sparse_shrink_opt = nn.Hardshrink(lambd=shrink_thres)", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "reweight_layer_part", "=", "nn", ".", "Conv1d", "(", "self", ".", "part_num", ",", "self", ".", "part_num", ",", "1", ")", "\n", "self", ".", "reweight_layer_ins", "=", "nn", ".", "Conv1d", "(", "self", ".", "ptt_num", ",", "self", ".", "ptt_num", ",", "1", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemoryUnit.reset_parameters": [[34, 39], ["memory_module_MGMRA.MemoryUnit.weight.data.uniform_", "math.sqrt", "memory_module_MGMRA.MemoryUnit.bias.data.uniform_", "memory_module_MGMRA.MemoryUnit.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemoryUnit.get_update_query": [[40, 61], ["mem.size", "torch.zeros().cuda", "range", "torch.nonzero", "torch.nonzero.size", "torch.zeros", "torch.sum", "max_indices.squeeze", "query[].squeeze", "torch.max"], "methods", ["None"], ["", "", "def", "get_update_query", "(", "self", ",", "mem", ",", "max_indices", ",", "score", ",", "query", ")", ":", "\n", "        ", "m", ",", "d", "=", "mem", ".", "size", "(", ")", "\n", "\n", "query_update", "=", "torch", ".", "zeros", "(", "(", "m", ",", "d", ")", ")", ".", "cuda", "(", ")", "\n", "#random_update = torch.zeros((m,d)).cuda()", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "idx", "=", "torch", ".", "nonzero", "(", "max_indices", ".", "squeeze", "(", "1", ")", "==", "i", ")", "\n", "a", ",", "_", "=", "idx", ".", "size", "(", ")", "\n", "#ex = update_indices[0][i]", "\n", "if", "a", "!=", "0", ":", "\n", "#random_idx = torch.randperm(a)[0]", "\n", "#idx = idx[idx != ex]", "\n", "#                     query_update[i] = torch.sum(query[idx].squeeze(1), dim=0)", "\n", "                ", "query_update", "[", "i", "]", "=", "torch", ".", "sum", "(", "(", "(", "score", "[", "idx", ",", "i", "]", "/", "torch", ".", "max", "(", "score", "[", ":", ",", "i", "]", ")", ")", "*", "query", "[", "idx", "]", ".", "squeeze", "(", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "#random_update[i] = query[random_idx] * (score[random_idx,i] / torch.max(score[:,i]))", "\n", "", "else", ":", "\n", "                ", "query_update", "[", "i", "]", "=", "0", "\n", "#random_update[i] = 0", "\n", "\n", "\n", "", "", "return", "query_update", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemoryUnit.forward": [[62, 122], ["torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_module_MGMRA.MemoryUnit.weight.permute", "torch.nn.functional.linear", "memory_module_MGMRA.MemoryUnit.weight.view().permute", "memory_module_MGMRA.MemoryUnit.avgpool().squeeze", "torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_module_MGMRA.MemoryUnit.part_ins_att.permute", "torch.nn.functional.linear", "memory_module_MGMRA.MemoryUnit.part_ins_att.view", "memory_module_MGMRA.MemoryUnit.avgpool().squeeze", "torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_module_MGMRA.MemoryUnit.sem_att.permute", "torch.nn.functional.linear", "memory_module_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_module_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_module_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_module_MGMRA.MemoryUnit.weight.view", "memory_module_MGMRA.MemoryUnit.avgpool", "memory_module_MGMRA.MemoryUnit.avgpool", "torch.sigmoid", "torch.sigmoid", "memory_module_MGMRA.MemoryUnit.reweight_layer_part", "memory_module_MGMRA.MemoryUnit.reweight_layer_ins"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "residual", "=", "False", ")", ":", "\n", "        ", "'''\n        this is a bottom-up hierarchical stastic and summaration module\n        all steps in main flow follow  part -> prototype -> cls\n        input = NHW x C\n        total PTT M =  num_cls (L) x ptt_num (T) x part_num (P)\n        dimension C = fea_dim\n        '''", "\n", "### for global part-unware instance PTT, act as sub flow", "\n", "att_weight", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ")", "# we doesn't split the part dimension, there it is part-unaware NHW x M", "\n", "import", "pdb", "\n", "#pdb.set_trace()", "\n", "att_weight", "=", "F", ".", "softmax", "(", "att_weight", ",", "dim", "=", "1", ")", "# NHW x M", "\n", "### update ###", "\n", "#_, gather_indice = torch.topk(att_weight, 1, dim=1)", "\n", "#ins_mem_sample_driven = self.get_update_query(self.weight, gather_indice, att_weight,input)", "\n", "#self.weight.data = F.normalize(ins_mem_sample_driven+ self.weight, dim=1)", "\n", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "att_weight", "=", "hard_shrink_relu", "(", "att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "att_weight", "=", "F", ".", "normalize", "(", "att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "mem_trans", "=", "self", ".", "weight", ".", "permute", "(", "1", ",", "0", ")", "# Mem^T, MxC", "\n", "output_part", "=", "F", ".", "linear", "(", "att_weight", ",", "mem_trans", ")", "# AttWeight x Mem^T^T = AW x Mem, (TxM) x (MxC) = TxC", "\n", "\n", "### for global part-aware instance PTT", "\n", "\n", "self", ".", "reweight_part", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "num_cls", "*", "self", ".", "ptt_num", ",", "self", ".", "fea_dim", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "self", ".", "reweight_part", "=", "(", "torch", ".", "sigmoid", "(", "self", ".", "reweight_layer_part", "(", "self", ".", "reweight_part", ")", ")", "*", "self", ".", "reweight_part", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "self", ".", "part_ins_att", "=", "self", ".", "avgpool", "(", "self", ".", "reweight_part", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "ins_att_weight", "=", "F", ".", "linear", "(", "output_part", ",", "self", ".", "part_ins_att", ")", "# this is for global part-aware instance ptt which is not used in ours [NHW, C] x[C, M] = [NHW, M]", "\n", "ins_att_weight", "=", "F", ".", "softmax", "(", "ins_att_weight", ",", "dim", "=", "1", ")", "# NHW x LT", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "ins_att_weight", "=", "hard_shrink_relu", "(", "ins_att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "ins_att_weight", "=", "F", ".", "normalize", "(", "ins_att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "ins_mem_trans", "=", "self", ".", "part_ins_att", ".", "permute", "(", "1", ",", "0", ")", "# Mem^T, MxC", "\n", "output_ins", "=", "F", ".", "linear", "(", "ins_att_weight", ",", "ins_mem_trans", ")", "# AttWeight x Mem^T^T = AW x Mem, (TxM) x (MxC) = TxC", "\n", "\n", "### for semantic PTT", "\n", "#pdb.set_trace()", "\n", "self", ".", "reweight_ins", "=", "self", ".", "part_ins_att", ".", "view", "(", "self", ".", "num_cls", ",", "self", ".", "ptt_num", ",", "self", ".", "fea_dim", ")", "\n", "self", ".", "reweight_ins", "=", "(", "torch", ".", "sigmoid", "(", "self", ".", "reweight_layer_ins", "(", "self", ".", "reweight_ins", ")", ")", "*", "self", ".", "reweight_ins", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "self", ".", "sem_att", "=", "self", ".", "avgpool", "(", "self", ".", "reweight_ins", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "sem_att_weight", "=", "F", ".", "linear", "(", "output_ins", ",", "self", ".", "sem_att", ")", "\n", "sem_att_weight", "=", "F", ".", "softmax", "(", "sem_att_weight", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "sem_att_weight", "=", "hard_shrink_relu", "(", "sem_att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "sem_att_weight", "=", "F", ".", "normalize", "(", "sem_att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "sem_mem_trans", "=", "self", ".", "sem_att", ".", "permute", "(", "1", ",", "0", ")", "\n", "output_sem", "=", "F", ".", "linear", "(", "sem_att_weight", ",", "sem_mem_trans", ")", "\n", "\n", "if", "residual", ":", "\n", "            ", "output_sem", "+=", "output", "\n", "\n", "\n", "#return {'output': output, 'att': att_weight}  # output, att_weight", "\n", "", "return", "{", "'output_sem'", ":", "output_sem", ",", "'output_part'", ":", "output_part", ",", "'output_ins'", ":", "output_ins", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemoryUnit.extra_repr": [[124, 127], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'mem_dim={}, fea_dim={}'", ".", "format", "(", "\n", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemModule.__init__": [[132, 145], ["torch.nn.Module.__init__", "memory_module_MGMRA.MemoryUnit"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "MemModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "part_num", "=", "part_num", "\n", "ins_mem", "=", "False", "\n", "if", "ins_mem", ":", "\n", "            ", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# part-level instance", "\n", "", "else", ":", "\n", "            ", "self", ".", "mem_dim", "=", "num_cls", "# global semantic", "\n", "", "self", ".", "fea_dim", "=", "fea_dim", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "self", ".", "memory", "=", "MemoryUnit", "(", "self", ".", "ptt_num", ",", "self", ".", "num_cls", ",", "self", ".", "part_num", ",", "self", ".", "fea_dim", ",", "self", ".", "shrink_thres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.MemModule.forward": [[146, 180], ["len", "input.permute.contiguous", "input.permute.view", "memory_module_MGMRA.MemModule.memory", "input.permute", "y_sem.permute.permute.view", "y_sem.permute.permute.permute", "y_ins.permute.permute.view", "y_ins.permute.permute.permute", "y_part.permute.permute.view", "y_part.permute.permute.permute", "print", "input.permute", "input.permute", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "s", "=", "input", ".", "data", ".", "shape", "\n", "l", "=", "len", "(", "s", ")", "\n", "\n", "if", "l", "==", "3", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "l", "==", "4", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "elif", "l", "==", "5", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "[", "]", "\n", "print", "(", "'wrong feature map size'", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "s", "[", "1", "]", ")", "\n", "#", "\n", "y_and", "=", "self", ".", "memory", "(", "x", ")", "\n", "#", "\n", "y_sem", "=", "y_and", "[", "'output_sem'", "]", "\n", "y_ins", "=", "y_and", "[", "'output_ins'", "]", "\n", "y_part", "=", "y_and", "[", "'output_part'", "]", "\n", "\n", "\n", "if", "l", "==", "4", ":", "\n", "            ", "y_sem", "=", "y_sem", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "1", "]", ")", "\n", "y_sem", "=", "y_sem", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "y_ins", "=", "y_ins", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "1", "]", ")", "\n", "y_ins", "=", "y_ins", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "y_part", "=", "y_part", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "1", "]", ")", "\n", "y_part", "=", "y_part", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'wrong feature map size'", ")", "\n", "", "return", "y_sem", ",", "y_ins", ",", "y_part", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_module_MGMRA.hard_shrink_relu": [[182, 185], ["torch.nn.functional.relu", "torch.abs"], "function", ["None"], ["", "", "def", "hard_shrink_relu", "(", "input", ",", "lambd", "=", "0", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "output", "=", "(", "F", ".", "relu", "(", "input", "-", "lambd", ")", "*", "input", ")", "/", "(", "torch", ".", "abs", "(", "input", "-", "lambd", ")", "+", "epsilon", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.test_mine_pcb.extract_gall_feat": [[129, 153], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_fc.detach().cpu().numpy", "time.time", "net.detach().cpu", "net.detach().cpu", "feat_fc.detach().cpu", "net.detach", "net.detach", "feat_fc.detach"], "function", ["None"], ["def", "extract_gall_feat", "(", "gall_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "gall_feat_pool", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "pool_dim", ")", ")", "\n", "gall_feat_fc", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat_pool", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat_pool", ",", "feat_fc", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_fc", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_fc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "        ", "return", "gall_feat_pool", "\n", "", "else", ":", "\n", "        ", "return", "gall_feat_pool", ",", "gall_feat_fc", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.test_mine_pcb.extract_query_feat": [[154, 178], ["net.eval", "print", "time.time", "np.zeros", "np.zeros", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.autograd.Variable.size", "torch.autograd.Variable", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_fc.detach().cpu().numpy", "time.time", "net.detach().cpu", "net.detach().cpu", "feat_fc.detach().cpu", "net.detach", "net.detach", "feat_fc.detach"], "function", ["None"], ["", "", "def", "extract_query_feat", "(", "query_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "query_feat_pool", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "pool_dim", ")", ")", "\n", "query_feat_fc", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "pool_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat_pool", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat_pool", ",", "feat_fc", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat_pool", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_pool", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_fc", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_fc", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "        ", "return", "query_feat_pool", "\n", "", "else", ":", "\n", "        ", "return", "query_feat_pool", ",", "query_feat_fc", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.CenterTripletLoss.__init__": [[19, 23], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "CenterTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.CenterTripletLoss.forward": [[24, 63], ["labels.unique", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "feats.chunk", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "torch.cat.expand().eq", "torch.cat.expand().eq", "torch.cat.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.CenterTripletLoss.CenterTripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "center.append", "dist.clamp().sqrt.clamp().sqrt.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.expand().t", "torch.cat.expand().t", "torch.cat.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "[].max().unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        - inputs: feature matrix with shape (batch_size, feat_dim)\n        - targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "label_uni", "=", "labels", ".", "unique", "(", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "label_uni", ",", "label_uni", "]", ")", "\n", "label_num", "=", "len", "(", "label_uni", ")", "\n", "feat", "=", "feats", ".", "chunk", "(", "label_num", "*", "2", ",", "0", ")", "\n", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "label_num", "*", "2", ")", ":", "\n", "            ", "center", ".", "append", "(", "torch", ".", "mean", "(", "feat", "[", "i", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "", "inputs", "=", "torch", ".", "cat", "(", "center", ")", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "dist_an", ",", "dist_ap", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.CrossEntropyLabelSmooth.__init__": [[77, 83], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.CrossEntropyLabelSmooth.forward": [[84, 96], ["loss.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "loss.CrossEntropyLabelSmooth.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.OriTripletLoss.__init__": [[109, 113], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "OriTripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.OriTripletLoss.forward": [[114, 144], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.OriTripletLoss.OriTripletLoss.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n        - inputs: feature matrix with shape (batch_size, feat_dim)\n        - targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "dist_an", ",", "dist_ap", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.TripletLoss_WRT.__init__": [[169, 172], ["torch.Module.__init__", "torch.SoftMarginLoss", "torch.SoftMarginLoss", "torch.SoftMarginLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TripletLoss_WRT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.TripletLoss_WRT.forward": [[173, 200], ["loss.pdist_torch", "pdist_torch.size", "targets.expand().eq().float", "targets.expand().ne().float", "loss.softmax_weights", "loss.softmax_weights", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.new().resize_as_().fill_", "torch.sum.new().resize_as_().fill_", "torch.sum.new().resize_as_().fill_", "loss.TripletLoss_WRT.TripletLoss_WRT.ranking_loss", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "torch.ge().sum().item", "loss.normalize", "targets.expand().eq", "targets.expand().ne", "torch.sum.new().resize_as_", "torch.sum.new().resize_as_", "torch.sum.new().resize_as_", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "torch.ge().sum", "targets.expand().t", "targets.expand().t", "targets.expand", "targets.expand", "torch.sum.new", "torch.sum.new", "torch.sum.new", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "targets.expand", "targets.expand"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.pdist_torch", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.softmax_weights", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.softmax_weights", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "normalize_feature", "=", "False", ")", ":", "\n", "        ", "if", "normalize_feature", ":", "\n", "            ", "inputs", "=", "normalize", "(", "inputs", ",", "axis", "=", "-", "1", ")", "\n", "", "dist_mat", "=", "pdist_torch", "(", "inputs", ",", "inputs", ")", "\n", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "# shape [N, N]", "\n", "is_pos", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "is_neg", "=", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "targets", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", "=", "dist_mat", "*", "is_pos", "\n", "dist_an", "=", "dist_mat", "*", "is_neg", "\n", "\n", "weights_ap", "=", "softmax_weights", "(", "dist_ap", ",", "is_pos", ")", "\n", "weights_an", "=", "softmax_weights", "(", "-", "dist_an", ",", "is_neg", ")", "\n", "furthest_positive", "=", "torch", ".", "sum", "(", "dist_ap", "*", "weights_ap", ",", "dim", "=", "1", ")", "\n", "closest_negative", "=", "torch", ".", "sum", "(", "dist_an", "*", "weights_an", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "furthest_positive", ".", "new", "(", ")", ".", "resize_as_", "(", "furthest_positive", ")", ".", "fill_", "(", "1", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "closest_negative", "-", "furthest_positive", ",", "y", ")", "\n", "\n", "\n", "# compute accuracy", "\n", "correct", "=", "torch", ".", "ge", "(", "closest_negative", ",", "furthest_positive", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "return", "loss", ",", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.global_loss_idx.__init__": [[231, 235], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "global_loss_idx", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.global_loss_idx.forward": [[236, 304], ["loss.normalize", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist_mat.clamp().sqrt.clamp().sqrt.addmm_", "dist_mat.clamp().sqrt.clamp().sqrt.clamp().sqrt", "dist_mat.clamp().sqrt.clamp().sqrt.size", "labels.expand().eq", "labels.expand().ne", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "dist_ap.squeeze.squeeze.squeeze", "dist_an.squeeze.squeeze.squeeze", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "p_inds.squeeze.squeeze.squeeze", "n_inds.squeeze.squeeze.squeeze", "labels.unique", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "global_feat.chunk.chunk.chunk", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist_c.clamp().sqrt.clamp().sqrt.addmm_", "dist_c.clamp().sqrt.clamp().sqrt.clamp().sqrt", "torch.cat.expand().eq", "torch.cat.expand().eq", "torch.cat.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.global_loss_idx.global_loss_idx.ranking_loss", "dist_mat.clamp().sqrt.clamp().sqrt.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "labels.expand().t", "labels.expand().t", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "ind[].contiguous().view", "ind[].contiguous().view", "center.append", "dist_c.clamp().sqrt.clamp().sqrt.t", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cat.expand().t", "torch.cat.expand().t", "torch.cat.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist_mat.clamp().sqrt.clamp().sqrt.clamp", "labels.expand", "labels.expand", "labels.new().resize_as_().copy_().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist_c.clamp().sqrt.clamp().sqrt.clamp", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "[].max().unsqueeze", "[].min().unsqueeze", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous", "ind[].contiguous", "ind[].contiguous", "torch.cat.expand", "torch.cat.expand", "torch.cat.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "labels.new().resize_as_().copy_", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.new"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize"], ["", "def", "forward", "(", "self", ",", "global_feat", ",", "labels", ")", ":", "\n", "        ", "global_feat", "=", "normalize", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "inputs", "=", "global_feat", "\n", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "dist_mat", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist_mat", "=", "dist_mat", "+", "dist_mat", ".", "t", "(", ")", "\n", "dist_mat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist_mat", "=", "dist_mat", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "\n", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "ind", "=", "(", "labels", ".", "new", "(", ")", ".", "resize_as_", "(", "labels", ")", "\n", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", ")", "\n", "\n", "p_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_p_inds", ".", "data", ")", "\n", "n_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_n_inds", ".", "data", ")", "\n", "# shape [N]", "\n", "p_inds", "=", "p_inds", ".", "squeeze", "(", "1", ")", "\n", "n_inds", "=", "n_inds", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "label_uni", "=", "labels", ".", "unique", "(", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "label_uni", ",", "label_uni", "]", ")", "\n", "label_num", "=", "len", "(", "label_uni", ")", "\n", "global_feat", "=", "global_feat", ".", "chunk", "(", "label_num", "*", "2", ",", "0", ")", "\n", "center", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "label_num", "*", "2", ")", ":", "\n", "            ", "center", ".", "append", "(", "torch", ".", "mean", "(", "global_feat", "[", "i", "]", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "", "inputs", "=", "torch", ".", "cat", "(", "center", ")", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist_c", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist_c", "=", "dist_c", "+", "dist_c", ".", "t", "(", ")", "\n", "dist_c", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist_c", "=", "dist_c", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap_c", ",", "dist_an_c", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap_c", ".", "append", "(", "dist_c", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an_c", ".", "append", "(", "dist_c", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap_c", "=", "torch", ".", "cat", "(", "dist_ap_c", ")", "\n", "dist_an_c", "=", "torch", ".", "cat", "(", "dist_an_c", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an_c", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an_c", ",", "dist_ap_c", ",", "y", ")", "\n", "\n", "return", "loss", ",", "p_inds", ",", "n_inds", ",", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.local_loss_idx.__init__": [[352, 356], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "local_loss_idx", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.local_loss_idx.forward": [[357, 366], ["loss.normalize", "loss.batch_local_dist", "loss.batch_local_dist", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "loss.local_loss_idx.local_loss_idx.ranking_loss", "p_inds.long", "n_inds.long"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.batch_local_dist", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.batch_local_dist"], ["", "def", "forward", "(", "self", ",", "local_feat", ",", "p_inds", ",", "n_inds", ",", "labels", ")", ":", "\n", "        ", "local_feat", "=", "normalize", "(", "local_feat", ",", "axis", "=", "-", "1", ")", "\n", "\n", "dist_ap", "=", "batch_local_dist", "(", "local_feat", ",", "local_feat", "[", "p_inds", ".", "long", "(", ")", "]", ")", "\n", "dist_an", "=", "batch_local_dist", "(", "local_feat", ",", "local_feat", "[", "n_inds", ".", "long", "(", ")", "]", ")", "\n", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", ",", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.BarlowTwins_loss.__init__": [[478, 482], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "BarlowTwins_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.BarlowTwins_loss.forward": [[485, 508], ["pdb.set_trace", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "inputs.size", "c_metrix.div_", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "off_diagonal().pow_().sum", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "off_diagonal().pow_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "loss.off_diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.off_diagonal"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n", "# normalization layer for the representations z1 and z2", "\n", "# z1 = nn.BatchNorm1d(input1)", "\n", "# z2 = nn.BatchNorm1d(input2)", "\n", "\n", "# inputs = torch.tensor([item.cpu().detach().numpy() for item in inputs]).cuda()", "\n", "\n", "feat_V", ",", "feat_T", "=", "torch", ".", "chunk", "(", "inputs", ",", "2", ",", "dim", "=", "0", ")", "\n", "c_metrix", "=", "feat_V", ".", "T", "@", "feat_T", "# empirical cross-correlation matrix", "\n", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "c_metrix", ".", "div_", "(", "n", ")", "# sum the cross-correlation matrix between all gpus", "\n", "\n", "on_diag", "=", "torch", ".", "diagonal", "(", "c_metrix", ")", ".", "add_", "(", "-", "1", ")", ".", "pow_", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "off_diag", "=", "off_diagonal", "(", "c_metrix", ")", ".", "pow_", "(", "2", ")", ".", "sum", "(", ")", "\n", "# off_diag \u6bd4\u4f8b\u4ece0.00051\u9012\u589e\u52300.051(10\u500d\u6570\u9012\u589e)\u6548\u679c\u9010\u6e10\u589e\u52a0\u3002", "\n", "loss", "=", "(", "on_diag", "+", "0.051", "*", "off_diag", ")", "/", "2048", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.BarlowTwins_loss_mem.__init__": [[522, 525], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "BarlowTwins_loss_mem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "#self.ranking_loss = nn.MarginRankingLoss(margin=margin)", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.BarlowTwins_loss_mem.forward": [[529, 553], ["inputs.permute", "inputs.size", "c.permute.permute.permute", "c.permute.permute.div_", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "torch.diagonal().add_().pow_().sum", "c.permute.permute.pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().pow_().sum", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "torch.diagonal().add_().pow_", "c.permute.permute.pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().pow_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal().add_", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "# normalization layer for the representations z1 and z2", "\n", "# z1 = nn.BatchNorm1d(input1)", "\n", "# z2 = nn.BatchNorm1d(input2)", "\n", "#feat_V, feat_T = torch.chunk(inputs, 2, dim=0)", "\n", "\n", "        ", "b", "=", "inputs", ".", "permute", "(", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "c", "=", "b", "@", "inputs", "# empirical cross-correlation matrix", "\n", "c", "=", "c", ".", "permute", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "\n", "\n", "\n", "c", ".", "div_", "(", "n", ")", "# sum the cross-correlation matrix between all gpus", "\n", "\n", "on_diag", "=", "torch", ".", "diagonal", "(", "c", ")", ".", "add_", "(", "-", "1", ")", ".", "pow_", "(", "2", ")", ".", "sum", "(", ")", "\n", "#off_diag = off_diagonal(c).pow_(2).sum()", "\n", "off_diag", "=", "c", ".", "pow_", "(", "2", ")", ".", "sum", "(", ")", "-", "torch", ".", "diagonal", "(", "c", ")", ".", "pow_", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "# off_diag \u6bd4\u4f8b\u4ece0.00051\u9012\u589e\u52300.051(10\u500d\u6570\u9012\u589e)\u6548\u679c\u9010\u6e10\u589e\u52a0\u3002", "\n", "loss", "=", "(", "on_diag", "+", "0.051", "*", "off_diag", ")", "/", "200", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.softmax_weights": [[149, 155], ["torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "", "def", "softmax_weights", "(", "dist", ",", "mask", ")", ":", "\n", "    ", "max_v", "=", "torch", ".", "max", "(", "dist", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "diff", "=", "dist", "-", "max_v", "\n", "Z", "=", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "diff", ")", "*", "mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-6", "# avoid division by zero", "\n", "W", "=", "torch", ".", "exp", "(", "diff", ")", "*", "mask", "/", "Z", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize": [[156, 165], ["torch.norm().expand_as", "torch.norm().expand_as", "torch.norm().expand_as", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Normalizing to unit length along the specified dimension.\n    Args:\n      x: pytorch Variable\n    Returns:\n      x: pytorch Variable, same shape as input\n    \"\"\"", "\n", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.pdist_torch": [[201, 214], ["torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "dist_mtx.clamp().sqrt.addmm_", "dist_mtx.clamp().sqrt.clamp().sqrt", "emb2.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist_mtx.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "", "def", "pdist_torch", "(", "emb1", ",", "emb2", ")", ":", "\n", "    ", "'''\n    compute the eucilidean distance matrix between embeddings1 and embeddings2\n    using gpu\n    '''", "\n", "m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n", "emb1_pow", "=", "torch", ".", "pow", "(", "emb1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "emb2_pow", "=", "torch", ".", "pow", "(", "emb2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_mtx", "=", "emb1_pow", "+", "emb2_pow", "\n", "dist_mtx", "=", "dist_mtx", ".", "addmm_", "(", "1", ",", "-", "2", ",", "emb1", ",", "emb2", ".", "t", "(", ")", ")", "\n", "# dist_mtx = dist_mtx.clamp(min = 1e-12)", "\n", "dist_mtx", "=", "dist_mtx", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "return", "dist_mtx", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.pdist_np": [[216, 227], ["numpy.square().sum", "numpy.square().sum", "numpy.square", "numpy.square", "numpy.matmul"], "function", ["None"], ["", "def", "pdist_np", "(", "emb1", ",", "emb2", ")", ":", "\n", "    ", "'''\n    compute the eucilidean distance matrix between embeddings1 and embeddings2\n    using cpu\n    '''", "\n", "m", ",", "n", "=", "emb1", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "0", "]", "\n", "emb1_pow", "=", "np", ".", "square", "(", "emb1", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "emb2_pow", "=", "np", ".", "square", "(", "emb2", ")", ".", "sum", "(", "axis", "=", "1", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "dist_mtx", "=", "-", "2", "*", "np", ".", "matmul", "(", "emb1", ",", "emb2", ".", "T", ")", "+", "emb1_pow", "+", "emb2_pow", "\n", "# dist_mtx = np.sqrt(dist_mtx.clip(min = 1e-12))", "\n", "return", "dist_mtx", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.batch_local_dist": [[306, 325], ["loss.batch_euclidean_dist", "loss.shortest_dist", "len", "len", "x.size", "y.size", "x.size", "y.size", "batch_euclidean_dist.permute", "x.size", "y.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.batch_euclidean_dist", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.shortest_dist"], ["", "", "def", "batch_local_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [N, m, d]\n      y: pytorch Variable, with shape [N, n, d]\n    Returns:\n      dist: pytorch Variable, with shape [N]\n    \"\"\"", "\n", "assert", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "len", "(", "y", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "x", ".", "size", "(", "0", ")", "==", "y", ".", "size", "(", "0", ")", "\n", "assert", "x", ".", "size", "(", "-", "1", ")", "==", "y", ".", "size", "(", "-", "1", ")", "\n", "\n", "# shape [N, m, n]", "\n", "dist_mat", "=", "batch_euclidean_dist", "(", "x", ",", "y", ")", "\n", "dist_mat", "=", "(", "torch", ".", "exp", "(", "dist_mat", ")", "-", "1.", ")", "/", "(", "torch", ".", "exp", "(", "dist_mat", ")", "+", "1.", ")", "\n", "# shape [N]", "\n", "dist", "=", "shortest_dist", "(", "dist_mat", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.batch_euclidean_dist": [[326, 349], ["x.size", "y.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().permute", "torch.pow().sum().expand().permute", "torch.pow().sum().expand().permute", "dist.clamp().sqrt.baddbmm_", "dist.clamp().sqrt.clamp().sqrt", "len", "len", "x.size", "y.size", "x.size", "y.size", "y.permute", "x.size", "y.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "batch_euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      x: pytorch Variable, with shape [N, m, d]\n      y: pytorch Variable, with shape [N, n, d]\n    Returns:\n      dist: pytorch Variable, with shape [N, m, n]\n    \"\"\"", "\n", "assert", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "len", "(", "y", ".", "size", "(", ")", ")", "==", "3", "\n", "assert", "x", ".", "size", "(", "0", ")", "==", "y", ".", "size", "(", "0", ")", "\n", "assert", "x", ".", "size", "(", "-", "1", ")", "==", "y", ".", "size", "(", "-", "1", ")", "\n", "\n", "N", ",", "m", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "N", ",", "n", ",", "d", "=", "y", ".", "size", "(", ")", "\n", "\n", "# shape [N, m, n]", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "N", ",", "m", ",", "n", ")", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "N", ",", "n", ",", "m", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "baddbmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.local_dist": [[367, 387], ["x.contiguous().view.size", "y.contiguous().view.size", "x.contiguous().view.contiguous().view", "y.contiguous().view.contiguous().view", "euclidean_dist", "shortest_dist.contiguous().view().permute", "loss.shortest_dist", "x.contiguous().view.contiguous", "y.contiguous().view.contiguous", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "shortest_dist.contiguous().view", "shortest_dist.contiguous"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.shortest_dist"], ["", "", "def", "local_dist", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    x: pytorch Variable, with shape [M, m, d]\n    y: pytorch Variable, with shape [N, n, d]\n  Returns:\n    dist: pytorch Variable, with shape [M, N]\n  \"\"\"", "\n", "M", ",", "m", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "N", ",", "n", ",", "d", "=", "y", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "M", "*", "m", ",", "d", ")", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "N", "*", "n", ",", "d", ")", "\n", "# shape [M * m, N * n]", "\n", "dist_mat", "=", "euclidean_dist", "(", "x", ",", "y", ")", "\n", "dist_mat", "=", "(", "torch", ".", "exp", "(", "dist_mat", ")", "-", "1.", ")", "/", "(", "torch", ".", "exp", "(", "dist_mat", ")", "+", "1.", ")", "\n", "# shape [M * m, N * n] -> [M, m, N, n] -> [m, n, M, N]", "\n", "dist_mat", "=", "dist_mat", ".", "contiguous", "(", ")", ".", "view", "(", "M", ",", "m", ",", "N", ",", "n", ")", ".", "permute", "(", "1", ",", "3", ",", "0", ",", "2", ")", "\n", "# shape [M, N]", "\n", "dist_mat", "=", "shortest_dist", "(", "dist_mat", ")", "\n", "return", "dist_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.shortest_dist": [[388, 416], ["range", "dist_mat.size", "range", "range", "range", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "def", "shortest_dist", "(", "dist_mat", ")", ":", "\n", "  ", "\"\"\"Parallel version.\n  Args:\n    dist_mat: pytorch Variable, available shape:\n      1) [m, n]\n      2) [m, n, N], N is batch size\n      3) [m, n, *], * can be arbitrary additional dimensions\n  Returns:\n    dist: three cases corresponding to `dist_mat`:\n      1) scalar\n      2) pytorch Variable, with shape [N]\n      3) pytorch Variable, with shape [*]\n  \"\"\"", "\n", "m", ",", "n", "=", "dist_mat", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "# Just offering some reference for accessing intermediate distance.", "\n", "dist", "=", "[", "[", "0", "for", "_", "in", "range", "(", "n", ")", "]", "for", "_", "in", "range", "(", "m", ")", "]", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "      ", "if", "(", "i", "==", "0", ")", "and", "(", "j", "==", "0", ")", ":", "\n", "        ", "dist", "[", "i", "]", "[", "j", "]", "=", "dist_mat", "[", "i", ",", "j", "]", "\n", "", "elif", "(", "i", "==", "0", ")", "and", "(", "j", ">", "0", ")", ":", "\n", "        ", "dist", "[", "i", "]", "[", "j", "]", "=", "dist", "[", "i", "]", "[", "j", "-", "1", "]", "+", "dist_mat", "[", "i", ",", "j", "]", "\n", "", "elif", "(", "i", ">", "0", ")", "and", "(", "j", "==", "0", ")", ":", "\n", "        ", "dist", "[", "i", "]", "[", "j", "]", "=", "dist", "[", "i", "-", "1", "]", "[", "j", "]", "+", "dist_mat", "[", "i", ",", "j", "]", "\n", "", "else", ":", "\n", "        ", "dist", "[", "i", "]", "[", "j", "]", "=", "torch", ".", "min", "(", "dist", "[", "i", "-", "1", "]", "[", "j", "]", ",", "dist", "[", "i", "]", "[", "j", "-", "1", "]", ")", "+", "dist_mat", "[", "i", ",", "j", "]", "\n", "", "", "", "dist", "=", "dist", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.hard_example_mining": [[417, 470], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "dist_ap.squeeze.squeeze", "dist_an.squeeze.squeeze", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "p_inds.squeeze.squeeze", "n_inds.squeeze.squeeze", "dist_mat.size", "labels.expand", "labels.expand", "ind[].contiguous().view", "ind[].contiguous().view", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous", "labels.new().resize_as_().copy_().unsqueeze", "ind[].contiguous", "ind[].contiguous", "labels.new().resize_as_().copy_", "torch.arange().long", "torch.arange().long", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "torch.arange", "torch.arange", "labels.new"], "function", ["None"], ["", "def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", ":", "\n", "  ", "\"\"\"For each anchor, find the hardest positive and negative sample.\n  Args:\n    dist_mat: pytorch Variable, pair wise distance between samples, shape [N, N]\n    labels: pytorch LongTensor, with shape [N]\n    return_inds: whether to return the indices. Save time if `False`(?)\n  Returns:\n    dist_ap: pytorch Variable, distance(anchor, positive); shape [N]\n    dist_an: pytorch Variable, distance(anchor, negative); shape [N]\n    p_inds: pytorch LongTensor, with shape [N];\n      indices of selected hard positive samples; 0 <= p_inds[i] <= N - 1\n    n_inds: pytorch LongTensor, with shape [N];\n      indices of selected hard negative samples; 0 <= n_inds[i] <= N - 1\n  NOTE: Only consider the case in which all labels have same num of samples,\n    thus we can cope with all anchors in parallel.\n  \"\"\"", "\n", "\n", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# shape [N, N]", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# `dist_an` means distance(anchor, negative)", "\n", "# both `dist_an` and `relative_n_inds` with shape [N, 1]", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# shape [N]", "\n", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_inds", ":", "\n", "# shape [N, N]", "\n", "    ", "ind", "=", "(", "labels", ".", "new", "(", ")", ".", "resize_as_", "(", "labels", ")", "\n", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", ")", "\n", "# shape [N, 1]", "\n", "p_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_p_inds", ".", "data", ")", "\n", "n_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_n_inds", ".", "data", ")", "\n", "# shape [N]", "\n", "p_inds", "=", "p_inds", ".", "squeeze", "(", "1", ")", "\n", "n_inds", "=", "n_inds", ".", "squeeze", "(", "1", ")", "\n", "return", "dist_ap", ",", "dist_an", ",", "p_inds", ",", "n_inds", "\n", "\n", "", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.off_diagonal": [[509, 514], ["[].flatten", "[].view", "x.flatten"], "function", ["None"], ["", "", "def", "off_diagonal", "(", "x", ")", ":", "\n", "# return a flattened view of the off-diagonal elements of a square matrix", "\n", "    ", "n", ",", "m", ",", "d", "=", "x", ".", "shape", "\n", "assert", "n", "==", "m", "\n", "return", "x", ".", "flatten", "(", ")", "[", ":", "-", "1", "]", ".", "view", "(", "n", "-", "1", ",", "n", "+", "1", ")", "[", ":", ",", "1", ":", "]", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.BasicBlock.__init__": [[27, 36], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.conv3x3", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.BasicBlock.forward": [[37, 54], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "# original padding is 1; original dilation is 1", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.Bottleneck.forward": [[72, 93], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet.__init__": [[97, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "last_conv_stride", "=", "2", ",", "last_conv_dilation", "=", "1", ")", ":", "\n", "\n", "    ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "last_conv_stride", ",", "dilation", "=", "last_conv_dilation", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet._make_layer": [[119, 135], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.ResNet.forward": [[136, 148], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.conv3x3": [[17, 22], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "# original padding is 1; original dilation is 1", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc": [[150, 157], ["list", "state_dict.items", "key.startswith"], "function", ["None"], ["", "", "def", "remove_fc", "(", "state_dict", ")", ":", "\n", "  ", "\"\"\"Remove the fc layer parameters from state_dict.\"\"\"", "\n", "# for key, value in state_dict.items():", "\n", "for", "key", ",", "value", "in", "list", "(", "state_dict", ".", "items", "(", ")", ")", ":", "\n", "    ", "if", "key", ".", "startswith", "(", "'fc.'", ")", ":", "\n", "      ", "del", "state_dict", "[", "key", "]", "\n", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet18": [[159, 168], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-18 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet34": [[170, 179], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-34 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50": [[181, 191], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-50 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "# model.load_state_dict(remove_fc(model_zoo.load_url(model_urls['resnet50'])))", "\n", "    ", "model", ".", "load_state_dict", "(", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet101": [[193, 203], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-101 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet152": [[205, 215], ["resnet.ResNet", "ResNet.load_state_dict", "resnet.remove_fc", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.remove_fc"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-152 model.\n  Args:\n      pretrained (bool): If True, returns a model pre-trained on ImageNet\n  \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "remove_fc", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.pre_process_sysu.read_imgs": [[50, 66], ["PIL.Image.open", "img.resize.resize", "numpy.array", "train_img.append", "int", "train_label.append", "numpy.array", "numpy.array"], "function", ["None"], ["def", "read_imgs", "(", "train_image", ")", ":", "\n", "    ", "train_img", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "for", "img_path", "in", "train_image", ":", "\n", "# img", "\n", "        ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "fix_image_width", ",", "fix_image_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "pix_array", "=", "np", ".", "array", "(", "img", ")", "\n", "\n", "train_img", ".", "append", "(", "pix_array", ")", "\n", "\n", "# label", "\n", "pid", "=", "int", "(", "img_path", "[", "-", "13", ":", "-", "9", "]", ")", "\n", "pid", "=", "pid2label", "[", "pid", "]", "\n", "train_label", ".", "append", "(", "pid", ")", "\n", "", "return", "np", ".", "array", "(", "train_img", ")", ",", "np", ".", "array", "(", "train_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.adjust_learning_rate": [[262, 278], ["range", "len"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "if", "epoch", "<", "10", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "(", "epoch", "+", "1", ")", "/", "10", "\n", "", "elif", "epoch", ">=", "10", "and", "epoch", "<", "20", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "", "elif", "epoch", ">=", "20", "and", "epoch", "<", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "elif", "epoch", ">=", "50", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.1", "*", "lr", "\n", "for", "i", "in", "range", "(", "len", "(", "optimizer", ".", "param_groups", ")", "-", "1", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "i", "+", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.train": [[280, 360], ["train_SGMRA.adjust_learning_rate", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "net.train", "time.time", "enumerate", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "torch.autograd.Variable.size", "utils.AverageMeter.update", "time.time", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "net", "criterion_id", "criterion_tri", "range", "criterion_tri", "criterion_tri", "criterion_id", "net", "criterion_id", "criterion_tri", "out0.max", "loss.item", "criterion_id.item", "print", "time.time", "torch.autograd.Variable.long", "criterion_id", "torch.autograd.Variable.long", "torch.autograd.Variable.long", "predicted.eq().sum().item", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "time.time", "len", "torch.autograd.Variable.long", "criterion_tri", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.adjust_learning_rate", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.train", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "\n", "    ", "current_lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "id_loss", "=", "AverageMeter", "(", ")", "\n", "tri_loss", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "# switch to train mode", "\n", "net", ".", "train", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "input1", ",", "input2", ",", "label1", ",", "label2", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "labels", "=", "torch", ".", "cat", "(", "(", "label1", ",", "label2", ")", ",", "0", ")", "\n", "\n", "input1", "=", "Variable", "(", "input1", ".", "cuda", "(", ")", ")", "\n", "input2", "=", "Variable", "(", "input2", ".", "cuda", "(", ")", ")", "\n", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "            ", "feat", ",", "out0", ",", "feat_all", ",", "feat_mem", ",", "out_mem", "=", "net", "(", "input1", ",", "input2", ")", "\n", "loss_id", "=", "criterion_id", "(", "out0", "[", "0", "]", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_tri_l", ",", "batch_acc", "=", "criterion_tri", "(", "feat", "[", "0", "]", ",", "labels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feat", ")", "-", "1", ")", ":", "\n", "                ", "loss_id", "+=", "criterion_id", "(", "out0", "[", "i", "+", "1", "]", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_tri_l", "+=", "criterion_tri", "(", "feat", "[", "i", "+", "1", "]", ",", "labels", ")", "[", "0", "]", "\n", "", "loss_tri", ",", "batch_acc", "=", "criterion_tri", "(", "feat_all", ",", "labels", ")", "\n", "loss_tri", "+=", "loss_tri_l", "*", "args", ".", "w_center", "# ", "\n", "correct", "+=", "batch_acc", "\n", "### for mem branch", "\n", "loss_tri_mem", ",", "batch_acc", "=", "criterion_tri", "(", "feat_mem", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss_id_mem", "=", "criterion_id", "(", "out_mem", ",", "labels", ".", "long", "(", ")", ")", "\n", "loss", "=", "loss_id", "+", "loss_tri", "+", "loss_id_mem", "*", "0.1", "+", "loss_tri_mem", "\n", "", "else", ":", "\n", "            ", "feat", ",", "out0", "=", "net", "(", "input1", ",", "input2", ")", "\n", "loss_id", "=", "criterion_id", "(", "out0", ",", "labels", ")", "\n", "\n", "loss_tri", ",", "batch_acc", "=", "criterion_tri", "(", "feat", ",", "labels", ")", "\n", "correct", "+=", "(", "batch_acc", "/", "2", ")", "\n", "_", ",", "predicted", "=", "out0", ".", "max", "(", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "2", ")", "\n", "loss", "=", "loss_id", "+", "loss_tri", "*", "args", ".", "w_center", "# ", "\n", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# update P", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "id_loss", ".", "update", "(", "loss_id", ".", "item", "(", ")", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "tri_loss", ".", "update", "(", "loss_tri", ",", "2", "*", "input1", ".", "size", "(", "0", ")", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{}][{}/{}] '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f}) '", "\n", "'lr:{:.3f} '", "\n", "'Loss: {train_loss.val:.4f} ({train_loss.avg:.4f}) '", "\n", "'iLoss: {id_loss.val:.4f} ({id_loss.avg:.4f}) '", "\n", "'TLoss: {tri_loss.val:.4f} ({tri_loss.avg:.4f}) '", "\n", "'Accu: {:.2f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", ",", "len", "(", "trainloader", ")", ",", "current_lr", ",", "\n", "100.", "*", "correct", "/", "total", ",", "batch_time", "=", "batch_time", ",", "\n", "train_loss", "=", "train_loss", ",", "id_loss", "=", "id_loss", ",", "tri_loss", "=", "tri_loss", ")", ")", "\n", "\n", "", "", "writer", ".", "add_scalar", "(", "'total_loss'", ",", "train_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'id_loss'", ",", "id_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'tri_loss'", ",", "tri_loss", ".", "avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'lr'", ",", "current_lr", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.train_SGMRA.test": [[362, 444], ["net.eval", "print", "time.time", "numpy.zeros", "numpy.zeros", "print", "net.eval", "print", "time.time", "numpy.zeros", "numpy.zeros", "print", "time.time", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "re_rank.random_walk", "eval_metrics.eval_regdb", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.autograd.Variable.size", "torch.autograd.Variable", "torch.autograd.Variable.size", "torch.autograd.Variable", "re_rank.random_walk", "re_rank.k_reciprocal", "eval_metrics.eval_regdb", "eval_metrics.eval_sysu", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "time.time", "torch.autograd.Variable.cuda", "net", "net.detach().cpu().numpy", "net", "net.detach().cpu().numpy", "feat_att.detach().cpu().numpy", "time.time", "re_rank.k_reciprocal", "eval_metrics.eval_sysu", "time.time", "numpy.matmul", "net.detach().cpu", "net.detach().cpu", "feat_att.detach().cpu", "net.detach().cpu", "net.detach().cpu", "feat_att.detach().cpu", "numpy.transpose", "numpy.matmul", "numpy.transpose", "net.detach", "net.detach", "feat_att.detach", "net.detach", "net.detach", "feat_att.detach"], "function", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.random_walk", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.random_walk", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.k_reciprocal", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_regdb", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.k_reciprocal", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.eval_metrics.eval_sysu"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "# switch to evaluation mode", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Gallery Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "        ", "feat_dim", "=", "args", ".", "num_strips", "*", "args", ".", "local_feat_dim", "\n", "", "else", ":", "\n", "        ", "feat_dim", "=", "2048", "\n", "", "gall_feat", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feat_dim", ")", ")", "\n", "gall_feat_att", "=", "np", ".", "zeros", "(", "(", "ngall", ",", "feat_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "gall_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "0", "]", ")", "\n", "gall_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gall_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "# switch to evaluation", "\n", "net", ".", "eval", "(", ")", "\n", "print", "(", "'Extracting Query Feature...'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "ptr", "=", "0", "\n", "\n", "query_feat", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feat_dim", ")", ")", "\n", "query_feat_att", "=", "np", ".", "zeros", "(", "(", "nquery", ",", "feat_dim", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "label", ")", "in", "enumerate", "(", "query_loader", ")", ":", "\n", "            ", "batch_num", "=", "input", ".", "size", "(", "0", ")", "\n", "input", "=", "Variable", "(", "input", ".", "cuda", "(", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'on'", ":", "\n", "                ", "feat", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "feat", ",", "feat_att", "=", "net", "(", "input", ",", "input", ",", "test_mode", "[", "1", "]", ")", "\n", "query_feat", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_feat_att", "[", "ptr", ":", "ptr", "+", "batch_num", ",", ":", "]", "=", "feat_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "ptr", "=", "ptr", "+", "batch_num", "\n", "", "", "print", "(", "'Extracting Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "\n", "if", "args", ".", "re_rank", "==", "'random_walk'", ":", "\n", "        ", "distmat", "=", "random_walk", "(", "query_feat", ",", "gall_feat", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "random_walk", "(", "query_feat_att", ",", "gall_feat_att", ")", "\n", "", "elif", "args", ".", "re_rank", "==", "'k_reciprocal'", ":", "\n", "        ", "distmat", "=", "k_reciprocal", "(", "query_feat", ",", "gall_feat", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "k_reciprocal", "(", "query_feat_att", ",", "gall_feat_att", ")", "\n", "", "elif", "args", ".", "re_rank", "==", "'no'", ":", "\n", "# compute the similarity", "\n", "        ", "distmat", "=", "-", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "distmat_att", "=", "-", "np", ".", "matmul", "(", "query_feat_att", ",", "np", ".", "transpose", "(", "gall_feat_att", ")", ")", "\n", "\n", "# evaluation", "\n", "", "if", "dataset", "==", "'regdb'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_regdb", "(", "distmat", ",", "query_label", ",", "gall_label", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_regdb", "(", "distmat_att", ",", "query_label", ",", "gall_label", ")", "\n", "", "elif", "dataset", "==", "'sysu'", ":", "\n", "        ", "cmc", ",", "mAP", ",", "mINP", "=", "eval_sysu", "(", "distmat", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "cmc_att", ",", "mAP_att", ",", "mINP_att", "=", "eval_sysu", "(", "distmat_att", ",", "query_label", ",", "gall_label", ",", "query_cam", ",", "gall_cam", ")", "\n", "", "print", "(", "'Evaluation Time:\\t {:.3f}'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'rank1'", ",", "cmc", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP'", ",", "mAP", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP'", ",", "mINP", ",", "epoch", ")", "\n", "if", "args", ".", "pcb", "==", "'off'", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'rank1_att'", ",", "cmc_att", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mAP_att'", ",", "mAP_att", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'mINP_att'", ",", "mINP_att", ",", "epoch", ")", "\n", "\n", "return", "cmc", ",", "mAP", ",", "mINP", ",", "cmc_att", ",", "mAP_att", ",", "mINP_att", "\n", "", "else", ":", "\n", "        ", "return", "cmc", ",", "mAP", ",", "mINP", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.k_reciprocal": [[7, 85], ["numpy.append", "feat.astype.astype", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "numpy.zeros", "scipy.spatial.distance.cdist().astype", "numpy.power().astype", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "numpy.power().astype", "numpy.power().astype", "scipy.spatial.distance.cdist", "numpy.power", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.shape", "numpy.intersect1d", "len", "numpy.power", "numpy.power", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist", "int", "int", "numpy.around", "numpy.around"], "function", ["None"], ["def", "k_reciprocal", "(", "probFea", ",", "galFea", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ",", "MemorySave", "=", "False", ",", "Minibatch", "=", "2000", ")", ":", "\n", "\n", "    ", "query_num", "=", "probFea", ".", "shape", "[", "0", "]", "\n", "all_num", "=", "query_num", "+", "galFea", ".", "shape", "[", "0", "]", "\n", "feat", "=", "np", ".", "append", "(", "probFea", ",", "galFea", ",", "axis", "=", "0", ")", "\n", "feat", "=", "feat", ".", "astype", "(", "np", ".", "float16", ")", "\n", "#print('computing original distance')", "\n", "if", "MemorySave", ":", "\n", "        ", "original_dist", "=", "np", ".", "zeros", "(", "shape", "=", "[", "all_num", ",", "all_num", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "            ", "it", "=", "i", "+", "Minibatch", "\n", "if", "it", "<", "np", ".", "shape", "(", "feat", ")", "[", "0", "]", ":", "\n", "                ", "original_dist", "[", "i", ":", "it", ",", "]", "=", "np", ".", "power", "(", "cdist", "(", "feat", "[", "i", ":", "it", ",", "]", ",", "feat", ")", ",", "2", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "", "else", ":", "\n", "                ", "original_dist", "[", "i", ":", ",", ":", "]", "=", "np", ".", "power", "(", "cdist", "(", "feat", "[", "i", ":", ",", "]", ",", "feat", ")", ",", "2", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "break", "\n", "", "i", "=", "it", "\n", "", "", "else", ":", "\n", "        ", "original_dist", "=", "cdist", "(", "feat", ",", "feat", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "original_dist", "=", "np", ".", "power", "(", "original_dist", ",", "2", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "", "del", "feat", "\n", "gallery_num", "=", "original_dist", ".", "shape", "[", "0", "]", "\n", "original_dist", "=", "np", ".", "transpose", "(", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "\n", "#print('starting re_ranking')", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "candidate_forward_k_neigh_index", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "candidate_backward_k_neigh_index", "==", "candidate", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "fi_candidate", "]", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2", "/", "3", "*", "len", "(", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.re_rank.random_walk": [[88, 101], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.eye", "torch.eye", "torch.eye", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "numpy.matmul", "numpy.matmul", "torch.from_numpy.size", "torch.from_numpy.diag().diag", "torch.inverse", "torch.inverse", "torch.inverse", "F.softmax.t", "torch.matmul.numpy", "numpy.transpose", "numpy.transpose", "torch.from_numpy.diag"], "function", ["None"], ["", "def", "random_walk", "(", "query_feat", ",", "gall_feat", ",", "alpha", "=", "0.95", ")", ":", "\n", "    ", "pg_sim", "=", "torch", ".", "from_numpy", "(", "np", ".", "matmul", "(", "query_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", ")", "\n", "gg_sim", "=", "torch", ".", "from_numpy", "(", "np", ".", "matmul", "(", "gall_feat", ",", "np", ".", "transpose", "(", "gall_feat", ")", ")", ")", "\n", "\n", "one_diag", "=", "torch", ".", "eye", "(", "gg_sim", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "# row normalization", "\n", "zeros_diag", "=", "gg_sim", "-", "gg_sim", ".", "diag", "(", ")", ".", "diag", "(", ")", "\n", "A", "=", "F", ".", "softmax", "(", "zeros_diag", ",", "dim", "=", "1", ")", "\n", "\n", "A", "=", "(", "1", "-", "alpha", ")", "*", "torch", ".", "inverse", "(", "one_diag", "-", "alpha", "*", "A", ")", "\n", "pg_sim", "=", "torch", ".", "matmul", "(", "pg_sim", ",", "A", ".", "t", "(", ")", ")", "\n", "\n", "return", "-", "pg_sim", ".", "numpy", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.Normalize.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.Normalize.forward": [[14, 18], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.Non_local.__init__": [[20, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduc_ratio", "=", "2", ")", ":", "\n", "        ", "super", "(", "Non_local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "reduc_ratio", "//", "reduc_ratio", "\n", "\n", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0.0", ")", "\n", "\n", "\n", "\n", "self", ".", "theta", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.Non_local.forward": [[47, 72], ["x.size", "model_SGMRA.Non_local.g().view", "g_x.permute.permute.permute", "model_SGMRA.Non_local.theta().view", "theta_x.permute.permute.permute", "model_SGMRA.Non_local.phi().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.size", "torch.matmul.size", "torch.matmul.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "model_SGMRA.Non_local.W", "model_SGMRA.Non_local.g", "model_SGMRA.Non_local.theta", "model_SGMRA.Non_local.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n                :param x: (b, c, t, h, w)\n                :return:\n                '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "# f_div_C = torch.nn.functional.softmax(f, dim=-1)", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.visible_module.__init__": [[97, 116], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "visible_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_v", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "visible", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "visible", ".", "conv1", "=", "model_v", ".", "conv1", "\n", "self", ".", "visible", ".", "bn1", "=", "model_v", ".", "bn1", "\n", "self", ".", "visible", ".", "relu", "=", "model_v", ".", "relu", "\n", "self", ".", "visible", ".", "maxpool", "=", "model_v", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_v", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.visible_module.forward": [[117, 130], ["model_SGMRA.visible_module.visible.conv1", "model_SGMRA.visible_module.visible.bn1", "model_SGMRA.visible_module.visible.relu", "model_SGMRA.visible_module.visible.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "visible", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "visible", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "visible", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.thermal_module.__init__": [[133, 152], ["torch.Module.__init__", "resnet.resnet50", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "thermal_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_t", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "self", ".", "share_net", "=", "share_net", "\n", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "self", ".", "thermal", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "thermal", ".", "conv1", "=", "model_t", ".", "conv1", "\n", "self", ".", "thermal", ".", "bn1", "=", "model_t", ".", "bn1", "\n", "self", ".", "thermal", ".", "relu", "=", "model_t", ".", "relu", "\n", "self", ".", "thermal", ".", "maxpool", "=", "model_t", ".", "maxpool", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_t", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.thermal_module.forward": [[153, 166], ["model_SGMRA.thermal_module.thermal.conv1", "model_SGMRA.thermal_module.thermal.bn1", "model_SGMRA.thermal_module.thermal.relu", "model_SGMRA.thermal_module.thermal.maxpool", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "thermal", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "thermal", ".", "maxpool", "(", "x", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "1", ":", "\n", "                ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "share_net", ")", ":", "\n", "                    ", "x", "=", "getattr", "(", "self", ".", "thermal", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.base_resnet.__init__": [[169, 187], ["torch.Module.__init__", "resnet.resnet50", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "setattr", "getattr", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ")", ":", "\n", "        ", "super", "(", "base_resnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_base", "=", "resnet50", "(", "pretrained", "=", "True", ",", "\n", "last_conv_stride", "=", "1", ",", "last_conv_dilation", "=", "1", ")", "\n", "# avg pooling to global pooling", "\n", "model_base", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "share_net", "=", "share_net", "\n", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "self", ".", "base", "=", "model_base", "\n", "", "else", ":", "\n", "            ", "self", ".", "base", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "self", ".", "share_net", ">", "4", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                    ", "setattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ",", "getattr", "(", "model_base", ",", "'layer'", "+", "str", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.base_resnet.forward": [[188, 206], ["model_SGMRA.base_resnet.base.conv1", "model_SGMRA.base_resnet.base.bn1", "model_SGMRA.base_resnet.base.relu", "model_SGMRA.base_resnet.base.maxpool", "model_SGMRA.base_resnet.base.layer1", "model_SGMRA.base_resnet.base.layer2", "model_SGMRA.base_resnet.base.layer3", "model_SGMRA.base_resnet.base.layer4", "range", "getattr", "str"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "share_net", "==", "0", ":", "\n", "            ", "x", "=", "self", ".", "base", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "base", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "base", ".", "layer4", "(", "x", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "share_net", ">", "4", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "share_net", ",", "5", ")", ":", "\n", "                ", "x", "=", "getattr", "(", "self", ".", "base", ",", "'layer'", "+", "str", "(", "i", ")", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.embed_net.__init__": [[210, 267], ["torch.Module.__init__", "model_SGMRA.thermal_module", "model_SGMRA.visible_module", "model_SGMRA.base_resnet", "model_SGMRA.Normalize", "memory_SGMRA.MemModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "model_SGMRA.embed_net.classifier.apply", "model_SGMRA.embed_net.bottleneck.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model_SGMRA.embed_net.bottleneck.bias.requires_grad_", "torch.Linear", "torch.Linear", "torch.Linear", "model_SGMRA.embed_net.bottleneck.apply", "model_SGMRA.embed_net.classifier.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.apply", "model_SGMRA.embed_net.local_conv_list.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "model_SGMRA.embed_net.fc_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "no_local", "=", "'off'", ",", "gm_pool", "=", "'on'", ",", "arch", "=", "'resnet50'", ",", "share_net", "=", "1", ",", "pcb", "=", "'on'", ",", "local_feat_dim", "=", "256", ",", "num_strips", "=", "6", ")", ":", "\n", "        ", "super", "(", "embed_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "thermal_module", "=", "thermal_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "visible_module", "=", "visible_module", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "self", ".", "base_resnet", "=", "base_resnet", "(", "arch", "=", "arch", ",", "share_net", "=", "share_net", ")", "\n", "\n", "self", ".", "non_local", "=", "no_local", "\n", "self", ".", "pcb", "=", "pcb", "\n", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "\n", "\n", "", "pool_dim", "=", "2048", "\n", "self", ".", "l2norm", "=", "Normalize", "(", "2", ")", "\n", "self", ".", "gm_pool", "=", "gm_pool", "\n", "\n", "##memory module ", "\n", "self", ".", "mem_rep", "=", "MemModule", "(", "ptt_num", "=", "5", ",", "num_cls", "=", "206", ",", "part_num", "=", "6", ",", "fea_dim", "=", "pool_dim", ",", "shrink_thres", "=", "0.0025", ")", "\n", "self", ".", "pool_mem", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "self", ".", "num_stripes", "=", "num_strips", "\n", "local_conv_out_channels", "=", "local_feat_dim", "\n", "\n", "self", ".", "local_conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "conv", "=", "nn", ".", "Conv2d", "(", "pool_dim", ",", "local_conv_out_channels", ",", "1", ")", "\n", "conv", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "local_conv_list", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "conv", ",", "\n", "nn", ".", "BatchNorm2d", "(", "local_conv_out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", ")", "\n", "\n", "", "self", ".", "fc_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "                ", "fc", "=", "nn", ".", "Linear", "(", "local_conv_out_channels", ",", "class_num", ")", "\n", "init", ".", "normal_", "(", "fc", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "self", ".", "fc_list", ".", "append", "(", "fc", ")", "\n", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "BatchNorm1d", "(", "pool_dim", ")", "\n", "self", ".", "bottleneck", ".", "bias", ".", "requires_grad_", "(", "False", ")", "# no shift", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "pool_dim", ",", "class_num", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bottleneck", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "self", ".", "classifier", ".", "apply", "(", "weights_init_classifier", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.embed_net.forward": [[271, 367], ["model_SGMRA.embed_net.visible_module", "model_SGMRA.embed_net.thermal_module", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_SGMRA.embed_net.base_resnet", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_SGMRA.embed_net.pool_mem().view", "model_SGMRA.embed_net.bottleneck", "model_SGMRA.embed_net.bottleneck", "model_SGMRA.embed_net.visible_module", "torch.max_pool2d.view", "local_feat_list.append", "local_feat_mem_list.append", "hasattr", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "model_SGMRA.embed_net.l2norm", "model_SGMRA.embed_net.view", "model_SGMRA.embed_net.avgpool", "x_pool.view.view.view", "model_SGMRA.embed_net.thermal_module", "model_SGMRA.embed_net.size", "model_SGMRA.embed_net.size", "model_SGMRA.embed_net.mem_rep", "torch.max_pool2d.view", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d.view", "torch.max_pool2d.size", "logits_list.append", "model_SGMRA.embed_net.pool_mem", "model_SGMRA.embed_net.classifier", "x_pool.view.view.size", "x_pool.view.view.size", "model_SGMRA.embed_net.classifier", "model_SGMRA.embed_net.l2norm", "model_SGMRA.embed_net.l2norm", "model_SGMRA.embed_net.size", "model_SGMRA.embed_net.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "model_SGMRA.embed_net.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "modal", "=", "0", ")", ":", "\n", "        ", "if", "modal", "==", "0", ":", "\n", "            ", "x1", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "x2", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "0", ")", "\n", "", "elif", "modal", "==", "1", ":", "\n", "            ", "x", "=", "self", ".", "visible_module", "(", "x1", ")", "\n", "", "elif", "modal", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "thermal_module", "(", "x2", ")", "\n", "\n", "# shared block", "\n", "", "if", "self", ".", "non_local", "==", "'on'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "base_resnet", "(", "x", ")", "\n", "\n", "## memory module ", "\n", "#x_mem, att_mem = self.mem_rep(x)", "\n", "#x_mem += x", "\n", "#x_mem_pool = self.pool_mem(x_mem).view(x_mem.size(0), x_mem.size(1))", "\n", "#x_mem_feat = self.bottleneck(x_mem_pool)", "\n", "\n", "\n", "", "if", "self", ".", "pcb", "==", "'on'", ":", "\n", "            ", "feat", "=", "x", "\n", "assert", "feat", ".", "size", "(", "2", ")", "%", "self", ".", "num_stripes", "==", "0", "\n", "stripe_h", "=", "int", "(", "feat", ".", "size", "(", "2", ")", "/", "self", ".", "num_stripes", ")", "\n", "local_feat_list", "=", "[", "]", "\n", "logits_list", "=", "[", "]", "\n", "local_feat_mem_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stripes", ")", ":", "\n", "# shape [N, C, 1, 1]", "\n", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "# gm pool", "\n", "                    ", "local_feat", "=", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", "\n", "local_feat_mem", ",", "_", "=", "self", ".", "mem_rep", "(", "local_feat", ")", "\n", "local_feat_mem", "=", "local_feat", "+", "local_feat_mem", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "local_feat", ".", "shape", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "10.0", "# regDB: 10.0    SYSU: 3.0", "\n", "local_feat", "=", "(", "torch", ".", "mean", "(", "local_feat", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "# average pool", "\n", "#local_feat = F.avg_pool2d(feat[:, :, i * stripe_h: (i + 1) * stripe_h, :],(stripe_h, feat.size(-1)))", "\n", "                    ", "local_feat", "=", "F", ".", "max_pool2d", "(", "feat", "[", ":", ",", ":", ",", "i", "*", "stripe_h", ":", "(", "i", "+", "1", ")", "*", "stripe_h", ",", ":", "]", ",", "(", "stripe_h", ",", "feat", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "\n", "\n", "# shape [N, c, 1, 1]", "\n", "", "local_feat", "=", "self", ".", "local_conv_list", "[", "i", "]", "(", "local_feat", ".", "view", "(", "feat", ".", "size", "(", "0", ")", ",", "feat", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "# shape [N, c]", "\n", "local_feat", "=", "local_feat", ".", "view", "(", "local_feat", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "local_feat_list", ".", "append", "(", "local_feat", ")", "\n", "local_feat_mem_list", ".", "append", "(", "local_feat_mem", ")", "\n", "\n", "\n", "if", "hasattr", "(", "self", ",", "'fc_list'", ")", ":", "\n", "                    ", "logits_list", ".", "append", "(", "self", ".", "fc_list", "[", "i", "]", "(", "local_feat", ")", ")", "\n", "\n", "\n", "\n", "", "", "feat_all", "=", "[", "lf", "for", "lf", "in", "local_feat_list", "]", "\n", "feat_all", "=", "torch", ".", "cat", "(", "feat_all", ",", "dim", "=", "1", ")", "\n", "\n", "feat_all_mem", "=", "[", "lf", "for", "lf", "in", "local_feat_mem_list", "]", "\n", "feat_all_mem", "=", "torch", ".", "cat", "(", "feat_all_mem", ",", "dim", "=", "2", ")", "\n", "\n", "lf_mem_pool", "=", "self", ".", "pool_mem", "(", "feat_all_mem", ")", ".", "view", "(", "feat_all_mem", ".", "size", "(", "0", ")", ",", "feat_all_mem", ".", "size", "(", "1", ")", ")", "\n", "lf_mem_feat", "=", "self", ".", "bottleneck", "(", "lf_mem_pool", ")", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "#return local_feat_list, logits_list, feat_all , x_mem_pool+ lf_mem_pool, self.classifier(x_mem_feat+lf_mem_feat)", "\n", "                ", "return", "local_feat_list", ",", "logits_list", ",", "feat_all", ",", "lf_mem_pool", ",", "self", ".", "classifier", "(", "lf_mem_feat", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "feat_all", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "gm_pool", "==", "'on'", ":", "\n", "                ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "p", "=", "3.0", "\n", "x_pool", "=", "(", "torch", ".", "mean", "(", "x", "**", "p", ",", "dim", "=", "-", "1", ")", "+", "1e-12", ")", "**", "(", "1", "/", "p", ")", "\n", "", "else", ":", "\n", "                ", "x_pool", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x_pool", ".", "size", "(", "0", ")", ",", "x_pool", ".", "size", "(", "1", ")", ")", "\n", "\n", "", "feat", "=", "self", ".", "bottleneck", "(", "x_pool", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "return", "x_pool", ",", "self", ".", "classifier", "(", "feat", ")", "#, scores", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "l2norm", "(", "x_pool", ")", ",", "self", ".", "l2norm", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.weights_init_kaiming": [[75, 86], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "torch.nn.init.zeros_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm1d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.01", ")", "\n", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.model_SGMRA.weights_init_classifier": [[87, 93], ["classname.find", "torch.nn.init.normal_", "torch.nn.init.zeros_"], "function", ["None"], ["", "", "def", "weights_init_classifier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0", ",", "0.001", ")", "\n", "if", "m", ".", "bias", ":", "\n", "            ", "init", ".", "zeros_", "(", "m", ".", "bias", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.__init__": [[13, 35], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.AdaptiveAvgPool1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "memory_MGMRA.MemoryUnit.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ")", ":", "\n", "        ", "super", "(", "MemoryUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''\n        the instance PTT is divided into cls_number x ptt_number per cls x part number per ptt\n        '''", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "part_num", "=", "part_num", "\n", "\n", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# M", "\n", "self", ".", "fea_dim", "=", "fea_dim", "# C", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", ")", ")", "# M x C", "\n", "#self.sem_weight = Parameter(torch.Tensor(self.num_cls, self.fea_dim)) # N x C", "\n", "self", ".", "bias", "=", "None", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "# self.hard_sparse_shrink_opt = nn.Hardshrink(lambd=shrink_thres)", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "reweight_layer_part", "=", "nn", ".", "Conv1d", "(", "self", ".", "part_num", ",", "self", ".", "part_num", ",", "1", ")", "\n", "self", ".", "reweight_layer_ins", "=", "nn", ".", "Conv1d", "(", "self", ".", "ptt_num", ",", "self", ".", "ptt_num", ",", "1", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.reset_parameters": [[36, 41], ["memory_MGMRA.MemoryUnit.weight.data.uniform_", "math.sqrt", "memory_MGMRA.MemoryUnit.bias.data.uniform_", "memory_MGMRA.MemoryUnit.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.get_update_query": [[42, 63], ["mem.size", "torch.zeros().cuda", "range", "torch.nonzero", "torch.nonzero.size", "torch.zeros", "torch.sum", "max_indices.squeeze", "query[].squeeze", "torch.max"], "methods", ["None"], ["", "", "def", "get_update_query", "(", "self", ",", "mem", ",", "max_indices", ",", "score", ",", "query", ")", ":", "\n", "        ", "m", ",", "d", "=", "mem", ".", "size", "(", ")", "\n", "\n", "query_update", "=", "torch", ".", "zeros", "(", "(", "m", ",", "d", ")", ")", ".", "cuda", "(", ")", "\n", "#random_update = torch.zeros((m,d)).cuda()", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "            ", "idx", "=", "torch", ".", "nonzero", "(", "max_indices", ".", "squeeze", "(", "1", ")", "==", "i", ")", "\n", "a", ",", "_", "=", "idx", ".", "size", "(", ")", "\n", "#ex = update_indices[0][i]", "\n", "if", "a", "!=", "0", ":", "\n", "#random_idx = torch.randperm(a)[0]", "\n", "#idx = idx[idx != ex]", "\n", "#                     query_update[i] = torch.sum(query[idx].squeeze(1), dim=0)", "\n", "                ", "query_update", "[", "i", "]", "=", "torch", ".", "sum", "(", "(", "(", "score", "[", "idx", ",", "i", "]", "/", "torch", ".", "max", "(", "score", "[", ":", ",", "i", "]", ")", ")", "*", "query", "[", "idx", "]", ".", "squeeze", "(", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "#random_update[i] = query[random_idx] * (score[random_idx,i] / torch.max(score[:,i]))", "\n", "", "else", ":", "\n", "                ", "query_update", "[", "i", "]", "=", "0", "\n", "#random_update[i] = 0", "\n", "\n", "\n", "", "", "return", "query_update", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.forward": [[64, 128], ["torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_MGMRA.MemoryUnit.weight.permute", "torch.nn.functional.linear", "memory_MGMRA.MemoryUnit.weight.view().permute", "memory_MGMRA.MemoryUnit.avgpool().squeeze", "torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_MGMRA.MemoryUnit.part_ins_att.permute", "torch.nn.functional.linear", "memory_MGMRA.MemoryUnit.part_ins_att.view", "memory_MGMRA.MemoryUnit.avgpool().squeeze", "torch.nn.functional.linear", "torch.nn.functional.softmax", "memory_MGMRA.MemoryUnit.sem_att.permute", "torch.nn.functional.linear", "memory_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_MGMRA.hard_shrink_relu", "torch.nn.functional.normalize", "memory_MGMRA.MemoryUnit.weight.view", "memory_MGMRA.MemoryUnit.avgpool", "memory_MGMRA.MemoryUnit.avgpool", "torch.sigmoid", "torch.sigmoid", "memory_MGMRA.MemoryUnit.reweight_layer_part", "memory_MGMRA.MemoryUnit.reweight_layer_ins"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.loss.normalize"], ["", "def", "forward", "(", "self", ",", "input", ",", "residual", "=", "False", ")", ":", "\n", "        ", "'''\n        this is a bottom-up hierarchical stastic and summaration module\n        all steps in main flow follow  part -> prototype -> cls\n        input = NHW x C\n        total PTT M =  num_cls (L) x ptt_num (T) x part_num (P)\n        dimension C = fea_dim\n        '''", "\n", "### for global part-unware instance PTT, act as sub flow", "\n", "att_weight", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ")", "# we doesn't split the part dimension, there it is part-unaware NHW x M", "\n", "import", "pdb", "\n", "#pdb.set_trace()", "\n", "att_weight", "=", "F", ".", "softmax", "(", "att_weight", ",", "dim", "=", "1", ")", "# NHW x M", "\n", "### update ###", "\n", "#_, gather_indice = torch.topk(att_weight, 1, dim=1)", "\n", "#ins_mem_sample_driven = self.get_update_query(self.weight, gather_indice, att_weight,input)", "\n", "#self.weight.data = F.normalize(ins_mem_sample_driven+ self.weight, dim=1)", "\n", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "att_weight", "=", "hard_shrink_relu", "(", "att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "att_weight", "=", "F", ".", "normalize", "(", "att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "mem_trans", "=", "self", ".", "weight", ".", "permute", "(", "1", ",", "0", ")", "# Mem^T, MxC", "\n", "output", "=", "F", ".", "linear", "(", "att_weight", ",", "mem_trans", ")", "# AttWeight x Mem^T^T = AW x Mem, (TxM) x (MxC) = TxC", "\n", "\n", "### for global part-aware instance PTT", "\n", "import", "pdb", "\n", "#pdb.set_trace()", "\n", "\n", "self", ".", "reweight_part", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "num_cls", "*", "self", ".", "ptt_num", ",", "self", ".", "fea_dim", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "self", ".", "reweight_part", "=", "(", "torch", ".", "sigmoid", "(", "self", ".", "reweight_layer_part", "(", "self", ".", "reweight_part", ")", ")", "*", "self", ".", "reweight_part", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#self.reweight_part = (self.reweight_part).permute(0,2,1)", "\n", "self", ".", "part_ins_att", "=", "self", ".", "avgpool", "(", "self", ".", "reweight_part", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "ins_att_weight", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "part_ins_att", ")", "# this is for global part-aware instance ptt which is not used in ours [NHW, C] x[C, M] = [NHW, M]", "\n", "ins_att_weight", "=", "F", ".", "softmax", "(", "ins_att_weight", ",", "dim", "=", "1", ")", "# NHW x LT", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "ins_att_weight", "=", "hard_shrink_relu", "(", "ins_att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "ins_att_weight", "=", "F", ".", "normalize", "(", "ins_att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "ins_mem_trans", "=", "self", ".", "part_ins_att", ".", "permute", "(", "1", ",", "0", ")", "# Mem^T, MxC", "\n", "output_part", "=", "F", ".", "linear", "(", "ins_att_weight", ",", "ins_mem_trans", ")", "# AttWeight x Mem^T^T = AW x Mem, (TxM) x (MxC) = TxC", "\n", "\n", "### for semantic PTT", "\n", "#pdb.set_trace()", "\n", "self", ".", "reweight_ins", "=", "self", ".", "part_ins_att", ".", "view", "(", "self", ".", "num_cls", ",", "self", ".", "ptt_num", ",", "self", ".", "fea_dim", ")", "\n", "self", ".", "reweight_ins", "=", "(", "torch", ".", "sigmoid", "(", "self", ".", "reweight_layer_ins", "(", "self", ".", "reweight_ins", ")", ")", "*", "self", ".", "reweight_ins", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#self.reweight_ins = (self.reweight_ins).permute(0,2,1)", "\n", "self", ".", "sem_att", "=", "self", ".", "avgpool", "(", "self", ".", "reweight_ins", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "sem_att_weight", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "sem_att", ")", "\n", "sem_att_weight", "=", "F", ".", "softmax", "(", "sem_att_weight", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "shrink_thres", ">", "0", ":", "\n", "            ", "sem_att_weight", "=", "hard_shrink_relu", "(", "sem_att_weight", ",", "lambd", "=", "self", ".", "shrink_thres", ")", "\n", "sem_att_weight", "=", "F", ".", "normalize", "(", "sem_att_weight", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "", "sem_mem_trans", "=", "self", ".", "sem_att", ".", "permute", "(", "1", ",", "0", ")", "\n", "output_sem", "=", "F", ".", "linear", "(", "sem_att_weight", ",", "sem_mem_trans", ")", "\n", "\n", "if", "residual", ":", "\n", "            ", "output_sem", "+=", "output", "\n", "\n", "\n", "#return {'output': output, 'att': att_weight}  # output, att_weight", "\n", "", "return", "{", "'output'", ":", "output_sem", ",", "'att'", ":", "sem_att_weight", ",", "'sem_attn'", ":", "self", ".", "sem_att", ",", "'output_part'", ":", "output", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemoryUnit.extra_repr": [[130, 133], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'mem_dim={}, fea_dim={}'", ".", "format", "(", "\n", "self", ".", "mem_dim", ",", "self", ".", "fea_dim", "is", "not", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemModule.__init__": [[138, 151], ["torch.nn.Module.__init__", "memory_MGMRA.MemoryUnit"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ptt_num", ",", "num_cls", ",", "part_num", ",", "fea_dim", ",", "shrink_thres", "=", "0.0025", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "super", "(", "MemModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ptt_num", "=", "ptt_num", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "part_num", "=", "part_num", "\n", "ins_mem", "=", "False", "\n", "if", "ins_mem", ":", "\n", "            ", "self", ".", "mem_dim", "=", "ptt_num", "*", "num_cls", "*", "part_num", "# part-level instance", "\n", "", "else", ":", "\n", "            ", "self", ".", "mem_dim", "=", "num_cls", "# global semantic", "\n", "", "self", ".", "fea_dim", "=", "fea_dim", "\n", "self", ".", "shrink_thres", "=", "shrink_thres", "\n", "self", ".", "memory", "=", "MemoryUnit", "(", "self", ".", "ptt_num", ",", "self", ".", "num_cls", ",", "self", ".", "part_num", ",", "self", ".", "fea_dim", ",", "self", ".", "shrink_thres", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.MemModule.forward": [[152, 194], ["len", "input.permute.contiguous", "input.permute.view", "memory_MGMRA.MemModule.memory", "input.permute", "y.permute.permute.view", "y.permute.permute.permute", "att.permute.permute.view", "att.permute.permute.permute", "input.permute", "y.permute.permute.view", "y.permute.permute.permute", "att.permute.permute.view", "att.permute.permute.permute", "input.permute", "print", "y.permute.permute.view", "y.permute.permute.permute", "att.permute.permute.view", "att.permute.permute.permute", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "s", "=", "input", ".", "data", ".", "shape", "\n", "l", "=", "len", "(", "s", ")", "\n", "\n", "if", "l", "==", "3", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "l", "==", "4", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "elif", "l", "==", "5", ":", "\n", "            ", "x", "=", "input", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "4", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "[", "]", "\n", "print", "(", "'wrong feature map size'", ")", "\n", "", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "s", "[", "1", "]", ")", "\n", "#", "\n", "y_and", "=", "self", ".", "memory", "(", "x", ")", "\n", "#", "\n", "y", "=", "y_and", "[", "'output'", "]", "\n", "att", "=", "y_and", "[", "'att'", "]", "\n", "y_part", "=", "y_and", "[", "'output_part'", "]", "\n", "\n", "if", "l", "==", "3", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "att", "=", "att", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "self", ".", "mem_dim", ")", "\n", "att", "=", "att", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "l", "==", "4", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "att", "=", "att", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "self", ".", "mem_dim", ")", "\n", "att", "=", "att", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "l", "==", "5", ":", "\n", "            ", "y", "=", "y", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", ",", "s", "[", "1", "]", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "att", "=", "att", ".", "view", "(", "s", "[", "0", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", ",", "self", ".", "mem_dim", ")", "\n", "att", "=", "att", ".", "permute", "(", "0", ",", "4", ",", "1", ",", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "x", "\n", "att", "=", "att", "\n", "print", "(", "'wrong feature map size'", ")", "\n", "", "return", "y", ",", "y_and", "[", "'sem_attn'", "]", ",", "y_part", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.memory_MGMRA.hard_shrink_relu": [[196, 199], ["torch.nn.functional.relu", "torch.abs"], "function", ["None"], ["", "", "def", "hard_shrink_relu", "(", "input", ",", "lambd", "=", "0", ",", "epsilon", "=", "1e-12", ")", ":", "\n", "    ", "output", "=", "(", "F", ".", "relu", "(", "input", "-", "lambd", ")", "*", "input", ")", "/", "(", "torch", ".", "abs", "(", "input", "-", "lambd", ")", "+", "epsilon", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.IdentitySampler.__init__": [[68, 90], ["numpy.unique", "len", "numpy.maximum", "range", "len", "len", "numpy.random.choice", "range", "int", "numpy.random.choice", "numpy.random.choice", "numpy.hstack", "numpy.hstack"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train_color_label", ",", "train_thermal_label", ",", "color_pos", ",", "thermal_pos", ",", "num_pos", ",", "batchSize", ",", "epoch", ")", ":", "\n", "        ", "uni_label", "=", "np", ".", "unique", "(", "train_color_label", ")", "\n", "self", ".", "n_classes", "=", "len", "(", "uni_label", ")", "\n", "\n", "\n", "N", "=", "np", ".", "maximum", "(", "len", "(", "train_color_label", ")", ",", "len", "(", "train_thermal_label", ")", ")", "\n", "for", "j", "in", "range", "(", "int", "(", "N", "/", "(", "batchSize", "*", "num_pos", ")", ")", "+", "1", ")", ":", "\n", "            ", "batch_idx", "=", "np", ".", "random", ".", "choice", "(", "uni_label", ",", "batchSize", ",", "replace", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "                ", "sample_color", "=", "np", ".", "random", ".", "choice", "(", "color_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "sample_thermal", "=", "np", ".", "random", ".", "choice", "(", "thermal_pos", "[", "batch_idx", "[", "i", "]", "]", ",", "num_pos", ")", "\n", "\n", "if", "j", "==", "0", "and", "i", "==", "0", ":", "\n", "                    ", "index1", "=", "sample_color", "\n", "index2", "=", "sample_thermal", "\n", "", "else", ":", "\n", "                    ", "index1", "=", "np", ".", "hstack", "(", "(", "index1", ",", "sample_color", ")", ")", "\n", "index2", "=", "np", ".", "hstack", "(", "(", "index2", ",", "sample_thermal", ")", ")", "\n", "\n", "", "", "", "self", ".", "index1", "=", "index1", "\n", "self", ".", "index2", "=", "index2", "\n", "self", ".", "N", "=", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.IdentitySampler.__iter__": [[91, 93], ["iter", "numpy.arange", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "index1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.IdentitySampler.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.__init__": [[99, 101], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.reset": [[102, 107], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.AverageMeter.update": [[108, 113], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__init__": [[126, 132], ["utils.mkdir_if_missing", "open", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__del__": [[133, 135], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__enter__": [[136, 138], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.__exit__": [[139, 141], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.write": [[142, 146], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.write", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.flush": [[147, 152], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.flush", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.close": [[153, 157], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.close", "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.load_data": [[8, 16], ["open", "open().read().splitlines", "int", "open().read", "s.split", "s.split", "open"], "function", ["None"], ["def", "load_data", "(", "input_data_path", ")", ":", "\n", "    ", "with", "open", "(", "input_data_path", ")", "as", "f", ":", "\n", "        ", "data_file_list", "=", "open", "(", "input_data_path", ",", "'rt'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# Get full list of color image and labels", "\n", "file_image", "=", "[", "s", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "s", "in", "data_file_list", "]", "\n", "file_label", "=", "[", "int", "(", "s", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "for", "s", "in", "data_file_list", "]", "\n", "\n", "", "return", "file_image", ",", "file_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.GenIdx": [[18, 31], ["numpy.unique", "range", "numpy.unique", "range", "len", "color_pos.append", "len", "thermal_pos.append", "enumerate", "enumerate"], "function", ["None"], ["", "def", "GenIdx", "(", "train_color_label", ",", "train_thermal_label", ")", ":", "\n", "    ", "color_pos", "=", "[", "]", "\n", "unique_label_color", "=", "np", ".", "unique", "(", "train_color_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label_color", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_color_label", ")", "if", "v", "==", "unique_label_color", "[", "i", "]", "]", "\n", "color_pos", ".", "append", "(", "tmp_pos", ")", "\n", "\n", "", "thermal_pos", "=", "[", "]", "\n", "unique_label_thermal", "=", "np", ".", "unique", "(", "train_thermal_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label_thermal", ")", ")", ":", "\n", "        ", "tmp_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "train_thermal_label", ")", "if", "v", "==", "unique_label_thermal", "[", "i", "]", "]", "\n", "thermal_pos", ".", "append", "(", "tmp_pos", ")", "\n", "", "return", "color_pos", ",", "thermal_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.GenCamIdx": [[32, 49], ["range", "numpy.unique", "range", "len", "gall_cam.append", "len", "range", "int", "len", "sample_pos.append", "enumerate"], "function", ["None"], ["", "def", "GenCamIdx", "(", "gall_img", ",", "gall_label", ",", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'indoor'", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "        ", "camIdx", "=", "[", "1", ",", "2", ",", "4", ",", "5", "]", "\n", "", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n", "        ", "gall_cam", ".", "append", "(", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", ")", "\n", "\n", "", "sample_pos", "=", "[", "]", "\n", "unique_label", "=", "np", ".", "unique", "(", "gall_label", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_label", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "camIdx", ")", ")", ":", "\n", "            ", "id_pos", "=", "[", "k", "for", "k", ",", "v", "in", "enumerate", "(", "gall_label", ")", "if", "v", "==", "unique_label", "[", "i", "]", "and", "gall_cam", "[", "k", "]", "==", "camIdx", "[", "j", "]", "]", "\n", "if", "id_pos", ":", "\n", "                ", "sample_pos", ".", "append", "(", "id_pos", ")", "\n", "", "", "", "return", "sample_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.ExtractCam": [[50, 59], ["range", "numpy.array", "len", "int", "gall_cam.append"], "function", ["None"], ["", "def", "ExtractCam", "(", "gall_img", ")", ":", "\n", "    ", "gall_cam", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gall_img", ")", ")", ":", "\n", "        ", "cam_id", "=", "int", "(", "gall_img", "[", "i", "]", "[", "-", "10", "]", ")", "\n", "# if cam_id ==3:", "\n", "# cam_id = 2", "\n", "gall_cam", ".", "append", "(", "cam_id", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "gall_cam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.mkdir_if_missing": [[114, 121], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "", "", "", "", "class", "Logger", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.set_seed": [[158, 163], ["numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "", "", "def", "set_seed", "(", "seed", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Chenfeng1271_MGMRA.None.utils.set_requires_grad": [[164, 176], ["isinstance", "net.parameters"], "function", ["None"], ["", "", "def", "set_requires_grad", "(", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "            ", "\"\"\"Set requies_grad=Fasle for all the networks to avoid unnecessary computations\n            Parameters:\n                nets (network list)   -- a list of networks\n                requires_grad (bool)  -- whether the networks require gradients or not\n            \"\"\"", "\n", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "                ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "                ", "if", "net", "is", "not", "None", ":", "\n", "                    ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "requires_grad", "", "", "", "", "", ""]]}