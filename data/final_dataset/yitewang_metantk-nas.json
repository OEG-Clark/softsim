{"home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.parse_option": [[43, 143], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.lr_decay_epochs.split", "list", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.randint", "parser.parse_args.lr_decay_epochs.append", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "int"], "function", ["None"], ["def", "parse_option", "(", "argv", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--eval_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'meta-eval frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_freq'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'tb frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch_size'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'num of workers to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of training epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Checkpoint path for resume training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Start epoch'", ")", "\n", "\n", "# optimization", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'60,80'", ",", "help", "=", "'where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--radam'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use Radam optimizer'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'resnet12'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'miniImageNet'", ",", "choices", "=", "[", "'miniImageNet'", ",", "'tieredImageNet'", ",", "\n", "'CIFAR-FS'", ",", "'FC100'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--transform'", ",", "type", "=", "str", ",", "default", "=", "'A'", ",", "choices", "=", "transforms_list", ")", "\n", "parser", ".", "add_argument", "(", "'--use_trainval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use trainval set'", ")", "\n", "\n", "# learning rate scheduler", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "type", "=", "str", ",", "default", "=", "'default'", ",", "help", "=", "'using cosine annealing'", ",", "choices", "=", "[", "'default'", ",", "'cosine'", ",", "'reducelronplateau'", ",", "'steplr'", "]", ")", "\n", "\n", "# specify folder", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path to save model'", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path to tensorboard'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'path to data root'", ")", "\n", "\n", "# meta setting", "\n", "parser", ".", "add_argument", "(", "'--n_test_runs'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of test runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_ways'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes for doing each classification run'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shots'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of shots in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_queries'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of query in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug_support_samples'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of augmented samples for each meta test sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'test_batch_size'", ",", "\n", "help", "=", "'Size of test batch)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trial'", ",", "type", "=", "str", ",", "default", "=", "'1'", ",", "help", "=", "'the experiment id'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'Random seed'", ")", "\n", "\n", "# specify architectures for DARTS space", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "48", ",", "help", "=", "'num of init channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--genotype'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Cell genotype'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_stemm'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Stem multiplier during augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_fsr'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'Feature scaling ratio during augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_dp'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'Drop probability of augmentCNN'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "if", "opt", ".", "seed", "is", "None", "or", "opt", ".", "seed", "<", "0", ":", "\n", "        ", "opt", ".", "seed", "=", "random", ".", "randint", "(", "1", ",", "100000", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "opt", ".", "transform", "=", "'D'", "\n", "\n", "", "if", "opt", ".", "use_trainval", ":", "\n", "        ", "opt", ".", "trial", "=", "opt", ".", "trial", "+", "'_trainval'", "\n", "\n", "# set the path according to the environment", "\n", "", "if", "not", "opt", ".", "model_path", ":", "\n", "        ", "opt", ".", "model_path", "=", "'./models_pretrained'", "\n", "", "if", "not", "opt", ".", "tb_path", ":", "\n", "        ", "opt", ".", "tb_path", "=", "'./logger'", "\n", "", "if", "not", "opt", ".", "data_root", ":", "\n", "        ", "opt", ".", "data_root", "=", "'./data/{}'", ".", "format", "(", "opt", ".", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "data_root", ",", "opt", ".", "dataset", ")", "\n", "", "opt", ".", "data_aug", "=", "True", "\n", "\n", "iterations", "=", "opt", ".", "lr_decay_epochs", ".", "split", "(", "','", ")", "\n", "opt", ".", "lr_decay_epochs", "=", "list", "(", "[", "]", ")", "\n", "for", "it", "in", "iterations", ":", "\n", "        ", "opt", ".", "lr_decay_epochs", ".", "append", "(", "int", "(", "it", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "tb_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "tb_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "opt", ".", "model_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "opt", ".", "model_path", ")", "\n", "\n", "", "opt", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.prepare_seed": [[144, 150], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.main": [[151, 410], ["eval_searched_arch.parse_option", "eval_searched_arch.prepare_seed", "pathlib.Path().mkdir", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "vars", "next", "support_xs.size", "rfs_models.util.create_model", "logging.getLogger.info", "torch.CrossEntropyLoss", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.getLogger.info", "ptflops.get_model_complexity_info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "flop_benchmark.get_model_infos", "logging.getLogger.info", "logging.getLogger.info", "range", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "fewshot_test.main", "logging.getLogger.info", "fewshot_test.main", "logging.getLogger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "nn.DataParallel.cuda", "criterion.cuda.cuda", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "os.path.isfile", "print", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "optim.SGD.load_state_dict", "logging.getLogger.info", "logging.getLogger.info", "time.time", "eval_searched_arch.train", "time.time", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "optim.SGD.state_dict", "os.path.dirname", "str", "str", "str", "str", "os.path.join", "os.path.dirname", "str", "str", "str", "str", "os.path.join", "pathlib.Path", "os.path.join", "rfs_dataset.mini_imagenet.ImageNet", "rfs_dataset.mini_imagenet.ImageNet", "rfs_dataset.mini_imagenet.MetaImageNet", "rfs_dataset.mini_imagenet.MetaImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "rfs_models.util.count_params", "nn.DataParallel.parameters", "torch_optimizer.RAdam", "torch.SGD", "torch.DataParallel", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.StepLR.load_state_dict", "nn.DataParallel.drop_path_prob", "rfs_util.adjust_learning_rate", "optim.SGD.state_dict", "int", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.optim.lr_scheduler.StepLR.step", "nn.DataParallel.state_dict", "nn.DataParallel.module.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "getattr", "rfs_dataset.tiered_imagenet.TieredImageNet", "rfs_dataset.tiered_imagenet.TieredImageNet", "rfs_dataset.tiered_imagenet.MetaTieredImageNet", "rfs_dataset.tiered_imagenet.MetaTieredImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "nn.DataParallel.parameters", "nn.DataParallel.parameters", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "nn.DataParallel.state_dict", "nn.DataParallel.module.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "torch.optim.lr_scheduler.StepLR.step", "rfs_dataset.cifar.CIFAR100", "rfs_dataset.cifar.CIFAR100", "rfs_dataset.cifar.MetaCIFAR100", "rfs_dataset.cifar.MetaCIFAR100", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.fewshot_test.parse_option", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.create_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.main", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.main", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.count_params", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.drop_path_prob", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.adjust_learning_rate", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict"], ["", "def", "main", "(", "argv", ")", ":", "\n", "\n", "#Control randomness during backbone training", "\n", "    ", "opt", "=", "parse_option", "(", "argv", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "prepare_seed", "(", "opt", ".", "seed", ")", "\n", "\n", "# Create directory if not exist", "\n", "Path", "(", "opt", ".", "tb_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Create and configure logger", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "tb_path", ",", "\"rfs_results.log\"", ")", ",", "\n", "format", "=", "'%(asctime)s %(message)s'", ",", "\n", "filemode", "=", "'w'", ")", "\n", "\n", "# Creating a logger object", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "# Setting the threshold of logger to DEBUG", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# Print all arguments", "\n", "logger", ".", "info", "(", "'All arguments: \\n'", ")", "\n", "for", "arg", "in", "vars", "(", "opt", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'{}: {}'", ".", "format", "(", "arg", ",", "getattr", "(", "opt", ",", "arg", ")", ")", ")", "\n", "\n", "# Create dataloader", "\n", "", "train_partition", "=", "'trainval'", "if", "opt", ".", "use_trainval", "else", "'train'", "\n", "if", "opt", ".", "dataset", "==", "'miniImageNet'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "train_loader", "=", "DataLoader", "(", "ImageNet", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "ImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "64", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'tieredImageNet'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "train_loader", "=", "DataLoader", "(", "TieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "TieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "448", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "351", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "'D'", "]", "\n", "\n", "train_loader", "=", "DataLoader", "(", "CIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "train_partition", ",", "transform", "=", "train_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "val_loader", "=", "DataLoader", "(", "CIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'train'", ",", "transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "batch_size", "//", "2", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", "//", "2", ")", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", ":", "\n", "                ", "n_cls", "=", "64", "\n", "", "elif", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "                ", "n_cls", "=", "60", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'dataset not supported: {}'", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "opt", ".", "dataset", ")", "\n", "\n", "# Get input channel/size for creating augmentcnn model", "\n", "", "support_xs", ",", "_", ",", "_", ",", "_", "=", "next", "(", "iter", "(", "meta_testloader", ")", ")", "\n", "batch_size", ",", "_", ",", "channel", ",", "height", ",", "width", "=", "support_xs", ".", "size", "(", ")", "\n", "\n", "if", "opt", ".", "model", "==", "'augmentcnn'", ":", "\n", "        ", "assert", "height", "==", "width", "\n", "opt", ".", "n_input_channels", "=", "channel", "\n", "opt", ".", "input_size", "=", "height", "\n", "\n", "# Create model", "\n", "", "model", "=", "create_model", "(", "opt", ".", "model", ",", "n_cls", ",", "opt", ".", "dataset", ",", "args", "=", "opt", ")", "\n", "\n", "# Calculate model size & number of flops", "\n", "logger", ".", "info", "(", "'Number of parameters: {}'", ".", "format", "(", "count_params", "(", "model", ")", ")", ")", "\n", "\n", "if", "opt", ".", "adam", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ")", "\n", "", "elif", "opt", ".", "radam", ":", "\n", "        ", "optimizer", "=", "torch_optimizer", ".", "RAdam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "learning_rate", ",", "\n", "momentum", "=", "opt", ".", "momentum", ",", "\n", "weight_decay", "=", "opt", ".", "weight_decay", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "opt", ".", "n_gpu", ">", "1", ":", "\n", "            ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "logger", ".", "info", "(", "'{:<30}  {}'", ".", "format", "(", "'Shape of input: '", ",", "(", "channel", ",", "height", ",", "width", ")", ")", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "(", "channel", ",", "height", ",", "width", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "False", ",", "verbose", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "'Results by PTFLOPS:'", ")", "\n", "logger", ".", "info", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "logger", ".", "info", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "\n", "flop", ",", "param", "=", "get_model_infos", "(", "model", ",", "(", "1", ",", "channel", ",", "height", ",", "width", ")", ")", "\n", "logger", ".", "info", "(", "'Results by TE-NAS:'", ")", "\n", "logger", ".", "info", "(", "'FLOP = {:.2f} M, Params = {:.2f} MB'", ".", "format", "(", "flop", ",", "param", ")", ")", "\n", "\n", "# set learning rate scheduler", "\n", "if", "opt", ".", "scheduler", "==", "'cosine'", ":", "\n", "        ", "eta_min", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "3", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "opt", ".", "epochs", ",", "eta_min", ",", "-", "1", ")", "\n", "", "elif", "opt", ".", "scheduler", "==", "'reducelronplateau'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "'min'", ")", "\n", "", "elif", "opt", ".", "scheduler", "==", "'steplr'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "1", ",", "gamma", "=", "0.97", ")", "\n", "\n", "# Resume from checkpoint", "\n", "", "if", "opt", ".", "resume", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "opt", ".", "resume", ")", ",", "'Unable to find checkpoint file.'", "\n", "print", "(", "'Loading checkpoint : {}'", ".", "format", "(", "opt", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "opt", ".", "resume", ")", "\n", "assert", "opt", ".", "genotype", "==", "checkpoint", "[", "'genotype'", "]", ",", "'Genotype mismatch, saved genotype: {}'", ".", "format", "(", "checkpoint", "[", "'genotype'", "]", ")", "\n", "opt", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'opt'", "]", ")", "\n", "if", "opt", ".", "scheduler", "!=", "'default'", ":", "\n", "            ", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "", "logger", ".", "info", "(", "'Load checkpoint from {}, start from epoch {}'", ".", "format", "(", "opt", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "\n", "", "best_acc", "=", "0", "\n", "best_epoch", "=", "0", "\n", "\n", "# routine: supervised pre-training", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "start_epoch", ",", "opt", ".", "epochs", "+", "1", ")", ":", "\n", "\n", "# Gradually change drop_path_prob as DARTS did", "\n", "        ", "if", "opt", ".", "aug_dp", "!=", "0.0", ":", "\n", "            ", "assert", "opt", ".", "model", "==", "'augmentcnn'", ",", "'aug_dp is only used for AugmentCNN'", "\n", "model", ".", "drop_path_prob", "(", "opt", ".", "aug_dp", "*", "epoch", "/", "opt", ".", "epochs", ")", "\n", "\n", "", "if", "opt", ".", "scheduler", "==", "'default'", ":", "\n", "            ", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"==> training...\"", ")", "\n", "\n", "time1", "=", "time", ".", "time", "(", ")", "\n", "train_acc", ",", "train_loss", "=", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "opt", ")", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}'", ".", "format", "(", "epoch", ",", "time2", "-", "time1", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'train_acc at epoch {}: {}'", ".", "format", "(", "epoch", ",", "train_acc", ")", ")", "\n", "logger", ".", "info", "(", "'train_loss at epoch {}: {}'", ".", "format", "(", "epoch", ",", "train_loss", ")", ")", "\n", "\n", "# regular saving", "\n", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", "if", "opt", ".", "n_gpu", "<=", "1", "else", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "None", "if", "opt", ".", "scheduler", "==", "'default'", "else", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'genotype'", ":", "opt", ".", "genotype", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "'ckpt_last.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "\n", "# Save checkpoint for each epoch after 2/3 number of epochs of training", "\n", "if", "epoch", ">=", "int", "(", "1.0", "*", "opt", ".", "epochs", "*", "2", "/", "3", ")", ":", "\n", "            ", "save_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "'ckpt_epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "\n", "", "if", "opt", ".", "scheduler", "==", "'reducelronplateau'", ":", "\n", "            ", "scheduler", ".", "step", "(", "test_acc", ")", "\n", "", "elif", "opt", ".", "scheduler", "in", "[", "'cosine'", ",", "'steplr'", "]", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# save the last model", "\n", "", "", "state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", "if", "opt", ".", "n_gpu", "<=", "1", "else", "model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "None", "if", "opt", ".", "scheduler", "==", "'default'", "else", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'genotype'", ":", "opt", ".", "genotype", ",", "\n", "}", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "'ckpt_final.pth'", ".", "format", "(", "opt", ".", "model", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "save_file", ")", "\n", "logger", ".", "info", "(", "'Best Acc is at epoch {} with accuracy: {} '", ".", "format", "(", "best_epoch", ",", "best_acc", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'Start to few-shot test:'", ")", "\n", "logger", ".", "info", "(", "'1 shot result:'", ")", "\n", "cmd_1shot", "=", "[", "'--model'", ",", "opt", ".", "model", ",", "\n", "'--dataset'", ",", "opt", ".", "dataset", ",", "'--data_root'", ",", "os", ".", "path", ".", "dirname", "(", "opt", ".", "data_root", ")", ",", "\n", "'--init_channels'", ",", "str", "(", "opt", ".", "init_channels", ")", ",", "'--layers'", ",", "str", "(", "opt", ".", "layers", ")", ",", "\n", "'--aug_stemm'", ",", "str", "(", "opt", ".", "aug_stemm", ")", ",", "'--aug_fsr'", ",", "str", "(", "opt", ".", "aug_fsr", ")", ",", "\n", "'--genotype'", ",", "opt", ".", "genotype", ",", "\n", "# '--model_path', os.path.join(opt.model_path, 'ckpt_best.pth'),", "\n", "'--model_path'", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "'ckpt_final.pth'", ")", ",", "\n", "'--n_shots'", ",", "'1'", "]", "\n", "fewshot_test", ".", "main", "(", "cmd_1shot", ")", "\n", "\n", "logger", ".", "info", "(", "'5 shots result:'", ")", "\n", "cmd_5shot", "=", "[", "'--model'", ",", "opt", ".", "model", ",", "\n", "'--dataset'", ",", "opt", ".", "dataset", ",", "'--data_root'", ",", "os", ".", "path", ".", "dirname", "(", "opt", ".", "data_root", ")", ",", "\n", "'--init_channels'", ",", "str", "(", "opt", ".", "init_channels", ")", ",", "'--layers'", ",", "str", "(", "opt", ".", "layers", ")", ",", "\n", "'--aug_stemm'", ",", "str", "(", "opt", ".", "aug_stemm", ")", ",", "'--aug_fsr'", ",", "str", "(", "opt", ".", "aug_fsr", ")", ",", "\n", "'--genotype'", ",", "opt", ".", "genotype", ",", "\n", "# '--model_path', os.path.join(opt.model_path, 'ckpt_best.pth'),", "\n", "'--model_path'", ",", "os", ".", "path", ".", "join", "(", "opt", ".", "model_path", ",", "'ckpt_final.pth'", ")", ",", "\n", "'--n_shots'", ",", "'5'", "]", "\n", "fewshot_test", ".", "main", "(", "cmd_5shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train": [[411, 468], ["logging.getLogger", "model.train", "rfs_util.AverageMeter", "rfs_util.AverageMeter", "rfs_util.AverageMeter", "rfs_util.AverageMeter", "rfs_util.AverageMeter", "time.time", "enumerate", "logging.getLogger.info", "rfs_util.AverageMeter.update", "input.cuda.float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "rfs_util.accuracy", "rfs_util.AverageMeter.update", "rfs_util.AverageMeter.update", "rfs_util.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "rfs_util.AverageMeter.update", "time.time", "input.cuda.cuda", "target.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "logging.getLogger.info", "sys.stdout.flush", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.accuracy", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update"], ["", "def", "train", "(", "epoch", ",", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "opt", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\"\"\"One epoch training\"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "input", "=", "input", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# ===================forward=====================", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# ===================backward=====================", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# ===================meters=====================", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# tensorboard logger", "\n", "pass", "\n", "\n", "# print info", "\n", "if", "idx", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "idx", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.fewshot_test.parse_option": [[31, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join"], "function", ["None"], ["def", "parse_option", "(", "argv", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'argument for training'", ")", "\n", "\n", "# load pretrained model", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'augmentcnn'", ",", "choices", "=", "model_pool", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'absolute path to .pth model'", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'miniImageNet'", ",", "choices", "=", "[", "'miniImageNet'", ",", "'tieredImageNet'", ",", "\n", "'CIFAR-FS'", ",", "'FC100'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--transform'", ",", "type", "=", "str", ",", "default", "=", "'A'", ",", "choices", "=", "transforms_list", ")", "\n", "\n", "# meta setting", "\n", "parser", ".", "add_argument", "(", "'--n_test_runs'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of test runs'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_ways'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes for doing each classification run'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_shots'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of shots in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_queries'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of query in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug_support_samples'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "\n", "help", "=", "'The number of augmented samples for each meta test sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'~/data'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Root dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of workers for dataloader'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'test_batch_size'", ",", "\n", "help", "=", "'Size of test batch)'", ")", "\n", "# specify architectures for DARTS space", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_channels'", ",", "type", "=", "int", ",", "default", "=", "28", ",", "help", "=", "'num of init channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--genotype'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Cell genotype'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_stemm'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'Stem multiplier during augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug_fsr'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Feature scaling ratio during augmentation'", ")", "\n", "\n", "# Parameters for Logistic regression", "\n", "parser", ".", "add_argument", "(", "'--C'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'coefficient of Logistic Regression'", ")", "\n", "parser", ".", "add_argument", "(", "'--nonorm'", ",", "action", "=", "'store_false'", ",", "dest", "=", "'norm'", ",", "help", "=", "'if normalize feature, default: True'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'Random seed'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n", "if", "'trainval'", "in", "opt", ".", "model_path", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "True", "\n", "", "else", ":", "\n", "        ", "opt", ".", "use_trainval", "=", "False", "\n", "\n", "", "opt", ".", "data_root", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "data_root", ",", "opt", ".", "dataset", ")", "\n", "opt", ".", "data_aug", "=", "True", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.fewshot_test.prepare_seed": [[86, 92], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.fewshot_test.main": [[93, 209], ["fewshot_test.parse_option", "fewshot_test.prepare_seed", "next", "support_xs.size", "rfs_models.util.create_model", "torch.load", "torch.load", "model.cuda.load_state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "logging.getLogger.info", "ptflops.get_model_complexity_info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "time.time", "eval.meta_eval.meta_test", "logging.getLogger.info", "logging.basicConfig", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "model.cuda.cuda", "time.time", "rfs_dataset.mini_imagenet.MetaImageNet", "rfs_dataset.mini_imagenet.MetaImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "rfs_models.util.count_params", "rfs_dataset.tiered_imagenet.MetaTieredImageNet", "rfs_dataset.tiered_imagenet.MetaTieredImageNet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "NotImplementedError", "rfs_dataset.cifar.MetaCIFAR100", "rfs_dataset.cifar.MetaCIFAR100", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.fewshot_test.parse_option", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.create_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.meta_test", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.count_params"], ["", "def", "main", "(", "argv", ")", ":", "\n", "\n", "    ", "opt", "=", "parse_option", "(", "argv", ")", "\n", "\n", "if", "__name__", "==", "'__main__'", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "filename", "=", "\"rfs_results_{}shots.log\"", ".", "format", "(", "opt", ".", "n_shots", ")", ",", "\n", "format", "=", "'%(asctime)s %(message)s'", ",", "\n", "filemode", "=", "'w'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "", "prepare_seed", "(", "opt", ".", "seed", ")", "\n", "\n", "# test loader", "\n", "# args = opt", "\n", "opt", ".", "batch_size", "=", "opt", ".", "test_batch_size", "\n", "# args.n_aug_support_samples = 1", "\n", "\n", "if", "opt", ".", "dataset", "==", "'miniImageNet'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "64", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'tieredImageNet'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "opt", ".", "transform", "]", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaTieredImageNet", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "448", "\n", "", "else", ":", "\n", "            ", "n_cls", "=", "351", "\n", "", "", "elif", "opt", ".", "dataset", "==", "'CIFAR-FS'", "or", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "        ", "train_trans", ",", "test_trans", "=", "transforms_options", "[", "'D'", "]", "\n", "meta_testloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'test'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "meta_valloader", "=", "DataLoader", "(", "MetaCIFAR100", "(", "args", "=", "opt", ",", "partition", "=", "'val'", ",", "\n", "train_transform", "=", "train_trans", ",", "\n", "test_transform", "=", "test_trans", ",", "\n", "fix_seed", "=", "False", ")", ",", "\n", "batch_size", "=", "opt", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "\n", "num_workers", "=", "opt", ".", "num_workers", ")", "\n", "if", "opt", ".", "use_trainval", ":", "\n", "            ", "n_cls", "=", "80", "\n", "", "else", ":", "\n", "            ", "if", "opt", ".", "dataset", "==", "'CIFAR-FS'", ":", "\n", "                ", "n_cls", "=", "64", "\n", "", "elif", "opt", ".", "dataset", "==", "'FC100'", ":", "\n", "                ", "n_cls", "=", "60", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'dataset not supported: {}'", ".", "format", "(", "opt", ".", "dataset", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "opt", ".", "dataset", ")", "\n", "\n", "", "support_xs", ",", "_", ",", "_", ",", "_", "=", "next", "(", "iter", "(", "meta_testloader", ")", ")", "\n", "batch_size", ",", "_", ",", "channel", ",", "height", ",", "width", "=", "support_xs", ".", "size", "(", ")", "\n", "\n", "# Get input channel/size for creating augmentcnn model", "\n", "if", "opt", ".", "model", "==", "'augmentcnn'", ":", "\n", "        ", "assert", "height", "==", "width", "\n", "opt", ".", "n_input_channels", "=", "channel", "\n", "opt", ".", "input_size", "=", "height", "\n", "\n", "# load model", "\n", "", "model", "=", "create_model", "(", "opt", ".", "model", ",", "n_cls", ",", "opt", ".", "dataset", ",", "args", "=", "opt", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "opt", ".", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'model'", "]", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Calculate model size & number of flops", "\n", "", "logger", ".", "info", "(", "'Number of parameters: {}'", ".", "format", "(", "count_params", "(", "model", ")", ")", ")", "\n", "\n", "macs", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "(", "channel", ",", "height", ",", "width", ")", ",", "as_strings", "=", "True", ",", "\n", "print_per_layer_stat", "=", "False", ",", "verbose", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Computational complexity: '", ",", "macs", ")", ")", "\n", "logger", ".", "info", "(", "'{:<30}  {:<8}'", ".", "format", "(", "'Number of parameters: '", ",", "params", ")", ")", "\n", "logger", ".", "info", "(", "'Use norm:{}'", ".", "format", "(", "opt", ".", "norm", ")", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "test_acc_feat", ",", "test_std_feat", "=", "meta_test", "(", "model", ",", "meta_testloader", ",", "use_logit", "=", "False", ",", "is_norm", "=", "opt", ".", "norm", ",", "C", "=", "opt", ".", "C", ")", "\n", "test_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "logger", ".", "info", "(", "'test_acc_feat: {:.4f}, test_std: {:.4f}, time: {:.1f}'", ".", "format", "(", "test_acc_feat", ",", "\n", "test_std_feat", ",", "\n", "test_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.random_baseline.prepare_seed": [[16, 22], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.random_baseline.main": [[23, 91], ["os.getpid", "procedures.prepare_seed", "torch.cuda.is_available", "procedures.prepare_logger", "models.get_search_spaces", "models.get_cell_based_tiny_net", "procedures.prepare_logger.log", "procedures.prepare_logger.close", "easydict.EasyDict", "eval_searched_arch.main", "NotImplementedError", "time.strftime", "easydict.EasyDict", "models.get_cell_based_tiny_net.genotype", "NotImplementedError", "os.path.dirname", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "os.path.join", "os.path.join", "time.gmtime", "bool", "models.get_cell_based_tiny_net.genotype", "str", "str", "time.time", "bool"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_logger", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_search_spaces", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.main", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype"], ["", "def", "main", "(", "xargs", ")", ":", "\n", "    ", "PID", "=", "os", ".", "getpid", "(", ")", "\n", "prepare_seed", "(", "xargs", ".", "rand_seed", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'CUDA is not available.'", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "if", "xargs", ".", "timestamp", "==", "'none'", ":", "\n", "        ", "xargs", ".", "timestamp", "=", "\"{:}\"", ".", "format", "(", "time", ".", "strftime", "(", "'%h-%d-%C_%H-%M-%s'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n", "##### logging #####", "\n", "", "xargs", ".", "save_dir", "=", "xargs", ".", "save_dir", "+", "\"Randombaseline\"", "+", "\"/{:}/seed{:}\"", ".", "format", "(", "xargs", ".", "timestamp", ",", "xargs", ".", "rand_seed", ")", "\n", "logger", "=", "prepare_logger", "(", "xargs", ")", "\n", "###############", "\n", "\n", "search_space", "=", "get_search_spaces", "(", "'cell'", ",", "xargs", ".", "search_space_name", ")", "\n", "if", "xargs", ".", "search_space_name", "==", "'nas-bench-201'", ":", "\n", "        ", "model_config", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "'C'", ":", "3", ",", "'N'", ":", "1", ",", "'depth'", ":", "-", "1", ",", "'use_stem'", ":", "True", ",", "\n", "'max_nodes'", ":", "xargs", ".", "max_nodes", ",", "'num_classes'", ":", "1", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'ntk_type'", ":", "'NTK'", ",", "\n", "}", ")", "\n", "\n", "", "elif", "xargs", ".", "search_space_name", "in", "[", "'darts'", ",", "'darts_fewshot'", "]", ":", "\n", "        ", "model_config", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "'C'", ":", "1", ",", "'N'", ":", "1", ",", "'depth'", ":", "2", ",", "'use_stem'", ":", "True", ",", "'stem_multiplier'", ":", "1", ",", "\n", "'feature_scale_rate'", ":", "2", ",", "\n", "'num_classes'", ":", "1", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'super_type'", ":", "xargs", ".", "super_type", ",", "\n", "'steps'", ":", "xargs", ".", "max_nodes", ",", "\n", "'multiplier'", ":", "xargs", ".", "max_nodes", ",", "\n", "'ntk_type'", ":", "'NTK'", ",", "\n", "}", ")", "\n", "\n", "", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", "\n", "\n", "logger", ".", "log", "(", "'<<<--->>> End: {:}'", ".", "format", "(", "network", ".", "genotype", "(", ")", ")", ")", "\n", "\n", "if", "xargs", ".", "dataset", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", "]", ":", "\n", "        ", "dataset_for_eval", "=", "'miniImageNet'", "\n", "", "elif", "xargs", ".", "dataset", "in", "[", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "        ", "dataset_for_eval", "=", "'tieredImageNet'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Only support miniImageNet and tieredImageNet'", ")", "\n", "\n", "", "if", "xargs", ".", "train_method", "==", "'rfs'", ":", "\n", "        ", "evaluation_cmd", "=", "[", "'--model'", ",", "'augmentcnn'", ",", "\n", "'--dataset'", ",", "dataset_for_eval", ",", "'--data_root'", ",", "os", ".", "path", ".", "dirname", "(", "xargs", ".", "data_path", ")", ",", "\n", "'--init_channels'", ",", "str", "(", "xargs", ".", "aug_channels", ")", ",", "'--layers'", ",", "str", "(", "xargs", ".", "aug_layers", ")", ",", "'--aug_dp'", ",", "str", "(", "xargs", ".", "aug_dp", ")", ",", "\n", "'--aug_stemm'", ",", "str", "(", "xargs", ".", "aug_stemm", ")", ",", "'--aug_fsr'", ",", "str", "(", "xargs", ".", "aug_fsr", ")", ",", "\n", "'--lr_decay_epochs'", ",", "str", "(", "xargs", ".", "aug_lr_decay_epochs", ")", ",", "'--epochs'", ",", "str", "(", "xargs", ".", "aug_epochs", ")", ",", "\n", "'--learning_rate'", ",", "str", "(", "xargs", ".", "aug_lr", ")", ",", "\n", "'--seed'", ",", "'-1'", ",", "\n", "'--batch_size'", ",", "str", "(", "xargs", ".", "aug_batchsize", ")", ",", "'--genotype'", ",", "str", "(", "network", ".", "genotype", "(", ")", ")", ",", "\n", "'--tb_path'", ",", "os", ".", "path", ".", "join", "(", "str", "(", "xargs", ".", "save_dir", ")", ",", "'logs'", ")", ",", "'--model_path'", ",", "os", ".", "path", ".", "join", "(", "str", "(", "xargs", ".", "save_dir", ")", ",", "'model'", ")", ",", "]", "\n", "# 5 way 5 shot", "\n", "eval_searched_arch", ".", "main", "(", "evaluation_cmd", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Only support rfs training now.'", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.kaiming_normal_fanin_init": [[26, 34], ["isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "hasattr", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.constant_"], "function", ["None"], ["def", "kaiming_normal_fanin_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.kaiming_normal_fanout_init": [[36, 44], ["isinstance", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "hasattr", "torch.nn.init.zeros_", "torch.nn.init.ones_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_normal_fanout_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "ones_", "(", "m", ".", "weight", ".", "data", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model": [[46, 52], ["model.apply", "model.apply"], "function", ["None"], ["", "", "def", "init_model", "(", "model", ",", "method", "=", "'kaiming_norm_fanin'", ")", ":", "\n", "    ", "if", "method", "==", "'kaiming_norm_fanin'", ":", "\n", "        ", "model", ".", "apply", "(", "kaiming_normal_fanin_init", ")", "\n", "", "elif", "method", "==", "'kaiming_norm_fanout'", ":", "\n", "        ", "model", ".", "apply", "(", "kaiming_normal_fanout_init", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.round_to": [[54, 66], ["type", "abs", "abs", "math.floor", "int", "math.log", "round", "round"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log"], ["", "def", "round_to", "(", "number", ",", "precision", ",", "eps", "=", "1e-8", ")", ":", "\n", "# round to significant figure", "\n", "    ", "dtype", "=", "type", "(", "number", ")", "\n", "if", "number", "==", "0", ":", "\n", "        ", "return", "number", "\n", "", "sign", "=", "number", "/", "abs", "(", "number", ")", "\n", "number", "=", "abs", "(", "number", ")", "+", "eps", "\n", "power", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "number", ",", "10", ")", ")", "+", "1", "\n", "if", "dtype", "==", "int", ":", "\n", "        ", "return", "int", "(", "sign", "*", "round", "(", "number", "*", "10", "**", "(", "-", "power", ")", ",", "precision", ")", "*", "10", "**", "(", "power", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "sign", "*", "round", "(", "number", "*", "10", "**", "(", "-", "power", ")", ",", "precision", ")", "*", "10", "**", "(", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.convert_model": [[67, 82], ["module_modification.nullify_batchnorm_modules.cuda().train", "opacus.utils.module_modification.convert_batchnorm_modules", "opacus.utils.module_modification.convert_batchnorm_modules", "module_modification.nullify_batchnorm_modules.cuda", "torch.nn.GroupNorm", "opacus.utils.module_modification.convert_batchnorm_modules", "min", "opacus.utils.module_modification.nullify_batchnorm_modules", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train"], ["", "", "def", "convert_model", "(", "network", ",", "norm_type", "=", "'groupnorm'", ")", ":", "\n", "# Convert models with different normalization layers", "\n", "    ", "if", "norm_type", "==", "'groupnorm'", ":", "\n", "        ", "network_gn", "=", "module_modification", ".", "convert_batchnorm_modules", "(", "network", ",", "module_modification", ".", "_batchnorm_to_groupnorm", ")", "\n", "", "elif", "norm_type", "==", "'groupnorm16'", ":", "\n", "        ", "def", "_batchnorm_to_groupnorm16", "(", "module", ":", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", "->", "nn", ".", "Module", ":", "\n", "            ", "return", "nn", ".", "GroupNorm", "(", "min", "(", "16", ",", "module", ".", "num_features", ")", ",", "module", ".", "num_features", ",", "affine", "=", "True", ")", "\n", "", "network_gn", "=", "module_modification", ".", "convert_batchnorm_modules", "(", "network", ",", "_batchnorm_to_groupnorm16", ")", "\n", "", "elif", "norm_type", "==", "'instancenorm'", ":", "\n", "        ", "network_gn", "=", "module_modification", ".", "convert_batchnorm_modules", "(", "network", ",", "module_modification", ".", "_batchnorm_to_instancenorm", ")", "\n", "", "elif", "norm_type", "==", "'nonorm'", ":", "\n", "        ", "network_gn", "=", "module_modification", ".", "nullify_batchnorm_modules", "(", "network", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Opacus only support group/instance norm, please try to use nonorm to remove all norm layers'", ")", "\n", "", "return", "network_gn", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.prune_func_rank": [[83, 218], ["models.get_cell_based_tiny_net().cuda().train", "prune_metantknas.init_model", "models.get_cell_based_tiny_net().cuda().train", "prune_metantknas.init_model", "convert_model.set_alphas", "get_cell_based_tiny_net().cuda.set_alphas", "min", "tqdm.tqdm", "range", "sorted", "enumerate", "sorted", "enumerate", "sorted", "list", "prune_metantknas.convert_model", "len", "range", "edge2choice.values", "models.get_cell_based_tiny_net().cuda", "models.get_cell_based_tiny_net().cuda", "[].sum", "int", "len", "range", "rankings[].append", "rankings.items", "sum", "[].sum", "len", "prune_metantknas.round_to", "prune_metantknas.round_to", "rankings[].append", "rankings[].append", "sum", "len", "edge2choice[].append", "models.get_cell_based_tiny_net", "models.get_cell_based_tiny_net", "torch.nn.functional.softmax", "models.get_cell_based_tiny_net().cuda().train", "convert_model.set_alphas", "range", "sorted.append", "convert_model.zero_grad", "convert_model.zero_grad", "models.get_cell_based_tiny_net().cuda", "get_cell_based_tiny_net().cuda.set_alphas", "get_cell_based_tiny_net().cuda.train", "models.get_cell_based_tiny_net().cuda", "get_cell_based_tiny_net().cuda.set_alphas", "get_cell_based_tiny_net().cuda.train", "torch.cuda.empty_cache", "tqdm.tqdm.update", "alpha.sum", "alpha.detach().clone", "prune_metantknas.convert_model", "prune_metantknas.init_model", "zip", "convert_model.set_alphas", "ntk_delta.append", "torch.no_grad", "range", "numpy.mean", "sorted.append", "models.get_cell_based_tiny_net().cuda", "convert_model.parameters", "convert_model.parameters", "param.data.copy_", "round", "numpy.mean", "models.get_cell_based_tiny_net", "models.get_cell_based_tiny_net", "prune_metantknas.init_model", "zip", "get_cell_based_tiny_net().cuda.set_alphas", "lrc_model.reinit", "lrc_model.forward_batch_sample", "_linear_regions.append", "lrc_model.clear", "alpha.detach", "xargs.init.startswith", "procedures.get_ntk_n", "get_cell_based_tiny_net().cuda.parameters", "get_cell_based_tiny_net().cuda.parameters", "param.data.copy_", "round", "models.get_cell_based_tiny_net", "procedures.get_analytical_metantk_n", "xargs.init.startswith"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.convert_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.round_to", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.round_to", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.convert_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.reinit", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.forward_batch_sample", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.clear", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_ntk_n", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_analytical_metantk_n"], ["", "def", "prune_func_rank", "(", "xargs", ",", "arch_parameters", ",", "model_config", ",", "model_config_thin", ",", "loader", ",", "lrc_model", ",", "search_space", ",", "logger", ",", "precision", "=", "10", ",", "prune_number", "=", "1", ")", ":", "\n", "# arch_parameters now has three dim: cell_type, edge, op", "\n", "    ", "network_origin", "=", "get_cell_based_tiny_net", "(", "model_config", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "if", "xargs", ".", "ntk_type", "in", "[", "'NTK'", ",", "'MetaNTK_anl'", "]", ":", "\n", "        ", "network_origin", "=", "convert_model", "(", "network_origin", ",", "xargs", ".", "norm_type", ")", "\n", "", "init_model", "(", "network_origin", ",", "xargs", ".", "init", ")", "\n", "network_thin_origin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "init_model", "(", "network_thin_origin", ",", "xargs", ".", "init", ")", "\n", "\n", "for", "alpha", "in", "arch_parameters", ":", "\n", "        ", "alpha", "[", ":", ",", "0", "]", "=", "-", "INF", "\n", "", "network_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "network_thin_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "\n", "alpha_active", "=", "[", "(", "nn", ".", "functional", ".", "softmax", "(", "alpha", ",", "1", ")", ">", "0.01", ")", ".", "float", "(", ")", "for", "alpha", "in", "arch_parameters", "]", "\n", "prune_number", "=", "min", "(", "prune_number", ",", "alpha_active", "[", "0", "]", "[", "0", "]", ".", "sum", "(", ")", "-", "1", ")", "# adjust prune_number based on current remaining ops on each edge", "\n", "ntk_all", "=", "[", "]", "# (ntk, (edge_idx, op_idx))", "\n", "regions_all", "=", "[", "]", "# (regions, (edge_idx, op_idx))", "\n", "choice2regions", "=", "{", "}", "# (edge_idx, op_idx): regions", "\n", "pbar", "=", "tqdm", "(", "total", "=", "int", "(", "sum", "(", "alpha", ".", "sum", "(", ")", "for", "alpha", "in", "alpha_active", ")", ")", ",", "position", "=", "0", ",", "leave", "=", "True", ")", "\n", "for", "idx_ct", "in", "range", "(", "len", "(", "arch_parameters", ")", ")", ":", "\n", "# cell type (ct): normal or reduce", "\n", "        ", "for", "idx_edge", "in", "range", "(", "len", "(", "arch_parameters", "[", "idx_ct", "]", ")", ")", ":", "\n", "# edge", "\n", "            ", "if", "alpha_active", "[", "idx_ct", "]", "[", "idx_edge", "]", ".", "sum", "(", ")", "==", "1", ":", "\n", "# only one op remaining", "\n", "                ", "continue", "\n", "", "for", "idx_op", "in", "range", "(", "len", "(", "arch_parameters", "[", "idx_ct", "]", "[", "idx_edge", "]", ")", ")", ":", "\n", "# op", "\n", "                ", "if", "alpha_active", "[", "idx_ct", "]", "[", "idx_edge", ",", "idx_op", "]", ">", "0", ":", "\n", "# this edge-op not pruned yet", "\n", "                    ", "_arch_param", "=", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "arch_parameters", "]", "\n", "_arch_param", "[", "idx_ct", "]", "[", "idx_edge", ",", "idx_op", "]", "=", "-", "INF", "\n", "# ##### get ntk (score) ########", "\n", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "if", "xargs", ".", "ntk_type", "in", "[", "'NTK'", ",", "'MetaNTK_anl'", "]", ":", "\n", "                        ", "network", "=", "convert_model", "(", "network", ",", "xargs", ".", "norm_type", ")", "\n", "", "network", ".", "set_alphas", "(", "_arch_param", ")", "\n", "ntk_delta", "=", "[", "]", "\n", "repeat", "=", "xargs", ".", "repeat", "\n", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "# random reinit", "\n", "                        ", "init_model", "(", "network_origin", ",", "xargs", ".", "init", "+", "\"_fanout\"", "if", "xargs", ".", "init", ".", "startswith", "(", "'kaiming'", ")", "else", "xargs", ".", "init", ")", "# for backward", "\n", "# make sure network_origin and network are identical", "\n", "for", "param_ori", ",", "param", "in", "zip", "(", "network_origin", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "                            ", "param", ".", "data", ".", "copy_", "(", "param_ori", ".", "data", ")", "\n", "", "network", ".", "set_alphas", "(", "_arch_param", ")", "\n", "if", "xargs", ".", "only_lrs", ":", "\n", "# If only use number of linear regions to prune, then generate same ntk cond values", "\n", "                            ", "ntk_origin", ",", "ntk", "=", "1.0", ",", "1.0", "\n", "", "else", ":", "\n", "                            ", "if", "xargs", ".", "ntk_type", "==", "'NTK'", ":", "\n", "                                ", "ntk_origin", ",", "ntk", "=", "get_ntk_n", "(", "loader", ",", "[", "network_origin", ",", "network", "]", ",", "recalbn", "=", "0", ",", "train_mode", "=", "xargs", ".", "bn_mode", ",", "num_batch", "=", "1", ")", "\n", "", "elif", "xargs", ".", "ntk_type", "==", "'MetaNTK_anl'", ":", "\n", "                                ", "ntk_origin", ",", "ntk", "=", "get_analytical_metantk_n", "(", "loader", ",", "[", "network_origin", ",", "network", "]", ",", "xargs", ".", "n_ways", ",", "algorithm", "=", "xargs", ".", "algorithm", ",", "\n", "inner_lr_time", "=", "xargs", ".", "inner_lr_time", ",", "reg_coef", "=", "xargs", ".", "reg_coef", ",", "recalbn", "=", "0", ",", "train_mode", "=", "xargs", ".", "bn_mode", ",", "\n", "num_batch", "=", "1", ",", "params_types", "=", "xargs", ".", "params_types", ",", "norm_type", "=", "xargs", ".", "norm_type", ")", "\n", "# ####################", "\n", "", "", "ntk_delta", ".", "append", "(", "round", "(", "(", "ntk_origin", "-", "ntk", ")", "/", "ntk_origin", ",", "precision", ")", ")", "# higher the more likely to be prunned", "\n", "", "ntk_all", ".", "append", "(", "[", "np", ".", "mean", "(", "ntk_delta", ")", ",", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", ")", "# change of ntk", "\n", "network", ".", "zero_grad", "(", ")", "\n", "network_origin", ".", "zero_grad", "(", ")", "\n", "#############################", "\n", "network_thin_origin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", "\n", "network_thin_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "network_thin_origin", ".", "train", "(", ")", "\n", "network_thin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", "\n", "network_thin", ".", "set_alphas", "(", "_arch_param", ")", "\n", "network_thin", ".", "train", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "_linear_regions", "=", "[", "]", "\n", "repeat", "=", "xargs", ".", "repeat", "\n", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "# random reinit", "\n", "                            ", "init_model", "(", "network_thin_origin", ",", "xargs", ".", "init", "+", "\"_fanin\"", "if", "xargs", ".", "init", ".", "startswith", "(", "'kaiming'", ")", "else", "xargs", ".", "init", ")", "# for forward", "\n", "# make sure network_thin and network_thin_origin are identical", "\n", "for", "param_ori", ",", "param", "in", "zip", "(", "network_thin_origin", ".", "parameters", "(", ")", ",", "network_thin", ".", "parameters", "(", ")", ")", ":", "\n", "                                ", "param", ".", "data", ".", "copy_", "(", "param_ori", ".", "data", ")", "\n", "", "network_thin", ".", "set_alphas", "(", "_arch_param", ")", "\n", "#####", "\n", "lrc_model", ".", "reinit", "(", "models", "=", "[", "network_thin_origin", ",", "network_thin", "]", ",", "seed", "=", "xargs", ".", "rand_seed", ")", "\n", "_lr", ",", "_lr_2", "=", "lrc_model", ".", "forward_batch_sample", "(", ")", "\n", "_linear_regions", ".", "append", "(", "round", "(", "(", "_lr", "-", "_lr_2", ")", "/", "_lr", ",", "precision", ")", ")", "# change of #Regions, lower the more likely to be prunned", "\n", "lrc_model", ".", "clear", "(", ")", "\n", "", "linear_regions", "=", "np", ".", "mean", "(", "_linear_regions", ")", "\n", "regions_all", ".", "append", "(", "[", "linear_regions", ",", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", ")", "\n", "choice2regions", "[", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", "=", "linear_regions", "\n", "#############################", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "del", "network_thin", "\n", "del", "network_thin_origin", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "", "", "ntk_all", "=", "sorted", "(", "ntk_all", ",", "key", "=", "lambda", "tup", ":", "round_to", "(", "tup", "[", "0", "]", ",", "precision", ")", ",", "reverse", "=", "True", ")", "# descending: we want to prune op to decrease ntk, i.e. to make ntk_origin > ntk", "\n", "# print(\"NTK conds:\", ntk_all)", "\n", "# logger.log('NTK conds max: {}'.format(ntk_all[0][0]))", "\n", "# logger.log('NTK conds min: {}'.format(ntk_all[-1][0]))", "\n", "rankings", "=", "{", "}", "# dict of (cell_idx, edge_idx, op_idx): [ntk_rank, regions_rank]", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "ntk_all", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "            ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "if", "data", "[", "0", "]", "==", "ntk_all", "[", "idx", "-", "1", "]", "[", "0", "]", ":", "\n", "# same ntk as previous", "\n", "                ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "rankings", "[", "ntk_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "rankings", "[", "ntk_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "0", "]", "+", "1", "]", "\n", "# print(rankings)", "\n", "", "", "", "regions_all", "=", "sorted", "(", "regions_all", ",", "key", "=", "lambda", "tup", ":", "round_to", "(", "tup", "[", "0", "]", ",", "precision", ")", ",", "reverse", "=", "False", ")", "# ascending: we want to prune op to increase lr, i.e. to make lr < lr_2", "\n", "# print(\"#Regions:\", regions_all)", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "regions_all", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "            ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "if", "data", "[", "0", "]", "==", "regions_all", "[", "idx", "-", "1", "]", "[", "0", "]", ":", "\n", "# same #Regions as previous", "\n", "                ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "rankings", "[", "regions_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "rankings", "[", "regions_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "1", "]", "+", "1", ")", "\n", "", "", "", "rankings_list", "=", "[", "[", "k", ",", "v", "]", "for", "k", ",", "v", "in", "rankings", ".", "items", "(", ")", "]", "# list of (cell_idx, edge_idx, op_idx), [ntk_rank, regions_rank]", "\n", "# ascending by sum of two rankings", "\n", "rankings_sum", "=", "sorted", "(", "rankings_list", ",", "key", "=", "lambda", "tup", ":", "sum", "(", "tup", "[", "1", "]", ")", ",", "reverse", "=", "False", ")", "# list of (cell_idx, edge_idx, op_idx), [ntk_rank, regions_rank]", "\n", "edge2choice", "=", "{", "}", "# (cell_idx, edge_idx): list of (cell_idx, edge_idx, op_idx) of length prune_number", "\n", "for", "(", "cell_idx", ",", "edge_idx", ",", "op_idx", ")", ",", "[", "ntk_rank", ",", "regions_rank", "]", "in", "rankings_sum", ":", "\n", "        ", "if", "(", "cell_idx", ",", "edge_idx", ")", "not", "in", "edge2choice", ":", "\n", "            ", "edge2choice", "[", "(", "cell_idx", ",", "edge_idx", ")", "]", "=", "[", "(", "cell_idx", ",", "edge_idx", ",", "op_idx", ")", "]", "\n", "", "elif", "len", "(", "edge2choice", "[", "(", "cell_idx", ",", "edge_idx", ")", "]", ")", "<", "prune_number", ":", "\n", "            ", "edge2choice", "[", "(", "cell_idx", ",", "edge_idx", ")", "]", ".", "append", "(", "(", "cell_idx", ",", "edge_idx", ",", "op_idx", ")", ")", "\n", "", "", "choices_edges", "=", "list", "(", "edge2choice", ".", "values", "(", ")", ")", "\n", "# print(\"Final Ranking:\", rankings_sum)", "\n", "# print(\"Pruning Choices:\", choices_edges)", "\n", "for", "choices", "in", "choices_edges", ":", "\n", "        ", "for", "(", "cell_idx", ",", "edge_idx", ",", "op_idx", ")", "in", "choices", ":", "\n", "            ", "arch_parameters", "[", "cell_idx", "]", ".", "data", "[", "edge_idx", ",", "op_idx", "]", "=", "-", "INF", "\n", "\n", "", "", "return", "arch_parameters", ",", "choices_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.prune_func_rank_group": [[220, 353], ["models.get_cell_based_tiny_net().cuda().train", "prune_metantknas.init_model", "models.get_cell_based_tiny_net().cuda().train", "prune_metantknas.init_model", "convert_model.set_alphas", "get_cell_based_tiny_net().cuda.set_alphas", "tqdm.tqdm", "range", "prune_metantknas.convert_model", "len", "len", "range", "models.get_cell_based_tiny_net().cuda", "models.get_cell_based_tiny_net().cuda", "int", "len", "range", "sorted", "enumerate", "sorted", "enumerate", "sorted", "sum", "tqdm.tqdm.update", "range", "models.get_cell_based_tiny_net", "models.get_cell_based_tiny_net", "torch.nn.functional.softmax", "len", "rankings[].append", "rankings.items", "alpha.sum", "models.get_cell_based_tiny_net().cuda().train", "convert_model.set_alphas", "range", "sorted.append", "convert_model.zero_grad", "convert_model.zero_grad", "models.get_cell_based_tiny_net().cuda", "get_cell_based_tiny_net().cuda.set_alphas", "get_cell_based_tiny_net().cuda.train", "models.get_cell_based_tiny_net().cuda", "get_cell_based_tiny_net().cuda.set_alphas", "get_cell_based_tiny_net().cuda.train", "torch.cuda.empty_cache", "tqdm.tqdm.update", "prune_metantknas.round_to", "prune_metantknas.round_to", "rankings[].append", "rankings[].append", "sum", "alpha.detach().clone", "prune_metantknas.convert_model", "prune_metantknas.init_model", "zip", "convert_model.set_alphas", "ntk_delta.append", "torch.no_grad", "range", "numpy.mean", "sorted.append", "models.get_cell_based_tiny_net().cuda", "convert_model.parameters", "convert_model.parameters", "param.data.copy_", "round", "numpy.mean", "models.get_cell_based_tiny_net", "models.get_cell_based_tiny_net", "prune_metantknas.init_model", "zip", "get_cell_based_tiny_net().cuda.set_alphas", "lrc_model.reinit", "lrc_model.forward_batch_sample", "_linear_regions.append", "lrc_model.clear", "alpha.detach", "xargs.init.startswith", "procedures.get_ntk_n", "get_cell_based_tiny_net().cuda.parameters", "get_cell_based_tiny_net().cuda.parameters", "param.data.copy_", "round", "models.get_cell_based_tiny_net", "procedures.get_analytical_metantk_n", "xargs.init.startswith"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.convert_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.round_to", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.round_to", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.convert_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.init_model", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.reinit", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.forward_batch_sample", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.clear", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_ntk_n", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_analytical_metantk_n"], ["", "def", "prune_func_rank_group", "(", "xargs", ",", "arch_parameters", ",", "model_config", ",", "model_config_thin", ",", "loader", ",", "lrc_model", ",", "search_space", ",", "logger", ",", "edge_groups", "=", "[", "(", "0", ",", "2", ")", ",", "(", "2", ",", "5", ")", ",", "(", "5", ",", "9", ")", ",", "(", "9", ",", "14", ")", "]", ",", "num_per_group", "=", "2", ",", "precision", "=", "10", ")", ":", "\n", "# arch_parameters now has three dim: cell_type, edge, op", "\n", "    ", "network_origin", "=", "get_cell_based_tiny_net", "(", "model_config", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "if", "xargs", ".", "ntk_type", "in", "[", "'NTK'", ",", "'MetaNTK_anl'", "]", ":", "\n", "        ", "network_origin", "=", "convert_model", "(", "network_origin", ",", "xargs", ".", "norm_type", ")", "\n", "", "init_model", "(", "network_origin", ",", "xargs", ".", "init", ")", "\n", "network_thin_origin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "init_model", "(", "network_thin_origin", ",", "xargs", ".", "init", ")", "\n", "\n", "for", "alpha", "in", "arch_parameters", ":", "\n", "        ", "alpha", "[", ":", ",", "0", "]", "=", "-", "INF", "\n", "", "network_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "network_thin_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "\n", "alpha_active", "=", "[", "(", "nn", ".", "functional", ".", "softmax", "(", "alpha", ",", "1", ")", ">", "0.01", ")", ".", "float", "(", ")", "for", "alpha", "in", "arch_parameters", "]", "\n", "ntk_all", "=", "[", "]", "# (ntk, (edge_idx, op_idx))", "\n", "regions_all", "=", "[", "]", "# (regions, (edge_idx, op_idx))", "\n", "choice2regions", "=", "{", "}", "# (edge_idx, op_idx): regions", "\n", "pbar", "=", "tqdm", "(", "total", "=", "int", "(", "sum", "(", "alpha", ".", "sum", "(", ")", "for", "alpha", "in", "alpha_active", ")", ")", ",", "position", "=", "0", ",", "leave", "=", "True", ")", "\n", "assert", "edge_groups", "[", "-", "1", "]", "[", "1", "]", "==", "len", "(", "arch_parameters", "[", "0", "]", ")", "\n", "for", "idx_ct", "in", "range", "(", "len", "(", "arch_parameters", ")", ")", ":", "\n", "# cell type (ct): normal or reduce", "\n", "        ", "for", "idx_group", "in", "range", "(", "len", "(", "edge_groups", ")", ")", ":", "\n", "            ", "edge_group", "=", "edge_groups", "[", "idx_group", "]", "\n", "# print(\"Pruning cell %s group %s..........\"%(\"normal\" if idx_ct == 0 else \"reduction\", str(edge_group)))", "\n", "if", "edge_group", "[", "1", "]", "-", "edge_group", "[", "0", "]", "<=", "num_per_group", ":", "\n", "# this group already meets the num_per_group requirement", "\n", "                ", "pbar", ".", "update", "(", "1", ")", "\n", "continue", "\n", "", "for", "idx_edge", "in", "range", "(", "edge_group", "[", "0", "]", ",", "edge_group", "[", "1", "]", ")", ":", "\n", "# edge", "\n", "                ", "for", "idx_op", "in", "range", "(", "len", "(", "arch_parameters", "[", "idx_ct", "]", "[", "idx_edge", "]", ")", ")", ":", "\n", "# op", "\n", "                    ", "if", "alpha_active", "[", "idx_ct", "]", "[", "idx_edge", ",", "idx_op", "]", ">", "0", ":", "\n", "# this edge-op not pruned yet", "\n", "                        ", "_arch_param", "=", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "arch_parameters", "]", "\n", "_arch_param", "[", "idx_ct", "]", "[", "idx_edge", ",", "idx_op", "]", "=", "-", "INF", "\n", "# ##### get ntk (score) ########", "\n", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "if", "xargs", ".", "ntk_type", "in", "[", "'NTK'", ",", "'MetaNTK_anl'", "]", ":", "\n", "                            ", "network", "=", "convert_model", "(", "network", ",", "xargs", ".", "norm_type", ")", "\n", "", "network", ".", "set_alphas", "(", "_arch_param", ")", "\n", "ntk_delta", "=", "[", "]", "\n", "repeat", "=", "xargs", ".", "repeat", "\n", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "# random reinit", "\n", "                            ", "init_model", "(", "network_origin", ",", "xargs", ".", "init", "+", "\"_fanout\"", "if", "xargs", ".", "init", ".", "startswith", "(", "'kaiming'", ")", "else", "xargs", ".", "init", ")", "# for backward", "\n", "# make sure network_origin and network are identical", "\n", "for", "param_ori", ",", "param", "in", "zip", "(", "network_origin", ".", "parameters", "(", ")", ",", "network", ".", "parameters", "(", ")", ")", ":", "\n", "                                ", "param", ".", "data", ".", "copy_", "(", "param_ori", ".", "data", ")", "\n", "", "network", ".", "set_alphas", "(", "_arch_param", ")", "\n", "if", "xargs", ".", "only_lrs", ":", "\n", "                                ", "ntk_origin", ",", "ntk", "=", "1.0", ",", "1.0", "\n", "", "else", ":", "\n", "                                ", "if", "xargs", ".", "ntk_type", "==", "'NTK'", ":", "\n", "                                    ", "ntk_origin", ",", "ntk", "=", "get_ntk_n", "(", "loader", ",", "[", "network_origin", ",", "network", "]", ",", "recalbn", "=", "0", ",", "train_mode", "=", "xargs", ".", "bn_mode", ",", "num_batch", "=", "1", ")", "\n", "", "elif", "xargs", ".", "ntk_type", "==", "'MetaNTK_anl'", ":", "\n", "                                    ", "ntk_origin", ",", "ntk", "=", "get_analytical_metantk_n", "(", "loader", ",", "[", "network_origin", ",", "network", "]", ",", "xargs", ".", "n_ways", ",", "algorithm", "=", "xargs", ".", "algorithm", ",", "\n", "inner_lr_time", "=", "xargs", ".", "inner_lr_time", ",", "reg_coef", "=", "xargs", ".", "reg_coef", ",", "recalbn", "=", "0", ",", "train_mode", "=", "xargs", ".", "bn_mode", ",", "\n", "num_batch", "=", "1", ",", "params_types", "=", "xargs", ".", "params_types", ",", "norm_type", "=", "xargs", ".", "norm_type", ")", "\n", "# ####################", "\n", "", "", "ntk_delta", ".", "append", "(", "round", "(", "(", "ntk_origin", "-", "ntk", ")", "/", "ntk_origin", ",", "precision", ")", ")", "\n", "", "ntk_all", ".", "append", "(", "[", "np", ".", "mean", "(", "ntk_delta", ")", ",", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", ")", "# change of ntk", "\n", "network", ".", "zero_grad", "(", ")", "\n", "network_origin", ".", "zero_grad", "(", ")", "\n", "#############################", "\n", "network_thin_origin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", "\n", "network_thin_origin", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "network_thin_origin", ".", "train", "(", ")", "\n", "network_thin", "=", "get_cell_based_tiny_net", "(", "model_config_thin", ")", ".", "cuda", "(", ")", "\n", "network_thin", ".", "set_alphas", "(", "_arch_param", ")", "\n", "network_thin", ".", "train", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "_linear_regions", "=", "[", "]", "\n", "repeat", "=", "xargs", ".", "repeat", "\n", "for", "_", "in", "range", "(", "repeat", ")", ":", "\n", "# random reinit", "\n", "                                ", "init_model", "(", "network_thin_origin", ",", "xargs", ".", "init", "+", "\"_fanin\"", "if", "xargs", ".", "init", ".", "startswith", "(", "'kaiming'", ")", "else", "xargs", ".", "init", ")", "# for forward", "\n", "# make sure network_thin and network_thin_origin are identical", "\n", "for", "param_ori", ",", "param", "in", "zip", "(", "network_thin_origin", ".", "parameters", "(", ")", ",", "network_thin", ".", "parameters", "(", ")", ")", ":", "\n", "                                    ", "param", ".", "data", ".", "copy_", "(", "param_ori", ".", "data", ")", "\n", "", "network_thin", ".", "set_alphas", "(", "_arch_param", ")", "\n", "#####", "\n", "lrc_model", ".", "reinit", "(", "models", "=", "[", "network_thin_origin", ",", "network_thin", "]", ",", "seed", "=", "xargs", ".", "rand_seed", ")", "\n", "_lr", ",", "_lr_2", "=", "lrc_model", ".", "forward_batch_sample", "(", ")", "\n", "_linear_regions", ".", "append", "(", "round", "(", "(", "_lr", "-", "_lr_2", ")", "/", "_lr", ",", "precision", ")", ")", "# change of #Regions", "\n", "lrc_model", ".", "clear", "(", ")", "\n", "", "linear_regions", "=", "np", ".", "mean", "(", "_linear_regions", ")", "\n", "regions_all", ".", "append", "(", "[", "linear_regions", ",", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", ")", "\n", "choice2regions", "[", "(", "idx_ct", ",", "idx_edge", ",", "idx_op", ")", "]", "=", "linear_regions", "\n", "#############################", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "del", "network_thin", "\n", "del", "network_thin_origin", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "# stop and prune this edge group", "\n", "", "", "", "ntk_all", "=", "sorted", "(", "ntk_all", ",", "key", "=", "lambda", "tup", ":", "round_to", "(", "tup", "[", "0", "]", ",", "precision", ")", ",", "reverse", "=", "True", ")", "# descending: we want to prune op to decrease ntk, i.e. to make ntk_origin > ntk", "\n", "# print(\"NTK conds:\", ntk_all)", "\n", "rankings", "=", "{", "}", "# dict of (cell_idx, edge_idx, op_idx): [ntk_rank, regions_rank]", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "ntk_all", ")", ":", "\n", "                ", "if", "idx", "==", "0", ":", "\n", "                    ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "idx", "]", "\n", "", "else", ":", "\n", "                    ", "if", "data", "[", "0", "]", "==", "ntk_all", "[", "idx", "-", "1", "]", "[", "0", "]", ":", "\n", "# same ntk as previous", "\n", "                        ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "rankings", "[", "ntk_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                        ", "rankings", "[", "data", "[", "1", "]", "]", "=", "[", "rankings", "[", "ntk_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "0", "]", "+", "1", "]", "\n", "", "", "", "regions_all", "=", "sorted", "(", "regions_all", ",", "key", "=", "lambda", "tup", ":", "round_to", "(", "tup", "[", "0", "]", ",", "precision", ")", ",", "reverse", "=", "False", ")", "# ascending: we want to prune op to increase lr, i.e. to make lr < lr_2", "\n", "# print(\"#Regions:\", regions_all)", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "regions_all", ")", ":", "\n", "                ", "if", "idx", "==", "0", ":", "\n", "                    ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "                    ", "if", "data", "[", "0", "]", "==", "regions_all", "[", "idx", "-", "1", "]", "[", "0", "]", ":", "\n", "# same #Regions as previous", "\n", "                        ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "rankings", "[", "regions_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                        ", "rankings", "[", "data", "[", "1", "]", "]", ".", "append", "(", "rankings", "[", "regions_all", "[", "idx", "-", "1", "]", "[", "1", "]", "]", "[", "1", "]", "+", "1", ")", "\n", "", "", "", "rankings_list", "=", "[", "[", "k", ",", "v", "]", "for", "k", ",", "v", "in", "rankings", ".", "items", "(", ")", "]", "# list of (cell_idx, edge_idx, op_idx), [ntk_rank, regions_rank]", "\n", "# ascending by sum of two rankings", "\n", "rankings_sum", "=", "sorted", "(", "rankings_list", ",", "key", "=", "lambda", "tup", ":", "sum", "(", "tup", "[", "1", "]", ")", ",", "reverse", "=", "False", ")", "# list of (cell_idx, edge_idx, op_idx), [ntk_rank, regions_rank]", "\n", "choices", "=", "[", "item", "[", "0", "]", "for", "item", "in", "rankings_sum", "[", ":", "-", "num_per_group", "]", "]", "\n", "# print(\"Final Ranking:\", rankings_sum)", "\n", "# print(\"Pruning Choices:\", choices)", "\n", "for", "(", "cell_idx", ",", "edge_idx", ",", "op_idx", ")", "in", "choices", ":", "\n", "                ", "arch_parameters", "[", "cell_idx", "]", ".", "data", "[", "edge_idx", ",", "op_idx", "]", "=", "-", "INF", "\n", "# reinit", "\n", "", "ntk_all", "=", "[", "]", "# (ntk, (edge_idx, op_idx))", "\n", "regions_all", "=", "[", "]", "# (regions, (edge_idx, op_idx))", "\n", "choice2regions", "=", "{", "}", "# (edge_idx, op_idx): regions", "\n", "\n", "", "", "return", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.is_single_path": [[355, 363], ["network.get_alphas", "torch.cat", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas"], ["", "def", "is_single_path", "(", "network", ")", ":", "\n", "    ", "arch_parameters", "=", "network", ".", "get_alphas", "(", ")", "\n", "edge_active", "=", "torch", ".", "cat", "(", "[", "(", "nn", ".", "functional", ".", "softmax", "(", "alpha", ",", "1", ")", ">", "0.01", ")", ".", "float", "(", ")", ".", "sum", "(", "1", ")", "for", "alpha", "in", "arch_parameters", "]", ",", "dim", "=", "0", ")", "\n", "for", "edge", "in", "edge_active", ":", "\n", "        ", "assert", "edge", ">", "0", "\n", "if", "edge", ">", "1", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.main": [[365, 555], ["os.getpid", "torch.cuda.is_available", "procedures.prepare_seed", "datasets.get_datasets", "easydict.EasyDict", "procedures.prepare_logger", "torch.utils.data.DataLoader", "procedures.prepare_logger.log", "procedures.prepare_logger.log", "models.get_search_spaces", "models.get_cell_based_tiny_net", "procedures.prepare_logger.log", "procedures.Linear_Region_Collector", "utils.get_model_infos", "procedures.prepare_logger.log", "procedures.prepare_logger.log", "procedures.prepare_logger.log", "network.cuda.cuda", "time.time", "arch_parameters_history.append", "arch_parameters_history_npy.append", "numpy.save", "procedures.prepare_logger.log", "procedures.prepare_logger.log", "time.time", "procedures.prepare_logger.log", "procedures.prepare_logger.log", "str", "procedures.prepare_logger.close", "easydict.EasyDict", "easydict.EasyDict", "alpha.detach().clone", "nas_201_api.NASBench201API", "network.cuda.genotype", "os.path.join", "prune_metantknas.is_single_path", "torch.cuda.empty_cache", "print", "prune_metantknas.prune_func_rank", "models.get_cell_based_tiny_net", "network.cuda.cuda", "network.cuda.set_alphas", "arch_parameters_history.append", "arch_parameters_history_npy.append", "numpy.save", "network.cuda.genotype", "procedures.prepare_logger.log", "print", "prune_metantknas.prune_func_rank_group", "models.get_cell_based_tiny_net", "network.cuda.cuda", "network.cuda.set_alphas", "arch_parameters_history.append", "arch_parameters_history_npy.append", "numpy.save", "NotImplementedError", "network.cuda.genotype", "procedures.prepare_logger.log", "time.strftime", "len", "easydict.EasyDict", "easydict.EasyDict", "network.cuda.get_alphas", "len", "log_utils.time_string", "alpha.detach().clone", "alpha.detach().clone().cpu().numpy", "os.path.join", "os.path.join", "network.cuda.genotype", "eval_searched_arch.main", "NotImplementedError", "time.gmtime", "bool", "bool", "alpha.detach", "alpha.detach().clone", "alpha.detach().clone().cpu().numpy", "alpha.detach().clone", "alpha.detach().clone().cpu().numpy", "NotImplementedError", "os.path.dirname", "str", "str", "str", "str", "str", "str", "str", "str", "str", "os.path.join", "os.path.join", "nas_201_api.NASBench201API.query_by_arch", "time.time", "bool", "bool", "alpha.detach", "alpha.detach().clone().cpu", "str", "str", "str", "alpha.detach", "alpha.detach().clone().cpu", "str", "alpha.detach", "alpha.detach().clone().cpu", "network.cuda.get_alphas", "alpha.detach().clone", "xargs.save_dir.split", "network.cuda.get_alphas", "alpha.detach().clone", "alpha.detach().clone", "alpha.detach", "alpha.detach", "alpha.detach"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_seed", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.get_datasets", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_logger", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_search_spaces", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.is_single_path", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.prune_func_rank", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.prune_func_rank_group", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_string", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype", "home.repos.pwc.inspect_result.yitewang_metantk-nas.None.prune_metantknas.main", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_by_arch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas"], ["", "def", "main", "(", "xargs", ")", ":", "\n", "    ", "PID", "=", "os", ".", "getpid", "(", ")", "\n", "assert", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'CUDA is not available.'", "\n", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "prepare_seed", "(", "xargs", ".", "rand_seed", ")", "\n", "\n", "if", "xargs", ".", "timestamp", "==", "'none'", ":", "\n", "        ", "xargs", ".", "timestamp", "=", "\"{:}\"", ".", "format", "(", "time", ".", "strftime", "(", "'%h-%d-%C_%H-%M-%s'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n", "", "train_data", ",", "valid_data", ",", "xshape", ",", "class_num", "=", "get_datasets", "(", "xargs", ",", "-", "1", ")", "\n", "\n", "##### config & logging #####", "\n", "config", "=", "edict", "(", ")", "\n", "config", ".", "class_num", "=", "class_num", "\n", "config", ".", "xshape", "=", "xshape", "\n", "config", ".", "batch_size", "=", "xargs", ".", "batch_size", "\n", "xargs", ".", "save_dir", "=", "xargs", ".", "save_dir", "+", "\"/repeat%d-prunNum%d-prec%d-%s-batch%d\"", "%", "(", "\n", "xargs", ".", "repeat", ",", "xargs", ".", "prune_number", ",", "xargs", ".", "precision", ",", "xargs", ".", "init", ",", "config", "[", "\"batch_size\"", "]", ")", "+", "\"/{:}/seed{:}\"", ".", "format", "(", "xargs", ".", "timestamp", ",", "xargs", ".", "rand_seed", ")", "\n", "config", ".", "save_dir", "=", "xargs", ".", "save_dir", "\n", "logger", "=", "prepare_logger", "(", "xargs", ")", "\n", "###############", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "xargs", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "logger", ".", "log", "(", "'||||||| {:10s} ||||||| Train-Loader-Num={:}, batch size={:}'", ".", "format", "(", "xargs", ".", "dataset", ",", "len", "(", "train_loader", ")", ",", "config", ".", "batch_size", ")", ")", "\n", "logger", ".", "log", "(", "'||||||| {:10s} ||||||| Config={:}'", ".", "format", "(", "xargs", ".", "dataset", ",", "config", ")", ")", "\n", "\n", "search_space", "=", "get_search_spaces", "(", "'cell'", ",", "xargs", ".", "search_space_name", ")", "\n", "if", "xargs", ".", "search_space_name", "==", "'nas-bench-201'", ":", "\n", "        ", "model_config", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "'C'", ":", "3", ",", "'N'", ":", "1", ",", "'depth'", ":", "-", "1", ",", "'use_stem'", ":", "True", ",", "\n", "'max_nodes'", ":", "xargs", ".", "max_nodes", ",", "'num_classes'", ":", "class_num", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'ntk_type'", ":", "xargs", ".", "ntk_type", ",", "\n", "}", ")", "\n", "model_config_thin", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "'C'", ":", "1", ",", "'N'", ":", "1", ",", "'depth'", ":", "1", ",", "'use_stem'", ":", "False", ",", "\n", "'max_nodes'", ":", "xargs", ".", "max_nodes", ",", "'num_classes'", ":", "class_num", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'ntk_type'", ":", "xargs", ".", "ntk_type", ",", "\n", "}", ")", "\n", "", "elif", "xargs", ".", "search_space_name", "in", "[", "'darts'", ",", "'darts_fewshot'", "]", ":", "\n", "# Different than TE-NAS, we do not use thin proxy network to compute NTK/MetaNTK,", "\n", "# Instead, we use network during augmentation to compute NTK/MetaNTK", "\n", "        ", "model_config", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "# 'C': 1, 'N': 1, 'depth': 2, 'use_stem': True, 'stem_multiplier': 1,", "\n", "'C'", ":", "xargs", ".", "ntk_channels", ",", "'N'", ":", "xargs", ".", "ntk_N", ",", "'depth'", ":", "xargs", ".", "ntk_layers", ",", "'use_stem'", ":", "True", ",", "'stem_multiplier'", ":", "xargs", ".", "ntk_stemm", ",", "\n", "'feature_scale_rate'", ":", "xargs", ".", "ntk_fsr", ",", "\n", "'num_classes'", ":", "class_num", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'super_type'", ":", "xargs", ".", "super_type", ",", "\n", "'steps'", ":", "xargs", ".", "max_nodes", ",", "\n", "'multiplier'", ":", "xargs", ".", "max_nodes", ",", "\n", "'ntk_type'", ":", "xargs", ".", "ntk_type", ",", "\n", "}", ")", "\n", "# For linear regions, we keep the same method used in TE-NAS", "\n", "model_config_thin", "=", "edict", "(", "{", "'name'", ":", "'DARTS-V1'", ",", "\n", "'C'", ":", "1", ",", "'N'", ":", "1", ",", "'depth'", ":", "2", ",", "'use_stem'", ":", "False", ",", "'stem_multiplier'", ":", "1", ",", "\n", "'feature_scale_rate'", ":", "2", ",", "\n", "'max_nodes'", ":", "xargs", ".", "max_nodes", ",", "'num_classes'", ":", "class_num", ",", "\n", "'space'", ":", "search_space", ",", "\n", "'affine'", ":", "True", ",", "'track_running_stats'", ":", "bool", "(", "xargs", ".", "track_running_stats", ")", ",", "\n", "'super_type'", ":", "xargs", ".", "super_type", ",", "\n", "'steps'", ":", "xargs", ".", "max_nodes", ",", "\n", "'multiplier'", ":", "xargs", ".", "max_nodes", ",", "\n", "'ntk_type'", ":", "xargs", ".", "ntk_type", ",", "\n", "}", ")", "\n", "", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", "\n", "logger", ".", "log", "(", "'model-config : {:}'", ".", "format", "(", "model_config", ")", ")", "\n", "arch_parameters", "=", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "network", ".", "get_alphas", "(", ")", "]", "\n", "for", "alpha", "in", "arch_parameters", ":", "\n", "        ", "alpha", "[", ":", ",", ":", "]", "=", "0", "\n", "\n", "# TODO Linear_Region_Collector", "\n", "", "lrc_model", "=", "Linear_Region_Collector", "(", "xargs", ",", "input_size", "=", "(", "1000", ",", "1", ",", "3", ",", "3", ")", ",", "sample_batch", "=", "3", ",", "dataset", "=", "xargs", ".", "dataset", ",", "data_path", "=", "xargs", ".", "data_path", ",", "seed", "=", "xargs", ".", "rand_seed", ")", "\n", "\n", "# ### all params trainable (except train_bn) #########################", "\n", "flop", ",", "param", "=", "get_model_infos", "(", "network", ",", "xshape", ")", "\n", "logger", ".", "log", "(", "'FLOP = {:.2f} M, Params = {:.2f} MB'", ".", "format", "(", "flop", ",", "param", ")", ")", "\n", "logger", ".", "log", "(", "'search-space [{:} ops] : {:}'", ".", "format", "(", "len", "(", "search_space", ")", ",", "search_space", ")", ")", "\n", "if", "xargs", ".", "arch_nas_dataset", "is", "None", "or", "xargs", ".", "search_space_name", "in", "[", "'darts'", ",", "'darts_fewshot'", "]", ":", "\n", "        ", "api", "=", "None", "\n", "", "else", ":", "\n", "        ", "api", "=", "API", "(", "xargs", ".", "arch_nas_dataset", ")", "\n", "", "logger", ".", "log", "(", "'{:} create API = {:} done'", ".", "format", "(", "time_string", "(", ")", ",", "api", ")", ")", "\n", "\n", "network", "=", "network", ".", "cuda", "(", ")", "\n", "\n", "genotypes", "=", "{", "}", ";", "genotypes", "[", "'arch'", "]", "=", "{", "-", "1", ":", "network", ".", "genotype", "(", ")", "}", "\n", "\n", "arch_parameters_history", "=", "[", "]", "\n", "arch_parameters_history_npy", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "epoch", "=", "-", "1", "\n", "\n", "for", "alpha", "in", "arch_parameters", ":", "\n", "        ", "alpha", "[", ":", ",", "0", "]", "=", "-", "INF", "\n", "", "arch_parameters_history", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "arch_parameters_history_npy", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "xargs", ".", "save_dir", ",", "\"arch_parameters_history.npy\"", ")", ",", "arch_parameters_history_npy", ")", "\n", "while", "not", "is_single_path", "(", "network", ")", ":", "\n", "        ", "epoch", "+=", "1", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "print", "(", "\"<< ============== JOB (PID = %d) %s ============== >>\"", "%", "(", "PID", ",", "'/'", ".", "join", "(", "xargs", ".", "save_dir", ".", "split", "(", "\"/\"", ")", "[", "-", "6", ":", "]", ")", ")", ")", "\n", "\n", "arch_parameters", ",", "op_pruned", "=", "prune_func_rank", "(", "xargs", ",", "arch_parameters", ",", "model_config", ",", "model_config_thin", ",", "train_loader", ",", "lrc_model", ",", "search_space", ",", "logger", ",", "\n", "precision", "=", "xargs", ".", "precision", ",", "\n", "prune_number", "=", "xargs", ".", "prune_number", "\n", ")", "\n", "# rebuild supernet", "\n", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", "\n", "network", "=", "network", ".", "cuda", "(", ")", "\n", "network", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "\n", "arch_parameters_history", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "arch_parameters_history_npy", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "xargs", ".", "save_dir", ",", "\"arch_parameters_history.npy\"", ")", ",", "arch_parameters_history_npy", ")", "\n", "genotypes", "[", "'arch'", "]", "[", "epoch", "]", "=", "network", ".", "genotype", "(", ")", "\n", "\n", "logger", ".", "log", "(", "'operators remaining (1s) and prunned (0s)\\n{:}'", ".", "format", "(", "'\\n'", ".", "join", "(", "[", "str", "(", "(", "alpha", ">", "-", "INF", ")", ".", "int", "(", ")", ")", "for", "alpha", "in", "network", ".", "get_alphas", "(", ")", "]", ")", ")", ")", "\n", "\n", "", "if", "xargs", ".", "search_space_name", "in", "[", "'darts'", ",", "'darts_fewshot'", "]", ":", "\n", "        ", "print", "(", "\"===>>> Prune Edge Groups...\"", ")", "\n", "if", "xargs", ".", "max_nodes", "==", "4", ":", "\n", "            ", "edge_groups", "=", "[", "(", "0", ",", "2", ")", ",", "(", "2", ",", "5", ")", ",", "(", "5", ",", "9", ")", ",", "(", "9", ",", "14", ")", "]", "\n", "", "elif", "xargs", ".", "max_nodes", "==", "3", ":", "\n", "            ", "edge_groups", "=", "[", "(", "0", ",", "2", ")", ",", "(", "2", ",", "5", ")", ",", "(", "5", ",", "9", ")", "]", "\n", "", "arch_parameters", "=", "prune_func_rank_group", "(", "xargs", ",", "arch_parameters", ",", "model_config", ",", "model_config_thin", ",", "train_loader", ",", "lrc_model", ",", "search_space", ",", "logger", ",", "\n", "edge_groups", "=", "edge_groups", ",", "num_per_group", "=", "2", ",", "\n", "precision", "=", "xargs", ".", "precision", ",", "\n", ")", "\n", "network", "=", "get_cell_based_tiny_net", "(", "model_config", ")", "\n", "network", "=", "network", ".", "cuda", "(", ")", "\n", "network", ".", "set_alphas", "(", "arch_parameters", ")", "\n", "arch_parameters_history", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "arch_parameters_history_npy", ".", "append", "(", "[", "alpha", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "alpha", "in", "arch_parameters", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "xargs", ".", "save_dir", ",", "\"arch_parameters_history.npy\"", ")", ",", "arch_parameters_history_npy", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Only support darts and darts_fewshot search space.'", ")", "\n", "\n", "", "logger", ".", "log", "(", "'<<<--->>> End: {:}'", ".", "format", "(", "network", ".", "genotype", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "'operators remaining (1s) and prunned (0s)\\n{:}'", ".", "format", "(", "'\\n'", ".", "join", "(", "[", "str", "(", "(", "alpha", ">", "-", "INF", ")", ".", "int", "(", ")", ")", "for", "alpha", "in", "network", ".", "get_alphas", "(", ")", "]", ")", ")", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "log", "(", "'\\n'", "+", "'-'", "*", "100", ")", "\n", "logger", ".", "log", "(", "\"Time spent: %d s\"", "%", "(", "end_time", "-", "start_time", ")", ")", "\n", "\n", "# Delete existing model and data loader", "\n", "searched_arch", "=", "str", "(", "network", ".", "genotype", "(", ")", ")", "\n", "del", "network", "\n", "del", "train_loader", "\n", "del", "train_data", "\n", "del", "valid_data", "\n", "\n", "# Augmenting Architecture searched by our search method if train_after_search is True", "\n", "if", "xargs", ".", "train_after_search", ":", "\n", "        ", "if", "xargs", ".", "dataset", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", "]", ":", "\n", "            ", "dataset_for_eval", "=", "'miniImageNet'", "\n", "", "elif", "xargs", ".", "dataset", "in", "[", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "            ", "dataset_for_eval", "=", "'tieredImageNet'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Only support train after search for miniImageNet and tieredImageNet'", ")", "\n", "\n", "", "if", "xargs", ".", "train_method", "==", "'rfs'", ":", "\n", "            ", "evaluation_cmd", "=", "[", "'--model'", ",", "'augmentcnn'", ",", "\n", "'--dataset'", ",", "dataset_for_eval", ",", "'--data_root'", ",", "os", ".", "path", ".", "dirname", "(", "xargs", ".", "data_path", ")", ",", "\n", "'--init_channels'", ",", "str", "(", "xargs", ".", "aug_channels", ")", ",", "'--layers'", ",", "str", "(", "xargs", ".", "aug_layers", ")", ",", "'--aug_dp'", ",", "str", "(", "xargs", ".", "aug_dp", ")", ",", "\n", "'--aug_stemm'", ",", "str", "(", "xargs", ".", "aug_stemm", ")", ",", "'--aug_fsr'", ",", "str", "(", "xargs", ".", "aug_fsr", ")", ",", "\n", "'--lr_decay_epochs'", ",", "str", "(", "xargs", ".", "aug_lr_decay_epochs", ")", ",", "'--epochs'", ",", "str", "(", "xargs", ".", "aug_epochs", ")", ",", "\n", "'--learning_rate'", ",", "str", "(", "xargs", ".", "aug_lr", ")", ",", "\n", "'--seed'", ",", "'-1'", ",", "\n", "'--batch_size'", ",", "str", "(", "xargs", ".", "aug_batchsize", ")", ",", "'--genotype'", ",", "searched_arch", ",", "\n", "'--tb_path'", ",", "os", ".", "path", ".", "join", "(", "str", "(", "xargs", ".", "save_dir", ")", ",", "'logs'", ")", ",", "'--model_path'", ",", "os", ".", "path", ".", "join", "(", "str", "(", "xargs", ".", "save_dir", ")", ",", "'model'", ")", ",", "]", "\n", "# 5 way 5 shot", "\n", "eval_searched_arch", ".", "main", "(", "evaluation_cmd", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Only support rfs training now.'", ")", "\n", "\n", "# check the performance from the architecture dataset", "\n", "", "", "if", "api", "is", "not", "None", ":", "\n", "        ", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "api", ".", "query_by_arch", "(", "genotypes", "[", "'arch'", "]", "[", "epoch", "]", ")", ")", ")", "\n", "\n", "", "logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.count_parameters_in_MB": [[6, 11], ["isinstance", "numpy.sum", "numpy.sum", "numpy.prod", "numpy.prod", "v.size", "model.parameters", "v.size"], "function", ["None"], ["def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.get_model_infos": [[13, 40], ["flop_benchmark.add_flops_counting_methods", "add_flops_counting_methods.eval", "torch.rand", "torch.rand", "flop_benchmark.count_parameters_in_MB", "hasattr", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "add_flops_counting_methods.apply", "next", "cache_inputs.cuda.cuda", "torch.no_grad", "torch.no_grad", "add_flops_counting_methods.", "flop_benchmark.compute_average_flops_cost", "flop_benchmark.count_parameters_in_MB", "print", "print", "add_flops_counting_methods.parameters", "add_flops_counting_methods.auxiliary_param"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.compute_average_flops_cost", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param"], ["", "", "def", "get_model_infos", "(", "model", ",", "shape", ")", ":", "\n", "#model = copy.deepcopy( model )", "\n", "\n", "    ", "model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#cache_inputs = torch.zeros(*shape).cuda()", "\n", "#cache_inputs = torch.zeros(*shape)", "\n", "cache_inputs", "=", "torch", ".", "rand", "(", "*", "shape", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "cache_inputs", "=", "cache_inputs", ".", "cuda", "(", ")", "\n", "#print_log('In the calculating function : cache input size : {:}'.format(cache_inputs.size()), log)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", "=", "model", "(", "cache_inputs", ")", "\n", "", "FLOPs", "=", "compute_average_flops_cost", "(", "model", ")", "/", "1e6", "\n", "Param", "=", "count_parameters_in_MB", "(", "model", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'auxiliary_param'", ")", ":", "\n", "        ", "aux_params", "=", "count_parameters_in_MB", "(", "model", ".", "auxiliary_param", "(", ")", ")", "\n", "print", "(", "'The auxiliary params of this model is : {:}'", ".", "format", "(", "aux_params", ")", ")", "\n", "print", "(", "'We remove the auxiliary params from the total params ({:}) when counting'", ".", "format", "(", "Param", ")", ")", "\n", "Param", "=", "Param", "-", "aux_params", "\n", "\n", "#print_log('FLOPs : {:} MB'.format(FLOPs), log)", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "apply", "(", "remove_hook_function", ")", "\n", "return", "FLOPs", ",", "Param", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.add_flops_counting_methods": [[43, 49], ["flop_benchmark.add_batch_counter_hook_function", "model.apply", "model.apply", "flop_benchmark.remove_hook_function"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.remove_hook_function"], ["", "def", "add_flops_counting_methods", "(", "model", ")", ":", "\n", "    ", "model", ".", "__batch_counter__", "=", "0", "\n", "add_batch_counter_hook_function", "(", "model", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.compute_average_flops_cost": [[52, 66], ["model.modules", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "batches_count", "=", "model", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "#or isinstance(module, torch.nn.AvgPool2d) or isinstance(module, torch.nn.MaxPool2d) \\", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.pool_flops_counter_hook": [[69, 77], ["inputs[].size", "inputs[].size", "inputs[].size"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "pool_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "pool_module", ".", "kernel_size", "\n", "out_C", ",", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "1", ":", "]", "\n", "assert", "out_C", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", ",", "'{:} vs. {:}'", ".", "format", "(", "out_C", ",", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "overall_flops", "=", "batch_size", "*", "out_C", "*", "output_height", "*", "output_width", "*", "kernel_size", "*", "kernel_size", "\n", "pool_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.self_calculate_flops_counter_hook": [[79, 82], ["flop_benchmark..calculate_flop_self"], "function", ["None"], ["", "def", "self_calculate_flops_counter_hook", "(", "self_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "overall_flops", "=", "self_module", ".", "calculate_flop_self", "(", "inputs", "[", "0", "]", ".", "shape", ",", "output", ".", "shape", ")", "\n", "self_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.fc_flops_counter_hook": [[84, 92], ["inputs[].size", "inputs[].size", "output.size"], "function", ["None"], ["", "def", "fc_flops_counter_hook", "(", "fc_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "xin", ",", "xout", "=", "fc_module", ".", "in_features", ",", "fc_module", ".", "out_features", "\n", "assert", "xin", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "and", "xout", "==", "output", ".", "size", "(", "1", ")", ",", "'IO=({:}, {:})'", ".", "format", "(", "xin", ",", "xout", ")", "\n", "overall_flops", "=", "batch_size", "*", "xin", "*", "xout", "\n", "if", "fc_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "batch_size", "*", "xout", "\n", "", "fc_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.conv1d_flops_counter_hook": [[94, 109], ["inputs[].size"], "function", ["None"], ["", "def", "conv1d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "outL", "=", "outputs", ".", "shape", "[", "-", "1", "]", "\n", "[", "kernel", "]", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "outL", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.conv2d_flops_counter_hook": [[111, 127], ["inputs[].size"], "function", ["None"], ["", "def", "conv2d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.batch_counter_hook": [[129, 134], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "inputs", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "inputs", "=", "inputs", "[", "0", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.add_batch_counter_hook_function": [[136, 140], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.add_flops_counter_variable_or_reset": [[142, 148], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.add_flops_counter_hook_function": [[150, 171], ["isinstance", "isinstance", "hasattr", "module.register_forward_hook", "isinstance", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook", "isinstance", "isinstance", "hasattr", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv2d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv1d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "fc_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "# self-defined module", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "self_calculate_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.utils.flop_benchmark.remove_hook_function": [[173, 182], ["hasattr", "hasattr", "getattr", "getattr.remove", "delattr"], "function", ["None"], ["", "", "", "def", "remove_hook_function", "(", "module", ")", ":", "\n", "    ", "hookers", "=", "[", "'__batch_counter_handle__'", ",", "'__flops_handle__'", "]", "\n", "for", "hooker", "in", "hookers", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "hooker", ")", ":", "\n", "            ", "handle", "=", "getattr", "(", "module", ",", "hooker", ")", "\n", "handle", ".", "remove", "(", ")", "\n", "", "", "keys", "=", "[", "'__flops__'", ",", "'__batch_counter__'", ",", "'__flops__'", "]", "+", "hookers", "\n", "for", "ckey", "in", "keys", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "ckey", ")", ":", "delattr", "(", "module", ",", "ckey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.ImageNet16.__init__": [[50, 83], ["enumerate", "numpy.vstack().reshape", "DownsampledImageNet.ImageNet16.data.transpose", "DownsampledImageNet.ImageNet16._check_integrity", "RuntimeError", "os.path.join", "zip", "open", "DownsampledImageNet.ImageNet16.data.append", "DownsampledImageNet.ImageNet16.targets.extend", "numpy.vstack", "isinstance", "pickle.load", "pickle.load", "new_data.append", "new_targets.append"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.ImageNet16._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "train", ",", "transform", ",", "use_num_of_class_only", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "train", "=", "train", "# training set or valid set", "\n", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", ")", "\n", "\n", "if", "self", ".", "train", ":", "downloaded_list", "=", "self", ".", "train_list", "\n", "else", ":", "downloaded_list", "=", "self", ".", "valid_list", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "for", "i", ",", "(", "file_name", ",", "checksum", ")", "in", "enumerate", "(", "downloaded_list", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "file_name", ")", "\n", "#print ('Load {:}/{:02d}-th : {:}'.format(i, len(downloaded_list), file_path))", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "if", "use_num_of_class_only", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "use_num_of_class_only", ",", "int", ")", "and", "use_num_of_class_only", ">", "0", "and", "use_num_of_class_only", "<", "1000", ",", "'invalid use_num_of_class_only : {:}'", ".", "format", "(", "use_num_of_class_only", ")", "\n", "new_data", ",", "new_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "I", ",", "L", "in", "zip", "(", "self", ".", "data", ",", "self", ".", "targets", ")", ":", "\n", "                ", "if", "1", "<=", "L", "<=", "use_num_of_class_only", ":", "\n", "                    ", "new_data", ".", "append", "(", "I", ")", "\n", "new_targets", ".", "append", "(", "L", ")", "\n", "", "", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "#    self.mean.append(entry['mean'])", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.ImageNet16.__getitem__": [[92, 101], ["PIL.Image.fromarray", "DownsampledImageNet.ImageNet16.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "-", "1", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.ImageNet16.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.ImageNet16._check_integrity": [[105, 113], ["os.path.join", "DownsampledImageNet.check_integrity"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.check_integrity"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "valid_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.calculate_md5": [[11, 17], ["hashlib.md5", "hashlib.md5.hexdigest", "open", "iter", "hashlib.md5.update", "f.read"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update"], ["", "def", "calculate_md5", "(", "fpath", ",", "chunk_size", "=", "1024", "*", "1024", ")", ":", "\n", "    ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "fpath", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "iter", "(", "lambda", ":", "f", ".", "read", "(", "chunk_size", ")", ",", "b''", ")", ":", "\n", "            ", "md5", ".", "update", "(", "chunk", ")", "\n", "", "", "return", "md5", ".", "hexdigest", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.check_md5": [[19, 21], ["DownsampledImageNet.calculate_md5"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.calculate_md5"], ["", "def", "check_md5", "(", "fpath", ",", "md5", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "md5", "==", "calculate_md5", "(", "fpath", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.check_integrity": [[23, 27], ["os.path.isfile", "DownsampledImageNet.check_md5"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.DownsampledImageNet.check_md5"], ["", "def", "check_integrity", "(", "fpath", ",", "md5", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "return", "False", "\n", "if", "md5", "is", "None", ":", "return", "True", "\n", "else", ":", "return", "check_md5", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.SearchDatasetWrap.SearchDataset.__init__": [[7, 25], ["isinstance", "len", "train_split.copy", "valid_split.copy", "train_split.copy", "valid_split.copy", "len", "len", "set().intersection", "set", "len", "set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "data", ",", "train_split", ",", "valid_split", ",", "check", "=", "True", ")", ":", "\n", "        ", "self", ".", "datasetname", "=", "name", "\n", "if", "isinstance", "(", "data", ",", "(", "list", ",", "tuple", ")", ")", ":", "# new type of SearchDataset", "\n", "            ", "assert", "len", "(", "data", ")", "==", "2", ",", "'invalid length: {:}'", ".", "format", "(", "len", "(", "data", ")", ")", "\n", "self", ".", "train_data", "=", "data", "[", "0", "]", "\n", "self", ".", "valid_data", "=", "data", "[", "1", "]", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "self", ".", "mode_str", "=", "'V2'", "# new mode", "\n", "", "else", ":", "\n", "            ", "self", ".", "mode_str", "=", "'V1'", "# old mode", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "train_split", "=", "train_split", ".", "copy", "(", ")", "\n", "self", ".", "valid_split", "=", "valid_split", ".", "copy", "(", ")", "\n", "if", "check", ":", "\n", "                ", "intersection", "=", "set", "(", "train_split", ")", ".", "intersection", "(", "set", "(", "valid_split", ")", ")", "\n", "assert", "len", "(", "intersection", ")", "==", "0", ",", "'the splitted train and validation sets should have no intersection'", "\n", "", "", "self", ".", "length", "=", "len", "(", "self", ".", "train_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.SearchDatasetWrap.SearchDataset.__repr__": [[26, 28], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(name={datasetname}, train={tr_L}, valid={val_L}, version={ver})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "datasetname", "=", "self", ".", "datasetname", ",", "tr_L", "=", "len", "(", "self", ".", "train_split", ")", ",", "val_L", "=", "len", "(", "self", ".", "valid_split", ")", ",", "ver", "=", "self", ".", "mode_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.SearchDatasetWrap.SearchDataset.__len__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.SearchDatasetWrap.SearchDataset.__getitem__": [[32, 44], ["random.choice", "ValueError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", ">=", "0", "and", "index", "<", "self", ".", "length", ",", "'invalid index = {:}'", ".", "format", "(", "index", ")", "\n", "train_index", "=", "self", ".", "train_split", "[", "index", "]", "\n", "valid_index", "=", "random", ".", "choice", "(", "self", ".", "valid_split", ")", "\n", "if", "self", ".", "mode_str", "==", "'V1'", ":", "\n", "            ", "train_image", ",", "train_label", "=", "self", ".", "data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "data", "[", "valid_index", "]", "\n", "", "elif", "self", ".", "mode_str", "==", "'V2'", ":", "\n", "            ", "train_image", ",", "train_label", "=", "self", ".", "train_data", "[", "train_index", "]", "\n", "valid_image", ",", "valid_label", "=", "self", ".", "valid_data", "[", "valid_index", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid mode : {:}'", ".", "format", "(", "self", ".", "mode_str", ")", ")", "\n", "return", "train_image", ",", "train_label", ",", "valid_image", ",", "valid_label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.TieredImageNet.__init__": [[11, 81], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "os.path.join", "os.path.join", "numpy.load", "tiered_imagenet.TieredImageNet._load_labels", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "numpy.min", "numpy.max", "len", "tiered_imagenet.TieredImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "tiered_imagenet.TieredImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet._load_labels"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "args", ".", "data_path", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "# modified code to load tieredImageNet", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "image_file_pattern", "%", "partition", ")", "\n", "self", ".", "imgs", "=", "np", ".", "load", "(", "image_file", ")", "[", "'images'", "]", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "label_file_pattern", "%", "partition", ")", "\n", "self", ".", "labels", "=", "self", ".", "_load_labels", "(", "label_file", ")", "[", "'labels'", "]", "\n", "\n", "# pre-process for contrastive sampling", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.TieredImageNet.__getitem__": [[82, 95], ["numpy.asarray().astype", "tiered_imagenet.TieredImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.TieredImageNet.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.TieredImageNet._load_labels": [[99, 111], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_labels", "(", "file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.MetaTieredImageNet.__init__": [[115, 152], ["tiered_imagenet.TieredImageNet.__init__", "list", "range", "list", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "tiered_imagenet.MetaTieredImageNet.data[].append", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTieredImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "True", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.MetaTieredImageNet.__getitem__": [[153, 188], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "tiered_imagenet.MetaTieredImageNet.train_transform", "tiered_imagenet.MetaTieredImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.tiered_imagenet.MetaTieredImageNet.__len__": [[189, 191], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.CUTOUT.__init__": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.CUTOUT.__repr__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(length={length})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.CUTOUT.__call__": [[38, 54], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.Lighting.__init__": [[67, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alphastd", ",", "\n", "eigval", "=", "imagenet_pca", "[", "'eigval'", "]", ",", "\n", "eigvec", "=", "imagenet_pca", "[", "'eigvec'", "]", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "assert", "eigval", ".", "shape", "==", "(", "3", ",", ")", "\n", "assert", "eigvec", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "self", ".", "eigval", "=", "eigval", "\n", "self", ".", "eigvec", "=", "eigvec", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.Lighting.__call__": [[76, 91], ["rnd.astype.astype.astype", "v.reshape.reshape.reshape", "numpy.dot().reshape", "numpy.add", "PIL.Image.fromarray", "numpy.random.randn", "numpy.asarray", "numpy.clip", "numpy.clip.astype", "numpy.dot"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0.", ":", "\n", "            ", "return", "img", "\n", "", "rnd", "=", "np", ".", "random", ".", "randn", "(", "3", ")", "*", "self", ".", "alphastd", "\n", "rnd", "=", "rnd", ".", "astype", "(", "'float32'", ")", "\n", "v", "=", "rnd", "\n", "old_dtype", "=", "np", ".", "asarray", "(", "img", ")", ".", "dtype", "\n", "v", "=", "v", "*", "self", ".", "eigval", "\n", "v", "=", "v", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inc", "=", "np", ".", "dot", "(", "self", ".", "eigvec", ",", "v", ")", ".", "reshape", "(", "(", "3", ",", ")", ")", "\n", "img", "=", "np", ".", "add", "(", "img", ",", "inc", ")", "\n", "if", "old_dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "old_dtype", ")", ",", "'RGB'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.Lighting.__repr__": [[92, 94], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.get_datasets": [[96, 201], ["torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR100", "torchvision.CIFAR100", "name.startswith", "name.startswith", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "name.startswith", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "len", "len", "os.join", "os.join", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "TypeError", "get_dataset_with_transform.CUTOUT", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "TypeError", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "get_dataset_with_transform.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "len", "len", "DownsampledImageNet.ImageNet16", "DownsampledImageNet.ImageNet16", "len", "len", "mini_imagenet.ImageNet", "mini_imagenet.ImageNet", "len", "len", "mini_imagenet.MetaImageNet", "mini_imagenet.MetaImageNet", "tiered_imagenet.TieredImageNet", "tiered_imagenet.TieredImageNet", "tiered_imagenet.MetaTieredImageNet", "tiered_imagenet.MetaTieredImageNet", "TypeError"], "function", ["None"], ["", "", "def", "get_datasets", "(", "args", ",", "cutout", ")", ":", "\n", "    ", "name", "=", "args", ".", "dataset", "\n", "root", "=", "args", ".", "data_path", "\n", "\n", "if", "name", "==", "'cifar10'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "", "elif", "name", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", ",", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Data Argumentation", "\n", "", "if", "name", "==", "'cifar10'", "or", "name", "==", "'cifar100'", ":", "\n", "        ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "        ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "16", ",", "padding", "=", "2", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "16", ",", "16", ")", "\n", "", "elif", "name", "==", "'tiered'", ":", "\n", "        ", "lists", "=", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "80", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "CenterCrop", "(", "80", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "lists", "=", "[", "\n", "transforms", ".", "Resize", "(", "(", "32", ",", "32", ")", ",", "interpolation", "=", "2", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "name", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", ",", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "        ", "train_transform", ",", "test_transform", "=", "transforms_options", "[", "args", ".", "transform", "]", "\n", "if", "args", ".", "transform", "in", "[", "'A'", ",", "'B'", "]", ":", "\n", "            ", "xshape", "=", "(", "1", ",", "3", ",", "84", ",", "84", ")", "\n", "", "elif", "args", ".", "transform", "==", "'C'", ":", "\n", "            ", "xshape", "=", "(", "1", ",", "3", ",", "80", ",", "80", ")", "\n", "", "elif", "args", ".", "transform", "==", "'D'", ":", "\n", "            ", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "elif", "args", ".", "transform", "==", "'TENAS'", ":", "\n", "            ", "xshape", "=", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "if", "name", "==", "'cifar10'", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "train_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'train'", ")", ",", "train_transform", ")", "\n", "test_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'val'", ")", ",", "test_transform", ")", "\n", "", "elif", "name", "==", "'ImageNet16'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", "", "elif", "name", "==", "'ImageNet16-120'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "120", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "120", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "151700", "and", "len", "(", "test_data", ")", "==", "6000", "\n", "", "elif", "name", "==", "'ImageNet16-150'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "150", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "150", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "190272", "and", "len", "(", "test_data", ")", "==", "7500", "\n", "", "elif", "name", "==", "'ImageNet16-200'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "200", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "200", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "254775", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'MiniImageNet'", ":", "\n", "        ", "train_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'val'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'MetaMiniImageNet'", ":", "\n", "        ", "train_data", "=", "MetaImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "train_transform", ",", "test_transform", "=", "test_transform", ")", "\n", "test_data", "=", "MetaImageNet", "(", "args", "=", "args", ",", "partition", "=", "'val'", ",", "train_transform", "=", "train_transform", ",", "test_transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'TieredImageNet'", ":", "\n", "        ", "train_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train_phase_val'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'MetaTieredImageNet'", ":", "\n", "        ", "train_data", "=", "MetaTieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "train_transform", ",", "test_transform", "=", "test_transform", ")", "\n", "test_data", "=", "MetaTieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train_phase_val'", ",", "train_transform", "=", "train_transform", ",", "test_transform", "=", "test_transform", ")", "\n", "\n", "", "else", ":", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "class_num", "=", "Dataset2Class", "[", "name", "]", "\n", "return", "train_data", ",", "test_data", ",", "xshape", ",", "class_num", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.get_dataset_with_transform.get_nas_search_loaders": [[203, 240], ["isinstance", "config_utils.load_config", "copy.deepcopy", "hasattr", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.sampler.SubsetRandomSampler", "list", "config_utils.load_config", "copy.deepcopy", "SearchDatasetWrap.SearchDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ValueError", "range", "list", "len", "range", "torch.utils.data.sampler.SubsetRandomSampler", "len"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config", "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config"], ["", "def", "get_nas_search_loaders", "(", "train_data", ",", "valid_data", ",", "dataset", ",", "config_root", ",", "batch_size", ",", "workers", ")", ":", "\n", "    ", "if", "isinstance", "(", "batch_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "batch", ",", "test_batch", "=", "batch_size", "\n", "", "else", ":", "\n", "        ", "batch", ",", "test_batch", "=", "batch_size", ",", "batch_size", "\n", "", "if", "dataset", "==", "'cifar10'", ":", "\n", "        ", "cifar_split", "=", "load_config", "(", "'{:}/cifar-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "train_split", ",", "valid_split", "=", "cifar_split", ".", "train", ",", "cifar_split", ".", "valid", "# search over the proposed training and validation set", "\n", "# To split data", "\n", "xvalid_data", "=", "deepcopy", "(", "train_data", ")", "\n", "if", "hasattr", "(", "xvalid_data", ",", "'transforms'", ")", ":", "# to avoid a print issue", "\n", "            ", "xvalid_data", ".", "transforms", "=", "valid_data", ".", "transform", "\n", "", "xvalid_data", ".", "transform", "=", "deepcopy", "(", "valid_data", ".", "transform", ")", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "train_data", ",", "train_split", ",", "valid_split", ")", "\n", "# data loader", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "xvalid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "valid_split", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'cifar100'", ":", "\n", "        ", "cifar100_test_split", "=", "load_config", "(", "'{:}/cifar100-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "cifar100_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "elif", "dataset", "==", "'ImageNet16-120'", ":", "\n", "        ", "imagenet_test_split", "=", "load_config", "(", "'{:}/imagenet-16-120-test-split.txt'", ".", "format", "(", "config_root", ")", ",", "None", ",", "None", ")", "\n", "search_train_data", "=", "train_data", "\n", "search_valid_data", "=", "deepcopy", "(", "valid_data", ")", ";", "search_valid_data", ".", "transform", "=", "train_data", ".", "transform", "\n", "search_data", "=", "SearchDataset", "(", "dataset", ",", "[", "search_train_data", ",", "search_valid_data", "]", ",", "list", "(", "range", "(", "len", "(", "search_train_data", ")", ")", ")", ",", "imagenet_test_split", ".", "xvalid", ")", "\n", "search_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "search_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_data", ",", "batch_size", "=", "batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "valid_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "valid_data", ",", "batch_size", "=", "test_batch", ",", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "imagenet_test_split", ".", "xvalid", ")", ",", "num_workers", "=", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid dataset : {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "return", "search_loader", ",", "train_loader", ",", "valid_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.test_utils.test_imagenet_data": [[4, 18], ["len", "range", "print", "os.path.split", "os.path.split", "image_name.find"], "function", ["None"], ["def", "test_imagenet_data", "(", "imagenet", ")", ":", "\n", "    ", "total_length", "=", "len", "(", "imagenet", ")", "\n", "assert", "total_length", "==", "1281166", "or", "total_length", "==", "50000", ",", "'The length of ImageNet is wrong : {}'", ".", "format", "(", "total_length", ")", "\n", "map_id", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "total_length", ")", ":", "\n", "        ", "path", ",", "target", "=", "imagenet", ".", "imgs", "[", "index", "]", "\n", "folder", ",", "image_name", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "_", ",", "folder", "=", "os", ".", "path", ".", "split", "(", "folder", ")", "\n", "if", "folder", "not", "in", "map_id", ":", "\n", "            ", "map_id", "[", "folder", "]", "=", "target", "\n", "", "else", ":", "\n", "            ", "assert", "map_id", "[", "folder", "]", "==", "target", ",", "'Class : {} is not {}'", ".", "format", "(", "folder", ",", "target", ")", "\n", "", "assert", "image_name", ".", "find", "(", "folder", ")", "==", "0", ",", "'{} is wrong.'", ".", "format", "(", "path", ")", "\n", "", "print", "(", "'Check ImageNet Dataset OK'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.ImageNet.__init__": [[11, 75], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "open", "pickle.load", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "os.path.join", "numpy.min", "numpy.max", "len", "mini_imagenet.ImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "mini_imagenet.ImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "args", ".", "data_path", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_train_phase_%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data", "[", "'labels'", "]", "\n", "\n", "# pre-process for contrastive sampling", "\n", "", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.ImageNet.__getitem__": [[76, 89], ["numpy.asarray().astype", "mini_imagenet.ImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.ImageNet.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.MetaImageNet.__init__": [[96, 133], ["mini_imagenet.ImageNet.__init__", "list", "range", "list", "mini_imagenet.MetaImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MetaImageNet.data[].append", "mini_imagenet.MetaImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "True", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.MetaImageNet.__getitem__": [[134, 169], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "mini_imagenet.MetaImageNet.train_transform", "mini_imagenet.MetaImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.datasets.mini_imagenet.MetaImageNet.__len__": [[170, 172], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.convert_param": [[9, 34], ["isinstance", "isinstance", "outs.append", "int", "str", "bool", "int", "float", "TypeError", "float.lower", "ValueError"], "function", ["None"], ["def", "convert_param", "(", "original_lists", ")", ":", "\n", "    ", "assert", "isinstance", "(", "original_lists", ",", "list", ")", ",", "'The type is not right : {:}'", ".", "format", "(", "original_lists", ")", "\n", "ctype", ",", "value", "=", "original_lists", "[", "0", "]", ",", "original_lists", "[", "1", "]", "\n", "assert", "ctype", "in", "support_types", ",", "'Ctype={:}, support={:}'", ".", "format", "(", "ctype", ",", "support_types", ")", "\n", "is_list", "=", "isinstance", "(", "value", ",", "list", ")", "\n", "if", "not", "is_list", ":", "value", "=", "[", "value", "]", "\n", "outs", "=", "[", "]", "\n", "for", "x", "in", "value", ":", "\n", "        ", "if", "ctype", "==", "'int'", ":", "\n", "            ", "x", "=", "int", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'str'", ":", "\n", "            ", "x", "=", "str", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'bool'", ":", "\n", "            ", "x", "=", "bool", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "ctype", "==", "'float'", ":", "\n", "            ", "x", "=", "float", "(", "x", ")", "\n", "", "elif", "ctype", "==", "'none'", ":", "\n", "            ", "if", "x", ".", "lower", "(", ")", "!=", "'none'", ":", "\n", "                ", "raise", "ValueError", "(", "'For the none type, the value must be none instead of {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "x", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'Does not know this type : {:}'", ".", "format", "(", "ctype", ")", ")", "\n", "", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "not", "is_list", ":", "outs", "=", "outs", "[", "0", "]", "\n", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config_dict": [[36, 44], ["str", "os.path.exists", "open", "json.load", "configure_utils.convert_param", "json.load.items"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.convert_param"], ["", "def", "load_config_dict", "(", "path", ")", ":", "\n", "    ", "path", "=", "str", "(", "path", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "'Can not find {:}'", ".", "format", "(", "path", ")", "\n", "# Reading data back", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "content", "=", "{", "k", ":", "convert_param", "(", "v", ")", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.merge_config_dict": [[46, 53], ["isinstance", "type"], "function", ["None"], ["", "def", "merge_config_dict", "(", "config_list", ")", ":", "\n", "    ", "for", "config", "in", "config_list", ":", "\n", "        ", "assert", "isinstance", "(", "config", ",", "dict", ")", ",", "'invalid type of config: {:}'", ".", "format", "(", "type", "(", "config", ")", ")", "\n", "", "content", "=", "config_list", "[", "0", "]", "\n", "for", "config", "in", "config_list", "[", "1", ":", "]", ":", "\n", "        ", "content", "=", "{", "**", "content", ",", "**", "config", "}", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config": [[55, 68], ["hasattr", "configure_utils.load_config_dict", "isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "logger.log", "isinstance", "logger.log", "Arguments.keys"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.load_config_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log"], ["", "def", "load_config", "(", "path", ",", "extra", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "\n", "        ", "logger", ".", "log", "(", "path", ")", "\n", "", "content", "=", "load_config_dict", "(", "path", ")", "\n", "assert", "extra", "is", "None", "or", "isinstance", "(", "\n", "extra", ",", "dict", ")", ",", "'invalid type of extra : {:}'", ".", "format", "(", "extra", ")", "\n", "if", "isinstance", "(", "extra", ",", "dict", ")", ":", "\n", "        ", "content", "=", "{", "**", "content", ",", "**", "extra", "}", "\n", "", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "content", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "content", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.configure2str": [[70, 111], ["config._asdict.items", "isinstance", "config._asdict._asdict", "isinstance", "isinstance", "isinstance", "configure_utils.configure2str.gtype"], "function", ["None"], ["", "def", "configure2str", "(", "config", ",", "xpath", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "config", ",", "dict", ")", ":", "\n", "        ", "config", "=", "config", ".", "_asdict", "(", ")", "\n", "", "def", "cstring", "(", "x", ")", ":", "\n", "        ", "return", "\"\\\"{:}\\\"\"", ".", "format", "(", "x", ")", "\n", "", "def", "gtype", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "x", "=", "x", "[", "0", "]", "\n", "if", "isinstance", "(", "x", ",", "str", ")", ":", "return", "'str'", "\n", "elif", "isinstance", "(", "x", ",", "bool", ")", ":", "return", "'bool'", "\n", "elif", "isinstance", "(", "x", ",", "int", ")", ":", "return", "'int'", "\n", "elif", "isinstance", "(", "x", ",", "float", ")", ":", "return", "'float'", "\n", "elif", "x", "is", "None", ":", "return", "'none'", "\n", "else", ":", "raise", "ValueError", "(", "'invalid : {:}'", ".", "format", "(", "x", ")", ")", "\n", "", "def", "cvalue", "(", "x", ",", "xtype", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "list", ")", ":", "is_list", "=", "True", "\n", "else", ":", "\n", "            ", "is_list", ",", "x", "=", "False", ",", "[", "x", "]", "\n", "", "temps", "=", "[", "]", "\n", "for", "temp", "in", "x", ":", "\n", "            ", "if", "xtype", "==", "'bool'", ":", "temp", "=", "cstring", "(", "int", "(", "temp", ")", ")", "\n", "elif", "xtype", "==", "'none'", ":", "temp", "=", "cstring", "(", "'None'", ")", "\n", "else", ":", "temp", "=", "cstring", "(", "temp", ")", "\n", "temps", ".", "append", "(", "temp", ")", "\n", "", "if", "is_list", ":", "\n", "            ", "return", "\"[{:}]\"", ".", "format", "(", "', '", ".", "join", "(", "temps", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "temps", "[", "0", "]", "\n", "\n", "", "", "xstrings", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "xtype", "=", "gtype", "(", "value", ")", "\n", "string", "=", "'  {:20s} : [{:8s}, {:}]'", ".", "format", "(", "cstring", "(", "key", ")", ",", "cstring", "(", "xtype", ")", ",", "cvalue", "(", "value", ",", "xtype", ")", ")", "\n", "xstrings", ".", "append", "(", "string", ")", "\n", "", "Fstring", "=", "'{\\n'", "+", "',\\n'", ".", "join", "(", "xstrings", ")", "+", "'\\n}'", "\n", "if", "xpath", "is", "not", "None", ":", "\n", "        ", "parent", "=", "Path", "(", "xpath", ")", ".", "resolve", "(", ")", ".", "parent", "\n", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "xpath", ")", ":", "os", ".", "remove", "(", "xpath", ")", "\n", "with", "open", "(", "xpath", ",", "\"w\"", ")", "as", "text_file", ":", "\n", "            ", "text_file", ".", "write", "(", "'{:}'", ".", "format", "(", "Fstring", ")", ")", "\n", "", "", "return", "Fstring", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.config_utils.configure_utils.dict2config": [[113, 120], ["isinstance", "collections.namedtuple", "collections.namedtuple.", "hasattr", "type", "logger.log", "xdict.keys"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log"], ["", "def", "dict2config", "(", "xdict", ",", "logger", "=", "None", ")", ":", "\n", "    ", "assert", "isinstance", "(", "xdict", ",", "dict", ")", ",", "'invalid type : {:}'", ".", "format", "(", "type", "(", "xdict", ")", ")", "\n", "Arguments", "=", "namedtuple", "(", "'Configure'", ",", "' '", ".", "join", "(", "xdict", ".", "keys", "(", ")", ")", ")", "\n", "content", "=", "Arguments", "(", "**", "xdict", ")", "\n", "if", "hasattr", "(", "logger", ",", "'log'", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'{:}'", ".", "format", "(", "content", ")", ")", "\n", "", "return", "content", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_seed": [[4, 10], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "prepare_seed", "(", "rand_seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "rand_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_seed", ")", "\n", "torch", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "rand_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "rand_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.prepare_logger": [[12, 28], ["copy.deepcopy", "Logger", "Logger.log", "Logger.log", "copy.deepcopy._get_kwargs", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "Logger.log", "sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log"], ["", "def", "prepare_logger", "(", "xargs", ")", ":", "\n", "    ", "args", "=", "copy", ".", "deepcopy", "(", "xargs", ")", "\n", "from", "log_utils", "import", "Logger", "\n", "logger", "=", "Logger", "(", "args", ".", "save_dir", ",", "args", ".", "rand_seed", ")", "\n", "logger", ".", "log", "(", "'Main Function with logger : {:}'", ".", "format", "(", "logger", ")", ")", "\n", "logger", ".", "log", "(", "'Arguments : -------------------------------'", ")", "\n", "for", "name", ",", "value", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "        ", "logger", ".", "log", "(", "'{:16} : {:}'", ".", "format", "(", "name", ",", "value", ")", ")", "\n", "", "logger", ".", "log", "(", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"Pillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"PyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "logger", ".", "log", "(", "\"cuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "logger", ".", "log", "(", "\"CUDA_VISIBLE_DEVICES : {:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", "else", "'None'", ")", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.starts.get_machine_info": [[30, 42], ["sys.version.replace", "torch.backends.cudnn.version", "torch.cuda.is_available", "torch.cuda.device_count"], "function", ["None"], ["", "def", "get_machine_info", "(", ")", ":", "\n", "    ", "info", "=", "\"Python  Version  : {:}\"", ".", "format", "(", "sys", ".", "version", ".", "replace", "(", "'\\n'", ",", "' '", ")", ")", "\n", "info", "+=", "\"\\nPillow  Version  : {:}\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "info", "+=", "\"\\nPyTorch Version  : {:}\"", ".", "format", "(", "torch", ".", "__version__", ")", "\n", "info", "+=", "\"\\ncuDNN   Version  : {:}\"", ".", "format", "(", "torch", ".", "backends", ".", "cudnn", ".", "version", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA available   : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "info", "+=", "\"\\nCUDA GPU numbers : {:}\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", "\n", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "        ", "info", "+=", "\"\\nCUDA_VISIBLE_DEVICES={:}\"", ".", "format", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ")", "\n", "", "else", ":", "\n", "        ", "info", "+=", "\"\\nDoes not set CUDA_VISIBLE_DEVICES\"", "\n", "", "return", "info", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.RandChannel.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_channel", ")", ":", "\n", "        ", "self", ".", "num_channel", "=", "num_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.RandChannel.__repr__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(num_channel={num_channel})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.RandChannel.__call__": [[22, 26], ["img.size", "sorted", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "numpy.random.choice", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "list", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "channel", "=", "img", ".", "size", "(", "0", ")", "\n", "channel_choice", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "channel", ")", ")", ",", "size", "=", "self", ".", "num_channel", ",", "replace", "=", "False", ")", ")", "\n", "return", "torch", ".", "index_select", "(", "img", ",", "0", ",", "torch", ".", "Tensor", "(", "channel_choice", ")", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.__init__": [[150, 156], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "self", ".", "ActPattern", "=", "{", "}", "\n", "self", ".", "n_LR", "=", "-", "1", "\n", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "ptr", "=", "0", "\n", "self", ".", "activations", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.update2D": [[157, 166], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "activations.size", "activations.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update2D", "(", "self", ",", "activations", ")", ":", "\n", "        ", "n_batch", "=", "activations", ".", "size", "(", ")", "[", "0", "]", "\n", "n_neuron", "=", "activations", ".", "size", "(", ")", "[", "1", "]", "\n", "self", ".", "n_neuron", "=", "n_neuron", "\n", "if", "self", ".", "activations", "is", "None", ":", "\n", "            ", "self", ".", "activations", "=", "torch", ".", "zeros", "(", "self", ".", "n_samples", ",", "n_neuron", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "activations", "[", "self", ".", "ptr", ":", "self", ".", "ptr", "+", "n_batch", "]", "=", "torch", ".", "sign", "(", "activations", ")", "# after ReLU", "\n", "self", ".", "ptr", "+=", "n_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.calc_LR": [[167, 178], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "res.sum.sum.T.clone", "res.sum.sum.sum", "res.sum.sum.sum().item", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "linear_region_counter.LinearRegionCount.activations.half", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "res.sum.sum.float", "res.sum.sum.sum"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calc_LR", "(", "self", ")", ":", "\n", "        ", "res", "=", "torch", ".", "matmul", "(", "self", ".", "activations", ".", "half", "(", ")", ",", "(", "1", "-", "self", ".", "activations", ")", ".", "T", ".", "half", "(", ")", ")", "\n", "res", "+=", "res", ".", "T", ".", "clone", "(", ")", "\n", "res", "=", "1", "-", "torch", ".", "sign", "(", "res", ")", "\n", "res", "=", "res", ".", "sum", "(", "1", ")", "\n", "res", "=", "1.", "/", "res", ".", "float", "(", ")", "\n", "self", ".", "n_LR", "=", "res", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "del", "self", ".", "activations", ",", "res", "\n", "self", ".", "activations", "=", "None", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.update1D": [[179, 191], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "activationList.items", "range", "value.size"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update1D", "(", "self", ",", "activationList", ")", ":", "\n", "        ", "code_string", "=", "''", "\n", "for", "key", ",", "value", "in", "activationList", ".", "items", "(", ")", ":", "\n", "            ", "n_neuron", "=", "value", ".", "size", "(", ")", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "n_neuron", ")", ":", "\n", "                ", "if", "value", "[", "i", "]", ">", "0", ":", "\n", "                    ", "code_string", "+=", "'1'", "\n", "", "else", ":", "\n", "                    ", "code_string", "+=", "'0'", "\n", "", "", "", "if", "code_string", "not", "in", "self", ".", "ActPattern", ":", "\n", "            ", "self", ".", "ActPattern", "[", "code_string", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.getLinearReginCount": [[192, 196], ["linear_region_counter.LinearRegionCount.calc_LR"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.calc_LR"], ["", "", "def", "getLinearReginCount", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n_LR", "==", "-", "1", ":", "\n", "            ", "self", ".", "calc_LR", "(", ")", "\n", "", "return", "self", ".", "n_LR", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.__init__": [[199, 210], ["functools.reduce", "linear_region_counter.Linear_Region_Collector.reinit"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.reinit"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "models", "=", "[", "]", ",", "input_size", "=", "(", "64", ",", "3", ",", "32", ",", "32", ")", ",", "sample_batch", "=", "100", ",", "dataset", "=", "'cifar100'", ",", "data_path", "=", "None", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "models", "=", "[", "]", "\n", "self", ".", "input_size", "=", "input_size", "# BCHW", "\n", "self", ".", "sample_batch", "=", "sample_batch", "\n", "self", ".", "input_numel", "=", "reduce", "(", "mul", ",", "self", ".", "input_size", ",", "1", ")", "\n", "self", ".", "interFeature", "=", "[", "]", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "reinit", "(", "models", ",", "input_size", ",", "sample_batch", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.reinit": [[211, 236], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "isinstance", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "linear_region_counter.Linear_Region_Collector.register_hook", "linear_region_counter.LinearRegionCount", "functools.reduce", "linear_region_counter.get_datasets", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "iter", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.register_hook", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.get_datasets"], ["", "def", "reinit", "(", "self", ",", "models", "=", "None", ",", "input_size", "=", "None", ",", "sample_batch", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "        ", "if", "models", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "models", ",", "list", ")", "\n", "del", "self", ".", "models", "\n", "self", ".", "models", "=", "models", "\n", "for", "model", "in", "self", ".", "models", ":", "\n", "                ", "self", ".", "register_hook", "(", "model", ")", "\n", "", "self", ".", "LRCounts", "=", "[", "LinearRegionCount", "(", "self", ".", "input_size", "[", "0", "]", "*", "self", ".", "sample_batch", ")", "for", "_", "in", "range", "(", "len", "(", "models", ")", ")", "]", "\n", "", "if", "input_size", "is", "not", "None", "or", "sample_batch", "is", "not", "None", ":", "\n", "            ", "if", "input_size", "is", "not", "None", ":", "\n", "                ", "self", ".", "input_size", "=", "input_size", "# BCHW", "\n", "self", ".", "input_numel", "=", "reduce", "(", "mul", ",", "self", ".", "input_size", ",", "1", ")", "\n", "", "if", "sample_batch", "is", "not", "None", ":", "\n", "                ", "self", ".", "sample_batch", "=", "sample_batch", "\n", "", "if", "self", ".", "data_path", "is", "not", "None", ":", "\n", "                ", "self", ".", "train_data", ",", "_", ",", "class_num", "=", "get_datasets", "(", "self", ".", "args", ",", "self", ".", "input_size", ",", "-", "1", ")", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "train_data", ",", "batch_size", "=", "self", ".", "input_size", "[", "0", "]", ",", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ",", "shuffle", "=", "True", ")", "\n", "self", ".", "loader", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "", "", "if", "seed", "is", "not", "None", "and", "seed", "!=", "self", ".", "seed", ":", "\n", "            ", "self", ".", "seed", "=", "seed", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "del", "self", ".", "interFeature", "\n", "self", ".", "interFeature", "=", "[", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.clear": [[237, 242], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "linear_region_counter.LinearRegionCount", "range", "len"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "LRCounts", "=", "[", "LinearRegionCount", "(", "self", ".", "input_size", "[", "0", "]", "*", "self", ".", "sample_batch", ")", "for", "_", "in", "range", "(", "len", "(", "self", ".", "models", ")", ")", "]", "\n", "del", "self", ".", "interFeature", "\n", "self", ".", "interFeature", "=", "[", "]", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.register_hook": [[243, 247], ["model.modules", "isinstance", "m.register_forward_hook"], "methods", ["None"], ["", "def", "register_hook", "(", "self", ",", "model", ")", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "m", ".", "register_forward_hook", "(", "hook", "=", "self", ".", "hook_in_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.hook_in_forward": [[248, 251], ["isinstance", "linear_region_counter.Linear_Region_Collector.interFeature.append", "len", "output.detach", "input[].size"], "methods", ["None"], ["", "", "", "def", "hook_in_forward", "(", "self", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ",", "tuple", ")", "and", "len", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", "==", "4", ":", "\n", "            ", "self", ".", "interFeature", ".", "append", "(", "output", ".", "detach", "(", ")", ")", "# for ReLU", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.forward_batch_sample": [[252, 267], ["range", "zip", "LRCount.getLinearReginCount", "linear_region_counter.Linear_Region_Collector.loader.next", "linear_region_counter.Linear_Region_Collector.forward", "iter", "linear_region_counter.Linear_Region_Collector.loader.next"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.getLinearReginCount", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet.forward"], ["", "", "def", "forward_batch_sample", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "sample_batch", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "datapair", "=", "self", ".", "loader", ".", "next", "(", ")", "\n", "inputs", "=", "datapair", "[", "0", "]", "\n", "targets", "=", "datapair", "[", "1", "]", "\n", "", "except", "Exception", ":", "\n", "                ", "del", "self", ".", "loader", "\n", "self", ".", "loader", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "datapair", "=", "self", ".", "loader", ".", "next", "(", ")", "\n", "inputs", "=", "datapair", "[", "0", "]", "\n", "targets", "=", "datapair", "[", "1", "]", "\n", "", "for", "model", ",", "LRCount", "in", "zip", "(", "self", ".", "models", ",", "self", ".", "LRCounts", ")", ":", "\n", "                ", "self", ".", "forward", "(", "model", ",", "LRCount", ",", "inputs", ")", "\n", "", "", "return", "[", "LRCount", ".", "getLinearReginCount", "(", ")", "for", "LRCount", "in", "self", ".", "LRCounts", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.Linear_Region_Collector.forward": [[268, 275], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "LRCount.update2D", "input_data.cuda", "len", "f.view", "input_data.size"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet.forward", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.LinearRegionCount.update2D"], ["", "def", "forward", "(", "self", ",", "model", ",", "LRCount", ",", "input_data", ")", ":", "\n", "        ", "self", ".", "interFeature", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "forward", "(", "input_data", ".", "cuda", "(", ")", ")", "\n", "if", "len", "(", "self", ".", "interFeature", ")", "==", "0", ":", "return", "\n", "feature_data", "=", "torch", ".", "cat", "(", "[", "f", ".", "view", "(", "input_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "for", "f", "in", "self", ".", "interFeature", "]", ",", "1", ")", "\n", "LRCount", ".", "update2D", "(", "feature_data", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.linear_region_counter.get_datasets": [[28, 146], ["len", "len", "torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "linear_region_counter.RandChannel", "torchvision.Compose", "torchvision.Compose", "name.startswith", "torchvision.CIFAR100", "torchvision.CIFAR100", "name.startswith", "name.startswith", "datasets.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "linear_region_counter.RandChannel", "torchvision.Normalize", "xlists.append", "xlists.append", "xlists.append", "torchvision.Compose", "torchvision.Compose", "len", "len", "torchvision.ImageFolder", "torchvision.ImageFolder", "datasets.CUTOUT", "torchvision.ToTensor", "torchvision.Normalize", "xlists.append", "xlists.append", "torchvision.ToTensor", "linear_region_counter.RandChannel", "torchvision.Normalize", "xlists.append", "xlists.append", "xlists.append", "xlists.append", "xlists.append", "xlists.append", "torchvision.Compose", "torchvision.Compose", "TypeError", "len", "len", "os.join", "os.join", "datasets.ImageNet16", "datasets.ImageNet16", "TypeError", "torchvision.Resize", "torchvision.RandomCrop", "ValueError", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToPILImage", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.ToTensor", "linear_region_counter.RandChannel", "datasets.ImageNet16", "datasets.ImageNet16", "torchvision.RandomResizedCrop", "torchvision.ToPILImage", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "len", "len", "datasets.ImageNet16", "datasets.ImageNet16", "len", "len", "datasets.ImageNet16", "datasets.ImageNet16", "len", "len", "datasets.ImageNet", "datasets.ImageNet", "len", "len", "datasets.ImageNet", "datasets.ImageNet", "datasets.TieredImageNet", "datasets.TieredImageNet", "datasets.TieredImageNet", "datasets.TieredImageNet", "TypeError"], "function", ["None"], ["", "", "def", "get_datasets", "(", "args", ",", "input_size", ",", "cutout", "=", "-", "1", ")", ":", "\n", "\n", "    ", "name", "=", "args", ".", "dataset", "\n", "root", "=", "args", ".", "data_path", "\n", "\n", "assert", "len", "(", "input_size", ")", "in", "[", "3", ",", "4", "]", "\n", "if", "len", "(", "input_size", ")", "==", "4", ":", "\n", "        ", "input_size", "=", "input_size", "[", "1", ":", "]", "\n", "", "assert", "input_size", "[", "1", "]", "==", "input_size", "[", "2", "]", "\n", "\n", "if", "name", "==", "'cifar10'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "mean", ",", "std", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "        ", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "122.68", ",", "116.66", ",", "104.01", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.22", ",", "61.26", ",", "65.09", "]", "]", "\n", "", "elif", "name", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", ",", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "        ", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Data Argumentation", "\n", "", "if", "name", "==", "'cifar10'", "or", "name", "==", "'cifar100'", ":", "\n", "        ", "lists", "=", "[", "transforms", ".", "RandomCrop", "(", "input_size", "[", "1", "]", ",", "padding", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "RandChannel", "(", "input_size", "[", "0", "]", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'ImageNet16'", ")", ":", "\n", "        ", "lists", "=", "[", "transforms", ".", "RandomCrop", "(", "input_size", "[", "1", "]", ",", "padding", "=", "0", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "RandChannel", "(", "input_size", "[", "0", "]", ")", "]", "\n", "if", "cutout", ">", "0", ":", "lists", "+=", "[", "CUTOUT", "(", "cutout", ")", "]", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "lists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "name", "==", "'imagenet-1k'", ":", "\n", "            ", "xlists", "=", "[", "]", "\n", "xlists", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "32", ",", "32", ")", ",", "interpolation", "=", "2", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "input_size", "[", "1", "]", ",", "padding", "=", "0", ")", ")", "\n", "", "elif", "name", "==", "'imagenet-1k-s'", ":", "\n", "            ", "xlists", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "32", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", "]", "\n", "xlists", "=", "[", "]", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid name : {:}'", ".", "format", "(", "name", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "xlists", ".", "append", "(", "normalize", ")", "\n", "xlists", ".", "append", "(", "RandChannel", "(", "input_size", "[", "0", "]", ")", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "xlists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "40", ")", ",", "transforms", ".", "CenterCrop", "(", "32", ")", ",", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "", "elif", "name", "in", "[", "'MiniImageNet'", ",", "'MetaMiniImageNet'", ",", "'TieredImageNet'", ",", "'MetaTieredImageNet'", "]", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "xlists", "=", "[", "]", "\n", "# xlists.append(lambda x: Image.fromarray(x))", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToPILImage", "(", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "32", ",", "32", ")", ",", "interpolation", "=", "2", ")", ")", "\n", "xlists", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "input_size", "[", "1", "]", ",", "padding", "=", "0", ")", ")", "\n", "# xlists.append(lambda x: np.asarray(x))", "\n", "xlists", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "xlists", ".", "append", "(", "normalize", ")", "\n", "xlists", ".", "append", "(", "RandChannel", "(", "input_size", "[", "0", "]", ")", ")", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "xlists", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# lambda x: Image.fromarray(x),", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "40", ")", ",", "transforms", ".", "CenterCrop", "(", "32", ")", ",", "\n", "# lambda x: np.asarray(x), ", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "if", "name", "==", "'cifar10'", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR10", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'cifar100'", ":", "\n", "        ", "train_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", "\n", "test_data", "=", "dset", ".", "CIFAR100", "(", "root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "50000", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", ".", "startswith", "(", "'imagenet-1k'", ")", ":", "\n", "        ", "train_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'train'", ")", ",", "train_transform", ")", "\n", "test_data", "=", "dset", ".", "ImageFolder", "(", "osp", ".", "join", "(", "root", ",", "'val'", ")", ",", "test_transform", ")", "\n", "", "elif", "name", "==", "'ImageNet16'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "1281167", "and", "len", "(", "test_data", ")", "==", "50000", "\n", "", "elif", "name", "==", "'ImageNet16-120'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "120", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "120", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "151700", "and", "len", "(", "test_data", ")", "==", "6000", "\n", "", "elif", "name", "==", "'ImageNet16-150'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "150", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "150", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "190272", "and", "len", "(", "test_data", ")", "==", "7500", "\n", "", "elif", "name", "==", "'ImageNet16-200'", ":", "\n", "        ", "train_data", "=", "ImageNet16", "(", "root", ",", "True", ",", "train_transform", ",", "200", ")", "\n", "test_data", "=", "ImageNet16", "(", "root", ",", "False", ",", "test_transform", ",", "200", ")", "\n", "assert", "len", "(", "train_data", ")", "==", "254775", "and", "len", "(", "test_data", ")", "==", "10000", "\n", "", "elif", "name", "==", "'MiniImageNet'", ":", "\n", "        ", "train_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'val'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'MetaMiniImageNet'", ":", "\n", "        ", "train_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "ImageNet", "(", "args", "=", "args", ",", "partition", "=", "'val'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'TieredImageNet'", ":", "\n", "        ", "train_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train_phase_val'", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "name", "==", "'MetaTieredImageNet'", ":", "\n", "        ", "train_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train'", ",", "transform", "=", "train_transform", ")", "\n", "test_data", "=", "TieredImageNet", "(", "args", "=", "args", ",", "partition", "=", "'train_phase_val'", ",", "transform", "=", "test_transform", ")", "\n", "\n", "", "else", ":", "raise", "TypeError", "(", "\"Unknow dataset : {:}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "class_num", "=", "Dataset2Class", "[", "name", "]", "\n", "return", "train_data", ",", "test_data", ",", "class_num", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.recal_bn": [[19, 34], ["network.modules", "network.train", "isinstance", "torch.no_grad", "torch.no_grad", "enumerate", "m.running_mean.data.fill_", "m.running_var.data.fill_", "m.num_batches_tracked.data.zero_", "inputs.cuda.cuda", "network"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train"], ["def", "recal_bn", "(", "network", ",", "xloader", ",", "recalbn", ",", "device", ")", ":", "\n", "# Recalculate batchnorm statistics", "\n", "    ", "for", "m", "in", "network", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "running_mean", ".", "data", ".", "fill_", "(", "0", ")", "\n", "m", ".", "running_var", ".", "data", ".", "fill_", "(", "0", ")", "\n", "m", ".", "num_batches_tracked", ".", "data", ".", "zero_", "(", ")", "\n", "m", ".", "momentum", "=", "None", "\n", "", "", "network", ".", "train", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "xloader", ")", ":", "\n", "            ", "if", "i", ">=", "recalbn", ":", "break", "\n", "inputs", "=", "inputs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "_", ",", "_", "=", "network", "(", "inputs", ")", "\n", "", "", "return", "network", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.kernel_T_func": [[35, 54], ["numpy.eye", "scipy.linalg.pinvh", "len", "scipy.linalg.expm"], "function", ["None"], ["", "def", "kernel_T_func", "(", "kernel", ",", "time_evolution", ",", "reg_coef", ")", ":", "\n", "    ", "'''\n    The function kernel^{-1} (I - exp(-time_evolution* kernel))\n    :param kernel: a symmetric PSD matrix\n    :param time_evolution: the product of training time & learning rate\n    :param reg_coef: the L2 regualrization coefficient ( we suggest using a small number instead of 0.\n    e.g., >= 1e-5\n    :return: (kernel + reg_coef* I) ^{-1} (I - exp(-time_evolution* kernel))\n    '''", "\n", "I", "=", "np", ".", "eye", "(", "len", "(", "kernel", ")", ")", "\n", "# pinvh is for symmetric matrix. Positive reg_coef can relieve the rank-deficiency issue", "\n", "kernel_inv", "=", "scipy", ".", "linalg", ".", "pinvh", "(", "kernel", "+", "reg_coef", "*", "I", ")", "\n", "# expm is matrix exponential function", "\n", "if", "time_evolution", "==", "np", ".", "inf", ":", "\n", "        ", "exp_term", "=", "0", "\n", "", "else", ":", "\n", "        ", "exp_term", "=", "scipy", ".", "linalg", ".", "expm", "(", "-", "time_evolution", "*", "kernel", ")", "\n", "", "result", "=", "kernel_inv", "@", "(", "I", "-", "exp_term", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks": [[55, 60], ["numpy.vsplit", "numpy.hsplit"], "function", ["None"], ["", "def", "split_kernel_into_blocks", "(", "kernel", ",", "n_tasks", ")", ":", "\n", "    ", "K", "=", "kernel", "\n", "K_vsplit", "=", "np", ".", "vsplit", "(", "K", ",", "n_tasks", ")", "\n", "blocks", "=", "[", "np", ".", "hsplit", "(", "sub_K", ",", "n_tasks", ")", "for", "sub_K", "in", "K_vsplit", "]", "\n", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.check_symmetric": [[61, 63], ["numpy.allclose"], "function", ["None"], ["", "def", "check_symmetric", "(", "a", ",", "rtol", "=", "1e-05", ",", "atol", "=", "1e-08", ")", ":", "\n", "    ", "return", "np", ".", "allclose", "(", "a", ",", "a", ".", "T", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.del_grad_sample": [[64, 77], ["model.parameters", "hasattr", "p.grad_sample.detach_", "p.grad_sample.requires_grad_"], "function", ["None"], ["", "def", "del_grad_sample", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Deletes ``.grad_sample`` from model's parameters. Code modified from:\n    https://opacus.ai/api/_modules/opacus/grad_sample/grad_sample_module.html\n    \"\"\"", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "p", ",", "\"grad_sample\"", ")", "and", "p", ".", "grad_sample", "is", "not", "None", ":", "\n", "            ", "if", "p", ".", "grad_sample", ".", "grad_fn", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad_sample", ".", "detach_", "(", ")", "\n", "", "else", ":", "\n", "                ", "p", ".", "grad_sample", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "del", "p", ".", "grad_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.compute_analytical_metantk_n": [[78, 143], ["ntk.detach().cpu().numpy.detach().cpu().numpy", "K.detach().cpu().numpy.detach().cpu().numpy", "ntk_opacus.split_kernel_into_blocks", "ntk_opacus.split_kernel_into_blocks", "ntk_opacus.split_kernel_into_blocks", "ntk_opacus.split_kernel_into_blocks", "ntk_opacus.split_kernel_into_blocks", "ntk_opacus.split_kernel_into_blocks", "range", "range", "numpy.block", "ntk_opacus.check_symmetric", "len", "len", "ntk_opacus.check_symmetric", "ntk_opacus.check_symmetric", "numpy.array_equal", "ntk_opacus.kernel_T_func", "numpy.matmul", "KTs.append", "range", "ntk.detach().cpu().numpy.detach().cpu", "K.detach().cpu().numpy.detach().cpu", "range", "range", "range", "numpy.transpose", "numpy.matmul", "numpy.matmul", "numpy.matmul", "metantk_blocks[].append", "numpy.linalg.eigh", "numpy.allclose", "numpy.matmul", "ntk.detach().cpu().numpy.detach", "K.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.split_kernel_into_blocks", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.check_symmetric", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.check_symmetric", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.check_symmetric", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.kernel_T_func"], ["", "", "", "def", "compute_analytical_metantk_n", "(", "ntk", ",", "K", ",", "n_tasks", ",", "n_queries", ",", "n_support", ",", "inner_lr_time", ",", "reg_coef", ",", "algorithm", "=", "'ANIL'", ")", ":", "\n", "    ", "'''\n    Notice that the analytical metaNTK is derived for L2 loss only in the inf-width limit\n    :param ntk: a symemtric torch tensor of with length = n_tasks*(n_queries+n_support).\n        Notice that the first n_tasks*n_queries indices are for query samples and the last\n        n_tasks*n_support indices are for support samples\n    :param K: a symemtric torch tensor in the same shape as ntk. For MAML, K == ntk. For ANIL, K is NNGP\n    :param n_tasks: the number of tasks in the NTK computation\n    :param n_queries: number of query samples per task\n    :param n_support: number of query samples per task\n    :param inner_lr_time: the product of inner loop learning rate & training time\n    :param reg_coef: the regularization coefficient for the inner loop optimization. suggest >=1e-5\n    :param algorithm: choices = ['MAML','ANIL','MTL','iMAML']\n    :return: the analytical metaNTK of shape\n    '''", "\n", "\n", "ntk", "=", "ntk", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "K", "=", "K", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "assert", "ntk", ".", "shape", "==", "K", ".", "shape", "\n", "\n", "assert", "len", "(", "ntk", ".", "shape", ")", "==", "2", "\n", "assert", "ntk", ".", "shape", "[", "0", "]", "==", "ntk", ".", "shape", "[", "1", "]", "\n", "assert", "len", "(", "ntk", ")", "==", "n_tasks", "*", "(", "n_queries", "+", "n_support", ")", "# check the dimension is correct", "\n", "assert", "check_symmetric", "(", "ntk", ")", "and", "check_symmetric", "(", "K", ")", "# check the two matrices are both symmetric", "\n", "# we can support ANIL, MAML, Multi-Task-Learning, iMAML latter", "\n", "assert", "algorithm", "in", "[", "'ANIL'", ",", "'MAML'", ",", "'MTL'", "]", "\n", "if", "algorithm", "==", "'MAML'", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "ntk", ",", "K", ")", "\n", "", "elif", "algorithm", "==", "'ANIL'", ":", "\n", "        ", "assert", "not", "np", ".", "allclose", "(", "ntk", ",", "K", ")", "\n", "\n", "", "query_size", "=", "n_tasks", "*", "n_queries", "\n", "ntk_qry_blocks", "=", "split_kernel_into_blocks", "(", "ntk", "[", ":", "query_size", ",", ":", "query_size", "]", ",", "n_tasks", ")", "\n", "ntk_spt_blocks", "=", "split_kernel_into_blocks", "(", "ntk", "[", "query_size", ":", ",", "query_size", ":", "]", ",", "n_tasks", ")", "\n", "ntk_qry_spt_blocks", "=", "split_kernel_into_blocks", "(", "ntk", "[", ":", "query_size", ",", "query_size", ":", "]", ",", "n_tasks", ")", "\n", "ntk_spt_qry_blocks", "=", "split_kernel_into_blocks", "(", "ntk", "[", "query_size", ":", ",", ":", "query_size", "]", ",", "n_tasks", ")", "\n", "\n", "K_spt_blocks", "=", "split_kernel_into_blocks", "(", "K", "[", "query_size", ":", ",", "query_size", ":", "]", ",", "n_tasks", ")", "\n", "K_qry_spt_blocks", "=", "split_kernel_into_blocks", "(", "K", "[", ":", "query_size", ",", "query_size", ":", "]", ",", "n_tasks", ")", "\n", "\n", "KTs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_tasks", ")", ":", "\n", "        ", "T", "=", "kernel_T_func", "(", "kernel", "=", "K_spt_blocks", "[", "i", "]", "[", "i", "]", ",", "time_evolution", "=", "inner_lr_time", ",", "reg_coef", "=", "reg_coef", ")", "\n", "KT", "=", "np", ".", "matmul", "(", "K_qry_spt_blocks", "[", "i", "]", "[", "i", "]", ",", "T", ")", "# matrix multiplication", "\n", "KTs", ".", "append", "(", "KT", ")", "\n", "\n", "", "nonsym_term", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_tasks", ")", "]", "\n", "long_term", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_tasks", ")", "]", "\n", "\n", "metantk_blocks", "=", "[", "[", "]", "for", "_", "in", "range", "(", "n_tasks", ")", "]", "\n", "for", "i", "in", "range", "(", "n_tasks", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "n_tasks", ")", ":", "\n", "            ", "ntk_term", "=", "ntk_qry_blocks", "[", "i", "]", "[", "j", "]", "\n", "KT_i", "=", "KTs", "[", "i", "]", "\n", "TK_j", "=", "np", ".", "transpose", "(", "KTs", "[", "j", "]", ")", "\n", "KT_ntk_term", "=", "np", ".", "matmul", "(", "KT_i", ",", "ntk_spt_qry_blocks", "[", "i", "]", "[", "j", "]", ")", "\n", "ntk_TK_term", "=", "np", ".", "matmul", "(", "ntk_qry_spt_blocks", "[", "i", "]", "[", "j", "]", ",", "TK_j", ")", "\n", "KT_ntk_TK", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "KT_i", ",", "ntk_spt_blocks", "[", "i", "]", "[", "j", "]", ")", ",", "TK_j", ")", "\n", "block", "=", "ntk_term", "-", "KT_ntk_term", "-", "ntk_TK_term", "+", "KT_ntk_TK", "\n", "metantk_blocks", "[", "i", "]", ".", "append", "(", "block", ")", "\n", "\n", "", "", "metantk", "=", "np", ".", "block", "(", "metantk_blocks", ")", "\n", "assert", "check_symmetric", "(", "metantk", ")", "\n", "\n", "return", "{", "'metantk'", ":", "metantk", ",", "'eigenvalues'", ":", "np", ".", "linalg", ".", "eigh", "(", "metantk", ")", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_ntk_n": [[144, 238], ["torch.cuda.current_device", "torch.cuda.current_device", "enumerate", "inputs.cuda.cuda", "enumerate", "torch.symeig", "torch.symeig", "conds.append", "network.to.train", "network.to.eval", "network.to.to", "ntk_opacus.del_grad_sample", "opacus.grad_sample.GradSampleModule.zero_grad", "opacus.grad_sample.GradSampleModule.", "isinstance", "network.to.modules", "ntks.append", "ntk_opacus.del_grad_sample", "opacus.grad_sample.GradSampleModule.zero_grad", "numpy.nan_to_num", "opacus.grad_sample.GradSampleModule", "isinstance", "network_wrap.sum", "inputs.cuda.size", "hasattr", "hasattr", "hasattr", "hasattr", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.size", "_grads.view.size", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.del_grad_sample", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.del_grad_sample"], ["", "def", "get_ntk_n", "(", "xloader", ",", "networks", ",", "recalbn", "=", "0", ",", "train_mode", "=", "False", ",", "num_batch", "=", "-", "1", ",", "params_types", "=", "'w'", ")", ":", "\n", "    ", "'''\n    Here we compute NTK based on Opacus.\n    :param xloader: A dataloader whose each batch contains images and corresponding labels\n    :param networks: A list of networks to compute NTK condition numbers\n    :param recalbn: If recalculate batchnorm statistics\n    :param train_mode: If enable batchnorm statistics to update during computing NTK\n    :param num_batch: Number of batches to average when computing NTK\n    :return: NTK condition numbers whose size is the same as size of networks\n    '''", "\n", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "\n", "if", "params_types", "==", "'w'", ":", "\n", "        ", "params_types", "=", "[", "'weight'", ",", "]", "\n", "", "elif", "params_types", "==", "'wb'", ":", "\n", "        ", "params_types", "=", "[", "'weight'", ",", "'bias'", "]", "\n", "\n", "# if recalbn > 0:", "\n", "#     network = recal_bn(network, xloader, recalbn, device)", "\n", "#     if network_2 is not None:", "\n", "#         network_2 = recal_bn(network_2, xloader, recalbn, device)", "\n", "\n", "", "for", "network", "in", "networks", ":", "\n", "        ", "if", "train_mode", ":", "\n", "            ", "network", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "network", ".", "eval", "(", ")", "\n", "\n", "######", "\n", "\n", "", "", "ntks", "=", "[", "]", "\n", "\n", "for", "i", ",", "datapair", "in", "enumerate", "(", "xloader", ")", ":", "\n", "\n", "# Only need images to compute NTKs", "\n", "        ", "inputs", "=", "datapair", "[", "0", "]", "\n", "targets", "=", "datapair", "[", "1", "]", "\n", "if", "num_batch", ">", "0", "and", "i", ">=", "num_batch", ":", "break", "\n", "inputs", "=", "inputs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "for", "net_idx", ",", "network", "in", "enumerate", "(", "networks", ")", ":", "\n", "\n", "            ", "network", "=", "network", ".", "to", "(", "device", ")", "\n", "\n", "# Wrap network using Opacus", "\n", "try", ":", "\n", "                ", "network_wrap", "=", "GradSampleModule", "(", "network", ")", "\n", "", "except", ":", "\n", "                ", "network_wrap", "=", "network", "\n", "\n", "# Clear per-sample-grads", "\n", "", "del_grad_sample", "(", "network_wrap", ")", "\n", "\n", "# Out of safety, we also clear gradients", "\n", "network_wrap", ".", "zero_grad", "(", ")", "\n", "\n", "# Get logits", "\n", "logits", "=", "network_wrap", "(", "inputs", ")", "\n", "if", "isinstance", "(", "logits", ",", "tuple", ")", ":", "\n", "                ", "logits", "=", "logits", "[", "1", "]", "\n", "\n", "# Notice we should take the fact that averaging per-sample-gradient is needed into account", "\n", "", "(", "logits", ".", "sum", "(", ")", "/", "inputs", ".", "size", "(", "0", ")", ")", ".", "backward", "(", ")", "\n", "\n", "ntk", "=", "0", "\n", "\n", "# Here, we use weight (or also bias) to compute NTK, we exclude weight/bias of Norm layers", "\n", "for", "module", "in", "network", ".", "modules", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "module", ",", "NORM_LAYERS", ")", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "'weight'", ")", "and", "hasattr", "(", "module", ".", "weight", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'weight'", "in", "params_types", "and", "(", "module", ".", "weight", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "weight", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "\n", "", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "hasattr", "(", "module", ".", "bias", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'bias'", "in", "params_types", "and", "(", "module", ".", "bias", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "bias", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "\n", "", "", "", "", "ntks", ".", "append", "(", "ntk", ")", "\n", "\n", "# Clear all grads", "\n", "del_grad_sample", "(", "network_wrap", ")", "\n", "network_wrap", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "conds", "=", "[", "]", "\n", "for", "ntk", "in", "ntks", ":", "\n", "        ", "eigenvalues", ",", "_", "=", "torch", ".", "symeig", "(", "ntk", ")", "# ascending", "\n", "conds", ".", "append", "(", "np", ".", "nan_to_num", "(", "(", "eigenvalues", "[", "-", "1", "]", "/", "eigenvalues", "[", "0", "]", ")", ".", "item", "(", ")", ",", "copy", "=", "True", ",", "nan", "=", "100000.0", ")", ")", "\n", "", "return", "conds", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.get_analytical_metantk_n": [[239, 424], ["torch.cuda.current_device", "torch.cuda.current_device", "enumerate", "range", "support_xs.view.cuda", "query_xs.view.cuda", "support_xs.view.size", "query_xs.view.size", "support_xs.view.view", "query_xs.view.view", "torch.cat", "torch.cat", "enumerate", "ntks.copy", "nngps.copy", "len", "len", "len", "torch.allclose", "torch.allclose", "network.to.train", "network.to.eval", "torch.no_grad", "torch.no_grad", "network.to.", "isinstance", "network.size", "network.to.to", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear.to", "opacus.grad_sample.GradSampleModule", "network.to.zero_grad", "torch.nn.Linear.zero_grad", "ntk_opacus.del_grad_sample", "ntk_opacus.del_grad_sample", "opacus.grad_sample.GradSampleModule.", "isinstance", "opacus.grad_sample.GradSampleModule.", "network.to.modules", "torch.nn.Linear.modules", "torch.allclose", "torch.allclose", "ntks.append", "nngps.append", "network.to.zero_grad", "torch.nn.Linear.zero_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "conds.append", "conds.append", "len", "opacus.grad_sample.GradSampleModule", "print", "torch.allclose", "torch.allclose", "ntk.cpu().detach", "nngp.cpu().detach", "ntk_opacus.compute_analytical_metantk_n", "numpy.nan_to_num", "isinstance", "isinstance", "torch.no_grad", "torch.no_grad", "network.to.", "isinstance", "torch.zeros_like", "torch.zeros_like", "head_wrap.sum", "torch.cat.size", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "torch.cat.squeeze", "ntk.cpu", "nngp.cpu", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.view", "torch.einsum().detach", "torch.einsum().detach", "_grads.view.size", "_grads.view.size", "_grads.view.size", "_grads.view.size", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.None.eval_searched_arch.train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.del_grad_sample", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.del_grad_sample", "home.repos.pwc.inspect_result.yitewang_metantk-nas.procedures.ntk_opacus.compute_analytical_metantk_n"], ["", "def", "get_analytical_metantk_n", "(", "xloader", ",", "networks", ",", "ways", ",", "algorithm", "=", "'ANIL'", ",", "inner_lr_time", "=", "1", ",", "reg_coef", "=", "1e-3", ",", "\n", "recalbn", "=", "0", ",", "train_mode", "=", "False", ",", "num_batch", "=", "-", "1", ",", "params_types", "=", "'w'", ",", "norm_type", "=", "'groupnorm'", ")", ":", "\n", "    ", "'''\n    Here we compute analytical MetaNTK based on ANIL/MAML using Opacus.\n    Notice: Since computational cost of NNGP is not that high, we will just compute NNGPs anyway\n    :param xloader: A meta dataloader whose each batch contains support image, support labels, query images and query labels\n    :param networks: A list of networks to compute MetaNTK condition numbers\n    :param ways: Number of ways for few shot learning\n    :param algorithm: algorithm used for computing MetaNTK, choices = ['ANIL', 'MAML']\n    :param inner_lr_time: the product of inner loop learning rate & training time\n    :param reg_coef: the regularization coefficient for the inner loop optimization. suggest >=1e-5\n    :param recalbn: If recalculate batchnorm statistics\n    :param train_mode: If enable batchnorm statistics to update during computing MetaNTK\n    :param num_batch: Number of batches to average when computing MetaNTK\n    :param params_types: parameters type for computing MetaNTK: 'w' for only weights, 'wb' for weights and bias\n    :param norm_type: normalization layers used by the networks\n    :return: the analytical MetaNTK condition numbers whose size is the same as size of networks\n    '''", "\n", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "\n", "if", "params_types", "==", "'w'", ":", "\n", "        ", "params_types", "=", "[", "'weight'", ",", "]", "\n", "", "elif", "params_types", "==", "'wb'", ":", "\n", "        ", "params_types", "=", "[", "'weight'", ",", "'bias'", "]", "\n", "\n", "# If use inspector, one may find 'main' not supported", "\n", "# However, Opacus still works properly ", "\n", "# since we do not compute gradients of architecture parameters", "\n", "# inspector = DPModelInspector()", "\n", "\n", "# if recalbn > 0:", "\n", "#     network = recal_bn(network, xloader, recalbn, device)", "\n", "#     if network_2 is not None:", "\n", "#         network_2 = recal_bn(network_2, xloader, recalbn, device)", "\n", "\n", "", "for", "network", "in", "networks", ":", "\n", "        ", "if", "train_mode", ":", "\n", "            ", "network", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "network", ".", "eval", "(", ")", "\n", "\n", "######", "\n", "\n", "", "", "ntks", "=", "[", "]", "\n", "nngps", "=", "[", "]", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "xloader", ")", ":", "\n", "\n", "# Only need images to compute NTKs", "\n", "        ", "support_xs", ",", "_", ",", "query_xs", ",", "_", "=", "data", "\n", "if", "num_batch", ">", "0", "and", "i", ">=", "num_batch", ":", "break", "\n", "support_xs", "=", "support_xs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "query_xs", "=", "query_xs", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "\n", "batch_size", ",", "n_support", ",", "channel", ",", "height", ",", "width", "=", "support_xs", ".", "size", "(", ")", "\n", "_", ",", "n_queries", ",", "_", ",", "_", ",", "_", "=", "query_xs", ".", "size", "(", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "view", "(", "-", "1", ",", "channel", ",", "height", ",", "width", ")", "\n", "query_xs", "=", "query_xs", ".", "view", "(", "-", "1", ",", "channel", ",", "height", ",", "width", ")", "\n", "\n", "# print(support_xs.size())", "\n", "# print(query_xs.size())", "\n", "\n", "# run once to get dimension of output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# get first network to extract dimension of output", "\n", "            ", "network", "=", "networks", "[", "0", "]", "\n", "\n", "# Pass query images to get features", "\n", "query_features", "=", "network", "(", "query_xs", ")", "\n", "if", "isinstance", "(", "query_features", ",", "tuple", ")", ":", "\n", "                ", "query_features", "=", "query_features", "[", "\n", "0", "]", "# 201 networks: return features and logits, here we use features", "\n", "\n", "", "temp_feature_size", "=", "query_features", ".", "size", "(", ")", "\n", "assert", "len", "(", "\n", "temp_feature_size", ")", "==", "2", ",", "\"Model output should have dimension two which is (size of batch_size x output_dim)\"", "\n", "\n", "", "xs", "=", "torch", ".", "cat", "(", "[", "query_xs", ",", "support_xs", "]", ",", "axis", "=", "0", ")", "\n", "\n", "for", "net_idx", ",", "network", "in", "enumerate", "(", "networks", ")", ":", "\n", "\n", "            ", "network", "=", "network", ".", "to", "(", "device", ")", "\n", "\n", "# construct head", "\n", "head", "=", "torch", ".", "nn", ".", "Linear", "(", "temp_feature_size", "[", "1", "]", ",", "ways", ")", "\n", "head", ".", "to", "(", "device", ")", "\n", "\n", "# Wrap network and head", "\n", "try", ":", "\n", "                ", "network_wrap", "=", "GradSampleModule", "(", "network", ")", "\n", "", "except", ":", "\n", "                ", "network_wrap", "=", "network", "\n", "\n", "", "head_wrap", "=", "GradSampleModule", "(", "head", ")", "\n", "\n", "# Clear per-sample-grads and grads", "\n", "network", ".", "zero_grad", "(", ")", "\n", "head", ".", "zero_grad", "(", ")", "\n", "del_grad_sample", "(", "network_wrap", ")", "\n", "del_grad_sample", "(", "head_wrap", ")", "\n", "\n", "features", "=", "network_wrap", "(", "xs", ")", "\n", "if", "isinstance", "(", "features", ",", "tuple", ")", ":", "\n", "                ", "features", "=", "features", "[", "0", "]", "\n", "", "logit", "=", "head_wrap", "(", "features", ")", "\n", "\n", "# Notice we should take the fact that averaging per-sample-gradient is needed into account", "\n", "(", "logit", ".", "sum", "(", ")", "/", "xs", ".", "size", "(", "0", ")", ")", ".", "backward", "(", ")", "\n", "\n", "ntk", "=", "0", "\n", "nngp", "=", "0", "\n", "\n", "# Here, we use weight (or also bias) to compute NTK, we exclude weight/bias of Norm layers", "\n", "for", "module", "in", "network", ".", "modules", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "module", ",", "NORM_LAYERS", ")", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "'weight'", ")", "and", "hasattr", "(", "module", ".", "weight", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'weight'", "in", "params_types", "and", "(", "module", ".", "weight", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "weight", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "\n", "", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "hasattr", "(", "module", ".", "bias", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'bias'", "in", "params_types", "and", "(", "module", ".", "bias", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "bias", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "\n", "# Also take into account the params of head for computing MetaNTK", "\n", "", "", "", "", "for", "module", "in", "head", ".", "modules", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "module", ",", "NORM_LAYERS", ")", ":", "\n", "                    ", "if", "hasattr", "(", "module", ",", "'weight'", ")", "and", "hasattr", "(", "module", ".", "weight", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'weight'", "in", "params_types", "and", "(", "module", ".", "weight", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "weight", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "nngp", "+=", "_gram", "\n", "\n", "", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "hasattr", "(", "module", ".", "bias", ",", "'grad'", ")", ":", "\n", "                        ", "if", "'bias'", "in", "params_types", "and", "(", "module", ".", "bias", ".", "grad", "is", "not", "None", ")", ":", "\n", "                            ", "_grads", "=", "module", ".", "bias", ".", "grad_sample", "\n", "_grads", "=", "_grads", ".", "view", "(", "_grads", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "_gram", "=", "torch", ".", "einsum", "(", "'nc,mc->nm'", ",", "[", "_grads", ",", "_grads", "]", ")", ".", "detach", "(", ")", "\n", "ntk", "+=", "_gram", "\n", "nngp", "+=", "_gram", "\n", "\n", "# Only under the following condition NNGP will be equal to NTK:", "\n", "# The output of the network is zero", "\n", "", "", "", "", "if", "torch", ".", "allclose", "(", "nngp", ",", "ntk", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "testfeatures", "=", "network", "(", "xs", ".", "squeeze", "(", ")", ")", "\n", "if", "isinstance", "(", "testfeatures", ",", "tuple", ")", ":", "\n", "                        ", "testfeatures", "=", "testfeatures", "[", "0", "]", "\n", "", "", "print", "(", "ntk", ")", "\n", "assert", "torch", ".", "allclose", "(", "testfeatures", ",", "torch", ".", "zeros_like", "(", "testfeatures", ")", ")", ",", "'Please check bug, only when output is zero then NNGP=NTK'", "\n", "assert", "norm_type", "==", "'nonorm'", "\n", "\n", "", "ntks", ".", "append", "(", "ntk", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "nngps", ".", "append", "(", "nngp", ".", "cpu", "(", ")", ".", "detach", "(", ")", ")", "\n", "\n", "# print(ntk.size())", "\n", "\n", "network", ".", "zero_grad", "(", ")", "\n", "head", ".", "zero_grad", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "if", "algorithm", "==", "'MAML'", ":", "\n", "        ", "K", "=", "ntks", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "K", "=", "nngps", ".", "copy", "(", ")", "\n", "\n", "# Compute MetaNTK based on NTKs and NNGPS", "\n", "", "assert", "len", "(", "ntks", ")", "==", "len", "(", "K", ")", "\n", "conds", "=", "[", "]", "\n", "for", "net_idx", "in", "range", "(", "len", "(", "ntks", ")", ")", ":", "\n", "# We will pass if those ntk == nngp since the output is zero tensor", "\n", "        ", "if", "torch", ".", "allclose", "(", "ntks", "[", "net_idx", "]", ",", "nngps", "[", "net_idx", "]", ")", ":", "\n", "            ", "conds", ".", "append", "(", "100000.0", ")", "\n", "", "else", ":", "\n", "            ", "metantk_cond", "=", "compute_analytical_metantk_n", "(", "ntks", "[", "net_idx", "]", ",", "K", "[", "net_idx", "]", ",", "batch_size", ",", "n_queries", ",", "n_support", ",", "inner_lr_time", ",", "reg_coef", ",", "algorithm", "=", "algorithm", ")", "[", "'eigenvalues'", "]", "\n", "conds", ".", "append", "(", "np", ".", "nan_to_num", "(", "(", "metantk_cond", "[", "-", "1", "]", "/", "metantk_cond", "[", "0", "]", ")", ",", "copy", "=", "True", ",", "nan", "=", "100000.0", ")", ")", "\n", "", "", "return", "conds", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.SharedUtils.additive_func": [[1, 14], ["min", "A.size", "B.size", "A.size", "B.size", "A.size", "B.size", "A.dim", "B.dim", "A.size", "B.size", "A.size", "B.size", "B.clone", "A.clone"], "function", ["None"], ["def", "additive_func", "(", "A", ",", "B", ")", ":", "\n", "    ", "assert", "A", ".", "dim", "(", ")", "==", "B", ".", "dim", "(", ")", "and", "A", ".", "size", "(", "0", ")", "==", "B", ".", "size", "(", "0", ")", ",", "'{:} vs {:}'", ".", "format", "(", "A", ".", "size", "(", ")", ",", "B", ".", "size", "(", ")", ")", "\n", "C", "=", "min", "(", "A", ".", "size", "(", "1", ")", ",", "B", ".", "size", "(", "1", ")", ")", "\n", "if", "A", ".", "size", "(", "1", ")", "==", "B", ".", "size", "(", "1", ")", ":", "\n", "        ", "return", "A", "+", "B", "\n", "", "elif", "A", ".", "size", "(", "1", ")", "<", "B", ".", "size", "(", "1", ")", ":", "\n", "        ", "out", "=", "B", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "A", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "out", "=", "A", ".", "clone", "(", ")", "\n", "out", "[", ":", ",", ":", "C", "]", "+=", "B", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.SharedUtils.change_key": [[16, 21], ["hasattr", "setattr"], "function", ["None"], ["", "", "def", "change_key", "(", "key", ",", "value", ")", ":", "\n", "    ", "def", "func", "(", "m", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "key", ")", ":", "\n", "            ", "setattr", "(", "m", ",", "key", ",", "value", ")", "\n", "", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.SharedUtils.parse_channel_info": [[23, 28], ["xstring.split", "x.split", "int"], "function", ["None"], ["", "def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "    ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.ReLUConvBN.__init__": [[79, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", "# BatchNorm_scratch(C_out, 4),", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.ReLUConvBN.forward": [[88, 90], ["cell_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.SepConv.__init__": [[94, 101], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", "# BatchNorm_scratch(C_out, 4),", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.SepConv.forward": [[104, 106], ["cell_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.DualSepConv.__init__": [[110, 114], ["torch.Module.__init__", "cell_operations.SepConv", "cell_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.DualSepConv.forward": [[115, 119], ["cell_operations.DualSepConv.op_a", "cell_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.ResNetBasicblock.__init__": [[123, 140], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "cell_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "cell_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.ResNetBasicblock.extra_repr": [[141, 144], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "'{name}(inC={in_dim}, outC={out_dim}, stride={stride})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.ResNetBasicblock.forward": [[145, 155], ["cell_operations.ResNetBasicblock.conv_a", "cell_operations.ResNetBasicblock.conv_b", "cell_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.POOLING.__init__": [[159, 168], ["torch.Module.__init__", "cell_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "            ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "mode", "==", "'avg'", ":", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "elif", "mode", "==", "'max'", ":", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid mode={:} in POOLING'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.POOLING.forward": [[169, 173], ["cell_operations.POOLING.op", "cell_operations.POOLING.preprocess"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "preprocess", ":", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "else", ":", "x", "=", "inputs", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.PoolBN.__init__": [[180, 196], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "pool_type.lower", "torch.MaxPool2d", "torch.MaxPool2d", "pool_type.lower", "torch.AvgPool2d", "torch.AvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "pool_type", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pool_type: 'max' or 'avg'\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "pool_type", ".", "lower", "(", ")", "==", "\"max\"", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "elif", "pool_type", ".", "lower", "(", ")", "==", "\"avg\"", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "count_include_pad", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "# self.bn = BatchNorm_scratch(C, 4)", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.PoolBN.forward": [[198, 202], ["cell_operations.PoolBN.pool", "cell_operations.PoolBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pool", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.Identity.__init__": [[205, 207], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.Identity.forward": [[208, 210], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.Zero.__init__": [[214, 220], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.Zero.forward": [[221, 242], ["list", "x.new_zeros", "x.mul", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.allclose", "torch.allclose", "torch.allclose", "torch.allclose", "print", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "            ", "if", "self", ".", "stride", "==", "1", ":", "return", "x", ".", "mul", "(", "0.", ")", "\n", "# else               : return x[:,:,::self.stride,::self.stride].mul(0.)", "\n", "else", ":", "\n", "                ", "shape", "=", "x", ".", "size", "(", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "(", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ",", "shape", "[", "2", "]", "//", "self", ".", "stride", ",", "shape", "[", "3", "]", "//", "self", ".", "stride", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "## Notice that we cant compare two tensors when vmap is computing per-sample-gradient", "\n", "try", ":", "\n", "                    ", "if", "not", "torch", ".", "allclose", "(", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", ",", "out", ")", ":", "\n", "                        ", "print", "(", "'[*] ERROR! ERROR! Implementation is Incorrect! Please stop the program!!!'", ")", "\n", "", "", "except", ":", "\n", "# vmap is computing per-sample-gradient if goes here", "\n", "                    ", "pass", "\n", "", "return", "out", "\n", "", "", "else", ":", "\n", "            ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.Zero.extra_repr": [[243, 245], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FactorizedReduce.__init__": [[249, 267], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "cell_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "# assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "            ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "# self.bn = BatchNorm_scratch(C_out, 4)", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FactorizedReduce.forward": [[269, 291], ["cell_operations.FactorizedReduce.bn", "cell_operations.FactorizedReduce.relu", "cell_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "# assert y.size(-1) == y.size(-2)", "\n", "# mask = torch.eye(y.size(-1), device=y.device)", "\n", "# mask = mask[:,1:]", "\n", "# y_sub = torch.transpose((torch.transpose(y @ mask, -1,-2)) @ mask, -1,-2)", "\n", "# out = torch.cat([self.convs[0](x), self.convs[1](y_sub)], dim=1)", "\n", "\n", "# ## Notice that we cant compare two tensors when vmap is computing per-sample-gradient", "\n", "# try:", "\n", "#     if not torch.allclose(y[:,:,1:,1:], y_sub):", "\n", "#         print('[*] ERROR! ERROR! Implementation is Incorrect! Please stop the program!!!')", "\n", "# except:", "\n", "#     # vmap is computing per-sample-gradient if goes here", "\n", "#     pass", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FactorizedReduce.extra_repr": [[292, 294], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FacConv.__init__": [[300, 309], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_length", ",", "stride", ",", "padding", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "C_out", ",", "(", "1", ",", "kernel_length", ")", ",", "stride", ",", "(", "0", ",", "padding", ")", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "(", "kernel_length", ",", "1", ")", ",", "1", ",", "(", "padding", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", "# BatchNorm_scratch(C_out, 4),", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FacConv.forward": [[312, 314], ["cell_operations.FacConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.cell_operations.FacConv.extra_repr": [[315, 317], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cell_based_tiny_net": [[18, 56], ["getattr", "hasattr", "cell_infers.TinyNetwork", "hasattr", "isinstance", "cell_searchs.CellStructure.str2structure", "DynamicShapeTinyNet", "cell_searchs.CellStructure.str2structure", "ValueError", "tuple", "ValueError", "int", "config.channels.split"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.str2structure", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.str2structure"], []], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_search_spaces": [[59, 66], ["ValueError", "SearchSpaceNames.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cifar_models": [[68, 109], ["getattr", "getattr.startswith", "CifarResNet", "ValueError", "DenseNet", "len", "getattr.split", "InferWidthCifarResNet", "CifarWideResNet", "ValueError", "getattr.split", "InferDepthCifarResNet", "InferCifarResNet", "NASNetonCIFAR", "ValueError", "torch.load", "hasattr", "hasattr", "os.path.isfile", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_imagenet_models": [[111, 138], ["getattr", "getattr.startswith", "ResNet", "ValueError", "MobileNetV2", "ValueError", "len", "getattr.split", "ValueError", "getattr.split", "InferImagenetResNet", "InferMobileNetV2", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.obtain_model": [[141, 148], ["__init__.get_cifar_models", "__init__.get_imagenet_models", "ValueError"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_cifar_models", "home.repos.pwc.inspect_result.yitewang_metantk-nas.models.__init__.get_imagenet_models"], []], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.InferCell.__init__": [[10, 34], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range", "len", "len", "cells.InferCell.node_IX.append", "cells.InferCell.node_IN.append", "cur_index.append", "cur_innod.append", "cells.InferCell.layers.append", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "node_IN", "=", "[", "]", "\n", "self", ".", "node_IX", "=", "[", "]", "\n", "self", ".", "genotype", "=", "deepcopy", "(", "genotype", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "genotype", ")", ")", ":", "\n", "            ", "node_info", "=", "genotype", "[", "i", "-", "1", "]", "\n", "cur_index", "=", "[", "]", "\n", "cur_innod", "=", "[", "]", "\n", "for", "(", "op_name", ",", "op_in", ")", "in", "node_info", ":", "\n", "                ", "if", "op_in", "==", "0", ":", "\n", "                    ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "True", ",", "True", ")", "\n", "", "else", ":", "\n", "                    ", "layer", "=", "OPS", "[", "op_name", "]", "(", "C_out", ",", "C_out", ",", "1", ",", "True", ",", "True", ")", "\n", "", "cur_index", ".", "append", "(", "len", "(", "self", ".", "layers", ")", ")", "\n", "cur_innod", ".", "append", "(", "op_in", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "", "self", ".", "node_IX", ".", "append", "(", "cur_index", ")", "\n", "self", ".", "node_IN", ".", "append", "(", "cur_innod", ")", "\n", "", "self", ".", "nodes", "=", "len", "(", "genotype", ")", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.InferCell.extra_repr": [[35, 43], ["enumerate", "zip", "laystr.append", "cells.InferCell.genotype.tostr", "zip"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tostr"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "'info :: nodes={nodes}, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "laystr", "=", "[", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "            ", "y", "=", "[", "'I{:}-L{:}'", ".", "format", "(", "_ii", ",", "_il", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", "]", "\n", "x", "=", "'{:}<-({:})'", ".", "format", "(", "i", "+", "1", ",", "','", ".", "join", "(", "y", ")", ")", "\n", "laystr", ".", "append", "(", "x", ")", "\n", "", "return", "string", "+", "', [{:}]'", ".", "format", "(", "' | '", ".", "join", "(", "laystr", ")", ")", "+", "', {:}'", ".", "format", "(", "self", ".", "genotype", ".", "tostr", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.InferCell.forward": [[44, 50], ["enumerate", "zip", "sum", "nodes.append", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", ",", "(", "node_layers", ",", "node_innods", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "node_IX", ",", "self", ".", "node_IN", ")", ")", ":", "\n", "            ", "node_feature", "=", "sum", "(", "self", ".", "layers", "[", "_il", "]", "(", "nodes", "[", "_ii", "]", ")", "for", "_il", ",", "_ii", "in", "zip", "(", "node_layers", ",", "node_innods", ")", ")", "\n", "nodes", ".", "append", "(", "node_feature", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.NASNetInferCell.__init__": [[56, 78], ["torch.Module.__init__", "len", "len", "torch.ModuleDict", "torch.ModuleDict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "NASNetInferCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "\n", "if", "not", "reduction", ":", "\n", "            ", "nodes", ",", "concats", "=", "genotype", "[", "'normal'", "]", ",", "genotype", "[", "'normal_concat'", "]", "\n", "", "else", ":", "\n", "            ", "nodes", ",", "concats", "=", "genotype", "[", "'reduce'", "]", ",", "genotype", "[", "'reduce_concat'", "]", "\n", "", "self", ".", "_multiplier", "=", "len", "(", "concats", ")", "\n", "self", ".", "_concats", "=", "concats", "\n", "self", ".", "_steps", "=", "len", "(", "nodes", ")", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "            ", "for", "in_node", "in", "node", ":", "\n", "                ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "OPS", "[", "name", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.NASNetInferCell.forward": [[80, 94], ["cells.NASNetInferCell.preprocess0", "cells.NASNetInferCell.preprocess1", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "states.append", "clist.append", "sum", "op"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "unused_drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "self", ".", "_nodes", ")", ":", "\n", "            ", "clist", "=", "[", "]", "\n", "for", "in_node", "in", "node", ":", "\n", "                ", "name", ",", "j", "=", "in_node", "[", "0", "]", ",", "in_node", "[", "1", "]", "\n", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", "+", "2", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "clist", ".", "append", "(", "op", "(", "states", "[", "j", "]", ")", ")", "\n", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "x", "]", "for", "x", "in", "self", ".", "_concats", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.AuxiliaryHeadCIFAR.__init__": [[98, 112], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.cells.AuxiliaryHeadCIFAR.forward": [[113, 117], ["cells.AuxiliaryHeadCIFAR.features", "cells.AuxiliaryHeadCIFAR.classifier", "cells.AuxiliaryHeadCIFAR.view", "cells.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.__init__": [[8, 35], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "zip", "cells.NASNetInferCell", "nasnet_cifar.NASNetonCIFAR.cells.append", "torch.BatchNorm2d", "torch.ReLU", "cells.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "stem_multiplier", ",", "num_classes", ",", "genotype", ",", "auxiliary", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "NASNetonCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "\n", "# config for each layer", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "(", "N", "-", "1", ")", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "(", "N", "-", "1", ")", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "+", "[", "True", "]", "+", "[", "False", "]", "*", "(", "N", "-", "1", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "self", ".", "auxiliary_index", "=", "None", "\n", "self", ".", "auxiliary_head", "=", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "cell", ".", "_multiplier", "*", "C_curr", ",", "reduction", "\n", "if", "reduction", "and", "C_curr", "==", "C", "*", "4", "and", "auxiliary", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "auxiliary_index", "=", "index", "\n", "", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "drop_path_prob", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.update_drop_path": [[36, 38], ["None"], "methods", ["None"], ["", "def", "update_drop_path", "(", "self", ",", "drop_path_prob", ")", ":", "\n", "        ", "self", ".", "drop_path_prob", "=", "drop_path_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param": [[39, 42], ["list", "nasnet_cifar.NASNetonCIFAR.auxiliary_head.parameters"], "methods", ["None"], ["", "def", "auxiliary_param", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "auxiliary_head", "is", "None", ":", "return", "[", "]", "\n", "else", ":", "return", "list", "(", "self", ".", "auxiliary_head", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.get_message": [[43, 48], ["nasnet_cifar.NASNetonCIFAR.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.extra_repr": [[49, 51], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.forward": [[52, 66], ["enumerate", "nasnet_cifar.NASNetonCIFAR.lastact", "nasnet_cifar.NASNetonCIFAR.global_pooling", "out.view.view.view", "nasnet_cifar.NASNetonCIFAR.classifier", "nasnet_cifar.NASNetonCIFAR.stem", "cell", "cell_results.append", "out.view.view.size", "nasnet_cifar.NASNetonCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "stem_feature", ",", "logits_aux", "=", "self", ".", "stem", "(", "inputs", ")", ",", "None", "\n", "cell_results", "=", "[", "stem_feature", ",", "stem_feature", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "cell_feature", "=", "cell", "(", "cell_results", "[", "-", "2", "]", ",", "cell_results", "[", "-", "1", "]", ",", "self", ".", "drop_path_prob", ")", "\n", "cell_results", ".", "append", "(", "cell_feature", ")", "\n", "if", "self", ".", "auxiliary_index", "is", "not", "None", "and", "i", "==", "self", ".", "auxiliary_index", "and", "self", ".", "training", ":", "\n", "                ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "", "", "out", "=", "self", ".", "lastact", "(", "cell_results", "[", "-", "1", "]", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "if", "logits_aux", "is", "None", ":", "return", "out", ",", "logits", "\n", "else", ":", "return", "out", ",", "[", "logits", ",", "logits_aux", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.tiny_network.TinyNetwork.__init__": [[10, 44], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Conv2d", "torch.BatchNorm2d", "len", "min", "zip", "tiny_network.TinyNetwork.cells.append", "torch.BatchNorm2d", "torch.ReLU", "len", "cell_operations.ResNetBasicblock", "cells.InferCell"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "genotype", ",", "num_classes", ",", "C_in", "=", "3", ",", "depth", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "TinyNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "\n", "# C_in: number of input channel", "\n", "# depth: number of cells to forward", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "if", "depth", "==", "-", "1", ":", "\n", "            ", "self", ".", "depth", "=", "len", "(", "layer_channels", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "depth", "=", "min", "(", "depth", ",", "len", "(", "layer_channels", ")", ")", "\n", "\n", "", "C_prev", "=", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "if", "index", ">=", "self", ".", "depth", ":", "\n", "                ", "break", "\n", "", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ",", "True", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "InferCell", "(", "genotype", ",", "C_prev", ",", "C_curr", ",", "1", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.tiny_network.TinyNetwork.get_message": [[45, 50], ["tiny_network.TinyNetwork.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr"], ["", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.tiny_network.TinyNetwork.extra_repr": [[51, 53], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(C={_C}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.tiny_network.TinyNetwork.forward": [[54, 73], ["tiny_network.TinyNetwork.stem", "features.append", "enumerate", "tiny_network.TinyNetwork.lastact", "features.append", "tiny_network.TinyNetwork.global_pooling", "features.append", "out.view.view.view", "tiny_network.TinyNetwork.classifier", "cell", "features.append", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "feature", "=", "cell", "(", "feature", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "features", ".", "append", "(", "out", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "features", ".", "append", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "out", ",", "logits", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "out", ",", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.__init__": [[28, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_model_darts.TinyNetworkDarts.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "min", "cell_operations.ResNetBasicblock", "search_cells.NAS201SearchCell", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "N", ",", "max_nodes", ",", "num_classes", ",", "search_space", ",", "affine", ",", "track_running_stats", ",", "depth", "=", "-", "1", ",", "use_stem", "=", "True", ")", ":", "\n", "        ", "super", "(", "TinyNetworkDarts", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "# number of stacked cell at each stage", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "use_stem", "=", "use_stem", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "min", "(", "3", ",", "C", ")", ",", "C", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ")", "\n", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "2", "]", "+", "[", "C", "*", "2", "]", "*", "N", "+", "[", "C", "*", "4", "]", "+", "[", "C", "*", "4", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "C_prev", ",", "num_edge", ",", "edge2index", "=", "C", ",", "None", ",", "None", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "if", "depth", ">", "0", "and", "index", ">=", "depth", ":", "break", "\n", "if", "reduction", ":", "\n", "                ", "cell", "=", "ResNetBasicblock", "(", "C_prev", ",", "C_curr", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "cell", "=", "SearchCell", "(", "C_prev", ",", "C_curr", ",", "1", ",", "max_nodes", ",", "search_space", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.entropy": [[60, 65], ["cal_entropy().mean().view", "search_model_darts.cal_entropy", "cal_entropy().mean", "search_model_darts.cal_entropy"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.cal_entropy", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.cal_entropy"], ["", "def", "entropy", "(", "self", ",", "mean", "=", "True", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "return", "cal_entropy", "(", "self", ".", "arch_parameters", ",", "-", "1", ")", ".", "mean", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "cal_entropy", "(", "self", ".", "arch_parameters", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.get_weights": [[66, 71], ["list", "list", "list", "list", "list", "search_model_darts.TinyNetworkDarts.classifier.parameters", "search_model_darts.TinyNetworkDarts.stem.parameters", "search_model_darts.TinyNetworkDarts.cells.parameters", "search_model_darts.TinyNetworkDarts.lastact.parameters", "search_model_darts.TinyNetworkDarts.global_pooling.parameters"], "methods", ["None"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.get_alphas": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "arch_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.set_alphas": [[75, 77], ["search_model_darts.TinyNetworkDarts.arch_parameters.data.copy_"], "methods", ["None"], ["", "def", "set_alphas", "(", "self", ",", "arch_parameters", ")", ":", "\n", "        ", "self", ".", "arch_parameters", ".", "data", ".", "copy_", "(", "arch_parameters", "[", "0", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.show_alphas": [[78, 81], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "'arch-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.get_message": [[82, 87], ["search_model_darts.TinyNetworkDarts.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr"], ["", "", "def", "get_message", "(", "self", ")", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.extra_repr": [[88, 90], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(C={_C}, Max-Nodes={max_nodes}, N={_layerN}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.genotype": [[91, 109], ["range", "genotypes.Structure", "range", "genotypes.append", "xlist.append", "tuple", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "random.choice", "weights.argmax().item", "weights.argmax().item", "weights.argmax", "weights.argmax"], "methods", ["None"], ["", "def", "genotype", "(", "self", ",", "get_random", "=", "False", ",", "hardwts", "=", "None", ")", ":", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "xlist", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "hardwts", "is", "not", "None", ":", "\n", "                        ", "weights", "=", "hardwts", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "elif", "get_random", ":", "\n", "                        ", "op_name", "=", "random", ".", "choice", "(", "self", ".", "op_names", ")", "\n", "", "else", ":", "\n", "                        ", "weights", "=", "self", ".", "arch_parameters", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "op_name", "=", "self", ".", "op_names", "[", "weights", ".", "argmax", "(", ")", ".", "item", "(", ")", "]", "\n", "", "", "xlist", ".", "append", "(", "(", "op_name", ",", "j", ")", ")", "\n", "", "genotypes", ".", "append", "(", "tuple", "(", "xlist", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.TinyNetworkDarts.forward": [[110, 134], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "features_all.append", "enumerate", "search_model_darts.TinyNetworkDarts.lastact", "search_model_darts.TinyNetworkDarts.global_pooling", "out.view.view.view", "search_model_darts.TinyNetworkDarts.classifier", "search_model_darts.TinyNetworkDarts.stem", "cell.detach", "isinstance", "features_all.append", "out.view.view.size", "cell", "cell", "cell.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "alphas", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_parameters", ",", "dim", "=", "-", "1", ")", "\n", "features_all", "=", "[", "]", "\n", "if", "self", ".", "use_stem", ":", "\n", "            ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "feature", "=", "inputs", "\n", "", "features_all", ".", "append", "(", "feature", ".", "detach", "(", ")", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "isinstance", "(", "cell", ",", "SearchCell", ")", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ",", "alphas", ")", "\n", "", "else", ":", "\n", "                ", "feature", "=", "cell", "(", "feature", ")", "\n", "", "features_all", ".", "append", "(", "feature", ".", "detach", "(", ")", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "out", ",", "logits", ",", "features_all", "\n", "", "else", ":", "\n", "            ", "return", "out", ",", "logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts.cal_entropy": [[12, 24], ["torch.softmax", "torch.log_softmax"], "function", ["None"], ["def", "cal_entropy", "(", "logit", ":", "torch", ".", "Tensor", ",", "dim", "=", "-", "1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    :param logit: An unnormalized vector.\n    :param dim: ~\n    :return: entropy\n    \"\"\"", "\n", "prob", "=", "F", ".", "softmax", "(", "logit", ",", "dim", "=", "dim", ")", "\n", "log_prob", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "dim", ")", "\n", "\n", "entropy", "=", "-", "(", "log_prob", "*", "prob", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "False", ")", "\n", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.__init__": [[22, 35], ["enumerate", "isinstance", "isinstance", "type", "len", "genotypes.Structure.node_N.append", "genotypes.Structure.nodes.append", "isinstance", "isinstance", "type", "len", "len", "len", "tuple", "isinstance", "isinstance", "type", "copy.deepcopy", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ")", ":", "\n", "        ", "assert", "isinstance", "(", "genotype", ",", "list", ")", "or", "isinstance", "(", "genotype", ",", "tuple", ")", ",", "'invalid class of genotype : {:}'", ".", "format", "(", "type", "(", "genotype", ")", ")", "\n", "self", ".", "node_num", "=", "len", "(", "genotype", ")", "+", "1", "\n", "self", ".", "nodes", "=", "[", "]", "\n", "self", ".", "node_N", "=", "[", "]", "\n", "for", "idx", ",", "node_info", "in", "enumerate", "(", "genotype", ")", ":", "\n", "            ", "assert", "isinstance", "(", "node_info", ",", "list", ")", "or", "isinstance", "(", "node_info", ",", "tuple", ")", ",", "'invalid class of node_info : {:}'", ".", "format", "(", "type", "(", "node_info", ")", ")", "\n", "assert", "len", "(", "node_info", ")", ">=", "1", ",", "'invalid length : {:}'", ".", "format", "(", "len", "(", "node_info", ")", ")", "\n", "for", "node_in", "in", "node_info", ":", "\n", "                ", "assert", "isinstance", "(", "node_in", ",", "list", ")", "or", "isinstance", "(", "node_in", ",", "tuple", ")", ",", "'invalid class of in-node : {:}'", ".", "format", "(", "type", "(", "node_in", ")", ")", "\n", "assert", "len", "(", "node_in", ")", "==", "2", "and", "node_in", "[", "1", "]", "<=", "idx", ",", "'invalid in-node : {:}'", ".", "format", "(", "node_in", ")", "\n", "", "self", ".", "node_N", ".", "append", "(", "len", "(", "node_info", ")", ")", "\n", "self", ".", "nodes", ".", "append", "(", "tuple", "(", "deepcopy", "(", "node_info", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tolist": [[36, 48], ["list", "sorted", "tuple", "genotypes.append", "filter", "len"], "methods", ["None"], ["", "", "def", "tolist", "(", "self", ",", "remove_str", ")", ":", "\n", "# convert this class to the list, if remove_str is 'none', then remove the 'none' operation.", "\n", "# note that we re-order the input node in this function", "\n", "# return the-genotype-list and success [if unsuccess, it is not a connectivity]", "\n", "        ", "genotypes", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "node_info", "=", "list", "(", "node_info", ")", "\n", "node_info", "=", "sorted", "(", "node_info", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "node_info", "=", "tuple", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "!=", "remove_str", ",", "node_info", ")", ")", "\n", "if", "len", "(", "node_info", ")", "==", "0", ":", "return", "None", ",", "False", "\n", "genotypes", ".", "append", "(", "node_info", ")", "\n", "", "return", "genotypes", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.node": [[49, 52], ["len", "len"], "methods", ["None"], ["", "def", "node", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", ">", "0", "and", "index", "<=", "len", "(", "self", ")", ",", "'invalid index={:} < {:}'", ".", "format", "(", "index", ",", "len", "(", "self", ")", ")", "\n", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tostr": [[53, 60], ["strings.append"], "methods", ["None"], ["", "def", "tostr", "(", "self", ")", ":", "\n", "        ", "strings", "=", "[", "]", "\n", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "string", "=", "'|'", ".", "join", "(", "[", "x", "[", "0", "]", "+", "'~{:}'", ".", "format", "(", "x", "[", "1", "]", ")", "for", "x", "in", "node_info", "]", ")", "\n", "string", "=", "'|{:}|'", ".", "format", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "'+'", ".", "join", "(", "strings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.check_valid": [[61, 71], ["enumerate", "sums.append", "sum", "len"], "methods", ["None"], ["", "def", "check_valid", "(", "self", ")", ":", "\n", "        ", "nodes", "=", "{", "0", ":", "True", "}", "\n", "for", "i", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "            ", "sums", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "                ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "is", "False", ":", "x", "=", "False", "\n", "else", ":", "x", "=", "True", "\n", "sums", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i", "+", "1", "]", "=", "sum", "(", "sums", ")", ">", "0", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.to_unique_str": [[72, 91], ["enumerate", "cur_node.append", "sorted", "len"], "methods", ["None"], ["", "def", "to_unique_str", "(", "self", ",", "consider_zero", "=", "False", ")", ":", "\n", "# this is used to identify the isomorphic cell, which rerquires the prior knowledge of operation", "\n", "# two operations are special, i.e., none and skip_connect", "\n", "        ", "nodes", "=", "{", "0", ":", "'0'", "}", "\n", "for", "i_node", ",", "node_info", "in", "enumerate", "(", "self", ".", "nodes", ")", ":", "\n", "            ", "cur_node", "=", "[", "]", "\n", "for", "op", ",", "xin", "in", "node_info", ":", "\n", "                ", "if", "consider_zero", "is", "None", ":", "\n", "                    ", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "elif", "consider_zero", ":", "\n", "                    ", "if", "op", "==", "'none'", "or", "nodes", "[", "xin", "]", "==", "'#'", ":", "x", "=", "'#'", "# zero", "\n", "elif", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "else", ":", "\n", "                    ", "if", "op", "==", "'skip_connect'", ":", "x", "=", "nodes", "[", "xin", "]", "\n", "else", ":", "x", "=", "'('", "+", "nodes", "[", "xin", "]", "+", "')'", "+", "'@{:}'", ".", "format", "(", "op", ")", "\n", "", "cur_node", ".", "append", "(", "x", ")", "\n", "", "nodes", "[", "i_node", "+", "1", "]", "=", "'+'", ".", "join", "(", "sorted", "(", "cur_node", ")", ")", "\n", "", "return", "nodes", "[", "len", "(", "self", ".", "nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.check_valid_op": [[92, 98], ["None"], "methods", ["None"], ["", "def", "check_valid_op", "(", "self", ",", "op_names", ")", ":", "\n", "        ", "for", "node_info", "in", "self", ".", "nodes", ":", "\n", "            ", "for", "inode_edge", "in", "node_info", ":", "\n", "#assert inode_edge[0] in op_names, 'invalid op-name : {:}'.format(inode_edge[0])", "\n", "                ", "if", "inode_edge", "[", "0", "]", "not", "in", "op_names", ":", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.__repr__": [[99, 101], ["genotypes.Structure.tostr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tostr"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}({node_num} nodes with {node_info})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "node_info", "=", "self", ".", "tostr", "(", ")", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "nodes", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.__getitem__": [[105, 107], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "nodes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.str2structure": [[108, 120], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2structure", "(", "xstr", ")", ":", "\n", "        ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "            ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.str2fullstructure": [[121, 137], ["isinstance", "xstr.split", "enumerate", "genotypes.Structure", "type", "list", "list", "list", "range", "sorted", "genotypes.append", "filter", "xi.split", "tuple", "node_str.split", "len", "list.append", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2fullstructure", "(", "xstr", ",", "default_name", "=", "'none'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "xstr", ",", "str", ")", ",", "'must take string (not {:}) as input'", ".", "format", "(", "type", "(", "xstr", ")", ")", "\n", "nodestrs", "=", "xstr", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "nodestrs", ")", ":", "\n", "            ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "list", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "all_in_nodes", "=", "list", "(", "x", "[", "1", "]", "for", "x", "in", "input_infos", ")", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "if", "j", "not", "in", "all_in_nodes", ":", "input_infos", ".", "append", "(", "(", "default_name", ",", "j", ")", ")", "\n", "", "node_info", "=", "sorted", "(", "input_infos", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ")", "\n", "genotypes", ".", "append", "(", "tuple", "(", "node_info", ")", ")", "\n", "", "return", "Structure", "(", "genotypes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.gen_all": [[138, 157], ["genotypes.get_combination", "enumerate", "range", "isinstance", "isinstance", "type", "genotypes.get_combination", "tuple", "genotypes.Structure", "new_all_archs.append", "tuple"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.get_combination", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.get_combination"], ["", "@", "staticmethod", "\n", "def", "gen_all", "(", "search_space", ",", "num", ",", "return_ori", ")", ":", "\n", "        ", "assert", "isinstance", "(", "search_space", ",", "list", ")", "or", "isinstance", "(", "search_space", ",", "tuple", ")", ",", "'invalid class of search-space : {:}'", ".", "format", "(", "type", "(", "search_space", ")", ")", "\n", "assert", "num", ">=", "2", ",", "'There should be at least two nodes in a neural cell instead of {:}'", ".", "format", "(", "num", ")", "\n", "all_archs", "=", "get_combination", "(", "search_space", ",", "1", ")", "\n", "for", "i", ",", "arch", "in", "enumerate", "(", "all_archs", ")", ":", "\n", "            ", "all_archs", "[", "i", "]", "=", "[", "tuple", "(", "arch", ")", "]", "\n", "\n", "", "for", "inode", "in", "range", "(", "2", ",", "num", ")", ":", "\n", "            ", "cur_nodes", "=", "get_combination", "(", "search_space", ",", "inode", ")", "\n", "new_all_archs", "=", "[", "]", "\n", "for", "previous_arch", "in", "all_archs", ":", "\n", "                ", "for", "cur_node", "in", "cur_nodes", ":", "\n", "                    ", "new_all_archs", ".", "append", "(", "previous_arch", "+", "[", "tuple", "(", "cur_node", ")", "]", ")", "\n", "", "", "all_archs", "=", "new_all_archs", "\n", "", "if", "return_ori", ":", "\n", "            ", "return", "all_archs", "\n", "", "else", ":", "\n", "            ", "return", "[", "Structure", "(", "x", ")", "for", "x", "in", "all_archs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.get_combination": [[4, 18], ["range", "combs.append", "new_combs.append"], "function", ["None"], ["def", "get_combination", "(", "space", ",", "num", ")", ":", "\n", "    ", "combs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "for", "func", "in", "space", ":", "\n", "                ", "combs", ".", "append", "(", "[", "(", "func", ",", "i", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "new_combs", "=", "[", "]", "\n", "for", "string", "in", "combs", ":", "\n", "                ", "for", "func", "in", "space", ":", "\n", "                    ", "xstring", "=", "string", "+", "[", "(", "func", ",", "i", ")", "]", "\n", "new_combs", ".", "append", "(", "xstring", ")", "\n", "", "", "combs", "=", "new_combs", "\n", "", "", "return", "combs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.__init__": [[12, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "enumerate", "copy.deepcopy", "len", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "zip", "search_cells.NASNetSearchCell", "search_model_darts_nasnet.NASNetworkDARTS.cells.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "min", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ":", "int", ",", "N", ":", "int", ",", "steps", ":", "int", ",", "multiplier", ":", "int", ",", "stem_multiplier", ":", "int", ",", "feature_scale_rate", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "search_space", ":", "List", "[", "Text", "]", ",", "affine", ":", "bool", ",", "track_running_stats", ":", "bool", ",", "\n", "depth", "=", "-", "1", ",", "use_stem", "=", "True", ")", ":", "\n", "        ", "super", "(", "NASNetworkDARTS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_C", "=", "C", "\n", "self", ".", "_layerN", "=", "N", "# number of stacked cell at each stage", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_stem", "=", "use_stem", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", "if", "use_stem", "else", "min", "(", "3", ",", "C", ")", ",", "C", "*", "stem_multiplier", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "*", "stem_multiplier", ")", ")", "\n", "# cell_operations.BatchNorm_scratch(C*stem_multiplier,4))", "\n", "\n", "# config for each layer", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * (N-1) + [C*4 ] + [C*4  ] * (N-1)", "\n", "# layer_reductions = [False] * N + [True] + [False] * (N-1) + [True] + [False] * (N-1)", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * N + [C*4 ] + [C*4  ] * N", "\n", "# layer_reductions = [False] * N + [True] + [False] * N + [True] + [False] * N", "\n", "fsr", "=", "feature_scale_rate", "\n", "layer_channels", "=", "[", "C", "]", "*", "N", "+", "[", "C", "*", "fsr", "]", "+", "[", "C", "*", "fsr", "]", "*", "N", "+", "[", "C", "*", "fsr", "**", "2", "]", "+", "[", "C", "*", "fsr", "**", "2", "]", "*", "N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "num_edge", ",", "edge2index", "=", "None", ",", "None", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction_prev", "=", "C", "*", "stem_multiplier", ",", "C", "*", "stem_multiplier", ",", "C", ",", "False", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "C_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "layer_channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "if", "depth", ">", "0", "and", "index", ">=", "depth", ":", "break", "\n", "cell", "=", "SearchCell", "(", "search_space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", "\n", "if", "num_edge", "is", "None", ":", "num_edge", ",", "edge2index", "=", "cell", ".", "num_edges", ",", "cell", ".", "edge2index", "\n", "else", ":", "assert", "num_edge", "==", "cell", ".", "num_edges", "and", "edge2index", "==", "cell", ".", "edge2index", ",", "'invalid {:} vs. {:}.'", ".", "format", "(", "num_edge", ",", "cell", ".", "num_edges", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_prev_prev", ",", "C_prev", ",", "reduction_prev", "=", "C_prev", ",", "multiplier", "*", "C_curr", ",", "reduction", "\n", "", "self", ".", "op_names", "=", "deepcopy", "(", "search_space", ")", "\n", "self", ".", "_Layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "self", ".", "edge2index", "=", "edge2index", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "C_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "# self.lastact = nn.Sequential(cell_operations.BatchNorm_scratch(C_prev,4), nn.ReLU(inplace=True))", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "self", ".", "arch_normal_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "self", ".", "arch_reduce_parameters", "=", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "num_edge", ",", "len", "(", "search_space", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_weights": [[57, 62], ["list", "list", "list", "list", "list", "search_model_darts_nasnet.NASNetworkDARTS.classifier.parameters", "search_model_darts_nasnet.NASNetworkDARTS.stem.parameters", "search_model_darts_nasnet.NASNetworkDARTS.cells.parameters", "search_model_darts_nasnet.NASNetworkDARTS.lastact.parameters", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling.parameters"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "        ", "xlist", "=", "list", "(", "self", ".", "stem", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "cells", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "lastact", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "global_pooling", ".", "parameters", "(", ")", ")", "\n", "xlist", "+=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "return", "xlist", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_alphas": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_alphas", "(", "self", ")", "->", "List", "[", "torch", ".", "nn", ".", "Parameter", "]", ":", "\n", "        ", "return", "[", "self", ".", "arch_normal_parameters", ",", "self", ".", "arch_reduce_parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.set_alphas": [[66, 69], ["search_model_darts_nasnet.NASNetworkDARTS.arch_normal_parameters.data.copy_", "search_model_darts_nasnet.NASNetworkDARTS.arch_reduce_parameters.data.copy_"], "methods", ["None"], ["", "def", "set_alphas", "(", "self", ",", "arch_parameters", ")", ":", "\n", "        ", "self", ".", "arch_normal_parameters", ".", "data", ".", "copy_", "(", "arch_parameters", "[", "0", "]", ".", "data", ")", "\n", "self", ".", "arch_reduce_parameters", ".", "data", ".", "copy_", "(", "arch_parameters", "[", "1", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.show_alphas": [[70, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax().cpu", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["None"], ["", "def", "show_alphas", "(", "self", ")", "->", "Text", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "A", "=", "'arch-normal-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "B", "=", "'arch-reduce-parameters :\\n{:}'", ".", "format", "(", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "'{:}\\n{:}'", ".", "format", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.get_message": [[76, 81], ["search_model_darts_nasnet.NASNetworkDARTS.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.extra_repr": [[82, 84], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "Text", ":", "\n", "        ", "return", "(", "'{name}(C={_C}, N={_layerN}, steps={_steps}, multiplier={_multiplier}, L={_Layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype2cmd": [[85, 88], ["None"], "methods", ["None"], ["", "def", "genotype2cmd", "(", "self", ",", "genotype", ")", ":", "\n", "        ", "cmd", "=", "\"Genotype(normal=%s, normal_concat=%s, reduce=%s, reduce_concat=%s)\"", "%", "(", "genotype", "[", "'normal'", "]", ",", "genotype", "[", "'normal_concat'", "]", ",", "genotype", "[", "'reduce'", "]", ",", "genotype", "[", "'reduce_concat'", "]", ")", "\n", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype": [[89, 110], ["search_model_darts_nasnet.NASNetworkDARTS.genotype2cmd", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "search_model_darts_nasnet.NASNetworkDARTS.genotype._parse"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.genotype2cmd"], ["", "def", "genotype", "(", "self", ")", "->", "Dict", "[", "Text", ",", "List", "]", ":", "\n", "            ", "def", "_parse", "(", "weights", ")", ":", "\n", "                ", "gene", "=", "[", "]", "\n", "n", "=", "2", ";", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "                    ", "end", "=", "start", "+", "n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "selected_edges", "=", "[", "]", "\n", "_edge_indice", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "self", ".", "op_names", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "for", "_edge_index", "in", "_edge_indice", ":", "\n", "                        ", "_op_indice", "=", "list", "(", "range", "(", "W", ".", "shape", "[", "1", "]", ")", ")", "\n", "_op_indice", ".", "remove", "(", "self", ".", "op_names", ".", "index", "(", "'none'", ")", ")", "\n", "_op_index", "=", "sorted", "(", "_op_indice", ",", "key", "=", "lambda", "x", ":", "-", "W", "[", "_edge_index", "]", "[", "x", "]", ")", "[", "0", "]", "\n", "selected_edges", ".", "append", "(", "(", "self", ".", "op_names", "[", "_op_index", "]", ",", "_edge_index", ")", ")", "\n", "", "gene", ".", "append", "(", "selected_edges", ")", "\n", "start", "=", "end", ";", "n", "+=", "1", "\n", "", "return", "gene", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "gene_normal", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gene_reduce", "=", "_parse", "(", "torch", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "self", ".", "genotype2cmd", "(", "{", "'normal'", ":", "gene_normal", ",", "'normal_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", ",", "'reduce'", ":", "gene_reduce", ",", "'reduce_concat'", ":", "list", "(", "range", "(", "2", "+", "self", ".", "_steps", "-", "self", ".", "_multiplier", ",", "self", ".", "_steps", "+", "2", ")", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_model_darts_nasnet.NASNetworkDARTS.forward": [[111, 135], ["torch.functional.softmax().detach().clone", "torch.functional.softmax().detach().clone", "torch.functional.softmax().detach().clone", "torch.functional.softmax().detach().clone", "search_model_darts_nasnet.NASNetworkDARTS.arch_normal_parameters.detach().clone", "search_model_darts_nasnet.NASNetworkDARTS.arch_reduce_parameters.detach().clone", "enumerate", "search_model_darts_nasnet.NASNetworkDARTS.lastact", "search_model_darts_nasnet.NASNetworkDARTS.global_pooling", "out.view.view.view", "search_model_darts_nasnet.NASNetworkDARTS.classifier", "search_model_darts_nasnet.NASNetworkDARTS.stem", "out.view.view.size", "torch.functional.softmax().detach", "torch.functional.softmax().detach", "torch.functional.softmax().detach", "torch.functional.softmax().detach", "search_model_darts_nasnet.NASNetworkDARTS.arch_normal_parameters.detach", "search_model_darts_nasnet.NASNetworkDARTS.arch_reduce_parameters.detach", "cell.forward_darts", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "normal_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_normal_parameters", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "# normal_w = nn.functional.softmax(self.arch_normal_parameters, dim=1)", "\n", "reduce_w", "=", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "arch_reduce_parameters", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "# reduce_w = nn.functional.softmax(self.arch_reduce_parameters, dim=1)", "\n", "\n", "normal_a", "=", "self", ".", "arch_normal_parameters", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "reduce_a", "=", "self", ".", "arch_reduce_parameters", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "use_stem", ":", "\n", "            ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "s0", "=", "s1", "=", "inputs", "\n", "", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "if", "cell", ".", "reduction", ":", "ww", ",", "aa", "=", "reduce_w", ",", "reduce_a", "\n", "else", ":", "ww", ",", "aa", "=", "normal_w", ",", "normal_a", "\n", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_darts", "(", "s0", ",", "s1", ",", "ww", ",", "aa", ")", "\n", "", "out", "=", "self", ".", "lastact", "(", "s1", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NAS201SearchCell.__init__": [[14, 33], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "torch.ModuleList", "torch.ModuleList", "search_cells.NAS201SearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "max_nodes", ",", "op_names", ",", "affine", "=", "False", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "NAS201SearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "op_names", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "max_nodes", "=", "max_nodes", "\n", "self", ".", "in_dim", "=", "C_in", "\n", "self", ".", "out_dim", "=", "C_out", "\n", "for", "i", "in", "range", "(", "1", ",", "max_nodes", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "if", "j", "==", "0", ":", "\n", "                    ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "else", ":", "\n", "                    ", "xlists", "=", "[", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_out", ",", "1", ",", "affine", ",", "track_running_stats", ")", "for", "op_name", "in", "op_names", "]", "\n", "", "self", ".", "edges", "[", "node_str", "]", "=", "nn", ".", "ModuleList", "(", "xlists", ")", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NAS201SearchCell.extra_repr": [[34, 37], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "'info :: {max_nodes} nodes, inC={in_dim}, outC={out_dim}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NAS201SearchCell.forward": [[38, 48], ["range", "range", "nodes.append", "inter_nodes.append", "sum", "sum", "zip", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "weightss", ")", ":", "\n", "        ", "nodes", "=", "[", "inputs", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "max_nodes", ")", ":", "\n", "            ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "inter_nodes", ".", "append", "(", "sum", "(", "layer", "(", "nodes", "[", "j", "]", ")", "*", "w", "if", "w", ">", "0.01", "else", "0", "for", "layer", ",", "w", "in", "zip", "(", "self", ".", "edges", "[", "node_str", "]", ",", "weights", ")", ")", ")", "# for pruning purpose", "\n", "", "nodes", ".", "append", "(", "sum", "(", "inter_nodes", ")", ")", "\n", "", "return", "nodes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.MixedOp.__init__": [[52, 58], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "search_cells.MixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "space", ":", "\n", "            ", "op", "=", "OPS", "[", "primitive", "]", "(", "C", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.MixedOp.forward_darts": [[59, 61], ["sum", "zip", "op"], "methods", ["None"], ["", "", "def", "forward_darts", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "        ", "return", "sum", "(", "w", "*", "op", "(", "x", ")", "if", "w", ">", "0.01", "else", "0", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ")", "# for pruning purpose", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NASNetSearchCell.__init__": [[66, 87], ["torch.Module.__init__", "copy.deepcopy", "torch.ModuleList", "torch.ModuleList", "torch.ModuleDict", "torch.ModuleDict", "range", "sorted", "len", "range", "list", "search_cells.MixedOp", "search_cells.NASNetSearchCell.edges.keys", "enumerate"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "space", ",", "steps", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "NASNetSearchCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "op_names", "=", "deepcopy", "(", "space", ")", "\n", "if", "reduction_prev", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'skip_connect'", "]", "(", "C_prev_prev", ",", "C", ",", "2", ",", "affine", ",", "track_running_stats", ")", "\n", "else", ":", "self", ".", "preprocess0", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "preprocess1", "=", "OPS", "[", "'nor_conv_1x1'", "]", "(", "C_prev", ",", "C", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "_steps", "=", "steps", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "edges", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "2", "+", "i", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "# indicate the edge from node-(j) to node-(i+2)", "\n", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "op", "=", "MixedOp", "(", "space", ",", "C", ",", "stride", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "edges", "[", "node_str", "]", "=", "op", "\n", "", "", "self", ".", "edge_keys", "=", "sorted", "(", "list", "(", "self", ".", "edges", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "edge2index", "=", "{", "key", ":", "i", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "edge_keys", ")", "}", "\n", "self", ".", "num_edges", "=", "len", "(", "self", ".", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NASNetSearchCell.forward_darts": [[88, 108], ["search_cells.NASNetSearchCell.preprocess0", "search_cells.NASNetSearchCell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "states.append", "sum", "sum", "clist.append", "clist.append", "len", "op.forward_darts"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.search_cells.NASNetSearchCell.forward_darts"], ["", "def", "forward_darts", "(", "self", ",", "s0", ",", "s1", ",", "weightss", ",", "alphass", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "clist", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "                ", "node_str", "=", "'{:}<-{:}'", ".", "format", "(", "i", ",", "j", ")", "\n", "op", "=", "self", ".", "edges", "[", "node_str", "]", "\n", "weights", "=", "weightss", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "alphas", "=", "alphass", "[", "self", ".", "edge2index", "[", "node_str", "]", "]", "\n", "if", "sum", "(", "alphas", ")", "<=", "(", "-", "INF", ")", "*", "len", "(", "alphas", ")", ":", "\n", "# all ops on this edge are masked out", "\n", "                    ", "clist", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "clist", ".", "append", "(", "op", ".", "forward_darts", "(", "h", ",", "weights", ")", ")", "\n", "", "", "states", ".", "append", "(", "sum", "(", "clist", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.__init__": [[9, 34], ["torch.Module.__init__", "torch.Sequential", "torch.ModuleList", "enumerate", "len", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.Linear", "ValueError", "len", "torch.Conv2d", "torch.BatchNorm2d", "zip", "InferTinyCellNet.DynamicShapeTinyNet.cells.append", "torch.BatchNorm2d", "torch.ReLU", "len", "models.cell_operations.ResNetBasicblock", "models.cell_infers.cells.InferCell", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ":", "List", "[", "int", "]", ",", "genotype", ":", "Any", ",", "num_classes", ":", "int", ")", ":", "\n", "        ", "super", "(", "DynamicShapeTinyNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_channels", "=", "channels", "\n", "if", "len", "(", "channels", ")", "%", "3", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid number of layers : {:}'", ".", "format", "(", "len", "(", "channels", ")", ")", ")", "\n", "", "self", ".", "_num_stage", "=", "N", "=", "len", "(", "channels", ")", "//", "3", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channels", "[", "0", "]", ")", ")", "\n", "\n", "# layer_channels   = [C    ] * N + [C*2 ] + [C*2  ] * N + [C*4 ] + [C*4  ] * N", "\n", "layer_reductions", "=", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "+", "[", "True", "]", "+", "[", "False", "]", "*", "N", "\n", "\n", "c_prev", "=", "channels", "[", "0", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "index", ",", "(", "c_curr", ",", "reduction", ")", "in", "enumerate", "(", "zip", "(", "channels", ",", "layer_reductions", ")", ")", ":", "\n", "            ", "if", "reduction", ":", "cell", "=", "ResNetBasicblock", "(", "c_prev", ",", "c_curr", ",", "2", ",", "True", ")", "\n", "else", ":", "cell", "=", "InferCell", "(", "genotype", ",", "c_prev", ",", "c_curr", ",", "1", ")", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "c_prev", "=", "cell", ".", "out_dim", "\n", "", "self", ".", "_num_layer", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n", "self", ".", "lastact", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "c_prev", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "c_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.get_message": [[35, 40], ["InferTinyCellNet.DynamicShapeTinyNet.extra_repr", "enumerate", "len", "cell.extra_repr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr"], ["", "def", "get_message", "(", "self", ")", "->", "Text", ":", "\n", "        ", "string", "=", "self", ".", "extra_repr", "(", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "string", "+=", "'\\n {:02d}/{:02d} :: {:}'", ".", "format", "(", "i", ",", "len", "(", "self", ".", "cells", ")", ",", "cell", ".", "extra_repr", "(", ")", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.extra_repr": [[41, 43], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(C={_channels}, N={_num_stage}, L={_num_layer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.shape_infers.InferTinyCellNet.DynamicShapeTinyNet.forward": [[44, 55], ["InferTinyCellNet.DynamicShapeTinyNet.stem", "enumerate", "InferTinyCellNet.DynamicShapeTinyNet.lastact", "InferTinyCellNet.DynamicShapeTinyNet.global_pooling", "out.view.view.view", "InferTinyCellNet.DynamicShapeTinyNet.classifier", "cell", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feature", "=", "self", ".", "stem", "(", "inputs", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "feature", "=", "cell", "(", "feature", ")", "\n", "\n", "", "out", "=", "self", ".", "lastact", "(", "feature", ")", "\n", "out", "=", "self", ".", "global_pooling", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.shape_infers.shared_utils.parse_channel_info": [[1, 6], ["xstring.split", "x.split", "int"], "function", ["None"], ["def", "parse_channel_info", "(", "xstring", ")", ":", "\n", "  ", "blocks", "=", "xstring", ".", "split", "(", "' '", ")", "\n", "blocks", "=", "[", "x", ".", "split", "(", "'-'", ")", "for", "x", "in", "blocks", "]", "\n", "blocks", "=", "[", "[", "int", "(", "_", ")", "for", "_", "in", "x", "]", "for", "x", "in", "blocks", "]", "\n", "return", "blocks", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.__init__": [[49, 77], ["isinstance", "copy.deepcopy", "collections.OrderedDict", "collections.OrderedDict", "sorted", "sorted", "enumerate", "isinstance", "isinstance", "str", "os.path.isfile", "torch.load", "isinstance", "type", "list", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "list", "print", "pathlib.Path", "copy.deepcopy", "ValueError", "file_path_or_dict[].keys", "type"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict"], ["def", "__init__", "(", "self", ",", "file_path_or_dict", ":", "Union", "[", "Text", ",", "Dict", "]", ",", "verbose", ":", "bool", "=", "True", ")", ":", "\n", "    ", "self", ".", "filename", "=", "None", "\n", "if", "isinstance", "(", "file_path_or_dict", ",", "str", ")", "or", "isinstance", "(", "file_path_or_dict", ",", "Path", ")", ":", "\n", "      ", "file_path_or_dict", "=", "str", "(", "file_path_or_dict", ")", "\n", "if", "verbose", ":", "print", "(", "'try to create the NAS-Bench-201 api from {:}'", ".", "format", "(", "file_path_or_dict", ")", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "file_path_or_dict", ")", ",", "'invalid path : {:}'", ".", "format", "(", "file_path_or_dict", ")", "\n", "self", ".", "filename", "=", "Path", "(", "file_path_or_dict", ")", ".", "name", "\n", "file_path_or_dict", "=", "torch", ".", "load", "(", "file_path_or_dict", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ":", "\n", "      ", "file_path_or_dict", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", ")", "\n", "", "else", ":", "raise", "ValueError", "(", "'invalid type : {:} not in [str, dict]'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", ")", "\n", "assert", "isinstance", "(", "file_path_or_dict", ",", "dict", ")", ",", "'It should be a dict instead of {:}'", ".", "format", "(", "type", "(", "file_path_or_dict", ")", ")", "\n", "self", ".", "verbose", "=", "verbose", "# [TODO] a flag indicating whether to print more logs", "\n", "keys", "=", "(", "'meta_archs'", ",", "'arch2infos'", ",", "'evaluated_indexes'", ")", "\n", "for", "key", "in", "keys", ":", "assert", "key", "in", "file_path_or_dict", ",", "'Can not find key[{:}] in the dict'", ".", "format", "(", "key", ")", "\n", "self", ".", "meta_archs", "=", "copy", ".", "deepcopy", "(", "file_path_or_dict", "[", "'meta_archs'", "]", ")", "\n", "self", ".", "arch2infos_less", "=", "OrderedDict", "(", ")", "\n", "self", ".", "arch2infos_full", "=", "OrderedDict", "(", ")", "\n", "for", "xkey", "in", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'arch2infos'", "]", ".", "keys", "(", ")", ")", ")", ":", "\n", "      ", "all_info", "=", "file_path_or_dict", "[", "'arch2infos'", "]", "[", "xkey", "]", "\n", "self", ".", "arch2infos_less", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "xkey", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "all_info", "[", "'full'", "]", ")", "\n", "", "self", ".", "evaluated_indexes", "=", "sorted", "(", "list", "(", "file_path_or_dict", "[", "'evaluated_indexes'", "]", ")", ")", "\n", "self", ".", "archstr2index", "=", "{", "}", "\n", "for", "idx", ",", "arch", "in", "enumerate", "(", "self", ".", "meta_archs", ")", ":", "\n", "#assert arch.tostr() not in self.archstr2index, 'This [{:}]-th arch {:} already in the dict ({:}).'.format(idx, arch, self.archstr2index[arch.tostr()])", "\n", "      ", "assert", "arch", "not", "in", "self", ".", "archstr2index", ",", "'This [{:}]-th arch {:} already in the dict ({:}).'", ".", "format", "(", "idx", ",", "arch", ",", "self", ".", "archstr2index", "[", "arch", "]", ")", "\n", "self", ".", "archstr2index", "[", "arch", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.__getitem__": [[78, 80], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "meta_archs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.__repr__": [[84, 86], ["len", "len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}({num}/{total} architectures, file={filename})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "num", "=", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "total", "=", "len", "(", "self", ".", "meta_archs", ")", ",", "filename", "=", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.random": [[87, 90], ["random.randint", "len"], "methods", ["None"], ["", "def", "random", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return a random index of all architectures.\"\"\"", "\n", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "meta_archs", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_index_by_arch": [[97, 106], ["isinstance", "hasattr", "arch.tostr", "arch.tostr"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tostr", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.tostr"], ["", "def", "query_index_by_arch", "(", "self", ",", "arch", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "str", ")", ":", "\n", "      ", "if", "arch", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "elif", "hasattr", "(", "arch", ",", "'tostr'", ")", ":", "\n", "      ", "if", "arch", ".", "tostr", "(", ")", "in", "self", ".", "archstr2index", ":", "arch_index", "=", "self", ".", "archstr2index", "[", "arch", ".", "tostr", "(", ")", "]", "\n", "else", ":", "arch_index", "=", "-", "1", "\n", "", "else", ":", "arch_index", "=", "-", "1", "\n", "return", "arch_index", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.reload": [[107, 121], ["os.path.isdir", "os.path.join", "os.path.isfile", "torch.load", "api.ArchResults.create_from_state_dict", "api.ArchResults.create_from_state_dict", "len", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "reload", "(", "self", ",", "archive_root", ":", "Text", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Overwrite all information of the 'index'-th architecture in the search space.\n         It will load its data from 'archive_root'.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "archive_root", ")", ",", "'invalid directory : {:}'", ".", "format", "(", "archive_root", ")", "\n", "xfile_path", "=", "os", ".", "path", ".", "join", "(", "archive_root", ",", "'{:06d}-FULL.pth'", ".", "format", "(", "index", ")", ")", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index of {:}'", ".", "format", "(", "index", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "xfile_path", ")", ",", "'invalid data path : {:}'", ".", "format", "(", "xfile_path", ")", "\n", "xdata", "=", "torch", ".", "load", "(", "xfile_path", ",", "map_location", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "xdata", ",", "dict", ")", "and", "'full'", "in", "xdata", "and", "'less'", "in", "xdata", ",", "'invalid format of data in {:}'", ".", "format", "(", "xfile_path", ")", "\n", "if", "index", "in", "self", ".", "arch2infos_less", ":", "del", "self", ".", "arch2infos_less", "[", "index", "]", "\n", "if", "index", "in", "self", ".", "arch2infos_full", ":", "del", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "self", ".", "arch2infos_less", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'less'", "]", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", "=", "ArchResults", ".", "create_from_state_dict", "(", "xdata", "[", "'full'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.clear_params": [[122, 138], ["api.NASBench201API.arch2infos_less[].clear_params", "api.NASBench201API.arch2infos_full[].clear_params", "arch2infos[].clear_params"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.clear_params", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.clear_params"], ["", "def", "clear_params", "(", "self", ",", "index", ":", "int", ",", "use_12epochs_result", ":", "Union", "[", "bool", ",", "None", "]", ")", ":", "\n", "    ", "\"\"\"Remove the architecture's weights to save memory.\n    :arg\n      index: the index of the target architecture\n      use_12epochs_result: a flag to controll how to clear the parameters.\n        -- None: clear all the weights in both `less` and `full`, which indicates the training hyper-parameters.\n        -- True: clear all the weights in arch2infos_less, which by default is 12-epoch-training result.\n        -- False: clear all the weights in arch2infos_full, which by default is 200-epoch-training result.\n    \"\"\"", "\n", "if", "use_12epochs_result", "is", "None", ":", "\n", "      ", "self", ".", "arch2infos_less", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "self", ".", "arch2infos_full", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "", "else", ":", "\n", "      ", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch2infos", "[", "index", "]", ".", "clear_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_by_arch": [[144, 158], ["isinstance", "api.NASBench201API.query_index_by_arch", "api.print_information", "print"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_index_by_arch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information"], ["", "", "def", "query_by_arch", "(", "self", ",", "arch", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "arch", ",", "int", ")", ":", "\n", "      ", "arch_index", "=", "arch", "\n", "", "else", ":", "\n", "      ", "arch_index", "=", "self", ".", "query_index_by_arch", "(", "arch", ")", "\n", "", "if", "arch_index", "==", "-", "1", ":", "return", "None", "# the following two lines are used to support few training epochs", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "if", "arch_index", "in", "arch2infos", ":", "\n", "      ", "strings", "=", "print_information", "(", "arch2infos", "[", "arch_index", "]", ",", "'arch-index={:}'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "'\\n'", ".", "join", "(", "strings", ")", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Find this arch-index : {:}, but this arch is not evaluated.'", ".", "format", "(", "arch_index", ")", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_by_index": [[171, 182], ["copy.deepcopy", "copy.deepcopy.query", "copy.deepcopy.get_dataset_names"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_dataset_names"], ["", "", "def", "query_by_index", "(", "self", ",", "arch_index", ":", "int", ",", "dataname", ":", "Union", "[", "None", ",", "Text", "]", "=", "None", ",", "\n", "use_12epochs_result", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "if", "dataname", "is", "None", ":", "return", "archInfo", "\n", "else", ":", "\n", "      ", "assert", "dataname", "in", "archInfo", ".", "get_dataset_names", "(", ")", ",", "'invalid dataset-name : {:}'", ".", "format", "(", "dataname", ")", "\n", "info", "=", "archInfo", ".", "query", "(", "dataname", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.query_meta_info_by_index": [[183, 189], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "query_meta_info_by_index", "(", "self", ",", "arch_index", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "assert", "arch_index", "in", "arch2infos", ",", "'arch_index [{:}] does not in arch2info with {:}'", ".", "format", "(", "arch_index", ",", "basestr", ")", "\n", "archInfo", "=", "copy", ".", "deepcopy", "(", "arch2infos", "[", "arch_index", "]", ")", "\n", "return", "archInfo", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.find_best": [[190, 207], ["enumerate", "arch2infos[].get_compute_costs", "arch2infos[].get_metrics"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics"], ["", "def", "find_best", "(", "self", ",", "dataset", ",", "metric_on_set", ",", "FLOP_max", "=", "None", ",", "Param_max", "=", "None", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"Find the architecture with the highest accuracy based on some constraints.\"\"\"", "\n", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "best_index", ",", "highest_accuracy", "=", "-", "1", ",", "None", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "      ", "info", "=", "arch2infos", "[", "idx", "]", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "info", "[", "'flops'", "]", ",", "info", "[", "'params'", "]", ",", "info", "[", "'latency'", "]", "\n", "if", "FLOP_max", "is", "not", "None", "and", "flop", ">", "FLOP_max", ":", "continue", "\n", "if", "Param_max", "is", "not", "None", "and", "param", ">", "Param_max", ":", "continue", "\n", "xinfo", "=", "arch2infos", "[", "idx", "]", ".", "get_metrics", "(", "dataset", ",", "metric_on_set", ")", "\n", "loss", ",", "accuracy", "=", "xinfo", "[", "'loss'", "]", ",", "xinfo", "[", "'accuracy'", "]", "\n", "if", "best_index", "==", "-", "1", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "elif", "highest_accuracy", "<", "accuracy", ":", "\n", "        ", "best_index", ",", "highest_accuracy", "=", "idx", ",", "accuracy", "\n", "", "", "return", "best_index", ",", "highest_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.arch": [[208, 212], ["copy.deepcopy", "len", "len"], "methods", ["None"], ["", "def", "arch", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "    ", "\"\"\"Return the topology structure of the `index`-th architecture.\"\"\"", "\n", "assert", "0", "<=", "index", "<", "len", "(", "self", ".", "meta_archs", ")", ",", "'invalid index : {:} vs. {:}.'", ".", "format", "(", "index", ",", "len", "(", "self", ".", "meta_archs", ")", ")", "\n", "return", "copy", ".", "deepcopy", "(", "self", ".", "meta_archs", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_net_param": [[213, 227], ["arch_result.get_net_param"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "index", ",", "dataset", ",", "seed", ",", "use_12epochs_result", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the trained weights of the `index`-th architecture on `dataset` with the seed of `seed`\n      Args [seed]:\n        -- None : return a dict containing the trained weights of all trials, where each key is a seed and its corresponding value is the weights.\n        -- a interger : return the weights of a specific trial, whose seed is this interger.\n      Args [use_12epochs_result]:\n        -- True : train the model by 12 epochs\n        -- False : train the model by 200 epochs\n    \"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_net_param", "(", "dataset", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_net_config": [[228, 247], ["archresult.query", "archresult.query.items", "ValueError", "len", "ValueError", "result.get_config"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.query", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_config"], ["", "def", "get_net_config", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ")", ":", "\n", "    ", "\"\"\"\n      This function is used to obtain the configuration for the `index`-th architecture on `dataset`.\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      This function will return a dict.\n      ========= Some examlpes for using this function:\n      config = api.get_net_config(128, 'cifar10')\n    \"\"\"", "\n", "archresult", "=", "self", ".", "arch2infos_full", "[", "index", "]", "\n", "all_results", "=", "archresult", ".", "query", "(", "dataset", ",", "None", ")", "\n", "if", "len", "(", "all_results", ")", "==", "0", ":", "raise", "ValueError", "(", "'can not find one valid trial for the {:}-th architecture on {:}'", ".", "format", "(", "index", ",", "dataset", ")", ")", "\n", "for", "seed", ",", "result", "in", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "return", "result", ".", "get_config", "(", "None", ")", "\n", "#print ('SEED [{:}] : {:}'.format(seed, result))", "\n", "", "raise", "ValueError", "(", "'Impossible to reach here!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_cost_info": [[248, 254], ["arch_result.get_compute_costs"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_compute_costs"], ["", "def", "get_cost_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "Dict", "[", "Text", ",", "float", "]", ":", "\n", "    ", "\"\"\"To obtain the cost metric for the `index`-th architecture on a dataset.\"\"\"", "\n", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "arch_result", "=", "arch2infos", "[", "index", "]", "\n", "return", "arch_result", ".", "get_compute_costs", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_latency": [[255, 264], ["api.NASBench201API.get_cost_info"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_cost_info"], ["", "def", "get_latency", "(", "self", ",", "index", ":", "int", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", "=", "False", ")", "->", "float", ":", "\n", "    ", "\"\"\"\n    To obtain the latency of the network (by default it will return the latency with the batch size of 256).\n    :param index: the index of the target architecture\n    :param dataset: the dataset name (cifar10-valid, cifar10, cifar100, ImageNet16-120)\n    :return: return a float value in seconds\n    \"\"\"", "\n", "cost_dict", "=", "self", ".", "get_cost_info", "(", "index", ",", "dataset", ",", "use_12epochs_result", ")", "\n", "return", "cost_dict", "[", "'latency'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.get_more_info": [[280, 338], ["archresult.get_metrics", "isinstance", "archresult.get_dataset_seeds", "random.choice", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics", "archresult.get_metrics"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_dataset_seeds", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics"], ["", "def", "get_more_info", "(", "self", ",", "index", ":", "int", ",", "dataset", ",", "iepoch", "=", "None", ",", "use_12epochs_result", "=", "False", ",", "is_random", "=", "True", ")", ":", "\n", "    ", "if", "use_12epochs_result", ":", "basestr", ",", "arch2infos", "=", "'12epochs'", ",", "self", ".", "arch2infos_less", "\n", "else", ":", "basestr", ",", "arch2infos", "=", "'200epochs'", ",", "self", ".", "arch2infos_full", "\n", "archresult", "=", "arch2infos", "[", "index", "]", "\n", "# if randomly select one trial, select the seed at first", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "\n", "      ", "seeds", "=", "archresult", ".", "get_dataset_seeds", "(", "dataset", ")", "\n", "is_random", "=", "random", ".", "choice", "(", "seeds", ")", "\n", "# collect the training information", "\n", "", "train_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'train'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "total", "=", "train_info", "[", "'iepoch'", "]", "+", "1", "\n", "xinfo", "=", "{", "'train-loss'", ":", "train_info", "[", "'loss'", "]", ",", "\n", "'train-accuracy'", ":", "train_info", "[", "'accuracy'", "]", ",", "\n", "'train-per-time'", ":", "train_info", "[", "'all_time'", "]", "/", "total", ",", "\n", "'train-all-time'", ":", "train_info", "[", "'all_time'", "]", "}", "\n", "# collect the evaluation information", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "try", ":", "\n", "        ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "valtest_info", "=", "None", "\n", "", "else", ":", "\n", "      ", "try", ":", "# collect results on the proposed test set", "\n", "        ", "if", "dataset", "==", "'cifar10'", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "test_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "test_info", "=", "None", "\n", "", "try", ":", "# collect results on the proposed validation set", "\n", "        ", "valid_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "valid_info", "=", "None", "\n", "", "try", ":", "\n", "        ", "if", "dataset", "!=", "'cifar10'", ":", "\n", "          ", "valtest_info", "=", "archresult", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ",", "iepoch", "=", "iepoch", ",", "is_random", "=", "is_random", ")", "\n", "", "else", ":", "\n", "          ", "valtest_info", "=", "None", "\n", "", "", "except", "Exception", ":", "\n", "        ", "valtest_info", "=", "None", "\n", "", "", "if", "valid_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valid-loss'", "]", "=", "valid_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valid-accuracy'", "]", "=", "valid_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valid-per-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valid-all-time'", "]", "=", "valid_info", "[", "'all_time'", "]", "\n", "", "if", "test_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'test-loss'", "]", "=", "test_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'test-accuracy'", "]", "=", "test_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'test-per-time'", "]", "=", "test_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'test-all-time'", "]", "=", "test_info", "[", "'all_time'", "]", "\n", "", "if", "valtest_info", "is", "not", "None", ":", "\n", "      ", "xinfo", "[", "'valtest-loss'", "]", "=", "valtest_info", "[", "'loss'", "]", "\n", "xinfo", "[", "'valtest-accuracy'", "]", "=", "valtest_info", "[", "'accuracy'", "]", "\n", "xinfo", "[", "'valtest-per-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "/", "total", "\n", "xinfo", "[", "'valtest-all-time'", "]", "=", "valtest_info", "[", "'all_time'", "]", "\n", "", "return", "xinfo", "\n", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.show": [[398, 429], ["print", "enumerate", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "print", "api.print_information", "print", "print", "api.print_information", "print", "print", "print", "len", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch", "api.NASBench201API.arch2infos_full[].get_total_epoch", "api.NASBench201API.arch2infos_less[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch"], ["def", "show", "(", "self", ",", "index", ":", "int", "=", "-", "1", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    This function will print the information of a specific (or all) architecture(s).\n\n    :param index: If the index < 0: it will loop for all architectures and print their information one by one.\n                  else: it will print the information of the 'index'-th archiitecture.\n    :return: nothing\n    \"\"\"", "\n", "if", "index", "<", "0", ":", "# show all architectures", "\n", "      ", "print", "(", "self", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "self", ".", "evaluated_indexes", ")", ":", "\n", "        ", "print", "(", "'\\n'", "+", "'-'", "*", "10", "+", "' The ({:5d}/{:5d}) {:06d}-th architecture! '", ".", "format", "(", "i", ",", "len", "(", "self", ".", "evaluated_indexes", ")", ",", "idx", ")", "+", "'-'", "*", "10", ")", "\n", "print", "(", "'arch : {:}'", ".", "format", "(", "self", ".", "meta_archs", "[", "idx", "]", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "idx", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "", "", "else", ":", "\n", "# if 0 <= index < len(self.meta_archs):", "\n", "      ", "if", "index", "not", "in", "self", ".", "evaluated_indexes", ":", "print", "(", "'The {:}-th architecture has not been evaluated or not saved.'", ".", "format", "(", "index", ")", ")", "\n", "else", ":", "\n", "        ", "strings", "=", "print_information", "(", "self", ".", "arch2infos_full", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_full", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "strings", "=", "print_information", "(", "self", ".", "arch2infos_less", "[", "index", "]", ")", "\n", "print", "(", "'>'", "*", "40", "+", "' {:03d} epochs '", ".", "format", "(", "self", ".", "arch2infos_less", "[", "index", "]", ".", "get_total_epoch", "(", ")", ")", "+", "'>'", "*", "40", ")", "\n", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "print", "(", "'<'", "*", "40", "+", "'------------'", "+", "'<'", "*", "40", ")", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.statistics": [[432, 450], ["collections.defaultdict", "range", "dict", "ValueError", "len", "len"], "methods", ["None"], ["", "", "", "def", "statistics", "(", "self", ",", "dataset", ":", "Text", ",", "use_12epochs_result", ":", "bool", ")", "->", "Dict", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    This function will count the number of total trials.\n    \"\"\"", "\n", "valid_datasets", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "if", "dataset", "not", "in", "valid_datasets", ":", "\n", "      ", "raise", "ValueError", "(", "'{:} not in {:}'", ".", "format", "(", "dataset", ",", "valid_datasets", ")", ")", "\n", "", "if", "use_12epochs_result", ":", "arch2infos", "=", "self", ".", "arch2infos_less", "\n", "else", ":", "arch2infos", "=", "self", ".", "arch2infos_full", "\n", "nums", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "      ", "archInfo", "=", "arch2infos", "[", "index", "]", "\n", "dataset_seed", "=", "archInfo", ".", "dataset_seed", "\n", "if", "dataset", "not", "in", "dataset_seed", ":", "\n", "        ", "nums", "[", "0", "]", "+=", "1", "\n", "", "else", ":", "\n", "        ", "nums", "[", "len", "(", "dataset_seed", "[", "dataset", "]", ")", "]", "+=", "1", "\n", "", "", "return", "dict", "(", "nums", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.str2lists": [[451, 477], ["arch_str.split", "enumerate", "list", "tuple", "genotypes.append", "filter", "xi.split", "node_str.split", "len", "xinput.split", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2lists", "(", "arch_str", ":", "Text", ")", "->", "List", "[", "tuple", "]", ":", "\n", "    ", "\"\"\"\n    This function shows how to read the string-based architecture encoding.\n      It is the same as the `str2structure` func in `AutoDL-Projects/lib/models/cell_searchs/genotypes.py`\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n    :return: a list of tuple, contains multiple (op, input_node_index) pairs.\n\n    :usage\n      arch = api.str2lists( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      print ('there are {:} nodes in this arch'.format(len(arch)+1)) # arch is a list\n      for i, node in enumerate(arch):\n        print('the {:}-th node is the sum of these {:} nodes with op: {:}'.format(i+1, len(node), node))\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "genotypes", "=", "[", "]", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "inputs", "=", "(", "xi", ".", "split", "(", "'~'", ")", "for", "xi", "in", "inputs", ")", "\n", "input_infos", "=", "tuple", "(", "(", "op", ",", "int", "(", "IDX", ")", ")", "for", "(", "op", ",", "IDX", ")", "in", "inputs", ")", "\n", "genotypes", ".", "append", "(", "input_infos", ")", "\n", "", "return", "genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.NASBench201API.str2matrix": [[478, 515], ["arch_str.split", "numpy.zeros", "enumerate", "len", "list", "filter", "xi.split", "node_str.split", "len", "ValueError", "search_space.index", "int", "xinput.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "str2matrix", "(", "arch_str", ":", "Text", ",", "\n", "search_space", ":", "List", "[", "Text", "]", "=", "[", "'none'", ",", "'skip_connect'", ",", "'nor_conv_1x1'", ",", "'nor_conv_3x3'", ",", "'avg_pool_3x3'", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"\n    This func shows how to convert the string-based architecture encoding to the encoding strategy in NAS-Bench-101.\n\n    :param\n      arch_str: the input is a string indicates the architecture topology, such as\n                    |nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|\n      search_space: a list of operation string, the default list is the search space for NAS-Bench-201\n        the default value should be be consistent with this line https://github.com/D-X-Y/AutoDL-Projects/blob/master/lib/models/cell_operations.py#L24\n    :return\n      the numpy matrix (2-D np.ndarray) representing the DAG of this architecture topology\n    :usage\n      matrix = api.str2matrix( '|nor_conv_1x1~0|+|none~0|none~1|+|none~0|none~1|skip_connect~2|' )\n      This matrix is 4-by-4 matrix representing a cell with 4 nodes (only the lower left triangle is useful).\n         [ [0, 0, 0, 0],  # the first line represents the input (0-th) node\n           [2, 0, 0, 0],  # the second line represents the 1-st node, is calculated by 2-th-op( 0-th-node )\n           [0, 0, 0, 0],  # the third line represents the 2-nd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node )\n           [0, 0, 1, 0] ] # the fourth line represents the 3-rd node, is calculated by 0-th-op( 0-th-node ) + 0-th-op( 1-th-node ) + 1-th-op( 2-th-node )\n      In NAS-Bench-201 search space, 0-th-op is 'none', 1-th-op is 'skip_connect',\n         2-th-op is 'nor_conv_1x1', 3-th-op is 'nor_conv_3x3', 4-th-op is 'avg_pool_3x3'.\n    :(NOTE)\n      If a node has two input-edges from the same node, this function does not work. One edge will be overlapped.\n    \"\"\"", "\n", "node_strs", "=", "arch_str", ".", "split", "(", "'+'", ")", "\n", "num_nodes", "=", "len", "(", "node_strs", ")", "+", "1", "\n", "matrix", "=", "np", ".", "zeros", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "for", "i", ",", "node_str", "in", "enumerate", "(", "node_strs", ")", ":", "\n", "      ", "inputs", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "node_str", ".", "split", "(", "'|'", ")", ")", ")", "\n", "for", "xinput", "in", "inputs", ":", "assert", "len", "(", "xinput", ".", "split", "(", "'~'", ")", ")", "==", "2", ",", "'invalid input length : {:}'", ".", "format", "(", "xinput", ")", "\n", "for", "xi", "in", "inputs", ":", "\n", "        ", "op", ",", "idx", "=", "xi", ".", "split", "(", "'~'", ")", "\n", "if", "op", "not", "in", "search_space", ":", "raise", "ValueError", "(", "'this op ({:}) is not in {:}'", ".", "format", "(", "op", ",", "search_space", ")", ")", "\n", "op_idx", ",", "node_idx", "=", "search_space", ".", "index", "(", "op", ")", ",", "int", "(", "idx", ")", "\n", "matrix", "[", "i", "+", "1", ",", "node_idx", "]", "=", "op_idx", "\n", "", "", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.__init__": [[519, 525], ["int", "copy.deepcopy", "dict", "dict"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "arch_index", ",", "arch_str", ")", ":", "\n", "    ", "self", ".", "arch_index", "=", "int", "(", "arch_index", ")", "\n", "self", ".", "arch_str", "=", "copy", ".", "deepcopy", "(", "arch_str", ")", "\n", "self", ".", "all_results", "=", "dict", "(", ")", "\n", "self", ".", "dataset_seed", "=", "dict", "(", ")", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_compute_costs": [[526, 548], ["collections.defaultdict", "collections.defaultdict.items", "result.get_latency", "numpy.mean", "result.get_times", "result.get_times.items", "numpy.mean", "numpy.mean", "len", "time_infos[].append", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_times"], ["", "def", "get_compute_costs", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "\n", "flops", "=", "[", "result", ".", "flop", "for", "result", "in", "results", "]", "\n", "params", "=", "[", "result", ".", "params", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "result", ".", "get_latency", "(", ")", "for", "result", "in", "results", "]", "\n", "latencies", "=", "[", "x", "for", "x", "in", "latencies", "if", "x", ">", "0", "]", "\n", "mean_latency", "=", "np", ".", "mean", "(", "latencies", ")", "if", "len", "(", "latencies", ")", ">", "0", "else", "None", "\n", "time_infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "time_info", "=", "result", ".", "get_times", "(", ")", "\n", "for", "key", ",", "value", "in", "time_info", ".", "items", "(", ")", ":", "time_infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "", "info", "=", "{", "'flops'", ":", "np", ".", "mean", "(", "flops", ")", ",", "\n", "'params'", ":", "np", ".", "mean", "(", "params", ")", ",", "\n", "'latency'", ":", "mean_latency", "}", "\n", "for", "key", ",", "value", "in", "time_infos", ".", "items", "(", ")", ":", "\n", "      ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "        ", "info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "info", "[", "key", "]", "=", "None", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics": [[549, 606], ["collections.defaultdict", "dict", "result.get_eval.items", "isinstance", "random.randint", "collections.defaultdict.items", "result.get_train", "result.get_eval", "infos[].append", "isinstance", "collections.defaultdict.items", "isinstance", "len", "x_seeds.index", "collections.defaultdict.items", "ValueError", "numpy.mean", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_train", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_eval"], ["", "def", "get_metrics", "(", "self", ",", "dataset", ",", "setname", ",", "iepoch", "=", "None", ",", "is_random", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n      This `get_metrics` function is used to obtain obtain the loss, accuracy, etc information on a specific dataset.\n      If not specify, each set refer to the proposed split in NAS-Bench-201 paper.\n      If some args return None or raise error, then it is not avaliable.\n      ========================================\n      Args [dataset] (4 possible options):\n        -- cifar10-valid : training the model on the CIFAR-10 training set.\n        -- cifar10 : training the model on the CIFAR-10 training + validation set.\n        -- cifar100 : training the model on the CIFAR-100 training set.\n        -- ImageNet16-120 : training the model on the ImageNet16-120 training set.\n      Args [setname] (each dataset has different setnames):\n        -- When dataset = cifar10-valid, you can use 'train', 'x-valid', 'ori-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar10, you can use 'train', 'ori-test'.\n        ------ 'train' : the metric on the training + validation set.\n        ------ 'ori-test' : the metric on the test set.\n        -- When dataset = cifar100 or ImageNet16-120, you can use 'train', 'ori-test', 'x-valid', 'x-test'\n        ------ 'train' : the metric on the training set.\n        ------ 'x-valid' : the metric on the validation set.\n        ------ 'x-test' : the metric on the test set.\n        ------ 'ori-test' : the metric on the validation + test set.\n      Args [iepoch] (None or an integer in [0, the-number-of-total-training-epochs)\n        ------ None : return the metric after the last training epoch.\n        ------ an integer i : return the metric after the i-th training epoch.\n      Args [is_random]:\n        ------ True : return the metric of a randomly selected trial.\n        ------ False : return the averaged metric of all avaliable trials.\n        ------ an integer indicating the 'seed' value : return the metric of a specific trial (whose random seed is 'is_random').\n    \"\"\"", "\n", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "results", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "]", "\n", "infos", "=", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "results", ":", "\n", "      ", "if", "setname", "==", "'train'", ":", "\n", "        ", "info", "=", "result", ".", "get_train", "(", "iepoch", ")", "\n", "", "else", ":", "\n", "        ", "info", "=", "result", ".", "get_eval", "(", "setname", ",", "iepoch", ")", "\n", "", "for", "key", ",", "value", "in", "info", ".", "items", "(", ")", ":", "infos", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "", "return_info", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "is_random", ",", "bool", ")", "and", "is_random", ":", "# randomly select one", "\n", "      ", "index", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "results", ")", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "elif", "isinstance", "(", "is_random", ",", "bool", ")", "and", "not", "is_random", ":", "# average", "\n", "      ", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "value", ")", ">", "0", "and", "value", "[", "0", "]", "is", "not", "None", ":", "\n", "          ", "return_info", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "", "else", ":", "return_info", "[", "key", "]", "=", "None", "\n", "", "", "elif", "isinstance", "(", "is_random", ",", "int", ")", ":", "# specify the seed", "\n", "      ", "if", "is_random", "not", "in", "x_seeds", ":", "raise", "ValueError", "(", "'can not find random seed ({:}) from {:}'", ".", "format", "(", "is_random", ",", "x_seeds", ")", ")", "\n", "index", "=", "x_seeds", ".", "index", "(", "is_random", ")", "\n", "for", "key", ",", "value", "in", "infos", ".", "items", "(", ")", ":", "return_info", "[", "key", "]", "=", "value", "[", "index", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid value for is_random: {:}'", ".", "format", "(", "is_random", ")", ")", "\n", "", "return", "return_info", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.show": [[607, 609], ["api.print_information"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information"], ["", "def", "show", "(", "self", ",", "is_print", "=", "False", ")", ":", "\n", "    ", "return", "print_information", "(", "self", ",", "None", ",", "is_print", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_dataset_names": [[610, 612], ["list", "api.ArchResults.dataset_seed.keys"], "methods", ["None"], ["", "def", "get_dataset_names", "(", "self", ")", ":", "\n", "    ", "return", "list", "(", "self", ".", "dataset_seed", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_dataset_seeds": [[613, 615], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_dataset_seeds", "(", "self", ",", "dataset", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "dataset_seed", "[", "dataset", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_net_param": [[616, 628], ["api.ArchResults.all_results[].get_net_param", "api.ArchResults.all_results[].get_net_param"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_net_param", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_net_param"], ["", "def", "get_net_param", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "int", "]", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    This function will return the trained network's weights on the 'dataset'.\n    :arg\n      dataset: one of 'cifar10-valid', 'cifar10', 'cifar100', and 'ImageNet16-120'.\n      seed: an integer indicates the seed value or None that indicates returing all trials.\n    \"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_net_param", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.reset_latency": [[629, 636], ["api.ArchResults.all_results[].update_latency", "api.ArchResults.all_results[].update_latency"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_latency", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_latency"], ["", "", "def", "reset_latency", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "latency", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the latency in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "update_latency", "(", "[", "latency", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.reset_pseudo_train_times": [[637, 644], ["api.ArchResults.all_results[].reset_pseudo_train_times", "api.ArchResults.all_results[].reset_pseudo_train_times"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_train_times", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_train_times"], ["", "", "def", "reset_pseudo_train_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the train-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_train_times", "(", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.reset_pseudo_eval_times": [[645, 652], ["api.ArchResults.all_results[].reset_pseudo_eval_times", "api.ArchResults.all_results[].reset_pseudo_eval_times"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_eval_times", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_eval_times"], ["", "", "def", "reset_pseudo_eval_times", "(", "self", ",", "dataset", ":", "Text", ",", "seed", ":", "Union", "[", "None", ",", "Text", "]", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"This function is used to reset the eval-times in all corresponding ResultsCount(s).\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "reset_pseudo_eval_times", "(", "eval_name", ",", "estimated_per_epoch_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_latency": [[653, 662], ["api.ArchResults.all_results[].get_latency", "latencies.append", "sum", "len", "ValueError", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_latency"], ["", "", "def", "get_latency", "(", "self", ",", "dataset", ":", "Text", ")", "->", "float", ":", "\n", "    ", "\"\"\"Get the latency of a model on the target dataset. [Timestamp: 2020.03.09]\"\"\"", "\n", "latencies", "=", "[", "]", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "      ", "latency", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_latency", "(", ")", "\n", "if", "not", "isinstance", "(", "latency", ",", "float", ")", "or", "latency", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid latency of {:} for {:} with {:}'", ".", "format", "(", "dataset", ",", "latency", ",", "type", "(", "latency", ")", ")", ")", "\n", "", "latencies", ".", "append", "(", "latency", ")", "\n", "", "return", "sum", "(", "latencies", ")", "/", "len", "(", "latencies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_total_epoch": [[663, 676], ["api.ArchResults.dataset_seed.items", "isinstance", "len", "ValueError", "ValueError", "set", "api.ArchResults.all_results[].get_total_epoch", "api.ArchResults.all_results[].get_total_epoch"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch"], ["", "def", "get_total_epoch", "(", "self", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the total number of training epochs.\"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "      ", "epochss", "=", "[", "]", "\n", "for", "xdata", ",", "x_seeds", "in", "self", ".", "dataset_seed", ".", "items", "(", ")", ":", "\n", "        ", "epochss", "+=", "[", "self", ".", "all_results", "[", "(", "xdata", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "", "elif", "isinstance", "(", "dataset", ",", "str", ")", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "epochss", "=", "[", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", ".", "get_total_epoch", "(", ")", "for", "seed", "in", "x_seeds", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid dataset={:}'", ".", "format", "(", "dataset", ")", ")", "\n", "", "if", "len", "(", "set", "(", "epochss", ")", ")", ">", "1", ":", "raise", "ValueError", "(", "'Each trial mush have the same number of training epochs : {:}'", ".", "format", "(", "epochss", ")", ")", "\n", "return", "epochss", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.query": [[677, 684], ["None"], "methods", ["None"], ["", "def", "query", "(", "self", ",", "dataset", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the ResultsCount object (containing all information of a single trial) for 'dataset' and 'seed'\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "      ", "x_seeds", "=", "self", ".", "dataset_seed", "[", "dataset", "]", "\n", "return", "{", "seed", ":", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "for", "seed", "in", "x_seeds", "}", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.arch_idx_str": [[685, 687], ["None"], "methods", ["None"], ["", "", "def", "arch_idx_str", "(", "self", ")", ":", "\n", "    ", "return", "'{:06d}'", ".", "format", "(", "self", ".", "arch_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.update": [[688, 697], ["api.ArchResults.dataset_seed[].append", "sorted"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dataset_name", ",", "seed", ",", "result", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "self", ".", "dataset_seed", ":", "\n", "      ", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "[", "]", "\n", "", "assert", "seed", "not", "in", "self", ".", "dataset_seed", "[", "dataset_name", "]", ",", "'{:}-th arch alreadly has this seed ({:}) on {:}'", ".", "format", "(", "self", ".", "arch_index", ",", "seed", ",", "dataset_name", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", ".", "append", "(", "seed", ")", "\n", "self", ".", "dataset_seed", "[", "dataset_name", "]", "=", "sorted", "(", "self", ".", "dataset_seed", "[", "dataset_name", "]", ")", "\n", "assert", "(", "dataset_name", ",", "seed", ")", "not", "in", "self", ".", "all_results", "\n", "self", ".", "all_results", "[", "(", "dataset_name", ",", "seed", ")", "]", "=", "result", "\n", "self", ".", "clear_net_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.state_dict": [[698, 711], ["dict", "api.ArchResults.__dict__.items", "dict", "isinstance", "value.items", "type", "isinstance", "_v.state_dict", "type"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# contain the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "assert", "isinstance", "(", "_v", ",", "ResultsCount", ")", ",", "'invalid type of value for {:}/{:} : {:}'", ".", "format", "(", "key", ",", "_k", ",", "type", "(", "_v", ")", ")", "\n", "xvalue", "[", "_k", "]", "=", "_v", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "xvalue", "=", "value", "\n", "", "state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.load_state_dict": [[712, 723], ["dict", "state_dict.items", "api.ArchResults.__dict__.update", "dict", "isinstance", "value.items", "type", "api.ResultsCount.create_from_state_dict"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "new_state_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'all_results'", ":", "# to convert to the class of ResultsCount", "\n", "        ", "xvalue", "=", "dict", "(", ")", "\n", "assert", "isinstance", "(", "value", ",", "dict", ")", ",", "'invalid type of value for {:} : {:}'", ".", "format", "(", "key", ",", "type", "(", "value", ")", ")", "\n", "for", "_k", ",", "_v", "in", "value", ".", "items", "(", ")", ":", "\n", "          ", "xvalue", "[", "_k", "]", "=", "ResultsCount", ".", "create_from_state_dict", "(", "_v", ")", "\n", "", "", "else", ":", "xvalue", "=", "value", "\n", "new_state_dict", "[", "key", "]", "=", "xvalue", "\n", "", "self", ".", "__dict__", ".", "update", "(", "new_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.create_from_state_dict": [[724, 735], ["api.ArchResults", "isinstance", "api.ArchResults.load_state_dict", "torch.load", "isinstance", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict_or_file", ")", ":", "\n", "    ", "x", "=", "ArchResults", "(", "-", "1", ",", "-", "1", ")", "\n", "if", "isinstance", "(", "state_dict_or_file", ",", "str", ")", ":", "# a file path", "\n", "      ", "state_dict", "=", "torch", ".", "load", "(", "state_dict_or_file", ",", "map_location", "=", "'cpu'", ")", "\n", "", "elif", "isinstance", "(", "state_dict_or_file", ",", "dict", ")", ":", "\n", "      ", "state_dict", "=", "state_dict_or_file", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'invalid type of state_dict_or_file : {:}'", ".", "format", "(", "type", "(", "state_dict_or_file", ")", ")", ")", "\n", "", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.clear_params": [[738, 743], ["api.ArchResults.all_results.items"], "methods", ["None"], ["", "def", "clear_params", "(", "self", ")", ":", "\n", "    ", "for", "key", ",", "result", "in", "self", ".", "all_results", ".", "items", "(", ")", ":", "\n", "      ", "del", "result", ".", "net_state_dict", "\n", "result", ".", "net_state_dict", "=", "None", "\n", "", "self", ".", "clear_net_done", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.debug_test": [[744, 754], ["print", "print", "print", "print", "api.ArchResults.get_latency", "result.get_times"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_latency", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_times"], ["", "def", "debug_test", "(", "self", ")", ":", "\n", "    ", "\"\"\"This function is used for me to debug and test, which will call most methods.\"\"\"", "\n", "all_dataset", "=", "[", "'cifar10-valid'", ",", "'cifar10'", ",", "'cifar100'", ",", "'ImageNet16-120'", "]", "\n", "for", "dataset", "in", "all_dataset", ":", "\n", "      ", "print", "(", "'---->>>> {:}'", ".", "format", "(", "dataset", ")", ")", "\n", "print", "(", "'The latency on {:} is {:} s'", ".", "format", "(", "dataset", ",", "self", ".", "get_latency", "(", "dataset", ")", ")", ")", "\n", "for", "seed", "in", "self", ".", "dataset_seed", "[", "dataset", "]", ":", "\n", "        ", "result", "=", "self", ".", "all_results", "[", "(", "dataset", ",", "seed", ")", "]", "\n", "print", "(", "'  ==>> result = {:}'", ".", "format", "(", "result", ")", ")", "\n", "print", "(", "'  ==>> cost = {:}'", ".", "format", "(", "result", ".", "get_times", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.__repr__": [[755, 757], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "return", "(", "'{name}(arch-index={index}, arch={arch}, {num} runs, clear={clear})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "index", "=", "self", ".", "arch_index", ",", "arch", "=", "self", ".", "arch_str", ",", "num", "=", "len", "(", "self", ".", "all_results", ")", ",", "clear", "=", "self", ".", "clear_net_done", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.__init__": [[766, 781], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "api.ResultsCount.reset_eval"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_eval"], ["  ", "def", "__init__", "(", "self", ",", "name", ",", "state_dict", ",", "train_accs", ",", "train_losses", ",", "params", ",", "flop", ",", "arch_config", ",", "seed", ",", "epochs", ",", "latency", ")", ":", "\n", "    ", "self", ".", "name", "=", "name", "\n", "self", ".", "net_state_dict", "=", "state_dict", "\n", "self", ".", "train_acc1es", "=", "copy", ".", "deepcopy", "(", "train_accs", ")", "\n", "self", ".", "train_acc5es", "=", "None", "\n", "self", ".", "train_losses", "=", "copy", ".", "deepcopy", "(", "train_losses", ")", "\n", "self", ".", "train_times", "=", "None", "\n", "self", ".", "arch_config", "=", "copy", ".", "deepcopy", "(", "arch_config", ")", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "flop", "=", "flop", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "latency", "=", "latency", "\n", "# evaluation results", "\n", "self", ".", "reset_eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_train_info": [[782, 787], ["None"], "methods", ["None"], ["", "def", "update_train_info", "(", "self", ",", "train_acc1es", ",", "train_acc5es", ",", "train_losses", ",", "train_times", ")", "->", "None", ":", "\n", "    ", "self", ".", "train_acc1es", "=", "train_acc1es", "\n", "self", ".", "train_acc5es", "=", "train_acc5es", "\n", "self", ".", "train_losses", "=", "train_losses", "\n", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_train_times": [[788, 794], ["collections.OrderedDict", "range"], "methods", ["None"], ["", "def", "reset_pseudo_train_times", "(", "self", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the training times.\"\"\"", "\n", "train_times", "=", "OrderedDict", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "train_times", "[", "i", "]", "=", "estimated_per_epoch_time", "\n", "", "self", ".", "train_times", "=", "train_times", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_pseudo_eval_times": [[795, 800], ["range", "ValueError"], "methods", ["None"], ["", "def", "reset_pseudo_eval_times", "(", "self", ",", "eval_name", ":", "Text", ",", "estimated_per_epoch_time", ":", "float", ")", "->", "None", ":", "\n", "    ", "\"\"\"Assign the evaluation times.\"\"\"", "\n", "if", "eval_name", "not", "in", "self", ".", "eval_names", ":", "raise", "ValueError", "(", "'invalid eval name : {:}'", ".", "format", "(", "eval_name", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "eval_name", ",", "i", ")", "]", "=", "estimated_per_epoch_time", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.reset_eval": [[801, 806], ["None"], "methods", ["None"], ["", "", "def", "reset_eval", "(", "self", ")", ":", "\n", "    ", "self", ".", "eval_names", "=", "[", "]", "\n", "self", ".", "eval_acc1es", "=", "{", "}", "\n", "self", ".", "eval_times", "=", "{", "}", "\n", "self", ".", "eval_losses", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_latency": [[807, 809], ["copy.deepcopy"], "methods", ["None"], ["", "def", "update_latency", "(", "self", ",", "latency", ")", ":", "\n", "    ", "self", ".", "latency", "=", "copy", ".", "deepcopy", "(", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_latency": [[810, 814], ["sum", "len"], "methods", ["None"], ["", "def", "get_latency", "(", "self", ")", "->", "float", ":", "\n", "    ", "\"\"\"Return the latency value in seconds. -1 represents not avaliable ; otherwise it should be a float value\"\"\"", "\n", "if", "self", ".", "latency", "is", "None", ":", "return", "-", "1.0", "\n", "else", ":", "return", "sum", "(", "self", ".", "latency", ")", "/", "len", "(", "self", ".", "latency", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_eval": [[815, 825], ["set", "api.ResultsCount.eval_names.append", "range", "x.split", "accs.keys"], "methods", ["None"], ["", "def", "update_eval", "(", "self", ",", "accs", ",", "losses", ",", "times", ")", ":", "# new version", "\n", "    ", "data_names", "=", "set", "(", "[", "x", ".", "split", "(", "'@'", ")", "[", "0", "]", "for", "x", "in", "accs", ".", "keys", "(", ")", "]", ")", "\n", "for", "data_name", "in", "data_names", ":", "\n", "      ", "assert", "data_name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already been added into eval-names'", ".", "format", "(", "data_name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "data_name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "        ", "xkey", "=", "'{:}@{:}'", ".", "format", "(", "data_name", ",", "iepoch", ")", "\n", "self", ".", "eval_acc1es", "[", "xkey", "]", "=", "accs", "[", "xkey", "]", "\n", "self", ".", "eval_losses", "[", "xkey", "]", "=", "losses", "[", "xkey", "]", "\n", "self", ".", "eval_times", "[", "xkey", "]", "=", "times", "[", "xkey", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.update_OLD_eval": [[826, 833], ["api.ResultsCount.eval_names.append", "range"], "methods", ["None"], ["", "", "", "def", "update_OLD_eval", "(", "self", ",", "name", ",", "accs", ",", "losses", ")", ":", "# old version", "\n", "    ", "assert", "name", "not", "in", "self", ".", "eval_names", ",", "'{:} has already added'", ".", "format", "(", "name", ")", "\n", "self", ".", "eval_names", ".", "append", "(", "name", ")", "\n", "for", "iepoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "      ", "if", "iepoch", "in", "accs", ":", "\n", "        ", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "accs", "[", "iepoch", "]", "\n", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "=", "losses", "[", "iepoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.__repr__": [[834, 838], ["len"], "methods", ["None"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "    ", "num_eval", "=", "len", "(", "self", ".", "eval_names", ")", "\n", "set_name", "=", "'['", "+", "', '", ".", "join", "(", "self", ".", "eval_names", ")", "+", "']'", "\n", "return", "(", "'{name}({xname}, arch={arch}, FLOP={flop:.2f}M, Param={param:.3f}MB, seed={seed}, {num_eval} eval-sets: {set_name})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "xname", "=", "self", ".", "name", ",", "arch", "=", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "flop", "=", "self", ".", "flop", ",", "param", "=", "self", ".", "params", ",", "seed", "=", "self", ".", "seed", ",", "num_eval", "=", "num_eval", ",", "set_name", "=", "set_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_total_epoch": [[839, 841], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_total_epoch", "(", "self", ")", ":", "\n", "    ", "return", "copy", ".", "deepcopy", "(", "self", ".", "epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_times": [[842, 858], ["isinstance", "list", "api.ResultsCount.train_times.values", "numpy.mean", "numpy.sum", "numpy.mean", "numpy.sum", "range"], "methods", ["None"], ["", "def", "get_times", "(", "self", ")", ":", "\n", "    ", "\"\"\"Obtain the information regarding both training and evaluation time.\"\"\"", "\n", "if", "self", ".", "train_times", "is", "not", "None", "and", "isinstance", "(", "self", ".", "train_times", ",", "dict", ")", ":", "\n", "      ", "train_times", "=", "list", "(", "self", ".", "train_times", ".", "values", "(", ")", ")", "\n", "time_info", "=", "{", "'T-train@epoch'", ":", "np", ".", "mean", "(", "train_times", ")", ",", "'T-train@total'", ":", "np", ".", "sum", "(", "train_times", ")", "}", "\n", "", "else", ":", "\n", "      ", "time_info", "=", "{", "'T-train@epoch'", ":", "None", ",", "'T-train@total'", ":", "None", "}", "\n", "", "for", "name", "in", "self", ".", "eval_names", ":", "\n", "      ", "try", ":", "\n", "        ", "xtimes", "=", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "epochs", ")", "]", "\n", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "mean", "(", "xtimes", ")", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "np", ".", "sum", "(", "xtimes", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "time_info", "[", "'T-{:}@epoch'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "time_info", "[", "'T-{:}@total'", ".", "format", "(", "name", ")", "]", "=", "None", "\n", "", "", "return", "time_info", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_eval_set": [[859, 861], ["None"], "methods", ["None"], ["", "def", "get_eval_set", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "eval_names", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_train": [[863, 875], ["sum", "range"], "methods", ["None"], ["", "def", "get_train", "(", "self", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "self", ".", "train_times", "is", "not", "None", ":", "\n", "      ", "xtime", "=", "self", ".", "train_times", "[", "iepoch", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "train_times", "[", "i", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "train_losses", "[", "iepoch", "]", ",", "\n", "'accuracy'", ":", "self", ".", "train_acc1es", "[", "iepoch", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_eval": [[876, 889], ["isinstance", "sum", "len", "range"], "methods", ["None"], ["", "def", "get_eval", "(", "self", ",", "name", ",", "iepoch", "=", "None", ")", ":", "\n", "    ", "\"\"\"Get the evaluation information ; there could be multiple evaluation sets (identified by the 'name' argument).\"\"\"", "\n", "if", "iepoch", "is", "None", ":", "iepoch", "=", "self", ".", "epochs", "-", "1", "\n", "assert", "0", "<=", "iepoch", "<", "self", ".", "epochs", ",", "'invalid iepoch={:} < {:}'", ".", "format", "(", "iepoch", ",", "self", ".", "epochs", ")", "\n", "if", "isinstance", "(", "self", ".", "eval_times", ",", "dict", ")", "and", "len", "(", "self", ".", "eval_times", ")", ">", "0", ":", "\n", "      ", "xtime", "=", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", "\n", "atime", "=", "sum", "(", "[", "self", ".", "eval_times", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "i", ")", "]", "for", "i", "in", "range", "(", "iepoch", "+", "1", ")", "]", ")", "\n", "", "else", ":", "xtime", ",", "atime", "=", "None", ",", "None", "\n", "return", "{", "'iepoch'", ":", "iepoch", ",", "\n", "'loss'", ":", "self", ".", "eval_losses", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'accuracy'", ":", "self", ".", "eval_acc1es", "[", "'{:}@{:}'", ".", "format", "(", "name", ",", "iepoch", ")", "]", ",", "\n", "'cur_time'", ":", "xtime", ",", "\n", "'all_time'", ":", "atime", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_net_param": [[890, 893], ["copy.deepcopy"], "methods", ["None"], ["", "def", "get_net_param", "(", "self", ",", "clone", "=", "False", ")", ":", "\n", "    ", "if", "clone", ":", "return", "copy", ".", "deepcopy", "(", "self", ".", "net_state_dict", ")", "\n", "else", ":", "return", "self", ".", "net_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.get_config": [[894, 904], ["str2structure"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_searchs.genotypes.Structure.str2structure"], ["", "def", "get_config", "(", "self", ",", "str2structure", ")", ":", "\n", "    ", "\"\"\"This function is used to obtain the config dict for this architecture.\"\"\"", "\n", "if", "str2structure", "is", "None", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'arch_str'", ":", "self", ".", "arch_config", "[", "'arch_str'", "]", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "'name'", ":", "'infer.tiny'", ",", "'C'", ":", "self", ".", "arch_config", "[", "'channel'", "]", ",", "\n", "'N'", ":", "self", ".", "arch_config", "[", "'num_cells'", "]", ",", "\n", "'genotype'", ":", "str2structure", "(", "self", ".", "arch_config", "[", "'arch_str'", "]", ")", ",", "'num_classes'", ":", "self", ".", "arch_config", "[", "'class_num'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.state_dict": [[905, 908], ["api.ResultsCount.__dict__.items"], "methods", ["None"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "    ", "_state_dict", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "}", "\n", "return", "_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict": [[909, 911], ["api.ResultsCount.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "    ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.create_from_state_dict": [[912, 917], ["api.ResultsCount", "api.ResultsCount.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict"], ["", "@", "staticmethod", "\n", "def", "create_from_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "x", "=", "ResultsCount", "(", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", ")", "\n", "x", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.print_information": [[18, 42], ["information.get_dataset_names", "enumerate", "information.get_compute_costs", "information.get_metrics", "print", "information.get_metrics", "api.print_information.metric2str"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_dataset_names", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_compute_costs", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics", "home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ArchResults.get_metrics"], ["def", "print_information", "(", "information", ",", "extra_info", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "  ", "dataset_names", "=", "information", ".", "get_dataset_names", "(", ")", "\n", "strings", "=", "[", "information", ".", "arch_str", ",", "'datasets : {:}, extra-info : {:}'", ".", "format", "(", "dataset_names", ",", "extra_info", ")", "]", "\n", "def", "metric2str", "(", "loss", ",", "acc", ")", ":", "\n", "    ", "return", "'loss = {:.3f}, top1 = {:.2f}%'", ".", "format", "(", "loss", ",", "acc", ")", "\n", "\n", "", "for", "ida", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "    ", "metric", "=", "information", ".", "get_compute_costs", "(", "dataset", ")", "\n", "flop", ",", "param", ",", "latency", "=", "metric", "[", "'flops'", "]", ",", "metric", "[", "'params'", "]", ",", "metric", "[", "'latency'", "]", "\n", "str1", "=", "'{:14s} FLOP={:6.2f} M, Params={:.3f} MB, latency={:} ms.'", ".", "format", "(", "dataset", ",", "flop", ",", "param", ",", "'{:.2f}'", ".", "format", "(", "latency", "*", "1000", ")", "if", "latency", "is", "not", "None", "and", "latency", ">", "0", "else", "None", ")", "\n", "train_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'train'", ")", "\n", "if", "dataset", "==", "'cifar10-valid'", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ")", "\n", "", "elif", "dataset", "==", "'cifar10'", ":", "\n", "      ", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'ori-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], test  : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "else", ":", "\n", "      ", "valid_info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-valid'", ")", "\n", "test__info", "=", "information", ".", "get_metrics", "(", "dataset", ",", "'x-test'", ")", "\n", "str2", "=", "'{:14s} train : [{:}], valid : [{:}], test : [{:}]'", ".", "format", "(", "dataset", ",", "metric2str", "(", "train_info", "[", "'loss'", "]", ",", "train_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "valid_info", "[", "'loss'", "]", ",", "valid_info", "[", "'accuracy'", "]", ")", ",", "metric2str", "(", "test__info", "[", "'loss'", "]", ",", "test__info", "[", "'accuracy'", "]", ")", ")", "\n", "", "strings", "+=", "[", "str1", ",", "str2", "]", "\n", "", "if", "show", ":", "print", "(", "'\\n'", ".", "join", "(", "strings", ")", ")", "\n", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.PrintLogger.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "name", "=", "'PrintLogger'", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.PrintLogger.log": [[16, 18], ["print"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "        ", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.PrintLogger.close": [[19, 21], ["print"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "print", "(", "'-'", "*", "30", "+", "' close printer '", "+", "'-'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.__init__": [[25, 40], ["int", "pathlib.Path", "logger.Logger.log_dir.mkdir", "open", "logger.Logger.tensorboard_dir.mkdir", "torch.utils.tensorboard.SummaryWriter", "pathlib.Path", "logger.Logger.model_dir.mkdir", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "seed", ",", "create_model_dir", "=", "True", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "seed", "=", "int", "(", "seed", ")", "\n", "self", ".", "log_dir", "=", "Path", "(", "log_dir", ")", "\n", "self", ".", "model_dir", "=", "Path", "(", "log_dir", ")", "/", "'model'", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "if", "create_model_dir", ":", "\n", "            ", "self", ".", "model_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "self", ".", "tensorboard_dir", "=", "self", ".", "log_dir", "\n", "self", ".", "logger_path", "=", "self", ".", "log_dir", "/", "'seed-{:}.log'", ".", "format", "(", "self", ".", "seed", ")", "\n", "self", ".", "logger_file", "=", "open", "(", "self", ".", "logger_path", ",", "'w'", ")", "\n", "\n", "self", ".", "tensorboard_dir", ".", "mkdir", "(", "mode", "=", "0o775", ",", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "str", "(", "self", ".", "tensorboard_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.__repr__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{name}(dir={log_dir}, writer={writer})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.extract_log": [[44, 46], ["None"], "methods", ["None"], ["", "def", "extract_log", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "logger_file", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.close": [[47, 51], ["logger.Logger.logger_file.close", "logger.Logger.writer.close"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.close", "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger_file", ".", "close", "(", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log": [[52, 60], ["sys.stdout.write", "sys.stdout.flush", "print", "logger.Logger.logger_file.write", "logger.Logger.logger_file.flush"], "methods", ["None"], ["", "", "def", "log", "(", "self", ",", "string", ",", "save", "=", "True", ",", "stdout", "=", "False", ")", ":", "\n", "        ", "if", "stdout", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "string", ")", ";", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "string", ")", "\n", "", "if", "save", ":", "\n", "            ", "self", ".", "logger_file", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "string", ")", ")", "\n", "self", ".", "logger_file", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_for_file": [[4, 7], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["def", "time_for_file", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%d-%h-at-%H-%M-%S'", "\n", "return", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_string": [[9, 13], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{:}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_string_short": [[15, 19], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "def", "time_string_short", "(", ")", ":", "\n", "    ", "ISOTIMEFORMAT", "=", "'%Y%m%d'", "\n", "string", "=", "'{:}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_print": [[21, 24], ["print", "time_utils.time_string"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.time_string"], ["", "def", "time_print", "(", "string", ",", "is_print", "=", "True", ")", ":", "\n", "    ", "if", "(", "is_print", ")", ":", "\n", "        ", "print", "(", "'{} : {}'", ".", "format", "(", "time_string", "(", ")", ",", "string", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.convert_secs2time": [[26, 35], ["int", "int", "int"], "function", ["None"], ["", "", "def", "convert_secs2time", "(", "epoch_time", ",", "return_str", "=", "False", ")", ":", "\n", "    ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "if", "return_str", ":", "\n", "        ", "str", "=", "'[{:02d}:{:02d}:{:02d}]'", ".", "format", "(", "need_hour", ",", "need_mins", ",", "need_secs", ")", "\n", "return", "str", "\n", "", "else", ":", "\n", "        ", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.time_utils.print_log": [[37, 44], ["hasattr", "log.log", "print", "log.write", "log.flush"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.log_utils.logger.Logger.log"], ["", "", "def", "print_log", "(", "print_string", ",", "log", ")", ":", "\n", "    ", "if", "hasattr", "(", "log", ",", "'log'", ")", ":", "log", ".", "log", "(", "'{:}'", ".", "format", "(", "print_string", ")", ")", "\n", "else", ":", "\n", "        ", "print", "(", "\"{:}\"", ".", "format", "(", "print_string", ")", ")", "\n", "if", "log", "is", "not", "None", ":", "\n", "            ", "log", ".", "write", "(", "'{:}\\n'", ".", "format", "(", "print_string", ")", ")", "\n", "log", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.count_parameters_in_MB": [[6, 11], ["isinstance", "numpy.sum", "numpy.sum", "numpy.prod", "numpy.prod", "v.size", "model.parameters", "v.size"], "function", ["None"], ["def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.get_model_infos": [[13, 40], ["flop_benchmark.add_flops_counting_methods", "add_flops_counting_methods.eval", "torch.rand", "torch.rand", "flop_benchmark.count_parameters_in_MB", "hasattr", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "add_flops_counting_methods.apply", "next", "cache_inputs.cuda.cuda", "torch.no_grad", "torch.no_grad", "add_flops_counting_methods.", "flop_benchmark.compute_average_flops_cost", "flop_benchmark.count_parameters_in_MB", "print", "print", "add_flops_counting_methods.parameters", "add_flops_counting_methods.auxiliary_param"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.compute_average_flops_cost", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.yitewang_metantk-nas.cell_infers.nasnet_cifar.NASNetonCIFAR.auxiliary_param"], ["", "", "def", "get_model_infos", "(", "model", ",", "shape", ")", ":", "\n", "#model = copy.deepcopy( model )", "\n", "\n", "    ", "model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#cache_inputs = torch.zeros(*shape).cuda()", "\n", "#cache_inputs = torch.zeros(*shape)", "\n", "cache_inputs", "=", "torch", ".", "rand", "(", "*", "shape", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "cache_inputs", "=", "cache_inputs", ".", "cuda", "(", ")", "\n", "#print_log('In the calculating function : cache input size : {:}'.format(cache_inputs.size()), log)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "_", "=", "model", "(", "cache_inputs", ")", "\n", "", "FLOPs", "=", "compute_average_flops_cost", "(", "model", ")", "/", "1e6", "\n", "Param", "=", "count_parameters_in_MB", "(", "model", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'auxiliary_param'", ")", ":", "\n", "        ", "aux_params", "=", "count_parameters_in_MB", "(", "model", ".", "auxiliary_param", "(", ")", ")", "\n", "print", "(", "'The auxiliary params of this model is : {:}'", ".", "format", "(", "aux_params", ")", ")", "\n", "print", "(", "'We remove the auxiliary params from the total params ({:}) when counting'", ".", "format", "(", "Param", ")", ")", "\n", "Param", "=", "Param", "-", "aux_params", "\n", "\n", "#print_log('FLOPs : {:} MB'.format(FLOPs), log)", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "apply", "(", "remove_hook_function", ")", "\n", "return", "FLOPs", ",", "Param", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_flops_counting_methods": [[43, 49], ["flop_benchmark.add_batch_counter_hook_function", "model.apply", "model.apply", "flop_benchmark.remove_hook_function"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.remove_hook_function"], ["", "def", "add_flops_counting_methods", "(", "model", ")", ":", "\n", "    ", "model", ".", "__batch_counter__", "=", "0", "\n", "add_batch_counter_hook_function", "(", "model", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.compute_average_flops_cost": [[52, 66], ["model.modules", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    A method that will be available after add_flops_counting_methods() is called on a desired net object.\n    Returns current mean flops consumption per image.\n    \"\"\"", "\n", "batches_count", "=", "model", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "#or isinstance(module, torch.nn.AvgPool2d) or isinstance(module, torch.nn.MaxPool2d) \\", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "            ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.pool_flops_counter_hook": [[69, 77], ["inputs[].size", "inputs[].size", "inputs[].size"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "pool_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "pool_module", ".", "kernel_size", "\n", "out_C", ",", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "1", ":", "]", "\n", "assert", "out_C", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", ",", "'{:} vs. {:}'", ".", "format", "(", "out_C", ",", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "overall_flops", "=", "batch_size", "*", "out_C", "*", "output_height", "*", "output_width", "*", "kernel_size", "*", "kernel_size", "\n", "pool_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.self_calculate_flops_counter_hook": [[79, 82], ["flop_benchmark..calculate_flop_self"], "function", ["None"], ["", "def", "self_calculate_flops_counter_hook", "(", "self_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "overall_flops", "=", "self_module", ".", "calculate_flop_self", "(", "inputs", "[", "0", "]", ".", "shape", ",", "output", ".", "shape", ")", "\n", "self_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.fc_flops_counter_hook": [[84, 92], ["inputs[].size", "inputs[].size", "output.size"], "function", ["None"], ["", "def", "fc_flops_counter_hook", "(", "fc_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "xin", ",", "xout", "=", "fc_module", ".", "in_features", ",", "fc_module", ".", "out_features", "\n", "assert", "xin", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "and", "xout", "==", "output", ".", "size", "(", "1", ")", ",", "'IO=({:}, {:})'", ".", "format", "(", "xin", ",", "xout", ")", "\n", "overall_flops", "=", "batch_size", "*", "xin", "*", "xout", "\n", "if", "fc_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "batch_size", "*", "xout", "\n", "", "fc_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.conv1d_flops_counter_hook": [[94, 109], ["inputs[].size"], "function", ["None"], ["", "def", "conv1d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "outputs", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "outL", "=", "outputs", ".", "shape", "[", "-", "1", "]", "\n", "[", "kernel", "]", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "outL", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.conv2d_flops_counter_hook": [[111, 127], ["inputs[].size"], "function", ["None"], ["", "def", "conv2d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "output", ")", ":", "\n", "    ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.batch_counter_hook": [[129, 134], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "inputs", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "    ", "inputs", "=", "inputs", "[", "0", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_batch_counter_hook_function": [[136, 140], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "        ", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_flops_counter_variable_or_reset": [[142, 148], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "        ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.add_flops_counter_hook_function": [[150, 171], ["isinstance", "isinstance", "hasattr", "module.register_forward_hook", "isinstance", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook", "isinstance", "isinstance", "hasattr", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv2d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv1d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "fc_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "# self-defined module", "\n", "        ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "            ", "handle", "=", "module", ".", "register_forward_hook", "(", "self_calculate_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.flop_benchmark.remove_hook_function": [[173, 182], ["hasattr", "hasattr", "getattr", "getattr.remove", "delattr"], "function", ["None"], ["", "", "", "def", "remove_hook_function", "(", "module", ")", ":", "\n", "    ", "hookers", "=", "[", "'__batch_counter_handle__'", ",", "'__flops_handle__'", "]", "\n", "for", "hooker", "in", "hookers", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "hooker", ")", ":", "\n", "            ", "handle", "=", "getattr", "(", "module", ",", "hooker", ")", "\n", "handle", ".", "remove", "(", ")", "\n", "", "", "keys", "=", "[", "'__flops__'", ",", "'__batch_counter__'", ",", "'__flops__'", "]", "+", "hookers", "\n", "for", "ckey", "in", "keys", ":", "\n", "        ", "if", "hasattr", "(", "module", ",", "ckey", ")", ":", "delattr", "(", "module", ",", "ckey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.LabelSmoothing.__init__": [[10, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.LabelSmoothing.forward": [[19, 27], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.BCEWithLogitsLoss.__init__": [[30, 38], ["torch.Module.__init__", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "pos_weight", "=", "None", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "super", "(", "BCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", "weight", "=", "weight", ",", "\n", "size_average", "=", "size_average", ",", "\n", "reduce", "=", "reduce", ",", "\n", "reduction", "=", "reduction", ",", "\n", "pos_weight", "=", "pos_weight", ")", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.BCEWithLogitsLoss.forward": [[38, 41], ["F.one_hot", "rfs_util.BCEWithLogitsLoss.criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target_onehot", "=", "F", ".", "one_hot", "(", "target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "self", ".", "criterion", "(", "input", ",", "target_onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.AverageMeter.__init__": [[45, 47], ["rfs_util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.AverageMeter.reset": [[48, 53], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.AverageMeter.update": [[54, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.adjust_learning_rate": [[61, 68], ["numpy.sum", "numpy.asarray"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "epoch", ",", "opt", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by decay rate every steep step\"\"\"", "\n", "steps", "=", "np", ".", "sum", "(", "epoch", ">", "np", ".", "asarray", "(", "opt", ".", "lr_decay_epochs", ")", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "new_lr", "=", "opt", ".", "learning_rate", "*", "(", "opt", ".", "lr_decay_rate", "**", "steps", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval_lib.rfs_util.accuracy": [[70, 85], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.CIFAR100.__init__": [[15, 91], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "open", "pickle.load", "enumerate", "enumerate", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "os.path.join", "new_labels.append", "numpy.min", "numpy.max", "len", "cifar.CIFAR100.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "cifar.CIFAR100.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_root", "=", "args", ".", "data_root", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "0.5071", ",", "0.4867", ",", "0.4408", "]", "\n", "self", ".", "std", "=", "[", "0.2675", ",", "0.2565", ",", "0.2761", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "labels", "=", "data", "[", "'labels'", "]", "\n", "# adjust sparse labels to labels from 0 to n.", "\n", "cur_class", "=", "0", "\n", "label2label", "=", "{", "}", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "if", "label", "not", "in", "label2label", ":", "\n", "                    ", "label2label", "[", "label", "]", "=", "cur_class", "\n", "cur_class", "+=", "1", "\n", "", "", "new_labels", "=", "[", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "new_labels", ".", "append", "(", "label2label", "[", "label", "]", ")", "\n", "", "self", ".", "labels", "=", "new_labels", "\n", "\n", "# pre-process for contrastive sampling", "\n", "", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.CIFAR100.__getitem__": [[92, 105], ["numpy.asarray().astype", "cifar.CIFAR100.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.CIFAR100.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.MetaCIFAR100.__init__": [[112, 149], ["cifar.CIFAR100.__init__", "list", "range", "list", "cifar.MetaCIFAR100.data.keys", "torchvision.Compose", "torchvision.Compose", "cifar.MetaCIFAR100.data[].append", "cifar.MetaCIFAR100.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaCIFAR100", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "False", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.MetaCIFAR100.__getitem__": [[150, 185], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "cifar.MetaCIFAR100.train_transform", "cifar.MetaCIFAR100.test_transform", "x.squeeze", "x.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.cifar.MetaCIFAR100.__len__": [[186, 188], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet.__init__": [[11, 81], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "os.path.join", "os.path.join", "numpy.load", "tiered_imagenet.TieredImageNet._load_labels", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "numpy.min", "numpy.max", "len", "tiered_imagenet.TieredImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "tiered_imagenet.TieredImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet._load_labels"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "args", ".", "data_path", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "", "else", ":", "\n", "            ", "self", ".", "image_file_pattern", "=", "'%s_images.npz'", "\n", "self", ".", "label_file_pattern", "=", "'%s_labels.pkl'", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "\n", "# modified code to load tieredImageNet", "\n", "image_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "image_file_pattern", "%", "partition", ")", "\n", "self", ".", "imgs", "=", "np", ".", "load", "(", "image_file", ")", "[", "'images'", "]", "\n", "label_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "label_file_pattern", "%", "partition", ")", "\n", "self", ".", "labels", "=", "self", ".", "_load_labels", "(", "label_file", ")", "[", "'labels'", "]", "\n", "\n", "# pre-process for contrastive sampling", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet.__getitem__": [[82, 95], ["numpy.asarray().astype", "tiered_imagenet.TieredImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.TieredImageNet._load_labels": [[99, 111], ["open", "pickle.load", "open", "pickle._Unpickler", "pickle._Unpickler.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_load_labels", "(", "file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "", "return", "data", "\n", "", "except", ":", "\n", "            ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "u", "=", "pickle", ".", "_Unpickler", "(", "f", ")", "\n", "u", ".", "encoding", "=", "'latin1'", "\n", "data", "=", "u", ".", "load", "(", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.MetaTieredImageNet.__init__": [[115, 152], ["tiered_imagenet.TieredImageNet.__init__", "list", "range", "list", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "tiered_imagenet.MetaTieredImageNet.data[].append", "tiered_imagenet.MetaTieredImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaTieredImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "True", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.MetaTieredImageNet.__getitem__": [[153, 188], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "tiered_imagenet.MetaTieredImageNet.train_transform", "tiered_imagenet.MetaTieredImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n", "query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.tiered_imagenet.MetaTieredImageNet.__len__": [[189, 191], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.ImageNet.__init__": [[11, 75], ["torch.utils.data.Dataset.__init__", "torchvision.Normalize", "open", "pickle.load", "numpy.asarray", "range", "range", "numpy.asarray", "numpy.asarray", "torchvision.Compose", "torchvision.Compose", "os.path.join", "numpy.min", "numpy.max", "len", "mini_imagenet.ImageNet.cls_positive[].append", "range", "numpy.asarray", "numpy.asarray", "range", "range", "mini_imagenet.ImageNet.cls_negative[].extend", "range", "range", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "pretrain", "=", "True", ",", "is_sample", "=", "False", ",", "k", "=", "4096", ",", "\n", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_path", "=", "args", ".", "data_path", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "data_aug", "=", "args", ".", "data_aug", "\n", "self", ".", "mean", "=", "[", "120.39586422", "/", "255.0", ",", "115.59361427", "/", "255.0", ",", "104.54012653", "/", "255.0", "]", "\n", "self", ".", "std", "=", "[", "70.68188272", "/", "255.0", ",", "68.27635443", "/", "255.0", ",", "72.54505529", "/", "255.0", "]", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "self", ".", "pretrain", "=", "pretrain", "\n", "\n", "if", "transform", "is", "None", ":", "\n", "            ", "if", "self", ".", "partition", "==", "'train'", "and", "self", ".", "data_aug", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transform", "\n", "\n", "", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_train_phase_%s.pickle'", "\n", "", "else", ":", "\n", "            ", "self", ".", "file_pattern", "=", "'miniImageNet_category_split_%s.pickle'", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "file_pattern", "%", "partition", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "self", ".", "imgs", "=", "data", "[", "'data'", "]", "\n", "self", ".", "labels", "=", "data", "[", "'labels'", "]", "\n", "\n", "# pre-process for contrastive sampling", "\n", "", "self", ".", "k", "=", "k", "\n", "self", ".", "is_sample", "=", "is_sample", "\n", "if", "self", ".", "is_sample", ":", "\n", "            ", "self", ".", "labels", "=", "np", ".", "asarray", "(", "self", ".", "labels", ")", "\n", "self", ".", "labels", "=", "self", ".", "labels", "-", "np", ".", "min", "(", "self", ".", "labels", ")", "\n", "num_classes", "=", "np", ".", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "\n", "self", ".", "cls_positive", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "imgs", ")", ")", ":", "\n", "                ", "self", ".", "cls_positive", "[", "self", ".", "labels", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "cls_negative", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "                    ", "if", "j", "==", "i", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "cls_negative", "[", "i", "]", ".", "extend", "(", "self", ".", "cls_positive", "[", "j", "]", ")", "\n", "\n", "", "", "self", ".", "cls_positive", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_positive", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_negative", "=", "[", "np", ".", "asarray", "(", "self", ".", "cls_negative", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "self", ".", "cls_positive", "=", "np", ".", "asarray", "(", "self", ".", "cls_positive", ")", "\n", "self", ".", "cls_negative", "=", "np", ".", "asarray", "(", "self", ".", "cls_negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.ImageNet.__getitem__": [[76, 89], ["numpy.asarray().astype", "mini_imagenet.ImageNet.transform", "min", "numpy.random.choice", "numpy.hstack", "numpy.asarray", "len", "numpy.asarray"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "self", ".", "imgs", "[", "item", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "target", "=", "self", ".", "labels", "[", "item", "]", "-", "min", "(", "self", ".", "labels", ")", "\n", "\n", "if", "not", "self", ".", "is_sample", ":", "\n", "            ", "return", "img", ",", "target", ",", "item", "\n", "", "else", ":", "\n", "            ", "pos_idx", "=", "item", "\n", "replace", "=", "True", "if", "self", ".", "k", ">", "len", "(", "self", ".", "cls_negative", "[", "target", "]", ")", "else", "False", "\n", "neg_idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "cls_negative", "[", "target", "]", ",", "self", ".", "k", ",", "replace", "=", "replace", ")", "\n", "sample_idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "asarray", "(", "[", "pos_idx", "]", ")", ",", "neg_idx", ")", ")", "\n", "return", "img", ",", "target", ",", "item", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.ImageNet.__len__": [[90, 92], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.MetaImageNet.__init__": [[96, 146], ["mini_imagenet.ImageNet.__init__", "list", "range", "list", "mini_imagenet.MetaImageNet.data.keys", "torchvision.Compose", "torchvision.Compose", "mini_imagenet.MetaImageNet.data[].append", "mini_imagenet.MetaImageNet.data.keys", "torchvision.RandomCrop", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "PIL.Image.fromarray", "numpy.asarray", "PIL.Image.fromarray"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ",", "train_transform", "=", "None", ",", "test_transform", "=", "None", ",", "fix_seed", "=", "True", ")", ":", "\n", "        ", "super", "(", "MetaImageNet", ",", "self", ")", ".", "__init__", "(", "args", ",", "partition", ",", "True", ")", "\n", "self", ".", "fix_seed", "=", "fix_seed", "\n", "self", ".", "n_ways", "=", "args", ".", "n_ways", "\n", "self", ".", "n_shots", "=", "args", ".", "n_shots", "\n", "self", ".", "n_queries", "=", "args", ".", "n_queries", "\n", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "self", ".", "n_test_runs", "=", "args", ".", "n_test_runs", "\n", "self", ".", "n_aug_support_samples", "=", "args", ".", "n_aug_support_samples", "\n", "if", "train_transform", "is", "None", ":", "\n", "            ", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "84", ",", "padding", "=", "8", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "lambda", "x", ":", "np", ".", "asarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_transform", "=", "train_transform", "\n", "\n", "", "if", "test_transform", "is", "None", ":", "\n", "            ", "self", ".", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "x", ":", "Image", ".", "fromarray", "(", "x", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "self", ".", "normalize", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "test_transform", "=", "test_transform", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "idx", "in", "range", "(", "self", ".", "imgs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "self", ".", "labels", "[", "idx", "]", "not", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", "=", "[", "]", "\n", "", "self", ".", "data", "[", "self", ".", "labels", "[", "idx", "]", "]", ".", "append", "(", "self", ".", "imgs", "[", "idx", "]", ")", "\n", "", "self", ".", "classes", "=", "list", "(", "self", ".", "data", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "self", ".", "fix_seed", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "", "cls_sampled", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "classes", ",", "self", ".", "n_ways", ",", "False", ")", "\n", "support_xs", "=", "[", "]", "\n", "support_ys", "=", "[", "]", "\n", "query_xs", "=", "[", "]", "\n", "query_ys", "=", "[", "]", "\n", "for", "idx", ",", "cls", "in", "enumerate", "(", "cls_sampled", ")", ":", "\n", "            ", "imgs", "=", "np", ".", "asarray", "(", "self", ".", "data", "[", "cls", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "support_xs_ids_sampled", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "self", ".", "n_shots", ",", "False", ")", "\n", "support_xs", ".", "append", "(", "imgs", "[", "support_xs_ids_sampled", "]", ")", "\n", "support_ys", ".", "append", "(", "[", "idx", "]", "*", "self", ".", "n_shots", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.MetaImageNet.__getitem__": [[147, 182], ["numpy.random.choice", "enumerate", "torch.stack.reshape", "query_ys.reshape.reshape.reshape", "numpy.tile.reshape", "numpy.split", "torch.stack.reshape", "numpy.split", "torch.stack", "torch.stack", "numpy.random.seed", "numpy.asarray().astype", "numpy.random.choice", "numpy.tile.append", "numpy.tile.append", "numpy.setxor1d", "numpy.random.choice", "torch.stack.append", "query_ys.reshape.reshape.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.tile", "numpy.tile", "list", "list", "range", "numpy.arange", "numpy.tile.reshape", "map", "map", "numpy.asarray", "mini_imagenet.MetaImageNet.train_transform", "mini_imagenet.MetaImageNet.test_transform", "x.squeeze", "x.squeeze"], "methods", ["None"], ["query_xs_ids", "=", "np", ".", "setxor1d", "(", "np", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "support_xs_ids_sampled", ")", "\n", "query_xs_ids", "=", "np", ".", "random", ".", "choice", "(", "query_xs_ids", ",", "self", ".", "n_queries", ",", "False", ")", "\n", "query_xs", ".", "append", "(", "imgs", "[", "query_xs_ids", "]", ")", "\n", "query_ys", ".", "append", "(", "[", "idx", "]", "*", "query_xs_ids", ".", "shape", "[", "0", "]", ")", "\n", "", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "np", ".", "array", "(", "support_xs", ")", ",", "np", ".", "array", "(", "support_ys", ")", ",", "np", ".", "array", "(", "\n", "query_xs", ")", ",", "np", ".", "array", "(", "query_ys", ")", "\n", "num_ways", ",", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", "=", "query_xs", ".", "shape", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_ys", "=", "query_ys", ".", "reshape", "(", "(", "num_ways", "*", "n_queries_per_way", ",", ")", ")", "\n", "\n", "support_xs", "=", "support_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "if", "self", ".", "n_aug_support_samples", ">", "1", ":", "\n", "            ", "support_xs", "=", "np", ".", "tile", "(", "support_xs", ",", "(", "self", ".", "n_aug_support_samples", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "support_ys", "=", "np", ".", "tile", "(", "support_ys", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", ",", "(", "self", ".", "n_aug_support_samples", ")", ")", "\n", "", "support_xs", "=", "np", ".", "split", "(", "support_xs", ",", "support_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "query_xs", "=", "query_xs", ".", "reshape", "(", "(", "-", "1", ",", "height", ",", "width", ",", "channel", ")", ")", "\n", "query_xs", "=", "np", ".", "split", "(", "query_xs", ",", "query_xs", ".", "shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "\n", "support_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "train_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "support_xs", ")", ")", ")", "\n", "query_xs", "=", "torch", ".", "stack", "(", "list", "(", "map", "(", "lambda", "x", ":", "self", ".", "test_transform", "(", "x", ".", "squeeze", "(", ")", ")", ",", "query_xs", ")", ")", ")", "\n", "\n", "return", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_test_runs", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "lambda", "x", ":", "None", "\n", "args", ".", "n_ways", "=", "5", "\n", "args", ".", "n_shots", "=", "1", "\n", "args", ".", "n_queries", "=", "12", "\n", "args", ".", "data_path", "=", "'data'", "\n", "args", ".", "data_aug", "=", "True", "\n", "args", ".", "n_test_runs", "=", "5", "\n", "args", ".", "n_aug_support_samples", "=", "1", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_dataset.mini_imagenet.MetaImageNet.__len__": [[183, 185], ["None"], "methods", ["None"], ["imagenet", "=", "ImageNet", "(", "args", ",", "'val'", ")", "\n", "print", "(", "len", "(", "imagenet", ")", ")", "\n", "print", "(", "imagenet", ".", "__getitem__", "(", "500", ")", "[", "0", "]", ".", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.convnet.ConvNet.__init__": [[9, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "convnet.ConvNet.modules", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "-", "1", ",", "hidden_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "hidden_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ")", "\n", "self", ".", "layer4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "# nn.BatchNorm2d(64, momentum=1, affine=True, track_running_stats=False),", "\n", "nn", ".", "BatchNorm2d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.convnet.ConvNet.forward": [[45, 65], ["convnet.ConvNet.layer1", "convnet.ConvNet.layer2", "convnet.ConvNet.layer3", "convnet.ConvNet.layer4", "convnet.ConvNet.avgpool", "convnet.ConvNet.view", "convnet.ConvNet.size", "convnet.ConvNet.classifier"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f0", "=", "out", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "f1", "=", "out", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "f2", "=", "out", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "f3", "=", "out", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "out", "\n", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.convnet.convnet4": [[67, 72], ["convnet.ConvNet"], "function", ["None"], ["", "", "", "def", "convnet4", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Four layer ConvNet\n    \"\"\"", "\n", "model", "=", "ConvNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.StdConv.__init__": [[37, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.StdConv.forward": [[45, 47], ["operations.StdConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.DropPath_.__init__": [[49, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"[!] DropPath is inplace module\n        Args:\n            p: probability of an path to be zeroed.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.DropPath_.extra_repr": [[57, 59], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f\"p={self.p}, inplace\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.DropPath_.forward": [[60, 64], ["operations.drop_path_"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.drop_path_"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "drop_path_", "(", "x", ",", "self", ".", "p", ",", "self", ".", "training", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.ReLUConvBN.__init__": [[66, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.ReLUConvBN.forward": [[74, 76], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.DilConv.__init__": [[79, 87], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "DilConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.DilConv.forward": [[89, 91], ["operations.DilConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.SepConv.__init__": [[94, 105], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_in", ",", "affine", "=", "affine", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.SepConv.forward": [[107, 109], ["operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.Identity.__init__": [[112, 114], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.Identity.forward": [[115, 117], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.Zero.__init__": [[120, 123], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.Zero.forward": [[124, 128], ["x[].mul", "x.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "return", "x", ".", "mul", "(", "0.", ")", "\n", "", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.FactorizedReduce.__init__": [[131, 138], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "C_out", "%", "2", "==", "0", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", "//", "2", ",", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.FactorizedReduce.forward": [[139, 146], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "torch.pad", "torch.pad", "torch.pad", "torch.pad.size", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "x", ".", "size", "(", "2", ")", "%", "2", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "1", ",", "0", ")", ",", "\"constant\"", ",", "0", ")", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_1", "(", "x", ")", ",", "self", ".", "conv_2", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.operations.drop_path_": [[23, 31], ["torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "x.div_().mul_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.div_", "x.size"], "function", ["None"], ["def", "drop_path_", "(", "x", ",", "drop_prob", ",", "training", ")", ":", "\n", "    ", "if", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "        ", "keep_prob", "=", "1.0", "-", "drop_prob", "\n", "# per data point mask; assuming x in cuda.", "\n", "mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", ".", "mul_", "(", "mask", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.Normalize.__init__": [[25, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "power", "=", "2", ")", ":", "\n", "        ", "super", "(", "Normalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "power", "=", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.Normalize.forward": [[29, 33], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "x", ".", "pow", "(", "self", ".", "power", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "self", ".", "power", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.BasicBlock.__init__": [[38, 47], ["torch.Module.__init__", "resnet_new.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_new.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.BasicBlock.forward": [[48, 65], ["resnet_new.BasicBlock.conv1", "resnet_new.BasicBlock.bn1", "resnet_new.BasicBlock.relu", "resnet_new.BasicBlock.conv2", "resnet_new.BasicBlock.bn2", "resnet_new.BasicBlock.relu", "resnet_new.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.Bottleneck.__init__": [[70, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.Bottleneck.forward": [[83, 104], ["resnet_new.Bottleneck.conv1", "resnet_new.Bottleneck.bn1", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.conv2", "resnet_new.Bottleneck.bn2", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.conv3", "resnet_new.Bottleneck.bn3", "resnet_new.Bottleneck.relu", "resnet_new.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.ResNet.__init__": [[108, 133], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "resnet_new.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_new.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "in_channel", "=", "3", ",", "width", "=", "1", ",", "num_classes", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "base", "=", "int", "(", "64", "*", "width", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "self", ".", "base", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "8", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.ResNet._make_layer": [[134, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.ResNet.forward": [[151, 168], ["resnet_new.ResNet.conv1", "resnet_new.ResNet.bn1", "resnet_new.ResNet.relu", "resnet_new.ResNet.maxpool", "resnet_new.ResNet.layer1", "resnet_new.ResNet.layer2", "resnet_new.ResNet.layer3", "resnet_new.ResNet.layer4", "resnet_new.ResNet.avgpool", "resnet_new.ResNet.view", "resnet_new.ResNet.classifier", "resnet_new.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "is_feat", ":", "\n", "            ", "return", "[", "x", "]", ",", "x", "\n", "\n", "", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet_new.resnet50": [[170, 179], ["resnet_new.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.nas_201_api.api.ResultsCount.load_state_dict"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.Cell.__init__": [[17, 34], ["torch.Module.__init__", "operations.ReLUConvBN", "dartsmodel.Cell._compile", "operations.FactorizedReduce", "operations.ReLUConvBN", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.Cell._compile"], ["    ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "        ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#print(C_prev_prev, C_prev, C)", "\n", "\n", "if", "reduction_prev", ":", "\n", "            ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "if", "reduction", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "reduce", ")", "\n", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "normal", ")", "\n", "concat", "=", "genotype", ".", "normal_concat", "\n", "", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.Cell._compile": [[35, 48], ["len", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "\n", "self", ".", "_steps", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "# ModuleList append", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.Cell.forward": [[49, 69], ["dartsmodel.Cell.preprocess0", "dartsmodel.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2", "isinstance", "dartsmodel.drop_path", "isinstance", "dartsmodel.drop_path"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.drop_path", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.drop_path"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_prob", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_steps", ")", ":", "\n", "            ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "if", "self", ".", "training", "and", "drop_prob", ">", "0.", ":", "\n", "                ", "if", "not", "isinstance", "(", "op1", ",", "Identity", ")", ":", "\n", "                    ", "h1", "=", "drop_path", "(", "h1", ",", "drop_prob", ")", "\n", "", "if", "not", "isinstance", "(", "op2", ",", "Identity", ")", ":", "\n", "                    ", "h2", "=", "drop_path", "(", "h2", ",", "drop_prob", ")", "\n", "", "", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.AuxiliaryHeadCIFAR.__init__": [[72, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 8x8\"\"\"", "\n", "super", "(", "AuxiliaryHeadCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "3", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "# image size = 2 x 2", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.AuxiliaryHeadCIFAR.forward": [[87, 91], ["dartsmodel.AuxiliaryHeadCIFAR.features", "dartsmodel.AuxiliaryHeadCIFAR.classifier", "dartsmodel.AuxiliaryHeadCIFAR.view", "dartsmodel.AuxiliaryHeadCIFAR.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.AuxiliaryHeadImageNet.__init__": [[95, 111], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"assuming input size 14x14\"\"\"", "\n", "super", "(", "AuxiliaryHeadImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "# NOTE: This batchnorm was omitted in my earlier implementation due to a typo.", "\n", "# Commenting it out for consistency with the experiments in the paper.", "\n", "# nn.BatchNorm2d(768),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "768", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.AuxiliaryHeadImageNet.forward": [[112, 116], ["dartsmodel.AuxiliaryHeadImageNet.features", "dartsmodel.AuxiliaryHeadImageNet.classifier", "dartsmodel.AuxiliaryHeadImageNet.view", "dartsmodel.AuxiliaryHeadImageNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkCIFAR.__init__": [[120, 154], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dartsmodel.Cell", "dartsmodel.AuxiliaryHeadCIFAR"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "NetworkCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "# 20", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "# auxiliary", "\n", "\n", "stem_multiplier", "=", "3", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "# C_curr = 3*36=108", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "# layers = 20", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "# [6, 13]", "\n", "                ", "C_curr", "*=", "2", "# 108 * 2 = 216", "\n", "reduction", "=", "True", "# two reduction cells", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadCIFAR", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkCIFAR.forward": [[155, 168], ["dartsmodel.NetworkCIFAR.stem", "enumerate", "dartsmodel.NetworkCIFAR.global_pooling", "dartsmodel.NetworkCIFAR.classifier", "dartsmodel.NetworkCIFAR.view", "cell", "dartsmodel.NetworkCIFAR.size", "dartsmodel.NetworkCIFAR.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem", "(", "input", ")", "\n", "#pdb.set_trace()", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "#pdb.set_trace()", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkImageNet.__init__": [[172, 212], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dartsmodel.Cell", "dartsmodel.AuxiliaryHeadImageNet"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C", ",", "num_classes", ",", "layers", ",", "auxiliary", ",", "genotype", ")", ":", "\n", "        ", "super", "(", "NetworkImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", "//", "2", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "C", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C", ",", "C", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                ", "C_to_auxiliary", "=", "C_prev", "\n", "\n", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkImageNet.forward": [[213, 225], ["dartsmodel.NetworkImageNet.stem0", "dartsmodel.NetworkImageNet.stem1", "enumerate", "dartsmodel.NetworkImageNet.global_pooling", "dartsmodel.NetworkImageNet.classifier", "dartsmodel.NetworkImageNet.view", "cell", "dartsmodel.NetworkImageNet.size", "dartsmodel.NetworkImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "self", ".", "drop_path_prob", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "logits", ",", "logits_aux", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkMiniImageNet.__init__": [[229, 288], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "dartsmodel.Cell", "dartsmodel.AuxiliaryHeadImageNet", "range", "range", "dartsmodel.Cell", "dartsmodel.Cell"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "C", ",", "num_classes", ",", "layers", ",", "criterion", ",", "auxiliary", ",", "genotype", ",", "steps", "=", "4", ",", "stem_multiplier", "=", "3", ")", ":", "\n", "        ", "super", "(", "NetworkMiniImageNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_auxiliary", "=", "auxiliary", "\n", "\n", "C_curr", "=", "stem_multiplier", "*", "C", "\n", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", "//", "2", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_curr", "//", "2", ",", "C_curr", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_prev", "=", "False", "\n", "'''\n        Construct network according to layers. If layers == 1, only reduction cell is used.\n        '''", "\n", "if", "layers", "==", "1", ":", "\n", "            ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "", "elif", "layers", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                    ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "                ", "if", "i", "in", "[", "layers", "//", "3", ",", "2", "*", "layers", "//", "3", "]", ":", "\n", "                    ", "C_curr", "*=", "2", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                    ", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "reduction_prev", "=", "reduction", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "cell", ".", "multiplier", "*", "C_curr", "\n", "if", "i", "==", "2", "*", "layers", "//", "3", ":", "\n", "                    ", "C_to_auxiliary", "=", "C_prev", "\n", "", "", "", "if", "auxiliary", ":", "\n", "            ", "self", ".", "auxiliary_head", "=", "AuxiliaryHeadImageNet", "(", "C_to_auxiliary", ",", "num_classes", ")", "\n", "", "self", ".", "global_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier_meta_nas", "=", "nn", ".", "Linear", "(", "C_prev", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.NetworkMiniImageNet.forward": [[289, 304], ["dartsmodel.NetworkMiniImageNet.stem0", "enumerate", "dartsmodel.NetworkMiniImageNet.global_pooling", "dartsmodel.NetworkMiniImageNet.classifier_meta_nas", "dartsmodel.NetworkMiniImageNet.view", "cell", "dartsmodel.NetworkMiniImageNet.size", "dartsmodel.NetworkMiniImageNet.auxiliary_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "logits_aux", "=", "None", "\n", "s0", "=", "s1", "=", "self", ".", "stem0", "(", "input", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "#s0, s1 = s1, cell(s0, s1, self.drop_path_prob)", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ",", "0", ")", "\n", "if", "i", "==", "2", "*", "self", ".", "_layers", "//", "3", ":", "\n", "                ", "if", "self", ".", "_auxiliary", "and", "self", ".", "training", ":", "\n", "                    ", "logits_aux", "=", "self", ".", "auxiliary_head", "(", "s1", ")", "\n", "", "", "", "out", "=", "self", ".", "global_pooling", "(", "s1", ")", "\n", "logits", "=", "self", ".", "classifier_meta_nas", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "if", "is_feat", ":", "\n", "            ", "return", "[", "out", "]", ",", "logits", "\n", "", "else", ":", "\n", "            ", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.dartsmodel.drop_path": [[7, 14], ["torch.FloatTensor().bernoulli_().to", "torch.FloatTensor().bernoulli_().to", "x.div_", "x.mul_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor().bernoulli_", "torch.FloatTensor", "torch.FloatTensor", "x.size"], "function", ["None"], ["def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "    ", "if", "drop_prob", ">", "0.", ":", "\n", "        ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "torch", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.StdConv.__init__": [[37, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.StdConv.forward": [[45, 47], ["fewshot_operations.StdConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.DropPath_.__init__": [[49, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"[!] DropPath is inplace module\n        Args:\n            p: probability of an path to be zeroed.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.DropPath_.extra_repr": [[57, 59], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f\"p={self.p}, inplace\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.DropPath_.forward": [[60, 64], ["fewshot_operations.drop_path_"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.drop_path_"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "drop_path_", "(", "x", ",", "self", ".", "p", ",", "self", ".", "training", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.ReLUConvBN.__init__": [[67, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "ReLUConvBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.ReLUConvBN.forward": [[75, 77], ["fewshot_operations.ReLUConvBN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.SepConv.__init__": [[81, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.SepConv.forward": [[90, 92], ["fewshot_operations.SepConv.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.DualSepConv.__init__": [[96, 100], ["torch.Module.__init__", "fewshot_operations.SepConv", "fewshot_operations.SepConv"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "DualSepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op_a", "=", "SepConv", "(", "C_in", ",", "C_in", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "self", ".", "op_b", "=", "SepConv", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "1", ",", "padding", ",", "dilation", ",", "affine", ",", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.DualSepConv.forward": [[101, 105], ["fewshot_operations.DualSepConv.op_a", "fewshot_operations.DualSepConv.op_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "op_a", "(", "x", ")", "\n", "x", "=", "self", ".", "op_b", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.ResNetBasicblock.__init__": [[109, 126], ["torch.Module.__init__", "fewshot_operations.ReLUConvBN", "fewshot_operations.ReLUConvBN", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "fewshot_operations.ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "1", "or", "stride", "==", "2", ",", "'invalid stride {:}'", ".", "format", "(", "stride", ")", "\n", "self", ".", "conv_a", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "3", ",", "stride", ",", "1", ",", "1", ",", "affine", ")", "\n", "self", ".", "conv_b", "=", "ReLUConvBN", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "1", ",", "affine", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "elif", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "downsample", "=", "ReLUConvBN", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "", "self", ".", "in_dim", "=", "inplanes", "\n", "self", ".", "out_dim", "=", "planes", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "num_conv", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.ResNetBasicblock.extra_repr": [[127, 130], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "string", "=", "'{name}(inC={in_dim}, outC={out_dim}, stride={stride})'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.ResNetBasicblock.forward": [[131, 141], ["fewshot_operations.ResNetBasicblock.conv_a", "fewshot_operations.ResNetBasicblock.conv_b", "fewshot_operations.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "basicblock", "=", "self", ".", "conv_a", "(", "inputs", ")", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "residual", "=", "inputs", "\n", "", "return", "residual", "+", "basicblock", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.POOLING.__init__": [[145, 154], ["torch.Module.__init__", "fewshot_operations.ReLUConvBN", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "mode", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", "POOLING", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "C_in", "==", "C_out", ":", "\n", "            ", "self", ".", "preprocess", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "preprocess", "=", "ReLUConvBN", "(", "C_in", ",", "C_out", ",", "1", ",", "1", ",", "0", ",", "1", ",", "affine", ",", "track_running_stats", ")", "\n", "", "if", "mode", "==", "'avg'", ":", "self", ".", "op", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "count_include_pad", "=", "False", ")", "\n", "elif", "mode", "==", "'max'", ":", "self", ".", "op", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ")", "\n", "else", ":", "raise", "ValueError", "(", "'Invalid mode={:} in POOLING'", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.POOLING.forward": [[155, 159], ["fewshot_operations.POOLING.op", "fewshot_operations.POOLING.preprocess"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "preprocess", ":", "x", "=", "self", ".", "preprocess", "(", "inputs", ")", "\n", "else", ":", "x", "=", "inputs", "\n", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.PoolBN.__init__": [[166, 182], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "pool_type.lower", "torch.MaxPool2d", "torch.MaxPool2d", "pool_type.lower", "torch.AvgPool2d", "torch.AvgPool2d", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "pool_type", ",", "C", ",", "kernel_size", ",", "stride", ",", "padding", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pool_type: 'max' or 'avg'\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "pool_type", ".", "lower", "(", ")", "==", "\"max\"", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "", "elif", "pool_type", ".", "lower", "(", ")", "==", "\"avg\"", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", ",", "stride", ",", "padding", ",", "count_include_pad", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "# self.bn = BatchNorm_scratch(C, 4)", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.PoolBN.forward": [[184, 188], ["fewshot_operations.PoolBN.pool", "fewshot_operations.PoolBN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pool", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.Identity.__init__": [[191, 193], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.Identity.forward": [[194, 196], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.Zero.__init__": [[200, 206], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Zero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_zero", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.Zero.forward": [[207, 216], ["list", "x.new_zeros", "x.mul", "x[].mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "C_in", "==", "self", ".", "C_out", ":", "\n", "            ", "if", "self", ".", "stride", "==", "1", ":", "return", "x", ".", "mul", "(", "0.", ")", "\n", "else", ":", "return", "x", "[", ":", ",", ":", ",", ":", ":", "self", ".", "stride", ",", ":", ":", "self", ".", "stride", "]", ".", "mul", "(", "0.", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "self", ".", "C_out", "\n", "zeros", "=", "x", ".", "new_zeros", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "zeros", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.Zero.extra_repr": [[217, 219], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FactorizedReduce.__init__": [[223, 241], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ConstantPad2d", "torch.ConstantPad2d", "fewshot_operations.FactorizedReduce.convs.append", "torch.Conv2d", "torch.Conv2d", "ValueError", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", ",", "affine", ",", "track_running_stats", ")", ":", "\n", "        ", "super", "(", "FactorizedReduce", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "if", "stride", "==", "2", ":", "\n", "# assert C_out % 2 == 0, 'C_out : {:}'.format(C_out)", "\n", "            ", "C_outs", "=", "[", "C_out", "//", "2", ",", "C_out", "-", "C_out", "//", "2", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "                ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "C_in", ",", "C_outs", "[", "i", "]", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "0", ")", "\n", "", "elif", "stride", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid stride : {:}'", ".", "format", "(", "stride", ")", ")", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FactorizedReduce.forward": [[242, 251], ["fewshot_operations.FactorizedReduce.bn", "fewshot_operations.FactorizedReduce.relu", "fewshot_operations.FactorizedReduce.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fewshot_operations.FactorizedReduce.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "y", "=", "self", ".", "pad", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "convs", "[", "0", "]", "(", "x", ")", ",", "self", ".", "convs", "[", "1", "]", "(", "y", "[", ":", ",", ":", ",", "1", ":", ",", "1", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FactorizedReduce.extra_repr": [[252, 254], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.__init__": [[260, 272], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_length", ",", "stride", ",", "padding", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "C_in", ",", "C_out", ",", "(", "1", ",", "kernel_length", ")", ",", "stride", ",", "(", "0", ",", "padding", ")", ",", "bias", "=", "False", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", ",", "(", "kernel_length", ",", "1", ")", ",", "1", ",", "(", "padding", ",", "0", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_out", ",", "affine", "=", "affine", ",", "track_running_stats", "=", "track_running_stats", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.forward": [[274, 276], ["fewshot_operations.FacConv.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.FacConv.extra_repr": [[277, 279], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'C_in={C_in}, C_out={C_out}, stride={stride}'", ".", "format", "(", "**", "self", ".", "__dict__", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.fewshot_operations.drop_path_": [[23, 31], ["torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor().bernoulli_", "x.div_().mul_", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "x.div_", "x.size"], "function", ["None"], ["def", "drop_path_", "(", "x", ",", "drop_prob", ",", "training", ")", ":", "\n", "    ", "if", "training", "and", "drop_prob", ">", "0.0", ":", "\n", "        ", "keep_prob", "=", "1.0", "-", "drop_prob", "\n", "# per data point mask; assuming x in cuda.", "\n", "mask", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", ".", "mul_", "(", "mask", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.SELayer.__init__": [[14, 22], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.SELayer.forward": [[24, 29], ["x.size", "resnet.SELayer.avg_pool().view", "resnet.SELayer.fc().view", "resnet.SELayer.avg_pool", "resnet.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.DropBlock.__init__": [[32, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block_size", ")", ":", "\n", "        ", "super", "(", "DropBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block_size", "=", "block_size", "\n", "#self.gamma = gamma", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.DropBlock.forward": [[39, 54], ["torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "torch.distributions.Bernoulli.sample().cuda", "resnet.DropBlock._compute_block_mask", "resnet.DropBlock.sum", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "torch.distributions.Bernoulli.sample", "resnet.DropBlock.size", "resnet.DropBlock.size", "resnet.DropBlock.size", "resnet.DropBlock.size"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.DropBlock._compute_block_mask"], ["", "def", "forward", "(", "self", ",", "x", ",", "gamma", ")", ":", "\n", "# shape: (bsize, channels, height, width)", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "\n", "bernoulli", "=", "Bernoulli", "(", "gamma", ")", "\n", "mask", "=", "bernoulli", ".", "sample", "(", "(", "batch_size", ",", "channels", ",", "height", "-", "(", "self", ".", "block_size", "-", "1", ")", ",", "width", "-", "(", "self", ".", "block_size", "-", "1", ")", ")", ")", ".", "cuda", "(", ")", "\n", "block_mask", "=", "self", ".", "_compute_block_mask", "(", "mask", ")", "\n", "countM", "=", "block_mask", ".", "size", "(", ")", "[", "0", "]", "*", "block_mask", ".", "size", "(", ")", "[", "1", "]", "*", "block_mask", ".", "size", "(", ")", "[", "2", "]", "*", "block_mask", ".", "size", "(", ")", "[", "3", "]", "\n", "count_ones", "=", "block_mask", ".", "sum", "(", ")", "\n", "\n", "return", "block_mask", "*", "x", "*", "(", "countM", "/", "count_ones", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.DropBlock._compute_block_mask": [[55, 86], ["int", "int", "mask.nonzero", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.stack().t().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "non_zero_idxs.repeat.repeat.repeat", "offsets.long.long.repeat().view", "offsets.long.long.long", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "torch.zeros().cuda().long", "offsets.long.long.long", "offsets.long.long.repeat", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().view().expand().reshape", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "", "def", "_compute_block_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "left_padding", "=", "int", "(", "(", "self", ".", "block_size", "-", "1", ")", "/", "2", ")", "\n", "right_padding", "=", "int", "(", "self", ".", "block_size", "/", "2", ")", "\n", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "mask", ".", "shape", "\n", "#print (\"mask\", mask[0][0])", "\n", "non_zero_idxs", "=", "mask", ".", "nonzero", "(", ")", "\n", "nr_blocks", "=", "non_zero_idxs", ".", "shape", "[", "0", "]", "\n", "\n", "offsets", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "self", ".", "block_size", ",", "self", ".", "block_size", ")", ".", "reshape", "(", "-", "1", ")", ",", "# - left_padding,", "\n", "torch", ".", "arange", "(", "self", ".", "block_size", ")", ".", "repeat", "(", "self", ".", "block_size", ")", ",", "#- left_padding", "\n", "]", "\n", ")", ".", "t", "(", ")", ".", "cuda", "(", ")", "\n", "offsets", "=", "torch", ".", "cat", "(", "(", "torch", ".", "zeros", "(", "self", ".", "block_size", "**", "2", ",", "2", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", ",", "offsets", ".", "long", "(", ")", ")", ",", "1", ")", "\n", "\n", "if", "nr_blocks", ">", "0", ":", "\n", "            ", "non_zero_idxs", "=", "non_zero_idxs", ".", "repeat", "(", "self", ".", "block_size", "**", "2", ",", "1", ")", "\n", "offsets", "=", "offsets", ".", "repeat", "(", "nr_blocks", ",", "1", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "offsets", "=", "offsets", ".", "long", "(", ")", "\n", "\n", "block_idxs", "=", "non_zero_idxs", "+", "offsets", "\n", "#block_idxs += left_padding", "\n", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "padded_mask", "[", "block_idxs", "[", ":", ",", "0", "]", ",", "block_idxs", "[", ":", ",", "1", "]", ",", "block_idxs", "[", ":", ",", "2", "]", ",", "block_idxs", "[", ":", ",", "3", "]", "]", "=", "1.", "\n", "", "else", ":", "\n", "            ", "padded_mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "left_padding", ",", "right_padding", ",", "left_padding", ",", "right_padding", ")", ")", "\n", "\n", "", "block_mask", "=", "1", "-", "padded_mask", "#[:height, :width]", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.BasicBlock.__init__": [[91, 112], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.DropBlock", "resnet.SELayer"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "\n", "block_size", "=", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "stride", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "num_batches_tracked", "=", "0", "\n", "self", ".", "drop_block", "=", "drop_block", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "DropBlock", "=", "DropBlock", "(", "block_size", "=", "self", ".", "block_size", ")", "\n", "self", ".", "use_se", "=", "use_se", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "planes", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.BasicBlock.forward": [[113, 147], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv3", "resnet.BasicBlock.bn3", "resnet.BasicBlock.relu", "resnet.BasicBlock.maxpool", "resnet.BasicBlock.se", "resnet.BasicBlock.downsample", "max", "resnet.BasicBlock.DropBlock", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "use_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "if", "self", ".", "drop_block", "==", "True", ":", "\n", "                ", "feat_size", "=", "out", ".", "size", "(", ")", "[", "2", "]", "\n", "keep_rate", "=", "max", "(", "1.0", "-", "self", ".", "drop_rate", "/", "(", "20", "*", "2000", ")", "*", "(", "self", ".", "num_batches_tracked", ")", ",", "1.0", "-", "self", ".", "drop_rate", ")", "\n", "gamma", "=", "(", "1", "-", "keep_rate", ")", "/", "self", ".", "block_size", "**", "2", "*", "feat_size", "**", "2", "/", "(", "feat_size", "-", "self", ".", "block_size", "+", "1", ")", "**", "2", "\n", "out", "=", "self", ".", "DropBlock", "(", "out", ",", "gamma", "=", "gamma", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "True", ")", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet.__init__": [[151, 183], ["torch.Module.__init__", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "resnet.ResNet.modules", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "n_blocks", ",", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "drop_rate", "=", "0.0", ",", "\n", "dropblock_size", "=", "5", ",", "num_classes", "=", "-", "1", ",", "use_se", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "3", "\n", "self", ".", "use_se", "=", "use_se", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "0", "]", ",", "64", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "1", "]", ",", "160", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "2", "]", ",", "320", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "n_blocks", "[", "3", "]", ",", "640", ",", "\n", "stride", "=", "2", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "True", ",", "block_size", "=", "dropblock_size", ")", "\n", "if", "avg_pool", ":", "\n", "# self.avgpool = nn.AvgPool2d(5, stride=1)", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "self", ".", "keep_prob", "=", "keep_prob", "\n", "self", ".", "keep_avg_pool", "=", "avg_pool", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "1", "-", "self", ".", "keep_prob", ",", "inplace", "=", "False", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'leaky_relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "640", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet._make_layer": [[184, 210], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "n_block", ",", "planes", ",", "stride", "=", "1", ",", "drop_rate", "=", "0.0", ",", "drop_block", "=", "False", ",", "block_size", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "n_block", "==", "1", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "drop_block", ",", "block_size", ",", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "            ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "drop_rate", ",", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "n_block", ")", ":", "\n", "            ", "if", "i", "==", "n_block", "-", "1", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "drop_block", "=", "drop_block", ",", "\n", "block_size", "=", "block_size", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "else", ":", "\n", "                ", "layer", "=", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "drop_rate", "=", "drop_rate", ",", "use_se", "=", "self", ".", "use_se", ")", "\n", "", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.ResNet.forward": [[211, 231], ["resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.view", "resnet.ResNet.avgpool", "resnet.ResNet.size", "resnet.ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f0", "=", "x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "f1", "=", "x", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "f2", "=", "x", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "f3", "=", "x", "\n", "if", "self", ".", "keep_avg_pool", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "x", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "f0", ",", "f1", ",", "f2", ",", "f3", ",", "feat", "]", ",", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.resnet12": [[233, 238], ["resnet.ResNet"], "function", ["None"], ["", "", "", "def", "resnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.resnet18": [[240, 245], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.resnet24": [[247, 252], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.resnet50": [[254, 260], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.resnet101": [[262, 268], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.seresnet12": [[270, 275], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet12", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-12 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.seresnet18": [[277, 282], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet18", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.seresnet24": [[284, 289], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet24", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-24 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.seresnet50": [[291, 297], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet50", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    indeed, only (3 + 4 + 6 + 3) * 3 + 1 = 49 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.resnet.seresnet101": [[299, 305], ["resnet.ResNet"], "function", ["None"], ["", "def", "seresnet101", "(", "keep_prob", "=", "1.0", ",", "avg_pool", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    indeed, only (3 + 4 + 23 + 3) * 3 + 1 = 100 layers\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "keep_prob", "=", "keep_prob", ",", "avg_pool", "=", "avg_pool", ",", "use_se", "=", "True", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.__init__": [[48, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "range", "augment_cnn.AugmentCNN.named_parameters", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "augment_cnn.AugmentCell", "augment_cnn.AugmentCNN.cells.append", "augment_cnn.AugmentCNN.alpha_normal.append", "augment_cnn.AugmentCNN.alpha_reduce.append", "len", "augment_cnn.AuxiliaryHead", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "augment_cnn.AugmentCNN._alphas.append", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "C_in", ",", "\n", "C", ",", "\n", "n_classes", ",", "\n", "n_layers", ",", "\n", "auxiliary", ",", "\n", "genotype", ",", "\n", "stem_multiplier", "=", "3", ",", "\n", "feature_scale_rate", "=", "2", ",", "\n", "reduction_layers", "=", "[", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input_size: size of height and width (assuming height = width)\n            C_in: # of input channels\n            C: # of starting model channels\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "aux_pos", "=", "2", "*", "n_layers", "//", "3", "if", "auxiliary", "else", "-", "1", "\n", "\n", "C_cur", "=", "stem_multiplier", "*", "C", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "C_in", ",", "C_cur", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm2d", "(", "C_cur", ")", "\n", ")", "\n", "\n", "C_pp", ",", "C_p", ",", "C_cur", "=", "C_cur", ",", "C_cur", ",", "C", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction_p", "=", "False", "\n", "\n", "if", "not", "reduction_layers", ":", "\n", "            ", "reduction_layers", "=", "[", "n_layers", "//", "3", ",", "(", "2", "*", "n_layers", ")", "//", "3", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "if", "i", "in", "reduction_layers", ":", "\n", "                ", "C_cur", "*=", "feature_scale_rate", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "                ", "reduction", "=", "False", "\n", "\n", "", "cell", "=", "AugmentCell", "(", "genotype", ",", "C_pp", ",", "C_p", ",", "C_cur", ",", "reduction_p", ",", "reduction", ")", "\n", "reduction_p", "=", "reduction", "\n", "self", ".", "cells", ".", "append", "(", "cell", ")", "\n", "C_cur_out", "=", "C_cur", "*", "len", "(", "cell", ".", "concat", ")", "\n", "C_pp", ",", "C_p", "=", "C_p", ",", "C_cur_out", "\n", "\n", "if", "i", "==", "self", ".", "aux_pos", ":", "\n", "# [!] this auxiliary head is ignored in computing parameter size", "\n", "#     by the name 'aux_head'", "\n", "                ", "self", ".", "aux_head", "=", "AuxiliaryHead", "(", "input_size", "//", "4", ",", "C_p", ",", "n_classes", ")", "\n", "\n", "# self.lastact    = nn.Sequential(nn.BatchNorm2d(C_p), nn.ReLU(inplace=True))", "\n", "", "", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "C_p", ",", "n_classes", ")", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "####### dummy alphas", "\n", "self", ".", "alpha_normal", "=", "nn", ".", "ParameterList", "(", ")", "\n", "self", ".", "alpha_reduce", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "alpha_normal", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "5", ")", ")", ")", "\n", "self", ".", "alpha_reduce", ".", "append", "(", "nn", ".", "Parameter", "(", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "5", ")", ")", ")", "\n", "\n", "# setup alphas list", "\n", "", "self", ".", "_alphas", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"alpha\"", "in", "n", ":", "\n", "                ", "self", ".", "_alphas", ".", "append", "(", "(", "n", ",", "p", ")", ")", "\n", "\n", "", "", "self", ".", "alpha_prune_threshold", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.forward": [[127, 150], ["augment_cnn.AugmentCNN.stem", "enumerate", "augment_cnn.AugmentCNN.gap", "out.view.view.view", "augment_cnn.AugmentCNN.classifier", "out.view.view.size", "cell", "augment_cnn.AugmentCNN.aux_head"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "s0", "=", "s1", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "aux_logits", "=", "None", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "if", "i", "==", "self", ".", "aux_pos", "and", "self", ".", "training", ":", "\n", "                ", "aux_logits", "=", "self", ".", "aux_head", "(", "s1", ")", "\n", "\n", "# out = self.lastact(s1)", "\n", "# out = self.gap(out)", "\n", "\n", "", "", "out", "=", "self", ".", "gap", "(", "s1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "if", "is_feat", ":", "\n", "            ", "return", "[", "out", "]", ",", "logits", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "aux_pos", "==", "-", "1", ":", "# no auxiliary head", "\n", "                ", "return", "logits", "\n", "", "else", ":", "\n", "                ", "return", "logits", ",", "aux_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.drop_path_prob": [[151, 156], ["augment_cnn.AugmentCNN.modules", "isinstance"], "methods", ["None"], ["", "", "", "def", "drop_path_prob", "(", "self", ",", "p", ")", ":", "\n", "        ", "\"\"\" Set drop path probability \"\"\"", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "DropPath_", ")", ":", "\n", "                ", "module", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.weights": [[157, 159], ["augment_cnn.AugmentCNN.parameters"], "methods", ["None"], ["", "", "", "def", "weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.named_weights": [[160, 162], ["augment_cnn.AugmentCNN.named_parameters"], "methods", ["None"], ["", "def", "named_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "named_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.alphas": [[163, 166], ["None"], "methods", ["None"], ["", "def", "alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "p", "\n", "# return None", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.named_alphas": [[168, 171], ["None"], "methods", ["None"], ["", "", "def", "named_alphas", "(", "self", ")", ":", "\n", "        ", "for", "n", ",", "p", "in", "self", ".", "_alphas", ":", "\n", "            ", "yield", "n", ",", "p", "\n", "# return None", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.genotype": [[173, 175], ["None"], "methods", ["None"], ["", "", "def", "genotype", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.loss": [[176, 179], ["augment_cnn.AugmentCNN.forward", "augment_cnn.AugmentCNN.criterion"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet.forward"], ["", "def", "loss", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "logits", "=", "self", ".", "forward", "(", "X", ")", "\n", "return", "self", ".", "criterion", "(", "logits", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCNN.get_sparse_num_params": [[180, 189], ["None"], "methods", ["None"], ["", "def", "get_sparse_num_params", "(", "\n", "self", ",", "alpha_prune_threshold", "=", "0.0", "\n", ")", ":", "# dummy function to not break code", "\n", "        ", "\"\"\"Get number of parameters for sparse one-shot-model (in this case just number of parameters of model)\n\n        Returns:\n            A torch tensor\n        \"\"\"", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AuxiliaryHead.__init__": [[194, 211], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.classifier", "torch.classifier", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "C", ",", "n_classes", ")", ":", "\n", "        ", "\"\"\" assuming input size 7x7 or 8x8 \"\"\"", "\n", "assert", "input_size", "in", "[", "7", ",", "8", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 2x2 out", "\n", "nn", ".", "AvgPool2d", "(", "5", ",", "stride", "=", "input_size", "-", "5", ",", "padding", "=", "0", ",", "count_include_pad", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# 1x1 out", "\n", "nn", ".", "Conv2d", "(", "128", ",", "768", ",", "kernel_size", "=", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "768", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "classifier", "(", "768", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AuxiliaryHead.forward": [[212, 217], ["augment_cnn.AuxiliaryHead.net", "out.view.view.view", "augment_cnn.AuxiliaryHead.classifier", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "net", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flatten", "\n", "logits", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCell.__init__": [[224, 244], ["torch.Module.__init__", "len", "fewshot_operations.StdConv", "augment_cnn.to_dag", "fewshot_operations.FactorizedReduce", "fewshot_operations.StdConv"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.to_dag"], ["def", "__init__", "(", "self", ",", "genotype", ",", "C_pp", ",", "C_p", ",", "C", ",", "reduction_p", ",", "reduction", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "n_nodes", "=", "len", "(", "genotype", ".", "normal", ")", "\n", "\n", "if", "reduction_p", ":", "\n", "            ", "self", ".", "preproc0", "=", "FactorizedReduce", "(", "C_in", "=", "C_pp", ",", "C_out", "=", "C", ",", "stride", "=", "2", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "preproc0", "=", "StdConv", "(", "C_pp", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "", "self", ".", "preproc1", "=", "StdConv", "(", "C_p", ",", "C", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "# generate dag", "\n", "if", "reduction", ":", "\n", "            ", "gene", "=", "genotype", ".", "reduce", "\n", "self", ".", "concat", "=", "genotype", ".", "reduce_concat", "\n", "", "else", ":", "\n", "            ", "gene", "=", "genotype", ".", "normal", "\n", "self", ".", "concat", "=", "genotype", ".", "normal_concat", "\n", "\n", "", "self", ".", "dag", "=", "to_dag", "(", "C", ",", "gene", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.AugmentCell.forward": [[245, 257], ["augment_cnn.AugmentCell.preproc0", "augment_cnn.AugmentCell.preproc1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "states.append", "op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ")", ":", "\n", "        ", "s0", "=", "self", ".", "preproc0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preproc1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "edges", "in", "self", ".", "dag", ":", "\n", "            ", "s_cur", "=", "sum", "(", "op", "(", "states", "[", "op", ".", "s_idx", "]", ")", "for", "op", "in", "edges", ")", "\n", "states", ".", "append", "(", "s_cur", ")", "\n", "\n", "", "s_out", "=", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "concat", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "s_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.augment_cnn.to_dag": [[28, 44], ["torch.ModuleList", "torch.ModuleList", "nn.ModuleList.append", "nn.ModuleList.append", "isinstance", "torch.Sequential", "fewshot_operations.DropPath_"], "function", ["None"], ["def", "to_dag", "(", "C_in", ",", "gene", ",", "reduction", ")", ":", "\n", "    ", "\"\"\" generate discrete ops from gene \"\"\"", "\n", "dag", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "edges", "in", "gene", ":", "\n", "        ", "row", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "op_name", ",", "s_idx", "in", "edges", ":", "\n", "# reduction cell & from input nodes => stride = 2", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "s_idx", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "op_name", "]", "(", "C_in", ",", "C_in", ",", "stride", ",", "True", ",", "True", ")", "\n", "if", "not", "isinstance", "(", "op", ",", "Identity", ")", ":", "# Identity does not use drop path", "\n", "                ", "op", "=", "nn", ".", "Sequential", "(", "op", ",", "DropPath_", "(", ")", ")", "\n", "", "op", ".", "s_idx", "=", "s_idx", "\n", "row", ".", "append", "(", "op", ")", "\n", "", "dag", ".", "append", "(", "row", ")", "\n", "\n", "", "return", "dag", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.create_model": [[10, 49], ["name.endswith", "name.endswith", "name.startswith", "NotImplementedError", "print", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "name.startswith", "NotImplementedError", "name.startswith", "name.startswith", "eval", "eval", "NotImplementedError"], "function", ["None"], ["def", "create_model", "(", "name", ",", "n_cls", ",", "dataset", "=", "'miniImageNet'", ",", "args", "=", "None", ")", ":", "\n", "    ", "\"\"\"create model by name\"\"\"", "\n", "if", "dataset", "==", "'miniImageNet'", "or", "dataset", "==", "'tieredImageNet'", ":", "\n", "        ", "if", "name", ".", "endswith", "(", "'v2'", ")", "or", "name", ".", "endswith", "(", "'v3'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'resnet50'", ")", ":", "\n", "            ", "print", "(", "'use imagenet-style resnet50'", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'resnet'", ")", "or", "name", ".", "startswith", "(", "'seresnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "avg_pool", "=", "True", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "5", ",", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'wrn'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", "==", "'convnet4small'", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ",", "hidden_size", "=", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'convnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'dartsmodel'", ")", ":", "\n", "            ", "assert", "args", "is", "not", "None", "\n", "assert", "args", ".", "genotype", "!=", "''", "\n", "genotype", "=", "eval", "(", "args", ".", "genotype", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "args", ",", "args", ".", "init_channels", ",", "n_cls", ",", "args", ".", "layers", ",", "criterion", "=", "None", ",", "auxiliary", "=", "None", ",", "genotype", "=", "genotype", ")", "\n", "", "elif", "name", "==", "'augmentcnn'", ":", "\n", "            ", "assert", "args", "is", "not", "None", "\n", "assert", "args", ".", "genotype", "!=", "''", "\n", "genotype", "=", "eval", "(", "args", ".", "genotype", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "input_size", "=", "args", ".", "input_size", ",", "C_in", "=", "args", ".", "n_input_channels", ",", "C", "=", "args", ".", "init_channels", ",", "n_classes", "=", "n_cls", ",", "n_layers", "=", "args", ".", "layers", ",", "auxiliary", "=", "False", ",", "genotype", "=", "genotype", ",", "stem_multiplier", "=", "args", ".", "aug_stemm", ",", "feature_scale_rate", "=", "args", ".", "aug_fsr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'model {} not supported in dataset {}:'", ".", "format", "(", "name", ",", "dataset", ")", ")", "\n", "", "", "elif", "dataset", "==", "'CIFAR-FS'", "or", "dataset", "==", "'FC100'", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'resnet'", ")", "or", "name", ".", "startswith", "(", "'seresnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "avg_pool", "=", "True", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "2", ",", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'convnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'model {} not supported in dataset {}:'", ".", "format", "(", "name", ",", "dataset", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'dataset not supported: {}'", ".", "format", "(", "dataset", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.count_params": [[50, 52], ["sum", "p.numel", "net.parameters"], "function", ["None"], ["", "def", "count_params", "(", "net", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.util.get_teacher_name": [[53, 63], ["[].split", "segments[].split", "model_path.split"], "function", ["None"], ["", "def", "get_teacher_name", "(", "model_path", ")", ":", "\n", "    ", "\"\"\"parse to get teacher model name\"\"\"", "\n", "segments", "=", "model_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", ".", "split", "(", "'_'", ")", "\n", "if", "':'", "in", "segments", "[", "0", "]", ":", "\n", "        ", "return", "segments", "[", "0", "]", ".", "split", "(", "':'", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "if", "segments", "[", "0", "]", "!=", "'wrn'", ":", "\n", "            ", "return", "segments", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "segments", "[", "0", "]", "+", "'_'", "+", "segments", "[", "1", "]", "+", "'_'", "+", "segments", "[", "2", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.wide_basic.__init__": [[26, 38], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.wide_basic.forward": [[40, 46], ["wresnet.wide_basic.dropout", "wresnet.wide_basic.conv2", "wresnet.wide_basic.shortcut", "wresnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wresnet.wide_basic.bn2", "wresnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet.__init__": [[49, 69], ["torch.Module.__init__", "print", "wresnet.conv3x3", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "wresnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "k", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet._wide_layer": [[70, 79], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.Wide_ResNet.forward": [[80, 96], ["wresnet.Wide_ResNet.conv1", "wresnet.Wide_ResNet.layer1", "wresnet.Wide_ResNet.layer2", "wresnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "wresnet.Wide_ResNet.view", "wresnet.Wide_ResNet.bn1", "wresnet.Wide_ResNet.size", "wresnet.Wide_ResNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "is_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat", "=", "out", "\n", "if", "self", ".", "num_classes", ">", "0", ":", "\n", "            ", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "", "if", "is_feat", ":", "\n", "            ", "return", "[", "feat", "]", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv3x3": [[11, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.conv_init": [[15, 23], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.rfs_models.wresnet.wrn_28_10": [[98, 100], ["wresnet.Wide_ResNet"], "function", ["None"], ["", "", "", "def", "wrn_28_10", "(", "dropout_rate", "=", "0.3", ",", "num_classes", "=", "-", "1", ")", ":", "\n", "    ", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "dropout_rate", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.mean_confidence_interval": [[19, 25], ["len", "numpy.array", "numpy.mean", "scipy.stats.sem", "scipy.stats.t._ppf"], "function", ["None"], ["def", "mean_confidence_interval", "(", "data", ",", "confidence", "=", "0.95", ")", ":", "\n", "    ", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "n", "=", "len", "(", "a", ")", "\n", "m", ",", "se", "=", "np", ".", "mean", "(", "a", ")", ",", "scipy", ".", "stats", ".", "sem", "(", "a", ")", "\n", "h", "=", "se", "*", "t", ".", "_ppf", "(", "(", "1", "+", "confidence", ")", "/", "2.", ",", "n", "-", "1", ")", "\n", "return", "m", ",", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.normalize": [[27, 31], ["x.pow().sum().pow", "x.div", "x.pow().sum", "x.pow"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "    ", "norm", "=", "x", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "pow", "(", "1.", "/", "2", ")", "\n", "out", "=", "x", ".", "div", "(", "norm", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.meta_test": [[33, 94], ["net.eval.eval", "meta_eval.mean_confidence_interval", "torch.no_grad", "tqdm.tqdm", "enumerate", "support_xs.view.cuda", "query_xs.view.cuda", "support_xs.view.size", "support_xs.view.view", "query_xs.view.view", "normalize.detach().cpu().numpy", "normalize.detach().cpu().numpy", "support_ys.view().numpy.view().numpy", "query_ys.view().numpy.view().numpy", "acc.append", "net.eval.view", "net.eval.view", "net.eval.", "feat_support[].view", "net.eval.", "feat_query[].view", "meta_eval.normalize", "meta_eval.normalize", "sklearn.linear_model.LogisticRegression", "sklearn.pipeline.make_pipeline.fit", "sklearn.pipeline.make_pipeline.predict", "sklearn.metrics.accuracy_score", "support_xs.view.size", "query_xs.view.size", "support_xs.view.size", "query_xs.view.size", "normalize.detach().cpu", "normalize.detach().cpu", "support_ys.view().numpy.view", "query_ys.view().numpy.view", "sklearn.pipeline.make_pipeline", "sklearn.pipeline.make_pipeline.fit", "sklearn.pipeline.make_pipeline.predict", "net.eval.", "net.eval.", "sklearn.preprocessing.StandardScaler", "sklearn.svm.SVC", "meta_eval.NN", "normalize.detach", "normalize.detach", "meta_eval.Cosine", "meta_eval.Proto", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.mean_confidence_interval", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.normalize", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.NN", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.Cosine", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.Proto"], ["", "def", "meta_test", "(", "net", ",", "testloader", ",", "use_logit", "=", "True", ",", "is_norm", "=", "True", ",", "classifier", "=", "'LR'", ",", "opt", "=", "None", ",", "C", "=", "1.0", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "acc", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "data", "in", "tqdm", "(", "enumerate", "(", "testloader", ")", ")", ":", "\n", "            ", "support_xs", ",", "support_ys", ",", "query_xs", ",", "query_ys", "=", "data", "\n", "support_xs", "=", "support_xs", ".", "cuda", "(", ")", "\n", "query_xs", "=", "query_xs", ".", "cuda", "(", ")", "\n", "batch_size", ",", "_", ",", "channel", ",", "height", ",", "width", "=", "support_xs", ".", "size", "(", ")", "\n", "support_xs", "=", "support_xs", ".", "view", "(", "-", "1", ",", "channel", ",", "height", ",", "width", ")", "\n", "query_xs", "=", "query_xs", ".", "view", "(", "-", "1", ",", "channel", ",", "height", ",", "width", ")", "\n", "\n", "if", "use_logit", ":", "\n", "                ", "support_features", "=", "net", "(", "support_xs", ")", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "query_features", "=", "net", "(", "query_xs", ")", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "feat_support", ",", "_", "=", "net", "(", "support_xs", ",", "is_feat", "=", "True", ")", "\n", "support_features", "=", "feat_support", "[", "-", "1", "]", ".", "view", "(", "support_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "feat_query", ",", "_", "=", "net", "(", "query_xs", ",", "is_feat", "=", "True", ")", "\n", "query_features", "=", "feat_query", "[", "-", "1", "]", ".", "view", "(", "query_xs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "if", "is_norm", ":", "\n", "                ", "support_features", "=", "normalize", "(", "support_features", ")", "\n", "query_features", "=", "normalize", "(", "query_features", ")", "\n", "\n", "", "support_features", "=", "support_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "query_features", "=", "query_features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "support_ys", "=", "support_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "query_ys", "=", "query_ys", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", "\n", "\n", "#  clf = SVC(gamma='auto', C=0.1)", "\n", "if", "classifier", "==", "'LR'", ":", "\n", "                ", "clf", "=", "LogisticRegression", "(", "penalty", "=", "'l2'", ",", "\n", "random_state", "=", "0", ",", "\n", "C", "=", "C", ",", "\n", "solver", "=", "'lbfgs'", ",", "\n", "max_iter", "=", "1000", ",", "\n", "multi_class", "=", "'multinomial'", ")", "\n", "clf", ".", "fit", "(", "support_features", ",", "support_ys", ")", "\n", "query_ys_pred", "=", "clf", ".", "predict", "(", "query_features", ")", "\n", "", "elif", "classifier", "==", "'SVM'", ":", "\n", "                ", "clf", "=", "make_pipeline", "(", "StandardScaler", "(", ")", ",", "SVC", "(", "gamma", "=", "'auto'", ",", "\n", "C", "=", "1", ",", "\n", "kernel", "=", "'linear'", ",", "\n", "decision_function_shape", "=", "'ovr'", ")", ")", "\n", "clf", ".", "fit", "(", "support_features", ",", "support_ys", ")", "\n", "query_ys_pred", "=", "clf", ".", "predict", "(", "query_features", ")", "\n", "", "elif", "classifier", "==", "'NN'", ":", "\n", "                ", "query_ys_pred", "=", "NN", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "elif", "classifier", "==", "'Cosine'", ":", "\n", "                ", "query_ys_pred", "=", "Cosine", "(", "support_features", ",", "support_ys", ",", "query_features", ")", "\n", "", "elif", "classifier", "==", "'Proto'", ":", "\n", "                ", "query_ys_pred", "=", "Proto", "(", "support_features", ",", "support_ys", ",", "query_features", ",", "opt", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'classifier not supported: {}'", ".", "format", "(", "classifier", ")", ")", "\n", "\n", "", "acc", ".", "append", "(", "metrics", ".", "accuracy_score", "(", "query_ys", ",", "query_ys_pred", ")", ")", "\n", "\n", "", "", "return", "mean_confidence_interval", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.Proto": [[96, 107], ["numpy.reshape", "support.mean.mean", "numpy.reshape", "numpy.argmax", "numpy.reshape"], "function", ["None"], ["", "def", "Proto", "(", "support", ",", "support_ys", ",", "query", ",", "opt", ")", ":", "\n", "    ", "\"\"\"Protonet classifier\"\"\"", "\n", "nc", "=", "support", ".", "shape", "[", "-", "1", "]", "\n", "support", "=", "np", ".", "reshape", "(", "support", ",", "(", "-", "1", ",", "1", ",", "opt", ".", "n_ways", ",", "opt", ".", "n_shots", ",", "nc", ")", ")", "\n", "support", "=", "support", ".", "mean", "(", "axis", "=", "3", ")", "\n", "batch_size", "=", "support", ".", "shape", "[", "0", "]", "\n", "query", "=", "np", ".", "reshape", "(", "query", ",", "(", "batch_size", ",", "-", "1", ",", "1", ",", "nc", ")", ")", "\n", "logits", "=", "-", "(", "(", "query", "-", "support", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "pred", "=", "np", ".", "reshape", "(", "pred", ",", "(", "-", "1", ",", ")", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.NN": [[109, 119], ["numpy.expand_dims", "numpy.expand_dims", "numpy.multiply", "np.multiply.sum", "numpy.argmin", "np.expand_dims.transpose"], "function", ["None"], ["", "def", "NN", "(", "support", ",", "support_ys", ",", "query", ")", ":", "\n", "    ", "\"\"\"nearest classifier\"\"\"", "\n", "support", "=", "np", ".", "expand_dims", "(", "support", ".", "transpose", "(", ")", ",", "0", ")", "\n", "query", "=", "np", ".", "expand_dims", "(", "query", ",", "2", ")", "\n", "\n", "diff", "=", "np", ".", "multiply", "(", "query", "-", "support", ",", "query", "-", "support", ")", "\n", "distance", "=", "diff", ".", "sum", "(", "1", ")", "\n", "min_idx", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "1", ")", "\n", "pred", "=", "[", "support_ys", "[", "idx", "]", "for", "idx", "in", "min_idx", "]", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.meta_eval.Cosine": [[121, 132], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.argmax", "support.transpose"], "function", ["None"], ["", "def", "Cosine", "(", "support", ",", "support_ys", ",", "query", ")", ":", "\n", "    ", "\"\"\"Cosine classifier\"\"\"", "\n", "support_norm", "=", "np", ".", "linalg", ".", "norm", "(", "support", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "support", "=", "support", "/", "support_norm", "\n", "query_norm", "=", "np", ".", "linalg", ".", "norm", "(", "query", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "query", "=", "query", "/", "query_norm", "\n", "\n", "cosine_distance", "=", "query", "@", "support", ".", "transpose", "(", ")", "\n", "max_idx", "=", "np", ".", "argmax", "(", "cosine_distance", ",", "axis", "=", "1", ")", "\n", "pred", "=", "[", "support_ys", "[", "idx", "]", "for", "idx", "in", "max_idx", "]", "\n", "return", "pred", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.cls_eval.validate": [[10, 58], ["logging.getLogger", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "util.AverageMeter", "model.eval", "torch.no_grad", "time.time", "enumerate", "logging.getLogger.info", "input.cuda.float", "torch.cuda.is_available", "model", "criterion", "util.accuracy", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "util.AverageMeter.update", "time.time", "input.cuda.cuda", "target.cuda.cuda", "criterion.item", "input.cuda.size", "input.cuda.size", "input.cuda.size", "logging.getLogger.info", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.accuracy", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update", "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update"], ["def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "opt", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\"\"\"One epoch validation\"\"\"", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "idx", ",", "(", "input", ",", "target", ",", "_", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "            ", "input", "=", "input", ".", "float", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "print_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'Test: [{0}/{1}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Acc@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "idx", ",", "len", "(", "val_loader", ")", ",", "batch_time", "=", "batch_time", ",", "loss", "=", "losses", ",", "\n", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", ",", "losses", ".", "avg", "\n", "", ""]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.__init__": [[7, 9], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.reset"], ["\n", "Genotype", "=", "namedtuple", "(", "'Genotype'", ",", "'normal normal_concat reduce reduce_concat'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["def", "create_model", "(", "name", ",", "n_cls", ",", "dataset", "=", "'miniImageNet'", ",", "args", "=", "None", ")", ":", "\n", "    ", "\"\"\"create model by name\"\"\"", "\n", "if", "dataset", "==", "'miniImageNet'", "or", "dataset", "==", "'tieredImageNet'", ":", "\n", "        ", "if", "name", ".", "endswith", "(", "'v2'", ")", "or", "name", ".", "endswith", "(", "'v3'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'resnet50'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["            ", "print", "(", "'use imagenet-style resnet50'", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'resnet'", ")", "or", "name", ".", "startswith", "(", "'seresnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "avg_pool", "=", "True", ",", "drop_rate", "=", "0.1", ",", "dropblock_size", "=", "5", ",", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'wrn'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n"]], "home.repos.pwc.inspect_result.yitewang_metantk-nas.eval.util.accuracy": [[23, 38], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].contiguous().view().float().sum", "res.append", "correct[].contiguous().view().float().sum.mul_", "target.view", "correct[].contiguous().view().float", "correct[].contiguous().view", "correct[].contiguous"], "function", ["None"], ["            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ",", "hidden_size", "=", "32", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'convnet'", ")", ":", "\n", "            ", "model", "=", "model_dict", "[", "name", "]", "(", "num_classes", "=", "n_cls", ")", "\n", "", "elif", "name", ".", "startswith", "(", "'dartsmodel'", ")", ":", "\n", "            ", "assert", "args", "is", "not", "None", "\n", "assert", "args", ".", "genotype", "!=", "''", "\n", "genotype", "=", "eval", "(", "args", ".", "genotype", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "args", ",", "args", ".", "init_channels", ",", "n_cls", ",", "args", ".", "layers", ",", "criterion", "=", "None", ",", "auxiliary", "=", "None", ",", "genotype", "=", "genotype", ")", "\n", "", "elif", "name", "==", "'augmentcnn'", ":", "\n", "            ", "assert", "args", "is", "not", "None", "\n", "assert", "args", ".", "genotype", "!=", "''", "\n", "genotype", "=", "eval", "(", "args", ".", "genotype", ")", "\n", "model", "=", "model_dict", "[", "name", "]", "(", "input_size", "=", "args", ".", "input_size", ",", "C_in", "=", "args", ".", "n_input_channels", ",", "C", "=", "args", ".", "init_channels", ",", "n_classes", "=", "n_cls", ",", "n_layers", "=", "args", ".", "layers", ",", "auxiliary", "=", "False", ",", "genotype", "=", "genotype", ",", "stem_multiplier", "=", "args", ".", "aug_stemm", ",", "feature_scale_rate", "=", "args", ".", "aug_fsr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'model {} not supported in dataset {}:'", ".", "format", "(", "name", ",", "dataset", ")", ")", "\n", "", "", "elif", "dataset", "==", "'CIFAR-FS'", "or", "dataset", "==", "'FC100'", ":", "\n"]]}