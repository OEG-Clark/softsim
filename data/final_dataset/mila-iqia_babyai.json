{"home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.DisappearedBoxError.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.DisappearedBoxError.__str__": [[15, 17], ["repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.__init__": [[38, 46], ["bot.Subgoal.update_agent_attributes"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.update_agent_attributes"], ["def", "__init__", "(", "self", ",", "bot", "=", "None", ",", "datum", "=", "None", ",", "reason", "=", "None", ")", ":", "\n", "        ", "self", ".", "bot", "=", "bot", "\n", "self", ".", "datum", "=", "datum", "\n", "self", ".", "reason", "=", "reason", "\n", "\n", "self", ".", "update_agent_attributes", "(", ")", "\n", "\n", "self", ".", "actions", "=", "self", ".", "bot", ".", "mission", ".", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.__repr__": [[47, 57], ["type"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Mainly for debugging purposes\"\"\"", "\n", "representation", "=", "'('", "\n", "representation", "+=", "type", "(", "self", ")", ".", "__name__", "\n", "if", "self", ".", "datum", "is", "not", "None", ":", "\n", "            ", "representation", "+=", "': {}'", ".", "format", "(", "self", ".", "datum", ")", "\n", "", "if", "self", ".", "reason", "is", "not", "None", ":", "\n", "            ", "representation", "+=", "', reason: {}'", ".", "format", "(", "self", ".", "reason", ")", "\n", "", "representation", "+=", "')'", "\n", "return", "representation", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.update_agent_attributes": [[58, 66], ["bot.Subgoal.bot.mission.grid.get"], "methods", ["None"], ["", "def", "update_agent_attributes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Should be called at each step before the replanning methods.\"\"\"", "\n", "self", ".", "pos", "=", "self", ".", "bot", ".", "mission", ".", "agent_pos", "\n", "self", ".", "dir_vec", "=", "self", ".", "bot", ".", "mission", ".", "dir_vec", "\n", "self", ".", "right_vec", "=", "self", ".", "bot", ".", "mission", ".", "right_vec", "\n", "self", ".", "fwd_pos", "=", "self", ".", "pos", "+", "self", ".", "dir_vec", "\n", "self", ".", "fwd_cell", "=", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "self", ".", "fwd_pos", ")", "\n", "self", ".", "carrying", "=", "self", ".", "bot", ".", "mission", ".", "carrying", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.replan_before_action": [[67, 86], ["NotImplementedError"], "methods", ["None"], ["", "def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "\"\"\"Change the plan if needed and return a suggested action.\n\n        This method is called at every iteration for the top-most subgoal\n        from the stack. It is supposed to return a suggested action if\n        it is clear how to proceed towards achieving the current subgoal.\n        If the subgoal is already achieved, or if it is not clear how it\n        can be achieved, or if is clear that a better plan exists,\n        this method can replan by pushing new subgoals\n        from the stack or popping the top one.\n\n        Returns:\n        -------\n        action : object\n            A suggection action if known, `None` the stack has been altered\n            and further replanning is required.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.replan_after_action": [[88, 98], ["None"], "methods", ["None"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "\"\"\"Change the plan when the taken action is known.\n\n        The action actually taken by the agent can be different from the one\n        suggested by `replan_before_action` is the bot can be used in\n        advising mode. This method is supposed to adjust the plan in the view\n        of the actual action taken.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.is_exploratory": [[100, 108], ["None"], "methods", ["None"], ["", "def", "is_exploratory", "(", "self", ")", ":", "\n", "        ", "\"\"\"Whether the subgoal is exploratory or not.\n\n        Exploratory subgoals can be removed from the stack by the bot, e.g.\n        when no more exploration is required.\n\n        \"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action": [[109, 137], ["np.array_equal", "bot.Subgoal.bot.stack.append", "bot.Subgoal.bot.stack.append", "bot.GoNextToSubgoal", "bot.GoNextToSubgoal", "bot.Subgoal.bot.stack.append", "bot.GoNextToSubgoal", "bot.Subgoal.bot.stack.append", "bot.PickupSubgoal", "bot.Subgoal.bot.mission.grid.get", "bot.Subgoal.bot.stack.append", "bot.DropSubgoal", "bot.Subgoal.bot.mission.grid.get", "bot.Subgoal.bot.stack.append", "bot.CloseSubgoal", "bot.OpenSubgoal"], "methods", ["None"], ["", "def", "_plan_undo_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "\"\"\"Plan how to undo the taken action.\"\"\"", "\n", "if", "action_taken", "==", "self", ".", "actions", ".", "forward", ":", "\n", "# check if the 'forward' action was succesful", "\n", "            ", "if", "not", "np", ".", "array_equal", "(", "self", ".", "bot", ".", "prev_agent_pos", ",", "self", ".", "pos", ")", ":", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "self", ".", "pos", ")", ")", "\n", "", "", "elif", "action_taken", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "old_fwd_pos", "=", "self", ".", "pos", "+", "self", ".", "right_vec", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "self", ".", "pos", "+", "self", ".", "right_vec", ")", ")", "\n", "", "elif", "action_taken", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "old_fwd_pos", "=", "self", ".", "pos", "-", "self", ".", "right_vec", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "self", ".", "pos", "-", "self", ".", "right_vec", ")", ")", "\n", "", "elif", "action_taken", "==", "self", ".", "actions", ".", "drop", "and", "self", ".", "bot", ".", "prev_carrying", "!=", "self", ".", "carrying", ":", "\n", "# get that thing back, if dropping was succesful", "\n", "            ", "assert", "self", ".", "fwd_cell", ".", "type", "in", "(", "'key'", ",", "'box'", ",", "'ball'", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "", "elif", "action_taken", "==", "self", ".", "actions", ".", "pickup", "and", "self", ".", "bot", ".", "prev_carrying", "!=", "self", ".", "carrying", ":", "\n", "# drop that thing where you found it", "\n", "            ", "fwd_cell", "=", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "self", ".", "fwd_pos", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "", "elif", "action_taken", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "# if you opened or closed a door, bring it back in the original state", "\n", "            ", "fwd_cell", "=", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "self", ".", "fwd_pos", ")", "\n", "if", "(", "fwd_cell", "and", "fwd_cell", ".", "type", "==", "'door'", "\n", "and", "self", ".", "bot", ".", "fwd_door_was_open", "!=", "fwd_cell", ".", "is_open", ")", ":", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "append", "(", "CloseSubgoal", "(", "self", ".", "bot", ")", "\n", "if", "fwd_cell", ".", "is_open", "\n", "else", "OpenSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.CloseSubgoal.replan_before_action": [[141, 146], ["None"], "methods", ["None"], ["    ", "def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "fwd_cell", "is", "not", "None", ",", "'Forward cell is empty'", "\n", "assert", "self", ".", "fwd_cell", ".", "type", "==", "'door'", ",", "'Forward cell has to be a door'", "\n", "assert", "self", ".", "fwd_cell", ".", "is_open", ",", "'Forward door must be open'", "\n", "return", "self", ".", "actions", ".", "toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.CloseSubgoal.replan_after_action": [[147, 152], ["bot.CloseSubgoal.bot.stack.pop", "bot.CloseSubgoal._plan_undo_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "if", "action_taken", "is", "None", "or", "action_taken", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "", "elif", "action_taken", "in", "[", "self", ".", "actions", ".", "forward", ",", "self", ".", "actions", ".", "left", ",", "self", ".", "actions", ".", "right", "]", ":", "\n", "            ", "self", ".", "_plan_undo_action", "(", "action_taken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.OpenSubgoal.replan_before_action": [[170, 234], ["babyai.levels.verifier.ObjDesc", "babyai.levels.verifier.ObjDesc.find_matching_objs", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.pop", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.pop", "bot.OpenSubgoal.bot._find_drop_pos", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.pop", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.CloseSubgoal", "bot.OpenSubgoal", "bot.PickupSubgoal", "bot.GoNextToSubgoal", "bot.OpenSubgoal", "bot.GoNextToSubgoal", "bot.PickupSubgoal", "bot.GoNextToSubgoal", "bot.DropSubgoal", "bot.GoNextToSubgoal", "bot.OpenSubgoal", "bot.GoNextToSubgoal", "bot.PickupSubgoal", "bot.GoNextToSubgoal", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._find_drop_pos"], ["def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "fwd_cell", "is", "not", "None", ",", "'Forward cell is empty'", "\n", "assert", "self", ".", "fwd_cell", ".", "type", "==", "'door'", ",", "'Forward cell has to be a door'", "\n", "\n", "# If the door is locked, go find the key and then return", "\n", "# TODO: do we really need to be in front of the locked door", "\n", "# to realize that we need the key for it ?", "\n", "got_the_key", "=", "(", "self", ".", "carrying", "and", "self", ".", "carrying", ".", "type", "==", "'key'", "\n", "and", "self", ".", "carrying", ".", "color", "==", "self", ".", "fwd_cell", ".", "color", ")", "\n", "if", "(", "self", ".", "fwd_cell", ".", "is_locked", "and", "not", "got_the_key", ")", ":", "\n", "# Find the key", "\n", "            ", "key_desc", "=", "ObjDesc", "(", "'key'", ",", "self", ".", "fwd_cell", ".", "color", ")", "\n", "key_desc", ".", "find_matching_objs", "(", "self", ".", "bot", ".", "mission", ")", "\n", "\n", "# If we're already carrying something", "\n", "if", "self", ".", "carrying", ":", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "\n", "# Find a location to drop what we're already carrying", "\n", "drop_pos_cur", "=", "self", ".", "bot", ".", "_find_drop_pos", "(", ")", "\n", "\n", "# Take back the object being carried", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos_cur", ")", ")", "\n", "\n", "# Go back to the door and open it", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "tuple", "(", "self", ".", "fwd_pos", ")", ")", ")", "\n", "\n", "# Go to the key and pick it up", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "key_desc", ")", ")", "\n", "\n", "# Drop the object being carried", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos_cur", ")", ")", "\n", "", "else", ":", "\n", "# This branch is will be used very rarely, given that", "\n", "# GoNextToSubGoal(..., reason='Open') should plan", "\n", "# going to the key before we get to stand right in front of a door.", "\n", "# But the agent can be spawned right in front of a open door,", "\n", "# for which we case we do need this code.", "\n", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "\n", "# Go back to the door and open it", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "tuple", "(", "self", ".", "fwd_pos", ")", ")", ")", "\n", "\n", "# Go to the key and pick it up", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "key_desc", ")", ")", "\n", "", "return", "\n", "\n", "", "if", "self", ".", "fwd_cell", ".", "is_open", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "append", "(", "CloseSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "fwd_cell", ".", "is_locked", "and", "self", ".", "reason", "is", "None", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ".", "bot", ",", "reason", "=", "'Unlock'", ")", ")", "\n", "return", "\n", "\n", "", "return", "self", ".", "actions", ".", "toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.OpenSubgoal.replan_after_action": [[235, 248], ["bot.OpenSubgoal.bot.stack.pop", "bot.OpenSubgoal._plan_undo_action", "bot.OpenSubgoal.bot._find_drop_pos", "bot.OpenSubgoal.bot.stack.append", "bot.OpenSubgoal.bot.stack.append", "bot.DropSubgoal", "bot.GoNextToSubgoal"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._find_drop_pos"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "if", "action_taken", "is", "None", "or", "action_taken", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "if", "self", ".", "reason", "==", "'Unlock'", ":", "\n", "# The reason why this has to be planned after the action is taken", "\n", "# is because if the position for dropping is chosen in advance,", "\n", "# then by the time the key is dropped there, it might already", "\n", "# be occupied.", "\n", "                ", "drop_key_pos", "=", "self", ".", "bot", ".", "_find_drop_pos", "(", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_key_pos", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_plan_undo_action", "(", "action_taken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.DropSubgoal.replan_before_action": [[252, 256], ["None"], "methods", ["None"], ["    ", "def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "bot", ".", "mission", ".", "carrying", "\n", "assert", "not", "self", ".", "fwd_cell", "\n", "return", "self", ".", "actions", ".", "drop", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.DropSubgoal.replan_after_action": [[257, 262], ["bot.DropSubgoal.bot.stack.pop", "bot.DropSubgoal._plan_undo_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "if", "action_taken", "is", "None", "or", "action_taken", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "", "elif", "action_taken", "in", "[", "self", ".", "actions", ".", "forward", ",", "self", ".", "actions", ".", "left", ",", "self", ".", "actions", ".", "right", "]", ":", "\n", "            ", "self", ".", "_plan_undo_action", "(", "action_taken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.PickupSubgoal.replan_before_action": [[266, 269], ["None"], "methods", ["None"], ["    ", "def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "bot", ".", "mission", ".", "carrying", "\n", "return", "self", ".", "actions", ".", "pickup", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.PickupSubgoal.replan_after_action": [[270, 275], ["bot.PickupSubgoal.bot.stack.pop", "bot.PickupSubgoal._plan_undo_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "if", "action_taken", "is", "None", "or", "action_taken", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "", "elif", "action_taken", "in", "[", "self", ".", "actions", ".", "left", ",", "self", ".", "actions", ".", "right", "]", ":", "\n", "            ", "self", ".", "_plan_undo_action", "(", "action_taken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.GoNextToSubgoal.replan_before_action": [[295, 443], ["isinstance", "bot.GoNextToSubgoal.bot._shortest_path", "np.array_equal", "np.array_equal", "bot.GoNextToSubgoal.bot._closest_wall_or_door_given_dir", "bot.GoNextToSubgoal.bot._closest_wall_or_door_given_dir", "bot.GoNextToSubgoal.bot._find_obj_pos", "isinstance", "babyai.levels.verifier.ObjDesc", "babyai.levels.verifier.ObjDesc.find_matching_objs", "bot.manhattan_distance", "bot.GoNextToSubgoal.replan_before_action.steppable"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._closest_wall_or_door_given_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._closest_wall_or_door_given_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._find_obj_pos", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.manhattan_distance"], ["def", "replan_before_action", "(", "self", ")", ":", "\n", "        ", "target_obj", "=", "None", "\n", "if", "isinstance", "(", "self", ".", "datum", ",", "ObjDesc", ")", ":", "\n", "            ", "target_obj", ",", "target_pos", "=", "self", ".", "bot", ".", "_find_obj_pos", "(", "self", ".", "datum", ",", "self", ".", "reason", "==", "'PutNext'", ")", "\n", "if", "not", "target_pos", ":", "\n", "# No path found -> Explore the world", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "append", "(", "ExploreSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "return", "\n", "", "", "elif", "isinstance", "(", "self", ".", "datum", ",", "WorldObj", ")", ":", "\n", "            ", "target_obj", "=", "self", ".", "datum", "\n", "target_pos", "=", "target_obj", ".", "cur_pos", "\n", "", "else", ":", "\n", "            ", "target_pos", "=", "tuple", "(", "self", ".", "datum", ")", "\n", "\n", "# Suppore we are walking towards the door that we would like to open,", "\n", "# it is locked, and we don't have the key. What do we do? If we are carrying", "\n", "# something, it makes to just continue, as we still need to bring this object", "\n", "# close to the door. If we are not carrying anything though, then it makes", "\n", "# sense to change the plan and go straight for the required key.", "\n", "", "if", "(", "self", ".", "reason", "==", "'Open'", "\n", "and", "target_obj", "and", "target_obj", ".", "type", "==", "'door'", "and", "target_obj", ".", "is_locked", ")", ":", "\n", "            ", "key_desc", "=", "ObjDesc", "(", "'key'", ",", "target_obj", ".", "color", ")", "\n", "key_desc", ".", "find_matching_objs", "(", "self", ".", "bot", ".", "mission", ")", "\n", "if", "not", "self", ".", "carrying", ":", "\n", "# No we need to commit to going to this particular door", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "target_obj", ",", "reason", "=", "'Open'", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "key_desc", ")", ")", "\n", "return", "\n", "\n", "# The position we are on is the one we should go next to", "\n", "# -> Move away from it", "\n", "", "", "if", "manhattan_distance", "(", "target_pos", ",", "self", ".", "pos", ")", "==", "(", "1", "if", "self", ".", "reason", "==", "'PutNext'", "else", "0", ")", ":", "\n", "            ", "def", "steppable", "(", "cell", ")", ":", "\n", "                ", "return", "cell", "is", "None", "or", "(", "cell", ".", "type", "==", "'door'", "and", "cell", ".", "is_open", ")", "\n", "", "if", "steppable", "(", "self", ".", "fwd_cell", ")", ":", "\n", "                ", "return", "self", ".", "actions", ".", "forward", "\n", "", "if", "steppable", "(", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "(", "self", ".", "pos", "+", "self", ".", "right_vec", ")", ")", ")", ":", "\n", "                ", "return", "self", ".", "actions", ".", "right", "\n", "", "if", "steppable", "(", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "(", "self", ".", "pos", "-", "self", ".", "right_vec", ")", ")", ")", ":", "\n", "                ", "return", "self", ".", "actions", ".", "left", "\n", "# Spin and hope for the best", "\n", "", "return", "self", ".", "actions", ".", "left", "\n", "\n", "# We are facing the target cell", "\n", "# -> subgoal completed", "\n", "", "if", "self", ".", "reason", "==", "'PutNext'", ":", "\n", "            ", "if", "manhattan_distance", "(", "target_pos", ",", "self", ".", "fwd_pos", ")", "==", "1", ":", "\n", "                ", "if", "self", ".", "fwd_cell", "is", "None", ":", "\n", "                    ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "return", "\n", "", "if", "self", ".", "fwd_cell", ".", "type", "==", "'door'", "and", "self", ".", "fwd_cell", ".", "is_open", ":", "\n", "# We can't drop an object in the cell where the door is.", "\n", "# Instead, we add a subgoal on the stack that will force", "\n", "# the bot to move the target object.", "\n", "                    ", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "\n", "self", ".", "bot", ",", "self", ".", "fwd_pos", "+", "2", "*", "self", ".", "dir_vec", ")", ")", "\n", "return", "\n", "", "", "", "else", ":", "\n", "            ", "if", "np", ".", "array_equal", "(", "target_pos", ",", "self", ".", "fwd_pos", ")", ":", "\n", "                ", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "return", "\n", "\n", "# We are still far from the target", "\n", "# -> try to find a non-blocker path", "\n", "", "", "path", ",", "_", ",", "_", "=", "self", ".", "bot", ".", "_shortest_path", "(", "\n", "lambda", "pos", ",", "cell", ":", "pos", "==", "target_pos", ",", "\n", ")", "\n", "\n", "# No non-blocker path found and", "\n", "# reexploration within the room is not allowed or there is nothing to explore", "\n", "# -> Look for blocker paths", "\n", "if", "not", "path", ":", "\n", "            ", "path", ",", "_", ",", "_", "=", "self", ".", "bot", ".", "_shortest_path", "(", "\n", "lambda", "pos", ",", "cell", ":", "pos", "==", "target_pos", ",", "\n", "try_with_blockers", "=", "True", "\n", ")", "\n", "\n", "# No path found", "\n", "# -> explore the world", "\n", "", "if", "not", "path", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "append", "(", "ExploreSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "return", "\n", "\n", "# So there is a path (blocker, or non-blockers)", "\n", "# -> try following it", "\n", "", "next_cell", "=", "path", "[", "0", "]", "\n", "\n", "# Choose the action in the case when the forward cell", "\n", "# is the one we should go next to", "\n", "if", "np", ".", "array_equal", "(", "next_cell", ",", "self", ".", "fwd_pos", ")", ":", "\n", "            ", "if", "self", ".", "fwd_cell", ":", "\n", "                ", "if", "self", ".", "fwd_cell", ".", "type", "==", "'door'", ":", "\n", "                    ", "assert", "not", "self", ".", "fwd_cell", ".", "is_locked", "\n", "if", "not", "self", ".", "fwd_cell", ".", "is_open", ":", "\n", "                        ", "self", ".", "bot", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "                        ", "return", "self", ".", "actions", ".", "forward", "\n", "", "", "if", "self", ".", "carrying", ":", "\n", "                    ", "drop_pos_cur", "=", "self", ".", "bot", ".", "_find_drop_pos", "(", ")", "\n", "drop_pos_block", "=", "self", ".", "bot", ".", "_find_drop_pos", "(", "drop_pos_cur", ")", "\n", "# Take back the object being carried", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos_cur", ")", ")", "\n", "\n", "# Pick up the blocking object and drop it", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos_block", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "self", ".", "fwd_pos", ")", ")", "\n", "\n", "# Drop the object being carried", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos_cur", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "                    ", "drop_pos", "=", "self", ".", "bot", ".", "_find_drop_pos", "(", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "drop_pos", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ".", "bot", ")", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "                ", "return", "self", ".", "actions", ".", "forward", "\n", "\n", "# The forward cell is not the one we should go to", "\n", "# -> turn towards the direction we need to go", "\n", "", "", "if", "np", ".", "array_equal", "(", "next_cell", "-", "self", ".", "pos", ",", "self", ".", "right_vec", ")", ":", "\n", "            ", "return", "self", ".", "actions", ".", "right", "\n", "", "elif", "np", ".", "array_equal", "(", "next_cell", "-", "self", ".", "pos", ",", "-", "self", ".", "right_vec", ")", ":", "\n", "            ", "return", "self", ".", "actions", ".", "left", "\n", "\n", "# If we reacher this point in the code,  then the cell is behind us.", "\n", "# Instead of choosing left or right randomly,", "\n", "# let's do something that might be useful:", "\n", "# Because when we're GoingNextTo for the purpose of exploring,", "\n", "# things might change while on the way to the position we're going to, we should", "\n", "# pick this right or left wisely.", "\n", "# The simplest thing we should do is: pick the one", "\n", "# that doesn't lead you to face a non empty cell.", "\n", "# One better thing would be to go to the direction", "\n", "# where the closest wall/door is the furthest", "\n", "", "distance_right", "=", "self", ".", "bot", ".", "_closest_wall_or_door_given_dir", "(", "self", ".", "pos", ",", "self", ".", "right_vec", ")", "\n", "distance_left", "=", "self", ".", "bot", ".", "_closest_wall_or_door_given_dir", "(", "self", ".", "pos", ",", "-", "self", ".", "right_vec", ")", "\n", "if", "distance_left", ">", "distance_right", ":", "\n", "            ", "return", "self", ".", "actions", ".", "left", "\n", "", "return", "self", ".", "actions", ".", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.GoNextToSubgoal.replan_after_action": [[444, 447], ["bot.GoNextToSubgoal._plan_undo_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal._plan_undo_action"], ["", "def", "replan_after_action", "(", "self", ",", "action_taken", ")", ":", "\n", "        ", "if", "action_taken", "in", "[", "self", ".", "actions", ".", "pickup", ",", "self", ".", "actions", ".", "drop", ",", "self", ".", "actions", ".", "toggle", "]", ":", "\n", "            ", "self", ".", "_plan_undo_action", "(", "action_taken", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.GoNextToSubgoal.is_exploratory": [[448, 450], ["None"], "methods", ["None"], ["", "", "def", "is_exploratory", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "reason", "==", "'Explore'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.ExploreSubgoal.replan_before_action": [[453, 498], ["bot.ExploreSubgoal.bot._shortest_path", "bot.ExploreSubgoal.bot._shortest_path", "bot.ExploreSubgoal.bot.stack.append", "bot.ExploreSubgoal.bot._shortest_path", "bot.ExploreSubgoal.bot.mission.grid.get", "bot.ExploreSubgoal.bot.stack.pop", "bot.ExploreSubgoal.bot.stack.append", "bot.ExploreSubgoal.bot.stack.append", "bot.GoNextToSubgoal", "bot.OpenSubgoal", "bot.GoNextToSubgoal"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path"], ["    ", "def", "replan_before_action", "(", "self", ")", ":", "\n", "# Find the closest unseen position", "\n", "        ", "_", ",", "unseen_pos", ",", "with_blockers", "=", "self", ".", "bot", ".", "_shortest_path", "(", "\n", "lambda", "pos", ",", "cell", ":", "not", "self", ".", "bot", ".", "vis_mask", "[", "pos", "]", ",", "\n", "try_with_blockers", "=", "True", "\n", ")", "\n", "\n", "if", "unseen_pos", ":", "\n", "            ", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "unseen_pos", ",", "reason", "=", "'Explore'", ")", ")", "\n", "return", "None", "\n", "\n", "# Find the closest unlocked unopened door", "\n", "", "def", "unopened_unlocked_door", "(", "pos", ",", "cell", ")", ":", "\n", "            ", "return", "cell", "and", "cell", ".", "type", "==", "'door'", "and", "not", "cell", ".", "is_locked", "and", "not", "cell", ".", "is_open", "\n", "\n", "# Find the closest unopened door", "\n", "", "def", "unopened_door", "(", "pos", ",", "cell", ")", ":", "\n", "            ", "return", "cell", "and", "cell", ".", "type", "==", "'door'", "and", "not", "cell", ".", "is_open", "\n", "\n", "# Try to find an unlocked door first.", "\n", "# We do this because otherwise, opening a locked door as", "\n", "# a subgoal may try to open the same door for exploration,", "\n", "# resulting in an infinite loop.", "\n", "", "_", ",", "door_pos", ",", "_", "=", "self", ".", "bot", ".", "_shortest_path", "(", "\n", "unopened_unlocked_door", ",", "try_with_blockers", "=", "True", ")", "\n", "if", "not", "door_pos", ":", "\n", "# Try to find a locker door if an unlocked one is not available.", "\n", "            ", "_", ",", "door_pos", ",", "_", "=", "self", ".", "bot", ".", "_shortest_path", "(", "\n", "unopened_door", ",", "try_with_blockers", "=", "True", ")", "\n", "\n", "# Open the door", "\n", "", "if", "door_pos", ":", "\n", "            ", "door_obj", "=", "self", ".", "bot", ".", "mission", ".", "grid", ".", "get", "(", "*", "door_pos", ")", "\n", "# If we are going to a locked door, there are two cases:", "\n", "# - we already have the key, then we should not drop it", "\n", "# - we don't have the key, in which case eventually we should drop it", "\n", "got_the_key", "=", "(", "self", ".", "carrying", "\n", "and", "self", ".", "carrying", ".", "type", "==", "'key'", "and", "self", ".", "carrying", ".", "color", "==", "door_obj", ".", "color", ")", "\n", "open_reason", "=", "'KeepKey'", "if", "door_obj", ".", "is_locked", "and", "got_the_key", "else", "None", "\n", "self", ".", "bot", ".", "stack", ".", "pop", "(", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ".", "bot", ",", "reason", "=", "open_reason", ")", ")", "\n", "self", ".", "bot", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ".", "bot", ",", "door_obj", ",", "reason", "=", "'Open'", ")", ")", "\n", "return", "\n", "\n", "", "assert", "False", ",", "\"0nothing left to explore\"", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.ExploreSubgoal.is_exploratory": [[499, 501], ["None"], "methods", ["None"], ["", "def", "is_exploratory", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot.__init__": [[524, 546], ["Grid", "np.zeros", "bot.Bot._process_instr"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr"], ["def", "__init__", "(", "self", ",", "mission", ")", ":", "\n", "# Mission to be solved", "\n", "        ", "self", ".", "mission", "=", "mission", "\n", "\n", "# Grid containing what has been mapped out", "\n", "self", ".", "grid", "=", "Grid", "(", "mission", ".", "width", ",", "mission", ".", "height", ")", "\n", "\n", "# Visibility mask. True for explored/seen, false for unexplored.", "\n", "self", ".", "vis_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "mission", ".", "width", ",", "mission", ".", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# Stack of tasks/subtasks to complete (tuples)", "\n", "self", ".", "stack", "=", "[", "]", "\n", "\n", "# Process/parse the instructions", "\n", "self", ".", "_process_instr", "(", "mission", ".", "instrs", ")", "\n", "\n", "# How many BFS searches this bot has performed", "\n", "self", ".", "bfs_counter", "=", "0", "\n", "\n", "# How many steps were made in total in all BFS searches", "\n", "# performed by this bot", "\n", "self", ".", "bfs_step_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot.replan": [[547, 598], ["bot.Bot._process_obs", "bot.Bot._check_erroneous_box_opening", "bot.Bot._remember_current_state", "subgoal.update_agent_attributes", "bot.Bot.stack[].replan_after_action", "bot.Bot.stack[].is_exploratory", "bot.Bot.stack.pop", "subgoal.replan_before_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_obs", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._check_erroneous_box_opening", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._remember_current_state", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Subgoal.update_agent_attributes", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.GoNextToSubgoal.replan_after_action", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.ExploreSubgoal.is_exploratory", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.ExploreSubgoal.replan_before_action"], ["", "def", "replan", "(", "self", ",", "action_taken", "=", "None", ")", ":", "\n", "        ", "\"\"\"Replan and suggest an action.\n\n        Call this method once per every iteration of the environment.\n\n        Parameters:\n        ----------\n        action_taken\n            The last action that the agent took. Can be `None`,\n            in which case the bot assumes that the action it suggested\n            was taken (or that it is the first iteration).\n\n        Returns:\n        -------\n        suggested_action\n            The action that the bot suggests. Can be `done` if the\n            bot thinks that the mission has been accomplished.\n\n        \"\"\"", "\n", "self", ".", "_process_obs", "(", ")", "\n", "\n", "# Check that no box has been opened", "\n", "self", ".", "_check_erroneous_box_opening", "(", "action_taken", ")", "\n", "\n", "# TODO: instead of updating all subgoals, just add a couple", "\n", "# properties to the `Subgoal` class.", "\n", "for", "subgoal", "in", "self", ".", "stack", ":", "\n", "            ", "subgoal", ".", "update_agent_attributes", "(", ")", "\n", "\n", "", "if", "self", ".", "stack", ":", "\n", "            ", "self", ".", "stack", "[", "-", "1", "]", ".", "replan_after_action", "(", "action_taken", ")", "\n", "\n", "# Clear the stack from the non-essential subgoals", "\n", "", "while", "self", ".", "stack", "and", "self", ".", "stack", "[", "-", "1", "]", ".", "is_exploratory", "(", ")", ":", "\n", "            ", "self", ".", "stack", ".", "pop", "(", ")", "\n", "\n", "", "suggested_action", "=", "None", "\n", "while", "self", ".", "stack", ":", "\n", "            ", "subgoal", "=", "self", ".", "stack", "[", "-", "1", "]", "\n", "suggested_action", "=", "subgoal", ".", "replan_before_action", "(", ")", "\n", "# If is not clear what can be done for the current subgoal", "\n", "# (because it is completed, because there is blocker,", "\n", "# or because exploration is required), keep replanning", "\n", "if", "suggested_action", "is", "not", "None", ":", "\n", "                ", "break", "\n", "", "", "if", "not", "self", ".", "stack", ":", "\n", "            ", "suggested_action", "=", "self", ".", "mission", ".", "actions", ".", "done", "\n", "\n", "", "self", ".", "_remember_current_state", "(", ")", "\n", "\n", "return", "suggested_action", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._find_obj_pos": [[599, 657], ["range", "len", "len", "bot.Bot._shortest_path", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path"], ["", "def", "_find_obj_pos", "(", "self", ",", "obj_desc", ",", "adjacent", "=", "False", ")", ":", "\n", "        ", "\"\"\"Find the position of the closest visible object matching a given description.\"\"\"", "\n", "\n", "assert", "len", "(", "obj_desc", ".", "obj_set", ")", ">", "0", "\n", "\n", "best_distance_to_obj", "=", "999", "\n", "best_pos", "=", "None", "\n", "best_obj", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "obj_desc", ".", "obj_set", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "obj_desc", ".", "obj_set", "[", "i", "]", "==", "self", ".", "mission", ".", "carrying", ":", "\n", "                    ", "continue", "\n", "", "obj_pos", "=", "obj_desc", ".", "obj_poss", "[", "i", "]", "\n", "\n", "if", "self", ".", "vis_mask", "[", "obj_pos", "]", ":", "\n", "                    ", "shortest_path_to_obj", ",", "_", ",", "with_blockers", "=", "self", ".", "_shortest_path", "(", "\n", "lambda", "pos", ",", "cell", ":", "pos", "==", "obj_pos", ",", "\n", "try_with_blockers", "=", "True", "\n", ")", "\n", "assert", "shortest_path_to_obj", "is", "not", "None", "\n", "distance_to_obj", "=", "len", "(", "shortest_path_to_obj", ")", "\n", "\n", "if", "with_blockers", ":", "\n", "# The distance should take into account the steps necessary", "\n", "# to unblock the way. Instead of computing it exactly,", "\n", "# we can use a lower bound on this number of steps", "\n", "# which is 4 when the agent is not holding anything", "\n", "# (pick, turn, drop, turn back", "\n", "# and 7 if the agent is carrying something", "\n", "# (turn, drop, turn back, pick,", "\n", "# turn to other direction, drop, turn back)", "\n", "                        ", "distance_to_obj", "=", "(", "len", "(", "shortest_path_to_obj", ")", "\n", "+", "(", "7", "if", "self", ".", "mission", ".", "carrying", "else", "4", ")", ")", "\n", "\n", "# If we looking for a door and we are currently in that cell", "\n", "# that contains the door, it will take us at least 2", "\n", "# (3 if `adjacent == True`) steps to reach the goal.`", "\n", "", "if", "distance_to_obj", "==", "0", ":", "\n", "                        ", "distance_to_obj", "=", "3", "if", "adjacent", "else", "2", "\n", "\n", "# If what we want is to face a location that is adjacent to an object,", "\n", "# and if we are already right next to this object,", "\n", "# then we should not prefer this object to those at distance 2", "\n", "", "if", "adjacent", "and", "distance_to_obj", "==", "1", ":", "\n", "                        ", "distance_to_obj", "=", "3", "\n", "\n", "", "if", "distance_to_obj", "<", "best_distance_to_obj", ":", "\n", "                        ", "best_distance_to_obj", "=", "distance_to_obj", "\n", "best_pos", "=", "obj_pos", "\n", "best_obj", "=", "obj_desc", ".", "obj_set", "[", "i", "]", "\n", "", "", "", "except", "IndexError", ":", "\n", "# Suppose we are tracking red keys, and we just used a red key to open a door,", "\n", "# then for the last i, accessing obj_desc.obj_poss[i] will raise an IndexError", "\n", "# -> Solution: Not care about that red key we used to open the door", "\n", "                ", "pass", "\n", "\n", "", "", "return", "best_obj", ",", "best_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_obs": [[658, 688], ["bot.Bot.mission.gen_obs_grid", "range", "range"], "methods", ["None"], ["", "def", "_process_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"Parse the contents of an observation/image and update our state.\"\"\"", "\n", "\n", "grid", ",", "vis_mask", "=", "self", ".", "mission", ".", "gen_obs_grid", "(", ")", "\n", "\n", "view_size", "=", "self", ".", "mission", ".", "agent_view_size", "\n", "pos", "=", "self", ".", "mission", ".", "agent_pos", "\n", "f_vec", "=", "self", ".", "mission", ".", "dir_vec", "\n", "r_vec", "=", "self", ".", "mission", ".", "right_vec", "\n", "\n", "# Compute the absolute coordinates of the top-left corner", "\n", "# of the agent's view area", "\n", "top_left", "=", "pos", "+", "f_vec", "*", "(", "view_size", "-", "1", ")", "-", "r_vec", "*", "(", "view_size", "//", "2", ")", "\n", "\n", "# Mark everything in front of us as visible", "\n", "for", "vis_j", "in", "range", "(", "0", ",", "view_size", ")", ":", "\n", "            ", "for", "vis_i", "in", "range", "(", "0", ",", "view_size", ")", ":", "\n", "\n", "                ", "if", "not", "vis_mask", "[", "vis_i", ",", "vis_j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "# Compute the world coordinates of this cell", "\n", "", "abs_i", ",", "abs_j", "=", "top_left", "-", "(", "f_vec", "*", "vis_j", ")", "+", "(", "r_vec", "*", "vis_i", ")", "\n", "\n", "if", "abs_i", "<", "0", "or", "abs_i", ">=", "self", ".", "vis_mask", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "abs_j", "<", "0", "or", "abs_j", ">=", "self", ".", "vis_mask", ".", "shape", "[", "1", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "self", ".", "vis_mask", "[", "abs_i", ",", "abs_j", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._remember_current_state": [[689, 696], ["bot.Bot.mission.grid.get"], "methods", ["None"], ["", "", "", "def", "_remember_current_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "prev_agent_pos", "=", "self", ".", "mission", ".", "agent_pos", "\n", "self", ".", "prev_carrying", "=", "self", ".", "mission", ".", "carrying", "\n", "fwd_cell", "=", "self", ".", "mission", ".", "grid", ".", "get", "(", "*", "self", ".", "mission", ".", "agent_pos", "+", "self", ".", "mission", ".", "dir_vec", ")", "\n", "if", "fwd_cell", "and", "fwd_cell", ".", "type", "==", "'door'", ":", "\n", "            ", "self", ".", "fwd_door_was_open", "=", "fwd_cell", ".", "is_open", "\n", "", "self", ".", "prev_fwd_cell", "=", "fwd_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._closest_wall_or_door_given_dir": [[697, 709], ["bot.Bot.mission.grid.get", "bot.Bot.mission.in_view", "bot.Bot.type.endswith"], "methods", ["None"], ["", "def", "_closest_wall_or_door_given_dir", "(", "self", ",", "position", ",", "direction", ")", ":", "\n", "        ", "distance", "=", "1", "\n", "while", "True", ":", "\n", "            ", "position_to_try", "=", "position", "+", "distance", "*", "direction", "\n", "# If the current position is outside the field of view,", "\n", "# stop everything and return the previous one", "\n", "if", "not", "self", ".", "mission", ".", "in_view", "(", "*", "position_to_try", ")", ":", "\n", "                ", "return", "distance", "-", "1", "\n", "", "cell", "=", "self", ".", "mission", ".", "grid", ".", "get", "(", "*", "position_to_try", ")", "\n", "if", "cell", "and", "(", "cell", ".", "type", ".", "endswith", "(", "'door'", ")", "or", "cell", ".", "type", "==", "'wall'", ")", ":", "\n", "                ", "return", "distance", "\n", "", "distance", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._breadth_first_search": [[710, 771], ["dict", "len", "grid.get", "accept_fn", "queue.append", "path.append"], "methods", ["None"], ["", "", "def", "_breadth_first_search", "(", "self", ",", "initial_states", ",", "accept_fn", ",", "ignore_blockers", ")", ":", "\n", "        ", "\"\"\"Performs breadth first search.\n\n        This is pretty much your textbook BFS. The state space is agent's locations,\n        but the current direction is also added to the queue to slightly prioritize\n        going straight over turning.\n\n        \"\"\"", "\n", "self", ".", "bfs_counter", "+=", "1", "\n", "\n", "queue", "=", "[", "(", "state", ",", "None", ")", "for", "state", "in", "initial_states", "]", "\n", "grid", "=", "self", ".", "mission", ".", "grid", "\n", "previous_pos", "=", "dict", "(", ")", "\n", "\n", "while", "len", "(", "queue", ")", ">", "0", ":", "\n", "            ", "state", ",", "prev_pos", "=", "queue", "[", "0", "]", "\n", "queue", "=", "queue", "[", "1", ":", "]", "\n", "i", ",", "j", ",", "di", ",", "dj", "=", "state", "\n", "\n", "if", "(", "i", ",", "j", ")", "in", "previous_pos", ":", "\n", "                ", "continue", "\n", "\n", "", "self", ".", "bfs_step_counter", "+=", "1", "\n", "\n", "cell", "=", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "previous_pos", "[", "(", "i", ",", "j", ")", "]", "=", "prev_pos", "\n", "\n", "# If we reached a position satisfying the acceptance condition", "\n", "if", "accept_fn", "(", "(", "i", ",", "j", ")", ",", "cell", ")", ":", "\n", "                ", "path", "=", "[", "]", "\n", "pos", "=", "(", "i", ",", "j", ")", "\n", "while", "pos", ":", "\n", "                    ", "path", ".", "append", "(", "pos", ")", "\n", "pos", "=", "previous_pos", "[", "pos", "]", "\n", "", "return", "path", ",", "(", "i", ",", "j", ")", ",", "previous_pos", "\n", "\n", "# If this cell was not visually observed, don't expand from it", "\n", "", "if", "not", "self", ".", "vis_mask", "[", "i", ",", "j", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "cell", ":", "\n", "                ", "if", "cell", ".", "type", "==", "'wall'", ":", "\n", "                    ", "continue", "\n", "# If this is a door", "\n", "", "elif", "cell", ".", "type", "==", "'door'", ":", "\n", "# If the door is closed, don't visit neighbors", "\n", "                    ", "if", "not", "cell", ".", "is_open", ":", "\n", "                        ", "continue", "\n", "", "", "elif", "not", "ignore_blockers", ":", "\n", "                    ", "continue", "\n", "\n", "# Location to which the bot can get without turning", "\n", "# are put in the queue first", "\n", "", "", "for", "k", ",", "l", "in", "[", "(", "di", ",", "dj", ")", ",", "(", "dj", ",", "di", ")", ",", "(", "-", "dj", ",", "-", "di", ")", ",", "(", "-", "di", ",", "-", "dj", ")", "]", ":", "\n", "                ", "next_pos", "=", "(", "i", "+", "k", ",", "j", "+", "l", ")", "\n", "next_dir_vec", "=", "(", "k", ",", "l", ")", "\n", "next_state", "=", "(", "*", "next_pos", ",", "*", "next_dir_vec", ")", "\n", "queue", ".", "append", "(", "(", "next_state", ",", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "# Path not found", "\n", "", "", "return", "None", ",", "None", ",", "previous_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path": [[772, 807], ["bot.Bot._breadth_first_search", "bot.Bot._breadth_first_search", "extra_path.append"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._breadth_first_search", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._breadth_first_search"], ["", "def", "_shortest_path", "(", "self", ",", "accept_fn", ",", "try_with_blockers", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Finds the path to any of the locations that satisfy `accept_fn`.\n        Prefers the paths that avoid blockers for as long as possible.\n        \"\"\"", "\n", "\n", "# Initial states to visit (BFS)", "\n", "initial_states", "=", "[", "(", "*", "self", ".", "mission", ".", "agent_pos", ",", "*", "self", ".", "mission", ".", "dir_vec", ")", "]", "\n", "\n", "path", "=", "finish", "=", "None", "\n", "with_blockers", "=", "False", "\n", "path", ",", "finish", ",", "previous_pos", "=", "self", ".", "_breadth_first_search", "(", "\n", "initial_states", ",", "accept_fn", ",", "ignore_blockers", "=", "False", ")", "\n", "if", "not", "path", "and", "try_with_blockers", ":", "\n", "            ", "with_blockers", "=", "True", "\n", "path", ",", "finish", ",", "_", "=", "self", ".", "_breadth_first_search", "(", "\n", "[", "(", "i", ",", "j", ",", "1", ",", "0", ")", "for", "i", ",", "j", "in", "previous_pos", "]", ",", "\n", "accept_fn", ",", "ignore_blockers", "=", "True", ")", "\n", "if", "path", ":", "\n", "# `path` now contains the path to a cell that is reachable without", "\n", "# blockers. Now let's add the path to this cell", "\n", "                ", "pos", "=", "path", "[", "-", "1", "]", "\n", "extra_path", "=", "[", "]", "\n", "while", "pos", ":", "\n", "                    ", "extra_path", ".", "append", "(", "pos", ")", "\n", "pos", "=", "previous_pos", "[", "pos", "]", "\n", "", "path", "=", "path", "+", "extra_path", "[", "1", ":", "]", "\n", "\n", "", "", "if", "path", ":", "\n", "# And the starting position is not required", "\n", "            ", "path", "=", "path", "[", ":", ":", "-", "1", "]", "\n", "path", "=", "path", "[", "1", ":", "]", "\n", "\n", "# Note, that with_blockers only makes sense if path is not None", "\n", "", "return", "path", ",", "finish", ",", "with_blockers", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._find_drop_pos": [[808, 899], ["bot.Bot._shortest_path", "tuple", "np.array_equal", "range", "range", "np.array_equal", "bot.Bot._shortest_path", "bot.Bot._shortest_path", "bot.Bot._shortest_path", "np.array_equal", "grid.get", "grid.get", "np.array_equal", "grid.get", "cell_class.append", "bool", "bool", "cell_class.append", "cell_class.append"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._shortest_path"], ["", "def", "_find_drop_pos", "(", "self", ",", "except_pos", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Find a position where an object can be dropped, ideally without blocking anything.\n        \"\"\"", "\n", "\n", "grid", "=", "self", ".", "mission", ".", "grid", "\n", "\n", "def", "match_unblock", "(", "pos", ",", "cell", ")", ":", "\n", "# Consider the region of 8 neighboring cells around the candidate cell.", "\n", "# If dropping the object in the candidate makes this region disconnected,", "\n", "# then probably it is better to drop elsewhere.", "\n", "\n", "            ", "i", ",", "j", "=", "pos", "\n", "agent_pos", "=", "tuple", "(", "self", ".", "mission", ".", "agent_pos", ")", "\n", "\n", "if", "np", ".", "array_equal", "(", "pos", ",", "agent_pos", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "if", "except_pos", "and", "np", ".", "array_equal", "(", "pos", ",", "except_pos", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "if", "not", "self", ".", "vis_mask", "[", "i", ",", "j", "]", "or", "grid", ".", "get", "(", "i", ",", "j", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "# We distinguish cells of three classes:", "\n", "# class 0: the empty ones, including open doors", "\n", "# class 1: those that are not interesting (just walls so far)", "\n", "# class 2: all the rest, including objects and cells that are current not visible,", "\n", "#          and hence may contain objects, and also `except_pos` at it may soon contain", "\n", "#          an object", "\n", "# We want to ensure that empty cells are connected, and that one can reach", "\n", "# any object cell from any other object cell.", "\n", "", "cell_class", "=", "[", "]", "\n", "for", "k", ",", "l", "in", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "0", ")", ",", "\n", "(", "1", ",", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", ",", "(", "-", "1", ",", "0", ")", "]", ":", "\n", "                ", "nb_pos", "=", "(", "i", "+", "k", ",", "j", "+", "l", ")", "\n", "cell", "=", "grid", ".", "get", "(", "*", "nb_pos", ")", "\n", "# compeletely blocked", "\n", "if", "self", ".", "vis_mask", "[", "nb_pos", "]", "and", "cell", "and", "cell", ".", "type", "==", "'wall'", ":", "\n", "                    ", "cell_class", ".", "append", "(", "1", ")", "\n", "# empty", "\n", "", "elif", "(", "self", ".", "vis_mask", "[", "nb_pos", "]", "\n", "and", "(", "not", "cell", "or", "(", "cell", ".", "type", "==", "'door'", "and", "cell", ".", "is_open", ")", "or", "nb_pos", "==", "agent_pos", ")", "\n", "and", "nb_pos", "!=", "except_pos", ")", ":", "\n", "                    ", "cell_class", ".", "append", "(", "0", ")", "\n", "# an object cell", "\n", "", "else", ":", "\n", "                    ", "cell_class", ".", "append", "(", "2", ")", "\n", "\n", "# Now we need to check that empty cells are connected. To do that,", "\n", "# let's check how many times empty changes to non-empty", "\n", "", "", "changes", "=", "0", "\n", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "                ", "if", "bool", "(", "cell_class", "[", "(", "i", "+", "1", ")", "%", "8", "]", ")", "!=", "bool", "(", "cell_class", "[", "i", "]", ")", ":", "\n", "                    ", "changes", "+=", "1", "\n", "\n", "# Lastly, we need check that every object has an adjacent empty cell", "\n", "", "", "for", "i", "in", "range", "(", "8", ")", ":", "\n", "                ", "next_i", "=", "(", "i", "+", "1", ")", "%", "8", "\n", "prev_i", "=", "(", "i", "+", "7", ")", "%", "8", "\n", "if", "cell_class", "[", "i", "]", "==", "2", "and", "cell_class", "[", "prev_i", "]", "!=", "0", "and", "cell_class", "[", "next_i", "]", "!=", "0", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "return", "changes", "<=", "2", "\n", "\n", "", "def", "match_empty", "(", "pos", ",", "cell", ")", ":", "\n", "            ", "i", ",", "j", "=", "pos", "\n", "\n", "if", "np", ".", "array_equal", "(", "pos", ",", "self", ".", "mission", ".", "agent_pos", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "if", "except_pos", "and", "np", ".", "array_equal", "(", "pos", ",", "except_pos", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "if", "not", "self", ".", "vis_mask", "[", "pos", "]", "or", "grid", ".", "get", "(", "*", "pos", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n", "", "_", ",", "drop_pos", ",", "_", "=", "self", ".", "_shortest_path", "(", "match_unblock", ")", "\n", "\n", "if", "not", "drop_pos", ":", "\n", "            ", "_", ",", "drop_pos", ",", "_", "=", "self", ".", "_shortest_path", "(", "match_empty", ")", "\n", "\n", "", "if", "not", "drop_pos", ":", "\n", "            ", "_", ",", "drop_pos", ",", "_", "=", "self", ".", "_shortest_path", "(", "match_unblock", ",", "try_with_blockers", "=", "True", ")", "\n", "\n", "", "if", "not", "drop_pos", ":", "\n", "            ", "_", ",", "drop_pos", ",", "_", "=", "self", ".", "_shortest_path", "(", "match_empty", ",", "try_with_blockers", "=", "True", ")", "\n", "\n", "", "return", "drop_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr": [[900, 940], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "bot.Bot.stack.append", "isinstance", "isinstance", "bot.Bot._process_instr", "bot.Bot._process_instr", "bot.Bot._process_instr", "bot.Bot._process_instr", "bot.GoNextToSubgoal", "bot.OpenSubgoal", "bot.GoNextToSubgoal", "bot.DropSubgoal", "bot.PickupSubgoal", "bot.GoNextToSubgoal", "bot.DropSubgoal", "bot.GoNextToSubgoal", "bot.PickupSubgoal", "bot.GoNextToSubgoal"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._process_instr"], ["", "def", "_process_instr", "(", "self", ",", "instr", ")", ":", "\n", "        ", "\"\"\"\n        Translate instructions into an internal form the agent can execute\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "instr", ",", "GoToInstr", ")", ":", "\n", "            ", "self", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ",", "instr", ".", "desc", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "OpenInstr", ")", ":", "\n", "            ", "self", ".", "stack", ".", "append", "(", "OpenSubgoal", "(", "self", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ",", "instr", ".", "desc", ",", "reason", "=", "'Open'", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "PickupInstr", ")", ":", "\n", "# We pick up and immediately drop so", "\n", "# that we may carry other objects", "\n", "            ", "self", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ",", "instr", ".", "desc", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "PutNextInstr", ")", ":", "\n", "            ", "self", ".", "stack", ".", "append", "(", "DropSubgoal", "(", "self", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ",", "instr", ".", "desc_fixed", ",", "reason", "=", "'PutNext'", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "PickupSubgoal", "(", "self", ")", ")", "\n", "self", ".", "stack", ".", "append", "(", "GoNextToSubgoal", "(", "self", ",", "instr", ".", "desc_move", ")", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "BeforeInstr", ")", "or", "isinstance", "(", "instr", ",", "AndInstr", ")", ":", "\n", "            ", "self", ".", "_process_instr", "(", "instr", ".", "instr_b", ")", "\n", "self", ".", "_process_instr", "(", "instr", ".", "instr_a", ")", "\n", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "AfterInstr", ")", ":", "\n", "            ", "self", ".", "_process_instr", "(", "instr", ".", "instr_a", ")", "\n", "self", ".", "_process_instr", "(", "instr", ".", "instr_b", ")", "\n", "return", "\n", "\n", "", "assert", "False", ",", "\"unknown instruction type\"", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot._check_erroneous_box_opening": [[941, 950], ["bot.DisappearedBoxError"], "methods", ["None"], ["", "def", "_check_erroneous_box_opening", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        When the agent opens a box, we raise an error and mark the task unsolvable.\n        This is a tad conservative, because maybe the box is irrelevant to the mission.\n        \"\"\"", "\n", "if", "(", "action", "==", "self", ".", "mission", ".", "actions", ".", "toggle", "\n", "and", "self", ".", "prev_fwd_cell", "is", "not", "None", "\n", "and", "self", ".", "prev_fwd_cell", ".", "type", "==", "'box'", ")", ":", "\n", "            ", "raise", "DisappearedBoxError", "(", "'A box was opened. I am not sure I can help now.'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.manhattan_distance": [[19, 21], ["np.abs", "np.abs"], "function", ["None"], ["", "", "def", "manhattan_distance", "(", "pos", ",", "target", ")", ":", "\n", "    ", "return", "np", ".", "abs", "(", "target", "[", "0", "]", "-", "pos", "[", "0", "]", ")", "+", "np", ".", "abs", "(", "target", "[", "1", "]", "-", "pos", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_log": [[34, 44], ["pandas.read_csv", "os.path.join", "len", "print"], "function", ["None"], ["def", "load_log", "(", "dir_", ")", ":", "\n", "    ", "\"\"\"Loads log from a directory and adds it to a list of dataframes.\"\"\"", "\n", "df", "=", "pandas", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dir_", ",", "'log.csv'", ")", ",", "\n", "error_bad_lines", "=", "False", ",", "\n", "warn_bad_lines", "=", "True", ")", "\n", "if", "not", "len", "(", "df", ")", ":", "\n", "        ", "print", "(", "\"empty df at {}\"", ".", "format", "(", "dir_", ")", ")", "\n", "return", "\n", "", "df", "[", "'model'", "]", "=", "dir_", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_multiphase_log": [[45, 58], ["plotting.load_log", "range", "len", "phases.append"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_log"], ["", "def", "load_multiphase_log", "(", "dir_", ")", ":", "\n", "    ", "df", "=", "load_log", "(", "dir_", ")", "\n", "phases", "=", "[", "]", "\n", "cur_phase", "=", "0", "\n", "prev_upd", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "df", ")", ")", ":", "\n", "        ", "upd", "=", "df", ".", "iloc", "[", "i", "]", "[", "'update'", "]", "\n", "if", "upd", "<", "prev_upd", ":", "\n", "            ", "cur_phase", "+=", "1", "\n", "", "phases", ".", "append", "(", "cur_phase", ")", "\n", "prev_upd", "=", "upd", "\n", "", "df", "[", "'phase'", "]", "=", "phases", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_logs": [[59, 66], ["os.walk", "dfs.append", "plotting.load_multiphase_log", "plotting.load_log"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_multiphase_log", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_log"], ["", "def", "load_logs", "(", "root", ",", "multiphase", "=", "False", ")", ":", "\n", "    ", "dfs", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "root", ",", "followlinks", "=", "True", ")", ":", "\n", "        ", "for", "file_", "in", "files", ":", "\n", "            ", "if", "file_", "==", "'log.csv'", ":", "\n", "                ", "dfs", ".", "append", "(", "load_multiphase_log", "(", "root", ")", "if", "multiphase", "else", "load_log", "(", "root", ")", ")", "\n", "", "", "", "return", "dfs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.plot_average_impl": [[68, 100], ["df.dropna.dropna", "df[].unique", "zip", "numpy.mean", "pandas.concat.groupby", "pandas.concat", "pandas.concat.groupby().agg", "matplotlib.pyplot.plot", "print", "df_model[].max", "sorted", "df_model.copy.copy", "df_model[].rolling().mean", "parts.append", "re.match", "df[].isin", "pandas.concat.groupby", "df_model[].max", "pandas.concat.groupby", "pandas.concat.groupby", "df_model[].rolling", "len"], "function", ["None"], ["", "def", "plot_average_impl", "(", "df", ",", "regexps", ",", "y_value", "=", "'return_mean'", ",", "window", "=", "1", ",", "agg", "=", "'mean'", ",", "\n", "x_value", "=", "'frames'", ")", ":", "\n", "    ", "\"\"\"Plot averages over groups of runs  defined by regular expressions.\"\"\"", "\n", "df", "=", "df", ".", "dropna", "(", "subset", "=", "[", "y_value", "]", ")", "\n", "\n", "unique_models", "=", "df", "[", "'model'", "]", ".", "unique", "(", ")", "\n", "model_groups", "=", "[", "[", "m", "for", "m", "in", "unique_models", "if", "re", ".", "match", "(", "regex", ",", "m", ")", "]", "\n", "for", "regex", "in", "regexps", "]", "\n", "\n", "for", "regex", ",", "models", "in", "zip", "(", "regexps", ",", "model_groups", ")", ":", "\n", "        ", "df_re", "=", "df", "[", "df", "[", "'model'", "]", ".", "isin", "(", "models", ")", "]", "\n", "# the average doesn't make sense if most models are not included,", "\n", "# so we only for the period of training that has been done by all models", "\n", "num_frames_per_model", "=", "[", "df_model", "[", "x_value", "]", ".", "max", "(", ")", "\n", "for", "_", ",", "df_model", "in", "df_re", ".", "groupby", "(", "'model'", ")", "]", "\n", "median_progress", "=", "sorted", "(", "num_frames_per_model", ")", "[", "(", "len", "(", "num_frames_per_model", ")", "-", "1", ")", "//", "2", "]", "\n", "mean_duration", "=", "np", ".", "mean", "(", "[", "\n", "df_model", "[", "'duration'", "]", ".", "max", "(", ")", "for", "_", ",", "df_model", "in", "df_re", ".", "groupby", "(", "'model'", ")", "]", ")", "\n", "df_re", "=", "df_re", "[", "df_re", "[", "x_value", "]", "<=", "median_progress", "]", "\n", "\n", "# smooth", "\n", "parts", "=", "[", "]", "\n", "for", "_", ",", "df_model", "in", "df_re", ".", "groupby", "(", "'model'", ")", ":", "\n", "            ", "df_model", "=", "df_model", ".", "copy", "(", ")", "\n", "df_model", ".", "loc", "[", ":", ",", "y_value", "]", "=", "df_model", "[", "y_value", "]", ".", "rolling", "(", "window", ")", ".", "mean", "(", ")", "\n", "parts", ".", "append", "(", "df_model", ")", "\n", "", "df_re", "=", "pandas", ".", "concat", "(", "parts", ")", "\n", "\n", "df_agg", "=", "df_re", ".", "groupby", "(", "[", "x_value", "]", ")", ".", "agg", "(", "[", "agg", "]", ")", "\n", "values", "=", "df_agg", "[", "y_value", "]", "[", "agg", "]", "\n", "pyplot", ".", "plot", "(", "df_agg", ".", "index", ",", "values", ",", "label", "=", "regex", ")", "\n", "print", "(", "regex", ",", "median_progress", ",", "mean_duration", "/", "86400.0", ",", "values", ".", "iloc", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.plot_average": [[102, 107], ["matplotlib.pyplot.figure", "plotting.plot_average_impl", "matplotlib.pyplot.legend"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.plot_average_impl"], ["", "", "def", "plot_average", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Plot averages over groups of runs  defined by regular expressions.\"\"\"", "\n", "pyplot", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "plot_average_impl", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "pyplot", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.plot_all_runs": [[109, 132], ["matplotlib.pyplot.figure", "df.dropna.dropna", "df[].unique", "df_re.groupby", "matplotlib.pyplot.legend", "values.rolling().mean.rolling().mean", "matplotlib.pyplot.plot", "print", "re.match", "df[].isin", "color", "df_model[].max", "values.rolling().mean.rolling"], "function", ["None"], ["", "def", "plot_all_runs", "(", "df", ",", "regex", ",", "quantity", "=", "'return_mean'", ",", "x_axis", "=", "'frames'", ",", "window", "=", "1", ",", "color", "=", "None", ")", ":", "\n", "    ", "\"\"\"Plot a group of runs defined by a regex.\"\"\"", "\n", "pyplot", ".", "figure", "(", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "\n", "df", "=", "df", ".", "dropna", "(", "subset", "=", "[", "quantity", "]", ")", "\n", "\n", "unique_models", "=", "df", "[", "'model'", "]", ".", "unique", "(", ")", "\n", "models", "=", "[", "m", "for", "m", "in", "unique_models", "if", "re", ".", "match", "(", "regex", ",", "m", ")", "]", "\n", "df_re", "=", "df", "[", "df", "[", "'model'", "]", ".", "isin", "(", "models", ")", "]", "\n", "for", "model", ",", "df_model", "in", "df_re", ".", "groupby", "(", "'model'", ")", ":", "\n", "        ", "values", "=", "df_model", "[", "quantity", "]", "\n", "values", "=", "values", ".", "rolling", "(", "window", ",", "center", "=", "True", ")", ".", "mean", "(", ")", "\n", "\n", "kwargs", "=", "{", "}", "\n", "if", "color", ":", "\n", "            ", "kwargs", "[", "'color'", "]", "=", "color", "(", "model", ")", "\n", "", "pyplot", ".", "plot", "(", "df_model", "[", "x_axis", "]", ",", "\n", "values", ",", "\n", "label", "=", "model", ",", "\n", "**", "kwargs", ")", "\n", "print", "(", "model", ",", "df_model", "[", "x_axis", "]", ".", "max", "(", ")", ")", "\n", "\n", "", "pyplot", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.model_num_samples": [[134, 137], ["int", "re.findall"], "function", ["None"], ["", "def", "model_num_samples", "(", "model", ")", ":", "\n", "# the number of samples is mangled in the name", "\n", "    ", "return", "int", "(", "re", ".", "findall", "(", "'_([0-9]+)'", ",", "model", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.get_fps": [[139, 143], ["data.tolist.tolist", "numpy.array"], "function", ["None"], ["", "def", "get_fps", "(", "df", ")", ":", "\n", "    ", "data", "=", "df", "[", "'FPS'", "]", "\n", "data", "=", "data", ".", "tolist", "(", ")", "\n", "return", "np", ".", "array", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.best_within_normal_time": [[145, 216], ["print", "print", "zip", "max", "zip", "print", "zip", "pandas.DataFrame", "plotting.model_num_samples", "numpy.mean", "print", "df_model[].rolling().mean", "success_rate[].max", "print", "summary_data.append", "pandas.DataFrame.to_csv", "min", "ValueError", "ValueError", "df[].unique", "re.match", "sorted", "df_model[].rolling().mean", "print", "limits.append", "min", "df_model[].max", "list", "numpy.isnan", "ValueError", "df_model[].rolling", "zip", "df_model[].rolling", "df_model[].rolling().mean.max", "df_model[].rolling().mean.max", "int", "model.split", "df_model[].rolling().mean.max", "df_model[].max", "df_model[].max", "df_model[].rolling().mean.max"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.model_num_samples"], ["", "def", "best_within_normal_time", "(", "df", ",", "regex", ",", "patience", ",", "limit", "=", "'epochs'", ",", "window", "=", "1", ",", "normal_time", "=", "None", ",", "summary_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Compute the best success rate that is achieved in all runs within the normal time.\n\n    The normal time is defined as `patience * T`, where `T` is the time it takes for the run\n    with the most demonstrations to converge. `window` is the size of the sliding window that is\n    used for smoothing.\n\n    Returns a dataframe with the best success rate for the runs that match `regex`.\n\n    \"\"\"", "\n", "print", "(", ")", "\n", "print", "(", "regex", ")", "\n", "models", "=", "[", "model", "for", "model", "in", "df", "[", "'model'", "]", ".", "unique", "(", ")", "if", "re", ".", "match", "(", "regex", ",", "model", ")", "]", "\n", "num_samples", "=", "[", "model_num_samples", "(", "model", ")", "for", "model", "in", "models", "]", "\n", "# sort models according to the number of samples", "\n", "models", ",", "num_samples", "=", "zip", "(", "*", "sorted", "(", "list", "(", "zip", "(", "models", ",", "num_samples", ")", ")", ",", "key", "=", "lambda", "tupl", ":", "tupl", "[", "1", "]", ")", ")", "\n", "\n", "# choose normal time", "\n", "max_samples", "=", "max", "(", "num_samples", ")", "\n", "limits", "=", "[", "]", "\n", "for", "model", ",", "num", "in", "zip", "(", "models", ",", "num_samples", ")", ":", "\n", "        ", "if", "num", "==", "max_samples", ":", "\n", "            ", "df_model", "=", "df", "[", "df", "[", "'model'", "]", "==", "model", "]", "\n", "success_rate", "=", "df_model", "[", "'validation_success_rate'", "]", ".", "rolling", "(", "window", ",", "center", "=", "True", ")", ".", "mean", "(", ")", "\n", "if", "np", ".", "isnan", "(", "success_rate", ".", "max", "(", ")", ")", "or", "success_rate", ".", "max", "(", ")", "<", "0.99", ":", "\n", "                ", "raise", "ValueError", "(", "'{} has not solved the level yet, only at {} so far'", ".", "format", "(", "\n", "model", ",", "success_rate", ".", "max", "(", ")", ")", ")", "\n", "", "first_solved", "=", "(", "success_rate", ">", "0.99", ")", ".", "to_numpy", "(", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "row", "=", "df_model", ".", "iloc", "[", "first_solved", "]", "\n", "print", "(", "\"the model with {} samples first solved after {} epochs ({} seconds, {} frames)\"", ".", "format", "(", "\n", "max_samples", ",", "row", "[", "'update'", "]", ",", "row", "[", "'duration'", "]", ",", "row", "[", "'frames'", "]", ")", ")", "\n", "limits", ".", "append", "(", "patience", "*", "row", "[", "limit", "]", "+", "1", ")", "\n", "", "", "if", "not", "normal_time", ":", "\n", "        ", "normal_time", "=", "np", ".", "mean", "(", "limits", ")", "\n", "print", "(", "'using {} as normal time'", ".", "format", "(", "normal_time", ")", ")", "\n", "\n", "", "summary_data", "=", "[", "]", "\n", "\n", "# check how many examples is required to succeed within normal time", "\n", "min_samples_required", "=", "None", "\n", "need_more_time", "=", "False", "\n", "print", "(", "\"{: <100} {}\\t{}\\t{}\\t{}\"", ".", "format", "(", "\n", "'model_name'", ",", "'sr_nt'", ",", "'sr'", ",", "'dur_nt'", ",", "'dur_days'", ")", ")", "\n", "for", "model", ",", "num", "in", "zip", "(", "models", ",", "num_samples", ")", ":", "\n", "        ", "df_model", "=", "df", "[", "df", "[", "'model'", "]", "==", "model", "]", "\n", "success_rate", "=", "df_model", "[", "'validation_success_rate'", "]", ".", "rolling", "(", "window", ",", "center", "=", "True", ")", ".", "mean", "(", ")", "\n", "max_within_normal_time", "=", "success_rate", "[", "df_model", "[", "limit", "]", "<", "normal_time", "]", ".", "max", "(", ")", "\n", "if", "max_within_normal_time", ">", "0.99", ":", "\n", "            ", "min_samples_required", "=", "min", "(", "num", ",", "min_samples_required", "\n", "if", "min_samples_required", "\n", "else", "int", "(", "1e9", ")", ")", "\n", "", "if", "df_model", "[", "limit", "]", ".", "max", "(", ")", "<", "normal_time", ":", "\n", "            ", "need_more_time", "=", "True", "\n", "", "print", "(", "\"{: <50} {: <5.4g}\\t{: <5.4g}\\t{: <5.3g}\\t{:.3g}\"", ".", "format", "(", "\n", "model", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "\n", "max_within_normal_time", "*", "100", ",", "\n", "success_rate", ".", "max", "(", ")", "*", "100", ",", "\n", "df_model", "[", "limit", "]", ".", "max", "(", ")", "/", "normal_time", ",", "\n", "df_model", "[", "'duration'", "]", ".", "max", "(", ")", "/", "86400", ")", ")", "\n", "summary_data", ".", "append", "(", "(", "num", ",", "max_within_normal_time", ")", ")", "\n", "\n", "", "summary_df", "=", "pandas", ".", "DataFrame", "(", "summary_data", ",", "columns", "=", "(", "'num_samples'", ",", "'success_rate'", ")", ")", "\n", "if", "summary_path", ":", "\n", "        ", "summary_df", ".", "to_csv", "(", "summary_path", ")", "\n", "\n", "", "if", "min", "(", "num_samples", ")", "==", "min_samples_required", ":", "\n", "        ", "raise", "ValueError", "(", "'should be run with less samples!'", ")", "\n", "", "if", "need_more_time", ":", "\n", "        ", "raise", "ValueError", "(", "'should be run for more time!'", ")", "\n", "", "return", "summary_df", ",", "normal_time", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.estimate_sample_efficiency": [[218, 356], ["matplotlib.pyplot.subplots", "print", "numpy.log2", "numpy.argsort", "print", "sklearn.gaussian_process.GaussianProcessRegressor().fit", "print", "print", "numpy.arange", "GaussianProcessRegressor().fit.predict", "print", "range", "numpy.array", "numpy.cumsum", "print", "matplotlib.pyplot.tight_layout", "ValueError", "ValueError", "sklearn.gaussian_process.kernels.WhiteKernel", "numpy.diag", "axis.plot", "axis.plot", "axis.set_xlabel", "axis.set_ylabel", "axis.set_title", "axis.fill_between", "axis.fill_between", "axis.hlines", "len", "y_grid_mean[].copy", "f_grid_cov[].copy", "scipy.stats.multivariate_normal.cdf", "np.array.append", "ValueError", "axis.plot", "axis.plot", "axis.plot", "axis.set_xlabel", "axis.set_ylabel", "axis.hlines", "axis.vlines", "axis.vlines", "axis.vlines", "axis.set_title", "matplotlib.pyplot.savefig", "len", "print", "np.log2.min", "np.log2.max", "y.min", "y.max", "sklearn.gaussian_process.kernels.RBF", "sklearn.gaussian_process.GaussianProcessRegressor", "len", "numpy.zeros_like", "total_p.sum", "print", "print", "print", "np.array.sum", "np.array.sum", "len", "min", "max", "min", "max", "min", "max", "numpy.ones_like", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.diag_indices_from", "scipy.stats.norm.pdf", "numpy.diag", "numpy.diag", "numpy.diag", "numpy.diag"], "function", ["None"], ["", "def", "estimate_sample_efficiency", "(", "df", ",", "visualize", "=", "False", ",", "figure_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Estimate sample efficiency and its uncertainty using Gaussian Process.\n\n    This function interpolates between data points given in `df` using a Gaussian Process.\n    It returns a 99% interval based on the GP predictions.\n\n    \"\"\"", "\n", "f", ",", "axes", "=", "pyplot", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "15", ",", "5", ")", ")", "\n", "\n", "# preprocess the data", "\n", "print", "(", "\"{} datapoints\"", ".", "format", "(", "len", "(", "df", ")", ")", ")", "\n", "x", "=", "np", ".", "log2", "(", "df", "[", "'num_samples'", "]", ".", "values", ")", "\n", "y", "=", "df", "[", "'success_rate'", "]", "\n", "indices", "=", "np", ".", "argsort", "(", "x", ")", "\n", "x", "=", "x", "[", "indices", "]", "\n", "y", "=", "y", "[", "indices", "]", ".", "values", "\n", "\n", "success_threshold", "=", "0.99", "\n", "min_datapoints", "=", "5", "\n", "almost_threshold", "=", "0.95", "\n", "\n", "if", "(", "y", ">", "success_threshold", ")", ".", "sum", "(", ")", "<", "min_datapoints", ":", "\n", "        ", "raise", "ValueError", "(", "f\"You have less than {min_datapoints} datapoints above the threshold.\\n\"", "\n", "\"Consider running experiments with more examples.\"", ")", "\n", "", "if", "(", "(", "y", ">", "almost_threshold", ")", "&", "(", "y", "<", "success_threshold", ")", ")", ".", "sum", "(", ")", "<", "min_datapoints", ":", "\n", "        ", "raise", "ValueError", "(", "f\"You have less than {min_datapoints} datapoints\"", "\n", "\" for which the threshold is almost crossed.\\n\"", "\n", "\"Consider running experiments with less examples.\"", ")", "\n", "# try to throw away the extra points with low performance", "\n", "# the model is not suitable for handling those", "\n", "", "while", "True", ":", "\n", "        ", "if", "(", "(", "y", "[", "1", ":", "]", ">", "success_threshold", ")", ".", "sum", "(", ")", ">=", "min_datapoints", "\n", "and", "(", "(", "y", "[", "1", ":", "]", ">", "almost_threshold", ")", "&", "(", "y", "[", "1", ":", "]", "<", "success_threshold", ")", ")", ".", "sum", "(", ")", "\n", ">=", "min_datapoints", ")", ":", "\n", "            ", "print", "(", "'throwing away x={}, y={}'", ".", "format", "(", "x", "[", "0", "]", ",", "y", "[", "0", "]", ")", ")", "\n", "x", "=", "x", "[", "1", ":", "]", "\n", "y", "=", "y", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "\"min x: {}, max x: {}, min y: {}, max y: {}\"", ".", "format", "(", "x", ".", "min", "(", ")", ",", "x", ".", "max", "(", ")", ",", "y", ".", "min", "(", ")", ",", "y", ".", "max", "(", ")", ")", ")", "\n", "y", "=", "(", "y", "-", "success_threshold", ")", "*", "100", "\n", "\n", "# fit an RBF GP", "\n", "kernel", "=", "1.0", "*", "RBF", "(", ")", "+", "WhiteKernel", "(", "noise_level_bounds", "=", "(", "1e-10", ",", "10", ")", ")", "\n", "gp", "=", "GaussianProcessRegressor", "(", "kernel", "=", "kernel", ",", "alpha", "=", "0", ",", "normalize_y", "=", "False", ")", ".", "fit", "(", "x", "[", ":", ",", "None", "]", ",", "y", ")", "\n", "print", "(", "\"Kernel:\"", ",", "gp", ".", "kernel_", ")", "\n", "print", "(", "\"Marginal likelihood:\"", ",", "gp", ".", "log_marginal_likelihood_value_", ")", "\n", "\n", "# compute the success rate posterior", "\n", "grid_step", "=", "0.02", "\n", "grid", "=", "np", ".", "arange", "(", "x", "[", "0", "]", ",", "x", "[", "-", "1", "]", ",", "grid_step", ")", "\n", "y_grid_mean", ",", "y_grid_cov", "=", "gp", ".", "predict", "(", "grid", "[", ":", ",", "None", "]", ",", "return_cov", "=", "True", ")", "\n", "noise_level", "=", "gp", ".", "kernel_", ".", "k2", ".", "noise_level", "\n", "f_grid_cov", "=", "y_grid_cov", "-", "np", ".", "diag", "(", "np", ".", "ones_like", "(", "y_grid_cov", "[", "0", "]", ")", "*", "noise_level", ")", "\n", "\n", "if", "visualize", ":", "\n", "        ", "axis", "=", "axes", "[", "0", "]", "\n", "axis", ".", "plot", "(", "x", ",", "y", ",", "'o'", ")", "\n", "axis", ".", "plot", "(", "grid", ",", "y_grid_mean", ")", "\n", "axis", ".", "set_xlabel", "(", "'log2(N)'", ")", "\n", "axis", ".", "set_ylabel", "(", "'accuracy minus 99%'", ")", "\n", "axis", ".", "set_title", "(", "'Data Points & Posterior'", ")", "\n", "axis", ".", "fill_between", "(", "grid", ",", "y_grid_mean", "-", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "y_grid_cov", ")", ")", ",", "\n", "y_grid_mean", "+", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "y_grid_cov", ")", ")", ",", "\n", "alpha", "=", "0.2", ",", "color", "=", "'k'", ")", "\n", "axis", ".", "fill_between", "(", "grid", ",", "y_grid_mean", "-", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "f_grid_cov", ")", ")", ",", "\n", "y_grid_mean", "+", "np", ".", "sqrt", "(", "np", ".", "diag", "(", "f_grid_cov", ")", ")", ",", "\n", "alpha", "=", "0.2", ",", "color", "=", "'g'", ")", "\n", "axis", ".", "hlines", "(", "0", ",", "x", "[", "0", "]", ",", "x", "[", "-", "1", "]", ")", "\n", "\n", "# compute the N_min posterior", "\n", "", "probs", "=", "[", "]", "\n", "total_p", "=", "0.", "\n", "print", "(", "\"Estimating N_min using a grid of {} points\"", ".", "format", "(", "len", "(", "grid", ")", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "grid", ")", ")", ":", "\n", "        ", "mu", "=", "y_grid_mean", "[", ":", "j", "+", "1", "]", ".", "copy", "(", ")", "\n", "mu", "[", "j", "]", "*=", "-", "1", "\n", "sigma", "=", "f_grid_cov", "[", ":", "j", "+", "1", ",", ":", "j", "+", "1", "]", ".", "copy", "(", ")", "\n", "sigma", "[", "j", ",", ":", "j", "]", "*=", "-", "1", "\n", "sigma", "[", ":", "j", ",", "j", "]", "*=", "-", "1", "\n", "sigma", "[", "np", ".", "diag_indices_from", "(", "sigma", ")", "]", "+=", "1e-6", "\n", "# the probability that the first time the success rate crosses the threshold", "\n", "# will be between grid[j - 1] and grid[j]", "\n", "p", "=", "stats", ".", "multivariate_normal", ".", "cdf", "(", "np", ".", "zeros_like", "(", "mu", ")", ",", "mu", ",", "sigma", ",", "abseps", "=", "1e-3", ",", "releps", "=", "1e-3", ")", "\n", "probs", ".", "append", "(", "p", ")", "\n", "total_p", "+=", "p", "\n", "\n", "can_stop", "=", "total_p", ".", "sum", "(", ")", ">", "0.999", "\n", "if", "j", "and", "(", "can_stop", "or", "j", "%", "10", "==", "0", ")", ":", "\n", "            ", "print", "(", "'{} points done'", ".", "format", "(", "j", ")", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "[", "\"{:.3g}\"", ".", "format", "(", "p", ")", "for", "p", "in", "probs", "[", "-", "10", ":", "]", "]", ")", ")", "\n", "", "if", "can_stop", ":", "\n", "            ", "print", "(", "'the rest is unlikely'", ")", "\n", "break", "\n", "", "", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "if", "(", "probs", ".", "sum", "(", ")", "-", "1", ")", ">", "0.01", ":", "\n", "        ", "raise", "ValueError", "(", "\"oops, probabilities don't sum to one\"", ")", "\n", "", "else", ":", "\n", "# probs should sum to 1, but there is always a bit of error", "\n", "        ", "probs", "=", "probs", "/", "probs", ".", "sum", "(", ")", "\n", "\n", "", "first_prob", "=", "(", "probs", ">", "1e-10", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "subgrid", "=", "grid", "[", "first_prob", ":", "len", "(", "probs", ")", "]", "\n", "subprobs", "=", "probs", "[", "first_prob", ":", "]", "\n", "mean_n_min", "=", "(", "subprobs", "*", "subgrid", ")", ".", "sum", "(", ")", "\n", "mean_n_min_squared", "=", "(", "subprobs", "*", "subgrid", "**", "2", ")", ".", "sum", "(", ")", "\n", "std_n_min", "=", "(", "mean_n_min_squared", "-", "mean_n_min", "**", "2", ")", "**", "0.5", "\n", "if", "visualize", ":", "\n", "# visualize the N_min posterior density", "\n", "# visualize the non-Gaussianity of N_min posterior density", "\n", "        ", "axis", "=", "axes", "[", "2", "]", "\n", "axis", ".", "plot", "(", "subgrid", ",", "subprobs", ")", "\n", "axis", ".", "plot", "(", "subgrid", ",", "stats", ".", "norm", ".", "pdf", "(", "subgrid", ",", "mean_n_min", ",", "std_n_min", ")", "*", "grid_step", ")", "\n", "\n", "# compute the credible interval", "\n", "", "cdf", "=", "np", ".", "cumsum", "(", "probs", ")", "\n", "left", "=", "grid", "[", "(", "cdf", ">", "0.01", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "]", "\n", "right", "=", "grid", "[", "(", "cdf", ">", "0.99", ")", ".", "nonzero", "(", ")", "[", "0", "]", "[", "0", "]", "]", "\n", "print", "(", "\"99% credible interval for N_min:\"", ",", "2", "**", "left", ",", "2", "**", "right", ")", "\n", "\n", "if", "visualize", ":", "\n", "        ", "axis", "=", "axes", "[", "1", "]", "\n", "axis", ".", "plot", "(", "x", ",", "y", ",", "'o'", ")", "\n", "axis", ".", "set_xlabel", "(", "'log2(N)'", ")", "\n", "axis", ".", "set_ylabel", "(", "'accuracy minus 99%'", ")", "\n", "axis", ".", "hlines", "(", "0", ",", "x", "[", "0", "]", ",", "x", "[", "-", "1", "]", ")", "\n", "axis", ".", "vlines", "(", "left", ",", "min", "(", "y", ")", ",", "max", "(", "y", ")", ",", "color", "=", "'r'", ")", "\n", "axis", ".", "vlines", "(", "mean_n_min", ",", "min", "(", "y", ")", ",", "max", "(", "y", ")", ",", "color", "=", "'k'", ")", "\n", "axis", ".", "vlines", "(", "right", ",", "min", "(", "y", ")", ",", "max", "(", "y", ")", ",", "color", "=", "'r'", ")", "\n", "axis", ".", "set_title", "(", "'Data points & Conf. interval for min. number of samples'", ")", "\n", "\n", "", "pyplot", ".", "tight_layout", "(", ")", "\n", "if", "figure_path", ":", "\n", "        ", "pyplot", ".", "savefig", "(", "figure_path", ")", "\n", "", "return", "{", "'min'", ":", "2", "**", "left", ",", "'max'", ":", "2", "**", "right", ",", "\n", "'mean_log2'", ":", "mean_n_min", ",", "'std_log2'", ":", "std_n_min", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.ManyEnvs.__init__": [[60, 63], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "envs", ")", ":", "\n", "        ", "self", ".", "envs", "=", "envs", "\n", "self", ".", "done", "=", "[", "False", "]", "*", "len", "(", "self", ".", "envs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.ManyEnvs.seed": [[64, 66], ["env.seed", "zip"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed"], ["", "def", "seed", "(", "self", ",", "seeds", ")", ":", "\n", "        ", "[", "env", ".", "seed", "(", "seed", ")", "for", "seed", ",", "env", "in", "zip", "(", "seeds", ",", "self", ".", "envs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.ManyEnvs.reset": [[67, 71], ["env.reset", "len"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "many_obs", "=", "[", "env", ".", "reset", "(", ")", "for", "env", "in", "self", ".", "envs", "]", "\n", "self", ".", "done", "=", "[", "False", "]", "*", "len", "(", "self", ".", "envs", ")", "\n", "return", "many_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.ManyEnvs.step": [[72, 79], ["zip", "env.step", "enumerate", "zip"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "self", ".", "results", "=", "[", "env", ".", "step", "(", "action", ")", "if", "not", "done", "else", "self", ".", "last_results", "[", "i", "]", "\n", "for", "i", ",", "(", "env", ",", "action", ",", "done", ")", "\n", "in", "enumerate", "(", "zip", "(", "self", ".", "envs", ",", "actions", ",", "self", ".", "done", ")", ")", "]", "\n", "self", ".", "done", "=", "[", "result", "[", "2", "]", "for", "result", "in", "self", ".", "results", "]", "\n", "self", ".", "last_results", "=", "self", ".", "results", "\n", "return", "zip", "(", "*", "self", ".", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.ManyEnvs.render": [[80, 82], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.evaluate": [[7, 45], ["range", "agent.model.eval", "env.reset", "agent.on_reset", "logs[].append", "logs[].append", "logs[].append", "agent.model.train", "obss.append", "env.step", "agent.analyze_feedback", "env.reset", "agent.act"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.on_reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.act"], ["def", "evaluate", "(", "agent", ",", "env", ",", "episodes", ",", "model_agent", "=", "True", ",", "offsets", "=", "None", ")", ":", "\n", "# Initialize logs", "\n", "    ", "if", "model_agent", ":", "\n", "        ", "agent", ".", "model", ".", "eval", "(", ")", "\n", "", "logs", "=", "{", "\"num_frames_per_episode\"", ":", "[", "]", ",", "\"return_per_episode\"", ":", "[", "]", ",", "\"observations_per_episode\"", ":", "[", "]", "}", "\n", "\n", "if", "offsets", ":", "\n", "        ", "count", "=", "0", "\n", "\n", "", "for", "i", "in", "range", "(", "episodes", ")", ":", "\n", "        ", "if", "offsets", ":", "\n", "# Ensuring test on seed offsets that generated successful demonstrations", "\n", "            ", "while", "count", "!=", "offsets", "[", "i", "]", ":", "\n", "                ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "on_reset", "(", ")", "\n", "done", "=", "False", "\n", "\n", "num_frames", "=", "0", "\n", "returnn", "=", "0", "\n", "obss", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "agent", ".", "act", "(", "obs", ")", "[", "'action'", "]", "\n", "obss", ".", "append", "(", "obs", ")", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "agent", ".", "analyze_feedback", "(", "reward", ",", "done", ")", "\n", "num_frames", "+=", "1", "\n", "returnn", "+=", "reward", "\n", "\n", "\n", "", "logs", "[", "\"observations_per_episode\"", "]", ".", "append", "(", "obss", ")", "\n", "logs", "[", "\"num_frames_per_episode\"", "]", ".", "append", "(", "num_frames", ")", "\n", "logs", "[", "\"return_per_episode\"", "]", ".", "append", "(", "returnn", ")", "\n", "", "if", "model_agent", ":", "\n", "        ", "agent", ".", "model", ".", "train", "(", ")", "\n", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.evaluate_demo_agent": [[47, 56], ["len", "range", "min", "logs[].append", "len"], "function", ["None"], ["", "def", "evaluate_demo_agent", "(", "agent", ",", "episodes", ")", ":", "\n", "    ", "logs", "=", "{", "\"num_frames_per_episode\"", ":", "[", "]", ",", "\"return_per_episode\"", ":", "[", "]", "}", "\n", "\n", "number_of_demos", "=", "len", "(", "agent", ".", "demos", ")", "\n", "\n", "for", "demo_id", "in", "range", "(", "min", "(", "number_of_demos", ",", "episodes", ")", ")", ":", "\n", "        ", "logs", "[", "\"num_frames_per_episode\"", "]", ".", "append", "(", "len", "(", "agent", ".", "demos", "[", "demo_id", "]", ")", ")", "\n", "\n", "", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.batch_evaluate": [[85, 141], ["min", "range", "evaluate.ManyEnvs", "range", "gym.make", "envs.append", "range", "gym_minigrid.wrappers.RGBImgPartialObsWrapper.seed", "gym_minigrid.wrappers.RGBImgPartialObsWrapper.reset", "numpy.zeros", "numpy.zeros", "numpy.zeros", "logs[].extend", "logs[].extend", "logs[].extend", "gym_minigrid.wrappers.RGBImgPartialObsWrapper", "gym_minigrid.wrappers.RGBImgPartialObsWrapper.step", "agent.analyze_feedback", "numpy.array", "list", "list", "list", "logs[].extend", "logs[].extend", "agent.act_batch", "range", "range", "range", "obss[].append", "actions[].append", "action[].item"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.act_batch"], ["", "", "def", "batch_evaluate", "(", "agent", ",", "env_name", ",", "seed", ",", "episodes", ",", "return_obss_actions", "=", "False", ",", "pixel", "=", "False", ")", ":", "\n", "    ", "num_envs", "=", "min", "(", "256", ",", "episodes", ")", "\n", "\n", "envs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_envs", ")", ":", "\n", "        ", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "if", "pixel", ":", "\n", "            ", "env", "=", "RGBImgPartialObsWrapper", "(", "env", ")", "\n", "", "envs", ".", "append", "(", "env", ")", "\n", "", "env", "=", "ManyEnvs", "(", "envs", ")", "\n", "\n", "logs", "=", "{", "\n", "\"num_frames_per_episode\"", ":", "[", "]", ",", "\n", "\"return_per_episode\"", ":", "[", "]", ",", "\n", "\"observations_per_episode\"", ":", "[", "]", ",", "\n", "\"actions_per_episode\"", ":", "[", "]", ",", "\n", "\"seed_per_episode\"", ":", "[", "]", "\n", "}", "\n", "\n", "for", "i", "in", "range", "(", "(", "episodes", "+", "num_envs", "-", "1", ")", "//", "num_envs", ")", ":", "\n", "        ", "seeds", "=", "range", "(", "seed", "+", "i", "*", "num_envs", ",", "seed", "+", "(", "i", "+", "1", ")", "*", "num_envs", ")", "\n", "env", ".", "seed", "(", "seeds", ")", "\n", "\n", "many_obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "cur_num_frames", "=", "0", "\n", "num_frames", "=", "np", ".", "zeros", "(", "(", "num_envs", ",", ")", ",", "dtype", "=", "'int64'", ")", "\n", "returns", "=", "np", ".", "zeros", "(", "(", "num_envs", ",", ")", ")", "\n", "already_done", "=", "np", ".", "zeros", "(", "(", "num_envs", ",", ")", ",", "dtype", "=", "'bool'", ")", "\n", "if", "return_obss_actions", ":", "\n", "            ", "obss", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_envs", ")", "]", "\n", "actions", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_envs", ")", "]", "\n", "", "while", "(", "num_frames", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "action", "=", "agent", ".", "act_batch", "(", "many_obs", ")", "[", "'action'", "]", "\n", "if", "return_obss_actions", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_envs", ")", ":", "\n", "                    ", "if", "not", "already_done", "[", "i", "]", ":", "\n", "                        ", "obss", "[", "i", "]", ".", "append", "(", "many_obs", "[", "i", "]", ")", "\n", "actions", "[", "i", "]", ".", "append", "(", "action", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "", "", "", "many_obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "agent", ".", "analyze_feedback", "(", "reward", ",", "done", ")", "\n", "done", "=", "np", ".", "array", "(", "done", ")", "\n", "just_done", "=", "done", "&", "(", "~", "already_done", ")", "\n", "returns", "+=", "reward", "*", "just_done", "\n", "cur_num_frames", "+=", "1", "\n", "num_frames", "[", "just_done", "]", "=", "cur_num_frames", "\n", "already_done", "[", "done", "]", "=", "True", "\n", "\n", "", "logs", "[", "\"num_frames_per_episode\"", "]", ".", "extend", "(", "list", "(", "num_frames", ")", ")", "\n", "logs", "[", "\"return_per_episode\"", "]", ".", "extend", "(", "list", "(", "returns", ")", ")", "\n", "logs", "[", "\"seed_per_episode\"", "]", ".", "extend", "(", "list", "(", "seeds", ")", ")", "\n", "if", "return_obss_actions", ":", "\n", "            ", "logs", "[", "\"observations_per_episode\"", "]", ".", "extend", "(", "obss", ")", "\n", "logs", "[", "\"actions_per_episode\"", "]", ".", "extend", "(", "actions", ")", "\n", "\n", "", "", "return", "logs", "\n", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.arguments.ArgumentParser.__init__": [[12, 84], ["argparse.ArgumentParser.__init__", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "arguments.ArgumentParser.add_argument", "int", "int"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Base arguments", "\n", "self", ".", "add_argument", "(", "\"--env\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"name of the environment to train on (REQUIRED)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"name of the model (default: ENV_ALGO_TIME)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--pretrained-model\"", ",", "default", "=", "None", ",", "\n", "help", "=", "'If you\\'re using a pre-trained model and want the fine-tuned one to have a new name'", ")", "\n", "self", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"random seed; if 0, a random random seed will be used  (default: 1)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--task-id-seed\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"use the task id within a Slurm job array as the seed\"", ")", "\n", "self", ".", "add_argument", "(", "\"--procs\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "\"number of processes (default: 64)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--tb\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"log into Tensorboard\"", ")", "\n", "\n", "# Training arguments", "\n", "self", ".", "add_argument", "(", "\"--log-interval\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"number of updates between two logs (default: 10)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--frames\"", ",", "type", "=", "int", ",", "default", "=", "int", "(", "9e10", ")", ",", "\n", "help", "=", "\"number of frames of training (default: 9e10)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"patience for early stopping (default: 100)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "1000000", ",", "\n", "help", "=", "\"maximum number of epochs\"", ")", "\n", "self", ".", "add_argument", "(", "\"--epoch-length\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"number of examples per epoch; the whole dataset is used by if 0\"", ")", "\n", "self", ".", "add_argument", "(", "\"--frames-per-proc\"", ",", "type", "=", "int", ",", "default", "=", "40", ",", "\n", "help", "=", "\"number of frames per process before update (default: 40)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "\"learning rate (default: 1e-4)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--beta1\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "\"beta1 for Adam (default: 0.9)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--beta2\"", ",", "type", "=", "float", ",", "default", "=", "0.999", ",", "\n", "help", "=", "\"beta2 for Adam (default: 0.999)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--recurrence\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "\"number of timesteps gradient is backpropagated (default: 20)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--optim-eps\"", ",", "type", "=", "float", ",", "default", "=", "1e-5", ",", "\n", "help", "=", "\"Adam and RMSprop optimizer epsilon (default: 1e-5)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--optim-alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "\n", "help", "=", "\"RMSprop optimizer apha (default: 0.99)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "1280", ",", "\n", "help", "=", "\"batch size for PPO (default: 1280)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--entropy-coef\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "\n", "help", "=", "\"entropy term coefficient (default: 0.01)\"", ")", "\n", "\n", "# Model parameters", "\n", "self", ".", "add_argument", "(", "\"--image-dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "\"dimensionality of the image embedding.  Defaults to 128 in residual architectures\"", ")", "\n", "self", ".", "add_argument", "(", "\"--memory-dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "\"dimensionality of the memory LSTM\"", ")", "\n", "self", ".", "add_argument", "(", "\"--instr-dim\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "\"dimensionality of the memory LSTM\"", ")", "\n", "self", ".", "add_argument", "(", "\"--no-instr\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"don't use instructions in the model\"", ")", "\n", "self", ".", "add_argument", "(", "\"--instr-arch\"", ",", "default", "=", "\"gru\"", ",", "\n", "help", "=", "\"arch to encode instructions, possible values: gru, bigru, conv, bow (default: gru)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--no-mem\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ",", "\n", "help", "=", "\"don't use memory in the model\"", ")", "\n", "self", ".", "add_argument", "(", "\"--arch\"", ",", "default", "=", "'bow_endpool_res'", ",", "\n", "help", "=", "\"image embedding architecture\"", ")", "\n", "\n", "# Validation parameters", "\n", "self", ".", "add_argument", "(", "\"--val-seed\"", ",", "type", "=", "int", ",", "default", "=", "int", "(", "1e9", ")", ",", "\n", "help", "=", "\"seed for environment used for validation (default: 1e9)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--val-interval\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"number of epochs between two validation checks (default: 1)\"", ")", "\n", "self", ".", "add_argument", "(", "\"--val-episodes\"", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "\"number of episodes used to evaluate the agent, and to evaluate validation accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.arguments.ArgumentParser.parse_args": [[85, 102], ["super().parse_args", "numpy.random.randint", "int", "print"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.arguments.ArgumentParser.parse_args"], ["", "def", "parse_args", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Parse the arguments and perform some basic validation\n        \"\"\"", "\n", "\n", "args", "=", "super", "(", ")", ".", "parse_args", "(", ")", "\n", "\n", "# Set seed for all randomness sources", "\n", "if", "args", ".", "seed", "==", "0", ":", "\n", "            ", "args", ".", "seed", "=", "np", ".", "random", ".", "randint", "(", "10000", ")", "\n", "", "if", "args", ".", "task_id_seed", ":", "\n", "            ", "args", ".", "seed", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_ARRAY_TASK_ID'", "]", ")", "\n", "print", "(", "'set seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "\n", "# TODO: more validation", "\n", "\n", "", "return", "args", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.efficiency.main": [[16, 55], ["math.sqrt", "demo_counts.append", "math.ceil", "print", "babyai.cluster_specific.launch_job", "locals"], "function", ["None"], ["def", "main", "(", "env", ",", "seed", ",", "training_time", ",", "min_demos", ",", "max_demos", "=", "None", ",", "\n", "step_size", "=", "math", ".", "sqrt", "(", "2", ")", ",", "pretrained_model", "=", "None", ",", "level_type", "=", "'small'", ",", "\n", "val_episodes", "=", "512", ")", ":", "\n", "    ", "demos", "=", "env", "\n", "\n", "if", "not", "max_demos", ":", "\n", "        ", "max_demos", "=", "min_demos", "\n", "min_demos", "=", "max_demos", "-", "1", "\n", "\n", "", "demo_counts", "=", "[", "]", "\n", "demo_count", "=", "max_demos", "\n", "while", "demo_count", ">=", "min_demos", ":", "\n", "        ", "demo_counts", ".", "append", "(", "demo_count", ")", "\n", "demo_count", "=", "math", ".", "ceil", "(", "demo_count", "/", "step_size", ")", "\n", "\n", "", "for", "demo_count", "in", "demo_counts", ":", "\n", "# Decide on the parameters", "\n", "        ", "epoch_length", "=", "25600", "if", "level_type", "==", "'small'", "else", "51200", "\n", "epochs", "=", "training_time", "//", "epoch_length", "\n", "\n", "# Print info", "\n", "print", "(", "'{} demos, {} epochs of {} examples'", ".", "format", "(", "demo_count", ",", "epochs", ",", "epoch_length", ")", ")", "\n", "\n", "# Form the command", "\n", "model_name", "=", "'{}_seed{}_{}'", ".", "format", "(", "demos", ",", "seed", ",", "demo_count", ")", "\n", "if", "pretrained_model", ":", "\n", "            ", "model_name", "+=", "'_{}'", ".", "format", "(", "pretrained_model", ")", "\n", "", "jobname", "=", "'{}_efficiency'", ".", "format", "(", "demos", ",", "min_demos", ",", "max_demos", ")", "\n", "model_params", "=", "BIG_MODEL_PARAMS", "if", "level_type", "==", "'big'", "else", "SMALL_MODEL_PARAMS", "\n", "cmd", "=", "(", "'{model_params} --val-episodes {val_episodes}'", "\n", "' --seed {seed} --env {env} --demos {demos}'", "\n", "' --val-interval 1 --log-interval 1 --epoch-length {epoch_length}'", "\n", "' --model {model_name} --episodes {demo_count} --epochs {epochs} --patience {epochs}'", "\n", ".", "format", "(", "**", "locals", "(", ")", ")", ")", "\n", "if", "pretrained_model", ":", "\n", "            ", "cmd", "+=", "' --pretrained-model {}'", ".", "format", "(", "pretrained_model", ")", "\n", "", "launch_job", "(", "cmd", ",", "jobname", ")", "\n", "\n", "seed", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.EpochIndexSampler.__init__": [[37, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_examples", ",", "epoch_n_examples", ")", ":", "\n", "        ", "self", ".", "n_examples", "=", "n_examples", "\n", "self", ".", "epoch_n_examples", "=", "epoch_n_examples", "\n", "\n", "self", ".", "_last_seed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.EpochIndexSampler._reseed_indices_if_needed": [[43, 53], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "list", "numpy.random.RandomState.shuffle", "numpy.random.RandomState.shuffle", "logger.info", "range"], "methods", ["None"], ["", "def", "_reseed_indices_if_needed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "seed", "==", "self", ".", "_last_seed", ":", "\n", "            ", "return", "\n", "\n", "", "rng", "=", "numpy", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "self", ".", "_indices", "=", "list", "(", "range", "(", "self", ".", "n_examples", ")", ")", "\n", "rng", ".", "shuffle", "(", "self", ".", "_indices", ")", "\n", "logger", ".", "info", "(", "'reshuffle the dataset'", ")", "\n", "\n", "self", ".", "_last_seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.EpochIndexSampler.get_epoch_indices": [[54, 73], ["len", "imitation.EpochIndexSampler._reseed_indices_if_needed", "len", "min"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.EpochIndexSampler._reseed_indices_if_needed"], ["", "def", "get_epoch_indices", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Return indices corresponding to a particular epoch.\n\n        Tip: if you call this function with consecutive epoch numbers,\n        you will avoid expensive reshuffling of the index list.\n\n        \"\"\"", "\n", "seed", "=", "epoch", "*", "self", ".", "epoch_n_examples", "//", "self", ".", "n_examples", "\n", "offset", "=", "epoch", "*", "self", ".", "epoch_n_examples", "%", "self", ".", "n_examples", "\n", "\n", "indices", "=", "[", "]", "\n", "while", "len", "(", "indices", ")", "<", "self", ".", "epoch_n_examples", ":", "\n", "            ", "self", ".", "_reseed_indices_if_needed", "(", "seed", ")", "\n", "n_lacking", "=", "self", ".", "epoch_n_examples", "-", "len", "(", "indices", ")", "\n", "indices", "+=", "self", ".", "_indices", "[", "offset", ":", "offset", "+", "min", "(", "n_lacking", ",", "self", ".", "n_examples", "-", "offset", ")", "]", "\n", "offset", "=", "0", "\n", "seed", "+=", "1", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.__init__": [[76, 160], ["babyai.seed", "getattr", "babyai.ObssPreprocessor", "babyai.load_model", "imitation.ImitationLearning.obss_preprocessor.vocab.save", "babyai.save_model", "imitation.ImitationLearning.acmodel.train", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.device", "zip", "zip", "logger.info", "gym.make", "babyai.get_demos_path", "babyai.get_demos_path", "logger.info", "babyai.load_demos", "logger.info", "babyai.load_demos", "getattr", "getattr", "imitation.ImitationLearning.acmodel.cuda", "imitation.ImitationLearning.acmodel.parameters", "gym.make", "babyai.get_demos_path", "logger.info", "babyai.load_demos", "logger.info", "imitation.ImitationLearning.train_demos.extend", "logger.info", "babyai.get_demos_path", "logger.info", "babyai.load_demos", "logger.info", "imitation.ImitationLearning.val_demos.extend", "logger.info", "len", "logger.info", "babyai.load_model", "logger.info", "babyai.model.ACModel", "torch.cuda.is_available", "len", "ValueError", "len", "len", "logger.info", "len", "ValueError", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.load_model", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.save", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.save_model", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.load_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "utils", ".", "seed", "(", "self", ".", "args", ".", "seed", ")", "\n", "self", ".", "val_seed", "=", "self", ".", "args", ".", "val_seed", "\n", "\n", "# args.env is a list when training on multiple environments", "\n", "if", "getattr", "(", "args", ",", "'multi_env'", ",", "None", ")", ":", "\n", "            ", "self", ".", "env", "=", "[", "gym", ".", "make", "(", "item", ")", "for", "item", "in", "args", ".", "multi_env", "]", "\n", "\n", "self", ".", "train_demos", "=", "[", "]", "\n", "for", "demos", ",", "episodes", "in", "zip", "(", "args", ".", "multi_demos", ",", "args", ".", "multi_episodes", ")", ":", "\n", "                ", "demos_path", "=", "utils", ".", "get_demos_path", "(", "demos", ",", "None", ",", "None", ",", "valid", "=", "False", ")", "\n", "logger", ".", "info", "(", "'loading {} of {} demos'", ".", "format", "(", "episodes", ",", "demos", ")", ")", "\n", "train_demos", "=", "utils", ".", "load_demos", "(", "demos_path", ")", "\n", "logger", ".", "info", "(", "'loaded demos'", ")", "\n", "if", "episodes", ">", "len", "(", "train_demos", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"there are only {} train demos in {}\"", ".", "format", "(", "len", "(", "train_demos", ")", ",", "demos", ")", ")", "\n", "", "self", ".", "train_demos", ".", "extend", "(", "train_demos", "[", ":", "episodes", "]", ")", "\n", "logger", ".", "info", "(", "'So far, {} demos loaded'", ".", "format", "(", "len", "(", "self", ".", "train_demos", ")", ")", ")", "\n", "\n", "", "self", ".", "val_demos", "=", "[", "]", "\n", "for", "demos", ",", "episodes", "in", "zip", "(", "args", ".", "multi_demos", ",", "[", "args", ".", "val_episodes", "]", "*", "len", "(", "args", ".", "multi_demos", ")", ")", ":", "\n", "                ", "demos_path_valid", "=", "utils", ".", "get_demos_path", "(", "demos", ",", "None", ",", "None", ",", "valid", "=", "True", ")", "\n", "logger", ".", "info", "(", "'loading {} of {} valid demos'", ".", "format", "(", "episodes", ",", "demos", ")", ")", "\n", "valid_demos", "=", "utils", ".", "load_demos", "(", "demos_path_valid", ")", "\n", "logger", ".", "info", "(", "'loaded demos'", ")", "\n", "if", "episodes", ">", "len", "(", "valid_demos", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "'Using all the available {} demos to evaluate valid. accuracy'", ".", "format", "(", "len", "(", "valid_demos", ")", ")", ")", "\n", "", "self", ".", "val_demos", ".", "extend", "(", "valid_demos", "[", ":", "episodes", "]", ")", "\n", "logger", ".", "info", "(", "'So far, {} valid demos loaded'", ".", "format", "(", "len", "(", "self", ".", "val_demos", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Loaded all demos'", ")", "\n", "\n", "observation_space", "=", "self", ".", "env", "[", "0", "]", ".", "observation_space", "\n", "action_space", "=", "self", ".", "env", "[", "0", "]", ".", "action_space", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "env", "=", "gym", ".", "make", "(", "self", ".", "args", ".", "env", ")", "\n", "\n", "demos_path", "=", "utils", ".", "get_demos_path", "(", "args", ".", "demos", ",", "args", ".", "env", ",", "args", ".", "demos_origin", ",", "valid", "=", "False", ")", "\n", "demos_path_valid", "=", "utils", ".", "get_demos_path", "(", "args", ".", "demos", ",", "args", ".", "env", ",", "args", ".", "demos_origin", ",", "valid", "=", "True", ")", "\n", "\n", "logger", ".", "info", "(", "'loading demos'", ")", "\n", "self", ".", "train_demos", "=", "utils", ".", "load_demos", "(", "demos_path", ")", "\n", "logger", ".", "info", "(", "'loaded demos'", ")", "\n", "if", "args", ".", "episodes", ":", "\n", "                ", "if", "args", ".", "episodes", ">", "len", "(", "self", ".", "train_demos", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"there are only {} train demos\"", ".", "format", "(", "len", "(", "self", ".", "train_demos", ")", ")", ")", "\n", "", "self", ".", "train_demos", "=", "self", ".", "train_demos", "[", ":", "args", ".", "episodes", "]", "\n", "\n", "", "self", ".", "val_demos", "=", "utils", ".", "load_demos", "(", "demos_path_valid", ")", "\n", "if", "args", ".", "val_episodes", ">", "len", "(", "self", ".", "val_demos", ")", ":", "\n", "                ", "logger", ".", "info", "(", "'Using all the available {} demos to evaluate valid. accuracy'", ".", "format", "(", "len", "(", "self", ".", "val_demos", ")", ")", ")", "\n", "", "self", ".", "val_demos", "=", "self", ".", "val_demos", "[", ":", "self", ".", "args", ".", "val_episodes", "]", "\n", "\n", "observation_space", "=", "self", ".", "env", ".", "observation_space", "\n", "action_space", "=", "self", ".", "env", ".", "action_space", "\n", "\n", "", "self", ".", "obss_preprocessor", "=", "utils", ".", "ObssPreprocessor", "(", "args", ".", "model", ",", "observation_space", ",", "\n", "getattr", "(", "self", ".", "args", ",", "'pretrained_model'", ",", "None", ")", ")", "\n", "\n", "# Define actor-critic model", "\n", "self", ".", "acmodel", "=", "utils", ".", "load_model", "(", "args", ".", "model", ",", "raise_not_found", "=", "False", ")", "\n", "if", "self", ".", "acmodel", "is", "None", ":", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "'pretrained_model'", ",", "None", ")", ":", "\n", "                ", "self", ".", "acmodel", "=", "utils", ".", "load_model", "(", "args", ".", "pretrained_model", ",", "raise_not_found", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "'Creating new model'", ")", "\n", "self", ".", "acmodel", "=", "ACModel", "(", "self", ".", "obss_preprocessor", ".", "obs_space", ",", "action_space", ",", "\n", "args", ".", "image_dim", ",", "args", ".", "memory_dim", ",", "args", ".", "instr_dim", ",", "\n", "not", "self", ".", "args", ".", "no_instr", ",", "self", ".", "args", ".", "instr_arch", ",", "\n", "not", "self", ".", "args", ".", "no_mem", ",", "self", ".", "args", ".", "arch", ")", "\n", "", "", "self", ".", "obss_preprocessor", ".", "vocab", ".", "save", "(", ")", "\n", "utils", ".", "save_model", "(", "self", ".", "acmodel", ",", "args", ".", "model", ")", "\n", "\n", "self", ".", "acmodel", ".", "train", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "acmodel", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "self", ".", "args", ".", "lr", ",", "eps", "=", "self", ".", "args", ".", "optim_eps", ")", "\n", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "self", ".", "optimizer", ",", "step_size", "=", "100", ",", "gamma", "=", "0.9", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.default_model_name": [[161, 182], ["getattr", "datetime.datetime.now().strftime", "getattr", "datetime.datetime.now"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "default_model_name", "(", "args", ")", ":", "\n", "        ", "if", "getattr", "(", "args", ",", "'multi_env'", ",", "None", ")", ":", "\n", "# It's better to specify one's own model name for this scenario", "\n", "            ", "named_envs", "=", "'-'", ".", "join", "(", "args", ".", "multi_env", ")", "\n", "", "else", ":", "\n", "            ", "named_envs", "=", "args", ".", "env", "\n", "\n", "# Define model name", "\n", "", "suffix", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%y-%m-%d-%H-%M-%S\"", ")", "\n", "instr", "=", "args", ".", "instr_arch", "if", "args", ".", "instr_arch", "else", "\"noinstr\"", "\n", "model_name_parts", "=", "{", "\n", "'envs'", ":", "named_envs", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'instr'", ":", "instr", ",", "\n", "'seed'", ":", "args", ".", "seed", ",", "\n", "'suffix'", ":", "suffix", "}", "\n", "default_model_name", "=", "\"{envs}_IL_{arch}_{instr}_seed{seed}_{suffix}\"", ".", "format", "(", "**", "model_name_parts", ")", "\n", "if", "getattr", "(", "args", ",", "'pretrained_model'", ",", "None", ")", ":", "\n", "            ", "default_model_name", "=", "args", ".", "pretrained_model", "+", "'_pretrained_'", "+", "default_model_name", "\n", "", "return", "default_model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.starting_indexes": [[183, 188], ["numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "starting_indexes", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "if", "num_frames", "%", "self", ".", "args", ".", "recurrence", "==", "0", ":", "\n", "            ", "return", "np", ".", "arange", "(", "0", ",", "num_frames", ",", "self", ".", "args", ".", "recurrence", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "arange", "(", "0", ",", "num_frames", ",", "self", ".", "args", ".", "recurrence", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.run_epoch_recurrence": [[189, 224], ["min", "time.time", "range", "list", "len", "imitation.ImitationLearning.acmodel.eval", "logger.info", "sum", "imitation.ImitationLearning.run_epoch_recurrence_one_batch", "log[].append", "log[].append", "log[].append", "imitation.ImitationLearning.acmodel.train", "range", "numpy.random.shuffle", "numpy.random.shuffle", "len", "len", "len", "time.time"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.run_epoch_recurrence_one_batch", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train"], ["", "", "def", "run_epoch_recurrence", "(", "self", ",", "demos", ",", "is_training", "=", "False", ",", "indices", "=", "None", ")", ":", "\n", "        ", "if", "not", "indices", ":", "\n", "            ", "indices", "=", "list", "(", "range", "(", "len", "(", "demos", ")", ")", ")", "\n", "if", "is_training", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "", "", "batch_size", "=", "min", "(", "self", ".", "args", ".", "batch_size", ",", "len", "(", "demos", ")", ")", "\n", "offset", "=", "0", "\n", "\n", "if", "not", "is_training", ":", "\n", "            ", "self", ".", "acmodel", ".", "eval", "(", ")", "\n", "\n", "# Log dictionary", "\n", "", "log", "=", "{", "\"entropy\"", ":", "[", "]", ",", "\"policy_loss\"", ":", "[", "]", ",", "\"accuracy\"", ":", "[", "]", "}", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "frames", "=", "0", "\n", "for", "batch_index", "in", "range", "(", "len", "(", "indices", ")", "//", "batch_size", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"batch {}, FPS so far {}\"", ".", "format", "(", "\n", "batch_index", ",", "frames", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "if", "frames", "else", "0", ")", ")", "\n", "batch", "=", "[", "demos", "[", "i", "]", "for", "i", "in", "indices", "[", "offset", ":", "offset", "+", "batch_size", "]", "]", "\n", "frames", "+=", "sum", "(", "[", "len", "(", "demo", "[", "3", "]", ")", "for", "demo", "in", "batch", "]", ")", "\n", "\n", "_log", "=", "self", ".", "run_epoch_recurrence_one_batch", "(", "batch", ",", "is_training", "=", "is_training", ")", "\n", "\n", "log", "[", "\"entropy\"", "]", ".", "append", "(", "_log", "[", "\"entropy\"", "]", ")", "\n", "log", "[", "\"policy_loss\"", "]", ".", "append", "(", "_log", "[", "\"policy_loss\"", "]", ")", "\n", "log", "[", "\"accuracy\"", "]", ".", "append", "(", "_log", "[", "\"accuracy\"", "]", ")", "\n", "\n", "offset", "+=", "batch_size", "\n", "", "log", "[", "'total_frames'", "]", "=", "frames", "\n", "\n", "if", "not", "is_training", ":", "\n", "            ", "self", ".", "acmodel", ".", "train", "(", ")", "\n", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.run_epoch_recurrence_one_batch": [[225, 322], ["babyai.demos.transform_demos", "babyai.demos.transform_demos.sort", "numpy.array", "numpy.array", "len", "numpy.ones", "numpy.ones", "torch.tensor().unsqueeze", "torch.tensor", "torch.zeros", "numpy.zeros", "numpy.zeros", "torch.zeros", "imitation.ImitationLearning.obss_preprocessor", "imitation.ImitationLearning.acmodel._get_instr_embedding", "imitation.ImitationLearning.starting_indexes", "range", "float", "float", "float", "inds.append", "len", "imitation.ImitationLearning.obss_preprocessor", "range", "len", "imitation.ImitationLearning.obss_preprocessor", "imitation.ImitationLearning.acmodel", "dist.entropy().mean", "imitation.ImitationLearning.optimizer.zero_grad", "final_loss.backward", "imitation.ImitationLearning.optimizer.step", "len", "torch.tensor", "len", "len", "torch.no_grad", "len", "len", "dist.log_prob().mean", "dist.probs.max", "float", "len", "imitation.ImitationLearning.acmodel", "dist.entropy", "len", "len", "len", "sum", "dist.log_prob", "len", "action_step.unsqueeze", "len"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.transform_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel._get_instr_embedding", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.starting_indexes", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step"], ["", "def", "run_epoch_recurrence_one_batch", "(", "self", ",", "batch", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "batch", "=", "utils", ".", "demos", ".", "transform_demos", "(", "batch", ")", "\n", "batch", ".", "sort", "(", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "# Constructing flat batch and indices pointing to start of each demonstration", "\n", "flat_batch", "=", "[", "]", "\n", "inds", "=", "[", "0", "]", "\n", "\n", "for", "demo", "in", "batch", ":", "\n", "            ", "flat_batch", "+=", "demo", "\n", "inds", ".", "append", "(", "inds", "[", "-", "1", "]", "+", "len", "(", "demo", ")", ")", "\n", "\n", "", "flat_batch", "=", "np", ".", "array", "(", "flat_batch", ")", "\n", "inds", "=", "inds", "[", ":", "-", "1", "]", "\n", "num_frames", "=", "len", "(", "flat_batch", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "[", "len", "(", "flat_batch", ")", "]", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "mask", "[", "inds", "]", "=", "0", "\n", "mask", "=", "torch", ".", "tensor", "(", "mask", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# Observations, true action, values and done for each of the stored demostration", "\n", "obss", ",", "action_true", ",", "done", "=", "flat_batch", "[", ":", ",", "0", "]", ",", "flat_batch", "[", ":", ",", "1", "]", ",", "flat_batch", "[", ":", ",", "2", "]", "\n", "action_true", "=", "torch", ".", "tensor", "(", "[", "action", "for", "action", "in", "action_true", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# Memory to be stored", "\n", "memories", "=", "torch", ".", "zeros", "(", "[", "len", "(", "flat_batch", ")", ",", "self", ".", "acmodel", ".", "memory_size", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "episode_ids", "=", "np", ".", "zeros", "(", "len", "(", "flat_batch", ")", ")", "\n", "memory", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "self", ".", "acmodel", ".", "memory_size", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "preprocessed_first_obs", "=", "self", ".", "obss_preprocessor", "(", "obss", "[", "inds", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "instr_embedding", "=", "self", ".", "acmodel", ".", "_get_instr_embedding", "(", "preprocessed_first_obs", ".", "instr", ")", "\n", "\n", "# Loop terminates when every observation in the flat_batch has been handled", "\n", "while", "True", ":", "\n", "# taking observations and done located at inds", "\n", "            ", "obs", "=", "obss", "[", "inds", "]", "\n", "done_step", "=", "done", "[", "inds", "]", "\n", "preprocessed_obs", "=", "self", ".", "obss_preprocessor", "(", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# taking the memory till len(inds), as demos beyond that have already finished", "\n", "                ", "new_memory", "=", "self", ".", "acmodel", "(", "\n", "preprocessed_obs", ",", "\n", "memory", "[", ":", "len", "(", "inds", ")", ",", ":", "]", ",", "instr_embedding", "[", ":", "len", "(", "inds", ")", "]", ")", "[", "'memory'", "]", "\n", "\n", "", "memories", "[", "inds", ",", ":", "]", "=", "memory", "[", ":", "len", "(", "inds", ")", ",", ":", "]", "\n", "memory", "[", ":", "len", "(", "inds", ")", ",", ":", "]", "=", "new_memory", "\n", "episode_ids", "[", "inds", "]", "=", "range", "(", "len", "(", "inds", ")", ")", "\n", "\n", "# Updating inds, by removing those indices corresponding to which the demonstrations have finished", "\n", "inds", "=", "inds", "[", ":", "len", "(", "inds", ")", "-", "sum", "(", "done_step", ")", "]", "\n", "if", "len", "(", "inds", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "# Incrementing the remaining indices", "\n", "", "inds", "=", "[", "index", "+", "1", "for", "index", "in", "inds", "]", "\n", "\n", "# Here, actual backprop upto args.recurrence happens", "\n", "", "final_loss", "=", "0", "\n", "final_entropy", ",", "final_policy_loss", ",", "final_value_loss", "=", "0", ",", "0", ",", "0", "\n", "\n", "indexes", "=", "self", ".", "starting_indexes", "(", "num_frames", ")", "\n", "memory", "=", "memories", "[", "indexes", "]", "\n", "accuracy", "=", "0", "\n", "total_frames", "=", "len", "(", "indexes", ")", "*", "self", ".", "args", ".", "recurrence", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "recurrence", ")", ":", "\n", "            ", "obs", "=", "obss", "[", "indexes", "]", "\n", "preprocessed_obs", "=", "self", ".", "obss_preprocessor", "(", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "action_step", "=", "action_true", "[", "indexes", "]", "\n", "mask_step", "=", "mask", "[", "indexes", "]", "\n", "model_results", "=", "self", ".", "acmodel", "(", "\n", "preprocessed_obs", ",", "memory", "*", "mask_step", ",", "\n", "instr_embedding", "[", "episode_ids", "[", "indexes", "]", "]", ")", "\n", "dist", "=", "model_results", "[", "'dist'", "]", "\n", "memory", "=", "model_results", "[", "'memory'", "]", "\n", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "policy_loss", "=", "-", "dist", ".", "log_prob", "(", "action_step", ")", ".", "mean", "(", ")", "\n", "loss", "=", "policy_loss", "-", "self", ".", "args", ".", "entropy_coef", "*", "entropy", "\n", "action_pred", "=", "dist", ".", "probs", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "accuracy", "+=", "float", "(", "(", "action_pred", "==", "action_step", ".", "unsqueeze", "(", "1", ")", ")", ".", "sum", "(", ")", ")", "/", "total_frames", "\n", "final_loss", "+=", "loss", "\n", "final_entropy", "+=", "entropy", "\n", "final_policy_loss", "+=", "policy_loss", "\n", "indexes", "+=", "1", "\n", "\n", "", "final_loss", "/=", "self", ".", "args", ".", "recurrence", "\n", "\n", "if", "is_training", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "final_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "log", "=", "{", "}", "\n", "log", "[", "\"entropy\"", "]", "=", "float", "(", "final_entropy", "/", "self", ".", "args", ".", "recurrence", ")", "\n", "log", "[", "\"policy_loss\"", "]", "=", "float", "(", "final_policy_loss", "/", "self", ".", "args", ".", "recurrence", ")", "\n", "log", "[", "\"accuracy\"", "]", "=", "float", "(", "accuracy", ")", "\n", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.validate": [[323, 344], ["getattr", "babyai.load_agent.model.eval", "babyai.load_agent.model.train", "logger.info", "babyai.load_agent", "babyai.load_agent", "getattr", "babyai.evaluate.batch_evaluate"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.batch_evaluate"], ["", "def", "validate", "(", "self", ",", "episodes", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "logger", ".", "info", "(", "\"Validating the model\"", ")", "\n", "", "if", "getattr", "(", "self", ".", "args", ",", "'multi_env'", ",", "None", ")", ":", "\n", "            ", "agent", "=", "utils", ".", "load_agent", "(", "self", ".", "env", "[", "0", "]", ",", "model_name", "=", "self", ".", "args", ".", "model", ",", "argmax", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "agent", "=", "utils", ".", "load_agent", "(", "self", ".", "env", ",", "model_name", "=", "self", ".", "args", ".", "model", ",", "argmax", "=", "True", ")", "\n", "\n", "# Setting the agent model to the current model", "\n", "", "agent", ".", "model", "=", "self", ".", "acmodel", "\n", "\n", "agent", ".", "model", ".", "eval", "(", ")", "\n", "logs", "=", "[", "]", "\n", "\n", "for", "env_name", "in", "(", "[", "self", ".", "args", ".", "env", "]", "if", "not", "getattr", "(", "self", ".", "args", ",", "'multi_env'", ",", "None", ")", "\n", "else", "self", ".", "args", ".", "multi_env", ")", ":", "\n", "            ", "logs", "+=", "[", "batch_evaluate", "(", "agent", ",", "env_name", ",", "self", ".", "val_seed", ",", "episodes", ")", "]", "\n", "self", ".", "val_seed", "+=", "episodes", "\n", "", "agent", ".", "model", ".", "train", "(", ")", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.collect_returns": [[345, 349], ["imitation.ImitationLearning.validate", "numpy.mean", "numpy.mean", "enumerate"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.validate"], ["", "def", "collect_returns", "(", "self", ")", ":", "\n", "        ", "logs", "=", "self", ".", "validate", "(", "episodes", "=", "self", ".", "args", ".", "eval_episodes", ",", "verbose", "=", "False", ")", "\n", "mean_return", "=", "{", "tid", ":", "np", ".", "mean", "(", "log", "[", "\"return_per_episode\"", "]", ")", "for", "tid", ",", "log", "in", "enumerate", "(", "logs", ")", "}", "\n", "return", "mean_return", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train": [[350, 483], ["imitation.ImitationLearning.train.initial_status"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "train_demos", ",", "writer", ",", "csv_writer", ",", "status_path", ",", "header", ",", "reset_status", "=", "False", ")", ":", "\n", "# Load the status", "\n", "        ", "def", "initial_status", "(", ")", ":", "\n", "            ", "return", "{", "'i'", ":", "0", ",", "\n", "'num_frames'", ":", "0", ",", "\n", "'patience'", ":", "0", "}", "\n", "\n", "", "status", "=", "initial_status", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "status_path", ")", "and", "not", "reset_status", ":", "\n", "            ", "with", "open", "(", "status_path", ",", "'r'", ")", "as", "src", ":", "\n", "                ", "status", "=", "json", ".", "load", "(", "src", ")", "\n", "", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "status_path", ")", ")", ":", "\n", "# Ensure that the status directory exists", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "status_path", ")", ")", "\n", "\n", "# If the batch size is larger than the number of demos, we need to lower the batch size", "\n", "", "if", "self", ".", "args", ".", "batch_size", ">", "len", "(", "train_demos", ")", ":", "\n", "            ", "self", ".", "args", ".", "batch_size", "=", "len", "(", "train_demos", ")", "\n", "logger", ".", "info", "(", "\"Batch size too high. Setting it to the number of train demos ({})\"", ".", "format", "(", "len", "(", "train_demos", ")", ")", ")", "\n", "\n", "# Model saved initially to avoid \"Model not found Exception\" during first validation step", "\n", "", "utils", ".", "save_model", "(", "self", ".", "acmodel", ",", "self", ".", "args", ".", "model", ")", "\n", "\n", "# best mean return to keep track of performance on validation set", "\n", "best_success_rate", ",", "patience", ",", "i", "=", "0", ",", "0", ",", "0", "\n", "total_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "epoch_length", "=", "self", ".", "args", ".", "epoch_length", "\n", "if", "not", "epoch_length", ":", "\n", "            ", "epoch_length", "=", "len", "(", "train_demos", ")", "\n", "", "index_sampler", "=", "EpochIndexSampler", "(", "len", "(", "train_demos", ")", ",", "epoch_length", ")", "\n", "\n", "while", "status", "[", "'i'", "]", "<", "getattr", "(", "self", ".", "args", ",", "'epochs'", ",", "int", "(", "1e9", ")", ")", ":", "\n", "            ", "if", "'patience'", "not", "in", "status", ":", "# if for some reason you're finetuining with IL an RL pretrained agent", "\n", "                ", "status", "[", "'patience'", "]", "=", "0", "\n", "# Do not learn if using a pre-trained model that already lost patience", "\n", "", "if", "status", "[", "'patience'", "]", ">", "self", ".", "args", ".", "patience", ":", "\n", "                ", "break", "\n", "", "if", "status", "[", "'num_frames'", "]", ">", "self", ".", "args", ".", "frames", ":", "\n", "                ", "break", "\n", "\n", "", "update_start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "indices", "=", "index_sampler", ".", "get_epoch_indices", "(", "status", "[", "'i'", "]", ")", "\n", "log", "=", "self", ".", "run_epoch_recurrence", "(", "train_demos", ",", "is_training", "=", "True", ",", "indices", "=", "indices", ")", "\n", "\n", "# Learning rate scheduler", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "status", "[", "'num_frames'", "]", "+=", "log", "[", "'total_frames'", "]", "\n", "status", "[", "'i'", "]", "+=", "1", "\n", "\n", "update_end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Print logs", "\n", "if", "status", "[", "'i'", "]", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "total_ellapsed_time", "=", "int", "(", "time", ".", "time", "(", ")", "-", "total_start_time", ")", "\n", "\n", "fps", "=", "log", "[", "'total_frames'", "]", "/", "(", "update_end_time", "-", "update_start_time", ")", "\n", "duration", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "total_ellapsed_time", ")", "\n", "\n", "for", "key", "in", "log", ":", "\n", "                    ", "log", "[", "key", "]", "=", "np", ".", "mean", "(", "log", "[", "key", "]", ")", "\n", "\n", "", "train_data", "=", "[", "status", "[", "'i'", "]", ",", "status", "[", "'num_frames'", "]", ",", "fps", ",", "total_ellapsed_time", ",", "\n", "log", "[", "\"entropy\"", "]", ",", "log", "[", "\"policy_loss\"", "]", ",", "log", "[", "\"accuracy\"", "]", "]", "\n", "\n", "logger", ".", "info", "(", "\n", "\"U {} | F {:06} | FPS {:04.0f} | D {} | H {:.3f} | pL {: .3f} | A {: .3f}\"", ".", "format", "(", "*", "train_data", ")", ")", "\n", "\n", "# Log the gathered data only when we don't evaluate the validation metrics. It will be logged anyways", "\n", "# afterwards when status['i'] % self.args.val_interval == 0", "\n", "if", "status", "[", "'i'", "]", "%", "self", ".", "args", ".", "val_interval", "!=", "0", ":", "\n", "# instantiate a validation_log with empty strings when no validation is done", "\n", "                    ", "validation_data", "=", "[", "''", "]", "*", "len", "(", "[", "key", "for", "key", "in", "header", "if", "'valid'", "in", "key", "]", ")", "\n", "assert", "len", "(", "header", ")", "==", "len", "(", "train_data", "+", "validation_data", ")", "\n", "if", "self", ".", "args", ".", "tb", ":", "\n", "                        ", "for", "key", ",", "value", "in", "zip", "(", "header", ",", "train_data", ")", ":", "\n", "                            ", "writer", ".", "add_scalar", "(", "key", ",", "float", "(", "value", ")", ",", "status", "[", "'num_frames'", "]", ")", "\n", "", "", "csv_writer", ".", "writerow", "(", "train_data", "+", "validation_data", ")", "\n", "\n", "", "", "if", "status", "[", "'i'", "]", "%", "self", ".", "args", ".", "val_interval", "==", "0", ":", "\n", "\n", "                ", "valid_log", "=", "self", ".", "validate", "(", "self", ".", "args", ".", "val_episodes", ")", "\n", "mean_return", "=", "[", "np", ".", "mean", "(", "log", "[", "'return_per_episode'", "]", ")", "for", "log", "in", "valid_log", "]", "\n", "success_rate", "=", "[", "np", ".", "mean", "(", "[", "1", "if", "r", ">", "0", "else", "0", "for", "r", "in", "log", "[", "'return_per_episode'", "]", "]", ")", "for", "log", "in", "\n", "valid_log", "]", "\n", "\n", "val_log", "=", "self", ".", "run_epoch_recurrence", "(", "self", ".", "val_demos", ")", "\n", "validation_accuracy", "=", "np", ".", "mean", "(", "val_log", "[", "\"accuracy\"", "]", ")", "\n", "\n", "if", "status", "[", "'i'", "]", "%", "self", ".", "args", ".", "log_interval", "==", "0", ":", "\n", "                    ", "validation_data", "=", "[", "validation_accuracy", "]", "+", "mean_return", "+", "success_rate", "\n", "logger", ".", "info", "(", "(", "\"Validation: A {: .3f} \"", "+", "(", "\"| R {: .3f} \"", "*", "len", "(", "mean_return", ")", "+", "\n", "\"| S {: .3f} \"", "*", "len", "(", "success_rate", ")", ")", "\n", ")", ".", "format", "(", "*", "validation_data", ")", ")", "\n", "\n", "assert", "len", "(", "header", ")", "==", "len", "(", "train_data", "+", "validation_data", ")", "\n", "if", "self", ".", "args", ".", "tb", ":", "\n", "                        ", "for", "key", ",", "value", "in", "zip", "(", "header", ",", "train_data", "+", "validation_data", ")", ":", "\n", "                            ", "writer", ".", "add_scalar", "(", "key", ",", "float", "(", "value", ")", ",", "status", "[", "'num_frames'", "]", ")", "\n", "", "", "csv_writer", ".", "writerow", "(", "train_data", "+", "validation_data", ")", "\n", "\n", "# In case of a multi-env, the update condition would be \"better mean success rate\" !", "\n", "", "if", "np", ".", "mean", "(", "success_rate", ")", ">", "best_success_rate", ":", "\n", "                    ", "best_success_rate", "=", "np", ".", "mean", "(", "success_rate", ")", "\n", "status", "[", "'patience'", "]", "=", "0", "\n", "with", "open", "(", "status_path", ",", "'w'", ")", "as", "dst", ":", "\n", "                        ", "json", ".", "dump", "(", "status", ",", "dst", ")", "\n", "# Saving the model", "\n", "", "logger", ".", "info", "(", "\"Saving best model\"", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "self", ".", "acmodel", ".", "cpu", "(", ")", "\n", "", "utils", ".", "save_model", "(", "self", ".", "acmodel", ",", "self", ".", "args", ".", "model", "+", "\"_best\"", ")", "\n", "self", ".", "obss_preprocessor", ".", "vocab", ".", "save", "(", "utils", ".", "get_vocab_path", "(", "self", ".", "args", ".", "model", "+", "\"_best\"", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                        ", "self", ".", "acmodel", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "status", "[", "'patience'", "]", "+=", "1", "\n", "logger", ".", "info", "(", "\n", "\"Losing patience, new value={}, limit={}\"", ".", "format", "(", "status", "[", "'patience'", "]", ",", "self", ".", "args", ".", "patience", ")", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "self", ".", "acmodel", ".", "cpu", "(", ")", "\n", "", "utils", ".", "save_model", "(", "self", ".", "acmodel", ",", "self", ".", "args", ".", "model", ")", "\n", "self", ".", "obss_preprocessor", ".", "vocab", ".", "save", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "self", ".", "acmodel", ".", "cuda", "(", ")", "\n", "", "with", "open", "(", "status_path", ",", "'w'", ")", "as", "dst", ":", "\n", "                    ", "json", ".", "dump", "(", "status", ",", "dst", ")", "\n", "\n", "", "", "", "return", "best_success_rate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.FiLM.__init__": [[23, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.FiLM.apply"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "in_channels", ",", "imm_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "imm_channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "imm_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "imm_channels", ",", "out_channels", "=", "out_features", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_features", ")", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n", "self", ".", "apply", "(", "initialize_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.FiLM.forward": [[39, 46], ["torch.relu", "torch.relu", "torch.relu", "model.FiLM.conv2", "model.FiLM.weight().unsqueeze().unsqueeze", "model.FiLM.bias().unsqueeze().unsqueeze", "torch.relu", "torch.relu", "torch.relu", "model.FiLM.bn1", "model.FiLM.bn2", "model.FiLM.conv1", "model.FiLM.weight().unsqueeze", "model.FiLM.bias().unsqueeze", "model.FiLM.weight", "model.FiLM.bias"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "weight", "=", "self", ".", "weight", "(", "y", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "bias", "=", "self", ".", "bias", "(", "y", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "out", "=", "x", "*", "weight", "+", "bias", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ImageBOWEmbedding.__init__": [[49, 55], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "model.ImageBOWEmbedding.apply"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["   ", "def", "__init__", "(", "self", ",", "max_value", ",", "embedding_dim", ")", ":", "\n", "       ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_value", "=", "max_value", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "3", "*", "max_value", ",", "embedding_dim", ")", "\n", "self", ".", "apply", "(", "initialize_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ImageBOWEmbedding.forward": [[56, 60], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "model.ImageBOWEmbedding.embedding().sum().permute", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "model.ImageBOWEmbedding.embedding().sum", "model.ImageBOWEmbedding.embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "       ", "offsets", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "self", ".", "max_value", ",", "2", "*", "self", ".", "max_value", "]", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "inputs", "=", "(", "inputs", "+", "offsets", "[", "None", ",", ":", ",", "None", ",", "None", "]", ")", ".", "long", "(", ")", "\n", "return", "self", ".", "embedding", "(", "inputs", ")", ".", "sum", "(", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.__init__": [[63, 171], ["super().__init__", "model.ACModel.arch.split", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.ACModel.apply", "ValueError", "range", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "model.ACModel.add_heads", "ValueError", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "model.FiLM", "model.ACModel.controllers.append", "model.ACModel.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "str", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.ImageBOWEmbedding", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.add_heads"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "\n", "image_dim", "=", "128", ",", "memory_dim", "=", "128", ",", "instr_dim", "=", "128", ",", "\n", "use_instr", "=", "False", ",", "lang_model", "=", "\"gru\"", ",", "use_memory", "=", "False", ",", "\n", "arch", "=", "\"bow_endpool_res\"", ",", "aux_info", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "endpool", "=", "'endpool'", "in", "arch", "\n", "use_bow", "=", "'bow'", "in", "arch", "\n", "pixel", "=", "'pixel'", "in", "arch", "\n", "self", ".", "res", "=", "'res'", "in", "arch", "\n", "\n", "# Decide which components are enabled", "\n", "self", ".", "use_instr", "=", "use_instr", "\n", "self", ".", "use_memory", "=", "use_memory", "\n", "self", ".", "arch", "=", "arch", "\n", "self", ".", "lang_model", "=", "lang_model", "\n", "self", ".", "aux_info", "=", "aux_info", "\n", "if", "self", ".", "res", "and", "image_dim", "!=", "128", ":", "\n", "            ", "raise", "ValueError", "(", "f\"image_dim is {image_dim}, expected 128\"", ")", "\n", "", "self", ".", "image_dim", "=", "image_dim", "\n", "self", ".", "memory_dim", "=", "memory_dim", "\n", "self", ".", "instr_dim", "=", "instr_dim", "\n", "\n", "self", ".", "obs_space", "=", "obs_space", "\n", "\n", "for", "part", "in", "self", ".", "arch", ".", "split", "(", "'_'", ")", ":", "\n", "            ", "if", "part", "not", "in", "[", "'original'", ",", "'bow'", ",", "'pixels'", ",", "'endpool'", ",", "'res'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Incorrect architecture name: {}\"", ".", "format", "(", "self", ".", "arch", ")", ")", "\n", "\n", "# if not self.use_instr:", "\n", "#     raise ValueError(\"FiLM architecture can be used when instructions are enabled\")", "\n", "", "", "self", ".", "image_conv", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "*", "(", "[", "ImageBOWEmbedding", "(", "obs_space", "[", "'image'", "]", ",", "128", ")", "]", "if", "use_bow", "else", "[", "]", ")", ",", "\n", "*", "(", "[", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "3", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "8", ",", "8", ")", ",", "\n", "stride", "=", "8", ",", "padding", "=", "0", ")", "]", "if", "pixel", "else", "[", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "128", "if", "use_bow", "or", "pixel", "else", "3", ",", "out_channels", "=", "128", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", "if", "endpool", "else", "(", "2", ",", "2", ")", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "*", "(", "[", "]", "if", "endpool", "else", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "*", "(", "[", "]", "if", "endpool", "else", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "]", ")", "\n", "]", ")", "\n", "self", ".", "film_pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "7", ",", "7", ")", "if", "endpool", "else", "(", "2", ",", "2", ")", ",", "stride", "=", "2", ")", "\n", "\n", "# Define instruction embedding", "\n", "if", "self", ".", "use_instr", ":", "\n", "            ", "if", "self", ".", "lang_model", "in", "[", "'gru'", ",", "'bigru'", ",", "'attgru'", "]", ":", "\n", "                ", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "obs_space", "[", "\"instr\"", "]", ",", "self", ".", "instr_dim", ")", "\n", "if", "self", ".", "lang_model", "in", "[", "'gru'", ",", "'bigru'", ",", "'attgru'", "]", ":", "\n", "                    ", "gru_dim", "=", "self", ".", "instr_dim", "\n", "if", "self", ".", "lang_model", "in", "[", "'bigru'", ",", "'attgru'", "]", ":", "\n", "                        ", "gru_dim", "//=", "2", "\n", "", "self", ".", "instr_rnn", "=", "nn", ".", "GRU", "(", "\n", "self", ".", "instr_dim", ",", "gru_dim", ",", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "(", "self", ".", "lang_model", "in", "[", "'bigru'", ",", "'attgru'", "]", ")", ")", "\n", "self", ".", "final_instr_dim", "=", "self", ".", "instr_dim", "\n", "", "else", ":", "\n", "                    ", "kernel_dim", "=", "64", "\n", "kernel_sizes", "=", "[", "3", ",", "4", "]", "\n", "self", ".", "instr_convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "1", ",", "kernel_dim", ",", "(", "K", ",", "self", ".", "instr_dim", ")", ")", "for", "K", "in", "kernel_sizes", "]", ")", "\n", "self", ".", "final_instr_dim", "=", "kernel_dim", "*", "len", "(", "kernel_sizes", ")", "\n", "\n", "", "", "if", "self", ".", "lang_model", "==", "'attgru'", ":", "\n", "                ", "self", ".", "memory2key", "=", "nn", ".", "Linear", "(", "self", ".", "memory_size", ",", "self", ".", "final_instr_dim", ")", "\n", "\n", "", "num_module", "=", "2", "\n", "self", ".", "controllers", "=", "[", "]", "\n", "for", "ni", "in", "range", "(", "num_module", ")", ":", "\n", "                ", "mod", "=", "FiLM", "(", "\n", "in_features", "=", "self", ".", "final_instr_dim", ",", "\n", "out_features", "=", "128", "if", "ni", "<", "num_module", "-", "1", "else", "self", ".", "image_dim", ",", "\n", "in_channels", "=", "128", ",", "imm_channels", "=", "128", ")", "\n", "self", ".", "controllers", ".", "append", "(", "mod", ")", "\n", "self", ".", "add_module", "(", "'FiLM_'", "+", "str", "(", "ni", ")", ",", "mod", ")", "\n", "\n", "# Define memory and resize image embedding", "\n", "", "", "self", ".", "embedding_size", "=", "self", ".", "image_dim", "\n", "if", "self", ".", "use_memory", ":", "\n", "            ", "self", ".", "memory_rnn", "=", "nn", ".", "LSTMCell", "(", "self", ".", "image_dim", ",", "self", ".", "memory_dim", ")", "\n", "self", ".", "embedding_size", "=", "self", ".", "semi_memory_size", "\n", "\n", "# Define actor's model", "\n", "", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_space", ".", "n", ")", "\n", ")", "\n", "\n", "# Define critic's model", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", "\n", ")", "\n", "\n", "# Initialize parameters correctly", "\n", "self", ".", "apply", "(", "initialize_parameters", ")", "\n", "\n", "# Define head for extra info", "\n", "if", "self", ".", "aux_info", ":", "\n", "            ", "self", ".", "extra_heads", "=", "None", "\n", "self", ".", "add_heads", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.add_heads": [[172, 196], ["torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "model.ACModel.extra_heads[].apply", "torch.Linear", "torch.Linear", "torch.Linear", "required_heads[].startswith", "int", "torch.Linear", "torch.Linear", "torch.Linear", "required_heads[].startswith", "required_heads[].endswith", "ValueError", "required_heads[].split", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ValueError", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "", "def", "add_heads", "(", "self", ")", ":", "\n", "        ", "'''\n        When using auxiliary tasks, the environment yields at each step some binary, continous, or multiclass\n        information. The agent needs to predict those information. This function add extra heads to the model\n        that output the predictions. There is a head per extra information (the head type depends on the extra\n        information type).\n        '''", "\n", "self", ".", "extra_heads", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "info", "in", "self", ".", "aux_info", ":", "\n", "            ", "if", "required_heads", "[", "info", "]", "==", "'binary'", ":", "\n", "                ", "self", ".", "extra_heads", "[", "info", "]", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "1", ")", "\n", "", "elif", "required_heads", "[", "info", "]", ".", "startswith", "(", "'multiclass'", ")", ":", "\n", "                ", "n_classes", "=", "int", "(", "required_heads", "[", "info", "]", ".", "split", "(", "'multiclass'", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "extra_heads", "[", "info", "]", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "n_classes", ")", "\n", "", "elif", "required_heads", "[", "info", "]", ".", "startswith", "(", "'continuous'", ")", ":", "\n", "                ", "if", "required_heads", "[", "info", "]", ".", "endswith", "(", "'01'", ")", ":", "\n", "                    ", "self", ".", "extra_heads", "[", "info", "]", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Only continous01 is implemented'", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Type not supported'", ")", "\n", "# initializing these parameters independently is done in order to have consistency of results when using", "\n", "# supervised-loss-coef = 0 and when not using any extra binary information", "\n", "", "self", ".", "extra_heads", "[", "info", "]", ".", "apply", "(", "initialize_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.add_extra_heads_if_necessary": [[197, 208], ["model.ACModel.add_heads", "ValueError", "hasattr", "set", "set"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.add_heads"], ["", "", "def", "add_extra_heads_if_necessary", "(", "self", ",", "aux_info", ")", ":", "\n", "        ", "'''\n        This function allows using a pre-trained model without aux_info and add aux_info to it and still make\n        it possible to finetune.\n        '''", "\n", "try", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'aux_info'", ")", "or", "not", "set", "(", "self", ".", "aux_info", ")", "==", "set", "(", "aux_info", ")", ":", "\n", "                ", "self", ".", "aux_info", "=", "aux_info", "\n", "self", ".", "add_heads", "(", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "raise", "ValueError", "(", "'Could not add extra heads'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.memory_size": [[209, 212], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "memory_size", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "semi_memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.semi_memory_size": [[213, 216], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "semi_memory_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "memory_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel.forward": [[217, 274], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "model.ACModel.image_conv", "torch.relu", "torch.relu", "torch.relu", "model.ACModel.reshape", "model.ACModel.actor", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "model.ACModel.critic", "model.ACModel.squeeze", "model.ACModel._get_instr_embedding", "model.ACModel.memory2key", "torch.softmax", "torch.softmax", "torch.softmax", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "model.ACModel.film_pool", "model.ACModel.memory_rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "dict", "controller", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel._get_instr_embedding"], ["", "def", "forward", "(", "self", ",", "obs", ",", "memory", ",", "instr_embedding", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_instr", "and", "instr_embedding", "is", "None", ":", "\n", "            ", "instr_embedding", "=", "self", ".", "_get_instr_embedding", "(", "obs", ".", "instr", ")", "\n", "", "if", "self", ".", "use_instr", "and", "self", ".", "lang_model", "==", "\"attgru\"", ":", "\n", "# outputs: B x L x D", "\n", "# memory: B x M", "\n", "            ", "mask", "=", "(", "obs", ".", "instr", "!=", "0", ")", ".", "float", "(", ")", "\n", "# The mask tensor has the same length as obs.instr, and", "\n", "# thus can be both shorter and longer than instr_embedding.", "\n", "# It can be longer if instr_embedding is computed", "\n", "# for a subbatch of obs.instr.", "\n", "# It can be shorter if obs.instr is a subbatch of", "\n", "# the batch that instr_embeddings was computed for.", "\n", "# Here, we make sure that mask and instr_embeddings", "\n", "# have equal length along dimension 1.", "\n", "mask", "=", "mask", "[", ":", ",", ":", "instr_embedding", ".", "shape", "[", "1", "]", "]", "\n", "instr_embedding", "=", "instr_embedding", "[", ":", ",", ":", "mask", ".", "shape", "[", "1", "]", "]", "\n", "\n", "keys", "=", "self", ".", "memory2key", "(", "memory", ")", "\n", "pre_softmax", "=", "(", "keys", "[", ":", ",", "None", ",", ":", "]", "*", "instr_embedding", ")", ".", "sum", "(", "2", ")", "+", "1000", "*", "mask", "\n", "attention", "=", "F", ".", "softmax", "(", "pre_softmax", ",", "dim", "=", "1", ")", "\n", "instr_embedding", "=", "(", "instr_embedding", "*", "attention", "[", ":", ",", ":", ",", "None", "]", ")", ".", "sum", "(", "1", ")", "\n", "\n", "", "x", "=", "torch", ".", "transpose", "(", "torch", ".", "transpose", "(", "obs", ".", "image", ",", "1", ",", "3", ")", ",", "2", ",", "3", ")", "\n", "\n", "if", "'pixel'", "in", "self", ".", "arch", ":", "\n", "            ", "x", "/=", "256.0", "\n", "", "x", "=", "self", ".", "image_conv", "(", "x", ")", "\n", "if", "self", ".", "use_instr", ":", "\n", "            ", "for", "controller", "in", "self", ".", "controllers", ":", "\n", "                ", "out", "=", "controller", "(", "x", ",", "instr_embedding", ")", "\n", "if", "self", ".", "res", ":", "\n", "                    ", "out", "+=", "x", "\n", "", "x", "=", "out", "\n", "", "", "x", "=", "F", ".", "relu", "(", "self", ".", "film_pool", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_memory", ":", "\n", "            ", "hidden", "=", "(", "memory", "[", ":", ",", ":", "self", ".", "semi_memory_size", "]", ",", "memory", "[", ":", ",", "self", ".", "semi_memory_size", ":", "]", ")", "\n", "hidden", "=", "self", ".", "memory_rnn", "(", "x", ",", "hidden", ")", "\n", "embedding", "=", "hidden", "[", "0", "]", "\n", "memory", "=", "torch", ".", "cat", "(", "hidden", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "x", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'aux_info'", ")", "and", "self", ".", "aux_info", ":", "\n", "            ", "extra_predictions", "=", "{", "info", ":", "self", ".", "extra_heads", "[", "info", "]", "(", "embedding", ")", "for", "info", "in", "self", ".", "extra_heads", "}", "\n", "", "else", ":", "\n", "            ", "extra_predictions", "=", "dict", "(", ")", "\n", "\n", "", "x", "=", "self", ".", "actor", "(", "embedding", ")", "\n", "dist", "=", "Categorical", "(", "logits", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ")", "\n", "\n", "x", "=", "self", ".", "critic", "(", "embedding", ")", "\n", "value", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "{", "'dist'", ":", "dist", ",", "'value'", ":", "value", ",", "'memory'", ":", "memory", ",", "'extra_predictions'", ":", "extra_predictions", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.ACModel._get_instr_embedding": [[275, 313], ["model.ACModel.instr_rnn", "model.ACModel.word_embedding", "final_states.view.view.transpose().contiguous", "final_states.view.view.view", "ValueError", "lengths.sort", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "torch.LongTensor().fill_", "enumerate", "model.ACModel.word_embedding", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model.ACModel.instr_rnn", "model.ACModel.instr_rnn", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "range", "iperm_idx.cuda.cuda.cuda", "seq_lengths.data.cpu().numpy", "model.ACModel.word_embedding", "final_states.view.view.transpose", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "seq_lengths.data.cpu"], "methods", ["None"], ["", "def", "_get_instr_embedding", "(", "self", ",", "instr", ")", ":", "\n", "        ", "lengths", "=", "(", "instr", "!=", "0", ")", ".", "sum", "(", "1", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "lang_model", "==", "'gru'", ":", "\n", "            ", "out", ",", "_", "=", "self", ".", "instr_rnn", "(", "self", ".", "word_embedding", "(", "instr", ")", ")", "\n", "hidden", "=", "out", "[", "range", "(", "len", "(", "lengths", ")", ")", ",", "lengths", "-", "1", ",", ":", "]", "\n", "return", "hidden", "\n", "\n", "", "elif", "self", ".", "lang_model", "in", "[", "'bigru'", ",", "'attgru'", "]", ":", "\n", "            ", "masks", "=", "(", "instr", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n", "if", "lengths", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "                ", "seq_lengths", ",", "perm_idx", "=", "lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "iperm_idx", "=", "torch", ".", "LongTensor", "(", "perm_idx", ".", "shape", ")", ".", "fill_", "(", "0", ")", "\n", "if", "instr", ".", "is_cuda", ":", "iperm_idx", "=", "iperm_idx", ".", "cuda", "(", ")", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "perm_idx", ")", ":", "\n", "                    ", "iperm_idx", "[", "v", ".", "data", "]", "=", "i", "\n", "\n", "", "inputs", "=", "self", ".", "word_embedding", "(", "instr", ")", "\n", "inputs", "=", "inputs", "[", "perm_idx", "]", "\n", "\n", "inputs", "=", "pack_padded_sequence", "(", "inputs", ",", "seq_lengths", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "\n", "outputs", ",", "final_states", "=", "self", ".", "instr_rnn", "(", "inputs", ")", "\n", "", "else", ":", "\n", "                ", "instr", "=", "instr", "[", ":", ",", "0", ":", "lengths", "[", "0", "]", "]", "\n", "outputs", ",", "final_states", "=", "self", ".", "instr_rnn", "(", "self", ".", "word_embedding", "(", "instr", ")", ")", "\n", "iperm_idx", "=", "None", "\n", "", "final_states", "=", "final_states", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "final_states", "=", "final_states", ".", "view", "(", "final_states", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "if", "iperm_idx", "is", "not", "None", ":", "\n", "                ", "outputs", ",", "_", "=", "pad_packed_sequence", "(", "outputs", ",", "batch_first", "=", "True", ")", "\n", "outputs", "=", "outputs", "[", "iperm_idx", "]", "\n", "final_states", "=", "final_states", "[", "iperm_idx", "]", "\n", "\n", "", "return", "outputs", "if", "self", ".", "lang_model", "==", "'attgru'", "else", "final_states", "\n", "\n", "", "else", ":", "\n", "            ", "ValueError", "(", "\"Undefined instruction architecture: {}\"", ".", "format", "(", "self", ".", "use_instr", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.model.initialize_parameters": [[12, 19], ["classname.find", "m.weight.data.normal_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "m.bias.data.fill_", "m.weight.data.pow().sum", "m.weight.data.pow"], "function", ["None"], ["def", "initialize_parameters", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "m", ".", "weight", ".", "data", "*=", "1", "/", "torch", ".", "sqrt", "(", "m", ".", "weight", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.__init__": [[16, 23], ["format.get_vocab_path", "os.path.exists", "json.load", "open"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.get_vocab_path"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "path", "=", "get_vocab_path", "(", "model_name", ")", "\n", "self", ".", "max_size", "=", "100", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "path", ")", ":", "\n", "            ", "self", ".", "vocab", "=", "json", ".", "load", "(", "open", "(", "self", ".", "path", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "vocab", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.__getitem__": [[24, 30], ["format.Vocabulary.vocab.keys", "len", "ValueError", "len"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "not", "(", "token", "in", "self", ".", "vocab", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "vocab", ")", ">=", "self", ".", "max_size", ":", "\n", "                ", "raise", "ValueError", "(", "\"Maximum vocabulary capacity reached\"", ")", "\n", "", "self", ".", "vocab", "[", "token", "]", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", "\n", "", "return", "self", ".", "vocab", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.save": [[31, 36], ["utils.create_folders_if_necessary", "json.dump", "open"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.create_folders_if_necessary"], ["", "def", "save", "(", "self", ",", "path", "=", "None", ")", ":", "\n", "        ", "if", "path", "is", "None", ":", "\n", "            ", "path", "=", "self", ".", "path", "\n", "", "utils", ".", "create_folders_if_necessary", "(", "path", ")", "\n", "json", ".", "dump", "(", "self", ".", "vocab", ",", "open", "(", "path", ",", "\"w\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.copy_vocab_from": [[37, 42], ["format.Vocabulary.vocab.update"], "methods", ["None"], ["", "def", "copy_vocab_from", "(", "self", ",", "other", ")", ":", "\n", "        ", "'''\n        Copy the vocabulary of another Vocabulary object to the current object.\n        '''", "\n", "self", ".", "vocab", ".", "update", "(", "other", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.InstructionsPreprocessor.__init__": [[45, 58], ["format.Vocabulary", "format.get_vocab_path", "format.get_vocab_path", "os.path.exists", "os.path.exists", "format.Vocabulary", "format.InstructionsPreprocessor.vocab.copy_vocab_from", "FileNotFoundError"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.get_vocab_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.get_vocab_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.copy_vocab_from"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "load_vocab_from", "=", "None", ")", ":", "\n", "        ", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "vocab", "=", "Vocabulary", "(", "model_name", ")", "\n", "\n", "path", "=", "get_vocab_path", "(", "model_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "and", "load_vocab_from", "is", "not", "None", ":", "\n", "# self.vocab.vocab should be an empty dict", "\n", "            ", "secondary_path", "=", "get_vocab_path", "(", "load_vocab_from", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "secondary_path", ")", ":", "\n", "                ", "old_vocab", "=", "Vocabulary", "(", "load_vocab_from", ")", "\n", "self", ".", "vocab", ".", "copy_vocab_from", "(", "old_vocab", ")", "\n", "", "else", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "'No pre-trained model under the specified name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.InstructionsPreprocessor.__call__": [[59, 76], ["numpy.zeros", "enumerate", "torch.tensor", "re.findall", "numpy.array", "raw_instrs.append", "max", "obs[].lower", "len", "len", "len"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "obss", ",", "device", "=", "None", ")", ":", "\n", "        ", "raw_instrs", "=", "[", "]", "\n", "max_instr_len", "=", "0", "\n", "\n", "for", "obs", "in", "obss", ":", "\n", "            ", "tokens", "=", "re", ".", "findall", "(", "\"([a-z]+)\"", ",", "obs", "[", "\"mission\"", "]", ".", "lower", "(", ")", ")", "\n", "instr", "=", "numpy", ".", "array", "(", "[", "self", ".", "vocab", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "raw_instrs", ".", "append", "(", "instr", ")", "\n", "max_instr_len", "=", "max", "(", "len", "(", "instr", ")", ",", "max_instr_len", ")", "\n", "\n", "", "instrs", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "obss", ")", ",", "max_instr_len", ")", ")", "\n", "\n", "for", "i", ",", "instr", "in", "enumerate", "(", "raw_instrs", ")", ":", "\n", "            ", "instrs", "[", "i", ",", ":", "len", "(", "instr", ")", "]", "=", "instr", "\n", "\n", "", "instrs", "=", "torch", ".", "tensor", "(", "instrs", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "instrs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.RawImagePreprocessor.__call__": [[79, 83], ["numpy.array", "torch.tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "obss", ",", "device", "=", "None", ")", ":", "\n", "        ", "images", "=", "numpy", ".", "array", "(", "[", "obs", "[", "\"image\"", "]", "for", "obs", "in", "obss", "]", ")", "\n", "images", "=", "torch", ".", "tensor", "(", "images", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.IntImagePreprocessor.__init__": [[86, 91], ["int", "numpy.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_channels", ",", "max_high", "=", "255", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "max_high", "=", "max_high", "\n", "self", ".", "offsets", "=", "numpy", ".", "arange", "(", "num_channels", ")", "*", "max_high", "\n", "self", ".", "max_size", "=", "int", "(", "num_channels", "*", "max_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.IntImagePreprocessor.__call__": [[92, 98], ["numpy.array", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "obss", ",", "device", "=", "None", ")", ":", "\n", "        ", "images", "=", "numpy", ".", "array", "(", "[", "obs", "[", "\"image\"", "]", "for", "obs", "in", "obss", "]", ")", "\n", "# The padding index is 0 for all the channels", "\n", "images", "=", "(", "images", "+", "self", ".", "offsets", ")", "*", "(", "images", ">", "0", ")", "\n", "images", "=", "torch", ".", "tensor", "(", "images", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.ObssPreprocessor.__init__": [[101, 108], ["format.RawImagePreprocessor", "format.InstructionsPreprocessor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "obs_space", "=", "None", ",", "load_vocab_from", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_preproc", "=", "RawImagePreprocessor", "(", ")", "\n", "self", ".", "instr_preproc", "=", "InstructionsPreprocessor", "(", "model_name", ",", "load_vocab_from", ")", "\n", "self", ".", "vocab", "=", "self", ".", "instr_preproc", ".", "vocab", "\n", "self", ".", "obs_space", "=", "{", "\n", "\"image\"", ":", "147", ",", "\n", "\"instr\"", ":", "self", ".", "vocab", ".", "max_size", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.ObssPreprocessor.__call__": [[110, 120], ["babyai.rl.DictList", "format.ObssPreprocessor.obs_space.keys", "format.ObssPreprocessor.image_preproc", "format.ObssPreprocessor.obs_space.keys", "format.ObssPreprocessor.instr_preproc"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "obss", ",", "device", "=", "None", ")", ":", "\n", "        ", "obs_", "=", "babyai", ".", "rl", ".", "DictList", "(", ")", "\n", "\n", "if", "\"image\"", "in", "self", ".", "obs_space", ".", "keys", "(", ")", ":", "\n", "            ", "obs_", ".", "image", "=", "self", ".", "image_preproc", "(", "obss", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "\"instr\"", "in", "self", ".", "obs_space", ".", "keys", "(", ")", ":", "\n", "            ", "obs_", ".", "instr", "=", "self", ".", "instr_preproc", "(", "obss", ",", "device", "=", "device", ")", "\n", "\n", "", "return", "obs_", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.IntObssPreprocessor.__init__": [[123, 132], ["format.IntImagePreprocessor", "format.InstructionsPreprocessor", "image_obs_space.high.max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "obs_space", ",", "load_vocab_from", "=", "None", ")", ":", "\n", "        ", "image_obs_space", "=", "obs_space", ".", "spaces", "[", "\"image\"", "]", "\n", "self", ".", "image_preproc", "=", "IntImagePreprocessor", "(", "image_obs_space", ".", "shape", "[", "-", "1", "]", ",", "\n", "max_high", "=", "image_obs_space", ".", "high", ".", "max", "(", ")", ")", "\n", "self", ".", "instr_preproc", "=", "InstructionsPreprocessor", "(", "load_vocab_from", "or", "model_name", ")", "\n", "self", ".", "vocab", "=", "self", ".", "instr_preproc", ".", "vocab", "\n", "self", ".", "obs_space", "=", "{", "\n", "\"image\"", ":", "self", ".", "image_preproc", ".", "max_size", ",", "\n", "\"instr\"", ":", "self", ".", "vocab", ".", "max_size", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.IntObssPreprocessor.__call__": [[134, 144], ["babyai.rl.DictList", "format.IntObssPreprocessor.obs_space.keys", "format.IntObssPreprocessor.image_preproc", "format.IntObssPreprocessor.obs_space.keys", "format.IntObssPreprocessor.instr_preproc"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "obss", ",", "device", "=", "None", ")", ":", "\n", "        ", "obs_", "=", "babyai", ".", "rl", ".", "DictList", "(", ")", "\n", "\n", "if", "\"image\"", "in", "self", ".", "obs_space", ".", "keys", "(", ")", ":", "\n", "            ", "obs_", ".", "image", "=", "self", ".", "image_preproc", "(", "obss", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "\"instr\"", "in", "self", ".", "obs_space", ".", "keys", "(", ")", ":", "\n", "            ", "obs_", ".", "instr", "=", "self", ".", "instr_preproc", "(", "obss", ",", "device", "=", "device", ")", "\n", "\n", "", "return", "obs_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.get_vocab_path": [[11, 13], ["os.path.join", "utils.get_model_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_dir"], ["def", "get_vocab_path", "(", "model_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "utils", ".", "get_model_dir", "(", "model_name", ")", ",", "\"vocab.json\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.Agent.on_reset": [[14, 16], ["None"], "methods", ["None"], ["def", "on_reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.Agent.act": [[17, 27], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "\"\"\"Propose an action based on observation.\n\n        Returns a dict, with 'action` entry containing the proposed action,\n        and optionaly other entries containing auxiliary information\n        (e.g. value function).\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.Agent.analyze_feedback": [[28, 31], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.__init__": [[36, 50], ["isinstance", "isinstance", "utils.ObssPreprocessor", "utils.load_model", "torch.cuda.is_available", "next", "agent.ModelAgent.model.cuda", "agent.ModelAgent.model.parameters"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.load_model"], ["def", "__init__", "(", "self", ",", "model_or_name", ",", "obss_preprocessor", ",", "argmax", ")", ":", "\n", "        ", "if", "obss_preprocessor", "is", "None", ":", "\n", "            ", "assert", "isinstance", "(", "model_or_name", ",", "str", ")", "\n", "obss_preprocessor", "=", "utils", ".", "ObssPreprocessor", "(", "model_or_name", ")", "\n", "", "self", ".", "obss_preprocessor", "=", "obss_preprocessor", "\n", "if", "isinstance", "(", "model_or_name", ",", "str", ")", ":", "\n", "            ", "self", ".", "model", "=", "utils", ".", "load_model", "(", "model_or_name", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "model_or_name", "\n", "", "self", ".", "device", "=", "next", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "argmax", "=", "argmax", "\n", "self", ".", "memory", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.act_batch": [[51, 73], ["agent.ModelAgent.obss_preprocessor", "torch.zeros", "torch.no_grad", "agent.ModelAgent.model", "dist.probs.argmax", "dist.sample", "len", "len", "ValueError"], "methods", ["None"], ["", "def", "act_batch", "(", "self", ",", "many_obs", ")", ":", "\n", "        ", "if", "self", ".", "memory", "is", "None", ":", "\n", "            ", "self", ".", "memory", "=", "torch", ".", "zeros", "(", "\n", "len", "(", "many_obs", ")", ",", "self", ".", "model", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "", "elif", "self", ".", "memory", ".", "shape", "[", "0", "]", "!=", "len", "(", "many_obs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"stick to one batch size for the lifetime of an agent\"", ")", "\n", "", "preprocessed_obs", "=", "self", ".", "obss_preprocessor", "(", "many_obs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model_results", "=", "self", ".", "model", "(", "preprocessed_obs", ",", "self", ".", "memory", ")", "\n", "dist", "=", "model_results", "[", "'dist'", "]", "\n", "value", "=", "model_results", "[", "'value'", "]", "\n", "self", ".", "memory", "=", "model_results", "[", "'memory'", "]", "\n", "\n", "", "if", "self", ".", "argmax", ":", "\n", "            ", "action", "=", "dist", ".", "probs", ".", "argmax", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "return", "{", "'action'", ":", "action", ",", "\n", "'dist'", ":", "dist", ",", "\n", "'value'", ":", "value", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.act": [[74, 76], ["agent.ModelAgent.act_batch"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.act_batch"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "act_batch", "(", "[", "obs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.ModelAgent.analyze_feedback": [[77, 84], ["isinstance", "range", "len"], "methods", ["None"], ["", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "if", "isinstance", "(", "done", ",", "tuple", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "done", ")", ")", ":", "\n", "                ", "if", "done", "[", "i", "]", ":", "\n", "                    ", "self", ".", "memory", "[", "i", ",", ":", "]", "*=", "0.", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "memory", "*=", "(", "1", "-", "done", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.RandomAgent.__init__": [[89, 92], ["random.Random"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "seed", "=", "0", ",", "number_of_actions", "=", "7", ")", ":", "\n", "        ", "self", ".", "rng", "=", "Random", "(", "seed", ")", "\n", "self", ".", "number_of_actions", "=", "number_of_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.RandomAgent.act": [[93, 99], ["agent.RandomAgent.rng.randint", "torch.tensor"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "action", "=", "self", ".", "rng", ".", "randint", "(", "0", ",", "self", ".", "number_of_actions", "-", "1", ")", "\n", "# To be consistent with how a ModelAgent's output of `act`:", "\n", "return", "{", "'action'", ":", "torch", ".", "tensor", "(", "action", ")", ",", "\n", "'dist'", ":", "None", ",", "\n", "'value'", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.DemoAgent.__init__": [[104, 110], ["utils.get_demos_path", "utils.load_demos", "utils.demos.transform_demos"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.transform_demos"], ["def", "__init__", "(", "self", ",", "demos_name", ",", "env_name", ",", "origin", ")", ":", "\n", "        ", "self", ".", "demos_path", "=", "utils", ".", "get_demos_path", "(", "demos_name", ",", "env_name", ",", "origin", ",", "valid", "=", "False", ")", "\n", "self", ".", "demos", "=", "utils", ".", "load_demos", "(", "self", ".", "demos_path", ")", "\n", "self", ".", "demos", "=", "utils", ".", "demos", ".", "transform_demos", "(", "self", ".", "demos", ")", "\n", "self", ".", "demo_id", "=", "0", "\n", "self", ".", "step_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.DemoAgent.check_obss_equality": [[111, 123], ["obs1.keys", "obs1.keys", "obs2.keys", "type"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_obss_equality", "(", "obs1", ",", "obs2", ")", ":", "\n", "        ", "if", "not", "(", "obs1", ".", "keys", "(", ")", "==", "obs2", ".", "keys", "(", ")", ")", ":", "\n", "            ", "return", "False", "\n", "", "for", "key", "in", "obs1", ".", "keys", "(", ")", ":", "\n", "            ", "if", "type", "(", "obs1", "[", "key", "]", ")", "in", "(", "str", ",", "int", ")", ":", "\n", "                ", "if", "not", "(", "obs1", "[", "key", "]", "==", "obs2", "[", "key", "]", ")", ":", "\n", "                    ", "return", "False", "\n", "", "", "else", ":", "\n", "                ", "if", "not", "(", "obs1", "[", "key", "]", "==", "obs2", "[", "key", "]", ")", ".", "all", "(", ")", ":", "\n", "                    ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.DemoAgent.act": [[124, 131], ["agent.DemoAgent.check_obss_equality", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.DemoAgent.check_obss_equality"], ["", "def", "act", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "demo_id", ">=", "len", "(", "self", ".", "demos", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"No demonstration remaining\"", ")", "\n", "", "expected_obs", "=", "self", ".", "demos", "[", "self", ".", "demo_id", "]", "[", "self", ".", "step_id", "]", "[", "0", "]", "\n", "assert", "DemoAgent", ".", "check_obss_equality", "(", "obs", ",", "expected_obs", ")", ",", "\"The observations do not match\"", "\n", "\n", "return", "{", "'action'", ":", "self", ".", "demos", "[", "self", ".", "demo_id", "]", "[", "self", ".", "step_id", "]", "[", "1", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.DemoAgent.analyze_feedback": [[132, 138], ["None"], "methods", ["None"], ["", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "self", ".", "step_id", "+=", "1", "\n", "\n", "if", "done", ":", "\n", "            ", "self", ".", "demo_id", "+=", "1", "\n", "self", ".", "step_id", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.__init__": [[141, 145], ["agent.BotAgent.on_reset"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.on_reset"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"An agent based on a GOFAI bot.\"\"\"", "\n", "self", ".", "env", "=", "env", "\n", "self", ".", "on_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.on_reset": [[146, 148], ["babyai.bot.Bot"], "methods", ["None"], ["", "def", "on_reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "bot", "=", "Bot", "(", "self", ".", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.act": [[149, 152], ["agent.BotAgent.bot.replan"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.bot.Bot.replan"], ["", "def", "act", "(", "self", ",", "obs", "=", "None", ",", "update_internal_state", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "action", "=", "self", ".", "bot", ".", "replan", "(", ")", "\n", "return", "{", "'action'", ":", "action", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback": [[153, 155], ["None"], "methods", ["None"], ["", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent": [[157, 166], ["agent.BotAgent", "utils.ObssPreprocessor", "agent.ModelAgent", "agent.DemoAgent"], "function", ["None"], ["", "", "def", "load_agent", "(", "env", ",", "model_name", ",", "demos_name", "=", "None", ",", "demos_origin", "=", "None", ",", "argmax", "=", "True", ",", "env_name", "=", "None", ")", ":", "\n", "# env_name needs to be specified for demo agents", "\n", "    ", "if", "model_name", "==", "'BOT'", ":", "\n", "        ", "return", "BotAgent", "(", "env", ")", "\n", "", "elif", "model_name", "is", "not", "None", ":", "\n", "        ", "obss_preprocessor", "=", "utils", ".", "ObssPreprocessor", "(", "model_name", ",", "env", ".", "observation_space", ")", "\n", "return", "ModelAgent", "(", "model_name", ",", "obss_preprocessor", ",", "argmax", ")", "\n", "", "elif", "demos_origin", "is", "not", "None", "or", "demos_name", "is", "not", "None", ":", "\n", "        ", "return", "DemoAgent", "(", "demos_name", "=", "demos_name", ",", "env_name", "=", "env_name", ",", "origin", "=", "demos_origin", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_dir": [[7, 9], ["os.path.join", "utils.storage_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.storage_dir"], ["import", "babyai", ".", "rl", "\n", "from", "babyai", ".", "rl", ".", "utils", ".", "supervised_losses", "import", "required_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_path": [[11, 13], ["os.path.join", "model.get_model_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_dir"], ["# From https://github.com/ikostrikov/pytorch-a2c-ppo-acktr/blob/master/model.py", "\n", "def", "initialize_parameters", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.load_model": [[15, 27], ["model.get_model_path", "torch.cuda.is_available", "torch.load.eval", "torch.load", "torch.load", "FileNotFoundError", "torch.device"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_path"], ["        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "m", ".", "weight", ".", "data", "*=", "1", "/", "torch", ".", "sqrt", "(", "m", ".", "weight", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n", "\n", "# Inspired by FiLMedBlock from https://arxiv.org/abs/1709.07871", "\n", "", "", "", "class", "FiLM", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "in_channels", ",", "imm_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "imm_channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.save_model": [[29, 33], ["model.get_model_path", "utils.create_folders_if_necessary", "torch.save"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.model.get_model_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.create_folders_if_necessary", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.format.Vocabulary.save"], ["self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "imm_channels", ",", "out_channels", "=", "out_features", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir": [[9, 11], ["os.path.join", "utils.storage_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.storage_dir"], ["def", "get_log_dir", "(", "log_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "utils", ".", "storage_dir", "(", ")", ",", "\"logs\"", ",", "log_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_path": [[13, 15], ["os.path.join", "log.get_log_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir"], ["", "def", "get_log_path", "(", "log_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_log_dir", "(", "log_name", ")", ",", "\"log.log\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.synthesize": [[17, 25], ["collections.OrderedDict", "numpy.mean", "numpy.std", "numpy.amin", "numpy.amax"], "function", ["None"], ["", "def", "synthesize", "(", "array", ")", ":", "\n", "    ", "import", "collections", "\n", "d", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "d", "[", "\"mean\"", "]", "=", "numpy", ".", "mean", "(", "array", ")", "\n", "d", "[", "\"std\"", "]", "=", "numpy", ".", "std", "(", "array", ")", "\n", "d", "[", "\"min\"", "]", "=", "numpy", ".", "amin", "(", "array", ")", "\n", "d", "[", "\"max\"", "]", "=", "numpy", ".", "amax", "(", "array", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.configure_logging": [[27, 37], ["log.get_log_path", "utils.create_folders_if_necessary", "logging.basicConfig", "logging.FileHandler", "logging.StreamHandler"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.create_folders_if_necessary"], ["", "def", "configure_logging", "(", "log_name", ")", ":", "\n", "    ", "path", "=", "get_log_path", "(", "log_name", ")", "\n", "utils", ".", "create_folders_if_necessary", "(", "path", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "\"%(name)s: %(asctime)s: %(message)s\"", ",", "\n", "handlers", "=", "[", "\n", "logging", ".", "FileHandler", "(", "filename", "=", "path", ")", ",", "\n", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.storage_dir": [[14, 17], ["os.environ.get"], "function", ["None"], []], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.create_folders_if_necessary": [[19, 23], ["os.path.dirname", "os.path.isdir", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed": [[25, 31], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed"], []], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path": [[8, 14], ["os.path.join", "utils.storage_dir"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.storage_dir"], ["def", "get_demos_path", "(", "demos", "=", "None", ",", "env", "=", "None", ",", "origin", "=", "None", ",", "valid", "=", "False", ")", ":", "\n", "    ", "valid_suff", "=", "'_valid'", "if", "valid", "else", "''", "\n", "demos_path", "=", "(", "demos", "+", "valid_suff", "\n", "if", "demos", "\n", "else", "env", "+", "\"_\"", "+", "origin", "+", "valid_suff", ")", "+", "'.pkl'", "\n", "return", "os", ".", "path", ".", "join", "(", "utils", ".", "storage_dir", "(", ")", ",", "'demos'", ",", "demos_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos": [[16, 24], ["pickle.load", "open", "FileNotFoundError"], "function", ["None"], ["", "def", "load_demos", "(", "path", ",", "raise_not_found", "=", "True", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "open", "(", "path", ",", "\"rb\"", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "if", "raise_not_found", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"No demos found at {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.save_demos": [[26, 29], ["utils.create_folders_if_necessary", "pickle.dump", "open"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.create_folders_if_necessary"], ["", "", "", "def", "save_demos", "(", "demos", ",", "path", ")", ":", "\n", "    ", "utils", ".", "create_folders_if_necessary", "(", "path", ")", "\n", "pickle", ".", "dump", "(", "demos", ",", "open", "(", "path", ",", "\"wb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.synthesize_demos": [[31, 36], ["print", "len", "len", "print", "len"], "function", ["None"], ["", "def", "synthesize_demos", "(", "demos", ")", ":", "\n", "    ", "print", "(", "'{} demonstrations saved'", ".", "format", "(", "len", "(", "demos", ")", ")", ")", "\n", "num_frames_per_episode", "=", "[", "len", "(", "demo", "[", "2", "]", ")", "for", "demo", "in", "demos", "]", "\n", "if", "len", "(", "demos", ")", ">", "0", ":", "\n", "        ", "print", "(", "'Demo num frames: {}'", ".", "format", "(", "num_frames_per_episode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.transform_demos": [[38, 65], ["blosc.unpack_array", "range", "new_demos.append", "len", "len", "new_demo.append"], "function", ["None"], ["", "", "def", "transform_demos", "(", "demos", ")", ":", "\n", "    ", "'''\n    takes as input a list of demonstrations in the format generated with `make_agent_demos` or `make_human_demos`\n    i.e. each demo is a tuple (mission, blosc.pack_array(np.array(images)), directions, actions)\n    returns demos as a list of lists. Each demo is a list of (obs, action, done) tuples\n    '''", "\n", "new_demos", "=", "[", "]", "\n", "for", "demo", "in", "demos", ":", "\n", "        ", "new_demo", "=", "[", "]", "\n", "\n", "mission", "=", "demo", "[", "0", "]", "\n", "all_images", "=", "demo", "[", "1", "]", "\n", "directions", "=", "demo", "[", "2", "]", "\n", "actions", "=", "demo", "[", "3", "]", "\n", "\n", "all_images", "=", "blosc", ".", "unpack_array", "(", "all_images", ")", "\n", "n_observations", "=", "all_images", ".", "shape", "[", "0", "]", "\n", "assert", "len", "(", "directions", ")", "==", "len", "(", "actions", ")", "==", "n_observations", ",", "\"error transforming demos\"", "\n", "for", "i", "in", "range", "(", "n_observations", ")", ":", "\n", "            ", "obs", "=", "{", "'image'", ":", "all_images", "[", "i", "]", ",", "\n", "'direction'", ":", "directions", "[", "i", "]", ",", "\n", "'mission'", ":", "mission", "}", "\n", "action", "=", "actions", "[", "i", "]", "\n", "done", "=", "i", "==", "n_observations", "-", "1", "\n", "new_demo", ".", "append", "(", "(", "obs", ",", "action", ",", "done", ")", ")", "\n", "", "new_demos", ".", "append", "(", "new_demo", ")", "\n", "", "return", "new_demos", "\n", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.dictlist.DictList.__len__": [[16, 18], ["len", "next", "iter", "dict.values"], "methods", ["None"], ["def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "next", "(", "iter", "(", "dict", ".", "values", "(", "self", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.dictlist.DictList.__getitem__": [[19, 21], ["dictlist.DictList", "dict.items"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "DictList", "(", "{", "key", ":", "value", "[", "index", "]", "for", "key", ",", "value", "in", "dict", ".", "items", "(", "self", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.dictlist.DictList.__setitem__": [[22, 25], ["d.items", "dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.dictlist.DictList.__getitem__"], ["", "def", "__setitem__", "(", "self", ",", "index", ",", "d", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "dict", ".", "__getitem__", "(", "self", ",", "key", ")", "[", "index", "]", "=", "value", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.__init__": [[23, 41], ["dict", "dict", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "required_heads[].startswith", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "required_heads[].startswith", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ValueError", "required_heads[].replace"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "aux_info", ",", "shape", ",", "device", ")", ":", "\n", "        ", "self", ".", "aux_info", "=", "aux_info", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "collected_info", "=", "dict", "(", ")", "\n", "self", ".", "extra_predictions", "=", "dict", "(", ")", "\n", "for", "info", "in", "self", ".", "aux_info", ":", "\n", "            ", "self", ".", "collected_info", "[", "info", "]", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "if", "required_heads", "[", "info", "]", "==", "'binary'", "or", "required_heads", "[", "info", "]", ".", "startswith", "(", "'continuous'", ")", ":", "\n", "# we predict one number only", "\n", "                ", "self", ".", "extra_predictions", "[", "info", "]", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "1", ",", "device", "=", "self", ".", "device", ")", "\n", "", "elif", "required_heads", "[", "info", "]", ".", "startswith", "(", "'multiclass'", ")", ":", "\n", "# means that this is a multi-class classification and we need to predict the whole proba distr", "\n", "                ", "n_classes", "=", "int", "(", "required_heads", "[", "info", "]", ".", "replace", "(", "'multiclass'", ",", "''", ")", ")", "\n", "self", ".", "extra_predictions", "[", "info", "]", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "n_classes", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not supported\"", ".", "format", "(", "required_heads", "[", "info", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.process": [[42, 48], ["env_info[].keys", "dic.items", "range", "len"], "methods", ["None"], ["", "", "", "def", "process", "(", "self", ",", "env_info", ")", ":", "\n", "# env_info is now a tuple of dicts", "\n", "        ", "env_info", "=", "[", "{", "k", ":", "v", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", "if", "k", "in", "self", ".", "aux_info", "}", "for", "dic", "in", "env_info", "]", "\n", "env_info", "=", "{", "k", ":", "[", "env_info", "[", "_", "]", "[", "k", "]", "for", "_", "in", "range", "(", "len", "(", "env_info", ")", ")", "]", "for", "k", "in", "env_info", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "# env_info is now a dict of lists", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.fill_dictionaries": [[49, 54], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "required_heads[].startswith"], "methods", ["None"], ["", "def", "fill_dictionaries", "(", "self", ",", "index", ",", "env_info", ",", "extra_predictions", ")", ":", "\n", "        ", "for", "info", "in", "self", ".", "aux_info", ":", "\n", "            ", "dtype", "=", "torch", ".", "long", "if", "required_heads", "[", "info", "]", ".", "startswith", "(", "'multiclass'", ")", "else", "torch", ".", "float", "\n", "self", ".", "collected_info", "[", "info", "]", "[", "index", "]", "=", "torch", ".", "tensor", "(", "env_info", "[", "info", "]", ",", "dtype", "=", "dtype", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "extra_predictions", "[", "info", "]", "[", "index", "]", "=", "extra_predictions", "[", "info", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.end_collection": [[55, 73], ["dict", "dict", "babyai.rl.utils.DictList", "babyai.rl.utils.DictList", "supervised_losses.ExtraInfoCollector.collected_info[].transpose().reshape", "required_heads[].startswith", "supervised_losses.ExtraInfoCollector.extra_predictions[].transpose().reshape", "supervised_losses.ExtraInfoCollector.collected_info[].transpose", "type", "supervised_losses.ExtraInfoCollector.extra_predictions[].transpose().reshape", "supervised_losses.ExtraInfoCollector.extra_predictions[].transpose", "supervised_losses.ExtraInfoCollector.extra_predictions[].transpose"], "methods", ["None"], ["", "", "def", "end_collection", "(", "self", ",", "exps", ")", ":", "\n", "        ", "collected_info", "=", "dict", "(", ")", "\n", "extra_predictions", "=", "dict", "(", ")", "\n", "for", "info", "in", "self", ".", "aux_info", ":", "\n", "# T x P -> P x T -> P * T", "\n", "            ", "collected_info", "[", "info", "]", "=", "self", ".", "collected_info", "[", "info", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "required_heads", "[", "info", "]", "==", "'binary'", "or", "required_heads", "[", "info", "]", ".", "startswith", "(", "'continuous'", ")", ":", "\n", "# T x P x 1 -> P x T x 1 -> P * T", "\n", "                ", "extra_predictions", "[", "info", "]", "=", "self", ".", "extra_predictions", "[", "info", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "elif", "type", "(", "required_heads", "[", "info", "]", ")", "==", "int", ":", "\n", "# T x P x k -> P x T x k -> (P * T) x k", "\n", "                ", "k", "=", "required_heads", "[", "info", "]", "# number of classes", "\n", "extra_predictions", "[", "info", "]", "=", "self", ".", "extra_predictions", "[", "info", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "k", ")", "\n", "# convert the dicts to DictLists, and add them to the exps DictList.", "\n", "", "", "exps", ".", "collected_info", "=", "DictList", "(", "collected_info", ")", "\n", "exps", ".", "extra_predictions", "=", "DictList", "(", "extra_predictions", ")", "\n", "\n", "return", "exps", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.__init__": [[80, 95], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "aux_info", ",", "supervised_loss_coef", ",", "recurrence", ",", "device", ")", ":", "\n", "        ", "self", ".", "aux_info", "=", "aux_info", "\n", "self", ".", "supervised_loss_coef", "=", "supervised_loss_coef", "\n", "self", ".", "recurrence", "=", "recurrence", "\n", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "log_supervised_losses", "=", "[", "]", "\n", "self", ".", "log_supervised_accuracies", "=", "[", "]", "\n", "self", ".", "log_supervised_L2_losses", "=", "[", "]", "\n", "self", ".", "log_supervised_prevalences", "=", "[", "]", "\n", "\n", "self", ".", "batch_supervised_loss", "=", "0", "\n", "self", ".", "batch_supervised_accuracy", "=", "0", "\n", "self", ".", "batch_supervised_L2_loss", "=", "0", "\n", "self", ".", "batch_supervised_prevalence", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.init_epoch": [[96, 101], ["None"], "methods", ["None"], ["", "def", "init_epoch", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_supervised_losses", "=", "[", "]", "\n", "self", ".", "log_supervised_accuracies", "=", "[", "]", "\n", "self", ".", "log_supervised_L2_losses", "=", "[", "]", "\n", "self", ".", "log_supervised_prevalences", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.init_batch": [[102, 107], ["None"], "methods", ["None"], ["", "def", "init_batch", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_supervised_loss", "=", "0", "\n", "self", ".", "batch_supervised_accuracy", "=", "0", "\n", "self", ".", "batch_supervised_L2_loss", "=", "0", "\n", "self", ".", "batch_supervised_prevalence", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.eval_subbatch": [[108, 158], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "dict.__getitem__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "dict.__getitem__.mean", "required_heads[].startswith", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.mse_loss", "torch.mse_loss", "required_heads[].startswith", "pred.reshape", "pred.reshape", "ValueError", "torch.cross_entropy", "torch.cross_entropy", "dict.__getitem__.long", "pred.argmax().float", "pred.reshape", "pred.argmax"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.dictlist.DictList.__getitem__"], ["", "def", "eval_subbatch", "(", "self", ",", "extra_predictions", ",", "sb", ")", ":", "\n", "        ", "supervised_loss", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "self", ".", "device", ")", "\n", "supervised_accuracy", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "self", ".", "device", ")", "\n", "supervised_L2_loss", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "self", ".", "device", ")", "\n", "supervised_prevalence", "=", "torch", ".", "tensor", "(", "0.", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "binary_classification_tasks", "=", "0", "\n", "classification_tasks", "=", "0", "\n", "regression_tasks", "=", "0", "\n", "\n", "for", "pos", ",", "info", "in", "enumerate", "(", "self", ".", "aux_info", ")", ":", "\n", "            ", "coef", "=", "self", ".", "supervised_loss_coef", "[", "pos", "]", "\n", "pred", "=", "extra_predictions", "[", "info", "]", "\n", "target", "=", "dict", ".", "__getitem__", "(", "sb", ".", "collected_info", ",", "info", ")", "\n", "if", "required_heads", "[", "info", "]", "==", "'binary'", ":", "\n", "                ", "binary_classification_tasks", "+=", "1", "\n", "classification_tasks", "+=", "1", "\n", "supervised_loss", "+=", "coef", "*", "F", ".", "binary_cross_entropy_with_logits", "(", "pred", ".", "reshape", "(", "-", "1", ")", ",", "target", ")", "\n", "supervised_accuracy", "+=", "(", "(", "pred", ".", "reshape", "(", "-", "1", ")", ">", "0", ")", ".", "float", "(", ")", "==", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "supervised_prevalence", "+=", "target", ".", "mean", "(", ")", "\n", "", "elif", "required_heads", "[", "info", "]", ".", "startswith", "(", "'continuous'", ")", ":", "\n", "                ", "regression_tasks", "+=", "1", "\n", "mse", "=", "F", ".", "mse_loss", "(", "pred", ".", "reshape", "(", "-", "1", ")", ",", "target", ")", "\n", "supervised_loss", "+=", "coef", "*", "mse", "\n", "supervised_L2_loss", "+=", "mse", "\n", "", "elif", "required_heads", "[", "info", "]", ".", "startswith", "(", "'multiclass'", ")", ":", "\n", "                ", "classification_tasks", "+=", "1", "\n", "supervised_accuracy", "+=", "(", "pred", ".", "argmax", "(", "1", ")", ".", "float", "(", ")", "==", "target", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "supervised_loss", "+=", "coef", "*", "F", ".", "cross_entropy", "(", "pred", ",", "target", ".", "long", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} not supported\"", ".", "format", "(", "required_heads", "[", "info", "]", ")", ")", "\n", "", "", "if", "binary_classification_tasks", ">", "0", ":", "\n", "            ", "supervised_prevalence", "/=", "binary_classification_tasks", "\n", "", "else", ":", "\n", "            ", "supervised_prevalence", "=", "torch", ".", "tensor", "(", "-", "1", ")", "\n", "", "if", "classification_tasks", ">", "0", ":", "\n", "            ", "supervised_accuracy", "/=", "classification_tasks", "\n", "", "else", ":", "\n", "            ", "supervised_accuracy", "=", "torch", ".", "tensor", "(", "-", "1", ")", "\n", "", "if", "regression_tasks", ">", "0", ":", "\n", "            ", "supervised_L2_loss", "/=", "regression_tasks", "\n", "", "else", ":", "\n", "            ", "supervised_L2_loss", "=", "torch", ".", "tensor", "(", "-", "1", ")", "\n", "\n", "", "self", ".", "batch_supervised_loss", "+=", "supervised_loss", ".", "item", "(", ")", "\n", "self", ".", "batch_supervised_accuracy", "+=", "supervised_accuracy", ".", "item", "(", ")", "\n", "self", ".", "batch_supervised_L2_loss", "+=", "supervised_L2_loss", ".", "item", "(", ")", "\n", "self", ".", "batch_supervised_prevalence", "+=", "supervised_prevalence", ".", "item", "(", ")", "\n", "\n", "return", "supervised_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.update_batch_values": [[159, 164], ["None"], "methods", ["None"], ["", "def", "update_batch_values", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_supervised_loss", "/=", "self", ".", "recurrence", "\n", "self", ".", "batch_supervised_accuracy", "/=", "self", ".", "recurrence", "\n", "self", ".", "batch_supervised_L2_loss", "/=", "self", ".", "recurrence", "\n", "self", ".", "batch_supervised_prevalence", "/=", "self", ".", "recurrence", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.update_epoch_logs": [[165, 170], ["supervised_losses.SupervisedLossUpdater.log_supervised_losses.append", "supervised_losses.SupervisedLossUpdater.log_supervised_accuracies.append", "supervised_losses.SupervisedLossUpdater.log_supervised_L2_losses.append", "supervised_losses.SupervisedLossUpdater.log_supervised_prevalences.append"], "methods", ["None"], ["", "def", "update_epoch_logs", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_supervised_losses", ".", "append", "(", "self", ".", "batch_supervised_loss", ")", "\n", "self", ".", "log_supervised_accuracies", ".", "append", "(", "self", ".", "batch_supervised_accuracy", ")", "\n", "self", ".", "log_supervised_L2_losses", ".", "append", "(", "self", ".", "batch_supervised_L2_loss", ")", "\n", "self", ".", "log_supervised_prevalences", ".", "append", "(", "self", ".", "batch_supervised_prevalence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.SupervisedLossUpdater.end_training": [[171, 178], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "end_training", "(", "self", ",", "logs", ")", ":", "\n", "        ", "logs", "[", "\"supervised_loss\"", "]", "=", "numpy", ".", "mean", "(", "self", ".", "log_supervised_losses", ")", "\n", "logs", "[", "\"supervised_accuracy\"", "]", "=", "numpy", ".", "mean", "(", "self", ".", "log_supervised_accuracies", ")", "\n", "logs", "[", "\"supervised_L2_loss\"", "]", "=", "numpy", ".", "mean", "(", "self", ".", "log_supervised_L2_losses", ")", "\n", "logs", "[", "\"supervised_prevalence\"", "]", "=", "numpy", ".", "mean", "(", "self", ".", "log_supervised_prevalences", ")", "\n", "\n", "return", "logs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.__init__": [[21, 38], ["len", "multiprocessing.Pipe", "penv.ParallelEnv.locals.append", "multiprocessing.Process", "multiprocessing.Process.start", "remote.close", "penv.ParallelEnv.processes.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "envs", ")", ":", "\n", "        ", "assert", "len", "(", "envs", ")", ">=", "1", ",", "\"No environment given.\"", "\n", "\n", "self", ".", "envs", "=", "envs", "\n", "self", ".", "observation_space", "=", "self", ".", "envs", "[", "0", "]", ".", "observation_space", "\n", "self", ".", "action_space", "=", "self", ".", "envs", "[", "0", "]", ".", "action_space", "\n", "\n", "self", ".", "locals", "=", "[", "]", "\n", "self", ".", "processes", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", "[", "1", ":", "]", ":", "\n", "            ", "local", ",", "remote", "=", "Pipe", "(", ")", "\n", "self", ".", "locals", ".", "append", "(", "local", ")", "\n", "p", "=", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "remote", ",", "env", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "remote", ".", "close", "(", ")", "\n", "self", ".", "processes", ".", "append", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.reset": [[39, 44], ["local.send", "penv.ParallelEnv.envs[].reset", "local.recv"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "local", "in", "self", ".", "locals", ":", "\n", "            ", "local", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "", "results", "=", "[", "self", ".", "envs", "[", "0", "]", ".", "reset", "(", ")", "]", "+", "[", "local", ".", "recv", "(", ")", "for", "local", "in", "self", ".", "locals", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.step": [[45, 53], ["zip", "penv.ParallelEnv.envs[].step", "zip", "local.send", "penv.ParallelEnv.envs[].reset", "local.recv"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "local", ",", "action", "in", "zip", "(", "self", ".", "locals", ",", "actions", "[", "1", ":", "]", ")", ":", "\n", "            ", "local", ".", "send", "(", "(", "\"step\"", ",", "action", ")", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "envs", "[", "0", "]", ".", "step", "(", "actions", "[", "0", "]", ")", "\n", "if", "done", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "0", "]", ".", "reset", "(", ")", "\n", "", "results", "=", "zip", "(", "*", "[", "(", "obs", ",", "reward", ",", "done", ",", "info", ")", "]", "+", "[", "local", ".", "recv", "(", ")", "for", "local", "in", "self", ".", "locals", "]", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.render": [[54, 56], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.__del__": [[57, 60], ["p.terminate"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "processes", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.worker": [[4, 17], ["conn.recv", "env.step", "conn.send", "env.reset", "env.reset", "conn.send"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["def", "worker", "(", "conn", ",", "env", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "conn", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"step\"", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "conn", ".", "send", "(", "(", "obs", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "conn", ".", "send", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.rl.format.default_preprocess_obss": [[3, 5], ["torch.tensor"], "function", ["None"], ["import", "numpy", "\n", "import", "re", "\n", "import", "torch", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.rl.model.ACModel.__init__": [[8, 11], ["None"], "methods", ["None"], ["from", "babyai", ".", "rl", ".", "utils", ".", "supervised_losses", "import", "required_heads", "\n", "\n", "\n", "# From https://github.com/ikostrikov/pytorch-a2c-ppo-acktr/blob/master/model.py", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.rl.model.ACModel.forward": [[12, 15], ["None"], "methods", ["None"], ["def", "initialize_parameters", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.rl.model.RecurrentACModel.forward": [[19, 22], ["None"], "methods", ["None"], ["\n", "\n", "# Inspired by FiLMedBlock from https://arxiv.org/abs/1709.07871", "\n", "", "", "", "class", "FiLM", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.rl.model.RecurrentACModel.memory_size": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "in_channels", ",", "imm_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "imm_channels", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.base.BaseAlgo.__init__": [[13, 109], ["babyai.rl.utils.ParallelEnv", "base.BaseAlgo.acmodel.train", "torch.device", "len", "base.BaseAlgo.env.reset", "torch.zeros", "torch.zeros", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "babyai.rl.utils.supervised_losses.ExtraInfoCollector", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["def", "__init__", "(", "self", ",", "envs", ",", "acmodel", ",", "num_frames_per_proc", ",", "discount", ",", "lr", ",", "gae_lambda", ",", "entropy_coef", ",", "\n", "value_loss_coef", ",", "max_grad_norm", ",", "recurrence", ",", "preprocess_obss", ",", "reshape_reward", ",", "aux_info", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a `BaseAlgo` instance.\n\n        Parameters:\n        ----------\n        envs : list\n            a list of environments that will be run in parallel\n        acmodel : torch.Module\n            the model\n        num_frames_per_proc : int\n            the number of frames collected by every process for an update\n        discount : float\n            the discount for future rewards\n        lr : float\n            the learning rate for optimizers\n        gae_lambda : float\n            the lambda coefficient in the GAE formula\n            ([Schulman et al., 2015](https://arxiv.org/abs/1506.02438))\n        entropy_coef : float\n            the weight of the entropy cost in the final objective\n        value_loss_coef : float\n            the weight of the value loss in the final objective\n        max_grad_norm : float\n            gradient will be clipped to be at most this value\n        recurrence : int\n            the number of steps the gradient is propagated back in time\n        preprocess_obss : function\n            a function that takes observations returned by the environment\n            and converts them into the format that the model can handle\n        reshape_reward : function\n            a function that shapes the reward, takes an\n            (observation, action, reward, done) tuple as an input\n        aux_info : list\n            a list of strings corresponding to the name of the extra information\n            retrieved from the environment for supervised auxiliary losses\n\n        \"\"\"", "\n", "# Store parameters", "\n", "\n", "self", ".", "env", "=", "ParallelEnv", "(", "envs", ")", "\n", "self", ".", "acmodel", "=", "acmodel", "\n", "self", ".", "acmodel", ".", "train", "(", ")", "\n", "self", ".", "num_frames_per_proc", "=", "num_frames_per_proc", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "recurrence", "=", "recurrence", "\n", "self", ".", "preprocess_obss", "=", "preprocess_obss", "or", "default_preprocess_obss", "\n", "self", ".", "reshape_reward", "=", "reshape_reward", "\n", "self", ".", "aux_info", "=", "aux_info", "\n", "\n", "# Store helpers values", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "num_procs", "=", "len", "(", "envs", ")", "\n", "self", ".", "num_frames", "=", "self", ".", "num_frames_per_proc", "*", "self", ".", "num_procs", "\n", "\n", "\n", "assert", "self", ".", "num_frames_per_proc", "%", "self", ".", "recurrence", "==", "0", "\n", "\n", "# Initialize experience values", "\n", "\n", "shape", "=", "(", "self", ".", "num_frames_per_proc", ",", "self", ".", "num_procs", ")", "\n", "\n", "self", ".", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obss", "=", "[", "None", "]", "*", "(", "shape", "[", "0", "]", ")", "\n", "\n", "self", ".", "memory", "=", "torch", ".", "zeros", "(", "shape", "[", "1", "]", ",", "self", ".", "acmodel", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "memories", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "self", ".", "acmodel", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "mask", "=", "torch", ".", "ones", "(", "shape", "[", "1", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "masks", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "values", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "advantages", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_probs", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "aux_info", ":", "\n", "            ", "self", ".", "aux_info_collector", "=", "ExtraInfoCollector", "(", "self", ".", "aux_info", ",", "shape", ",", "self", ".", "device", ")", "\n", "\n", "# Initialize log values", "\n", "\n", "", "self", ".", "log_episode_return", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_episode_reshaped_return", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_episode_num_frames", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "log_done_counter", "=", "0", "\n", "self", ".", "log_return", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "self", ".", "log_reshaped_return", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "self", ".", "log_num_frames", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.base.BaseAlgo.collect_experiences": [[110, 252], ["range", "base.BaseAlgo.preprocess_obss", "reversed", "babyai.rl.utils.DictList", "base.BaseAlgo.memories.transpose().reshape", "base.BaseAlgo.masks.transpose().reshape().unsqueeze", "base.BaseAlgo.actions.transpose().reshape", "base.BaseAlgo.values.transpose().reshape", "base.BaseAlgo.rewards.transpose().reshape", "base.BaseAlgo.advantages.transpose().reshape", "base.BaseAlgo.log_probs.transpose().reshape", "base.BaseAlgo.preprocess_obss", "max", "base.BaseAlgo.preprocess_obss", "dist.sample", "base.BaseAlgo.env.step", "dist.log_prob", "torch.tensor", "torch.ones", "enumerate", "torch.no_grad", "range", "base.BaseAlgo.aux_info_collector.end_collection", "torch.no_grad", "base.BaseAlgo.acmodel", "dist.sample.cpu().numpy", "base.BaseAlgo.aux_info_collector.process", "torch.tensor", "torch.tensor", "torch.tensor", "base.BaseAlgo.aux_info_collector.fill_dictionaries", "base.BaseAlgo.acmodel", "range", "range", "base.BaseAlgo.memories.transpose", "base.BaseAlgo.masks.transpose().reshape", "base.BaseAlgo.actions.transpose", "base.BaseAlgo.values.transpose", "base.BaseAlgo.rewards.transpose", "base.BaseAlgo.advantages.transpose", "base.BaseAlgo.log_probs.transpose", "base.BaseAlgo.log_return.append", "base.BaseAlgo.log_reshaped_return.append", "base.BaseAlgo.log_num_frames.append", "base.BaseAlgo.mask.unsqueeze", "dist.sample.cpu", "base.BaseAlgo.reshape_reward", "base.BaseAlgo.log_episode_return[].item", "base.BaseAlgo.log_episode_reshaped_return[].item", "base.BaseAlgo.log_episode_num_frames[].item", "base.BaseAlgo.mask.unsqueeze", "base.BaseAlgo.masks.transpose", "zip"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.end_collection", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.process", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.supervised_losses.ExtraInfoCollector.fill_dictionaries"], ["", "def", "collect_experiences", "(", "self", ")", ":", "\n", "        ", "\"\"\"Collects rollouts and computes advantages.\n\n        Runs several environments concurrently. The next actions are computed\n        in a batch mode for all environments at the same time. The rollouts\n        and advantages from all environments are concatenated together.\n\n        Returns\n        -------\n        exps : DictList\n            Contains actions, rewards, advantages etc as attributes.\n            Each attribute, e.g. `exps.reward` has a shape\n            (self.num_frames_per_proc * num_envs, ...). k-th block\n            of consecutive `self.num_frames_per_proc` frames contains\n            data obtained from the k-th environment. Be careful not to mix\n            data from different environments!\n        logs : dict\n            Useful stats about the training process, including the average\n            reward, policy loss, value loss, etc.\n\n        \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_proc", ")", ":", "\n", "# Do one agent-environment interaction", "\n", "\n", "            ", "preprocessed_obs", "=", "self", ".", "preprocess_obss", "(", "self", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "model_results", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ",", "self", ".", "memory", "*", "self", ".", "mask", ".", "unsqueeze", "(", "1", ")", ")", "\n", "dist", "=", "model_results", "[", "'dist'", "]", "\n", "value", "=", "model_results", "[", "'value'", "]", "\n", "memory", "=", "model_results", "[", "'memory'", "]", "\n", "extra_predictions", "=", "model_results", "[", "'extra_predictions'", "]", "\n", "\n", "", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "env_info", "=", "self", ".", "env", ".", "step", "(", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "self", ".", "aux_info", ":", "\n", "                ", "env_info", "=", "self", ".", "aux_info_collector", ".", "process", "(", "env_info", ")", "\n", "# env_info = self.process_aux_info(env_info)", "\n", "\n", "# Update experiences values", "\n", "\n", "", "self", ".", "obss", "[", "i", "]", "=", "self", ".", "obs", "\n", "self", ".", "obs", "=", "obs", "\n", "\n", "self", ".", "memories", "[", "i", "]", "=", "self", ".", "memory", "\n", "self", ".", "memory", "=", "memory", "\n", "\n", "self", ".", "masks", "[", "i", "]", "=", "self", ".", "mask", "\n", "self", ".", "mask", "=", "1", "-", "torch", ".", "tensor", "(", "done", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "actions", "[", "i", "]", "=", "action", "\n", "self", ".", "values", "[", "i", "]", "=", "value", "\n", "if", "self", ".", "reshape_reward", "is", "not", "None", ":", "\n", "                ", "self", ".", "rewards", "[", "i", "]", "=", "torch", ".", "tensor", "(", "[", "\n", "self", ".", "reshape_reward", "(", "obs_", ",", "action_", ",", "reward_", ",", "done_", ")", "\n", "for", "obs_", ",", "action_", ",", "reward_", ",", "done_", "in", "zip", "(", "obs", ",", "action", ",", "reward", ",", "done", ")", "\n", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "rewards", "[", "i", "]", "=", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "log_probs", "[", "i", "]", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "\n", "if", "self", ".", "aux_info", ":", "\n", "                ", "self", ".", "aux_info_collector", ".", "fill_dictionaries", "(", "i", ",", "env_info", ",", "extra_predictions", ")", "\n", "\n", "# Update log values", "\n", "\n", "", "self", ".", "log_episode_return", "+=", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "log_episode_reshaped_return", "+=", "self", ".", "rewards", "[", "i", "]", "\n", "self", ".", "log_episode_num_frames", "+=", "torch", ".", "ones", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "for", "i", ",", "done_", "in", "enumerate", "(", "done", ")", ":", "\n", "                ", "if", "done_", ":", "\n", "                    ", "self", ".", "log_done_counter", "+=", "1", "\n", "self", ".", "log_return", ".", "append", "(", "self", ".", "log_episode_return", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "log_reshaped_return", ".", "append", "(", "self", ".", "log_episode_reshaped_return", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "log_num_frames", ".", "append", "(", "self", ".", "log_episode_num_frames", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "", "self", ".", "log_episode_return", "*=", "self", ".", "mask", "\n", "self", ".", "log_episode_reshaped_return", "*=", "self", ".", "mask", "\n", "self", ".", "log_episode_num_frames", "*=", "self", ".", "mask", "\n", "\n", "# Add advantage and return to experiences", "\n", "\n", "", "preprocessed_obs", "=", "self", ".", "preprocess_obss", "(", "self", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_value", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ",", "self", ".", "memory", "*", "self", ".", "mask", ".", "unsqueeze", "(", "1", ")", ")", "[", "'value'", "]", "\n", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "num_frames_per_proc", ")", ")", ":", "\n", "            ", "next_mask", "=", "self", ".", "masks", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "self", ".", "mask", "\n", "next_value", "=", "self", ".", "values", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "next_value", "\n", "next_advantage", "=", "self", ".", "advantages", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "0", "\n", "\n", "delta", "=", "self", ".", "rewards", "[", "i", "]", "+", "self", ".", "discount", "*", "next_value", "*", "next_mask", "-", "self", ".", "values", "[", "i", "]", "\n", "self", ".", "advantages", "[", "i", "]", "=", "delta", "+", "self", ".", "discount", "*", "self", ".", "gae_lambda", "*", "next_advantage", "*", "next_mask", "\n", "\n", "# Flatten the data correctly, making sure that", "\n", "# each episode's data is a continuous chunk", "\n", "\n", "", "exps", "=", "DictList", "(", ")", "\n", "exps", ".", "obs", "=", "[", "self", ".", "obss", "[", "i", "]", "[", "j", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_procs", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_proc", ")", "]", "\n", "# In commments below T is self.num_frames_per_proc, P is self.num_procs,", "\n", "# D is the dimensionality", "\n", "\n", "# T x P x D -> P x T x D -> (P * T) x D", "\n", "exps", ".", "memory", "=", "self", ".", "memories", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "memories", ".", "shape", "[", "2", ":", "]", ")", "\n", "# T x P -> P x T -> (P * T) x 1", "\n", "exps", ".", "mask", "=", "self", ".", "masks", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# for all tensors below, T x P -> P x T -> P * T", "\n", "exps", ".", "action", "=", "self", ".", "actions", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "value", "=", "self", ".", "values", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "reward", "=", "self", ".", "rewards", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "advantage", "=", "self", ".", "advantages", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "returnn", "=", "exps", ".", "value", "+", "exps", ".", "advantage", "\n", "exps", ".", "log_prob", "=", "self", ".", "log_probs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "aux_info", ":", "\n", "            ", "exps", "=", "self", ".", "aux_info_collector", ".", "end_collection", "(", "exps", ")", "\n", "\n", "# Preprocess experiences", "\n", "\n", "", "exps", ".", "obs", "=", "self", ".", "preprocess_obss", "(", "exps", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Log some values", "\n", "\n", "keep", "=", "max", "(", "self", ".", "log_done_counter", ",", "self", ".", "num_procs", ")", "\n", "\n", "log", "=", "{", "\n", "\"return_per_episode\"", ":", "self", ".", "log_return", "[", "-", "keep", ":", "]", ",", "\n", "\"reshaped_return_per_episode\"", ":", "self", ".", "log_reshaped_return", "[", "-", "keep", ":", "]", ",", "\n", "\"num_frames_per_episode\"", ":", "self", ".", "log_num_frames", "[", "-", "keep", ":", "]", ",", "\n", "\"num_frames\"", ":", "self", ".", "num_frames", ",", "\n", "\"episodes_done\"", ":", "self", ".", "log_done_counter", ",", "\n", "}", "\n", "\n", "self", ".", "log_done_counter", "=", "0", "\n", "self", ".", "log_return", "=", "self", ".", "log_return", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "self", ".", "log_reshaped_return", "=", "self", ".", "log_reshaped_return", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "self", ".", "log_num_frames", "=", "self", ".", "log_num_frames", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "\n", "return", "exps", ",", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.base.BaseAlgo.update_parameters": [[253, 256], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.ppo.PPOAlgo.__init__": [[13, 32], ["babyai.rl.algos.base.BaseAlgo.__init__", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ppo.PPOAlgo.acmodel.parameters"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "envs", ",", "acmodel", ",", "num_frames_per_proc", "=", "None", ",", "discount", "=", "0.99", ",", "lr", "=", "7e-4", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "\n", "gae_lambda", "=", "0.95", ",", "\n", "entropy_coef", "=", "0.01", ",", "value_loss_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "recurrence", "=", "4", ",", "\n", "adam_eps", "=", "1e-5", ",", "clip_eps", "=", "0.2", ",", "epochs", "=", "4", ",", "batch_size", "=", "256", ",", "preprocess_obss", "=", "None", ",", "\n", "reshape_reward", "=", "None", ",", "aux_info", "=", "None", ")", ":", "\n", "        ", "num_frames_per_proc", "=", "num_frames_per_proc", "or", "128", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "envs", ",", "acmodel", ",", "num_frames_per_proc", ",", "discount", ",", "lr", ",", "gae_lambda", ",", "entropy_coef", ",", "\n", "value_loss_coef", ",", "max_grad_norm", ",", "recurrence", ",", "preprocess_obss", ",", "reshape_reward", ",", "\n", "aux_info", ")", "\n", "\n", "self", ".", "clip_eps", "=", "clip_eps", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "assert", "self", ".", "batch_size", "%", "self", ".", "recurrence", "==", "0", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "lr", ",", "(", "beta1", ",", "beta2", ")", ",", "eps", "=", "adam_eps", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.ppo.PPOAlgo.update_parameters": [[33, 157], ["ppo.PPOAlgo.collect_experiences", "range", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "ppo.PPOAlgo._get_batches_starting_indexes", "range", "ppo.PPOAlgo.optimizer.zero_grad", "batch_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "ppo.PPOAlgo.optimizer.step", "log_entropies.append", "log_values.append", "log_policy_losses.append", "log_value_losses.append", "log_grad_norms.append", "log_losses.append", "ppo.PPOAlgo.acmodel", "dist.entropy().mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "dist.entropy().mean.item", "value.mean().item", "policy_loss.item", "torch.max().mean.item", "torch.max().mean.item", "sum", "ppo.PPOAlgo.acmodel.parameters", "grad_norm.item", "batch_loss.item", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "memory.detach", "dist.entropy", "dist.log_prob", "torch.max", "torch.max", "torch.max", "torch.max", "value.mean", "torch.min", "torch.min", "torch.min", "torch.min", "p.grad.data.norm", "ppo.PPOAlgo.acmodel.parameters"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.algos.base.BaseAlgo.collect_experiences", "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.ppo.PPOAlgo._get_batches_starting_indexes", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step"], ["", "def", "update_parameters", "(", "self", ")", ":", "\n", "# Collect experiences", "\n", "\n", "        ", "exps", ",", "logs", "=", "self", ".", "collect_experiences", "(", ")", "\n", "'''\n        exps is a DictList with the following keys ['obs', 'memory', 'mask', 'action', 'value', 'reward',\n         'advantage', 'returnn', 'log_prob'] and ['collected_info', 'extra_predictions'] if we use aux_info\n        exps.obs is a DictList with the following keys ['image', 'instr']\n        exps.obj.image is a (n_procs * n_frames_per_proc) x image_size 4D tensor\n        exps.obs.instr is a (n_procs * n_frames_per_proc) x (max number of words in an instruction) 2D tensor\n        exps.memory is a (n_procs * n_frames_per_proc) x (memory_size = 2*image_embedding_size) 2D tensor\n        exps.mask is (n_procs * n_frames_per_proc) x 1 2D tensor\n        if we use aux_info: exps.collected_info and exps.extra_predictions are DictLists with keys\n        being the added information. They are either (n_procs * n_frames_per_proc) 1D tensors or\n        (n_procs * n_frames_per_proc) x k 2D tensors where k is the number of classes for multiclass classification\n        '''", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "# Initialize log values", "\n", "\n", "            ", "log_entropies", "=", "[", "]", "\n", "log_values", "=", "[", "]", "\n", "log_policy_losses", "=", "[", "]", "\n", "log_value_losses", "=", "[", "]", "\n", "log_grad_norms", "=", "[", "]", "\n", "\n", "log_losses", "=", "[", "]", "\n", "\n", "'''\n            For each epoch, we create int(total_frames / batch_size + 1) batches, each of size batch_size (except\n            maybe the last one. Each batch is divided into sub-batches of size recurrence (frames are contiguous in\n            a sub-batch), but the position of each sub-batch in a batch and the position of each batch in the whole\n            list of frames is random thanks to self._get_batches_starting_indexes().\n            '''", "\n", "\n", "for", "inds", "in", "self", ".", "_get_batches_starting_indexes", "(", ")", ":", "\n", "# inds is a numpy array of indices that correspond to the beginning of a sub-batch", "\n", "# there are as many inds as there are batches", "\n", "# Initialize batch values", "\n", "\n", "                ", "batch_entropy", "=", "0", "\n", "batch_value", "=", "0", "\n", "batch_policy_loss", "=", "0", "\n", "batch_value_loss", "=", "0", "\n", "batch_loss", "=", "0", "\n", "\n", "# Initialize memory", "\n", "\n", "memory", "=", "exps", ".", "memory", "[", "inds", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "recurrence", ")", ":", "\n", "# Create a sub-batch of experience", "\n", "                    ", "sb", "=", "exps", "[", "inds", "+", "i", "]", "\n", "\n", "# Compute loss", "\n", "\n", "model_results", "=", "self", ".", "acmodel", "(", "sb", ".", "obs", ",", "memory", "*", "sb", ".", "mask", ")", "\n", "dist", "=", "model_results", "[", "'dist'", "]", "\n", "value", "=", "model_results", "[", "'value'", "]", "\n", "memory", "=", "model_results", "[", "'memory'", "]", "\n", "extra_predictions", "=", "model_results", "[", "'extra_predictions'", "]", "\n", "\n", "entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "dist", ".", "log_prob", "(", "sb", ".", "action", ")", "-", "sb", ".", "log_prob", ")", "\n", "surr1", "=", "ratio", "*", "sb", ".", "advantage", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_eps", ",", "1.0", "+", "self", ".", "clip_eps", ")", "*", "sb", ".", "advantage", "\n", "policy_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "value_clipped", "=", "sb", ".", "value", "+", "torch", ".", "clamp", "(", "value", "-", "sb", ".", "value", ",", "-", "self", ".", "clip_eps", ",", "self", ".", "clip_eps", ")", "\n", "surr1", "=", "(", "value", "-", "sb", ".", "returnn", ")", ".", "pow", "(", "2", ")", "\n", "surr2", "=", "(", "value_clipped", "-", "sb", ".", "returnn", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "torch", ".", "max", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "policy_loss", "-", "self", ".", "entropy_coef", "*", "entropy", "+", "self", ".", "value_loss_coef", "*", "value_loss", "\n", "\n", "# Update batch values", "\n", "\n", "batch_entropy", "+=", "entropy", ".", "item", "(", ")", "\n", "batch_value", "+=", "value", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "batch_policy_loss", "+=", "policy_loss", ".", "item", "(", ")", "\n", "batch_value_loss", "+=", "value_loss", ".", "item", "(", ")", "\n", "batch_loss", "+=", "loss", "\n", "\n", "# Update memories for next epoch", "\n", "\n", "if", "i", "<", "self", ".", "recurrence", "-", "1", ":", "\n", "                        ", "exps", ".", "memory", "[", "inds", "+", "i", "+", "1", "]", "=", "memory", ".", "detach", "(", ")", "\n", "\n", "# Update batch values", "\n", "\n", "", "", "batch_entropy", "/=", "self", ".", "recurrence", "\n", "batch_value", "/=", "self", ".", "recurrence", "\n", "batch_policy_loss", "/=", "self", ".", "recurrence", "\n", "batch_value_loss", "/=", "self", ".", "recurrence", "\n", "batch_loss", "/=", "self", ".", "recurrence", "\n", "\n", "# Update actor-critic", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "**", "2", "for", "p", "in", "self", ".", "acmodel", ".", "parameters", "(", ")", "if", "p", ".", "grad", "is", "not", "None", ")", "**", "0.5", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Update log values", "\n", "\n", "log_entropies", ".", "append", "(", "batch_entropy", ")", "\n", "log_values", ".", "append", "(", "batch_value", ")", "\n", "log_policy_losses", ".", "append", "(", "batch_policy_loss", ")", "\n", "log_value_losses", ".", "append", "(", "batch_value_loss", ")", "\n", "log_grad_norms", ".", "append", "(", "grad_norm", ".", "item", "(", ")", ")", "\n", "log_losses", ".", "append", "(", "batch_loss", ".", "item", "(", ")", ")", "\n", "\n", "# Log some values", "\n", "\n", "", "", "logs", "[", "\"entropy\"", "]", "=", "numpy", ".", "mean", "(", "log_entropies", ")", "\n", "logs", "[", "\"value\"", "]", "=", "numpy", ".", "mean", "(", "log_values", ")", "\n", "logs", "[", "\"policy_loss\"", "]", "=", "numpy", ".", "mean", "(", "log_policy_losses", ")", "\n", "logs", "[", "\"value_loss\"", "]", "=", "numpy", ".", "mean", "(", "log_value_losses", ")", "\n", "logs", "[", "\"grad_norm\"", "]", "=", "numpy", ".", "mean", "(", "log_grad_norms", ")", "\n", "logs", "[", "\"loss\"", "]", "=", "numpy", ".", "mean", "(", "log_losses", ")", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.algos.ppo.PPOAlgo._get_batches_starting_indexes": [[158, 175], ["numpy.arange", "numpy.random.permutation", "range", "len"], "methods", ["None"], ["", "def", "_get_batches_starting_indexes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gives, for each batch, the indexes of the observations given to\n        the model and the experiences used to compute the loss at first.\n        Returns\n        -------\n        batches_starting_indexes : list of list of int\n            the indexes of the experiences to be used at first for each batch\n\n        \"\"\"", "\n", "\n", "indexes", "=", "numpy", ".", "arange", "(", "0", ",", "self", ".", "num_frames", ",", "self", ".", "recurrence", ")", "\n", "indexes", "=", "numpy", ".", "random", ".", "permutation", "(", "indexes", ")", "\n", "\n", "num_indexes", "=", "self", ".", "batch_size", "//", "self", ".", "recurrence", "\n", "batches_starting_indexes", "=", "[", "indexes", "[", "i", ":", "i", "+", "num_indexes", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indexes", ")", ",", "num_indexes", ")", "]", "\n", "\n", "return", "batches_starting_indexes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToRedBallGrey.__init__": [[17, 24], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "num_dists", "=", "7", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToRedBallGrey.gen_mission": [[26, 38], ["iclr19_levels.Level_GoToRedBallGrey.place_agent", "iclr19_levels.Level_GoToRedBallGrey.add_object", "iclr19_levels.Level_GoToRedBallGrey.add_distractors", "iclr19_levels.Level_GoToRedBallGrey.check_objs_reachable", "verifier.GoToInstr", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "0", ",", "0", ",", "'ball'", ",", "'red'", ")", "\n", "dists", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "\n", "for", "dist", "in", "dists", ":", "\n", "            ", "dist", ".", "color", "=", "'grey'", "\n", "\n", "# Make sure no unblocking is required", "\n", "", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToRedBall.__init__": [[46, 53], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "num_dists", "=", "7", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToRedBall.gen_mission": [[55, 64], ["iclr19_levels.Level_GoToRedBall.place_agent", "iclr19_levels.Level_GoToRedBall.add_object", "iclr19_levels.Level_GoToRedBall.add_distractors", "iclr19_levels.Level_GoToRedBall.check_objs_reachable", "verifier.GoToInstr", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "0", ",", "0", ",", "'ball'", ",", "'red'", ")", "\n", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "\n", "# Make sure no unblocking is required", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToRedBallNoDists.__init__": [[71, 73], ["iclr19_levels.Level_GoToRedBall.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "0", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObj.__init__": [[80, 86], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObj.gen_mission": [[88, 93], ["iclr19_levels.Level_GoToObj.place_agent", "iclr19_levels.Level_GoToObj.add_distractors", "verifier.GoToInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "1", ")", "\n", "obj", "=", "objs", "[", "0", "]", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjS4.__init__": [[96, 98], ["iclr19_levels.Level_GoToObj.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjS6.__init__": [[101, 103], ["iclr19_levels.Level_GoToObj.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "6", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocal.__init__": [[110, 117], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "num_dists", "=", "8", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocal.gen_mission": [[119, 125], ["iclr19_levels.Level_GoToLocal.place_agent", "iclr19_levels.Level_GoToLocal.add_distractors", "iclr19_levels.Level_GoToLocal.check_objs_reachable", "iclr19_levels.Level_GoToLocal._rand_elem", "verifier.GoToInstr", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS5N2.__init__": [[128, 130], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "5", ",", "num_dists", "=", "2", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS6N2.__init__": [[133, 135], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "6", ",", "num_dists", "=", "2", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS6N3.__init__": [[138, 140], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "6", ",", "num_dists", "=", "3", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS6N4.__init__": [[143, 145], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "6", ",", "num_dists", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS7N4.__init__": [[148, 150], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "7", ",", "num_dists", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS7N5.__init__": [[153, 155], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "7", ",", "num_dists", "=", "5", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N2.__init__": [[158, 160], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "2", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N3.__init__": [[163, 165], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "3", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N4.__init__": [[168, 170], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N5.__init__": [[173, 175], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "5", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N6.__init__": [[178, 180], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "6", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToLocalS8N7.__init__": [[183, 185], ["iclr19_levels.Level_GoToLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "8", ",", "num_dists", "=", "7", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PutNextLocal.__init__": [[193, 200], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "num_objs", "=", "8", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_objs", "=", "num_objs", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PutNextLocal.gen_mission": [[202, 211], ["iclr19_levels.Level_PutNextLocal.place_agent", "iclr19_levels.Level_PutNextLocal.add_distractors", "iclr19_levels.Level_PutNextLocal.check_objs_reachable", "iclr19_levels.Level_PutNextLocal._rand_subset", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_objs", ",", "all_unique", "=", "True", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "o1", ",", "o2", "=", "self", ".", "_rand_subset", "(", "objs", ",", "2", ")", "\n", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "\n", "ObjDesc", "(", "o1", ".", "type", ",", "o1", ".", "color", ")", ",", "\n", "ObjDesc", "(", "o2", ".", "type", ",", "o2", ".", "color", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PutNextLocalS5N3.__init__": [[215, 217], ["iclr19_levels.Level_PutNextLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "5", ",", "num_objs", "=", "3", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PutNextLocalS6N4.__init__": [[220, 222], ["iclr19_levels.Level_PutNextLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "6", ",", "num_objs", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoTo.__init__": [[229, 245], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "8", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_dists", "=", "18", ",", "\n", "doors_open", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "self", ".", "doors_open", "=", "doors_open", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoTo.gen_mission": [[247, 258], ["iclr19_levels.Level_GoTo.place_agent", "iclr19_levels.Level_GoTo.connect_all", "iclr19_levels.Level_GoTo.add_distractors", "iclr19_levels.Level_GoTo.check_objs_reachable", "iclr19_levels.Level_GoTo._rand_elem", "verifier.GoToInstr", "verifier.ObjDesc", "iclr19_levels.Level_GoTo.open_all_doors"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.open_all_doors"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n", "# If requested, open all the doors", "\n", "if", "self", ".", "doors_open", ":", "\n", "            ", "self", ".", "open_all_doors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToOpen.__init__": [[261, 263], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "doors_open", "=", "True", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMaze.__init__": [[270, 272], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "doors_open", "=", "False", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeOpen.__init__": [[275, 277], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "doors_open", "=", "True", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeS4R2.__init__": [[280, 282], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "room_size", "=", "4", ",", "num_rows", "=", "2", ",", "num_cols", "=", "2", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeS4.__init__": [[285, 287], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "room_size", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeS5.__init__": [[290, 292], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "room_size", "=", "5", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeS6.__init__": [[295, 297], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "room_size", "=", "6", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToObjMazeS7.__init__": [[300, 302], ["iclr19_levels.Level_GoTo.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_dists", "=", "1", ",", "room_size", "=", "7", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToImpUnlock.gen_mission": [[311, 358], ["iclr19_levels.Level_GoToImpUnlock._rand_int", "iclr19_levels.Level_GoToImpUnlock._rand_int", "iclr19_levels.Level_GoToImpUnlock.add_door", "iclr19_levels.Level_GoToImpUnlock.get_room", "iclr19_levels.Level_GoToImpUnlock.connect_all", "range", "iclr19_levels.Level_GoToImpUnlock.check_objs_reachable", "iclr19_levels.Level_GoToImpUnlock.add_distractors", "verifier.GoToInstr", "iclr19_levels.Level_GoToImpUnlock._rand_int", "iclr19_levels.Level_GoToImpUnlock._rand_int", "iclr19_levels.Level_GoToImpUnlock.add_object", "range", "iclr19_levels.Level_GoToImpUnlock.place_agent", "iclr19_levels.Level_GoToImpUnlock.room_from_pos", "verifier.ObjDesc", "iclr19_levels.Level_GoToImpUnlock.add_distractors"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a locked door to a random room", "\n", "        ", "id", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "jd", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "id", ",", "jd", ",", "locked", "=", "True", ")", "\n", "locked_room", "=", "self", ".", "get_room", "(", "id", ",", "jd", ")", "\n", "\n", "# Add the key to a different room", "\n", "while", "True", ":", "\n", "            ", "ik", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "jk", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "if", "ik", "is", "id", "and", "jk", "is", "jd", ":", "\n", "                ", "continue", "\n", "", "self", ".", "add_object", "(", "ik", ",", "jk", ",", "'key'", ",", "door", ".", "color", ")", "\n", "break", "\n", "\n", "", "self", ".", "connect_all", "(", ")", "\n", "\n", "# Add distractors to all but the locked room.", "\n", "# We do this to speed up the reachability test,", "\n", "# which otherwise will reject all levels with", "\n", "# objects in the locked room.", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "                ", "if", "i", "is", "not", "id", "or", "j", "is", "not", "jd", ":", "\n", "                    ", "self", ".", "add_distractors", "(", "\n", "i", ",", "\n", "j", ",", "\n", "num_distractors", "=", "2", ",", "\n", "all_unique", "=", "False", "\n", ")", "\n", "\n", "# The agent must be placed after all the object to respect constraints", "\n", "", "", "", "while", "True", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "# Ensure that we are not placing the agent in the locked room", "\n", "if", "start_room", "is", "locked_room", ":", "\n", "                ", "continue", "\n", "", "break", "\n", "\n", "", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "# Add a single object to the locked room", "\n", "# The instruction requires going to an object matching that description", "\n", "obj", ",", "=", "self", ".", "add_distractors", "(", "id", ",", "jd", ",", "num_distractors", "=", "1", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_Pickup.gen_mission": [[365, 372], ["iclr19_levels.Level_Pickup.place_agent", "iclr19_levels.Level_Pickup.connect_all", "iclr19_levels.Level_Pickup.add_distractors", "iclr19_levels.Level_Pickup.check_objs_reachable", "iclr19_levels.Level_Pickup._rand_elem", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "18", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_UnblockPickup.gen_mission": [[380, 392], ["iclr19_levels.Level_UnblockPickup.place_agent", "iclr19_levels.Level_UnblockPickup.connect_all", "iclr19_levels.Level_UnblockPickup.add_distractors", "iclr19_levels.Level_UnblockPickup.check_objs_reachable", "iclr19_levels.Level_UnblockPickup._rand_elem", "verifier.PickupInstr", "levelgen.RejectSampling", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "20", ",", "all_unique", "=", "False", ")", "\n", "\n", "# Ensure that at least one object is not reachable without unblocking", "\n", "# Note: the selected object will still be reachable most of the time", "\n", "if", "self", ".", "check_objs_reachable", "(", "raise_exc", "=", "False", ")", ":", "\n", "            ", "raise", "RejectSampling", "(", "'all objects reachable'", ")", "\n", "\n", "", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_Open.gen_mission": [[399, 416], ["iclr19_levels.Level_Open.place_agent", "iclr19_levels.Level_Open.connect_all", "iclr19_levels.Level_Open.add_distractors", "iclr19_levels.Level_Open.check_objs_reachable", "range", "iclr19_levels.Level_Open._rand_elem", "verifier.OpenInstr", "range", "verifier.ObjDesc", "iclr19_levels.Level_Open.get_room", "doors.append"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "self", ".", "add_distractors", "(", "num_distractors", "=", "18", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "# Collect a list of all the doors in the environment", "\n", "doors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "                ", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "for", "door", "in", "room", ".", "doors", ":", "\n", "                    ", "if", "door", ":", "\n", "                        ", "doors", ".", "append", "(", "door", ")", "\n", "\n", "", "", "", "", "door", "=", "self", ".", "_rand_elem", "(", "doors", ")", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "ObjDesc", "(", "door", ".", "type", ",", "door", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_Unlock.gen_mission": [[425, 475], ["iclr19_levels.Level_Unlock._rand_int", "iclr19_levels.Level_Unlock._rand_int", "iclr19_levels.Level_Unlock.add_door", "iclr19_levels.Level_Unlock.get_room", "iclr19_levels.Level_Unlock._rand_bool", "range", "iclr19_levels.Level_Unlock.check_objs_reachable", "verifier.OpenInstr", "iclr19_levels.Level_Unlock._rand_int", "iclr19_levels.Level_Unlock._rand_int", "iclr19_levels.Level_Unlock.add_object", "list", "iclr19_levels.Level_Unlock.connect_all", "iclr19_levels.Level_Unlock.connect_all", "range", "iclr19_levels.Level_Unlock.place_agent", "iclr19_levels.Level_Unlock.room_from_pos", "verifier.ObjDesc", "filter", "iclr19_levels.Level_Unlock.add_distractors"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a locked door to a random room", "\n", "        ", "id", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "jd", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "id", ",", "jd", ",", "locked", "=", "True", ")", "\n", "locked_room", "=", "self", ".", "get_room", "(", "id", ",", "jd", ")", "\n", "\n", "# Add the key to a different room", "\n", "while", "True", ":", "\n", "            ", "ik", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "jk", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "if", "ik", "is", "id", "and", "jk", "is", "jd", ":", "\n", "                ", "continue", "\n", "", "self", ".", "add_object", "(", "ik", ",", "jk", ",", "'key'", ",", "door", ".", "color", ")", "\n", "break", "\n", "\n", "# With 50% probability, ensure that the locked door is the only", "\n", "# door of that color", "\n", "", "if", "self", ".", "_rand_bool", "(", ")", ":", "\n", "            ", "colors", "=", "list", "(", "filter", "(", "lambda", "c", ":", "c", "is", "not", "door", ".", "color", ",", "COLOR_NAMES", ")", ")", "\n", "self", ".", "connect_all", "(", "door_colors", "=", "colors", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "connect_all", "(", ")", "\n", "\n", "# Add distractors to all but the locked room.", "\n", "# We do this to speed up the reachability test,", "\n", "# which otherwise will reject all levels with", "\n", "# objects in the locked room.", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "                ", "if", "i", "is", "not", "id", "or", "j", "is", "not", "jd", ":", "\n", "                    ", "self", ".", "add_distractors", "(", "\n", "i", ",", "\n", "j", ",", "\n", "num_distractors", "=", "3", ",", "\n", "all_unique", "=", "False", "\n", ")", "\n", "\n", "# The agent must be placed after all the object to respect constraints", "\n", "", "", "", "while", "True", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "# Ensure that we are not placing the agent in the locked room", "\n", "if", "start_room", "is", "locked_room", ":", "\n", "                ", "continue", "\n", "", "break", "\n", "\n", "", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "ObjDesc", "(", "door", ".", "type", ",", "door", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PutNext.gen_mission": [[482, 491], ["iclr19_levels.Level_PutNext.place_agent", "iclr19_levels.Level_PutNext.connect_all", "iclr19_levels.Level_PutNext.add_distractors", "iclr19_levels.Level_PutNext.check_objs_reachable", "iclr19_levels.Level_PutNext._rand_subset", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "18", ",", "all_unique", "=", "False", ")", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "o1", ",", "o2", "=", "self", ".", "_rand_subset", "(", "objs", ",", "2", ")", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "\n", "ObjDesc", "(", "o1", ".", "type", ",", "o1", ".", "color", ")", ",", "\n", "ObjDesc", "(", "o2", ".", "type", ",", "o2", ".", "color", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_PickupLoc.__init__": [[502, 515], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "# We add many distractors to increase the probability", "\n", "# of ambiguous locations within the same room", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "action_kinds", "=", "[", "'pickup'", "]", ",", "\n", "instr_kinds", "=", "[", "'action'", "]", ",", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "num_dists", "=", "8", ",", "\n", "locked_room_prob", "=", "0", ",", "\n", "locations", "=", "True", ",", "\n", "unblocking", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToSeq.__init__": [[528, 546], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "8", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_dists", "=", "18", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "num_dists", "=", "num_dists", ",", "\n", "seed", "=", "seed", ",", "\n", "action_kinds", "=", "[", "'goto'", "]", ",", "\n", "locked_room_prob", "=", "0", ",", "\n", "locations", "=", "False", ",", "\n", "unblocking", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_GoToSeqS5R2.__init__": [[550, 552], ["iclr19_levels.Level_GoToSeq.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "room_size", "=", "5", ",", "num_rows", "=", "2", ",", "num_cols", "=", "2", ",", "num_dists", "=", "4", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_Synth.__init__": [[563, 583], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "8", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_dists", "=", "18", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "# We add many distractors to increase the probability", "\n", "# of ambiguous locations within the same room", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "num_dists", "=", "num_dists", ",", "\n", "seed", "=", "seed", ",", "\n", "instr_kinds", "=", "[", "'action'", "]", ",", "\n", "locations", "=", "False", ",", "\n", "unblocking", "=", "True", ",", "\n", "implicit_unlock", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_SynthS5R2.__init__": [[587, 594], ["iclr19_levels.Level_Synth.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "num_rows", "=", "2", ",", "\n", "num_cols", "=", "2", ",", "\n", "num_dists", "=", "7", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_SynthLoc.__init__": [[605, 614], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "# We add many distractors to increase the probability", "\n", "# of ambiguous locations within the same room", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "instr_kinds", "=", "[", "'action'", "]", ",", "\n", "locations", "=", "True", ",", "\n", "unblocking", "=", "True", ",", "\n", "implicit_unlock", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_SynthSeq.__init__": [[625, 633], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "# We add many distractors to increase the probability", "\n", "# of ambiguous locations within the same room", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "locations", "=", "True", ",", "\n", "unblocking", "=", "True", ",", "\n", "implicit_unlock", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_MiniBossLevel.__init__": [[637, 645], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "num_cols", "=", "2", ",", "\n", "num_rows", "=", "2", ",", "\n", "room_size", "=", "5", ",", "\n", "num_dists", "=", "7", ",", "\n", "locked_room_prob", "=", "0.25", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_BossLevel.__init__": [[649, 652], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.iclr19_levels.Level_BossLevelNoUnlock.__init__": [[656, 661], ["levelgen.LevelGen.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "locked_room_prob", "=", "0", ",", "\n", "implicit_unlock", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestGoToBlocked.__init__": [[18, 24], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestGoToBlocked.gen_mission": [[26, 37], ["test_levels.Level_TestGoToBlocked.place_agent", "numpy.array", "Ball", "test_levels.Level_TestGoToBlocked.grid.set", "verifier.GoToInstr", "verifier.ObjDesc", "test_levels.Level_TestGoToBlocked.place_obj", "Ball"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "obj", "=", "Ball", "(", "'yellow'", ")", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "1", ",", "obj", ")", "\n", "for", "i", "in", "(", "1", ",", "2", ",", "3", ")", ":", "\n", "            ", "for", "j", "in", "(", "1", ",", "2", ",", "3", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ")", "not", "in", "[", "(", "1", ",", "1", ")", ",", "(", "3", ",", "3", ")", "]", ":", "\n", "                    ", "self", ".", "place_obj", "(", "Ball", "(", "'red'", ")", ",", "(", "i", ",", "j", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "", "", "", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToBlocked.__init__": [[45, 51], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToBlocked.gen_mission": [[53, 65], ["test_levels.Level_TestPutNextToBlocked.place_agent", "numpy.array", "Ball", "Ball", "test_levels.Level_TestPutNextToBlocked.place_obj", "test_levels.Level_TestPutNextToBlocked.place_obj", "test_levels.Level_TestPutNextToBlocked.grid.set", "test_levels.Level_TestPutNextToBlocked.grid.set", "verifier.PutNextInstr", "Ball", "Ball", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "obj1", "=", "Ball", "(", "'yellow'", ")", "\n", "obj2", "=", "Ball", "(", "'blue'", ")", "\n", "self", ".", "place_obj", "(", "obj1", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "obj2", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "2", ",", "Ball", "(", "'red'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "2", ",", "1", ",", "Ball", "(", "'red'", ")", ")", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "ObjDesc", "(", "obj1", ".", "type", ",", "obj1", ".", "color", ")", ",", "\n", "ObjDesc", "(", "obj2", ".", "type", ",", "obj2", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToCloseToDoor1.__init__": [[73, 79], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "2", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToCloseToDoor1.gen_mission": [[81, 93], ["numpy.array", "test_levels.Level_TestPutNextToCloseToDoor1.add_door", "Ball", "Ball", "test_levels.Level_TestPutNextToCloseToDoor1.place_obj", "test_levels.Level_TestPutNextToCloseToDoor1.place_obj", "verifier.BeforeInstr", "verifier.OpenInstr", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "None", ",", "'red'", ",", "False", ")", "\n", "self", ".", "obj1", "=", "Ball", "(", "'yellow'", ")", "\n", "self", ".", "obj2", "=", "Ball", "(", "'blue'", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "obj1", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "obj2", ",", "(", "pos", "[", "0", "]", ",", "pos", "[", "1", "]", "+", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "instrs", "=", "BeforeInstr", "(", "\n", "OpenInstr", "(", "ObjDesc", "(", "'door'", ",", "door", ".", "color", ")", ")", ",", "\n", "PutNextInstr", "(", "ObjDesc", "(", "self", ".", "obj1", ".", "type", ",", "self", ".", "obj1", ".", "color", ")", ",", "\n", "ObjDesc", "(", "self", ".", "obj2", ".", "type", ",", "self", ".", "obj2", ".", "color", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToCloseToDoor2.gen_mission": [[101, 105], ["test_levels.Level_TestPutNextToCloseToDoor1.gen_mission", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.gen_mission"], ["def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "gen_mission", "(", ")", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "ObjDesc", "(", "self", ".", "obj1", ".", "type", ",", "self", ".", "obj1", ".", "color", ")", ",", "\n", "ObjDesc", "(", "self", ".", "obj2", ".", "type", ",", "self", ".", "obj2", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToIdentical.__init__": [[114, 120], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextToIdentical.gen_mission": [[122, 133], ["numpy.array", "test_levels.Level_TestPutNextToIdentical.place_obj", "test_levels.Level_TestPutNextToIdentical.place_obj", "test_levels.Level_TestPutNextToIdentical.place_obj", "verifier.PutNextInstr", "verifier.PutNextInstr", "verifier.BeforeInstr", "Box", "Ball", "Ball", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "3", ",", "3", "]", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'blue'", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'red'", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "instr1", "=", "PutNextInstr", "(", "ObjDesc", "(", "'ball'", ",", "'blue'", ")", ",", "\n", "ObjDesc", "(", "'box'", ",", "'yellow'", ")", ")", "\n", "instr2", "=", "PutNextInstr", "(", "ObjDesc", "(", "'box'", ",", "'yellow'", ")", ",", "\n", "ObjDesc", "(", "'ball'", ",", "None", ")", ")", "\n", "self", ".", "instrs", "=", "BeforeInstr", "(", "instr1", ",", "instr2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestUnblockingLoop.__init__": [[138, 144], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "2", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestUnblockingLoop.gen_mission": [[146, 160], ["numpy.array", "test_levels.Level_TestUnblockingLoop.add_door", "test_levels.Level_TestUnblockingLoop.add_door", "test_levels.Level_TestUnblockingLoop.add_door", "test_levels.Level_TestUnblockingLoop.place_obj", "test_levels.Level_TestUnblockingLoop.place_obj", "test_levels.Level_TestUnblockingLoop.place_obj", "test_levels.Level_TestUnblockingLoop.place_obj", "verifier.PutNextInstr", "verifier.GoToInstr", "verifier.GoToInstr", "verifier.BeforeInstr", "Box", "Ball", "Ball", "Key", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.AndInstr"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "15", ",", "4", "]", ")", "\n", "self", ".", "agent_dir", "=", "2", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "1", ",", "'red'", ",", "False", ")", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "1", ",", "0", ",", "'red'", ",", "False", ")", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "3", ",", "'blue'", ",", "False", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "9", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'blue'", ")", ",", "(", "5", ",", "3", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'yellow'", ")", ",", "(", "6", ",", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Key", "(", "'blue'", ")", ",", "(", "15", ",", "15", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "put", "=", "PutNextInstr", "(", "ObjDesc", "(", "'key'", ",", "'blue'", ")", ",", "ObjDesc", "(", "'door'", ",", "'blue'", ")", ")", "\n", "goto1", "=", "GoToInstr", "(", "ObjDesc", "(", "'ball'", ",", "'yellow'", ")", ")", "\n", "goto2", "=", "GoToInstr", "(", "ObjDesc", "(", "'box'", ",", "'yellow'", ")", ")", "\n", "self", ".", "instrs", "=", "BeforeInstr", "(", "put", ",", "AndInstr", "(", "goto1", ",", "goto2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextCloseToDoor.__init__": [[165, 171], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "2", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestPutNextCloseToDoor.gen_mission": [[173, 187], ["numpy.array", "test_levels.Level_TestPutNextCloseToDoor.add_door", "test_levels.Level_TestPutNextCloseToDoor.add_door", "test_levels.Level_TestPutNextCloseToDoor.add_door", "test_levels.Level_TestPutNextCloseToDoor.place_obj", "test_levels.Level_TestPutNextCloseToDoor.place_obj", "test_levels.Level_TestPutNextCloseToDoor.place_obj", "verifier.PutNextInstr", "Ball", "Ball", "test_levels.Level_TestPutNextCloseToDoor.place_obj", "test_levels.Level_TestPutNextCloseToDoor.place_obj", "Box", "verifier.ObjDesc", "verifier.ObjDesc", "Box", "Box"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "5", ",", "10", "]", ")", "\n", "self", ".", "agent_dir", "=", "2", "\n", "door", ",", "pos1", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "1", ",", "'red'", ",", "False", ")", "\n", "door", ",", "pos2", "=", "self", ".", "add_door", "(", "0", ",", "1", ",", "0", ",", "'red'", ",", "False", ")", "\n", "door", ",", "pos3", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "3", ",", "'blue'", ",", "False", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'blue'", ")", ",", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'blue'", ")", ",", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "if", "pos1", "[", "0", "]", "-", "1", ">=", "1", ":", "\n", "            ", "self", ".", "place_obj", "(", "Box", "(", "'green'", ")", ",", "(", "pos1", "[", "0", "]", "-", "1", ",", "pos1", "[", "1", "]", "-", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "", "if", "pos1", "[", "0", "]", "+", "1", "<", "8", ":", "\n", "            ", "self", ".", "place_obj", "(", "Box", "(", "'green'", ")", ",", "(", "pos1", "[", "0", "]", "+", "1", ",", "pos1", "[", "1", "]", "-", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "3", ",", "15", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "ObjDesc", "(", "'box'", ",", "'yellow'", ")", ",", "ObjDesc", "(", "'ball'", ",", "'blue'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestLotsOfBlockers.__init__": [[195, 201], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "8", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.test_levels.Level_TestLotsOfBlockers.gen_mission": [[203, 216], ["numpy.array", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "test_levels.Level_TestLotsOfBlockers.place_obj", "verifier.PutNextInstr", "Box", "Box", "Box", "Box", "Box", "Box", "Ball", "Ball", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent_pos", "=", "np", ".", "array", "(", "[", "5", ",", "5", "]", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "2", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "2", ",", "3", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "3", ",", "4", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "2", ",", "6", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Box", "(", "'yellow'", ")", ",", "(", "1", ",", "3", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'blue'", ")", ",", "(", "1", ",", "2", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "place_obj", "(", "Ball", "(", "'red'", ")", ",", "(", "3", ",", "6", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "ObjDesc", "(", "'ball'", ",", "'red'", ")", ",", "\n", "ObjDesc", "(", "'ball'", ",", "'blue'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.__init__": [[46, 60], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", ",", "color", "=", "None", ",", "loc", "=", "None", ")", ":", "\n", "        ", "assert", "type", "in", "[", "None", ",", "*", "OBJ_TYPES", "]", ",", "type", "\n", "assert", "color", "in", "[", "None", ",", "*", "COLOR_NAMES", "]", ",", "color", "\n", "assert", "loc", "in", "[", "None", ",", "*", "LOC_NAMES", "]", ",", "loc", "\n", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "loc", "=", "loc", "\n", "\n", "# Set of objects possibly matching the description", "\n", "self", ".", "obj_set", "=", "[", "]", "\n", "\n", "# Set of initial object positions", "\n", "self", ".", "obj_poss", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.__repr__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{} {} {}\"", ".", "format", "(", "self", ".", "color", ",", "self", ".", "type", ",", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.surface": [[64, 95], ["verifier.ObjDesc.find_matching_objs", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"\n        Generate a natural language representation of the object description\n        \"\"\"", "\n", "\n", "self", ".", "find_matching_objs", "(", "env", ")", "\n", "assert", "len", "(", "self", ".", "obj_set", ")", ">", "0", ",", "\"no object matching description\"", "\n", "\n", "if", "self", ".", "type", ":", "\n", "            ", "s", "=", "str", "(", "self", ".", "type", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "'object'", "\n", "\n", "", "if", "self", ".", "color", ":", "\n", "            ", "s", "=", "self", ".", "color", "+", "' '", "+", "s", "\n", "\n", "", "if", "self", ".", "loc", ":", "\n", "            ", "if", "self", ".", "loc", "==", "'front'", ":", "\n", "                ", "s", "=", "s", "+", "' in front of you'", "\n", "", "elif", "self", ".", "loc", "==", "'behind'", ":", "\n", "                ", "s", "=", "s", "+", "' behind you'", "\n", "", "else", ":", "\n", "                ", "s", "=", "s", "+", "' on your '", "+", "self", ".", "loc", "\n", "\n", "# Singular vs plural", "\n", "", "", "if", "len", "(", "self", ".", "obj_set", ")", ">", "1", ":", "\n", "            ", "s", "=", "'a '", "+", "s", "\n", "", "else", ":", "\n", "            ", "s", "=", "'the '", "+", "s", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs": [[96, 162], ["env.room_from_pos", "range", "range", "env.grid.get", "verifier.ObjDesc.obj_poss.append", "any", "verifier.ObjDesc.obj_set.append", "env.room_from_pos.pos_inside", "verifier.dot_product", "verifier.dot_product", "verifier.dot_product", "verifier.dot_product"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.dot_product", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.dot_product", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.dot_product", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.dot_product"], ["", "def", "find_matching_objs", "(", "self", ",", "env", ",", "use_location", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Find the set of objects matching the description and their positions.\n        When use_location is False, we only update the positions of already tracked objects, without taking into account\n        the location of the object. e.g. A ball that was on \"your right\" initially will still be tracked as being \"on\n        your right\" when you move.\n        \"\"\"", "\n", "\n", "if", "use_location", ":", "\n", "            ", "self", ".", "obj_set", "=", "[", "]", "\n", "# otherwise we keep the same obj_set", "\n", "\n", "", "self", ".", "obj_poss", "=", "[", "]", "\n", "\n", "agent_room", "=", "env", ".", "room_from_pos", "(", "*", "env", ".", "agent_pos", ")", "\n", "\n", "for", "i", "in", "range", "(", "env", ".", "grid", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "env", ".", "grid", ".", "height", ")", ":", "\n", "                ", "cell", "=", "env", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "cell", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "not", "use_location", ":", "\n", "# we should keep tracking the same objects initially tracked only", "\n", "                    ", "already_tracked", "=", "any", "(", "[", "cell", "is", "obj", "for", "obj", "in", "self", ".", "obj_set", "]", ")", "\n", "if", "not", "already_tracked", ":", "\n", "                        ", "continue", "\n", "\n", "# Check if object's type matches description", "\n", "", "", "if", "self", ".", "type", "is", "not", "None", "and", "cell", ".", "type", "!=", "self", ".", "type", ":", "\n", "                    ", "continue", "\n", "\n", "# Check if object's color matches description", "\n", "", "if", "self", ".", "color", "is", "not", "None", "and", "cell", ".", "color", "!=", "self", ".", "color", ":", "\n", "                    ", "continue", "\n", "\n", "# Check if object's position matches description", "\n", "", "if", "use_location", "and", "self", ".", "loc", "in", "[", "\"left\"", ",", "\"right\"", ",", "\"front\"", ",", "\"behind\"", "]", ":", "\n", "# Locations apply only to objects in the same room", "\n", "# the agent starts in", "\n", "                    ", "if", "not", "agent_room", ".", "pos_inside", "(", "i", ",", "j", ")", ":", "\n", "                        ", "continue", "\n", "\n", "# Direction from the agent to the object", "\n", "", "v", "=", "(", "i", "-", "env", ".", "agent_pos", "[", "0", "]", ",", "j", "-", "env", ".", "agent_pos", "[", "1", "]", ")", "\n", "\n", "# (d1, d2) is an oriented orthonormal basis", "\n", "d1", "=", "DIR_TO_VEC", "[", "env", ".", "agent_dir", "]", "\n", "d2", "=", "(", "-", "d1", "[", "1", "]", ",", "d1", "[", "0", "]", ")", "\n", "\n", "# Check if object's position matches with location", "\n", "pos_matches", "=", "{", "\n", "\"left\"", ":", "dot_product", "(", "v", ",", "d2", ")", "<", "0", ",", "\n", "\"right\"", ":", "dot_product", "(", "v", ",", "d2", ")", ">", "0", ",", "\n", "\"front\"", ":", "dot_product", "(", "v", ",", "d1", ")", ">", "0", ",", "\n", "\"behind\"", ":", "dot_product", "(", "v", ",", "d1", ")", "<", "0", "\n", "}", "\n", "\n", "if", "not", "(", "pos_matches", "[", "self", ".", "loc", "]", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "if", "use_location", ":", "\n", "                    ", "self", ".", "obj_set", ".", "append", "(", "cell", ")", "\n", "", "self", ".", "obj_poss", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "\n", "", "", "return", "self", ".", "obj_set", ",", "self", ".", "obj_poss", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.Instr.__init__": [[169, 171], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.Instr.surface": [[172, 178], ["None"], "methods", ["None"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"\n        Produce a natural language representation of the instruction\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.Instr.reset_verifier": [[179, 185], ["None"], "methods", ["None"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "\"\"\"\n        Must be called at the beginning of the episode\n        \"\"\"", "\n", "\n", "self", ".", "env", "=", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.Instr.verify": [[186, 194], ["None"], "methods", ["None"], ["", "def", "verify", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Verify if the task described by the instruction is incomplete,\n        complete with success or failed. The return value is a string,\n        one of: 'success', 'failure' or 'continue'.\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.Instr.update_objs_poss": [[195, 203], ["hasattr", "getattr().find_matching_objs", "getattr"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "update_objs_poss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Update the position of objects present in the instruction if needed\n        \"\"\"", "\n", "potential_objects", "=", "(", "'desc'", ",", "'desc_move'", ",", "'desc_fixed'", ")", "\n", "for", "attr", "in", "potential_objects", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "attr", ")", ":", "\n", "                ", "getattr", "(", "self", ",", "attr", ")", ".", "find_matching_objs", "(", "self", ".", "env", ",", "use_location", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ActionInstr.__init__": [[210, 215], ["verifier.Instr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Indicates that the action was completed on the last step", "\n", "self", ".", "lastStepMatch", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ActionInstr.verify": [[216, 231], ["verifier.ActionInstr.verify_action", "verifier.ActionInstr.verify_action"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.verify_action", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.verify_action"], ["", "def", "verify", "(", "self", ",", "action", ")", ":", "\n", "        ", "\"\"\"\n        Verifies actions, with and without the done action.\n        \"\"\"", "\n", "\n", "if", "not", "use_done_actions", ":", "\n", "            ", "return", "self", ".", "verify_action", "(", "action", ")", "\n", "\n", "", "if", "action", "==", "self", ".", "env", ".", "actions", ".", "done", ":", "\n", "            ", "if", "self", ".", "lastStepMatch", ":", "\n", "                ", "return", "'success'", "\n", "", "return", "'failure'", "\n", "\n", "", "res", "=", "self", ".", "verify_action", "(", "action", ")", "\n", "self", ".", "lastStepMatch", "=", "(", "res", "==", "'success'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ActionInstr.verify_action": [[232, 239], ["None"], "methods", ["None"], ["", "def", "verify_action", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Each action instruction class should implement this method\n        to verify the action.\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.OpenInstr.__init__": [[242, 247], ["verifier.ActionInstr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obj_desc", ",", "strict", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "obj_desc", ".", "type", "==", "'door'", "\n", "self", ".", "desc", "=", "obj_desc", "\n", "self", ".", "strict", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.OpenInstr.surface": [[248, 250], ["verifier.OpenInstr.desc.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "'open '", "+", "self", ".", "desc", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.OpenInstr.reset_verifier": [[251, 256], ["verifier.Instr.reset_verifier", "verifier.OpenInstr.desc.find_matching_objs"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "\n", "# Identify set of possible matching objects in the environment", "\n", "self", ".", "desc", ".", "find_matching_objs", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.OpenInstr.verify_action": [[257, 275], ["verifier.OpenInstr.env.grid.get"], "methods", ["None"], ["", "def", "verify_action", "(", "self", ",", "action", ")", ":", "\n", "# Only verify when the toggle action is performed", "\n", "        ", "if", "action", "!=", "self", ".", "env", ".", "actions", ".", "toggle", ":", "\n", "            ", "return", "'continue'", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "", "front_cell", "=", "self", ".", "env", ".", "grid", ".", "get", "(", "*", "self", ".", "env", ".", "front_pos", ")", "\n", "\n", "for", "door", "in", "self", ".", "desc", ".", "obj_set", ":", "\n", "            ", "if", "front_cell", "and", "front_cell", "is", "door", "and", "door", ".", "is_open", ":", "\n", "                ", "return", "'success'", "\n", "\n", "# If in strict mode and the wrong door is opened, failure", "\n", "", "", "if", "self", ".", "strict", ":", "\n", "            ", "if", "front_cell", "and", "front_cell", ".", "type", "==", "'door'", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.GoToInstr.__init__": [[283, 286], ["verifier.ActionInstr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "obj_desc", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "desc", "=", "obj_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.GoToInstr.surface": [[287, 289], ["verifier.GoToInstr.desc.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "'go to '", "+", "self", ".", "desc", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.GoToInstr.reset_verifier": [[290, 295], ["verifier.Instr.reset_verifier", "verifier.GoToInstr.desc.find_matching_objs"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "\n", "# Identify set of possible matching objects in the environment", "\n", "self", ".", "desc", ".", "find_matching_objs", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.GoToInstr.verify_action": [[296, 304], ["numpy.array_equal"], "methods", ["None"], ["", "def", "verify_action", "(", "self", ",", "action", ")", ":", "\n", "# For each object position", "\n", "        ", "for", "pos", "in", "self", ".", "desc", ".", "obj_poss", ":", "\n", "# If the agent is next to (and facing) the object", "\n", "            ", "if", "np", ".", "array_equal", "(", "pos", ",", "self", ".", "env", ".", "front_pos", ")", ":", "\n", "                ", "return", "'success'", "\n", "\n", "", "", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PickupInstr.__init__": [[312, 317], ["verifier.ActionInstr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "obj_desc", ",", "strict", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "obj_desc", ".", "type", "!=", "'door'", "\n", "self", ".", "desc", "=", "obj_desc", "\n", "self", ".", "strict", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PickupInstr.surface": [[318, 320], ["verifier.PickupInstr.desc.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "'pick up '", "+", "self", ".", "desc", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PickupInstr.reset_verifier": [[321, 329], ["verifier.Instr.reset_verifier", "verifier.PickupInstr.desc.find_matching_objs"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "\n", "# Object previously being carried", "\n", "self", ".", "preCarrying", "=", "None", "\n", "\n", "# Identify set of possible matching objects in the environment", "\n", "self", ".", "desc", ".", "find_matching_objs", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PickupInstr.verify_action": [[330, 351], ["None"], "methods", ["None"], ["", "def", "verify_action", "(", "self", ",", "action", ")", ":", "\n", "# To keep track of what was carried at the last time step", "\n", "        ", "preCarrying", "=", "self", ".", "preCarrying", "\n", "self", ".", "preCarrying", "=", "self", ".", "env", ".", "carrying", "\n", "\n", "# Only verify when the pickup action is performed", "\n", "if", "action", "!=", "self", ".", "env", ".", "actions", ".", "pickup", ":", "\n", "            ", "return", "'continue'", "\n", "\n", "", "for", "obj", "in", "self", ".", "desc", ".", "obj_set", ":", "\n", "            ", "if", "preCarrying", "is", "None", "and", "self", ".", "env", ".", "carrying", "is", "obj", ":", "\n", "                ", "return", "'success'", "\n", "\n", "# If in strict mode and the wrong door object is picked up, failure", "\n", "", "", "if", "self", ".", "strict", ":", "\n", "            ", "if", "self", ".", "env", ".", "carrying", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "", "self", ".", "preCarrying", "=", "self", ".", "env", ".", "carrying", "\n", "\n", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.__init__": [[359, 365], ["verifier.ActionInstr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "obj_move", ",", "obj_fixed", ",", "strict", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "obj_move", ".", "type", "!=", "'door'", "\n", "self", ".", "desc_move", "=", "obj_move", "\n", "self", ".", "desc_fixed", "=", "obj_fixed", "\n", "self", ".", "strict", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.surface": [[366, 368], ["verifier.PutNextInstr.desc_fixed.surface", "verifier.PutNextInstr.desc_move.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "'put '", "+", "self", ".", "desc_move", ".", "surface", "(", "env", ")", "+", "' next to '", "+", "self", ".", "desc_fixed", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.reset_verifier": [[369, 378], ["verifier.Instr.reset_verifier", "verifier.PutNextInstr.desc_move.find_matching_objs", "verifier.PutNextInstr.desc_fixed.find_matching_objs"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "\n", "# Object previously being carried", "\n", "self", ".", "preCarrying", "=", "None", "\n", "\n", "# Identify set of possible matching objects in the environment", "\n", "self", ".", "desc_move", ".", "find_matching_objs", "(", "env", ")", "\n", "self", ".", "desc_fixed", ".", "find_matching_objs", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.objs_next": [[379, 392], ["verifier.pos_next_to"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.pos_next_to"], ["", "def", "objs_next", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Check if the objects are next to each other\n        This is used for rejection sampling\n        \"\"\"", "\n", "\n", "for", "obj_a", "in", "self", ".", "desc_move", ".", "obj_set", ":", "\n", "            ", "pos_a", "=", "obj_a", ".", "cur_pos", "\n", "\n", "for", "pos_b", "in", "self", ".", "desc_fixed", ".", "obj_poss", ":", "\n", "                ", "if", "pos_next_to", "(", "pos_a", ",", "pos_b", ")", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.verify_action": [[393, 418], ["verifier.pos_next_to"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.pos_next_to"], ["", "def", "verify_action", "(", "self", ",", "action", ")", ":", "\n", "# To keep track of what was carried at the last time step", "\n", "        ", "preCarrying", "=", "self", ".", "preCarrying", "\n", "self", ".", "preCarrying", "=", "self", ".", "env", ".", "carrying", "\n", "\n", "# In strict mode, picking up the wrong object fails", "\n", "if", "self", ".", "strict", ":", "\n", "            ", "if", "action", "==", "self", ".", "env", ".", "actions", ".", "pickup", "and", "self", ".", "env", ".", "carrying", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "# Only verify when the drop action is performed", "\n", "", "", "if", "action", "!=", "self", ".", "env", ".", "actions", ".", "drop", ":", "\n", "            ", "return", "'continue'", "\n", "\n", "", "for", "obj_a", "in", "self", ".", "desc_move", ".", "obj_set", ":", "\n", "            ", "if", "preCarrying", "is", "not", "obj_a", ":", "\n", "                ", "continue", "\n", "\n", "", "pos_a", "=", "obj_a", ".", "cur_pos", "\n", "\n", "for", "pos_b", "in", "self", ".", "desc_fixed", ".", "obj_poss", ":", "\n", "                ", "if", "pos_next_to", "(", "pos_a", ",", "pos_b", ")", ":", "\n", "                    ", "return", "'success'", "\n", "\n", "", "", "", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.SeqInstr.__init__": [[425, 431], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "instr_a", ",", "instr_b", ",", "strict", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "instr_a", ",", "ActionInstr", ")", "or", "isinstance", "(", "instr_a", ",", "AndInstr", ")", "\n", "assert", "isinstance", "(", "instr_b", ",", "ActionInstr", ")", "or", "isinstance", "(", "instr_b", ",", "AndInstr", ")", "\n", "self", ".", "instr_a", "=", "instr_a", "\n", "self", ".", "instr_b", "=", "instr_b", "\n", "self", ".", "strict", "=", "strict", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.BeforeInstr.surface": [[439, 441], ["verifier.BeforeInstr.instr_b.surface", "verifier.BeforeInstr.instr_a.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "self", ".", "instr_a", ".", "surface", "(", "env", ")", "+", "', then '", "+", "self", ".", "instr_b", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.BeforeInstr.reset_verifier": [[442, 448], ["verifier.Instr.reset_verifier", "verifier.BeforeInstr.instr_a.reset_verifier", "verifier.BeforeInstr.instr_b.reset_verifier"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_a", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_b", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "a_done", "=", "False", "\n", "self", ".", "b_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.BeforeInstr.verify": [[449, 472], ["verifier.BeforeInstr.instr_b.verify", "verifier.BeforeInstr.instr_a.verify", "verifier.BeforeInstr.verify", "verifier.BeforeInstr.instr_b.verify"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify"], ["", "def", "verify", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "a_done", "==", "'success'", ":", "\n", "            ", "self", ".", "b_done", "=", "self", ".", "instr_b", ".", "verify", "(", "action", ")", "\n", "\n", "if", "self", ".", "b_done", "==", "'failure'", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "if", "self", ".", "b_done", "==", "'success'", ":", "\n", "                ", "return", "'success'", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "a_done", "=", "self", ".", "instr_a", ".", "verify", "(", "action", ")", "\n", "if", "self", ".", "a_done", "==", "'failure'", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "if", "self", ".", "a_done", "==", "'success'", ":", "\n", "                ", "return", "self", ".", "verify", "(", "action", ")", "\n", "\n", "# In strict mode, completing b first means failure", "\n", "", "if", "self", ".", "strict", ":", "\n", "                ", "if", "self", ".", "instr_b", ".", "verify", "(", "action", ")", "==", "'success'", ":", "\n", "                    ", "return", "'failure'", "\n", "\n", "", "", "", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AfterInstr.surface": [[480, 482], ["verifier.AfterInstr.instr_b.surface", "verifier.AfterInstr.instr_a.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "self", ".", "instr_a", ".", "surface", "(", "env", ")", "+", "' after you '", "+", "self", ".", "instr_b", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AfterInstr.reset_verifier": [[483, 489], ["verifier.Instr.reset_verifier", "verifier.AfterInstr.instr_a.reset_verifier", "verifier.AfterInstr.instr_b.reset_verifier"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_a", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_b", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "a_done", "=", "False", "\n", "self", ".", "b_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AfterInstr.verify": [[490, 513], ["verifier.AfterInstr.instr_a.verify", "verifier.AfterInstr.instr_b.verify", "verifier.AfterInstr.verify", "verifier.AfterInstr.instr_a.verify"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify"], ["", "def", "verify", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "b_done", "==", "'success'", ":", "\n", "            ", "self", ".", "a_done", "=", "self", ".", "instr_a", ".", "verify", "(", "action", ")", "\n", "\n", "if", "self", ".", "a_done", "==", "'success'", ":", "\n", "                ", "return", "'success'", "\n", "\n", "", "if", "self", ".", "a_done", "==", "'failure'", ":", "\n", "                ", "return", "'failure'", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "b_done", "=", "self", ".", "instr_b", ".", "verify", "(", "action", ")", "\n", "if", "self", ".", "b_done", "==", "'failure'", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "if", "self", ".", "b_done", "==", "'success'", ":", "\n", "                ", "return", "self", ".", "verify", "(", "action", ")", "\n", "\n", "# In strict mode, completing a first means failure", "\n", "", "if", "self", ".", "strict", ":", "\n", "                ", "if", "self", ".", "instr_a", ".", "verify", "(", "action", ")", "==", "'success'", ":", "\n", "                    ", "return", "'failure'", "\n", "\n", "", "", "", "return", "'continue'", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.__init__": [[521, 525], ["isinstance", "isinstance", "verifier.SeqInstr.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "instr_a", ",", "instr_b", ",", "strict", "=", "False", ")", ":", "\n", "        ", "assert", "isinstance", "(", "instr_a", ",", "ActionInstr", ")", "\n", "assert", "isinstance", "(", "instr_b", ",", "ActionInstr", ")", "\n", "super", "(", ")", ".", "__init__", "(", "instr_a", ",", "instr_b", ",", "strict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface": [[526, 528], ["verifier.AndInstr.instr_b.surface", "verifier.AndInstr.instr_a.surface"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface"], ["", "def", "surface", "(", "self", ",", "env", ")", ":", "\n", "        ", "return", "self", ".", "instr_a", ".", "surface", "(", "env", ")", "+", "' and '", "+", "self", ".", "instr_b", ".", "surface", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier": [[529, 535], ["verifier.Instr.reset_verifier", "verifier.AndInstr.instr_a.reset_verifier", "verifier.AndInstr.instr_b.reset_verifier"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier"], ["", "def", "reset_verifier", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_a", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "instr_b", ".", "reset_verifier", "(", "env", ")", "\n", "self", ".", "a_done", "=", "False", "\n", "self", ".", "b_done", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify": [[536, 551], ["verifier.AndInstr.instr_a.verify", "verifier.AndInstr.instr_b.verify"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify"], ["", "def", "verify", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "a_done", "!=", "'success'", ":", "\n", "            ", "self", ".", "a_done", "=", "self", ".", "instr_a", ".", "verify", "(", "action", ")", "\n", "\n", "", "if", "self", ".", "b_done", "!=", "'success'", ":", "\n", "            ", "self", ".", "b_done", "=", "self", ".", "instr_b", ".", "verify", "(", "action", ")", "\n", "\n", "", "if", "use_done_actions", "and", "action", "is", "self", ".", "env", ".", "actions", ".", "done", ":", "\n", "            ", "if", "self", ".", "a_done", "==", "'failure'", "and", "self", ".", "b_done", "==", "'failure'", ":", "\n", "                ", "return", "'failure'", "\n", "\n", "", "", "if", "self", ".", "a_done", "==", "'success'", "and", "self", ".", "b_done", "==", "'success'", ":", "\n", "            ", "return", "'success'", "\n", "\n", "", "return", "'continue'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.dot_product": [[20, 26], ["sum", "zip"], "function", ["None"], ["def", "dot_product", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "\"\"\"\n    Compute the dot product of the vectors v1 and v2.\n    \"\"\"", "\n", "\n", "return", "sum", "(", "[", "i", "*", "j", "for", "i", ",", "j", "in", "zip", "(", "v1", ",", "v2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.pos_next_to": [[28, 39], ["abs", "abs"], "function", ["None"], ["", "def", "pos_next_to", "(", "pos_a", ",", "pos_b", ")", ":", "\n", "    ", "\"\"\"\n    Test if two positions are next to each other.\n    The positions have to line up either horizontally or vertically,\n    but positions that are diagonally adjacent are not counted.\n    \"\"\"", "\n", "\n", "xa", ",", "ya", "=", "pos_a", "\n", "xb", ",", "yb", "=", "pos_b", "\n", "d", "=", "abs", "(", "xa", "-", "xb", ")", "+", "abs", "(", "ya", "-", "yb", ")", "\n", "return", "d", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToRedBlueBall.__init__": [[15, 22], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "num_dists", "=", "7", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "room_size", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToRedBlueBall.gen_mission": [[24, 41], ["bonus_levels.Level_GoToRedBlueBall.place_agent", "bonus_levels.Level_GoToRedBlueBall.add_distractors", "bonus_levels.Level_GoToRedBlueBall._rand_elem", "bonus_levels.Level_GoToRedBlueBall.add_object", "bonus_levels.Level_GoToRedBlueBall.check_objs_reachable", "verifier.GoToInstr", "verifier.ObjDesc", "levelgen.RejectSampling"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", ")", "\n", "\n", "dists", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "\n", "# Ensure there is only one red or blue ball", "\n", "for", "dist", "in", "dists", ":", "\n", "            ", "if", "dist", ".", "type", "==", "'ball'", "and", "(", "dist", ".", "color", "==", "'blue'", "or", "dist", ".", "color", "==", "'red'", ")", ":", "\n", "                ", "raise", "RejectSampling", "(", "'can only have one blue or red ball'", ")", "\n", "\n", "", "", "color", "=", "self", ".", "_rand_elem", "(", "[", "'red'", ",", "'blue'", "]", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "0", ",", "0", ",", "'ball'", ",", "color", ")", "\n", "\n", "# Make sure no unblocking is required", "\n", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenRedDoor.__init__": [[51, 57], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "5", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenRedDoor.gen_mission": [[59, 63], ["bonus_levels.Level_OpenRedDoor.add_door", "bonus_levels.Level_OpenRedDoor.place_agent", "verifier.OpenInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "obj", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "'red'", ",", "locked", "=", "False", ")", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "ObjDesc", "(", "'door'", ",", "'red'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoor.__init__": [[72, 81], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "debug", "=", "False", ",", "\n", "select_by", "=", "None", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "select_by", "=", "select_by", "\n", "self", ".", "debug", "=", "debug", "\n", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoor.gen_mission": [[82, 100], ["bonus_levels.Level_OpenDoor._rand_subset", "enumerate", "bonus_levels.Level_OpenDoor.place_agent", "verifier.OpenInstr", "bonus_levels.Level_OpenDoor.add_door", "objs.append", "bonus_levels.Level_OpenDoor._rand_elem", "verifier.ObjDesc", "verifier.ObjDesc", "bonus_levels.Level_OpenDoor._rand_elem"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "door_colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "4", ")", "\n", "objs", "=", "[", "]", "\n", "\n", "for", "i", ",", "color", "in", "enumerate", "(", "door_colors", ")", ":", "\n", "            ", "obj", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "door_idx", "=", "i", ",", "color", "=", "color", ",", "locked", "=", "False", ")", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "", "select_by", "=", "self", ".", "select_by", "\n", "if", "select_by", "is", "None", ":", "\n", "            ", "select_by", "=", "self", ".", "_rand_elem", "(", "[", "\"color\"", ",", "\"loc\"", "]", ")", "\n", "", "if", "select_by", "==", "\"color\"", ":", "\n", "            ", "object", "=", "ObjDesc", "(", "objs", "[", "0", "]", ".", "type", ",", "color", "=", "objs", "[", "0", "]", ".", "color", ")", "\n", "", "elif", "select_by", "==", "\"loc\"", ":", "\n", "            ", "object", "=", "ObjDesc", "(", "objs", "[", "0", "]", ".", "type", ",", "loc", "=", "self", ".", "_rand_elem", "(", "LOC_NAMES", ")", ")", "\n", "\n", "", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "object", ",", "strict", "=", "self", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorDebug.__init__": [[107, 113], ["bonus_levels.Level_OpenDoor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "select_by", "=", "None", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "select_by", "=", "select_by", ",", "debug", "=", "True", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorColor.__init__": [[122, 126], ["bonus_levels.Level_OpenDoor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "select_by", "=", "\"color\"", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorLoc.__init__": [[143, 147], ["bonus_levels.Level_OpenDoor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "select_by", "=", "\"loc\"", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToDoor.__init__": [[157, 161], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "7", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToDoor.gen_mission": [[163, 172], ["range", "bonus_levels.Level_GoToDoor.place_agent", "bonus_levels.Level_GoToDoor._rand_elem", "verifier.GoToInstr", "bonus_levels.Level_GoToDoor.add_door", "objs.append", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "objs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ")", "\n", "objs", ".", "append", "(", "door", ")", "\n", "", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "'door'", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToObjDoor.__init__": [[180, 184], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "8", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_GoToObjDoor.gen_mission": [[186, 198], ["bonus_levels.Level_GoToObjDoor.place_agent", "bonus_levels.Level_GoToObjDoor.add_distractors", "range", "bonus_levels.Level_GoToObjDoor.check_objs_reachable", "bonus_levels.Level_GoToObjDoor._rand_elem", "verifier.GoToInstr", "bonus_levels.Level_GoToObjDoor.add_door", "bonus_levels.Level_GoToObjDoor.append", "verifier.ObjDesc"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "objs", "=", "self", ".", "add_distractors", "(", "1", ",", "1", ",", "num_distractors", "=", "8", ",", "all_unique", "=", "False", ")", "\n", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ")", "\n", "objs", ".", "append", "(", "door", ")", "\n", "\n", "", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "self", ".", "instrs", "=", "GoToInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_ActionObjDoor.__init__": [[208, 212], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "7", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_ActionObjDoor.gen_mission": [[214, 235], ["bonus_levels.Level_ActionObjDoor.add_distractors", "range", "bonus_levels.Level_ActionObjDoor.place_agent", "bonus_levels.Level_ActionObjDoor._rand_elem", "verifier.ObjDesc", "bonus_levels.Level_ActionObjDoor.add_door", "bonus_levels.Level_ActionObjDoor.append", "bonus_levels.Level_ActionObjDoor._rand_bool", "bonus_levels.Level_ActionObjDoor._rand_bool", "verifier.GoToInstr", "verifier.OpenInstr", "verifier.GoToInstr", "verifier.PickupInstr"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "objs", "=", "self", ".", "add_distractors", "(", "1", ",", "1", ",", "num_distractors", "=", "5", ")", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "locked", "=", "False", ")", "\n", "objs", ".", "append", "(", "door", ")", "\n", "\n", "", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "desc", "=", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", "\n", "\n", "if", "obj", ".", "type", "==", "'door'", ":", "\n", "            ", "if", "self", ".", "_rand_bool", "(", ")", ":", "\n", "                ", "self", ".", "instrs", "=", "GoToInstr", "(", "desc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "instrs", "=", "OpenInstr", "(", "desc", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_rand_bool", "(", ")", ":", "\n", "                ", "self", ".", "instrs", "=", "GoToInstr", "(", "desc", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "instrs", "=", "PickupInstr", "(", "desc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockLocal.__init__": [[243, 246], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "distractors", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "distractors", "=", "distractors", "\n", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockLocal.gen_mission": [[247, 255], ["bonus_levels.Level_UnlockLocal.add_door", "bonus_levels.Level_UnlockLocal.add_object", "bonus_levels.Level_UnlockLocal.place_agent", "verifier.OpenInstr", "bonus_levels.Level_UnlockLocal.add_distractors", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "locked", "=", "True", ")", "\n", "self", ".", "add_object", "(", "1", ",", "1", ",", "'key'", ",", "door", ".", "color", ")", "\n", "if", "self", ".", "distractors", ":", "\n", "            ", "self", ".", "add_distractors", "(", "1", ",", "1", ",", "num_distractors", "=", "3", ")", "\n", "", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "ObjDesc", "(", "door", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockLocalDist.__init__": [[263, 265], ["bonus_levels.Level_UnlockLocal.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "distractors", "=", "True", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyInBox.__init__": [[272, 275], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyInBox.gen_mission": [[277, 288], ["bonus_levels.Level_KeyInBox.add_door", "gym_minigrid.envs.Key", "gym_minigrid.envs.Box", "bonus_levels.Level_KeyInBox.place_in_room", "bonus_levels.Level_KeyInBox.place_agent", "verifier.OpenInstr", "bonus_levels.Level_KeyInBox._rand_color", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "locked", "=", "True", ")", "\n", "\n", "# Put the key in the box, then place the box in the room", "\n", "key", "=", "Key", "(", "door", ".", "color", ")", "\n", "box", "=", "Box", "(", "self", ".", "_rand_color", "(", ")", ",", "key", ")", "\n", "self", ".", "place_in_room", "(", "1", ",", "1", ",", "box", ")", "\n", "\n", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "instrs", "=", "OpenInstr", "(", "ObjDesc", "(", "door", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockPickup.__init__": [[295, 305], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "distractors", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "distractors", "=", "distractors", "\n", "\n", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockPickup.gen_mission": [[307, 320], ["bonus_levels.Level_UnlockPickup.add_object", "bonus_levels.Level_UnlockPickup.add_door", "bonus_levels.Level_UnlockPickup.add_object", "bonus_levels.Level_UnlockPickup.place_agent", "verifier.PickupInstr", "bonus_levels.Level_UnlockPickup.add_distractors", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a random object to the room on the right", "\n", "        ", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "if", "self", ".", "distractors", ":", "\n", "            ", "self", ".", "add_distractors", "(", "num_distractors", "=", "4", ")", "\n", "\n", "", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockPickupDist.__init__": [[328, 330], ["bonus_levels.Level_UnlockPickup.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "distractors", "=", "True", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_BlockedUnlockPickup.__init__": [[338, 346], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "16", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_BlockedUnlockPickup.gen_mission": [[348, 362], ["bonus_levels.Level_BlockedUnlockPickup.add_object", "bonus_levels.Level_BlockedUnlockPickup.add_door", "bonus_levels.Level_BlockedUnlockPickup._rand_color", "bonus_levels.Level_BlockedUnlockPickup.grid.set", "bonus_levels.Level_BlockedUnlockPickup.add_object", "bonus_levels.Level_BlockedUnlockPickup.place_agent", "verifier.PickupInstr", "gym_minigrid.envs.Ball", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a box to the room on the right", "\n", "        ", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Block the door with a ball", "\n", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "self", ".", "grid", ".", "set", "(", "pos", "[", "0", "]", "-", "1", ",", "pos", "[", "1", "]", ",", "Ball", "(", "color", ")", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockToUnlock.__init__": [[369, 377], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "3", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "30", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_UnlockToUnlock.gen_mission": [[379, 399], ["bonus_levels.Level_UnlockToUnlock._rand_subset", "bonus_levels.Level_UnlockToUnlock.add_door", "bonus_levels.Level_UnlockToUnlock.add_object", "bonus_levels.Level_UnlockToUnlock.add_door", "bonus_levels.Level_UnlockToUnlock.add_object", "bonus_levels.Level_UnlockToUnlock.add_object", "bonus_levels.Level_UnlockToUnlock.place_agent", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "2", ")", "\n", "\n", "# Add a door of color A connecting left and middle room", "\n", "self", ".", "add_door", "(", "0", ",", "0", ",", "door_idx", "=", "0", ",", "color", "=", "colors", "[", "0", "]", ",", "locked", "=", "True", ")", "\n", "\n", "# Add a key of color A in the room on the right", "\n", "self", ".", "add_object", "(", "2", ",", "0", ",", "kind", "=", "\"key\"", ",", "color", "=", "colors", "[", "0", "]", ")", "\n", "\n", "# Add a door of color B connecting middle and right room", "\n", "self", ".", "add_door", "(", "1", ",", "0", ",", "door_idx", "=", "0", ",", "color", "=", "colors", "[", "1", "]", ",", "locked", "=", "True", ")", "\n", "\n", "# Add a key of color B in the middle room", "\n", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"key\"", ",", "color", "=", "colors", "[", "1", "]", ")", "\n", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "0", ",", "0", ",", "kind", "=", "\"ball\"", ")", "\n", "\n", "self", ".", "place_agent", "(", "1", ",", "0", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PickupDist.__init__": [[409, 416], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "debug", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "debug", "=", "debug", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "room_size", "=", "7", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PickupDist.gen_mission": [[418, 433], ["bonus_levels.Level_PickupDist.add_distractors", "bonus_levels.Level_PickupDist.place_agent", "bonus_levels.Level_PickupDist._rand_elem", "bonus_levels.Level_PickupDist._rand_elem", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Add 5 random objects in the room", "\n", "        ", "objs", "=", "self", ".", "add_distractors", "(", "num_distractors", "=", "5", ")", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "obj", "=", "self", ".", "_rand_elem", "(", "objs", ")", "\n", "type", "=", "obj", ".", "type", "\n", "color", "=", "obj", ".", "color", "\n", "\n", "select_by", "=", "self", ".", "_rand_elem", "(", "[", "\"type\"", ",", "\"color\"", ",", "\"both\"", "]", ")", "\n", "if", "select_by", "==", "\"color\"", ":", "\n", "            ", "type", "=", "None", "\n", "", "elif", "select_by", "==", "\"type\"", ":", "\n", "            ", "color", "=", "None", "\n", "\n", "", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "type", ",", "color", ")", ",", "strict", "=", "self", ".", "debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PickupDistDebug.__init__": [[440, 444], ["bonus_levels.Level_PickupDist.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "debug", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PickupAbove.__init__": [[453, 459], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PickupAbove.gen_mission": [[461, 470], ["bonus_levels.Level_PickupAbove.add_object", "bonus_levels.Level_PickupAbove.add_door", "bonus_levels.Level_PickupAbove.place_agent", "bonus_levels.Level_PickupAbove.connect_all", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a random object to the top-middle room", "\n", "        ", "obj", ",", "pos", "=", "self", ".", "add_object", "(", "1", ",", "0", ")", "\n", "# Make sure the two rooms are directly connected", "\n", "self", ".", "add_door", "(", "1", ",", "1", ",", "3", ",", "locked", "=", "False", ")", "\n", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenTwoDoors.__init__": [[480, 495], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "\n", "first_color", "=", "None", ",", "\n", "second_color", "=", "None", ",", "\n", "strict", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "first_color", "=", "first_color", "\n", "self", ".", "second_color", "=", "second_color", "\n", "self", ".", "strict", "=", "strict", "\n", "\n", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "20", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenTwoDoors.gen_mission": [[497, 515], ["bonus_levels.Level_OpenTwoDoors._rand_subset", "bonus_levels.Level_OpenTwoDoors.add_door", "bonus_levels.Level_OpenTwoDoors.add_door", "bonus_levels.Level_OpenTwoDoors.place_agent", "verifier.BeforeInstr", "verifier.OpenInstr", "verifier.OpenInstr", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "2", ")", "\n", "\n", "first_color", "=", "self", ".", "first_color", "\n", "if", "first_color", "is", "None", ":", "\n", "            ", "first_color", "=", "colors", "[", "0", "]", "\n", "", "second_color", "=", "self", ".", "second_color", "\n", "if", "second_color", "is", "None", ":", "\n", "            ", "second_color", "=", "colors", "[", "1", "]", "\n", "\n", "", "door1", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "2", ",", "color", "=", "first_color", ",", "locked", "=", "False", ")", "\n", "door2", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "0", ",", "color", "=", "second_color", ",", "locked", "=", "False", ")", "\n", "\n", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "self", ".", "instrs", "=", "BeforeInstr", "(", "\n", "OpenInstr", "(", "ObjDesc", "(", "door1", ".", "type", ",", "door1", ".", "color", ")", ",", "strict", "=", "self", ".", "strict", ")", ",", "\n", "OpenInstr", "(", "ObjDesc", "(", "door2", ".", "type", ",", "door2", ".", "color", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenTwoDoorsDebug.__init__": [[523, 533], ["bonus_levels.Level_OpenTwoDoors.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "\n", "first_color", "=", "None", ",", "\n", "second_color", "=", "None", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "first_color", ",", "\n", "second_color", ",", "\n", "strict", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenRedBlueDoors.__init__": [[544, 549], ["bonus_levels.Level_OpenTwoDoors.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "first_color", "=", "\"red\"", ",", "\n", "second_color", "=", "\"blue\"", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenRedBlueDoorsDebug.__init__": [[557, 562], ["bonus_levels.Level_OpenTwoDoorsDebug.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "first_color", "=", "\"red\"", ",", "\n", "second_color", "=", "\"blue\"", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_FindObjS5.__init__": [[572, 577], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "5", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "20", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_FindObjS5.gen_mission": [[579, 588], ["bonus_levels.Level_FindObjS5._rand_int", "bonus_levels.Level_FindObjS5._rand_int", "bonus_levels.Level_FindObjS5.add_object", "bonus_levels.Level_FindObjS5.place_agent", "bonus_levels.Level_FindObjS5.connect_all", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Add a random object to a random room", "\n", "        ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "i", ",", "j", ")", "\n", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_FindObjS6.__init__": [[595, 599], ["bonus_levels.Level_FindObjS5.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_FindObjS7.__init__": [[607, 611], ["bonus_levels.Level_FindObjS5.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "7", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.KeyCorridor.__init__": [[620, 634], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_rows", "=", "3", ",", "\n", "obj_type", "=", "\"ball\"", ",", "\n", "room_size", "=", "6", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "obj_type", "=", "obj_type", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "max_steps", "=", "30", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.KeyCorridor.gen_mission": [[636, 657], ["range", "bonus_levels.KeyCorridor._rand_int", "bonus_levels.KeyCorridor.add_door", "bonus_levels.KeyCorridor.add_object", "bonus_levels.KeyCorridor.add_object", "bonus_levels.KeyCorridor.place_agent", "bonus_levels.KeyCorridor.connect_all", "verifier.PickupInstr", "bonus_levels.KeyCorridor.remove_wall", "bonus_levels.KeyCorridor._rand_int", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "# Connect the middle column rooms into a hallway", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "self", ".", "remove_wall", "(", "1", ",", "j", ",", "3", ")", "\n", "\n", "# Add a locked door on the bottom right", "\n", "# Add an object behind the locked door", "\n", "", "room_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "2", ",", "room_idx", ",", "2", ",", "locked", "=", "True", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "2", ",", "room_idx", ",", "kind", "=", "self", ".", "obj_type", ")", "\n", "\n", "# Add a key in a random room on the left side", "\n", "self", ".", "add_object", "(", "0", ",", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "# Place the agent in the middle", "\n", "self", ".", "place_agent", "(", "1", ",", "self", ".", "num_rows", "//", "2", ")", "\n", "\n", "# Make sure all rooms are accessible", "\n", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS3R1.__init__": [[660, 665], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS3R2.__init__": [[668, 673], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS3R3.__init__": [[676, 681], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS4R3.__init__": [[684, 689], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "4", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS5R3.__init__": [[692, 697], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_KeyCorridorS6R3.__init__": [[700, 705], ["bonus_levels.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_1RoomS8.__init__": [[713, 719], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "room_size", "=", "8", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_1RoomS8.gen_mission": [[721, 725], ["bonus_levels.Level_1RoomS8.add_object", "bonus_levels.Level_1RoomS8.place_agent", "verifier.PickupInstr", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "obj", ",", "_", "=", "self", ".", "add_object", "(", "0", ",", "0", ",", "kind", "=", "\"ball\"", ")", "\n", "self", ".", "place_agent", "(", ")", "\n", "self", ".", "instrs", "=", "PickupInstr", "(", "ObjDesc", "(", "obj", ".", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_1RoomS12.__init__": [[733, 737], ["bonus_levels.Level_1RoomS8.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "12", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_1RoomS16.__init__": [[746, 750], ["bonus_levels.Level_1RoomS8.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "16", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_1RoomS20.__init__": [[759, 763], ["bonus_levels.Level_1RoomS8.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "20", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.PutNext.__init__": [[773, 791], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", ",", "\n", "objs_per_room", ",", "\n", "start_carrying", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "assert", "room_size", ">=", "4", "\n", "assert", "objs_per_room", "<=", "9", "\n", "self", ".", "objs_per_room", "=", "objs_per_room", "\n", "self", ".", "start_carrying", "=", "start_carrying", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.PutNext.gen_mission": [[793, 819], ["bonus_levels.PutNext.place_agent", "bonus_levels.PutNext.add_distractors", "bonus_levels.PutNext.add_distractors", "bonus_levels.PutNext.remove_wall", "bonus_levels.PutNext._rand_elem", "bonus_levels.PutNext._rand_elem", "bonus_levels.PutNext._rand_bool", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "# Add objects to both the left and right rooms", "\n", "# so that we know that we have two non-adjacent set of objects", "\n", "objs_l", "=", "self", ".", "add_distractors", "(", "0", ",", "0", ",", "self", ".", "objs_per_room", ")", "\n", "objs_r", "=", "self", ".", "add_distractors", "(", "1", ",", "0", ",", "self", ".", "objs_per_room", ")", "\n", "\n", "# Remove the wall between the two rooms", "\n", "self", ".", "remove_wall", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "# Select objects from both subsets", "\n", "a", "=", "self", ".", "_rand_elem", "(", "objs_l", ")", "\n", "b", "=", "self", ".", "_rand_elem", "(", "objs_r", ")", "\n", "\n", "# Randomly flip the object to be moved", "\n", "if", "self", ".", "_rand_bool", "(", ")", ":", "\n", "            ", "t", "=", "a", "\n", "a", "=", "b", "\n", "b", "=", "t", "\n", "\n", "", "self", ".", "obj_a", "=", "a", "\n", "\n", "self", ".", "instrs", "=", "PutNextInstr", "(", "\n", "ObjDesc", "(", "a", ".", "type", ",", "a", ".", "color", ")", ",", "\n", "ObjDesc", "(", "b", ".", "type", ",", "b", ".", "color", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.PutNext.reset": [[821, 830], ["super().reset", "bonus_levels.PutNext.grid.set"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n", "# If the agent starts off carrying the object", "\n", "if", "self", ".", "start_carrying", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "obj_a", ".", "init_pos", ",", "None", ")", "\n", "self", ".", "carrying", "=", "self", ".", "obj_a", "\n", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS4N1.__init__": [[833, 838], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "4", ",", "\n", "objs_per_room", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS5N1.__init__": [[842, 847], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "objs_per_room", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS5N2.__init__": [[851, 856], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "objs_per_room", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS6N3.__init__": [[860, 865], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "objs_per_room", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS7N4.__init__": [[869, 874], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "7", ",", "\n", "objs_per_room", "=", "4", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS5N2Carrying.__init__": [[878, 884], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "objs_per_room", "=", "2", ",", "\n", "start_carrying", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS6N3Carrying.__init__": [[888, 894], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "objs_per_room", "=", "3", ",", "\n", "start_carrying", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_PutNextS7N4Carrying.__init__": [[898, 904], ["bonus_levels.PutNext.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "7", ",", "\n", "objs_per_room", "=", "4", ",", "\n", "start_carrying", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.MoveTwoAcross.__init__": [[914, 929], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", ",", "\n", "objs_per_room", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "assert", "objs_per_room", "<=", "9", "\n", "self", ".", "objs_per_room", "=", "objs_per_room", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "16", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.MoveTwoAcross.gen_mission": [[931, 953], ["bonus_levels.MoveTwoAcross.place_agent", "bonus_levels.MoveTwoAcross.add_distractors", "bonus_levels.MoveTwoAcross.add_distractors", "bonus_levels.MoveTwoAcross.remove_wall", "bonus_levels.MoveTwoAcross._rand_subset", "bonus_levels.MoveTwoAcross._rand_subset", "verifier.BeforeInstr", "verifier.PutNextInstr", "verifier.PutNextInstr", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc", "verifier.ObjDesc"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "# Add objects to both the left and right rooms", "\n", "# so that we know that we have two non-adjacent set of objects", "\n", "objs_l", "=", "self", ".", "add_distractors", "(", "0", ",", "0", ",", "self", ".", "objs_per_room", ")", "\n", "objs_r", "=", "self", ".", "add_distractors", "(", "1", ",", "0", ",", "self", ".", "objs_per_room", ")", "\n", "\n", "# Remove the wall between the two rooms", "\n", "self", ".", "remove_wall", "(", "0", ",", "0", ",", "0", ")", "\n", "\n", "# Select objects from both subsets", "\n", "objs_l", "=", "self", ".", "_rand_subset", "(", "objs_l", ",", "2", ")", "\n", "objs_r", "=", "self", ".", "_rand_subset", "(", "objs_r", ",", "2", ")", "\n", "a", "=", "objs_l", "[", "0", "]", "\n", "b", "=", "objs_r", "[", "0", "]", "\n", "c", "=", "objs_r", "[", "1", "]", "\n", "d", "=", "objs_l", "[", "1", "]", "\n", "\n", "self", ".", "instrs", "=", "BeforeInstr", "(", "\n", "PutNextInstr", "(", "ObjDesc", "(", "a", ".", "type", ",", "a", ".", "color", ")", ",", "ObjDesc", "(", "b", ".", "type", ",", "b", ".", "color", ")", ")", ",", "\n", "PutNextInstr", "(", "ObjDesc", "(", "c", ".", "type", ",", "c", ".", "color", ")", ",", "ObjDesc", "(", "d", ".", "type", ",", "d", ".", "color", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_MoveTwoAcrossS5N2.__init__": [[957, 962], ["bonus_levels.MoveTwoAcross.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "objs_per_room", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_MoveTwoAcrossS8N9.__init__": [[966, 971], ["bonus_levels.MoveTwoAcross.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "8", ",", "\n", "objs_per_room", "=", "9", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.OpenDoorsOrder.__init__": [[979, 994], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_doors", ",", "\n", "debug", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "assert", "num_doors", ">=", "2", "\n", "self", ".", "num_doors", "=", "num_doors", "\n", "self", ".", "debug", "=", "debug", "\n", "\n", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "20", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.OpenDoorsOrder.gen_mission": [[996, 1017], ["bonus_levels.OpenDoorsOrder._rand_subset", "range", "bonus_levels.OpenDoorsOrder.place_agent", "bonus_levels.OpenDoorsOrder._rand_subset", "verifier.ObjDesc", "verifier.ObjDesc", "bonus_levels.OpenDoorsOrder._rand_int", "bonus_levels.OpenDoorsOrder.add_door", "doors.append", "verifier.OpenInstr", "verifier.BeforeInstr", "verifier.OpenInstr", "verifier.OpenInstr", "verifier.AfterInstr", "verifier.OpenInstr", "verifier.OpenInstr"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "self", ".", "num_doors", ")", "\n", "doors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_doors", ")", ":", "\n", "            ", "door", ",", "_", "=", "self", ".", "add_door", "(", "1", ",", "1", ",", "color", "=", "colors", "[", "i", "]", ",", "locked", "=", "False", ")", "\n", "doors", ".", "append", "(", "door", ")", "\n", "", "self", ".", "place_agent", "(", "1", ",", "1", ")", "\n", "\n", "door1", ",", "door2", "=", "self", ".", "_rand_subset", "(", "doors", ",", "2", ")", "\n", "desc1", "=", "ObjDesc", "(", "door1", ".", "type", ",", "door1", ".", "color", ")", "\n", "desc2", "=", "ObjDesc", "(", "door2", ".", "type", ",", "door2", ".", "color", ")", "\n", "\n", "mode", "=", "self", ".", "_rand_int", "(", "0", ",", "3", ")", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "self", ".", "instrs", "=", "OpenInstr", "(", "desc1", ",", "strict", "=", "self", ".", "debug", ")", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "self", ".", "instrs", "=", "BeforeInstr", "(", "OpenInstr", "(", "desc1", ",", "strict", "=", "self", ".", "debug", ")", ",", "OpenInstr", "(", "desc2", ",", "strict", "=", "self", ".", "debug", ")", ")", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "self", ".", "instrs", "=", "AfterInstr", "(", "OpenInstr", "(", "desc1", ",", "strict", "=", "self", ".", "debug", ")", ",", "OpenInstr", "(", "desc2", ",", "strict", "=", "self", ".", "debug", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorsOrderN2.__init__": [[1019, 1023], ["bonus_levels.OpenDoorsOrder.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_doors", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorsOrderN4.__init__": [[1027, 1031], ["bonus_levels.OpenDoorsOrder.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_doors", "=", "4", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorsOrderN2Debug.__init__": [[1035, 1040], ["bonus_levels.OpenDoorsOrder.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_doors", "=", "2", ",", "\n", "debug", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.bonus_levels.Level_OpenDoorsOrderN4Debug.__init__": [[1044, 1049], ["bonus_levels.OpenDoorsOrder.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_doors", "=", "4", ",", "\n", "debug", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.__init__": [[25, 33], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "8", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.reset": [[35, 48], ["super().reset", "levelgen.RoomGridLevel.instrs.reset_verifier", "levelgen.RoomGridLevel.num_navs_needed"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.num_navs_needed"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n", "# Recreate the verifier", "\n", "self", ".", "instrs", ".", "reset_verifier", "(", "self", ")", "\n", "\n", "# Compute the time step limit based on the maze size and instructions", "\n", "nav_time_room", "=", "self", ".", "room_size", "**", "2", "\n", "nav_time_maze", "=", "nav_time_room", "*", "self", ".", "num_rows", "*", "self", ".", "num_cols", "\n", "num_navs", "=", "self", ".", "num_navs_needed", "(", "self", ".", "instrs", ")", "\n", "self", ".", "max_steps", "=", "num_navs", "*", "nav_time_maze", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.step": [[49, 67], ["super().step", "levelgen.RoomGridLevel.instrs.verify", "levelgen.RoomGridLevel.update_objs_poss", "levelgen.RoomGridLevel._reward"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.verify", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.update_objs_poss"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "# If we drop an object, we need to update its position in the environment", "\n", "if", "action", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "self", ".", "update_objs_poss", "(", ")", "\n", "\n", "# If we've successfully completed the mission", "\n", "", "status", "=", "self", ".", "instrs", ".", "verify", "(", "action", ")", "\n", "\n", "if", "status", "==", "'success'", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "elif", "status", "==", "'failure'", ":", "\n", "            ", "done", "=", "True", "\n", "reward", "=", "0", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.update_objs_poss": [[68, 76], ["isinstance", "isinstance", "isinstance", "levelgen.RoomGridLevel.update_objs_poss", "levelgen.RoomGridLevel.update_objs_poss", "instr.update_objs_poss"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.update_objs_poss", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.update_objs_poss", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.update_objs_poss"], ["", "def", "update_objs_poss", "(", "self", ",", "instr", "=", "None", ")", ":", "\n", "        ", "if", "instr", "is", "None", ":", "\n", "            ", "instr", "=", "self", ".", "instrs", "\n", "", "if", "isinstance", "(", "instr", ",", "BeforeInstr", ")", "or", "isinstance", "(", "instr", ",", "AndInstr", ")", "or", "isinstance", "(", "instr", ",", "AfterInstr", ")", ":", "\n", "            ", "self", ".", "update_objs_poss", "(", "instr", ".", "instr_a", ")", "\n", "self", ".", "update_objs_poss", "(", "instr", ".", "instr_b", ")", "\n", "", "else", ":", "\n", "            ", "instr", ".", "update_objs_poss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel._gen_grid": [[77, 103], ["levelgen.RoomGridLevel.instrs.surface", "super()._gen_grid", "levelgen.RoomGridLevel.gen_mission", "levelgen.RoomGridLevel.validate_instrs", "print"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.surface", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel._gen_grid", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.gen_mission", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.validate_instrs"], ["", "", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# We catch RecursionError to deal with rare cases where", "\n", "# rejection sampling gets stuck in an infinite loop", "\n", "        ", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the mission", "\n", "self", ".", "gen_mission", "(", ")", "\n", "\n", "# Validate the instructions", "\n", "self", ".", "validate_instrs", "(", "self", ".", "instrs", ")", "\n", "\n", "", "except", "RecursionError", "as", "error", ":", "\n", "                ", "print", "(", "'Timeout during mission generation:'", ",", "error", ")", "\n", "continue", "\n", "\n", "", "except", "RejectSampling", "as", "error", ":", "\n", "#print('Sampling rejected:', error)", "\n", "                ", "continue", "\n", "\n", "", "break", "\n", "\n", "# Generate the surface form for the instructions", "\n", "", "self", ".", "surface", "=", "self", ".", "instrs", ".", "surface", "(", "self", ")", "\n", "self", ".", "mission", "=", "self", ".", "surface", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.validate_instrs": [[104, 156], ["isinstance", "isinstance", "isinstance", "hasattr", "range", "instr.reset_verifier", "set().intersection", "instr.objs_next", "levelgen.RoomGridLevel.validate_instrs", "levelgen.RoomGridLevel.validate_instrs", "range", "set", "levelgen.RejectSampling", "levelgen.RejectSampling", "hasattr", "levelgen.RoomGridLevel.get_room", "set", "len", "len", "levelgen.RejectSampling", "hasattr", "getattr", "levelgen.RejectSampling", "colors_of_locked_doors.append"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.AndInstr.reset_verifier", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.PutNextInstr.objs_next", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.validate_instrs", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.validate_instrs"], ["", "def", "validate_instrs", "(", "self", ",", "instr", ")", ":", "\n", "        ", "\"\"\"\n        Perform some validation on the generated instructions\n        \"\"\"", "\n", "# Gather the colors of locked doors", "\n", "if", "hasattr", "(", "self", ",", "'unblocking'", ")", "and", "self", ".", "unblocking", ":", "\n", "            ", "colors_of_locked_doors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "                    ", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "for", "door", "in", "room", ".", "doors", ":", "\n", "                        ", "if", "door", "and", "door", ".", "is_locked", ":", "\n", "                            ", "colors_of_locked_doors", ".", "append", "(", "door", ".", "color", ")", "\n", "\n", "", "", "", "", "", "if", "isinstance", "(", "instr", ",", "PutNextInstr", ")", ":", "\n", "# Resolve the objects referenced by the instruction", "\n", "            ", "instr", ".", "reset_verifier", "(", "self", ")", "\n", "\n", "# Check that the objects are not already next to each other", "\n", "if", "set", "(", "instr", ".", "desc_move", ".", "obj_set", ")", ".", "intersection", "(", "\n", "set", "(", "instr", ".", "desc_fixed", ".", "obj_set", ")", ")", ":", "\n", "                ", "raise", "RejectSampling", "(", "\n", "\"there are objects that match both lhs and rhs of PutNext\"", ")", "\n", "", "if", "instr", ".", "objs_next", "(", ")", ":", "\n", "                ", "raise", "RejectSampling", "(", "'objs already next to each other'", ")", "\n", "\n", "# Check that we are not asking to move an object next to itself", "\n", "", "move", "=", "instr", ".", "desc_move", "\n", "fixed", "=", "instr", ".", "desc_fixed", "\n", "if", "len", "(", "move", ".", "obj_set", ")", "==", "1", "and", "len", "(", "fixed", ".", "obj_set", ")", "==", "1", ":", "\n", "                ", "if", "move", ".", "obj_set", "[", "0", "]", "is", "fixed", ".", "obj_set", "[", "0", "]", ":", "\n", "                    ", "raise", "RejectSampling", "(", "'cannot move an object next to itself'", ")", "\n", "\n", "", "", "", "if", "isinstance", "(", "instr", ",", "ActionInstr", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'unblocking'", ")", "or", "not", "self", ".", "unblocking", ":", "\n", "                ", "return", "\n", "# TODO: either relax this a bit or make the bot handle this super corner-y scenarios", "\n", "# Check that the instruction doesn't involve a key that matches the color of a locked door", "\n", "", "potential_objects", "=", "(", "'desc'", ",", "'desc_move'", ",", "'desc_fixed'", ")", "\n", "for", "attr", "in", "potential_objects", ":", "\n", "                ", "if", "hasattr", "(", "instr", ",", "attr", ")", ":", "\n", "                    ", "obj", "=", "getattr", "(", "instr", ",", "attr", ")", "\n", "if", "obj", ".", "type", "==", "'key'", "and", "obj", ".", "color", "in", "colors_of_locked_doors", ":", "\n", "                        ", "raise", "RejectSampling", "(", "'cannot do anything with/to a key that can be used to open a door'", ")", "\n", "", "", "", "return", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "SeqInstr", ")", ":", "\n", "            ", "self", ".", "validate_instrs", "(", "instr", ".", "instr_a", ")", "\n", "self", ".", "validate_instrs", "(", "instr", ".", "instr_b", ")", "\n", "return", "\n", "\n", "", "assert", "False", ",", "\"unhandled instruction type\"", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.gen_mission": [[157, 163], ["None"], "methods", ["None"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a mission (instructions and matching environment)\n        Derived level classes should implement this method\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.level_name": [[164, 167], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "level_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "level_name", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.gym_id": [[168, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "gym_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "gym_id", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.num_navs_needed": [[172, 188], ["isinstance", "isinstance", "isinstance", "levelgen.RoomGridLevel.num_navs_needed", "levelgen.RoomGridLevel.num_navs_needed"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.num_navs_needed", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.num_navs_needed"], ["", "def", "num_navs_needed", "(", "self", ",", "instr", ")", ":", "\n", "        ", "\"\"\"\n        Compute the maximum number of navigations needed to perform\n        a simple or complex instruction\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "instr", ",", "PutNextInstr", ")", ":", "\n", "            ", "return", "2", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "ActionInstr", ")", ":", "\n", "            ", "return", "1", "\n", "\n", "", "if", "isinstance", "(", "instr", ",", "SeqInstr", ")", ":", "\n", "            ", "na", "=", "self", ".", "num_navs_needed", "(", "instr", ".", "instr_a", ")", "\n", "nb", "=", "self", ".", "num_navs_needed", "(", "instr", ".", "instr_b", ")", "\n", "return", "na", "+", "nb", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.open_all_doors": [[189, 200], ["range", "range", "levelgen.RoomGridLevel.get_room"], "methods", ["None"], ["", "", "def", "open_all_doors", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Open all the doors in the maze\n        \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "                ", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "for", "door", "in", "room", ".", "doors", ":", "\n", "                    ", "if", "door", ":", "\n", "                        ", "door", ".", "is_open", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable": [[201, 254], ["set", "range", "len", "stack.pop", "set.add", "levelgen.RoomGridLevel.grid.get", "stack.append", "stack.append", "stack.append", "stack.append", "range", "levelgen.RoomGridLevel.grid.get", "levelgen.RejectSampling", "str"], "methods", ["None"], ["", "", "", "", "", "def", "check_objs_reachable", "(", "self", ",", "raise_exc", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Check that all objects are reachable from the agent's starting\n        position without requiring any other object to be moved\n        (without unblocking)\n        \"\"\"", "\n", "\n", "# Reachable positions", "\n", "reachable", "=", "set", "(", ")", "\n", "\n", "# Work list", "\n", "stack", "=", "[", "self", ".", "agent_pos", "]", "\n", "\n", "while", "len", "(", "stack", ")", ">", "0", ":", "\n", "            ", "i", ",", "j", "=", "stack", ".", "pop", "(", ")", "\n", "\n", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "grid", ".", "width", "or", "j", "<", "0", "or", "j", ">=", "self", ".", "grid", ".", "height", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "(", "i", ",", "j", ")", "in", "reachable", ":", "\n", "                ", "continue", "\n", "\n", "# This position is reachable", "\n", "", "reachable", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "\n", "cell", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "# If there is something other than a door in this cell, it", "\n", "# blocks reachability", "\n", "if", "cell", "and", "cell", ".", "type", "!=", "'door'", ":", "\n", "                ", "continue", "\n", "\n", "# Visit the horizontal and vertical neighbors", "\n", "", "stack", ".", "append", "(", "(", "i", "+", "1", ",", "j", ")", ")", "\n", "stack", ".", "append", "(", "(", "i", "-", "1", ",", "j", ")", ")", "\n", "stack", ".", "append", "(", "(", "i", ",", "j", "+", "1", ")", ")", "\n", "stack", ".", "append", "(", "(", "i", ",", "j", "-", "1", ")", ")", "\n", "\n", "# Check that all objects are reachable", "\n", "", "for", "i", "in", "range", "(", "self", ".", "grid", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "grid", ".", "height", ")", ":", "\n", "                ", "cell", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "if", "not", "cell", "or", "cell", ".", "type", "==", "'wall'", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "(", "i", ",", "j", ")", "not", "in", "reachable", ":", "\n", "                    ", "if", "not", "raise_exc", ":", "\n", "                        ", "return", "False", "\n", "", "raise", "RejectSampling", "(", "'unreachable object at '", "+", "str", "(", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "# All objects reachable", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__": [[262, 291], ["levelgen.RoomGridLevel.__init__"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "8", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_dists", "=", "18", ",", "\n", "locked_room_prob", "=", "0.5", ",", "\n", "locations", "=", "True", ",", "\n", "unblocking", "=", "True", ",", "\n", "implicit_unlock", "=", "True", ",", "\n", "action_kinds", "=", "[", "'goto'", ",", "'pickup'", ",", "'open'", ",", "'putnext'", "]", ",", "\n", "instr_kinds", "=", "[", "'action'", ",", "'and'", ",", "'seq'", "]", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "num_dists", "=", "num_dists", "\n", "self", ".", "locked_room_prob", "=", "locked_room_prob", "\n", "self", ".", "locations", "=", "locations", "\n", "self", ".", "unblocking", "=", "unblocking", "\n", "self", ".", "implicit_unlock", "=", "implicit_unlock", "\n", "self", ".", "action_kinds", "=", "action_kinds", "\n", "self", ".", "instr_kinds", "=", "instr_kinds", "\n", "\n", "self", ".", "locked_room", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.gen_mission": [[293, 319], ["levelgen.LevelGen.connect_all", "levelgen.LevelGen.add_distractors", "levelgen.LevelGen.rand_instr", "levelgen.LevelGen._rand_float", "levelgen.LevelGen.add_locked_room", "levelgen.LevelGen.place_agent", "levelgen.LevelGen.room_from_pos", "levelgen.LevelGen.check_objs_reachable"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.add_locked_room", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.RoomGridLevel.check_objs_reachable"], ["", "def", "gen_mission", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_rand_float", "(", "0", ",", "1", ")", "<", "self", ".", "locked_room_prob", ":", "\n", "            ", "self", ".", "add_locked_room", "(", ")", "\n", "\n", "", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "add_distractors", "(", "num_distractors", "=", "self", ".", "num_dists", ",", "all_unique", "=", "False", ")", "\n", "\n", "# The agent must be placed after all the object to respect constraints", "\n", "while", "True", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "# Ensure that we are not placing the agent in the locked room", "\n", "if", "start_room", "is", "self", ".", "locked_room", ":", "\n", "                ", "continue", "\n", "", "break", "\n", "\n", "# If no unblocking required, make sure all objects are", "\n", "# reachable without unblocking", "\n", "", "if", "not", "self", ".", "unblocking", ":", "\n", "            ", "self", ".", "check_objs_reachable", "(", ")", "\n", "\n", "# Generate random instructions", "\n", "", "self", ".", "instrs", "=", "self", ".", "rand_instr", "(", "\n", "action_kinds", "=", "self", ".", "action_kinds", ",", "\n", "instr_kinds", "=", "self", ".", "instr_kinds", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.add_locked_room": [[321, 353], ["levelgen.LevelGen._rand_int", "levelgen.LevelGen._rand_int", "levelgen.LevelGen._rand_int", "levelgen.LevelGen.get_room", "levelgen.LevelGen.add_door", "levelgen.LevelGen._rand_int", "levelgen.LevelGen._rand_int", "levelgen.LevelGen.get_room", "levelgen.LevelGen.add_object"], "methods", ["None"], ["", "def", "add_locked_room", "(", "self", ")", ":", "\n", "# Until we've successfully added a locked room", "\n", "        ", "while", "True", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "self", ".", "locked_room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "# Don't add a locked door in an external wall", "\n", "if", "self", ".", "locked_room", ".", "neighbors", "[", "door_idx", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "door", ",", "_", "=", "self", ".", "add_door", "(", "\n", "i", ",", "j", ",", "\n", "door_idx", ",", "\n", "locked", "=", "True", "\n", ")", "\n", "\n", "# Done adding locked room", "\n", "break", "\n", "\n", "# Until we find a room to put the key", "\n", "", "while", "True", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "key_room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "if", "key_room", "is", "self", ".", "locked_room", ":", "\n", "                ", "continue", "\n", "\n", "", "self", ".", "add_object", "(", "i", ",", "j", ",", "'key'", ",", "door", ".", "color", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj": [[354, 396], ["levelgen.LevelGen._rand_elem", "levelgen.LevelGen._rand_elem", "verifier.ObjDesc", "verifier.ObjDesc.find_matching_objs", "RecursionError", "levelgen.LevelGen._rand_bool", "levelgen.LevelGen._rand_elem", "len", "list", "filter", "len", "levelgen.LevelGen.locked_room.pos_inside"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.verifier.ObjDesc.find_matching_objs"], ["", "", "def", "rand_obj", "(", "self", ",", "types", "=", "OBJ_TYPES", ",", "colors", "=", "COLOR_NAMES", ",", "max_tries", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random object descriptor\n        \"\"\"", "\n", "\n", "num_tries", "=", "0", "\n", "\n", "# Keep trying until we find a matching object", "\n", "while", "True", ":", "\n", "            ", "if", "num_tries", ">", "max_tries", ":", "\n", "                ", "raise", "RecursionError", "(", "'failed to find suitable object'", ")", "\n", "", "num_tries", "+=", "1", "\n", "\n", "color", "=", "self", ".", "_rand_elem", "(", "[", "None", ",", "*", "colors", "]", ")", "\n", "type", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "\n", "loc", "=", "None", "\n", "if", "self", ".", "locations", "and", "self", ".", "_rand_bool", "(", ")", ":", "\n", "                ", "loc", "=", "self", ".", "_rand_elem", "(", "LOC_NAMES", ")", "\n", "\n", "", "desc", "=", "ObjDesc", "(", "type", ",", "color", ",", "loc", ")", "\n", "\n", "# Find all objects matching the descriptor", "\n", "objs", ",", "poss", "=", "desc", ".", "find_matching_objs", "(", "self", ")", "\n", "\n", "# The description must match at least one object", "\n", "if", "len", "(", "objs", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "# If no implicit unlocking is required", "\n", "", "if", "not", "self", ".", "implicit_unlock", "and", "self", ".", "locked_room", ":", "\n", "# Check that at least one object is not in the locked room", "\n", "                ", "pos_not_locked", "=", "list", "(", "filter", "(", "\n", "lambda", "p", ":", "not", "self", ".", "locked_room", ".", "pos_inside", "(", "*", "p", ")", ",", "\n", "poss", "\n", ")", ")", "\n", "\n", "if", "len", "(", "pos_not_locked", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "# Found a valid object description", "\n", "", "", "return", "desc", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr": [[397, 461], ["levelgen.LevelGen._rand_elem", "levelgen.LevelGen._rand_elem", "verifier.GoToInstr", "levelgen.LevelGen.rand_instr", "levelgen.LevelGen.rand_instr", "verifier.AndInstr", "levelgen.LevelGen.rand_obj", "verifier.PickupInstr", "levelgen.LevelGen.rand_instr", "levelgen.LevelGen.rand_instr", "levelgen.LevelGen._rand_elem", "levelgen.LevelGen.rand_obj", "verifier.OpenInstr", "verifier.BeforeInstr", "levelgen.LevelGen.rand_obj", "verifier.PutNextInstr", "verifier.AfterInstr", "levelgen.LevelGen.rand_obj", "levelgen.LevelGen.rand_obj"], "methods", ["home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_instr", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj", "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.LevelGen.rand_obj"], ["", "", "def", "rand_instr", "(", "\n", "self", ",", "\n", "action_kinds", ",", "\n", "instr_kinds", ",", "\n", "depth", "=", "0", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Generate random instructions\n        \"\"\"", "\n", "\n", "kind", "=", "self", ".", "_rand_elem", "(", "instr_kinds", ")", "\n", "\n", "if", "kind", "==", "'action'", ":", "\n", "            ", "action", "=", "self", ".", "_rand_elem", "(", "action_kinds", ")", "\n", "\n", "if", "action", "==", "'goto'", ":", "\n", "                ", "return", "GoToInstr", "(", "self", ".", "rand_obj", "(", ")", ")", "\n", "", "elif", "action", "==", "'pickup'", ":", "\n", "                ", "return", "PickupInstr", "(", "self", ".", "rand_obj", "(", "types", "=", "OBJ_TYPES_NOT_DOOR", ")", ")", "\n", "", "elif", "action", "==", "'open'", ":", "\n", "                ", "return", "OpenInstr", "(", "self", ".", "rand_obj", "(", "types", "=", "[", "'door'", "]", ")", ")", "\n", "", "elif", "action", "==", "'putnext'", ":", "\n", "                ", "return", "PutNextInstr", "(", "\n", "self", ".", "rand_obj", "(", "types", "=", "OBJ_TYPES_NOT_DOOR", ")", ",", "\n", "self", ".", "rand_obj", "(", ")", "\n", ")", "\n", "\n", "", "assert", "False", "\n", "\n", "", "elif", "kind", "==", "'and'", ":", "\n", "            ", "instr_a", "=", "self", ".", "rand_instr", "(", "\n", "action_kinds", "=", "action_kinds", ",", "\n", "instr_kinds", "=", "[", "'action'", "]", ",", "\n", "depth", "=", "depth", "+", "1", "\n", ")", "\n", "instr_b", "=", "self", ".", "rand_instr", "(", "\n", "action_kinds", "=", "action_kinds", ",", "\n", "instr_kinds", "=", "[", "'action'", "]", ",", "\n", "depth", "=", "depth", "+", "1", "\n", ")", "\n", "return", "AndInstr", "(", "instr_a", ",", "instr_b", ")", "\n", "\n", "", "elif", "kind", "==", "'seq'", ":", "\n", "            ", "instr_a", "=", "self", ".", "rand_instr", "(", "\n", "action_kinds", "=", "action_kinds", ",", "\n", "instr_kinds", "=", "[", "'action'", ",", "'and'", "]", ",", "\n", "depth", "=", "depth", "+", "1", "\n", ")", "\n", "instr_b", "=", "self", ".", "rand_instr", "(", "\n", "action_kinds", "=", "action_kinds", ",", "\n", "instr_kinds", "=", "[", "'action'", ",", "'and'", "]", ",", "\n", "depth", "=", "depth", "+", "1", "\n", ")", "\n", "\n", "kind", "=", "self", ".", "_rand_elem", "(", "[", "'before'", ",", "'after'", "]", ")", "\n", "\n", "if", "kind", "==", "'before'", ":", "\n", "                ", "return", "BeforeInstr", "(", "instr_a", ",", "instr_b", ")", "\n", "", "elif", "kind", "==", "'after'", ":", "\n", "                ", "return", "AfterInstr", "(", "instr_a", ",", "instr_b", ")", "\n", "\n", "", "assert", "False", "\n", "\n", "", "assert", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.register_levels": [[467, 494], ["sorted", "list", "gym.envs.registration.register", "globals.keys", "global_name.startswith", "global_name.split"], "function", ["None"], ["def", "register_levels", "(", "module_name", ",", "globals", ")", ":", "\n", "    ", "\"\"\"\n    Register OpenAI gym environments for all levels in a file\n    \"\"\"", "\n", "\n", "# Iterate through global names", "\n", "for", "global_name", "in", "sorted", "(", "list", "(", "globals", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "if", "not", "global_name", ".", "startswith", "(", "'Level_'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "level_name", "=", "global_name", ".", "split", "(", "'Level_'", ")", "[", "-", "1", "]", "\n", "level_class", "=", "globals", "[", "global_name", "]", "\n", "\n", "# Register the levels with OpenAI Gym", "\n", "gym_id", "=", "'BabyAI-%s-v0'", "%", "(", "level_name", ")", "\n", "entry_point", "=", "'%s:%s'", "%", "(", "module_name", ",", "global_name", ")", "\n", "gym", ".", "envs", ".", "registration", ".", "register", "(", "\n", "id", "=", "gym_id", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", ")", "\n", "\n", "# Add the level to the dictionary", "\n", "level_dict", "[", "level_name", "]", "=", "level_class", "\n", "\n", "# Store the name and gym id on the level class", "\n", "level_class", ".", "level_name", "=", "level_name", "\n", "level_class", ".", "gym_id", "=", "gym_id", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.levels.levelgen.test": [[496, 542], ["enumerate", "gym.make", "gym.make", "level_dict.keys", "print", "random.Random", "range", "level", "level", "level", "isinstance", "level.reset", "min", "len", "re.match", "random.Random.randint", "level.step", "len", "level.reset"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "for", "idx", ",", "level_name", "in", "enumerate", "(", "level_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", "(", "'Level %s (%d/%d)'", "%", "(", "level_name", ",", "idx", "+", "1", ",", "len", "(", "level_dict", ")", ")", ")", "\n", "\n", "level", "=", "level_dict", "[", "level_name", "]", "\n", "\n", "# Run the mission for a few episodes", "\n", "rng", "=", "random", ".", "Random", "(", "0", ")", "\n", "num_episodes", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "15", ")", ":", "\n", "            ", "mission", "=", "level", "(", "seed", "=", "i", ")", "\n", "\n", "# Check that the surface form was generated", "\n", "assert", "isinstance", "(", "mission", ".", "surface", ",", "str", ")", "\n", "assert", "len", "(", "mission", ".", "surface", ")", ">", "0", "\n", "obs", "=", "mission", ".", "reset", "(", ")", "\n", "assert", "obs", "[", "'mission'", "]", "==", "mission", ".", "surface", "\n", "\n", "# Reduce max_steps because otherwise tests take too long", "\n", "mission", ".", "max_steps", "=", "min", "(", "mission", ".", "max_steps", ",", "200", ")", "\n", "\n", "# Check for some known invalid patterns in the surface form", "\n", "import", "re", "\n", "surface", "=", "mission", ".", "surface", "\n", "assert", "not", "re", ".", "match", "(", "r\".*pick up the [^ ]*door.*\"", ",", "surface", ")", ",", "surface", "\n", "\n", "while", "True", ":", "\n", "                ", "action", "=", "rng", ".", "randint", "(", "0", ",", "mission", ".", "action_space", ".", "n", "-", "1", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "mission", ".", "step", "(", "action", ")", "\n", "if", "done", ":", "\n", "                    ", "obs", "=", "mission", ".", "reset", "(", ")", "\n", "break", "\n", "\n", "", "", "num_episodes", "+=", "1", "\n", "\n", "# The same seed should always yield the same mission", "\n", "", "m0", "=", "level", "(", "seed", "=", "0", ")", "\n", "m1", "=", "level", "(", "seed", "=", "0", ")", "\n", "grid1", "=", "m0", ".", "unwrapped", ".", "grid", "\n", "grid2", "=", "m1", ".", "unwrapped", ".", "grid", "\n", "assert", "grid1", "==", "grid2", "\n", "assert", "m0", ".", "surface", "==", "m1", ".", "surface", "\n", "\n", "# Check that gym environment names were registered correctly", "\n", "", "gym", ".", "make", "(", "'BabyAI-1RoomS8-v0'", ")", "\n", "gym", ".", "make", "(", "'BabyAI-BossLevel-v0'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.redraw": [[12, 17], ["window.show_img", "env.render"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.penv.ParallelEnv.render"], ["def", "redraw", "(", "img", ")", ":", "\n", "    ", "if", "not", "args", ".", "agent_view", ":", "\n", "        ", "img", "=", "env", ".", "render", "(", "'rgb_array'", ",", "tile_size", "=", "args", ".", "tile_size", ")", "\n", "\n", "", "window", ".", "show_img", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset": [[18, 29], ["env.reset", "hasattr", "manual_control.redraw", "env.seed", "print", "window.set_caption"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.redraw", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "args", ".", "seed", "!=", "-", "1", ":", "\n", "        ", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "hasattr", "(", "env", ",", "'mission'", ")", ":", "\n", "        ", "print", "(", "'Mission: %s'", "%", "env", ".", "mission", ")", "\n", "window", ".", "set_caption", "(", "env", ".", "mission", ")", "\n", "\n", "", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step": [[30, 39], ["env.step", "print", "print", "manual_control.reset", "manual_control.redraw"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.redraw"], ["", "def", "step", "(", "action", ")", ":", "\n", "    ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "print", "(", "'step=%s, reward=%.2f'", "%", "(", "env", ".", "step_count", ",", "reward", ")", ")", "\n", "\n", "if", "done", ":", "\n", "        ", "print", "(", "'done!'", ")", "\n", "reset", "(", ")", "\n", "", "else", ":", "\n", "        ", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.key_handler": [[40, 75], ["print", "window.close", "manual_control.reset", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step"], ["", "", "def", "key_handler", "(", "event", ")", ":", "\n", "    ", "print", "(", "'pressed'", ",", "event", ".", "key", ")", "\n", "\n", "if", "event", ".", "key", "==", "'escape'", ":", "\n", "        ", "window", ".", "close", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'backspace'", ":", "\n", "        ", "reset", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'left'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "left", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'right'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "right", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'up'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "forward", ")", "\n", "return", "\n", "\n", "# Spacebar", "\n", "", "if", "event", ".", "key", "==", "' '", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "toggle", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pageup'", "or", "event", ".", "key", "==", "'p'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "pickup", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pagedown'", "or", "event", ".", "key", "==", "'d'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "drop", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'enter'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "done", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.rl_dataeff.dataeff": [[26, 32], ["df_model[].rolling().mean", "df_model[].rolling().mean.max", "print", "int", "df_model[].rolling", "df_model[].rolling().mean.max"], "function", ["None"], ["def", "dataeff", "(", "df_model", ",", "window", ")", ":", "\n", "    ", "smoothed_sr", "=", "df_model", "[", "'success_rate'", "]", ".", "rolling", "(", "window", ",", "center", "=", "True", ")", ".", "mean", "(", ")", "\n", "if", "smoothed_sr", ".", "max", "(", ")", "<", "0.99", ":", "\n", "        ", "print", "(", "'not done, success rate is only {}% so far'", ".", "format", "(", "100", "*", "smoothed_sr", ".", "max", "(", ")", ")", ")", "\n", "return", "int", "(", "1e9", ")", "\n", "", "return", "df_model", "[", "smoothed_sr", ">=", "0.99", "]", ".", "iloc", "[", "0", "]", ".", "episodes", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.rl_dataeff.get_data": [[34, 50], ["print", "print", "pandas.concat", "babyai.get_fps", "df[].unique", "babyai.load_logs", "float", "print", "numpy.array", "df[].unique", "re.match", "rl_dataeff.dataeff", "data.append"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.get_fps", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_logs", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.rl_dataeff.dataeff"], ["", "def", "get_data", "(", "path", ",", "regex", ")", ":", "\n", "    ", "print", "(", "path", ")", "\n", "print", "(", "regex", ")", "\n", "df", "=", "pandas", ".", "concat", "(", "bp", ".", "load_logs", "(", "path", ")", ",", "sort", "=", "True", ")", "\n", "fps", "=", "bp", ".", "get_fps", "(", "df", ")", "\n", "models", "=", "df", "[", "'model'", "]", ".", "unique", "(", ")", "\n", "models", "=", "[", "model", "for", "model", "in", "df", "[", "'model'", "]", ".", "unique", "(", ")", "if", "re", ".", "match", "(", "regex", ",", "model", ")", "]", "\n", "\n", "data", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "        ", "x", "=", "df", "[", "df", "[", "'model'", "]", "==", "model", "]", "\n", "eff", "=", "float", "(", "dataeff", "(", "x", ",", "args", ".", "window", ")", ")", "\n", "print", "(", "model", ",", "eff", ")", "\n", "if", "eff", "!=", "1e9", ":", "\n", "            ", "data", ".", "append", "(", "eff", ")", "\n", "", "", "return", "np", ".", "array", "(", "data", ")", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.evaluate_agent": [[63, 104], ["logger.info", "babyai.load_agent", "utils.load_agent.model.eval", "babyai.evaluate.batch_evaluate", "utils.load_agent.model.train", "numpy.mean", "logger.info", "enumerate", "logger.info", "fail_seeds.append", "len", "fail_obss.append", "fail_actions.append"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.batch_evaluate", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train"], ["def", "evaluate_agent", "(", "il_learn", ",", "eval_seed", ",", "num_eval_demos", ",", "return_obss_actions", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate the agent on some number of episodes and return the seeds for the\n    episodes the agent performed the worst on.\n    \"\"\"", "\n", "\n", "logger", ".", "info", "(", "\"Evaluating agent on {} using {} demos\"", ".", "format", "(", "il_learn", ".", "args", ".", "env", ",", "num_eval_demos", ")", ")", "\n", "\n", "agent", "=", "utils", ".", "load_agent", "(", "il_learn", ".", "env", ",", "il_learn", ".", "args", ".", "model", ")", "\n", "\n", "agent", ".", "model", ".", "eval", "(", ")", "\n", "logs", "=", "batch_evaluate", "(", "\n", "agent", ",", "\n", "il_learn", ".", "args", ".", "env", ",", "\n", "episodes", "=", "num_eval_demos", ",", "\n", "seed", "=", "eval_seed", ",", "\n", "return_obss_actions", "=", "return_obss_actions", "\n", ")", "\n", "agent", ".", "model", ".", "train", "(", ")", "\n", "\n", "success_rate", "=", "np", ".", "mean", "(", "[", "1", "if", "r", ">", "0", "else", "0", "for", "r", "in", "logs", "[", "'return_per_episode'", "]", "]", ")", "\n", "logger", ".", "info", "(", "\"success rate: {:.2f}\"", ".", "format", "(", "success_rate", ")", ")", "\n", "\n", "# Find the seeds for all the failing demos", "\n", "fail_seeds", "=", "[", "]", "\n", "fail_obss", "=", "[", "]", "\n", "fail_actions", "=", "[", "]", "\n", "\n", "for", "idx", ",", "ret", "in", "enumerate", "(", "logs", "[", "\"return_per_episode\"", "]", ")", ":", "\n", "        ", "if", "ret", "<=", "0", ":", "\n", "            ", "fail_seeds", ".", "append", "(", "logs", "[", "\"seed_per_episode\"", "]", "[", "idx", "]", ")", "\n", "if", "return_obss_actions", ":", "\n", "                ", "fail_obss", ".", "append", "(", "logs", "[", "\"observations_per_episode\"", "]", "[", "idx", "]", ")", "\n", "fail_actions", ".", "append", "(", "logs", "[", "\"actions_per_episode\"", "]", "[", "idx", "]", ")", "\n", "\n", "", "", "", "logger", ".", "info", "(", "\"{} fails\"", ".", "format", "(", "len", "(", "fail_seeds", ")", ")", ")", "\n", "\n", "if", "not", "return_obss_actions", ":", "\n", "        ", "return", "success_rate", ",", "fail_seeds", "\n", "", "else", ":", "\n", "        ", "return", "success_rate", ",", "fail_seeds", ",", "fail_obss", ",", "fail_actions", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.generate_demos": [[106, 148], ["gym.make", "babyai.utils.agent.BotAgent", "gym.make.seed", "gym.make.reset", "babyai.utils.agent.BotAgent.on_reset", "int", "gym.make.step", "babyai.utils.agent.BotAgent.analyze_feedback", "actions.append", "images.append", "directions.append", "demos.append", "logger.info", "logger.exception", "babyai.utils.agent.BotAgent.act", "blosc.pack_array", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.on_reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.act"], ["", "", "def", "generate_demos", "(", "env_name", ",", "seeds", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "agent", "=", "BotAgent", "(", "env", ")", "\n", "demos", "=", "[", "]", "\n", "\n", "for", "seed", "in", "seeds", ":", "\n", "# Run the expert for one episode", "\n", "        ", "done", "=", "False", "\n", "\n", "env", ".", "seed", "(", "int", "(", "seed", ")", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "on_reset", "(", ")", "\n", "\n", "actions", "=", "[", "]", "\n", "mission", "=", "obs", "[", "\"mission\"", "]", "\n", "images", "=", "[", "]", "\n", "directions", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "while", "not", "done", ":", "\n", "                ", "action", "=", "agent", ".", "act", "(", "obs", ")", "[", "'action'", "]", "\n", "new_obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "agent", ".", "analyze_feedback", "(", "reward", ",", "done", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "images", ".", "append", "(", "obs", "[", "'image'", "]", ")", "\n", "directions", ".", "append", "(", "obs", "[", "'direction'", "]", ")", "\n", "\n", "obs", "=", "new_obs", "\n", "\n", "", "if", "reward", ">", "0", ":", "\n", "                ", "demos", ".", "append", "(", "(", "mission", ",", "blosc", ".", "pack_array", "(", "np", ".", "array", "(", "images", ")", ")", ",", "directions", ",", "actions", ")", ")", "\n", "", "if", "reward", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"failed to accomplish the mission\"", ")", "\n", "\n", "", "", "except", "Exception", ":", "\n", "            ", "logger", ".", "exception", "(", "\"error while generating demo #{}\"", ".", "format", "(", "len", "(", "demos", ")", ")", ")", "\n", "continue", "\n", "\n", "# logger.info(\"demo #{}\".format(len(demos)))", "\n", "\n", "", "", "return", "demos", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.grow_training_set": [[150, 177], ["int", "logger.info", "len", "len", "train_intelligent_expert.evaluate_agent", "train_intelligent_expert.generate_demos", "train_demos.extend", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.evaluate_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.generate_demos"], ["", "def", "grow_training_set", "(", "il_learn", ",", "train_demos", ",", "eval_seed", ",", "grow_factor", ",", "num_eval_demos", ")", ":", "\n", "    ", "\"\"\"\n    Grow the training set of demonstrations by some factor\n    We specifically generate demos on which the agent fails\n    \"\"\"", "\n", "\n", "new_train_set_size", "=", "int", "(", "len", "(", "train_demos", ")", "*", "grow_factor", ")", "\n", "num_new_demos", "=", "new_train_set_size", "-", "len", "(", "train_demos", ")", "\n", "\n", "logger", ".", "info", "(", "\"Generating {} new demos for {}\"", ".", "format", "(", "num_new_demos", ",", "il_learn", ".", "args", ".", "env", ")", ")", "\n", "\n", "# Add new demos until we rearch the new target size", "\n", "while", "len", "(", "train_demos", ")", "<", "new_train_set_size", ":", "\n", "        ", "num_new_demos", "=", "new_train_set_size", "-", "len", "(", "train_demos", ")", "\n", "\n", "# Evaluate the success rate of the model", "\n", "success_rate", ",", "fail_seeds", "=", "evaluate_agent", "(", "il_learn", ",", "eval_seed", ",", "num_eval_demos", ")", "\n", "eval_seed", "+=", "num_eval_demos", "\n", "\n", "if", "len", "(", "fail_seeds", ")", ">", "num_new_demos", ":", "\n", "            ", "fail_seeds", "=", "fail_seeds", "[", ":", "num_new_demos", "]", "\n", "\n", "# Generate demos for the worst performing seeds", "\n", "", "new_demos", "=", "generate_demos", "(", "il_learn", ".", "args", ".", "env", ",", "fail_seeds", ")", "\n", "train_demos", ".", "extend", "(", "new_demos", ")", "\n", "\n", "", "return", "eval_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.get_bot_mean": [[179, 188], ["logger.info", "gym.make", "gym.make.seed", "babyai.utils.agent.BotAgent", "babyai.evaluate.evaluate", "numpy.mean", "logger.info"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.evaluate"], ["", "def", "get_bot_mean", "(", "env_name", ",", "episodes_to_evaluate_mean", ",", "seed", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"Evaluating the average number of steps using {} episodes\"", ".", "format", "(", "episodes_to_evaluate_mean", ")", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_name", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "agent", "=", "BotAgent", "(", "env", ")", "\n", "logs", "=", "evaluate", "(", "agent", ",", "env", ",", "episodes_to_evaluate_mean", ",", "model_agent", "=", "False", ")", "\n", "average_number_of_steps", "=", "np", ".", "mean", "(", "logs", "[", "\"num_frames_per_episode\"", "]", ")", "\n", "logger", ".", "info", "(", "\"Average number of steps: {}\"", ".", "format", "(", "average_number_of_steps", ")", ")", "\n", "return", "average_number_of_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.main": [[190, 273], ["babyai.configure_logging", "babyai.imitation.ImitationLearning", "os.path.join", "csv.writer", "logger.info", "logger.info", "logger.info", "os.path.join", "os.path.exists", "range", "babyai.imitation.ImitationLearning.default_model_name", "SummaryWriter", "babyai.get_log_dir", "os.path.exists", "open", "csv.writer.writerow", "len", "babyai.get_log_dir", "logger.info", "babyai.imitation.ImitationLearning", "babyai.imitation.ImitationLearning.validate", "numpy.mean", "train_intelligent_expert.grow_training_set", "babyai.get_demos_path", "print", "babyai.save_demos", "babyai.get_log_dir", "torch.cuda.is_available", "open", "json.load", "json.load.get", "json.load.get", "len", "os.path.join", "babyai.imitation.ImitationLearning.train", "logger.info", "open", "json.dump", "len", "babyai.get_log_dir", "len"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.configure_logging", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.default_model_name", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.validate", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_intelligent_expert.grow_training_set", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.save_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "args", ".", "model", "=", "args", ".", "model", "or", "ImitationLearning", ".", "default_model_name", "(", "args", ")", "\n", "utils", ".", "configure_logging", "(", "args", ".", "model", ")", "\n", "il_learn", "=", "ImitationLearning", "(", "args", ")", "\n", "\n", "# Define logger and Tensorboard writer", "\n", "header", "=", "(", "[", "\"update\"", ",", "\"frames\"", ",", "\"FPS\"", ",", "\"duration\"", ",", "\"entropy\"", ",", "\"policy_loss\"", ",", "\"train_accuracy\"", "]", "\n", "+", "[", "\"validation_accuracy\"", ",", "\"validation_return\"", ",", "\"validation_success_rate\"", "]", ")", "\n", "writer", "=", "None", "\n", "if", "args", ".", "tb", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "writer", "=", "SummaryWriter", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ")", "\n", "\n", "# Define csv writer", "\n", "", "csv_path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ",", "'log.csv'", ")", "\n", "first_created", "=", "not", "os", ".", "path", ".", "exists", "(", "csv_path", ")", "\n", "# we don't buffer data going in the csv log, cause we assume", "\n", "# that one update will take much longer that one write to the log", "\n", "csv_writer", "=", "csv", ".", "writer", "(", "open", "(", "csv_path", ",", "'a'", ",", "1", ")", ")", "\n", "if", "first_created", ":", "\n", "        ", "csv_writer", ".", "writerow", "(", "header", ")", "\n", "\n", "# Log command, availability of CUDA, and model", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "logger", ".", "info", "(", "\"CUDA available: {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "il_learn", ".", "acmodel", ")", "\n", "\n", "# Seed at which demo evaluation/generation will begin", "\n", "eval_seed", "=", "args", ".", "seed", "+", "len", "(", "il_learn", ".", "train_demos", ")", "\n", "\n", "# Phase at which we start", "\n", "cur_phase", "=", "0", "\n", "\n", "# Try to load the status (if resuming)", "\n", "status_path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ",", "'status.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "status_path", ")", ":", "\n", "        ", "with", "open", "(", "status_path", ",", "'r'", ")", "as", "src", ":", "\n", "            ", "status", "=", "json", ".", "load", "(", "src", ")", "\n", "eval_seed", "=", "status", ".", "get", "(", "'eval_seed'", ",", "eval_seed", ")", "\n", "cur_phase", "=", "status", ".", "get", "(", "'cur_phase'", ",", "cur_phase", ")", "\n", "\n", "", "", "model_name", "=", "args", ".", "model", "\n", "\n", "for", "phase_no", "in", "range", "(", "cur_phase", ",", "args", ".", "phases", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Starting phase {} with {} demos, eval_seed={}\"", ".", "format", "(", "phase_no", ",", "len", "(", "il_learn", ".", "train_demos", ")", ",", "eval_seed", ")", ")", "\n", "\n", "# Each phase trains a different model from scratch", "\n", "args", ".", "model", "=", "model_name", "+", "(", "'_phase_%d'", "%", "phase_no", ")", "\n", "il_learn", "=", "ImitationLearning", "(", "args", ")", "\n", "\n", "# Train the imitation learning agent", "\n", "if", "len", "(", "il_learn", ".", "train_demos", ")", ">", "0", ":", "\n", "            ", "train_status_path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ",", "'status.json'", ")", "\n", "il_learn", ".", "train", "(", "il_learn", ".", "train_demos", ",", "writer", ",", "csv_writer", ",", "train_status_path", ",", "header", ")", "\n", "\n", "# Stopping criterion", "\n", "", "valid_log", "=", "il_learn", ".", "validate", "(", "args", ".", "val_episodes", ")", "\n", "success_rate", "=", "np", ".", "mean", "(", "[", "1", "if", "r", ">", "0", "else", "0", "for", "r", "in", "valid_log", "[", "0", "]", "[", "'return_per_episode'", "]", "]", ")", "\n", "\n", "if", "success_rate", ">=", "0.99", ":", "\n", "            ", "logger", ".", "info", "(", "\"Reached target success rate with {} demos, stopping\"", ".", "format", "(", "len", "(", "il_learn", ".", "train_demos", ")", ")", ")", "\n", "break", "\n", "\n", "", "eval_seed", "=", "grow_training_set", "(", "\n", "il_learn", ",", "\n", "il_learn", ".", "train_demos", ",", "\n", "eval_seed", ",", "\n", "args", ".", "demo_grow_factor", ",", "\n", "args", ".", "num_eval_demos", "\n", ")", "\n", "\n", "# Save the current demo generation seed", "\n", "with", "open", "(", "status_path", ",", "'w'", ")", "as", "dst", ":", "\n", "            ", "status", "=", "{", "\n", "'eval_seed'", ":", "eval_seed", ",", "\n", "'cur_phase'", ":", "phase_no", "+", "1", "\n", "}", "\n", "json", ".", "dump", "(", "status", ",", "dst", ")", "\n", "\n", "# Save the demos", "\n", "", "demos_path", "=", "utils", ".", "get_demos_path", "(", "args", ".", "demos", ",", "args", ".", "env", ",", "args", ".", "demos_origin", ",", "valid", "=", "False", ")", "\n", "print", "(", "'saving demos to:'", ",", "demos_path", ")", "\n", "utils", ".", "save_demos", "(", "il_learn", ".", "train_demos", ",", "demos_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.train_il.main": [[41, 85], ["babyai.configure_logging", "logging.getLogger", "babyai.imitation.ImitationLearning", "os.path.join", "csv.writer", "os.path.join", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "babyai.imitation.ImitationLearning.train", "babyai.imitation.ImitationLearning.default_model_name", "header.extend", "header.extend", "header.extend", "SummaryWriter", "babyai.get_log_dir", "os.path.exists", "open", "csv.writer.writerow", "babyai.get_log_dir", "len", "len", "babyai.get_log_dir", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.configure_logging", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.train", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.imitation.ImitationLearning.default_model_name", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.log.get_log_dir"], ["def", "main", "(", "args", ")", ":", "\n", "# Verify the arguments when we train on multiple environments", "\n", "# No need to check for the length of len(args.multi_env) in case, for some reason, we need to validate on other envs", "\n", "    ", "if", "args", ".", "multi_env", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "args", ".", "multi_demos", ")", "==", "len", "(", "args", ".", "multi_episodes", ")", "\n", "\n", "", "args", ".", "model", "=", "args", ".", "model", "or", "ImitationLearning", ".", "default_model_name", "(", "args", ")", "\n", "utils", ".", "configure_logging", "(", "args", ".", "model", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "il_learn", "=", "ImitationLearning", "(", "args", ")", "\n", "\n", "# Define logger and Tensorboard writer", "\n", "header", "=", "(", "[", "\"update\"", ",", "\"frames\"", ",", "\"FPS\"", ",", "\"duration\"", ",", "\"entropy\"", ",", "\"policy_loss\"", ",", "\"train_accuracy\"", "]", "\n", "+", "[", "\"validation_accuracy\"", "]", ")", "\n", "if", "args", ".", "multi_env", "is", "None", ":", "\n", "        ", "header", ".", "extend", "(", "[", "\"validation_return\"", ",", "\"validation_success_rate\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "header", ".", "extend", "(", "[", "\"validation_return_{}\"", ".", "format", "(", "env", ")", "for", "env", "in", "args", ".", "multi_env", "]", ")", "\n", "header", ".", "extend", "(", "[", "\"validation_success_rate_{}\"", ".", "format", "(", "env", ")", "for", "env", "in", "args", ".", "multi_env", "]", ")", "\n", "", "writer", "=", "None", "\n", "if", "args", ".", "tb", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "writer", "=", "SummaryWriter", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ")", "\n", "\n", "# Define csv writer", "\n", "", "csv_writer", "=", "None", "\n", "csv_path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ",", "'log.csv'", ")", "\n", "first_created", "=", "not", "os", ".", "path", ".", "exists", "(", "csv_path", ")", "\n", "# we don't buffer data going in the csv log, cause we assume", "\n", "# that one update will take much longer that one write to the log", "\n", "csv_writer", "=", "csv", ".", "writer", "(", "open", "(", "csv_path", ",", "'a'", ",", "1", ")", ")", "\n", "if", "first_created", ":", "\n", "        ", "csv_writer", ".", "writerow", "(", "header", ")", "\n", "\n", "# Get the status path", "\n", "", "status_path", "=", "os", ".", "path", ".", "join", "(", "utils", ".", "get_log_dir", "(", "args", ".", "model", ")", ",", "'status.json'", ")", "\n", "\n", "# Log command, availability of CUDA, and model", "\n", "logger", ".", "info", "(", "args", ")", "\n", "logger", ".", "info", "(", "\"CUDA available: {}\"", ".", "format", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "il_learn", ".", "acmodel", ")", "\n", "\n", "il_learn", ".", "train", "(", "il_learn", ".", "train_demos", ",", "writer", ",", "csv_writer", ",", "status_path", ",", "header", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.evaluate.main": [[37, 60], ["babyai.seed", "gym.make", "gym.make.seed", "babyai.load_agent", "isinstance", "len", "babyai.evaluate.evaluate_demo_agent", "len", "isinstance", "babyai.evaluate.evaluate", "babyai.evaluate.batch_evaluate"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.evaluate_demo_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.evaluate", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.evaluate.batch_evaluate"], ["\n", "\n", "", "logs", "[", "\"observations_per_episode\"", "]", ".", "append", "(", "obss", ")", "\n", "logs", "[", "\"num_frames_per_episode\"", "]", ".", "append", "(", "num_frames", ")", "\n", "logs", "[", "\"return_per_episode\"", "]", ".", "append", "(", "returnn", ")", "\n", "", "if", "model_agent", ":", "\n", "        ", "agent", ".", "model", ".", "train", "(", ")", "\n", "", "return", "logs", "\n", "\n", "\n", "", "def", "evaluate_demo_agent", "(", "agent", ",", "episodes", ")", ":", "\n", "    ", "logs", "=", "{", "\"num_frames_per_episode\"", ":", "[", "]", ",", "\"return_per_episode\"", ":", "[", "]", "}", "\n", "\n", "number_of_demos", "=", "len", "(", "agent", ".", "demos", ")", "\n", "\n", "for", "demo_id", "in", "range", "(", "min", "(", "number_of_demos", ",", "episodes", ")", ")", ":", "\n", "        ", "logs", "[", "\"num_frames_per_episode\"", "]", ".", "append", "(", "len", "(", "agent", ".", "demos", "[", "demo_id", "]", ")", ")", "\n", "\n", "", "return", "logs", "\n", "\n", "\n", "", "class", "ManyEnvs", "(", "gym", ".", "Env", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "envs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.evaluate_all_models.get_levels_from_model_name": [[23, 36], ["re.split", "list", "set", "levels.append"], "function", ["None"], ["def", "get_levels_from_model_name", "(", "model", ")", ":", "\n", "    ", "levels", "=", "[", "]", "\n", "# Assume that our model names are separated with _ or -", "\n", "model_name_parts", "=", "re", ".", "split", "(", "'_|-'", ",", "model", ")", "\n", "for", "part", "in", "model_name_parts", ":", "\n", "# Assume that each part contains at most one level name.", "\n", "# Sorting LEVELS using length of level name is to avoid scenarios like", "\n", "# extracting 'GoTo' from the model name 'GoToLocal-model'", "\n", "        ", "for", "level", "in", "LEVELS", ":", "\n", "            ", "if", "level", "in", "part", ":", "\n", "                ", "levels", ".", "append", "(", "'BabyAI-{}-v0'", ".", "format", "(", "level", ")", ")", "\n", "break", "\n", "", "", "", "return", "list", "(", "set", "(", "levels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent": [[9, 16], ["compute_possible_instructions.count_Sent1", "compute_possible_instructions.count_Sent1", "compute_possible_instructions.count_Sent1", "compute_possible_instructions.count_Sent1", "compute_possible_instructions.count_Sent1"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1"], ["def", "count_Sent", "(", ")", ":", "\n", "    ", "return", "(", "\n", "count_Sent1", "(", ")", "+", "\n", "# Sent1, then Sent1", "\n", "count_Sent1", "(", ")", "*", "count_Sent1", "(", ")", "+", "\n", "# Sent1 after you Sent1", "\n", "count_Sent1", "(", ")", "*", "count_Sent1", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Sent1": [[18, 23], ["compute_possible_instructions.count_Clause", "compute_possible_instructions.count_Clause", "compute_possible_instructions.count_Clause"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Clause", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Clause", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Clause"], ["", "def", "count_Sent1", "(", ")", ":", "\n", "    ", "return", "(", "\n", "count_Clause", "(", ")", "+", "\n", "# Clause and Clause", "\n", "count_Clause", "(", ")", "*", "count_Clause", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Clause": [[25, 35], ["compute_possible_instructions.count_DescrDoor", "compute_possible_instructions.count_DescrNotDoor", "compute_possible_instructions.count_Descr", "compute_possible_instructions.count_Descr", "compute_possible_instructions.count_DescrNotDoor"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrNotDoor", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Descr", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Descr", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrNotDoor"], ["", "def", "count_Clause", "(", ")", ":", "\n", "    ", "return", "(", "\n", "# go to", "\n", "count_Descr", "(", ")", "+", "\n", "# pick up", "\n", "count_DescrNotDoor", "(", ")", "+", "\n", "# open", "\n", "count_DescrDoor", "(", ")", "+", "\n", "# put next", "\n", "count_DescrNotDoor", "(", ")", "*", "count_Descr", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor": [[37, 40], ["compute_possible_instructions.count_LocSpec", "compute_possible_instructions.count_Color"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_LocSpec", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Color"], ["", "def", "count_DescrDoor", "(", ")", ":", "\n", "# (the|a) Color door Location", "\n", "    ", "return", "2", "*", "count_Color", "(", ")", "*", "count_LocSpec", "(", ")", "\n", "", "def", "count_DescrBall", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBall": [[40, 42], ["compute_possible_instructions.count_DescrDoor"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor"], ["", "def", "count_DescrBall", "(", ")", ":", "\n", "    ", "return", "count_DescrDoor", "(", ")", "\n", "", "def", "count_DescrBox", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBox": [[42, 44], ["compute_possible_instructions.count_DescrDoor"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor"], ["", "def", "count_DescrBox", "(", ")", ":", "\n", "    ", "return", "count_DescrDoor", "(", ")", "\n", "", "def", "count_DescrKey", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrKey": [[44, 46], ["compute_possible_instructions.count_DescrDoor"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor"], ["", "def", "count_DescrKey", "(", ")", ":", "\n", "    ", "return", "count_DescrDoor", "(", ")", "\n", "", "def", "count_Descr", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Descr": [[46, 48], ["compute_possible_instructions.count_DescrKey", "compute_possible_instructions.count_DescrBox", "compute_possible_instructions.count_DescrDoor", "compute_possible_instructions.count_DescrBall"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrKey", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBox", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrDoor", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBall"], ["", "def", "count_Descr", "(", ")", ":", "\n", "    ", "return", "count_DescrDoor", "(", ")", "+", "count_DescrBall", "(", ")", "+", "count_DescrBox", "(", ")", "+", "count_DescrKey", "(", ")", "\n", "", "def", "count_DescrNotDoor", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrNotDoor": [[48, 50], ["compute_possible_instructions.count_DescrKey", "compute_possible_instructions.count_DescrBall", "compute_possible_instructions.count_DescrBox"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrKey", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBall", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_DescrBox"], ["", "def", "count_DescrNotDoor", "(", ")", ":", "\n", "    ", "return", "count_DescrBall", "(", ")", "+", "count_DescrBox", "(", ")", "+", "count_DescrKey", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_Color": [[51, 54], ["len"], "function", ["None"], ["", "def", "count_Color", "(", ")", ":", "\n", "# Empty string or color", "\n", "    ", "return", "len", "(", "[", "None", "]", "+", "COLOR_NAMES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.compute_possible_instructions.count_LocSpec": [[55, 58], ["len"], "function", ["None"], ["", "def", "count_LocSpec", "(", ")", ":", "\n", "# Empty string or location", "\n", "    ", "return", "len", "(", "[", "None", ",", "'left'", ",", "'right'", ",", "'front'", ",", "'behind'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.print_demo_lengths": [[65, 69], ["logger.info", "len", "numpy.mean", "numpy.std"], "function", ["None"], ["def", "print_demo_lengths", "(", "demos", ")", ":", "\n", "    ", "num_frames_per_episode", "=", "[", "len", "(", "demo", "[", "2", "]", ")", "for", "demo", "in", "demos", "]", "\n", "logger", ".", "info", "(", "'Demo length: {:.3f}+-{:.3f}'", ".", "format", "(", "\n", "np", ".", "mean", "(", "num_frames_per_episode", ")", ",", "np", ".", "std", "(", "num_frames_per_episode", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.generate_demos": [[71, 154], ["babyai.seed", "gym.make", "babyai.load_agent", "babyai.get_demos_path", "time.time", "logger.info", "babyai.save_demos", "logger.info", "make_agent_demos.print_demo_lengths", "gym.make.reset", "utils.load_agent.on_reset", "len", "logger.info", "gym.make.reset", "gym.make.seed", "len", "time.time", "logger.info", "logger.info", "babyai.save_demos", "logger.info", "make_agent_demos.print_demo_lengths", "len", "isinstance", "gym.make.step", "utils.load_agent.analyze_feedback", "actions.append", "images.append", "directions.append", "demos.append", "logger.info", "logger.exception", "len", "len", "utils.load_agent.act", "action.item.item", "Exception", "len", "len", "len", "len", "len", "blosc.pack_array", "len", "len", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.load_agent", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.save_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.print_demo_lengths", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.on_reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.__init__.seed", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.save_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.print_demo_lengths", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.act"], ["", "def", "generate_demos", "(", "n_episodes", ",", "valid", ",", "seed", ",", "shift", "=", "0", ")", ":", "\n", "    ", "utils", ".", "seed", "(", "seed", ")", "\n", "\n", "# Generate environment", "\n", "env", "=", "gym", ".", "make", "(", "args", ".", "env", ")", "\n", "\n", "agent", "=", "utils", ".", "load_agent", "(", "env", ",", "args", ".", "model", ",", "args", ".", "demos", ",", "'agent'", ",", "args", ".", "argmax", ",", "args", ".", "env", ")", "\n", "demos_path", "=", "utils", ".", "get_demos_path", "(", "args", ".", "demos", ",", "args", ".", "env", ",", "'agent'", ",", "valid", ")", "\n", "demos", "=", "[", "]", "\n", "\n", "checkpoint_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "just_crashed", "=", "False", "\n", "while", "True", ":", "\n", "        ", "if", "len", "(", "demos", ")", "==", "n_episodes", ":", "\n", "            ", "break", "\n", "\n", "", "done", "=", "False", "\n", "if", "just_crashed", ":", "\n", "            ", "logger", ".", "info", "(", "\"reset the environment to find a mission that the bot can solve\"", ")", "\n", "env", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "env", ".", "seed", "(", "seed", "+", "len", "(", "demos", ")", ")", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "on_reset", "(", ")", "\n", "\n", "actions", "=", "[", "]", "\n", "mission", "=", "obs", "[", "\"mission\"", "]", "\n", "images", "=", "[", "]", "\n", "directions", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "while", "not", "done", ":", "\n", "                ", "action", "=", "agent", ".", "act", "(", "obs", ")", "[", "'action'", "]", "\n", "if", "isinstance", "(", "action", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "action", "=", "action", ".", "item", "(", ")", "\n", "", "new_obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "agent", ".", "analyze_feedback", "(", "reward", ",", "done", ")", "\n", "\n", "actions", ".", "append", "(", "action", ")", "\n", "images", ".", "append", "(", "obs", "[", "'image'", "]", ")", "\n", "directions", ".", "append", "(", "obs", "[", "'direction'", "]", ")", "\n", "\n", "obs", "=", "new_obs", "\n", "", "if", "reward", ">", "0", "and", "(", "args", ".", "filter_steps", "==", "0", "or", "len", "(", "images", ")", "<=", "args", ".", "filter_steps", ")", ":", "\n", "                ", "demos", ".", "append", "(", "(", "mission", ",", "blosc", ".", "pack_array", "(", "np", ".", "array", "(", "images", ")", ")", ",", "directions", ",", "actions", ")", ")", "\n", "just_crashed", "=", "False", "\n", "\n", "", "if", "reward", "==", "0", ":", "\n", "                ", "if", "args", ".", "on_exception", "==", "'crash'", ":", "\n", "                    ", "raise", "Exception", "(", "\"mission failed, the seed is {}\"", ".", "format", "(", "seed", "+", "len", "(", "demos", ")", ")", ")", "\n", "", "just_crashed", "=", "True", "\n", "logger", ".", "info", "(", "\"mission failed\"", ")", "\n", "", "", "except", "(", "Exception", ",", "AssertionError", ")", ":", "\n", "            ", "if", "args", ".", "on_exception", "==", "'crash'", ":", "\n", "                ", "raise", "\n", "", "just_crashed", "=", "True", "\n", "logger", ".", "exception", "(", "\"error while generating demo #{}\"", ".", "format", "(", "len", "(", "demos", ")", ")", ")", "\n", "continue", "\n", "\n", "", "if", "len", "(", "demos", ")", "and", "len", "(", "demos", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "now", "=", "time", ".", "time", "(", ")", "\n", "demos_per_second", "=", "args", ".", "log_interval", "/", "(", "now", "-", "checkpoint_time", ")", "\n", "to_go", "=", "(", "n_episodes", "-", "len", "(", "demos", ")", ")", "/", "demos_per_second", "\n", "logger", ".", "info", "(", "\"demo #{}, {:.3f} demos per second, {:.3f} seconds to go\"", ".", "format", "(", "\n", "len", "(", "demos", ")", "-", "1", ",", "demos_per_second", ",", "to_go", ")", ")", "\n", "checkpoint_time", "=", "now", "\n", "\n", "# Save demonstrations", "\n", "\n", "", "if", "args", ".", "save_interval", ">", "0", "and", "len", "(", "demos", ")", "<", "n_episodes", "and", "len", "(", "demos", ")", "%", "args", ".", "save_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Saving demos...\"", ")", "\n", "utils", ".", "save_demos", "(", "demos", ",", "demos_path", ")", "\n", "logger", ".", "info", "(", "\"{} demos saved\"", ".", "format", "(", "len", "(", "demos", ")", ")", ")", "\n", "# print statistics for the last 100 demonstrations", "\n", "print_demo_lengths", "(", "demos", "[", "-", "100", ":", "]", ")", "\n", "\n", "\n", "# Save demonstrations", "\n", "", "", "logger", ".", "info", "(", "\"Saving demos...\"", ")", "\n", "utils", ".", "save_demos", "(", "demos", ",", "demos_path", ")", "\n", "logger", ".", "info", "(", "\"{} demos saved\"", ".", "format", "(", "len", "(", "demos", ")", ")", ")", "\n", "print_demo_lengths", "(", "demos", "[", "-", "100", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.make_agent_demos.generate_demos_cluster": [[156, 207], ["babyai.get_demos_path", "range", "babyai.save_demos", "os.path.realpath", "babyai.get_demos_path", "os.path.exists", "list", "logger.info", "logger.info", "subprocess.check_output", "logger.info", "logger.info", "range", "logger.info", "logger.info", "time.sleep", "all_demos.extend", "range", "os.remove", "map", "subprocess.check_output.decode", "len", "logger.info", "babyai.load_demos", "logger.info", "len", "babyai.get_demos_path", "logger.exception", "len"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.save_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.load_demos", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.demos.get_demos_path"], ["", "def", "generate_demos_cluster", "(", ")", ":", "\n", "    ", "demos_per_job", "=", "args", ".", "episodes", "//", "args", ".", "jobs", "\n", "demos_path", "=", "utils", ".", "get_demos_path", "(", "args", ".", "demos", ",", "args", ".", "env", ",", "'agent'", ")", "\n", "job_demo_names", "=", "[", "os", ".", "path", ".", "realpath", "(", "demos_path", "+", "'.shard{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "jobs", ")", "]", "\n", "for", "demo_name", "in", "job_demo_names", ":", "\n", "        ", "job_demos_path", "=", "utils", ".", "get_demos_path", "(", "demo_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "job_demos_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "job_demos_path", ")", "\n", "\n", "", "", "command", "=", "[", "args", ".", "job_script", "]", "\n", "command", "+=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "jobs", ")", ":", "\n", "        ", "cmd_i", "=", "list", "(", "map", "(", "str", ",", "\n", "command", "\n", "+", "[", "'--seed'", ",", "args", ".", "seed", "+", "i", "*", "demos_per_job", "]", "\n", "+", "[", "'--demos'", ",", "job_demo_names", "[", "i", "]", "]", "\n", "+", "[", "'--episodes'", ",", "demos_per_job", "]", "\n", "+", "[", "'--jobs'", ",", "0", "]", "\n", "+", "[", "'--valid-episodes'", ",", "0", "]", ")", ")", "\n", "logger", ".", "info", "(", "'LAUNCH COMMAND'", ")", "\n", "logger", ".", "info", "(", "cmd_i", ")", "\n", "output", "=", "subprocess", ".", "check_output", "(", "cmd_i", ")", "\n", "logger", ".", "info", "(", "'LAUNCH OUTPUT'", ")", "\n", "logger", ".", "info", "(", "output", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "job_demos", "=", "[", "None", "]", "*", "args", ".", "jobs", "\n", "while", "True", ":", "\n", "        ", "jobs_done", "=", "0", "\n", "for", "i", "in", "range", "(", "args", ".", "jobs", ")", ":", "\n", "            ", "if", "job_demos", "[", "i", "]", "is", "None", "or", "len", "(", "job_demos", "[", "i", "]", ")", "<", "demos_per_job", ":", "\n", "                ", "try", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Trying to load shard {}\"", ".", "format", "(", "i", ")", ")", "\n", "job_demos", "[", "i", "]", "=", "utils", ".", "load_demos", "(", "utils", ".", "get_demos_path", "(", "job_demo_names", "[", "i", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"{} demos ready in shard {}\"", ".", "format", "(", "\n", "len", "(", "job_demos", "[", "i", "]", ")", ",", "i", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "logger", ".", "exception", "(", "\"Failed to load the shard\"", ")", "\n", "", "", "if", "job_demos", "[", "i", "]", "and", "len", "(", "job_demos", "[", "i", "]", ")", "==", "demos_per_job", ":", "\n", "                ", "jobs_done", "+=", "1", "\n", "", "", "logger", ".", "info", "(", "\"{} out of {} shards done\"", ".", "format", "(", "jobs_done", ",", "args", ".", "jobs", ")", ")", "\n", "if", "jobs_done", "==", "args", ".", "jobs", ":", "\n", "            ", "break", "\n", "", "logger", ".", "info", "(", "\"sleep for 60 seconds\"", ")", "\n", "time", ".", "sleep", "(", "60", ")", "\n", "\n", "# Training demos", "\n", "", "all_demos", "=", "[", "]", "\n", "for", "demos", "in", "job_demos", ":", "\n", "        ", "all_demos", ".", "extend", "(", "demos", ")", "\n", "", "utils", ".", "save_demos", "(", "all_demos", ",", "demos_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.il_perf.get_data": [[27, 42], ["pandas.concat", "babyai.plotting.get_fps", "df[].unique", "babyai.plotting.load_logs", "max.rolling().mean", "max", "print", "maxes.append", "numpy.array", "df[].unique", "re.match", "max.rolling", "numpy.logical_not", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.get_fps", "home.repos.pwc.inspect_result.mila-iqia_babyai.babyai.plotting.load_logs"], ["def", "get_data", "(", "path", ",", "regex", ")", ":", "\n", "    ", "df", "=", "pandas", ".", "concat", "(", "bp", ".", "load_logs", "(", "path", ")", ",", "sort", "=", "True", ")", "\n", "fps", "=", "bp", ".", "get_fps", "(", "df", ")", "\n", "models", "=", "df", "[", "'model'", "]", ".", "unique", "(", ")", "\n", "models", "=", "[", "model", "for", "model", "in", "df", "[", "'model'", "]", ".", "unique", "(", ")", "if", "re", ".", "match", "(", "regex", ",", "model", ")", "]", "\n", "\n", "maxes", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "        ", "df_model", "=", "df", "[", "df", "[", "'model'", "]", "==", "model", "]", "\n", "success_rate", "=", "df_model", "[", "'validation_success_rate'", "]", "\n", "success_rate", "=", "success_rate", ".", "rolling", "(", "args", ".", "window", ",", "center", "=", "True", ")", ".", "mean", "(", ")", "\n", "success_rate", "=", "max", "(", "success_rate", "[", "np", ".", "logical_not", "(", "np", ".", "isnan", "(", "success_rate", ")", ")", "]", ")", "\n", "print", "(", "model", ",", "success_rate", ")", "\n", "maxes", ".", "append", "(", "success_rate", ")", "\n", "", "return", "np", ".", "array", "(", "maxes", ")", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.enjoy.keyDownCb": [[72, 98], ["print", "env.step", "agent.analyze_feedback", "agent.act", "print", "env.reset", "print"], "function", ["home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.step", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.analyze_feedback", "home.repos.pwc.inspect_result.mila-iqia_babyai.utils.agent.BotAgent.act", "home.repos.pwc.inspect_result.mila-iqia_babyai.scripts.manual_control.reset"], ["def", "keyDownCb", "(", "event", ")", ":", "\n", "    ", "global", "obs", "\n", "\n", "keyName", "=", "event", ".", "key", "\n", "print", "(", "keyName", ")", "\n", "\n", "# Avoiding processing of observation by agent for wrong key clicks", "\n", "if", "keyName", "not", "in", "action_map", "and", "keyName", "!=", "\"enter\"", ":", "\n", "        ", "return", "\n", "\n", "", "agent_action", "=", "agent", ".", "act", "(", "obs", ")", "[", "'action'", "]", "\n", "\n", "# Map the key to an action", "\n", "if", "keyName", "in", "action_map", ":", "\n", "        ", "action", "=", "env", ".", "actions", "[", "action_map", "[", "keyName", "]", "]", "\n", "\n", "# Enter executes the agent's action", "\n", "", "elif", "keyName", "==", "\"enter\"", ":", "\n", "        ", "action", "=", "agent_action", "\n", "\n", "", "obs", ",", "reward", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "agent", ".", "analyze_feedback", "(", "reward", ",", "done", ")", "\n", "if", "done", ":", "\n", "        ", "print", "(", "\"Reward:\"", ",", "reward", ")", "\n", "obs", "=", "env", ".", "reset", "(", ")", "\n", "print", "(", "\"Mission: {}\"", ".", "format", "(", "obs", "[", "\"mission\"", "]", ")", ")", "\n", "\n"]]}