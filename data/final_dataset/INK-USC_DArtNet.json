{"home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.validate.test": [[18, 190], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.train.train": [[12, 185], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n", "", "print", "(", "\"training done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.Aggregator.MeanAggregator.__init__": [[9, 15], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.Aggregator.MeanAggregator.forward": [[16, 84], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.Aggregator.MeanAggregator.predict": [[85, 121], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "inp_att", "[", "i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "e_self_att", ",", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "tem", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "inp_s", ",", "inp_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.test.test": [[18, 191], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.__init__": [[11, 84], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.forward": [[89, 184], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.sub_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f2", "model.DArtNet.criterion", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "forward", "(", "self", ",", "\n", "triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.init_history": [[185, 200], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "init_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.get_loss": [[206, 215], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["", "def", "get_loss", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.predict": [[219, 252], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().detach().numpy", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "model.DArtNet.cpu().detach().numpy", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "model.DArtNet.cpu().detach", "sub_att_pred[].cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.cpu"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.predict_single": [[253, 326], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.sub_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.evaluate_filter": [[327, 360], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n", "idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n", "(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.model.DArtNet.update_cache": [[361, 440], ["len", "o_candidate.view", "r.repeat().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "key.item", "s.item", "len", "len", "o_candidate[].view", "r.repeat().view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n", "        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n", "", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n", "                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "# elif s_his_cache[i].item() in self.att_o_dict:", "\n", "#     att_his_cache[i] = self.att_o_dict[", "\n", "#         s_his_cache[i].item()]", "\n", "", "else", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_residual_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "return", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "self_att_his_cache", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.load_hexaruples": [[14, 73], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.load_quadruples": [[75, 113], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.make_batch": [[115, 120], ["range", "len"], "function", ["None"], ["", "def", "make_batch", "(", "a", ",", "b", ",", "c", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.make_batch2": [[122, 127], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.make_batch3": [[129, 141], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch3", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h", ",", "w", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.get_data": [[143, 168], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "for", "i", ",", "o_his", "in", "enumerate", "(", "o_hist", ")", ":", "\n", "        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "data", "=", "np", ".", "unique", "(", "data", ",", "axis", "=", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.cuda": [[170, 175], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-decoupled.utils.get_sorted_s_r_embed": [[182, 229], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "\n", "embeds_s", "=", "ent_embeds", "[", "torch", ".", "LongTensor", "(", "flat_s", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_rel", "=", "rel_embeds", "[", "torch", ".", "LongTensor", "(", "flat_rel", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "torch", ".", "FloatTensor", "(", "flat_att", ")", ".", "view", "(", "-", "1", ",", "num_att", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "embeds", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "embeds_att", ",", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_split = torch.split(embeds, len_s)", "\n", "\n", "embeds_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_static_split = torch.split(embeds_static, len_s)", "\n", "\n", "return", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds", ",", "embeds_static", ",", "len_s", ",", "s_idx", "# embeds_split, embeds_static_split,", "\n", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.validate.test": [[18, 190], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.train.train": [[12, 185], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n", "", "print", "(", "\"training done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.Aggregator.MeanAggregator.__init__": [[9, 15], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.Aggregator.MeanAggregator.forward": [[16, 84], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.Aggregator.MeanAggregator.predict": [[85, 121], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "inp_att", "[", "i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "e_self_att", ",", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "tem", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "inp_s", ",", "inp_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.test.test": [[18, 191], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.__init__": [[11, 84], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.forward": [[90, 185], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.sub_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f2", "model.DArtNet.criterion", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.init_history": [[186, 201], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.get_loss": [[207, 216], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.predict": [[221, 254], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().detach().numpy", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "model.DArtNet.cpu().detach().numpy", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "model.DArtNet.cpu().detach", "sub_att_pred[].cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.cpu"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.predict_single": [[255, 328], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.sub_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.evaluate_filter": [[329, 362], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n", "idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n", "(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n", "", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.model.DArtNet.update_cache": [[363, 442], ["len", "o_candidate.view", "r.repeat().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "key.item", "s.item", "len", "len", "o_candidate[].view", "r.repeat().view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n", "", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n", "                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "# elif s_his_cache[i].item() in self.att_o_dict:", "\n", "#     att_his_cache[i] = self.att_o_dict[", "\n", "#         s_his_cache[i].item()]", "\n", "", "else", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_residual_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "return", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "self_att_his_cache", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.load_hexaruples": [[14, 73], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.load_quadruples": [[75, 113], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.make_batch": [[115, 120], ["range", "len"], "function", ["None"], ["", "def", "make_batch", "(", "a", ",", "b", ",", "c", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.make_batch2": [[122, 127], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.make_batch3": [[129, 141], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch3", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h", ",", "w", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.get_data": [[143, 168], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "for", "i", ",", "o_his", "in", "enumerate", "(", "o_hist", ")", ":", "\n", "        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "data", "=", "np", ".", "unique", "(", "data", ",", "axis", "=", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.cuda": [[170, 175], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute.utils.get_sorted_s_r_embed": [[182, 229], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "\n", "embeds_s", "=", "ent_embeds", "[", "torch", ".", "LongTensor", "(", "flat_s", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_rel", "=", "rel_embeds", "[", "torch", ".", "LongTensor", "(", "flat_rel", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "torch", ".", "FloatTensor", "(", "flat_att", ")", ".", "view", "(", "-", "1", ",", "num_att", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "embeds", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "embeds_att", ",", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_split = torch.split(embeds, len_s)", "\n", "\n", "embeds_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_static_split = torch.split(embeds_static, len_s)", "\n", "\n", "return", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds", ",", "embeds_static", ",", "len_s", ",", "s_idx", "# embeds_split, embeds_static_split,", "\n", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.validate.test": [[18, 204], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DArtNet'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "\"dropout probability\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "\n", "\"--dataset_path\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"dataset_path to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "help", "=", "\"dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"gpu\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.train.train": [[12, 183], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.Aggregator.MeanAggregator.__init__": [[9, 14], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.Aggregator.MeanAggregator.forward": [[15, 81], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.Aggregator.MeanAggregator.predict": [[82, 117], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n", "", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.test.test": [[18, 205], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'DArtNet'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "\"dropout probability\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "\n", "\"--dataset_path\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"dataset_path to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "help", "=", "\"dataset name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"gpu\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.__init__": [[11, 59], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.forward": [[64, 107], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.f2", "model.DArtNet.criterion", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "model.DArtNet.f1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "\"\"\"\n    Prediction function in training. \n    This should be different from testing because in testing we don't use ground-truth history.\n    \"\"\"", "\n", "def", "forward", "(", "self", ",", "\n", "triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.init_history": [[108, 118], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.get_loss": [[119, 128], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.predict": [[132, 165], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().item", "model.DArtNet.f1().squeeze", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu", "model.DArtNet.f1"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.predict_single": [[166, 231], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", "", "\"\"\"\n    Prediction function in testing\n    \"\"\"", "\n", "def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.evaluate_filter": [[232, 263], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.model.DArtNet.update_cache": [[264, 330], ["len", "o_candidate.view", "r.repeat().view", "range", "key.item", "s.item", "type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "o_candidate[].view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.load_hexaruples": [[14, 60], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.load_quadruples": [[62, 100], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n", "", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.make_batch": [[102, 107], ["range", "len"], "function", ["None"], ["                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.make_batch2": [[109, 114], ["range", "len"], "function", ["None"], ["", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.make_batch3": [[116, 128], ["range", "len"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.get_data": [[130, 155], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.cuda": [[157, 162], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.time-independent.utils.get_sorted_s_r_embed": [[169, 215], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n", "\n", "", "", "'''\nGet sorted s and r to make batch for RNN (sorted by length)\n'''", "\n", "\n", "\n", "def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.validate.test": [[18, 190], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "time.time", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.train.train": [[12, 183], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.Aggregator.MeanAggregator.__init__": [[9, 14], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.Aggregator.MeanAggregator.forward": [[15, 83], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "ent_embeds_attribute[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "att_packed_input", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.Aggregator.MeanAggregator.predict": [[84, 121], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "ent_embeds_attribute[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds_attribute[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "inp_att", "[", "i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "e_self_att", ",", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "tem", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "inp_s", ",", "inp_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.test.test": [[18, 191], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "time.time", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda", "time.time"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.__init__": [[11, 86], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.forward": [[91, 185], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.sub_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f2", "model.DArtNet.criterion", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.init_history": [[186, 201], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.get_loss": [[207, 216], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.predict": [[220, 266], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().item", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.predict_single": [[267, 403], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.sub_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n", "idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n", "(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n", "", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n", "        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n", "", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.evaluate_filter": [[404, 452], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "# elif s_his_cache[i].item() in self.att_o_dict:", "\n", "#     att_his_cache[i] = self.att_o_dict[", "\n", "#         s_his_cache[i].item()]", "\n", "", "else", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_residual_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "return", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "self_att_his_cache", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.model.DArtNet.update_cache": [[453, 519], ["len", "o_candidate.view", "r.repeat().view", "range", "key.item", "s.item", "type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "o_candidate[].view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], []], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.load_hexaruples": [[14, 60], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.load_quadruples": [[62, 100], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n", "", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.make_batch": [[102, 107], ["range", "len"], "function", ["None"], ["                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.make_batch2": [[109, 114], ["range", "len"], "function", ["None"], ["", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.make_batch3": [[116, 128], ["range", "len"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.get_data": [[130, 155], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.cuda": [[157, 162], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.decoupled.utils.get_sorted_s_r_embed": [[169, 217], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n", "\n", "", "", "'''\nGet sorted s and r to make batch for RNN (sorted by length)\n'''", "\n", "\n", "\n", "def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "\n", "embeds_s", "=", "ent_embeds", "[", "torch", ".", "LongTensor", "(", "flat_s", ")", ".", "cuda", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.validate.test": [[18, 188], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.train.train": [[12, 183], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.Aggregator.MeanAggregator.__init__": [[9, 14], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.Aggregator.MeanAggregator.forward": [[15, 81], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.Aggregator.MeanAggregator.predict": [[82, 117], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n", "", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.test.test": [[18, 189], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.__init__": [[11, 82], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.forward": [[88, 167], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.f2", "model.DArtNet.criterion", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.dropout", "model.DArtNet.f1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "def", "forward", "(", "self", ",", "\n", "triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.init_history": [[168, 183], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.get_loss": [[189, 198], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.predict": [[203, 248], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().item", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["# self.rel_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", "", "\"\"\"\n    Prediction function in testing\n    \"\"\"", "\n", "def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.predict_single": [[249, 322], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.att_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.evaluate_filter": [[323, 356], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n", "idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.model.DArtNet.update_cache": [[357, 423], ["len", "o_candidate.view", "r.repeat().view", "range", "key.item", "s.item", "type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "o_candidate[].view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n", "", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n", "        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n", "", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n", "                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.load_hexaruples": [[14, 60], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.load_quadruples": [[62, 100], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n", "", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.make_batch": [[102, 107], ["range", "len"], "function", ["None"], ["                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.make_batch2": [[109, 114], ["range", "len"], "function", ["None"], ["", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.make_batch3": [[116, 128], ["range", "len"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.get_data": [[130, 155], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.cuda": [[157, 162], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.shared-rnn.utils.get_sorted_s_r_embed": [[169, 215], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n", "\n", "", "", "'''\nGet sorted s and r to make batch for RNN (sorted by length)\n'''", "\n", "\n", "\n", "def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.validate.test": [[18, 190], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.train.train": [[12, 185], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n", "", "print", "(", "\"training done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.Aggregator.MeanAggregator.__init__": [[9, 15], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.Aggregator.MeanAggregator.forward": [[16, 84], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.Aggregator.MeanAggregator.predict": [[85, 121], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "inp_att", "[", "i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "e_self_att", ",", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "tem", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "inp_s", ",", "inp_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.test.test": [[18, 191], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.__init__": [[11, 84], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.forward": [[90, 172], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.f2", "model.DArtNet.criterion", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.dropout", "model.DArtNet.f1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.init_history": [[173, 188], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.get_loss": [[194, 203], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.predict": [[208, 241], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().detach().numpy", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "model.DArtNet.cpu().detach().numpy", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "model.DArtNet.cpu().detach", "sub_att_pred[].cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.cpu"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", "", "\"\"\"\n    Prediction function in testing\n    \"\"\"", "\n", "def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.predict_single": [[242, 315], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.att_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.evaluate_filter": [[316, 349], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.model.DArtNet.update_cache": [[350, 429], ["len", "o_candidate.view", "r.repeat().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "key.item", "s.item", "len", "len", "o_candidate[].view", "r.repeat().view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n", "(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n", "", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n", "        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n", "", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n", "                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "# elif s_his_cache[i].item() in self.att_o_dict:", "\n", "#     att_his_cache[i] = self.att_o_dict[", "\n", "#         s_his_cache[i].item()]", "\n", "", "else", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_residual_dict", "[", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.load_hexaruples": [[14, 73], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.load_quadruples": [[75, 113], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.make_batch": [[115, 120], ["range", "len"], "function", ["None"], ["", "def", "make_batch", "(", "a", ",", "b", ",", "c", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.make_batch2": [[122, 127], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.make_batch3": [[129, 141], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch3", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h", ",", "w", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.get_data": [[143, 168], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "for", "i", ",", "o_his", "in", "enumerate", "(", "o_hist", ")", ":", "\n", "        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "data", "=", "np", ".", "unique", "(", "data", ",", "axis", "=", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.cuda": [[170, 175], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-shared-rnn.utils.get_sorted_s_r_embed": [[182, 229], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "\n", "embeds_s", "=", "ent_embeds", "[", "torch", ".", "LongTensor", "(", "flat_s", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_rel", "=", "rel_embeds", "[", "torch", ".", "LongTensor", "(", "flat_rel", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "torch", ".", "FloatTensor", "(", "flat_att", ")", ".", "view", "(", "-", "1", ",", "num_att", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "embeds", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "embeds_att", ",", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_split = torch.split(embeds, len_s)", "\n", "\n", "embeds_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_static_split = torch.split(embeds_static, len_s)", "\n", "\n", "return", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds", ",", "embeds_static", ",", "len_s", ",", "s_idx", "# embeds_split, embeds_static_split,", "\n", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.validate.test": [[18, 190], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.train.train": [[12, 185], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n", "", "print", "(", "\"training done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.Aggregator.MeanAggregator.__init__": [[9, 15], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.Aggregator.MeanAggregator.forward": [[16, 84], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.FloatTensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "torch.FloatTensor().cuda", "len", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.Aggregator.MeanAggregator.predict": [[85, 121], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "inp_att", "[", "i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "e_self_att", ",", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "tem", "]", ",", "dim", "=", "0", ")", "\n", "", "return", "inp_s", ",", "inp_att", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.test.test": [[18, 191], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet().float", "print", "torch.load", "DArtNet().float.load_state_dict", "DArtNet().float.init_history", "print", "torch.from_numpy", "torch.from_numpy", "DArtNet().float.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "DArtNet().float.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "model.DArtNet", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "DArtNet().float.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n", "result_dict", "[", "args", ".", "epoch", "]", "=", "result_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.__init__": [[11, 61], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.forward": [[66, 112], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "triplets[].type().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.f2", "model.DArtNet.criterion", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "model.DArtNet.f1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "att_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "", "\"\"\"\n    Prediction function in training. \n    This should be different from testing because in testing we don't use ground-truth history.\n    \"\"\"", "\n", "def", "forward", "(", "self", ",", "\n", "triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.init_history": [[113, 123], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.get_loss": [[124, 133], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.predict": [[137, 169], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().detach().numpy", "model.DArtNet.f1().squeeze", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu().detach", "model.DArtNet.f1", "sub_att_pred[].cpu"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.predict_single": [[170, 235], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n", "\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "return", "loss", ",", "loss_att_sub", "\n", "\n", "", "\"\"\"\n    Prediction function in testing\n    \"\"\"", "\n", "def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.evaluate_filter": [[236, 269], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.model.DArtNet.update_cache": [[270, 349], ["len", "o_candidate.view", "r.repeat().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "range", "key.item", "s.item", "len", "len", "o_candidate[].view", "r.repeat().view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], ["self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.load_hexaruples": [[14, 73], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.load_quadruples": [[75, 113], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.make_batch": [[115, 120], ["range", "len"], "function", ["None"], ["", "def", "make_batch", "(", "a", ",", "b", ",", "c", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.make_batch2": [[122, 127], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.make_batch3": [[129, 141], ["range", "len"], "function", ["None"], ["", "", "def", "make_batch3", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h", ",", "w", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.get_data": [[143, 168], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "for", "i", ",", "o_his", "in", "enumerate", "(", "o_hist", ")", ":", "\n", "        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "", "", "", "data", "=", "np", ".", "unique", "(", "data", ",", "axis", "=", "0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.cuda": [[170, 175], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.multi-attribute-time-independent.utils.get_sorted_s_r_embed": [[182, 229], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.FloatTensor().view().cuda", "torch.FloatTensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n", "\n", "embeds_s", "=", "ent_embeds", "[", "torch", ".", "LongTensor", "(", "flat_s", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_rel", "=", "rel_embeds", "[", "torch", ".", "LongTensor", "(", "flat_rel", ")", ".", "cuda", "(", ")", "]", "\n", "embeds_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "torch", ".", "FloatTensor", "(", "flat_att", ")", ".", "view", "(", "-", "1", ",", "num_att", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "embeds", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "embeds_att", ",", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_split = torch.split(embeds, len_s)", "\n", "\n", "embeds_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "embeds_s", ",", "embeds_rel", "]", ",", "dim", "=", "1", ")", ")", ")", "\n", "# embeds_static_split = torch.split(embeds_static, len_s)", "\n", "\n", "return", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds", ",", "embeds_static", ",", "len_s", ",", "s_idx", "# embeds_split, embeds_static_split,", "\n", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.validate.test": [[18, 188], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "validate..copy", "validate..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'valid.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/valid_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/valid_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/valid_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/valid_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/valid_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/valid_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/valid_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/valid_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train": [[12, 183], ["utils.get_total_number", "utils.load_hexaruples", "numpy.random.seed", "torch.manual_seed", "os.makedirs", "os.makedirs", "os.makedirs", "print", "model.DArtNet", "torch.optim.Adam", "print", "torch.cuda.is_available", "torch.cuda.set_device", "model.DArtNet.parameters", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "model.DArtNet.train", "time.time", "sklearn.utils.shuffle", "utils.make_batch3", "time.time", "print", "torch.save", "torch.save", "torch.load", "model.DArtNet.load_state_dict", "torch.optim.Adam.load_state_dict", "model.DArtNet.to", "print", "torch.from_numpy", "model.DArtNet.get_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.item", "loss_att_sub.item", "torch.device", "batch_data.cuda.cuda", "model.DArtNet.parameters", "model.DArtNet.state_dict", "model.DArtNet.state_dict", "torch.optim.Adam.state_dict", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.to", "sorted", "torch.device", "print", "print", "len", "len", "int", "os.listdir"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.train.train", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "train", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "train_data", ",", "train_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "seed", "=", "999", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "\n", "os", ".", "makedirs", "(", "'models'", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'models/'", "+", "args", ".", "dataset", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start training...\"", ")", "\n", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.00001", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "train_sub_entity", "=", "'/train_entity_s_history_data.txt'", "\n", "train_sub_rel", "=", "'/train_rel_s_history_data.txt'", "\n", "train_sub_att", "=", "'/train_att_s_history_data.txt'", "\n", "train_sub_self_att", "=", "'/train_self_att_s_history_data.txt'", "\n", "\n", "train_ob_entity", "=", "'/train_entity_o_history_data.txt'", "\n", "train_ob_rel", "=", "'/train_rel_o_history_data.txt'", "\n", "train_ob_att", "=", "'/train_att_o_history_data.txt'", "\n", "train_ob_self_att", "=", "'/train_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "train_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_train", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "entity_s_history_train", "=", "entity_s_history_data_train", "\n", "rel_s_history_train", "=", "rel_s_history_data_train", "\n", "att_s_history_train", "=", "att_s_history_data_train", "\n", "self_att_s_history_train", "=", "self_att_s_history_data_train", "\n", "\n", "entity_o_history_train", "=", "entity_o_history_data_train", "\n", "rel_o_history_train", "=", "rel_o_history_data_train", "\n", "att_o_history_train", "=", "att_o_history_data_train", "\n", "self_att_o_history_train", "=", "self_att_o_history_data_train", "\n", "\n", "epoch", "=", "0", "\n", "\n", "if", "args", ".", "retrain", "!=", "0", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/checkpoint.pth'", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "FileNotFoundError", "as", "_", ":", "\n", "            ", "try", ":", "\n", "                ", "e", "=", "sorted", "(", "[", "\n", "int", "(", "file", "[", "6", ":", "-", "4", "]", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", "if", "file", "[", "-", "4", ":", "]", "==", "'.pth'", "\n", "]", ",", "\n", "reverse", "=", "True", ")", "[", "0", "]", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "e", ")", ",", "\n", "map_location", "=", "f\"cuda:{args.gpu}\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "model", ".", "to", "(", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", ")", "\n", "", "except", "Exception", "as", "_", ":", "\n", "                ", "print", "(", "'no model found'", ")", "\n", "print", "(", "'training from scratch'", ")", "\n", "\n", "", "", "", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "epoch", "==", "args", ".", "max_epochs", ":", "\n", "            ", "break", "\n", "", "epoch", "+=", "1", "\n", "loss_epoch", "=", "0", "\n", "loss_att_sub_epoch", "=", "0", "\n", "# loss_att_ob_epoch = 0", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "self_att_s_history_train", ",", "att_o_history_train", ",", "self_att_o_history_train", "=", "shuffle", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "att_s_history_train", ",", "\n", "self_att_s_history_train", ",", "att_o_history_train", ",", "\n", "self_att_o_history_train", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "att_o_hist", ",", "self_att_o_hist", "in", "utils", ".", "make_batch3", "(", "\n", "train_data", ",", "entity_s_history_train", ",", "rel_s_history_train", ",", "\n", "entity_o_history_train", ",", "rel_o_history_train", ",", "\n", "att_s_history_train", ",", "self_att_s_history_train", ",", "\n", "att_o_history_train", ",", "self_att_o_history_train", ",", "\n", "args", ".", "batch_size", ")", ":", "\n", "            ", "iteration", "+=", "1", "\n", "print", "(", "f'iteration {iteration}'", ",", "end", "=", "'\\r'", ")", "\n", "batch_data", "=", "torch", ".", "from_numpy", "(", "batch_data", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss", ",", "loss_att_sub", "=", "model", ".", "get_loss", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "\n", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "grad_norm", ")", "# clip gradients", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_epoch", "+=", "loss", ".", "item", "(", ")", "\n", "loss_att_sub_epoch", "+=", "loss_att_sub", ".", "item", "(", ")", "\n", "# loss_att_ob_epoch += loss_att_ob.item()", "\n", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch {:04d} | Loss {:.4f} | Loss_att_sub {:.4f} | time {:.4f} \"", ".", "\n", "format", "(", "epoch", ",", "loss_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "loss_att_sub_epoch", "/", "(", "len", "(", "train_data", ")", "/", "args", ".", "batch_size", ")", ",", "\n", "t3", "-", "t0", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'latest_time'", ":", "model", ".", "latest_time", ",", "\n", "}", ",", "model_dir", "+", "'/checkpoint.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.Aggregator.MeanAggregator.__init__": [[9, 14], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_att", "=", "num_att", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.Aggregator.MeanAggregator.forward": [[15, 81], ["utils.get_sorted_s_r_embed", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "mask_tensor.cuda.cuda.cuda", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "Aggregator.MeanAggregator.dropout", "Aggregator.MeanAggregator.dropout", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.LongTensor.extend", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "torch.Tensor().cuda().view", "s_len_non_zero.tolist", "len", "ent_embeds[].repeat", "rel_embeds[].repeat", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "W1", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "len", "len", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.tensor().cuda().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "forward", "(", "self", ",", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "\n", "# for i in range(len(s_hist)):", "\n", "#     assert (len(s_hist[i]) == len(self_att_s_hist[i]))", "\n", "# print('forward')", "\n", "        ", "s_len_non_zero", ",", "s_tem", ",", "r_tem", ",", "embeds_stack", ",", "embeds_static_stack", ",", "len_s", ",", "s_idx", "=", "get_sorted_s_r_embed", "(", "\n", "s_hist", ",", "rel_hist", ",", "att_s_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "\n", "W4", ",", "self", ".", "num_att", ")", "\n", "# print('forward1')", "\n", "\n", "# To get mean vector at each time", "\n", "curr", "=", "0", "\n", "rows", "=", "[", "]", "\n", "cols", "=", "[", "]", "\n", "for", "i", ",", "leng", "in", "enumerate", "(", "len_s", ")", ":", "\n", "            ", "rows", ".", "extend", "(", "[", "i", "]", "*", "leng", ")", "\n", "cols", ".", "extend", "(", "list", "(", "range", "(", "curr", ",", "curr", "+", "leng", ")", ")", ")", "\n", "curr", "+=", "leng", "\n", "", "rows", "=", "torch", ".", "LongTensor", "(", "rows", ")", "\n", "cols", "=", "torch", ".", "LongTensor", "(", "cols", ")", "\n", "idxes", "=", "torch", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "dim", "=", "0", ")", "\n", "\n", "mask_tensor", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "idxes", ",", "torch", ".", "ones", "(", "len", "(", "rows", ")", ")", ")", "\n", "mask_tensor", "=", "mask_tensor", ".", "cuda", "(", ")", "\n", "embeds_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_stack", ")", "\n", "embeds_mean", "=", "embeds_sum", "/", "torch", ".", "Tensor", "(", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_split", "=", "torch", ".", "split", "(", "embeds_mean", ",", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "embeds_static_sum", "=", "torch", ".", "sparse", ".", "mm", "(", "mask_tensor", ",", "embeds_static_stack", ")", "\n", "embeds_static_mean", "=", "embeds_static_sum", "/", "torch", ".", "Tensor", "(", "\n", "len_s", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "embeds_static_split", "=", "torch", ".", "split", "(", "embeds_static_mean", ",", "\n", "s_len_non_zero", ".", "tolist", "(", ")", ")", "\n", "\n", "s_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "att_embed_seq_tensor", "=", "torch", ".", "zeros", "(", "len", "(", "s_len_non_zero", ")", ",", "self", ".", "seq_len", ",", "\n", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds_split", ")", ")", ":", "\n", "\n", "            ", "embeds", "=", "embeds_split", "[", "i", "]", "\n", "embeds_static", "=", "embeds_static_split", "[", "i", "]", "\n", "\n", "self_e_embed", "=", "ent_embeds", "[", "s_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "self_r_embed", "=", "rel_embeds", "[", "r_tem", "[", "i", "]", "]", ".", "repeat", "(", "len", "(", "embeds", ")", ",", "1", ")", "\n", "\n", "self_att_embed", "=", "F", ".", "relu", "(", "\n", "W1", "(", "\n", "torch", ".", "FloatTensor", "(", "self_att_s_hist", "[", "s_idx", "[", "i", "]", "]", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", "\n", "\n", "att_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_att_embed", ",", "self_e_embed", ",", "embeds", "]", ",", "dim", "=", "1", ")", "\n", "\n", "s_embed_seq_tensor", "[", "i", ",", "torch", ".", "arange", "(", "len", "(", "embeds", ")", ")", ",", ":", "]", "=", "torch", ".", "cat", "(", "\n", "[", "self_e_embed", ",", "self_r_embed", ",", "embeds_static", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "s_embed_seq_tensor", "=", "self", ".", "dropout", "(", "s_embed_seq_tensor", ")", "\n", "att_embed_seq_tensor", "=", "self", ".", "dropout", "(", "att_embed_seq_tensor", ")", "\n", "\n", "s_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "s_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n", "att_packed_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "att_embed_seq_tensor", ",", "s_len_non_zero", ",", "batch_first", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.Aggregator.MeanAggregator.predict": [[82, 117], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "ent_embeds[].view", "rel_embeds[].view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "type", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "W3", "W4", "len", "len", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "ent_embeds[].view", "rel_embeds[].view", "ent_embeds[].view", "W1", "W1", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.type().cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.cuda().view", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.type().cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.cuda", "torch.tensor.type", "torch.tensor.type", "torch.tensor.type"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "return", "s_packed_input", ",", "att_packed_input", "\n", "\n", "", "def", "predict", "(", "self", ",", "s_history", ",", "rel_history", ",", "att_history", ",", "self_att_history", ",", "s", ",", "\n", "r", ",", "ent_embeds", ",", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ")", ":", "\n", "        ", "inp_s", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "inp_att", "=", "torch", ".", "zeros", "(", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "s_o", "in", "enumerate", "(", "s_history", ")", ":", "\n", "            ", "r_o", "=", "rel_history", "[", "i", "]", "\n", "a_o", "=", "att_history", "[", "i", "]", "\n", "if", "type", "(", "a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "a_o", "=", "torch", ".", "tensor", "(", "a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "self_a_o", "=", "self_att_history", "[", "i", "]", "\n", "if", "type", "(", "self_a_o", ")", "!=", "torch", ".", "Tensor", ":", "\n", "                ", "self_a_o", "=", "torch", ".", "tensor", "(", "self_a_o", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "e_s", "=", "ent_embeds", "[", "s_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_r", "=", "rel_embeds", "[", "r_o", "]", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "e_att", "=", "F", ".", "relu", "(", "\n", "W1", "(", "a_o", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "-", "1", ",", "self", ".", "h_dim", ")", "\n", "# e_s_att = F.relu(W2(torch.cat([e_att, e_s], dim=-1)))", "\n", "e", "=", "F", ".", "relu", "(", "W3", "(", "torch", ".", "cat", "(", "[", "e_att", ",", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "e_static", "=", "F", ".", "relu", "(", "W4", "(", "torch", ".", "cat", "(", "[", "e_s", ",", "e_r", "]", ",", "dim", "=", "-", "1", ")", ")", ")", "\n", "tem", "=", "torch", ".", "mean", "(", "e", ",", "dim", "=", "0", ")", "\n", "tem_static", "=", "torch", ".", "mean", "(", "e_static", ",", "dim", "=", "0", ")", "\n", "# print(self_a_o)", "\n", "e_self_att", "=", "F", ".", "relu", "(", "W1", "(", "self_a_o", ".", "cuda", "(", ")", ".", "view", "(", "\n", "1", ",", "self", ".", "num_att", ")", ")", ")", ".", "view", "(", "self", ".", "h_dim", ")", "\n", "\n", "inp_s", "[", "i", "]", "=", "torch", ".", "cat", "(", "[", "\n", "ent_embeds", "[", "s", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "rel_embeds", "[", "r", "]", ".", "view", "(", "self", ".", "h_dim", ")", ",", "\n", "tem_static", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.test.test": [[18, 189], ["utils.get_total_number", "utils.load_hexaruples", "utils.load_hexaruples", "model.DArtNet", "print", "torch.load", "model.DArtNet.load_state_dict", "model.DArtNet.init_history", "print", "torch.from_numpy", "torch.from_numpy", "model.DArtNet.eval", "numpy.array", "numpy.array", "ranks.append", "numpy.mean", "numpy.mean", "print", "print", "print", "result", "torch.cuda.is_available", "torch.cuda.set_device", "torch.cuda.manual_seed_all", "model.DArtNet.cuda", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "torch.no_grad", "numpy.concatenate", "numpy.mean", "hits.append", "print", "len", "range", "len", "min", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.predict", "test_data[].clone", "entity_s_history_data_test[].copy", "entity_o_history_data_test[].copy", "rel_s_history_data_test[].copy", "rel_o_history_data_test[].copy", "att_s_history_data_test[].copy", "att_o_history_data_test[].copy", "test..copy", "test..copy", "model.DArtNet.evaluate_filter", "numpy.concatenate", "len", "len", "batch_data.cuda.cuda", "model.predict.item", "batch_data.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["def", "test", "(", "args", ")", ":", "\n", "# load data", "\n", "    ", "num_nodes", ",", "num_rels", ",", "num_att", "=", "utils", ".", "get_total_number", "(", "\n", "args", ".", "dataset_path", ",", "'stat.txt'", ")", "\n", "test_data", ",", "test_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'test.txt'", ")", "\n", "total_data", ",", "total_times", "=", "utils", ".", "load_hexaruples", "(", "args", ".", "dataset_path", ",", "\n", "'train.txt'", ",", "'valid.txt'", ",", "\n", "'test.txt'", ")", "\n", "\n", "model_dir", "=", "'models/'", "+", "args", ".", "dataset", "+", "'/{}-{}-{}-{}'", ".", "format", "(", "\n", "args", ".", "dropout", ",", "args", ".", "n_hidden", ",", "args", ".", "gamma", ",", "args", ".", "num_k", ")", "\n", "model_state_file", "=", "model_dir", "+", "'/epoch-{}.pth'", ".", "format", "(", "args", ".", "epoch", ")", "\n", "\n", "# check cuda", "\n", "use_cuda", "=", "args", ".", "gpu", ">=", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "999", ")", "\n", "\n", "", "model", "=", "DArtNet", "(", "num_nodes", ",", "\n", "args", ".", "n_hidden", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "model", "=", "args", ".", "model", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "num_k", "=", "args", ".", "num_k", ",", "\n", "gamma", "=", "args", ".", "gamma", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "test_sub_entity", "=", "'/test_entity_s_history_data.txt'", "\n", "test_sub_rel", "=", "'/test_rel_s_history_data.txt'", "\n", "test_sub_att", "=", "'/test_att_s_history_data.txt'", "\n", "test_sub_self_att", "=", "'/test_self_att_s_history_data.txt'", "\n", "\n", "test_ob_entity", "=", "'/test_entity_o_history_data.txt'", "\n", "test_ob_rel", "=", "'/test_rel_o_history_data.txt'", "\n", "test_ob_att", "=", "'/test_att_o_history_data.txt'", "\n", "test_ob_self_att", "=", "'/test_self_att_o_history_data.txt'", "\n", "\n", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_sub_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_s_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_entity", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "entity_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_rel", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "rel_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "dataset_path", "+", "test_ob_self_att", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "self_att_o_history_data_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'\\nstart testing model file : {model_state_file}'", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_state_file", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "model", ".", "init_history", "(", ")", "\n", "\n", "model", ".", "latest_time", "=", "checkpoint", "[", "'latest_time'", "]", "\n", "\n", "print", "(", "\"Using epoch: {}\"", ".", "format", "(", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "total_data", "=", "torch", ".", "from_numpy", "(", "total_data", ")", "\n", "test_data", "=", "torch", ".", "from_numpy", "(", "test_data", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "total_att_sub_loss", "=", "0", "\n", "total_ranks", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "total_ranks_filter", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "ranks", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "latest_time", "=", "test_times", "[", "0", "]", "\n", "j", "=", "0", "\n", "while", "j", "<", "len", "(", "test_data", ")", ":", "\n", "            ", "k", "=", "j", "\n", "while", "k", "<", "len", "(", "test_data", ")", ":", "\n", "                ", "if", "test_data", "[", "k", "]", "[", "-", "1", "]", "==", "test_data", "[", "j", "]", "[", "-", "1", "]", ":", "\n", "                    ", "k", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "", "", "start", "=", "j", "\n", "while", "start", "<", "k", ":", "\n", "                ", "end", "=", "min", "(", "k", ",", "start", "+", "args", ".", "batch_size", ")", "\n", "\n", "batch_data", "=", "test_data", "[", "start", ":", "end", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "start", ":", "end", "]", ".", "copy", "(", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "loss_sub", "=", "model", ".", "predict", "(", "batch_data", ",", "s_hist", ",", "rel_s_hist", ",", "\n", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", "\n", "\n", "total_att_sub_loss", "+=", "(", "loss_sub", ".", "item", "(", ")", "*", "(", "end", "-", "start", "+", "1", ")", ")", "\n", "\n", "start", "+=", "args", ".", "batch_size", "\n", "\n", "", "for", "i", "in", "range", "(", "j", ",", "k", ")", ":", "\n", "                ", "batch_data", "=", "test_data", "[", "i", "]", ".", "clone", "(", ")", "\n", "s_hist", "=", "entity_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "o_hist", "=", "entity_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_s_hist", "=", "rel_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "rel_o_hist", "=", "rel_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_s_hist", "=", "att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "att_o_hist", "=", "att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_s_hist", "=", "self_att_s_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "self_att_o_hist", "=", "self_att_o_history_data_test", "[", "i", "]", ".", "copy", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                    ", "batch_data", "=", "batch_data", ".", "cuda", "(", ")", "\n", "\n", "", "ranks_pred", "=", "model", ".", "evaluate_filter", "(", "batch_data", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "total_data", ")", "\n", "\n", "total_ranks_filter", "=", "np", ".", "concatenate", "(", "\n", "(", "total_ranks_filter", ",", "ranks_pred", ")", ")", "\n", "\n", "", "j", "=", "k", "\n", "\n", "", "", "ranks", ".", "append", "(", "total_ranks_filter", ")", "\n", "\n", "for", "rank", "in", "ranks", ":", "\n", "        ", "total_ranks", "=", "np", ".", "concatenate", "(", "(", "total_ranks", ",", "rank", ")", ")", "\n", "", "mrr", "=", "np", ".", "mean", "(", "1.0", "/", "total_ranks", ")", "\n", "mr", "=", "np", ".", "mean", "(", "total_ranks", ")", "\n", "hits", "=", "[", "]", "\n", "\n", "for", "hit", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "        ", "avg_count", "=", "np", ".", "mean", "(", "(", "total_ranks", "<=", "hit", ")", ")", "\n", "hits", ".", "append", "(", "avg_count", ")", "\n", "\n", "print", "(", "\"Hits (filtered) @ {}: {:.6f}\"", ".", "format", "(", "hit", ",", "avg_count", ")", ")", "\n", "", "print", "(", "\"MRR (filtered): {:.6f}\"", ".", "format", "(", "mrr", ")", ")", "\n", "print", "(", "\"MR (filtered): {:.6f}\"", ".", "format", "(", "mr", ")", ")", "\n", "print", "(", "\"test att sub Loss: {:.6f}\"", ".", "format", "(", "total_att_sub_loss", "/", "\n", "(", "len", "(", "test_data", ")", ")", ")", ")", "\n", "\n", "result_epoch", "=", "result", "(", "epoch", "=", "args", ".", "epoch", ",", "\n", "MRR", "=", "100", "*", "mrr", ",", "\n", "sub_att_loss", "=", "total_att_sub_loss", "/", "len", "(", "test_data", ")", ",", "\n", "MR", "=", "mr", ",", "\n", "Hits1", "=", "100", "*", "hits", "[", "0", "]", ",", "\n", "Hits3", "=", "100", "*", "hits", "[", "1", "]", ",", "\n", "Hits10", "=", "100", "*", "hits", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__": [[11, 82], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "torch.GRU", "Aggregator.MeanAggregator", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_nodes", ",", "\n", "h_dim", ",", "\n", "num_rels", ",", "\n", "num_att", ",", "\n", "dropout", "=", "0", ",", "\n", "model", "=", "0", ",", "\n", "seq_len", "=", "10", ",", "\n", "num_k", "=", "10", ",", "\n", "gamma", "=", "1", ")", ":", "\n", "        ", "super", "(", "DArtNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "num_rels", "=", "num_rels", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_k", "=", "num_k", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_att", "=", "num_att", "\n", "self", ".", "rel_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_rels", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "rel_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "ent_embeds", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "h_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "ent_embeds", ",", "\n", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "sub_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "# self.ob_encoder = self.sub_encoder", "\n", "\n", "self", ".", "att_encoder", "=", "nn", ".", "GRU", "(", "3", "*", "h_dim", ",", "h_dim", ",", "batch_first", "=", "True", ")", "\n", "\n", "self", ".", "aggregator_s", "=", "MeanAggregator", "(", "h_dim", ",", "num_att", ",", "dropout", ",", "seq_len", ")", "\n", "# self.aggregator_o = self.aggregator_s", "\n", "\n", "self", ".", "f1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "num_att", ")", "\n", "self", ".", "f2", "=", "nn", ".", "Linear", "(", "3", "*", "h_dim", ",", "num_nodes", ")", "\n", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "self", ".", "num_att", ",", "self", ".", "h_dim", ")", "\n", "# self.W2 = nn.Linear(2 * self.h_dim, self.h_dim)", "\n", "self", ".", "W3", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "self", ".", "W4", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "h_dim", ",", "self", ".", "h_dim", ")", "\n", "\n", "# For recording history in inference", "\n", "\n", "self", ".", "entity_s_his_test", "=", "None", "\n", "self", ".", "att_s_his_test", "=", "None", "\n", "self", ".", "rel_s_his_test", "=", "None", "\n", "self", ".", "self_att_s_his_test", "=", "None", "\n", "\n", "# self.entity_o_his_test = None", "\n", "# self.att_o_his_test = None", "\n", "# self.rel_o_his_test = None", "\n", "# self.self_att_o_his_test = None", "\n", "\n", "self", ".", "entity_s_his_cache", "=", "None", "\n", "self", ".", "att_s_his_cache", "=", "None", "\n", "self", ".", "rel_s_his_cache", "=", "None", "\n", "self", ".", "self_att_s_his_cache", "=", "None", "\n", "\n", "# self.entity_o_his_cache = None", "\n", "# self.att_o_his_cache = None", "\n", "# self.rel_o_his_cache = None", "\n", "# self.self_att_o_his_cache = None", "\n", "\n", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "\n", "self", ".", "latest_time", "=", "0", "\n", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward": [[87, 179], ["triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "triplets[].type", "len", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "torch.LongTensor().cuda.sort", "model.DArtNet.aggregator_s", "model.DArtNet.att_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f1().squeeze", "model.DArtNet.att_criterion", "model.DArtNet.sub_encoder", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.f2", "model.DArtNet.criterion", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "model.DArtNet.dropout", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1", "list", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.DArtNet.dropout", "map", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "def", "forward", "(", "self", ",", "\n", "triplets", ",", "\n", "s_hist", ",", "\n", "rel_s_hist", ",", "\n", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "\n", "o_hist", ",", "\n", "rel_o_hist", ",", "\n", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "\n", "predict_both", "=", "True", ")", ":", "\n", "# print('here')", "\n", "        ", "s", "=", "triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplets", "[", ":", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplets", "[", ":", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "a_s1", "=", "triplets", "[", ":", ",", "3", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o1", "=", "triplets", "[", ":", ",", "4", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s2", "=", "triplets", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_o2", "=", "triplets", "[", ":", ",", "6", "]", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "a_s", "=", "torch", ".", "cat", "(", "[", "a_s1", ",", "a_s2", "]", ",", "dim", "=", "1", ")", "\n", "a_o", "=", "torch", ".", "cat", "(", "[", "a_o1", ",", "a_o2", "]", ",", "dim", "=", "1", ")", "\n", "batch_size", "=", "len", "(", "s", ")", "\n", "\n", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "# o_hist_len = torch.LongTensor(list(map(len, o_hist))).cuda()", "\n", "# o_len, o_idx = o_hist_len.sort(0, descending=True)", "\n", "# print('here1')", "\n", "s_packed_input", ",", "att_s_packed_input", "=", "self", ".", "aggregator_s", "(", "\n", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "s", ",", "r", ",", "\n", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "# o_packed_input, att_o_packed_input = self.aggregator_o(", "\n", "#     o_hist, rel_o_hist, att_o_hist, self_att_o_hist, o, r,", "\n", "#     self.ent_embeds, self.rel_embeds[self.num_rels:], self.W1, self.W2,", "\n", "#     self.W3, self.W4)", "\n", "\n", "if", "predict_both", ":", "\n", "            ", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "s_packed_input", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "s_h", "=", "torch", ".", "cat", "(", "\n", "(", "s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "ob_pred", "=", "self", ".", "f2", "(", "\n", "self", ".", "dropout", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "s_h", ",", "\n", "self", ".", "rel_embeds", "[", "r", "[", "s_idx", "]", "]", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", "\n", "loss_sub", "=", "self", ".", "criterion", "(", "ob_pred", ",", "o", "[", "s_idx", "]", ")", "\n", "", "else", ":", "\n", "            ", "ob_pred", "=", "None", "\n", "loss_sub", "=", "0", "\n", "\n", "# _, o_h = self.ob_encoder(o_packed_input)", "\n", "\n", "", "_", ",", "att_s_h", "=", "self", ".", "att_encoder", "(", "att_s_packed_input", ")", "\n", "# _, att_o_h = self.att_encoder(att_o_packed_input)", "\n", "# print('here2')", "\n", "\n", "# o_h = o_h.squeeze()", "\n", "att_s_h", "=", "att_s_h", ".", "squeeze", "(", ")", "\n", "# att_o_h = att_o_h.squeeze()", "\n", "\n", "# o_h = torch.cat(", "\n", "#     (o_h, torch.zeros(len(o) - len(o_h), self.h_dim).cuda()), dim=0)", "\n", "att_s_h", "=", "torch", ".", "cat", "(", "\n", "(", "att_s_h", ",", "torch", ".", "zeros", "(", "len", "(", "s", ")", "-", "len", "(", "att_s_h", ")", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# att_o_h = torch.cat(", "\n", "#     (att_o_h, torch.zeros(len(o) - len(att_o_h), self.h_dim).cuda()),", "\n", "#     dim=0)", "\n", "# print('here3')", "\n", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "[", "s_idx", "]", "]", ",", "att_s_h", ")", ",", "\n", "dim", "=", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# sub_pred = self.f2(", "\n", "#     self.dropout(", "\n", "#         torch.cat((self.ent_embeds[o[o_idx]], o_h,", "\n", "#                    self.rel_embeds[self.num_rels:][r[o_idx]]),", "\n", "#                   dim=1)))", "\n", "\n", "# ob_att_pred = self.f1(", "\n", "#     self.dropout(torch.cat((self.ent_embeds[o[o_idx]], att_o_h),", "\n", "#                            dim=1))).squeeze()", "\n", "\n", "# loss_ob = self.criterion(sub_pred, s[o_idx])", "\n", "\n", "loss_att_sub", "=", "self", ".", "att_criterion", "(", "sub_att_pred", ",", "a_s", "[", "s_idx", "]", ")", "\n", "# loss_att_ob = self.att_criterion(ob_att_pred, a_o[o_idx])", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.init_history": [[180, 195], ["range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["\n", "loss", "=", "loss_sub", "+", "self", ".", "gamma", "*", "loss_att_sub", "\n", "\n", "return", "loss", ",", "loss_att_sub", ",", "ob_pred", ",", "sub_att_pred", ",", "s_idx", "\n", "\n", "", "def", "init_history", "(", "self", ")", ":", "\n", "        ", "self", ".", "entity_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "rel_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "self", ".", "self_att_s_his_test", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_nodes", ")", "]", "\n", "\n", "# self.entity_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_test = [[] for _ in range(self.num_nodes)]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.get_loss": [[201, 210], ["model.DArtNet.forward"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward"], ["# self.entity_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.rel_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "# self.self_att_o_his_cache = [[] for _ in range(self.num_nodes)]", "\n", "\n", "", "def", "get_loss", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "        ", "loss", ",", "loss_att_sub", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "triplets", ",", "s_hist", ",", "\n", "rel_s_hist", ",", "att_s_hist", ",", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict": [[214, 259], ["model.DArtNet.forward", "range", "range", "len", "triplets[].type().item", "triplets[].type().item", "triplets[].type().item", "sub_att_pred[].cpu().item", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.f1().squeeze", "triplets[].type", "triplets[].type", "triplets[].type", "sub_att_pred[].cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.DArtNet.f1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.forward", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["return", "loss", ",", "loss_att_sub", "\n", "\n", "", "\"\"\"\n    Prediction function in testing\n    \"\"\"", "\n", "def", "predict", "(", "self", ",", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "\n", "        ", "self", ".", "att_s_dict", "=", "{", "}", "\n", "# self.att_o_dict = {}", "\n", "self", ".", "att_residual_dict", "=", "{", "}", "\n", "\n", "_", ",", "loss_att_sub", ",", "_", ",", "sub_att_pred", ",", "s_idx", "=", "self", ".", "forward", "(", "\n", "triplets", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "self_att_s_hist", ",", "o_hist", ",", "\n", "rel_o_hist", ",", "att_o_hist", ",", "self_att_o_hist", ",", "False", ")", "\n", "# print(triplets[:, 0])", "\n", "# print(s_hist)", "\n", "# print(sub_att_pred)", "\n", "indices", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "triplets", ")", ")", ":", "\n", "            ", "s", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "0", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "o", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "2", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "t", "=", "triplets", "[", "s_idx", "[", "i", "]", ",", "-", "1", "]", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "item", "(", ")", "\n", "s_att", "=", "sub_att_pred", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "s", "not", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self", ".", "att_s_dict", "[", "s", "]", "=", "s_att", "\n", "indices", "[", "s", "]", "=", "i", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "            ", "if", "i", "not", "in", "self", ".", "att_s_dict", ":", "# and i not in self.att_o_dict:", "\n", "                ", "s_h", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "sub_att_pred", "=", "self", ".", "f1", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "[", "i", "]", "]", ",", "s_h", ")", ",", "dim", "=", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "att_residual_dict", "[", "i", "]", "=", "sub_att_pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "return", "loss_att_sub", "\n", "\n", "", "def", "predict_single", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ")", ":", "\n", "# print(triplet)", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single": [[260, 395], ["triplet[].type", "triplet[].type", "triplet[].type", "triplet[].type", "triplet[].type", "triplet[].cpu", "model.DArtNet.f2", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "model.DArtNet.update_cache", "range", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.DArtNet.aggregator_s.predict", "model.DArtNet.sub_encoder", "s_h.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "triplet[].type.cpu", "triplet[].type.cpu", "o_candidate.cpu", "len", "s_hist.copy", "rel_s_hist.copy", "att_s_hist.copy", "inp_s.view", "len", "model.DArtNet.entity_s_his_test[].append", "model.DArtNet.att_s_his_test[].append", "model.DArtNet.self_att_s_his_test[].append", "model.DArtNet.rel_s_his_test[].append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "model.DArtNet.entity_s_his_test[].pop", "model.DArtNet.att_s_his_test[].pop", "model.DArtNet.self_att_s_his_test[].pop", "model.DArtNet.rel_s_his_test[].pop", "model.DArtNet.entity_s_his_cache[].clone", "model.DArtNet.att_s_his_cache[].clone", "model.DArtNet.rel_s_his_cache[].clone"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict"], ["\n", "t", "=", "triplet", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "# print('here')", "\n", "if", "self", ".", "latest_time", "!=", "t", ":", "\n", "\n", "            ", "for", "ee", "in", "range", "(", "self", ".", "num_nodes", ")", ":", "\n", "                ", "if", "len", "(", "self", ".", "entity_s_his_cache", "[", "ee", "]", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "ee", "]", ")", ">=", "self", ".", "seq_len", ":", "\n", "                        ", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "pop", "(", "0", ")", "\n", "\n", "", "self", ".", "entity_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "self", ".", "self_att_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", ")", "\n", "self", ".", "rel_s_his_test", "[", "ee", "]", ".", "append", "(", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", ".", "clone", "(", ")", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "self_att_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "self", ".", "rel_s_his_cache", "[", "ee", "]", "=", "[", "]", "\n", "\n", "", "", "self", ".", "latest_time", "=", "t", "\n", "\n", "", "if", "len", "(", "s_hist", ")", "==", "0", ":", "\n", "            ", "s_h", "=", "torch", ".", "zeros", "(", "self", ".", "h_dim", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "entity_s_his_test", "[", "s", "]", ")", "==", "0", ":", "\n", "                ", "self", ".", "entity_s_his_test", "[", "s", "]", "=", "s_hist", ".", "copy", "(", ")", "\n", "self", ".", "rel_s_his_test", "[", "s", "]", "=", "rel_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "att_s_his_test", "[", "s", "]", "=", "att_s_hist", ".", "copy", "(", ")", "\n", "self", ".", "self_att_s_his_test", "[", "s", "]", "=", "self_att_s_hist", "\n", "\n", "", "s_history", "=", "self", ".", "entity_s_his_test", "[", "s", "]", "\n", "rel_s_history", "=", "self", ".", "rel_s_his_test", "[", "s", "]", "\n", "att_s_history", "=", "self", ".", "att_s_his_test", "[", "s", "]", "\n", "self_att_s_history", "=", "self", ".", "self_att_s_his_test", "[", "s", "]", "\n", "\n", "inp_s", ",", "_", "=", "self", ".", "aggregator_s", ".", "predict", "(", "\n", "s_history", ",", "rel_s_history", ",", "att_s_history", ",", "self_att_s_history", ",", "s", ",", "\n", "r", ",", "self", ".", "ent_embeds", ",", "self", ".", "rel_embeds", ",", "self", ".", "W1", ",", "self", ".", "W3", ",", "self", ".", "W4", ")", "\n", "\n", "_", ",", "s_h", "=", "self", ".", "sub_encoder", "(", "\n", "inp_s", ".", "view", "(", "1", ",", "len", "(", "s_history", ")", ",", "3", "*", "self", ".", "h_dim", ")", ")", "\n", "s_h", "=", "s_h", ".", "squeeze", "(", ")", "\n", "\n", "", "ob_pred", "=", "self", ".", "f2", "(", "\n", "torch", ".", "cat", "(", "(", "self", ".", "ent_embeds", "[", "s", "]", ",", "s_h", ",", "self", ".", "rel_embeds", "[", "r", "]", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n", "_", ",", "o_candidate", "=", "torch", ".", "topk", "(", "ob_pred", ",", "self", ".", "num_k", ")", "\n", "\n", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "self", ".", "rel_s_his_cache", "[", "\n", "s", "]", ",", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "self", ".", "self_att_s_his_cache", "[", "\n", "s", "]", "=", "self", ".", "update_cache", "(", "self", ".", "entity_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "rel_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "att_s_his_cache", "[", "s", "]", ",", "\n", "self", ".", "self_att_s_his_cache", "[", "s", "]", ",", "s", ".", "cpu", "(", ")", ",", "\n", "r", ".", "cpu", "(", ")", ",", "o_candidate", ".", "cpu", "(", ")", ")", "\n", "\n", "return", "ob_pred", "\n", "\n", "", "def", "evaluate_filter", "(", "self", ",", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "att_o_hist", ",", "\n", "self_att_o_hist", ",", "all_triplets", ")", ":", "\n", "        ", "s", "=", "triplet", "[", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "r", "=", "triplet", "[", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "o", "=", "triplet", "[", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "# print(s_hist)", "\n", "# print(rel_s_hist)", "\n", "ob_pred", "=", "self", ".", "predict_single", "(", "triplet", ",", "s_hist", ",", "rel_s_hist", ",", "att_s_hist", ",", "\n", "self_att_s_hist", ",", "o_hist", ",", "rel_o_hist", ",", "\n", "att_o_hist", ",", "self_att_o_hist", ")", "\n", "o_label", "=", "o", "\n", "s_label", "=", "s", "\n", "# sub_pred = torch.sigmoid(sub_pred)", "\n", "ob_pred", "=", "torch", ".", "sigmoid", "(", "ob_pred", ")", "\n", "\n", "ground", "=", "ob_pred", "[", "o", "]", ".", "clone", "(", ")", "\n", "\n", "s_id", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", ":", ",", "0", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "s", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "torch", ".", "nonzero", "(", "\n", "all_triplets", "[", "s_id", ",", "1", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "==", "r", ")", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "s_id", "[", "idx", "]", "\n", "idx", "=", "all_triplets", "[", "idx", ",", "2", "]", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "ob_pred", "[", "idx", "]", "=", "0", "\n", "ob_pred", "[", "o_label", "]", "=", "ground", "\n", "\n", "ob_pred_comp1", "=", "(", "ob_pred", ">", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ob_pred_comp2", "=", "(", "ob_pred", "==", "ground", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rank_ob", "=", "np", ".", "sum", "(", "ob_pred_comp1", ")", "+", "(", "\n", "(", "np", ".", "sum", "(", "ob_pred_comp2", ")", "-", "1.0", ")", "/", "2", ")", "+", "1", "\n", "\n", "return", "np", ".", "array", "(", "[", "rank_ob", "]", ")", "\n", "\n", "", "def", "update_cache", "(", "self", ",", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "\n", "self_att_his_cache", ",", "s", ",", "r", ",", "o_candidate", ")", ":", "\n", "        ", "if", "len", "(", "s_his_cache", ")", "==", "0", ":", "\n", "            ", "s_his_cache", "=", "o_candidate", ".", "view", "(", "-", "1", ")", "\n", "r_his_cache", "=", "r", ".", "repeat", "(", "len", "(", "o_candidate", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "att_his_cache", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "\n", "for", "key", "in", "s_his_cache", ":", "\n", "                ", "k", "=", "key", ".", "item", "(", ")", "\n", "if", "k", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_s_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "#append(self.att_s_dict[k])", "\n", "# elif k in self.att_o_dict:", "\n", "#     att_his_cache.append(self.att_o_dict[k])", "\n", "", "else", ":", "\n", "                    ", "att_his_cache", "=", "torch", ".", "cat", "(", "[", "\n", "att_his_cache", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "self", ".", "att_residual_dict", "[", "k", "]", "]", ")", "\n", "]", ",", "\n", "dim", "=", "0", ")", "\n", "# att_his_cache.append(self.att_residual_dict[k])", "\n", "\n", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "# if type(att_his_cache) != torch.Tensor:", "\n", "#     att_his_cache = torch.FloatTensor(att_his_cache)", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.evaluate_filter": [[396, 444], ["triplet[].type", "triplet[].type", "triplet[].type", "model.DArtNet.predict_single", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ob_pred[].clone", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "all_triplets[].type", "numpy.array", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "numpy.sum", "all_triplets[].type", "all_triplets[].type", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.predict_single"], ["", "", "else", ":", "\n", "            ", "ent_list", "=", "s_his_cache", "[", "torch", ".", "nonzero", "(", "r_his_cache", "==", "r", ")", ".", "view", "(", "-", "1", ")", "]", "\n", "tem", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "o_candidate", ")", ")", ":", "\n", "                ", "if", "o_candidate", "[", "i", "]", "not", "in", "ent_list", ":", "\n", "                    ", "tem", ".", "append", "(", "i", ")", "\n", "\n", "", "", "if", "len", "(", "tem", ")", "!=", "0", ":", "\n", "                ", "forward", "=", "o_candidate", "[", "torch", ".", "LongTensor", "(", "tem", ")", "]", ".", "view", "(", "-", "1", ")", "\n", "forward2", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", ",", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "forward3", "=", "r", ".", "repeat", "(", "len", "(", "tem", ")", "*", "self", ".", "num_att", ",", "\n", "1", ")", ".", "view", "(", "-", "1", ",", "self", ".", "num_att", ")", "\n", "\n", "s_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "s_his_cache", ")", ",", "forward", ")", ",", "dim", "=", "0", ")", "\n", "r_his_cache", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "LongTensor", "(", "r_his_cache", ")", ",", "forward2", ")", ",", "dim", "=", "0", ")", "\n", "att_his_cache", "=", "torch", ".", "cat", "(", "(", "torch", ".", "FloatTensor", "(", "att_his_cache", ")", ",", "\n", "forward3", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# self_att_his_cache = torch.cat((self_att_his_cache, forward2),", "\n", "#                                dim=0)", "\n", "# print('---------------no')", "\n", "for", "i", "in", "range", "(", "len", "(", "s_his_cache", ")", ")", ":", "\n", "                    ", "if", "s_his_cache", "[", "i", "]", "in", "ent_list", ":", "\n", "# print('-------------------yes')", "\n", "                        ", "if", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_s_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "# elif s_his_cache[i].item() in self.att_o_dict:", "\n", "#     att_his_cache[i] = self.att_o_dict[", "\n", "#         s_his_cache[i].item()]", "\n", "", "else", ":", "\n", "                            ", "att_his_cache", "[", "i", "]", "=", "self", ".", "att_residual_dict", "[", "\n", "s_his_cache", "[", "i", "]", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "if", "s", ".", "item", "(", ")", "in", "self", ".", "att_s_dict", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_s_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "# elif s.item() in self.att_o_dict:", "\n", "#     self_att_his_cache = self.att_o_dict[s.item()]", "\n", "", "else", ":", "\n", "                    ", "self_att_his_cache", "=", "self", ".", "att_residual_dict", "[", "s", ".", "item", "(", ")", "]", "\n", "\n", "", "", "", "return", "s_his_cache", ",", "r_his_cache", ",", "att_his_cache", ",", "self_att_his_cache", "\n", "", "", ""]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.model.DArtNet.update_cache": [[445, 511], ["len", "o_candidate.view", "r.repeat().view", "range", "key.item", "s.item", "type", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "len", "o_candidate[].view", "r.repeat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "r.repeat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "torch.nonzero().view", "tem.append", "len", "s.item", "len", "s.item", "s.item", "r.repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "r.repeat().view.type", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "len", "s_his_cache[].item", "s.item", "s.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "s_his_cache[].item", "s_his_cache[].item"], "methods", ["None"], []], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_total_number": [[7, 12], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", ",", "int", "(", "line_split", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.load_hexaruples": [[14, 60], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["", "", "", "def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "att_tail2", ",", "\n", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "att_head2", "=", "float", "(", "line_split", "[", "5", "]", ")", "\n", "att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head1", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail1", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.load_quadruples": [[62, 100], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "open", "open", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add", "os.path.join", "line.split", "int", "int", "int", "int", "quadrupleList.append", "set.add"], "function", ["None"], ["att_tail2", "=", "float", "(", "line_split", "[", "6", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "\n", "head", ",", "rel", ",", "tail", ",", "att_head1", ",", "att_tail1", ",", "att_head2", ",", "\n", "att_tail2", ",", "time", "\n", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n", "", "def", "load_quadruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ",", "fileName3", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "quadrupleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "if", "fileName3", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName3", ")", ",", "'r'", ")", "as", "fr", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch": [[102, 107], ["range", "len"], "function", ["None"], ["                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "7", "]", ")", "\n", "quadrupleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "time", "]", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch2": [[109, 114], ["range", "len"], "function", ["None"], ["", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "quadrupleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.make_batch3": [[116, 128], ["range", "len"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "make_batch2", "(", "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "n", ")", ":", "\n", "# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "n", "]", ",", "c", "[", "i", ":", "i", "+", "n", "]", ",", "d", "[", "i", ":", "i", "+", "n", "]", ",", "e", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_data": [[130, 155], ["enumerate", "enumerate", "numpy.unique", "len", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.cat.cpu().numpy", "numpy.concatenate", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().view", "torch.LongTensor().repeat", "torch.LongTensor().repeat", "len", "s_his.cpu", "torch.cat.cpu", "torch.cat.cpu().numpy", "len", "torch.cat.cpu", "torch.cat.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.cat.cpu", "o_his[].cpu", "o_his[].cpu", "torch.cat.cpu"], "function", ["None"], ["# For item i in a range that is a length of l,", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "n", ")", ":", "\n", "# Create an index range for l of n items:", "\n", "        ", "yield", "a", "[", "i", ":", "i", "+", "n", "]", ",", "b", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "c", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "d", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "e", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "f", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "g", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "h", "[", "i", ":", "i", "+", "\n", "n", "]", ",", "w", "[", "i", ":", "i", "+", "n", "]", "\n", "\n", "\n", "", "", "def", "get_data", "(", "s_hist", ",", "o_hist", ")", ":", "\n", "    ", "data", "=", "None", "\n", "for", "i", ",", "s_his", "in", "enumerate", "(", "s_hist", ")", ":", "\n", "        ", "if", "len", "(", "s_his", ")", "!=", "0", ":", "\n", "# print(s_his)", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "\n", "len", "(", "s_his", ")", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "s_his", ".", "cpu", "(", ")", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "data", "=", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "concatenate", "(", "(", "data", ",", "tem", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda": [[157, 162], ["torch.device", "torch.device", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["        ", "if", "len", "(", "o_his", ")", "!=", "0", ":", "\n", "            ", "tem", "=", "torch", ".", "cat", "(", "(", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "o_his", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "1", ")", ",", "torch", ".", "LongTensor", "(", "[", "i", "]", ")", ".", "repeat", "(", "len", "(", "o_his", ")", ",", "1", ")", ")", ",", "\n", "dim", "=", "1", ")", "\n", "if", "data", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.get_sorted_s_r_embed": [[169, 215], ["torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda.sort", "len", "range", "torch.relu", "torch.relu", "torch.relu", "torch.nonzero", "torch.nonzero", "s_hist_sorted.append", "rel_hist_sorted.append", "att_hist_sorted.append", "len", "range", "W1", "W3", "W4", "torch.LongTensor", "torch.LongTensor", "len", "len_s.append", "range", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "len", "len", "flat_s.append", "flat_rel.append", "flat_att.append", "map", "idx.item", "idx.item", "idx.item", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda", "home.repos.pwc.inspect_result.INK-USC_DArtNet.main_model.utils.cuda"], ["\n", "", "def", "cuda", "(", "tensor", ")", ":", "\n", "    ", "if", "tensor", ".", "device", "==", "torch", ".", "device", "(", "'cpu'", ")", ":", "\n", "        ", "return", "tensor", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", "\n", "\n", "\n", "", "", "'''\nGet sorted s and r to make batch for RNN (sorted by length)\n'''", "\n", "\n", "\n", "def", "get_sorted_s_r_embed", "(", "s_hist", ",", "rel_hist", ",", "att_hist", ",", "s", ",", "r", ",", "ent_embeds", ",", "\n", "rel_embeds", ",", "W1", ",", "W3", ",", "W4", ",", "num_att", ")", ":", "\n", "    ", "s_hist_len", "=", "torch", ".", "LongTensor", "(", "list", "(", "map", "(", "len", ",", "s_hist", ")", ")", ")", ".", "cuda", "(", ")", "\n", "s_len", ",", "s_idx", "=", "s_hist_len", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num_non_zero", "=", "len", "(", "torch", ".", "nonzero", "(", "s_len", ")", ")", "\n", "s_len_non_zero", "=", "s_len", "[", ":", "num_non_zero", "]", "\n", "\n", "s_hist_sorted", "=", "[", "]", "\n", "rel_hist_sorted", "=", "[", "]", "\n", "att_hist_sorted", "=", "[", "]", "\n", "for", "idx", "in", "s_idx", ":", "\n", "        ", "s_hist_sorted", ".", "append", "(", "s_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "rel_hist_sorted", ".", "append", "(", "rel_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "att_hist_sorted", ".", "append", "(", "att_hist", "[", "idx", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "flat_s", "=", "[", "]", "\n", "flat_rel", "=", "[", "]", "\n", "flat_att", "=", "[", "]", "\n", "len_s", "=", "[", "]", "\n", "\n", "s_hist_sorted", "=", "s_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "rel_hist_sorted", "=", "rel_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "att_hist_sorted", "=", "att_hist_sorted", "[", ":", "num_non_zero", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "s_hist_sorted", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", ")", ")", ":", "\n", "            ", "len_s", ".", "append", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", ")", ")", ":", "\n", "                ", "flat_s", ".", "append", "(", "s_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_rel", ".", "append", "(", "rel_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "flat_att", ".", "append", "(", "att_hist_sorted", "[", "i", "]", "[", "j", "]", "[", "k", "]", ")", "\n", "\n", "", "", "", "s_tem", "=", "s", "[", "s_idx", "]", "\n", "r_tem", "=", "r", "[", "s_idx", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.dataset_scrapper.trade_data_scrapper_parallel.download": [[16, 164], ["print", "selenium.webdriver.Chrome", "print", "webdriver.Chrome.stop_client", "webdriver.Chrome.close", "webdriver.Chrome.get", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "set", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait().until", "print", "webdriver.Chrome.find_element_by_id().click", "webdriver.Chrome.find_element_by_id", "driver.find_element_by_id.get_attribute", "driver.find_element_by_id.click", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_elements_by_partial_link_text", "set", "len", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "len", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id"], "function", ["None"], ["def", "download", "(", "cou", ")", ":", "\n", "\n", "    ", "print", "(", "f'country {cou} starting'", ")", "\n", "\n", "driver", "=", "webdriver", ".", "Chrome", "(", ")", "\n", "\n", "countries", "=", "[", "cou", "]", "\n", "\n", "for", "country", "in", "countries", ":", "\n", "\n", "        ", "website", "=", "'https://www.trademap.org/tradestat/Index.aspx'", "\n", "driver", ".", "get", "(", "website", ")", "\n", "\n", "# input product types", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_PageContent_RadComboBox_Product_Input\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_RadComboBox_Product_Input'", ")", ".", "click", "(", ")", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_PageContent_RadComboBox_Product_c0\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_RadComboBox_Product_c0'", ")", ".", "click", "(", ")", "\n", "\n", "# input country", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_RadComboBox_Country_Input'", ")", ".", "click", "(", ")", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_PageContent_RadComboBox_Country_c0\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_RadComboBox_Country_c0'", ")", ".", "click", "(", ")", "\n", "\n", "# click monthly", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_PageContent_Button_TimeSeries_M\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_Button_TimeSeries_M'", ")", ".", "click", "(", ")", "\n", "\n", "# trade balance", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_NavigationControl_DropDownList_TradeType\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_NavigationControl_DropDownList_TradeType'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'B'", ")", "\n", "\n", "# new country", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_NavigationControl_DropDownList_Country\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_NavigationControl_DropDownList_Country'", ")", ")", "\n", "select", ".", "select_by_value", "(", "country", ")", "\n", "\n", "# rows per page", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\n", "\"ctl00_PageContent_GridViewPanelControl_DropDownList_PageSize\"", "\n", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_GridViewPanelControl_DropDownList_PageSize'", ")", "\n", ")", "\n", "select", ".", "select_by_value", "(", "'300'", ")", "\n", "\n", "# months per page", "\n", "\n", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "(", "\n", "By", ".", "ID", ",", "\n", "\"ctl00_PageContent_GridViewPanelControl_DropDownList_NumTimePeriod\"", "\n", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_GridViewPanelControl_DropDownList_NumTimePeriod'", "\n", ")", ")", "\n", "select", ".", "select_by_value", "(", "'20'", ")", "\n", "\n", "years", "=", "set", "(", "[", "]", ")", "\n", "\n", "while", "True", ":", "\n", "\n", "            ", "while", "True", ":", "\n", "\n", "                ", "links", "=", "driver", ".", "find_elements_by_partial_link_text", "(", "\n", "'Balance in value in '", ")", "\n", "\n", "years_new", "=", "set", "(", "[", "link", ".", "text", "for", "link", "in", "links", "]", ")", "\n", "\n", "if", "years_new", "!=", "years", ":", "\n", "                    ", "years", "=", "years_new", "\n", "break", "\n", "\n", "", "if", "len", "(", "years", ")", "==", "0", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "len", "(", "years", ")", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "# download", "\n", "\n", "", "WebDriverWait", "(", "driver", ",", "30", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\n", "\"ctl00_PageContent_GridViewPanelControl_ImageButton_Text\"", "\n", ")", ")", ")", "\n", "\n", "print", "(", "'dowloading'", ")", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_GridViewPanelControl_ImageButton_Text'", "\n", ")", ".", "click", "(", ")", "\n", "\n", "# go to previous years", "\n", "\n", "button", "=", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_PageContent_GridViewPanelControl_ImageButton_Previous'", ")", "\n", "\n", "disable", "=", "button", ".", "get_attribute", "(", "'disabled'", ")", "\n", "\n", "if", "disable", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "button", ".", "click", "(", ")", "\n", "\n", "", "", "print", "(", "f'country {cou} done'", ")", "\n", "\n", "driver", ".", "stop_client", "(", ")", "\n", "driver", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.dataset_scrapper.exchange_rate_parallel.download": [[18, 141], ["selenium.webdriver.Chrome", "webdriver.Chrome.stop_client", "webdriver.Chrome.close", "webdriver.Chrome.get", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "selenium.webdriver.support.ui.Select", "selenium.webdriver.support.ui.Select.select_by_value", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "selenium.webdriver.support.wait.WebDriverWait().until", "webdriver.Chrome.find_element_by_id().click", "webdriver.Chrome.find_element_by_link_text", "driver.find_element_by_link_text.click", "print", "time.sleep", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id", "selenium.webdriver.support.wait.WebDriverWait", "webdriver.Chrome.find_element_by_id"], "function", ["None"], ["def", "download", "(", "yea", ")", ":", "\n", "\n", "    ", "driver", "=", "webdriver", ".", "Chrome", "(", ")", "\n", "\n", "years", "=", "[", "yea", "]", "\n", "\n", "for", "year", "in", "years", ":", "\n", "\n", "        ", "website", "=", "'https://www.imf.org/external/np/fin/ert/GUI/Pages/CountryDataBase.aspx'", "\n", "driver", ".", "get", "(", "website", ")", "\n", "\n", "# date range", "\n", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_RadioDateRange\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_RadioDateRange'", ")", ".", "click", "(", ")", "\n", "\n", "# from month", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectFromMonth\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_SelectFromMonth'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'1'", ")", "\n", "\n", "# from day", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectFromDay\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_SelectFromDay'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'1'", ")", "\n", "\n", "# from year", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectFromYear\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_SelectFromYear'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'{}'", ".", "format", "(", "year", ")", ")", "\n", "\n", "# to month", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectToMonth\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_SelectToMonth'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'1'", ")", "\n", "\n", "# to day", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectToDay\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "'ctl00_ContentPlaceHolder1_SelectToDay'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'1'", ")", "\n", "\n", "# to year", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_SelectToYear\"", ")", ")", ")", "\n", "\n", "select", "=", "Select", "(", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_SelectToYear'", ")", ")", "\n", "select", ".", "select_by_value", "(", "'{}'", ".", "format", "(", "year", "+", "1", ")", ")", "\n", "\n", "# continue", "\n", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_BtnContinue\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_BtnContinue'", ")", ".", "click", "(", ")", "\n", "\n", "# select all", "\n", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_BtnSelect\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_BtnSelect'", ")", ".", "click", "(", ")", "\n", "\n", "# continue", "\n", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_BtnContinue\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_BtnContinue'", ")", ".", "click", "(", ")", "\n", "\n", "# prepare report", "\n", "\n", "WebDriverWait", "(", "driver", ",", "10", ")", ".", "until", "(", "\n", "EC", ".", "presence_of_element_located", "(", "\n", "(", "By", ".", "ID", ",", "\"ctl00_ContentPlaceHolder1_imgBtnPrepareReport\"", ")", ")", ")", "\n", "\n", "driver", ".", "find_element_by_id", "(", "\n", "'ctl00_ContentPlaceHolder1_imgBtnPrepareReport'", ")", ".", "click", "(", ")", "\n", "\n", "link", "=", "driver", ".", "find_element_by_link_text", "(", "'TSV'", ")", "\n", "\n", "link", ".", "click", "(", ")", "\n", "print", "(", "'{} downloaded'", ".", "format", "(", "year", ")", ")", "\n", "time", ".", "sleep", "(", "10", ")", "\n", "\n", "", "driver", ".", "stop_client", "(", ")", "\n", "driver", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.atg.gen_history.load_hexaruples": [[10, 42], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.atg.gen_history.get_total_number": [[44, 49], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.mtg.gen_history.load_hexaruples": [[10, 52], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n", "\n", "", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n", "\n", "", "", "", "train_data", ",", "train_times", "=", "load_hexaruples", "(", "''", ",", "'train.txt'", ")", "\n", "test_data", ",", "test_times", "=", "load_hexaruples", "(", "''", ",", "'test.txt'", ")", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.mtg.gen_history.get_total_number": [[54, 59], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["# total_data, _ = load_hexaruples('', 'train.txt', 'test.txt')", "\n", "\n", "history_len", "=", "10", "\n", "num_e", ",", "num_r", "=", "get_total_number", "(", "''", ",", "'stat.txt'", ")", "\n", "\n", "entity_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.mtg.gen_history.get_data_with_t": [[61, 64], ["numpy.array"], "function", ["None"], ["rel_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "self_att_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "\n", "entity_o_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.mtg.gen_history.comp_deg_norm": [[66, 71], ["g.in_degrees().float", "g.in_degrees", "torch.nonzero().view", "range", "g.number_of_nodes", "torch.nonzero"], "function", ["None"], ["rel_o_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "self_att_o_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "\n", "# s_his_t = [[] for _ in range(num_e)]", "\n", "# o_his_t = [[] for _ in range(num_e)]", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_large.gen_history.load_hexaruples": [[10, 42], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_large.gen_history.get_total_number": [[44, 49], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_large.gen_history.get_data_with_t": [[51, 54], ["numpy.array"], "function", ["None"], ["", "", "", "train_data", ",", "train_times", "=", "load_hexaruples", "(", "''", ",", "'train.txt'", ")", "\n", "test_data", ",", "test_times", "=", "load_hexaruples", "(", "''", ",", "'test.txt'", ")", "\n", "valid_data", ",", "valid_times", "=", "load_hexaruples", "(", "''", ",", "'valid.txt'", ")", "\n", "# total_data, _ = load_hexaruples('', 'train.txt', 'test.txt')", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_large.gen_history.comp_deg_norm": [[56, 61], ["g.in_degrees().float", "g.in_degrees", "torch.nonzero().view", "range", "g.number_of_nodes", "torch.nonzero"], "function", ["None"], ["history_len", "=", "10", "\n", "num_e", ",", "num_r", "=", "get_total_number", "(", "''", ",", "'stat.txt'", ")", "\n", "\n", "entity_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "att_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "rel_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.agg.gen_history.load_hexaruples": [[10, 42], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.agg.gen_history.get_total_number": [[44, 49], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.load_hexaruples": [[10, 42], ["list", "set.sort", "open", "set", "numpy.asarray", "numpy.asarray", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add", "open", "os.path.join", "line.split", "int", "int", "int", "float", "float", "int", "hexapleList.append", "set.add"], "function", ["None"], ["def", "load_hexaruples", "(", "inPath", ",", "fileName", ",", "fileName2", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "hexapleList", "=", "[", "]", "\n", "times", "=", "set", "(", ")", "\n", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "# times = list(times)", "\n", "# times.sort()", "\n", "", "", "if", "fileName2", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName2", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "for", "line", "in", "fr", ":", "\n", "                ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "head", "=", "int", "(", "line_split", "[", "0", "]", ")", "\n", "tail", "=", "int", "(", "line_split", "[", "2", "]", ")", "\n", "rel", "=", "int", "(", "line_split", "[", "1", "]", ")", "\n", "att_head", "=", "float", "(", "line_split", "[", "3", "]", ")", "\n", "att_tail", "=", "float", "(", "line_split", "[", "4", "]", ")", "\n", "time", "=", "int", "(", "line_split", "[", "5", "]", ")", "\n", "hexapleList", ".", "append", "(", "[", "head", ",", "rel", ",", "tail", ",", "att_head", ",", "att_tail", ",", "time", "]", ")", "\n", "times", ".", "add", "(", "time", ")", "\n", "", "", "", "times", "=", "list", "(", "times", ")", "\n", "times", ".", "sort", "(", ")", "\n", "\n", "return", "np", ".", "asarray", "(", "hexapleList", ")", ",", "np", ".", "asarray", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_total_number": [[44, 49], ["open", "os.path.join", "line.split", "int", "int"], "function", ["None"], ["", "def", "get_total_number", "(", "inPath", ",", "fileName", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "inPath", ",", "fileName", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "for", "line", "in", "fr", ":", "\n", "            ", "line_split", "=", "line", ".", "split", "(", ")", "\n", "return", "int", "(", "line_split", "[", "0", "]", ")", ",", "int", "(", "line_split", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.get_data_with_t": [[51, 54], ["numpy.array"], "function", ["None"], ["", "", "", "train_data", ",", "train_times", "=", "load_hexaruples", "(", "''", ",", "'train.txt'", ")", "\n", "test_data", ",", "test_times", "=", "load_hexaruples", "(", "''", ",", "'test.txt'", ")", "\n", "valid_data", ",", "valid_times", "=", "load_hexaruples", "(", "''", ",", "'valid.txt'", ")", "\n", "# total_data, _ = load_hexaruples('', 'train.txt', 'test.txt')", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.cac_small.gen_history.comp_deg_norm": [[56, 61], ["g.in_degrees().float", "g.in_degrees", "torch.nonzero().view", "range", "g.number_of_nodes", "torch.nonzero"], "function", ["None"], ["history_len", "=", "10", "\n", "num_e", ",", "num_r", "=", "get_total_number", "(", "''", ",", "'stat.txt'", ")", "\n", "\n", "entity_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "att_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n", "rel_s_his", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_e", ")", "]", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator_monthly_single.check_true": [[32, 42], ["b.lower", "a.lower", "b.lower", "a.lower", "a.lower", "b.lower", "b.lower", "a.lower"], "function", ["None"], ["def", "check_true", "(", "a", ")", ":", "\n", "    ", "for", "b", "in", "countries_from_trade", ":", "\n", "        ", "if", "b", ".", "lower", "(", ")", "==", "a", ".", "lower", "(", ")", "or", "b", ".", "lower", "(", ")", "in", "a", ".", "lower", "(", ")", "or", "a", ".", "lower", "(", "\n", ")", "in", "b", ".", "lower", "(", ")", ":", "\n", "\n", "            ", "country_trade_to_exchange_dict", "[", "b", ".", "lower", "(", ")", "]", "=", "a", "\n", "country_exchange_to_trade_dict", "[", "a", ".", "lower", "(", ")", "]", "=", "b", "\n", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator_monthly_single.write_to_file": [[227, 250], ["open", "range", "math.floor", "f.write", "days_available.add", "float", "float", "float", "print", "dates_not_available[].add", "days_not_available.add", "float", "datetime.timedelta", "datetime.timedelta"], "function", ["None"], ["def", "write_to_file", "(", "grd", ",", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "'{}/{}.txt'", ".", "format", "(", "SAVE_PATH", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "gd", "in", "grd", ":", "\n", "\n", "# only making graph for the month on an average and not writing it multiple times", "\n", "            ", "for", "day", "in", "range", "(", "gd", "[", "-", "2", "]", ",", "gd", "[", "-", "2", "]", "+", "1", ")", ":", "\n", "                ", "val", "=", "floor", "(", "(", "float", "(", "gd", "[", "1", "]", "-", "min_value", ")", "*", "num_relations", ")", "/", "\n", "float", "(", "max_value", "-", "min_value", ")", ")", "\n", "rel_dict", "[", "val", "]", "+=", "1", "\n", "try", ":", "\n", "                    ", "ex", "=", "float", "(", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "0", "]", ")", "/", "float", "(", "\n", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "1", "]", ")", "\n", "days_available", ".", "add", "(", "day", ")", "\n", "", "except", "KeyError", "as", "_", ":", "\n", "                    ", "ex", "=", "0", "\n", "print", "(", "\n", "f'country {reverse_country_dict[gd[0]]} has no data for {starting_date+timedelta(days=day)}'", "\n", ")", "\n", "dates_not_available", "[", "reverse_country_dict", "[", "gd", "[", "0", "]", "]", "]", ".", "add", "(", "\n", "starting_date", "+", "timedelta", "(", "days", "=", "day", ")", ")", "\n", "days_not_available", ".", "add", "(", "day", ")", "\n", "", "f", ".", "write", "(", "f'{gd[0]}\\t{val}\\t{gd[2]}\\t{ex}\\t{day}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.citation_graph_generator.save_final_data": [[119, 139], ["set", "sorted", "sorted.add", "list", "open", "f.write"], "function", ["None"], ["", "def", "save_final_data", "(", "data", ",", "filename", ",", "path", ")", ":", "\n", "    ", "final_data", "=", "set", "(", ")", "\n", "\n", "for", "head", ",", "rel", ",", "tail", ",", "time", "in", "data", ":", "\n", "        ", "if", "time", "not", "in", "included_times", ":", "\n", "            ", "continue", "\n", "", "val_head", "=", "time_id_citation", "[", "time", "]", "[", "head", "]", "/", "10000", "\n", "val_tail", "=", "time_id_citation", "[", "time", "]", "[", "tail", "]", "/", "10000", "\n", "head", "=", "final_entity_mapping", "[", "head", "]", "\n", "tail", "=", "final_entity_mapping", "[", "tail", "]", "\n", "\n", "final_data", ".", "add", "(", "(", "head", ",", "rel", ",", "tail", ",", "val_head", ",", "val_tail", ",", "time", ")", ")", "\n", "# final_data.add(", "\n", "#     (tail, rel + num_relations, head, val_tail, val_head, time))", "\n", "\n", "", "final_data", "=", "sorted", "(", "list", "(", "final_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "\n", "with", "open", "(", "f'{path}/{filename}.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "final_data", ":", "\n", "            ", "f", ".", "write", "(", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator.check_true": [[32, 42], ["b.lower", "a.lower", "b.lower", "a.lower", "a.lower", "b.lower", "b.lower", "a.lower"], "function", ["None"], ["def", "check_true", "(", "a", ")", ":", "\n", "    ", "for", "b", "in", "countries_from_trade", ":", "\n", "        ", "if", "b", ".", "lower", "(", ")", "==", "a", ".", "lower", "(", ")", "or", "b", ".", "lower", "(", ")", "in", "a", ".", "lower", "(", ")", "or", "a", ".", "lower", "(", "\n", ")", "in", "b", ".", "lower", "(", ")", ":", "\n", "\n", "            ", "country_trade_to_exchange_dict", "[", "b", ".", "lower", "(", ")", "]", "=", "a", "\n", "country_exchange_to_trade_dict", "[", "a", ".", "lower", "(", ")", "]", "=", "b", "\n", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator.write_to_file": [[173, 182], ["open", "range", "math.floor", "f.write", "float", "float"], "function", ["None"], ["def", "write_to_file", "(", "grd", ",", "filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "'{}/{}.csv'", ".", "format", "(", "SAVE_PATH", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "gd", "in", "grd", ":", "\n", "            ", "for", "day", "in", "range", "(", "gd", "[", "-", "2", "]", ",", "gd", "[", "-", "1", "]", "+", "1", ")", ":", "\n", "                ", "val", "=", "floor", "(", "(", "float", "(", "gd", "[", "1", "]", "-", "min_value", ")", "*", "num_relations", ")", "/", "\n", "float", "(", "max_value", "-", "min_value", ")", ")", "\n", "rel_dict", "[", "val", "]", "+=", "1", "\n", "f", ".", "write", "(", "f'{gd[0]}\\t{val}\\t{gd[2]}\\t{day-min_day}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.gdelt_graph_generator.save_final_data": [[129, 185], ["set", "set", "set", "sorted", "sorted", "sorted", "str", "sorted.add", "sorted.add", "list", "list", "list", "open", "open", "open", "open", "sorted.add", "sorted.add", "sorted.add", "sorted.add", "f.write", "f.write", "f.write", "f.write"], "function", ["None"], ["def", "save_final_data", "(", "data", ",", "filename", ",", "filename2", ",", "path", ")", ":", "\n", "    ", "final_data", "=", "set", "(", ")", "\n", "only_att_data", "=", "set", "(", ")", "\n", "only_pred_data", "=", "set", "(", ")", "\n", "\n", "for", "head", ",", "rel", ",", "tail", ",", "time", "in", "data", ":", "\n", "        ", "flag_head", "=", "0", "\n", "time", "=", "str", "(", "time", ")", "\n", "if", "time", "not", "in", "time_ranges", ":", "\n", "            ", "continue", "\n", "", "if", "head", "in", "final_countries", ":", "\n", "            ", "head_val", "=", "country_time_exchange", "[", "head", "]", "[", "time", "]", "\n", "flag_head", "=", "1", "\n", "", "else", ":", "\n", "            ", "head_val", "=", "0", "\n", "", "flag_tail", "=", "0", "\n", "if", "tail", "in", "final_countries", ":", "\n", "            ", "tail_val", "=", "country_time_exchange", "[", "tail", "]", "[", "time", "]", "\n", "flag_tail", "=", "1", "\n", "", "else", ":", "\n", "            ", "tail_val", "=", "0", "\n", "\n", "", "final_data", ".", "add", "(", "(", "head", ",", "rel", ",", "tail", ",", "head_val", ",", "tail_val", ",", "time", ",", "flag_head", ")", ")", "\n", "final_data", ".", "add", "(", "(", "tail", ",", "rel", "+", "num_relations", ",", "head", ",", "tail_val", ",", "head_val", ",", "\n", "time", ",", "flag_tail", ")", ")", "\n", "if", "flag_head", "==", "1", ":", "\n", "            ", "only_att_data", ".", "add", "(", "(", "head", ",", "rel", ",", "tail", ",", "head_val", ",", "tail_val", ",", "time", ")", ")", "\n", "", "else", ":", "\n", "            ", "only_pred_data", ".", "add", "(", "(", "head", ",", "rel", ",", "tail", ",", "head_val", ",", "tail_val", ",", "time", ")", ")", "\n", "", "if", "flag_tail", "==", "1", ":", "\n", "            ", "only_att_data", ".", "add", "(", "\n", "(", "tail", ",", "rel", "+", "num_relations", ",", "head", ",", "tail_val", ",", "head_val", ",", "time", ")", ")", "\n", "", "else", ":", "\n", "            ", "only_pred_data", ".", "add", "(", "\n", "(", "tail", ",", "rel", "+", "num_relations", ",", "head", ",", "tail_val", ",", "head_val", ",", "time", ")", ")", "\n", "\n", "", "", "final_data", "=", "sorted", "(", "list", "(", "final_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "only_att_data", "=", "sorted", "(", "list", "(", "only_att_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "only_pred_data", "=", "sorted", "(", "list", "(", "only_pred_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "\n", "with", "open", "(", "f'{path}/{filename}.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "final_data", ":", "\n", "            ", "f", ".", "write", "(", "\n", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\t{a[6]}\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "f'{path}/{filename}_only_att_data.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "only_att_data", ":", "\n", "            ", "f", ".", "write", "(", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "f'{path}/{filename2}1.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "only_att_data", ":", "\n", "            ", "f", ".", "write", "(", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "f'{path}/{filename2}2.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "only_pred_data", ":", "\n", "            ", "f", ".", "write", "(", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.citation20k_graph_generator.save_final_data": [[119, 139], ["set", "sorted", "sorted.add", "list", "open", "f.write"], "function", ["None"], ["", "def", "save_final_data", "(", "data", ",", "filename", ",", "path", ")", ":", "\n", "    ", "final_data", "=", "set", "(", ")", "\n", "\n", "for", "head", ",", "rel", ",", "tail", ",", "time", "in", "data", ":", "\n", "        ", "if", "time", "not", "in", "included_times", ":", "\n", "            ", "continue", "\n", "", "val_head", "=", "time_id_citation", "[", "time", "]", "[", "head", "]", "/", "10000", "\n", "val_tail", "=", "time_id_citation", "[", "time", "]", "[", "tail", "]", "/", "10000", "\n", "head", "=", "final_entity_mapping", "[", "head", "]", "\n", "tail", "=", "final_entity_mapping", "[", "tail", "]", "\n", "\n", "final_data", ".", "add", "(", "(", "head", ",", "rel", ",", "tail", ",", "val_head", ",", "val_tail", ",", "time", ")", ")", "\n", "# final_data.add(", "\n", "#     (tail, rel + num_relations, head, val_tail, val_head, time))", "\n", "\n", "", "final_data", "=", "sorted", "(", "list", "(", "final_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "\n", "with", "open", "(", "f'{path}/{filename}.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "a", "in", "final_data", ":", "\n", "            ", "f", ".", "write", "(", "f'{a[0]}\\t{a[1]}\\t{a[2]}\\t{a[3]}\\t{a[4]}\\t{a[5]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator_monthly.check_true": [[32, 42], ["b.lower", "a.lower", "b.lower", "a.lower", "a.lower", "b.lower", "b.lower", "a.lower"], "function", ["None"], ["def", "check_true", "(", "a", ")", ":", "\n", "    ", "for", "b", "in", "countries_from_trade", ":", "\n", "        ", "if", "b", ".", "lower", "(", ")", "==", "a", ".", "lower", "(", ")", "or", "b", ".", "lower", "(", ")", "in", "a", ".", "lower", "(", ")", "or", "a", ".", "lower", "(", "\n", ")", "in", "b", ".", "lower", "(", ")", ":", "\n", "\n", "            ", "country_trade_to_exchange_dict", "[", "b", ".", "lower", "(", ")", "]", "=", "a", "\n", "country_exchange_to_trade_dict", "[", "a", ".", "lower", "(", ")", "]", "=", "b", "\n", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator_monthly.final_conversion_of_data": [[227, 280], ["set", "sorted", "range", "list", "math.floor", "sorted.add", "sorted.add", "days_available.add", "days_available.add", "float", "float", "float", "float", "float", "print", "dates_not_available[].add", "days_not_available.add", "float", "float", "float", "float", "print", "dates_not_available[].add", "days_not_available.add", "float", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta", "datetime.timedelta"], "function", ["None"], ["def", "final_conversion_of_data", "(", "grd", ")", ":", "\n", "    ", "final_data", "=", "set", "(", ")", "\n", "for", "gd", "in", "grd", ":", "\n", "\n", "# only making graph for the month on an average and not writing it multiple times", "\n", "        ", "for", "day", "in", "range", "(", "gd", "[", "-", "2", "]", ",", "gd", "[", "-", "2", "]", "+", "1", ")", ":", "\n", "            ", "val", "=", "floor", "(", "(", "float", "(", "gd", "[", "1", "]", "-", "min_value", ")", "*", "num_relations", ")", "/", "\n", "float", "(", "max_value", "-", "min_value", ")", ")", "\n", "rel_dict", "[", "val", "]", "+=", "1", "\n", "\n", "try", ":", "\n", "                ", "ex", "=", "float", "(", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "0", "]", ")", "/", "float", "(", "\n", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "1", "]", ")", "\n", "\n", "ex2", "=", "float", "(", "exchange_data", "[", "gd", "[", "2", "]", "]", "[", "day", "]", "[", "0", "]", ")", "/", "float", "(", "\n", "exchange_data", "[", "gd", "[", "2", "]", "]", "[", "day", "]", "[", "1", "]", ")", "\n", "\n", "days_available", ".", "add", "(", "day", ")", "\n", "", "except", "KeyError", "as", "_", ":", "\n", "                ", "ex", "=", "0", "\n", "print", "(", "\n", "f'country {reverse_country_dict[gd[0]]} has no data for {starting_date+timedelta(days=day)}'", "\n", ")", "\n", "dates_not_available", "[", "reverse_country_dict", "[", "gd", "[", "0", "]", "]", "]", ".", "add", "(", "\n", "starting_date", "+", "timedelta", "(", "days", "=", "day", ")", ")", "\n", "days_not_available", ".", "add", "(", "day", ")", "\n", "# f.write(f'{gd[0]}\\t{val}\\t{gd[2]}\\t{ex}\\t{ex2}\\t{day}\\n')", "\n", "", "final_data", ".", "add", "(", "(", "gd", "[", "0", "]", ",", "val", ",", "gd", "[", "2", "]", ",", "ex", ",", "ex2", ",", "day", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "ex", "=", "float", "(", "exchange_data", "[", "gd", "[", "2", "]", "]", "[", "day", "]", "[", "0", "]", ")", "/", "float", "(", "\n", "exchange_data", "[", "gd", "[", "2", "]", "]", "[", "day", "]", "[", "1", "]", ")", "\n", "\n", "ex2", "=", "float", "(", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "0", "]", ")", "/", "float", "(", "\n", "exchange_data", "[", "gd", "[", "0", "]", "]", "[", "day", "]", "[", "1", "]", ")", "\n", "\n", "days_available", ".", "add", "(", "day", ")", "\n", "", "except", "KeyError", "as", "_", ":", "\n", "                ", "ex", "=", "0", "\n", "print", "(", "\n", "f'country {reverse_country_dict[gd[2]]} has no data for {starting_date+timedelta(days=day)}'", "\n", ")", "\n", "dates_not_available", "[", "reverse_country_dict", "[", "gd", "[", "2", "]", "]", "]", ".", "add", "(", "\n", "starting_date", "+", "timedelta", "(", "days", "=", "day", ")", ")", "\n", "days_not_available", ".", "add", "(", "day", ")", "\n", "\n", "# f.write(", "\n", "#     f'{gd[2]}\\t{val+num_relations}\\t{gd[0]}\\t{ex}\\t{ex2}\\t{day}\\n'", "\n", "# )", "\n", "", "final_data", ".", "add", "(", "(", "gd", "[", "2", "]", ",", "val", "+", "num_relations", ",", "gd", "[", "0", "]", ",", "ex", ",", "ex2", ",", "day", ")", ")", "\n", "\n", "", "", "final_data", "=", "sorted", "(", "list", "(", "final_data", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "-", "1", "]", ")", "\n", "return", "final_data", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_graph_generator_monthly.write_to_file": [[285, 289], ["open", "f.write"], "function", ["None"], ["def", "write_to_file", "(", "grd", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "'{}/{}.txt'", ".", "format", "(", "SAVE_PATH", ",", "filename", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "grd", ":", "\n", "            ", "f", ".", "write", "(", "f'{i[0]}\\t{i[1]}\\t{i[2]}\\t{i[3]}\\t{i[4]}\\t{i[5]}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.trade_combiner.get_country_from_filename": [[13, 21], ["[].strip", "[].split", "country[].split", "len"], "function", ["None"], ["def", "get_country_from_filename", "(", "country", ")", ":", "\n", "    ", "temp", "=", "'Trade_Map_-_List_of_partners_markets_for_a_product_commercialized_by_'", "\n", "country", "=", "country", "[", "len", "(", "temp", ")", ":", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'('", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "\n", "if", "country", "[", "-", "1", "]", "==", "'_'", ":", "\n", "        ", "country", "=", "country", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "country", "\n", "\n"]], "home.repos.pwc.inspect_result.INK-USC_DArtNet.data_modifier.exchange_combiner.get_date_from_string": [[12, 38], ["d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower", "d.lower"], "function", ["None"], ["def", "get_date_from_string", "(", "d", ")", ":", "\n", "\n", "    ", "if", "d", ".", "lower", "(", ")", "==", "'jan'", ":", "\n", "        ", "return", "1", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'feb'", ":", "\n", "        ", "return", "2", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'mar'", ":", "\n", "        ", "return", "3", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'apr'", ":", "\n", "        ", "return", "4", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'may'", ":", "\n", "        ", "return", "5", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'jun'", ":", "\n", "        ", "return", "6", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'jul'", ":", "\n", "        ", "return", "7", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'aug'", ":", "\n", "        ", "return", "8", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'sep'", ":", "\n", "        ", "return", "9", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'oct'", ":", "\n", "        ", "return", "10", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'nov'", ":", "\n", "        ", "return", "11", "\n", "", "if", "d", ".", "lower", "(", ")", "==", "'dec'", ":", "\n", "        ", "return", "12", "\n", "\n"]]}