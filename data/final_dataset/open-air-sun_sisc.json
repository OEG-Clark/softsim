{"home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_element_from2": [[9, 31], ["None"], "methods", ["None"], ["def", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", ":", "\n", "        ", "'''\n        Analytical solution for min_{c} |cx_1 + (1-c)x_2|_2^2\n        d is the distance (objective) optimzed\n        v1v1 = <x1,x1>\n        v1v2 = <x1,x2>\n        v2v2 = <x2,x2>\n        '''", "\n", "if", "v1v2", ">=", "v1v1", ":", "\n", "# Case: Fig 1, third column", "\n", "            ", "gamma", "=", "0.999", "\n", "cost", "=", "v1v1", "\n", "return", "gamma", ",", "cost", "\n", "", "if", "v1v2", ">=", "v2v2", ":", "\n", "# Case: Fig 1, first column", "\n", "            ", "gamma", "=", "0.001", "\n", "cost", "=", "v2v2", "\n", "return", "gamma", ",", "cost", "\n", "# Case: Fig 1, second column", "\n", "", "gamma", "=", "-", "1.0", "*", "(", "(", "v1v2", "-", "v2v2", ")", "/", "(", "v1v1", "+", "v2v2", "-", "2", "*", "v1v2", ")", ")", "\n", "cost", "=", "v2v2", "+", "gamma", "*", "(", "v1v2", "-", "v2v2", ")", "\n", "return", "gamma", ",", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_2d": [[32, 59], ["range", "len", "range", "len", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "range", "range", "range", "len", "torch.mul().sum().data.cpu", "len", "torch.mul().sum().data.cpu", "len", "torch.mul().sum().data.cpu", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "_min_norm_2d", "(", "vecs", ",", "dps", ")", ":", "\n", "        ", "'''\n        Find the minimum norm solution as combination of two points\n        This is correct only in 2D\n        ie. min_c |\\sum c_i x_i|_2^2 st. \\sum c_i = 1 , 1 >= c_1 >= 0 for all i, c_i + c_j = 1.0 for some i, j\n        '''", "\n", "dmin", "=", "1e8", "\n", "for", "i", "in", "range", "(", "len", "(", "vecs", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "vecs", ")", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "j", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "i", ",", "j", ")", "]", "+=", "torch", ".", "mul", "(", "vecs", "[", "i", "]", "[", "k", "]", ",", "vecs", "[", "j", "]", "[", "k", "]", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "\n", "", "dps", "[", "(", "j", ",", "i", ")", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "if", "(", "i", ",", "i", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "i", ",", "i", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "i", ",", "i", ")", "]", "+=", "torch", ".", "mul", "(", "vecs", "[", "i", "]", "[", "k", "]", ",", "vecs", "[", "i", "]", "[", "k", "]", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "\n", "", "", "if", "(", "j", ",", "j", ")", "not", "in", "dps", ":", "\n", "                    ", "dps", "[", "(", "j", ",", "j", ")", "]", "=", "0.0", "\n", "for", "k", "in", "range", "(", "len", "(", "vecs", "[", "i", "]", ")", ")", ":", "\n", "                        ", "dps", "[", "(", "j", ",", "j", ")", "]", "+=", "torch", ".", "mul", "(", "vecs", "[", "j", "]", "[", "k", "]", ",", "vecs", "[", "j", "]", "[", "k", "]", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "\n", "", "", "c", ",", "d", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "dps", "[", "(", "i", ",", "i", ")", "]", ",", "dps", "[", "(", "i", ",", "j", ")", "]", ",", "dps", "[", "(", "j", ",", "j", ")", "]", ")", "\n", "if", "d", "<", "dmin", ":", "\n", "                    ", "dmin", "=", "d", "\n", "sol", "=", "[", "(", "i", ",", "j", ")", ",", "c", ",", "d", "]", "\n", "", "", "", "return", "sol", ",", "dps", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._projection2simplex": [[60, 75], ["len", "torch.from_numpy", "range", "torch.maximum", "numpy.flip().copy", "torch.zeros", "torch.sum", "numpy.flip", "numpy.sort"], "methods", ["None"], ["", "def", "_projection2simplex", "(", "y", ")", ":", "\n", "        ", "'''\n        Given y, it solves argmin_z |y-z|_2 st \\sum z = 1 , 1 >= z_i >= 0 for all i\n        '''", "\n", "m", "=", "len", "(", "y", ")", "\n", "sorted_y", "=", "torch", ".", "from_numpy", "(", "np", ".", "flip", "(", "np", ".", "sort", "(", "y", ")", ",", "axis", "=", "0", ")", ".", "copy", "(", ")", ")", "\n", "tmpsum", "=", "0.0", "\n", "tmax_f", "=", "(", "torch", ".", "sum", "(", "y", ")", "-", "1.0", ")", "/", "m", "\n", "for", "i", "in", "range", "(", "m", "-", "1", ")", ":", "\n", "            ", "tmpsum", "+=", "sorted_y", "[", "i", "]", "\n", "tmax", "=", "(", "tmpsum", "-", "1", ")", "/", "(", "i", "+", "1.0", ")", "\n", "if", "tmax", ">", "sorted_y", "[", "i", "+", "1", "]", ":", "\n", "                ", "tmax_f", "=", "tmax", "\n", "break", "\n", "", "", "return", "torch", ".", "maximum", "(", "y", "-", "tmax_f", ",", "torch", ".", "zeros", "(", "y", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._next_point": [[76, 98], ["min_norm_solvers.MinNormSolver._projection2simplex", "type", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.sum", "len", "torch.min", "len", "min", "torch.sum", "torch.min"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._projection2simplex"], ["", "def", "_next_point", "(", "cur_val", ",", "grad", ",", "n", ")", ":", "\n", "        ", "if", "type", "(", "cur_val", ")", "is", "np", ".", "ndarray", ":", "\n", "            ", "cur_val", "=", "torch", ".", "Tensor", "(", "cur_val", ")", "\n", "grad", "=", "torch", ".", "Tensor", "(", "grad", ")", "\n", "", "proj_grad", "=", "grad", "-", "(", "torch", ".", "sum", "(", "grad", ")", "/", "n", ")", "\n", "\n", "tm1", "=", "-", "1.0", "*", "cur_val", "[", "proj_grad", "<", "0", "]", "/", "proj_grad", "[", "proj_grad", "<", "0", "]", "\n", "tm2", "=", "1.0", "-", "cur_val", "[", "proj_grad", ">", "0", "]", "/", "proj_grad", "[", "proj_grad", ">", "0", "]", "\n", "\n", "# if type(tm1) is torch.Tensor:", "\n", "# tm1 = tm1.numpy()", "\n", "# tm2 = tm2.numpy()", "\n", "skippers", "=", "torch", ".", "sum", "(", "tm1", "<", "1e-7", ")", "+", "torch", ".", "sum", "(", "tm2", "<", "1e-7", ")", "\n", "t", "=", "1", "\n", "if", "len", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "torch", ".", "min", "(", "tm1", "[", "tm1", ">", "1e-7", "]", ")", "\n", "", "if", "len", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ">", "0", ":", "\n", "            ", "t", "=", "min", "(", "t", ",", "torch", ".", "min", "(", "tm2", "[", "tm2", ">", "1e-7", "]", ")", ")", "\n", "\n", "", "next_point", "=", "proj_grad", "*", "t", "+", "cur_val", "\n", "next_point", "=", "MinNormSolver", ".", "_projection2simplex", "(", "next_point", ")", "\n", "return", "next_point", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver.find_min_norm_element": [[99, 145], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "torch.zeros", "torch.zeros", "range", "range", "min_norm_solvers.MinNormSolver._next_point", "range", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "torch.from_numpy", "range", "torch.sum().item", "numpy.dot", "torch.sum", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._next_point", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "def", "find_min_norm_element", "(", "vecs", ")", ":", "\n", "        ", "'''\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the projected gradient descent until convergence\n        '''", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "torch", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "grad_dir", "=", "-", "1.0", "*", "torch", ".", "from_numpy", "(", "np", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "new_point", "=", "MinNormSolver", ".", "_next_point", "(", "sol_vec", ",", "grad_dir", ",", "n", ")", "\n", "# Re-compute the inner products for line search", "\n", "v1v1", "=", "0.0", "\n", "v1v2", "=", "0.0", "\n", "v2v2", "=", "0.0", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                    ", "v1v1", "+=", "sol_vec", "[", "i", "]", "*", "sol_vec", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v1v2", "+=", "sol_vec", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "v2v2", "+=", "new_point", "[", "i", "]", "*", "new_point", "[", "j", "]", "*", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "", "", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "+", "(", "1", "-", "nc", ")", "*", "new_point", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "change", ")", ")", ".", "item", "(", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver.find_min_norm_element_FW": [[146, 188], ["min_norm_solvers.MinNormSolver._min_norm_2d", "len", "torch.zeros", "torch.zeros", "range", "range", "torch.argmin", "torch.dot", "torch.dot", "min_norm_solvers.MinNormSolver._min_norm_element_from2", "torch.dot", "torch.dot", "torch.sum", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_2d", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver._min_norm_element_from2"], ["", "", "def", "find_min_norm_element_FW", "(", "vecs", ")", ":", "\n", "        ", "'''\n        Given a list of vectors (vecs), this method finds the minimum norm element in the convex hull\n        as min |u|_2 st. u = \\sum c_i vecs[i] and \\sum c_i = 1.\n        It is quite geometric, and the main idea is the fact that if d_{ij} = min |u|_2 st u = c x_i + (1-c) x_j; the solution lies in (0, d_{i,j})\n        Hence, we find the best 2-task solution, and then run the Frank Wolfe until convergence\n        '''", "\n", "# Solution lying at the combination of two points", "\n", "dps", "=", "{", "}", "\n", "init_sol", ",", "dps", "=", "MinNormSolver", ".", "_min_norm_2d", "(", "vecs", ",", "dps", ")", "\n", "\n", "n", "=", "len", "(", "vecs", ")", "\n", "sol_vec", "=", "torch", ".", "zeros", "(", "n", ")", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "0", "]", "]", "=", "init_sol", "[", "1", "]", "\n", "sol_vec", "[", "init_sol", "[", "0", "]", "[", "1", "]", "]", "=", "1", "-", "init_sol", "[", "1", "]", "\n", "\n", "if", "n", "<", "3", ":", "\n", "# This is optimal for n=2, so return the solution", "\n", "            ", "return", "sol_vec", ",", "init_sol", "[", "2", "]", "\n", "\n", "", "iter_count", "=", "0", "\n", "\n", "grad_mat", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "grad_mat", "[", "i", ",", "j", "]", "=", "dps", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "", "", "while", "iter_count", "<", "MinNormSolver", ".", "MAX_ITER", ":", "\n", "            ", "t_iter", "=", "torch", ".", "argmin", "(", "torch", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "\n", "v1v1", "=", "torch", ".", "dot", "(", "sol_vec", ",", "torch", ".", "dot", "(", "grad_mat", ",", "sol_vec", ")", ")", "\n", "v1v2", "=", "torch", ".", "dot", "(", "sol_vec", ",", "grad_mat", "[", ":", ",", "t_iter", "]", ")", "\n", "v2v2", "=", "grad_mat", "[", "t_iter", ",", "t_iter", "]", "\n", "\n", "nc", ",", "nd", "=", "MinNormSolver", ".", "_min_norm_element_from2", "(", "v1v1", ",", "v1v2", ",", "v2v2", ")", "\n", "new_sol_vec", "=", "nc", "*", "sol_vec", "\n", "new_sol_vec", "[", "t_iter", "]", "+=", "1", "-", "nc", "\n", "\n", "change", "=", "new_sol_vec", "-", "sol_vec", "\n", "if", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "change", ")", ")", "<", "MinNormSolver", ".", "STOP_CRIT", ":", "\n", "                ", "return", "sol_vec", ",", "nd", "\n", "", "sol_vec", "=", "new_sol_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.gradient_normalizers": [[190, 207], ["torch.sqrt", "torch.sum", "print", "gr.pow().sum().data.cpu", "torch.sqrt", "torch.sum", "gr.pow().sum", "gr.pow().sum().data.cpu", "gr.pow", "gr.pow().sum", "gr.pow"], "function", ["None"], ["", "", "", "def", "gradient_normalizers", "(", "grads", ",", "losses", ",", "normalization_type", ")", ":", "\n", "    ", "gn", "=", "{", "}", "\n", "if", "normalization_type", "==", "'l2'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'loss'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "\n", "", "", "elif", "normalization_type", "==", "'loss+'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "losses", "[", "t", "]", "*", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "[", "gr", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", "for", "gr", "in", "grads", "[", "t", "]", "]", ")", ")", "\n", "", "", "elif", "normalization_type", "==", "'none'", ":", "\n", "        ", "for", "t", "in", "grads", ":", "\n", "            ", "gn", "[", "t", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "'ERROR: Invalid Normalization Type'", ")", "\n", "", "return", "gn", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.__init__": [[34, 47], ["numpy.array", "numpy.array", "evals.iouEval.reset", "range"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset"], ["  ", "def", "__init__", "(", "self", ",", "n_classes", ",", "ignore", "=", "None", ")", ":", "\n", "# classes", "\n", "    ", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "# What to include and ignore from the means", "\n", "self", ".", "ignore", "=", "np", ".", "array", "(", "ignore", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "self", ".", "include", "=", "np", ".", "array", "(", "\n", "[", "n", "for", "n", "in", "range", "(", "self", ".", "n_classes", ")", "if", "n", "not", "in", "self", ".", "ignore", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# print('[IOU EVAL] IGNORE: ', self.ignore)", "\n", "# print('[IOU EVAL] INCLUDE: ', self.include)", "\n", "\n", "# reset the class counters", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.num_classes": [[48, 50], ["None"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.reset": [[51, 55], ["numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "conf_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ",", "\n", "self", ".", "n_classes", ")", ",", "\n", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch": [[56, 69], ["x.reshape", "y.reshape", "tuple", "numpy.add.at", "numpy.stack"], "methods", ["None"], ["", "def", "addBatch", "(", "self", ",", "x", ",", "y", ")", ":", "# x=preds, y=targets", "\n", "# sizes should be matching", "\n", "    ", "x_row", "=", "x", ".", "reshape", "(", "-", "1", ")", "# de-batchify", "\n", "y_row", "=", "y", ".", "reshape", "(", "-", "1", ")", "# de-batchify", "\n", "\n", "# check", "\n", "assert", "(", "x_row", ".", "shape", "==", "x_row", ".", "shape", ")", "\n", "\n", "# create indexes", "\n", "idxs", "=", "tuple", "(", "np", ".", "stack", "(", "(", "x_row", ",", "y_row", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# make confusion matrix (cols = gt, rows = pred)", "\n", "np", ".", "add", ".", "at", "(", "self", ".", "conf_matrix", ",", "idxs", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getStats": [[70, 80], ["evals.iouEval.conf_matrix.copy", "numpy.diag", "evals.iouEval.sum", "evals.iouEval.sum"], "methods", ["None"], ["", "def", "getStats", "(", "self", ")", ":", "\n", "# remove fp from confusion on the ignore classes cols", "\n", "    ", "conf", "=", "self", ".", "conf_matrix", ".", "copy", "(", ")", "\n", "conf", "[", ":", ",", "self", ".", "ignore", "]", "=", "0", "\n", "\n", "# get the clean stats", "\n", "tp", "=", "np", ".", "diag", "(", "conf", ")", "\n", "fp", "=", "conf", ".", "sum", "(", "axis", "=", "1", ")", "-", "tp", "\n", "fn", "=", "conf", ".", "sum", "(", "axis", "=", "0", ")", "-", "tp", "\n", "return", "tp", ",", "fp", ",", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU": [[81, 88], ["evals.iouEval.getStats"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getStats"], ["", "def", "getIoU", "(", "self", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "fn", "=", "self", ".", "getStats", "(", ")", "\n", "intersection", "=", "tp", "\n", "union", "=", "tp", "+", "fp", "+", "fn", "+", "1e-15", "\n", "iou", "=", "intersection", "/", "union", "\n", "iou_mean", "=", "(", "intersection", "[", "self", ".", "include", "]", "/", "union", "[", "self", ".", "include", "]", ")", ".", "mean", "(", ")", "\n", "return", "iou_mean", ",", "iou", "# returns 'iou mean', 'iou per class' ALL CLASSES", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getacc": [[89, 95], ["evals.iouEval.getStats", "tp.sum", "tp[].sum", "fp[].sum"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getStats"], ["", "def", "getacc", "(", "self", ")", ":", "\n", "    ", "tp", ",", "fp", ",", "fn", "=", "self", ".", "getStats", "(", ")", "\n", "total_tp", "=", "tp", ".", "sum", "(", ")", "\n", "total", "=", "tp", "[", "self", ".", "include", "]", ".", "sum", "(", ")", "+", "fp", "[", "self", ".", "include", "]", ".", "sum", "(", ")", "+", "1e-15", "\n", "acc_mean", "=", "total_tp", "/", "total", "\n", "return", "acc_mean", "# returns 'acc mean'", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion": [[96, 98], ["evals.iouEval.conf_matrix.copy"], "methods", ["None"], ["", "def", "get_confusion", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "conf_matrix", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.eval_cd": [[100, 127], ["numpy.transpose", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "dist.mean", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "dist.mean", "pred.nonzero", "gt.nonzero", "print"], "function", ["None"], ["", "", "def", "eval_cd", "(", "pred", ",", "gt", ",", "mask", ")", ":", "\n", "    ", "'''pred gt mask are all of same size'''", "\n", "pred", "[", "mask", "==", "False", "]", "=", "0", "\n", "gt", "[", "mask", "==", "False", "]", "=", "0", "\n", "\n", "pred_xyz", "=", "np", ".", "transpose", "(", "pred", ".", "nonzero", "(", ")", ")", "\n", "gt_xyz", "=", "np", ".", "transpose", "(", "gt", ".", "nonzero", "(", ")", ")", "\n", "\n", "if", "pred_xyz", ".", "shape", "[", "0", "]", "==", "0", "or", "gt_xyz", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "pred_xyz", ".", "shape", "[", "0", "]", "==", "0", "and", "gt_xyz", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "print", "(", "'chamfer distance infinite!'", ")", "\n", "return", "100000", "# infinite", "\n", "\n", "", "cd1", "=", "0", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "neigh", ".", "fit", "(", "gt_xyz", ")", "\n", "dist", ",", "indexes", "=", "neigh", ".", "kneighbors", "(", "pred_xyz", ",", "return_distance", "=", "True", ")", "\n", "cd1", "=", "dist", ".", "mean", "(", ")", "\n", "\n", "cd2", "=", "0", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "neigh", ".", "fit", "(", "pred_xyz", ")", "\n", "dist", ",", "indexes", "=", "neigh", ".", "kneighbors", "(", "gt_xyz", ",", "return_distance", "=", "True", ")", "\n", "cd2", "=", "dist", ".", "mean", "(", ")", "\n", "\n", "return", "(", "cd1", "+", "cd2", ")", "*", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf": [[129, 182], ["int", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "[].reshape", "samples.unsqueeze().cuda.unsqueeze().cuda", "shape_embedding.unsqueeze().transpose.unsqueeze().transpose", "samples.unsqueeze().cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "samples[].cpu().numpy().reshape", "torch.grid_sample", "torch.grid_sample", "shapes[].cuda", "samples[].cuda", "[].squeeze().detach().cpu", "torch.LongTensor", "torch.LongTensor", "torch.arange.long", "samples.unsqueeze().cuda.unsqueeze", "shape_embedding.unsqueeze().transpose.unsqueeze", "samples.unsqueeze().cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "samples[].cpu().numpy", "torch.arange.long", "samples.unsqueeze().cuda.reshape", "[].squeeze().detach", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "min", "samples[].cpu", "[].squeeze", "F.grid_sample.squeeze", "min", "min", "decoder"], "function", ["None"], ["", "def", "get_discrete_sdf", "(", "config", ",", "decoder", ",", "shape_embedding", ",", "N", "=", "256", ",", "max_batch", "=", "64", "**", "3", ")", ":", "\n", "    ", "'''get discrete sdf from decoder'''", "\n", "N", "=", "int", "(", "N", ")", "\n", "voxel_origin", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "voxel_size", "=", "2.0", "/", "N", "\n", "\n", "overall_index", "=", "torch", ".", "arange", "(", "0", ",", "N", "**", "3", ",", "1", ",", "out", "=", "torch", ".", "LongTensor", "(", ")", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "N", "**", "3", ",", "4", ")", "\n", "\n", "samples", "[", ":", ",", "2", "]", "=", "overall_index", "%", "N", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "%", "N", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "//", "N", ")", "%", "N", "\n", "\n", "samples", "[", ":", ",", ":", "3", "]", "+=", "0.5", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "samples", "[", ":", ",", "0", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "2", "]", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "samples", "[", ":", ",", "1", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "1", "]", "\n", "samples", "[", ":", ",", "2", "]", "=", "(", "samples", "[", ":", ",", "2", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "0", "]", "\n", "\n", "samples", "=", "samples", ".", "reshape", "(", "N", ",", "N", ",", "N", ",", "4", ")", "[", ":", ",", ":", ",", ":", "(", "N", "//", "8", ")", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "samples", "=", "samples", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# trilinear #", "\n", "shape_embedding", "=", "shape_embedding", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "scaled_coords", "=", "samples", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "        ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_embedding", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_embedding", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "\n", "num_samples", "=", "N", "*", "N", "*", "(", "N", "//", "8", ")", "\n", "\n", "samples", ".", "requires_grad", "=", "False", "\n", "head", "=", "0", "\n", "while", "head", "<", "num_samples", ":", "\n", "        ", "shapes_input", "=", "shapes", "[", ":", ",", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", ":", "]", ".", "cuda", "(", ")", "\n", "coords_input", "=", "samples", "[", ":", ",", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", ":", "3", "]", ".", "cuda", "(", ")", "\n", "\n", "samples", "[", "0", ",", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", "3", "]", "=", "(", "\n", "decoder", "(", "shapes_input", ",", "coords_input", ")", "[", "'model_out'", "]", "\n", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "\n", "head", "+=", "max_batch", "\n", "\n", "", "sdf_values", "=", "samples", "[", ":", ",", ":", ",", "3", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "N", ",", "N", ",", "N", "//", "8", ")", "\n", "\n", "return", "sdf_values", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf_label_dec": [[184, 240], ["int", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "[].reshape", "samples.unsqueeze().cuda.unsqueeze().cuda", "shape_embedding.unsqueeze().transpose.unsqueeze().transpose", "samples.unsqueeze().cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "result_sdf.cpu().numpy().reshape.cpu().numpy().reshape", "result_label.cpu().numpy().reshape.cpu().numpy().reshape", "torch.grid_sample", "torch.grid_sample", "shapes[].cuda", "samples[].cuda", "sdf_out.squeeze().detach().cpu", "label_out.squeeze().detach().cpu", "torch.LongTensor", "torch.LongTensor", "torch.arange.long", "samples.unsqueeze().cuda.unsqueeze", "shape_embedding.unsqueeze().transpose.unsqueeze", "samples.unsqueeze().cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "G_siren", "G_label", "result_sdf.cpu().numpy().reshape.cpu().numpy", "result_label.cpu().numpy().reshape.cpu().numpy", "torch.arange.long", "samples.unsqueeze().cuda.reshape", "sdf_out.squeeze().detach", "label_out.squeeze().detach", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "min", "min", "result_sdf.cpu().numpy().reshape.cpu", "result_label.cpu().numpy().reshape.cpu", "sdf_out.squeeze", "label_out.squeeze", "F.grid_sample.squeeze", "min", "min"], "function", ["None"], ["", "def", "get_discrete_sdf_label_dec", "(", "config", ",", "G_siren", ",", "G_label", ",", "shape_embedding", ",", "N", "=", "256", ",", "max_batch", "=", "64", "**", "3", ")", ":", "\n", "    ", "'''get discrete sdf from decoder'''", "\n", "N", "=", "int", "(", "N", ")", "\n", "voxel_origin", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "voxel_size", "=", "2.0", "/", "N", "\n", "\n", "overall_index", "=", "torch", ".", "arange", "(", "0", ",", "N", "**", "3", ",", "1", ",", "out", "=", "torch", ".", "LongTensor", "(", ")", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "N", "**", "3", ",", "3", ")", "\n", "\n", "samples", "[", ":", ",", "2", "]", "=", "overall_index", "%", "N", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "%", "N", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "//", "N", ")", "%", "N", "\n", "\n", "samples", "[", ":", ",", ":", "3", "]", "+=", "0.5", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "samples", "[", ":", ",", "0", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "2", "]", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "samples", "[", ":", ",", "1", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "1", "]", "\n", "samples", "[", ":", ",", "2", "]", "=", "(", "samples", "[", ":", ",", "2", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "0", "]", "\n", "\n", "samples", "=", "samples", ".", "reshape", "(", "N", ",", "N", ",", "N", ",", "3", ")", "[", ":", ",", ":", ",", ":", "(", "N", "//", "8", ")", ",", ":", "]", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "samples", "=", "samples", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "# trilinear #", "\n", "shape_embedding", "=", "shape_embedding", ".", "unsqueeze", "(", "0", ")", ".", "transpose", "(", "2", ",", "4", ")", "\n", "scaled_coords", "=", "samples", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "        ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_embedding", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_embedding", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "result_sdf", "=", "torch", ".", "zeros", "(", "N", "*", "N", "*", "(", "N", "//", "8", ")", ",", "1", ")", "\n", "result_label", "=", "torch", ".", "zeros", "(", "N", "*", "N", "*", "(", "N", "//", "8", ")", ",", "20", ")", "\n", "\n", "num_samples", "=", "N", "*", "N", "*", "(", "N", "//", "8", ")", "\n", "samples", ".", "requires_grad", "=", "False", "\n", "head", "=", "0", "\n", "while", "head", "<", "num_samples", ":", "\n", "        ", "shapes_input", "=", "shapes", "[", ":", ",", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", ":", "]", ".", "cuda", "(", ")", "\n", "coords_input", "=", "samples", "[", ":", ",", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", ":", "3", "]", ".", "cuda", "(", ")", "\n", "\n", "sdf_out", "=", "G_siren", "(", "shapes_input", ",", "coords_input", ")", "[", "'model_out'", "]", "\n", "label_out", "=", "G_label", "(", "shapes_input", ",", "coords_input", ")", "[", "'model_out'", "]", "\n", "\n", "result_sdf", "[", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", "0", "]", "=", "(", "sdf_out", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "result_label", "[", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", ":", "]", "=", "(", "label_out", ".", "squeeze", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "head", "+=", "max_batch", "\n", "\n", "", "result_sdf", "=", "result_sdf", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "N", ",", "N", ",", "N", "//", "8", ")", "\n", "result_label", "=", "result_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "N", ",", "N", ",", "N", "//", "8", ",", "20", ")", "\n", "\n", "return", "result_sdf", ",", "result_label", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_sc": [[242, 276], ["evals.get_discrete_sdf", "numpy.zeros_like", "numpy.zeros_like", "os.path.join", "os.path.join", "abs", "evals.convert_sdf_samples_to_ply", "str", "os.path.exists", "os.makedirs", "str"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.convert_sdf_samples_to_ply"], ["", "def", "scene_save_sc", "(", "model", ",", "shape_embedding", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "index", ")", ":", "\n", "# ratio = config['EVAL']['mesh']['ratio']", "\n", "    ", "ratio", "=", "1.0", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'save_predict_point'", "]", "or", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'create_mesh'", "]", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "str", "(", "index", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "", "sdf_values", "=", "get_discrete_sdf", "(", "config", ",", "model", ",", "shape_embedding", ",", "N", "=", "256", "*", "ratio", ")", "\n", "\n", "iou_out", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "cd_out", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'create_mesh'", "]", ":", "\n", "        ", "dest_ply_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "str", "(", "index", ")", "+", "'.ply'", ")", "\n", "\n", "mesh_level", "=", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'mesh_level'", "]", "\n", "\n", "voxel_size", "=", "1.0", "/", "ratio", "\n", "voxel_origin", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "\n", "sdf_values", "=", "abs", "(", "sdf_values", ")", "###", "\n", "\n", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ",", "\n", "voxel_origin", ",", "\n", "voxel_size", ",", "\n", "dest_ply_path", ",", "\n", "None", ",", "\n", "mesh_level", ",", "\n", ")", "\n", "\n", "", "return", "iou_out", ",", "cd_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_ssc_a": [[278, 363], ["os.path.join", "evals.iouEval", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "evals.get_discrete_sdf", "numpy.zeros", "numpy.ones", "os.path.join", "numpy.savetxt", "label.astype.astype", "numpy.concatenate", "os.path.join", "numpy.savetxt", "class_out.astype.astype", "numpy.concatenate", "os.path.join", "numpy.savetxt", "numpy.array", "str", "os.path.exists", "os.makedirs", "numpy.where", "evals.iouEval.reset", "evals.iouEval.addBatch", "evals.iouEval.get_confusion", "iou_out.append", "pred_iou.astype", "label_iou.astype", "numpy.transpose", "sklearn.neighbors.NearestNeighbors.kneighbors().squeeze", "numpy.concatenate", "os.path.join", "numpy.savetxt", "numpy.transpose", "numpy.transpose", "evals.get_discrete_sdf", "os.path.join", "evals.convert_sdf_samples_to_ply", "abs", "numpy.sum", "numpy.sum", "sklearn.neighbors.NearestNeighbors.kneighbors", "tuple", "numpy.transpose", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.convert_sdf_samples_to_ply"], ["", "def", "scene_save_ssc_a", "(", "model", ",", "shape_embedding", ",", "class_out", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "index", ")", ":", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "str", "(", "index", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "class_out_points", "=", "np", ".", "transpose", "(", "(", "class_out", "*", "mask", ")", ".", "nonzero", "(", ")", ")", "\n", "k_neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "k_neigh", ".", "fit", "(", "class_out_points", ")", "\n", "\n", "sdf_values", "=", "get_discrete_sdf", "(", "config", ",", "model", ",", "shape_embedding", ")", "\n", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "iou_out", "=", "[", "]", "\n", "for", "threshold", "in", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ":", "\n", "        ", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", ".", "reset", "(", ")", "\n", "complet_evaluator", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "conf", "=", "complet_evaluator", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_out", ".", "append", "(", "iou_cmplt", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'save_predict_point'", "]", ":", "\n", "            ", "pos", "=", "(", "pred_voxels", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "indexes", "=", "k_neigh", ".", "kneighbors", "(", "pred_points", ",", "return_distance", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "co_pred", "=", "class_out", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out_points", "[", "indexes", "]", ")", ")", "]", "\n", "classes", "=", "inv_map_lut", "[", "co_pred", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "pred_points", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'pred_'", "+", "str", "(", "threshold", ")", "+", "'.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "\n", "# raw", "\n", "", "", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'raw.xyz'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "raw", ")", "\n", "# label", "\n", "pos", "=", "(", "label", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "label", "=", "label", ".", "astype", "(", "np", ".", "int", ")", "\n", "classes", "=", "inv_map_lut", "[", "label", "[", "pos", "]", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "np", ".", "transpose", "(", "pos", ")", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'gt.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "# explicit ssc", "\n", "pos", "=", "(", "class_out", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "class_out", "=", "class_out", ".", "astype", "(", "np", ".", "int", ")", "\n", "classes", "=", "inv_map_lut", "[", "class_out", "[", "pos", "]", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "np", ".", "transpose", "(", "pos", ")", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ssc.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'create_mesh'", "]", ":", "\n", "\n", "        ", "voxel_origin", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "mesh_level", "=", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'mesh_level'", "]", "\n", "\n", "for", "ratio", "in", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'ratio'", "]", ":", "\n", "            ", "sdf_values", "=", "get_discrete_sdf", "(", "config", ",", "model", ",", "shape_embedding", ",", "N", "=", "256", "*", "ratio", ")", "\n", "\n", "voxel_size", "=", "1.0", "/", "ratio", "\n", "\n", "dest_ply_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "str", "(", "index", ")", "+", "'_'", "+", "str", "(", "ratio", ")", "+", "'.ply'", ")", "\n", "\n", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ",", "\n", "voxel_origin", ",", "\n", "voxel_size", ",", "\n", "dest_ply_path", ",", "\n", "class_out", "*", "mask", ",", "\n", "mesh_level", ",", "\n", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "iou_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_ssc_b": [[365, 453], ["os.path.join", "evals.iouEval", "evals.get_discrete_sdf_label_dec", "label_values.argmax", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "numpy.zeros", "numpy.ones", "os.path.join", "numpy.savetxt", "label.astype.astype", "numpy.concatenate", "os.path.join", "numpy.savetxt", "class_out.astype.astype", "numpy.concatenate", "os.path.join", "numpy.savetxt", "numpy.array", "str", "os.path.exists", "os.makedirs", "numpy.where", "evals.iouEval.reset", "evals.iouEval.addBatch", "evals.iouEval.get_confusion", "iou_out.append", "pred_iou.astype", "label_iou.astype", "numpy.transpose", "sklearn.neighbors.NearestNeighbors.kneighbors().squeeze", "numpy.concatenate", "os.path.join", "numpy.savetxt", "numpy.transpose", "numpy.transpose", "evals.get_discrete_sdf_label_dec", "abs", "os.path.join", "evals.convert_sdf_samples_to_ply", "abs", "numpy.sum", "numpy.sum", "sklearn.neighbors.NearestNeighbors.kneighbors", "tuple", "numpy.transpose", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf_label_dec", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf_label_dec", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.convert_sdf_samples_to_ply"], ["", "def", "scene_save_ssc_b", "(", "G_siren", ",", "G_label", ",", "shape_embedding", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "index", ")", ":", "\n", "    ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "str", "(", "index", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "sdf_values", ",", "label_values", "=", "get_discrete_sdf_label_dec", "(", "config", ",", "G_siren", ",", "G_label", ",", "shape_embedding", ")", "\n", "\n", "class_out", "=", "label_values", ".", "argmax", "(", "-", "1", ")", "\n", "class_out_points", "=", "np", ".", "transpose", "(", "(", "class_out", "*", "mask", ")", ".", "nonzero", "(", ")", ")", "\n", "k_neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "k_neigh", ".", "fit", "(", "class_out_points", ")", "\n", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "iou_out", "=", "[", "]", "\n", "for", "threshold", "in", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ":", "\n", "        ", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", ".", "reset", "(", ")", "\n", "complet_evaluator", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "conf", "=", "complet_evaluator", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_out", ".", "append", "(", "iou_cmplt", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'save_predict_point'", "]", ":", "\n", "            ", "pos", "=", "(", "pred_voxels", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "indexes", "=", "k_neigh", ".", "kneighbors", "(", "pred_points", ",", "return_distance", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "co_pred", "=", "class_out", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out_points", "[", "indexes", "]", ")", ")", "]", "\n", "classes", "=", "inv_map_lut", "[", "co_pred", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "pred_points", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'pred_'", "+", "str", "(", "threshold", ")", "+", "'.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "\n", "# raw", "\n", "", "", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'raw.xyz'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "raw", ")", "\n", "# label", "\n", "pos", "=", "(", "label", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "label", "=", "label", ".", "astype", "(", "np", ".", "int", ")", "\n", "classes", "=", "inv_map_lut", "[", "label", "[", "pos", "]", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "np", ".", "transpose", "(", "pos", ")", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'gt.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "# explicit ssc", "\n", "pos", "=", "(", "class_out", "*", "mask", ")", ".", "nonzero", "(", ")", "\n", "class_out", "=", "class_out", ".", "astype", "(", "np", ".", "int", ")", "\n", "classes", "=", "inv_map_lut", "[", "class_out", "[", "pos", "]", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "points", "=", "np", ".", "concatenate", "(", "(", "np", ".", "transpose", "(", "pos", ")", ",", "colors", ")", ",", "axis", "=", "1", ")", "\n", "occupancy_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ssc.txt'", ")", "\n", "np", ".", "savetxt", "(", "occupancy_f", ",", "points", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'create_mesh'", "]", ":", "\n", "\n", "        ", "voxel_origin", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "mesh_level", "=", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'mesh_level'", "]", "\n", "\n", "for", "ratio", "in", "config", "[", "'EVAL'", "]", "[", "'mesh'", "]", "[", "'ratio'", "]", ":", "\n", "            ", "sdf_values", ",", "label_values", "=", "get_discrete_sdf_label_dec", "(", "config", ",", "G_siren", ",", "G_label", ",", "shape_embedding", ",", "N", "=", "256", "*", "ratio", ")", "\n", "\n", "sdf_values", "=", "abs", "(", "sdf_values", ")", "###", "\n", "\n", "voxel_size", "=", "1.0", "/", "ratio", "\n", "\n", "dest_ply_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "str", "(", "index", ")", "+", "'_'", "+", "str", "(", "ratio", ")", "+", "'.ply'", ")", "\n", "\n", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ",", "\n", "voxel_origin", ",", "\n", "voxel_size", ",", "\n", "dest_ply_path", ",", "\n", "class_out", "*", "mask", ",", "\n", "mesh_level", ",", "\n", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "iou_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.convert_sdf_samples_to_ply": [[455, 537], ["time.time", "numpy.zeros_like", "range", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyElement.describe", "plyfile.PlyData", "logging.debug", "plyfile.PlyData.write", "logging.debug", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "skimage.measure.marching_cubes", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors().squeeze", "numpy.zeros", "range", "numpy.zeros", "range", "faces_building.append", "label.nonzero", "tuple", "tuple", "sklearn.neighbors.NearestNeighbors.kneighbors", "tuple", "numpy.concatenate", "faces[].tolist", "time.time", "numpy.transpose"], "function", ["None"], ["", "def", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ",", "\n", "voxel_grid_origin", ",", "\n", "voxel_size", ",", "\n", "ply_filename_out", ",", "\n", "label", ",", "\n", "level", ",", "\n", "offset", "=", "None", ",", "\n", "scale", "=", "None", ",", "\n", ")", ":", "\n", "    ", "'''\n    Convert sdf samples to .ply with semantic infomation\n\n    :param sdf_values: a numpy array of shape (n,n,n)\n    :voxel_grid_origin: a list of three floats: the bottom, left, down origin of the voxel grid\n    :voxel_size: float, the size of the voxels\n    :ply_filename_out: string, path of the filename to save to\n\n    This function adapted from: https://github.com/RobotLocomotion/spartan\n    '''", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "verts", ",", "faces", ",", "normals", ",", "values", "=", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", ",", "np", ".", "zeros", "(", "0", ")", "\n", "try", ":", "\n", "        ", "verts", ",", "faces", ",", "normals", ",", "values", "=", "skimage", ".", "measure", ".", "marching_cubes", "(", "\n", "sdf_values", ",", "level", "=", "level", ",", "spacing", "=", "[", "voxel_size", "]", "*", "3", "\n", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "\n", "# transform from voxel coordinates to camera coordinates", "\n", "# note x and y are flipped in the output of marching_cubes", "\n", "", "mesh_points", "=", "np", ".", "zeros_like", "(", "verts", ")", "\n", "mesh_points", "[", ":", ",", "0", "]", "=", "voxel_grid_origin", "[", "0", "]", "+", "verts", "[", ":", ",", "0", "]", "\n", "mesh_points", "[", ":", ",", "1", "]", "=", "voxel_grid_origin", "[", "1", "]", "+", "verts", "[", ":", ",", "1", "]", "\n", "mesh_points", "[", ":", ",", "2", "]", "=", "voxel_grid_origin", "[", "2", "]", "+", "verts", "[", ":", ",", "2", "]", "\n", "\n", "# apply additional offset and scale", "\n", "if", "scale", "is", "not", "None", ":", "\n", "        ", "mesh_points", "=", "mesh_points", "/", "scale", "\n", "", "if", "offset", "is", "not", "None", ":", "\n", "        ", "mesh_points", "=", "mesh_points", "-", "offset", "\n", "\n", "##################", "\n", "", "if", "label", "is", "not", "None", ":", "\n", "        ", "label_points", "=", "np", ".", "transpose", "(", "label", ".", "nonzero", "(", ")", ")", "\n", "k_neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "k_neigh", ".", "fit", "(", "label_points", ")", "\n", "indexes", "=", "k_neigh", ".", "kneighbors", "(", "mesh_points", ",", "return_distance", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "\n", "co_label", "=", "label", "[", "tuple", "(", "np", ".", "transpose", "(", "label_points", "[", "indexes", "]", ")", ")", "]", "\n", "classes", "=", "inv_map_lut", "[", "co_label", "]", "\n", "colors", "=", "color_map_lut", "[", "classes", "]", "\n", "##################", "\n", "\n", "", "num_verts", "=", "verts", ".", "shape", "[", "0", "]", "\n", "num_faces", "=", "faces", ".", "shape", "[", "0", "]", "\n", "\n", "if", "label", "is", "not", "None", ":", "\n", "        ", "verts_tuple", "=", "np", ".", "zeros", "(", "(", "num_verts", ",", ")", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num_verts", ")", ":", "\n", "            ", "verts_tuple", "[", "i", "]", "=", "tuple", "(", "np", ".", "concatenate", "(", "(", "mesh_points", "[", "i", ",", ":", "]", ",", "colors", "[", "i", ",", ":", "]", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "verts_tuple", "=", "np", ".", "zeros", "(", "(", "num_verts", ",", ")", ",", "dtype", "=", "[", "(", "\"x\"", ",", "\"f4\"", ")", ",", "(", "\"y\"", ",", "\"f4\"", ")", ",", "(", "\"z\"", ",", "\"f4\"", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num_verts", ")", ":", "\n", "            ", "verts_tuple", "[", "i", "]", "=", "tuple", "(", "mesh_points", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "", "faces_building", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_faces", ")", ":", "\n", "        ", "faces_building", ".", "append", "(", "(", "(", "faces", "[", "i", ",", ":", "]", ".", "tolist", "(", ")", ",", ")", ")", ")", "\n", "", "faces_tuple", "=", "np", ".", "array", "(", "faces_building", ",", "dtype", "=", "[", "(", "'vertex_indices'", ",", "'i4'", ",", "(", "3", ",", ")", ")", "]", ")", "\n", "\n", "el_verts", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "verts_tuple", ",", "'vertex'", ")", "\n", "el_faces", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "faces_tuple", ",", "'face'", ")", "\n", "\n", "ply_data", "=", "plyfile", ".", "PlyData", "(", "[", "el_verts", ",", "el_faces", "]", ")", "\n", "logging", ".", "debug", "(", "'saving mesh to %s'", "%", "(", "ply_filename_out", ")", ")", "\n", "ply_data", ".", "write", "(", "ply_filename_out", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "'converting to ply format and writing to file took {} s'", ".", "format", "(", "\n", "time", ".", "time", "(", ")", "-", "start_time", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.BatchLinear.forward": [[19, 29], ["collections.OrderedDict.get", "input.matmul", "collections.OrderedDict.get.unsqueeze", "collections.OrderedDict", "weight.permute", "modules.BatchLinear.named_parameters", "range", "len"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "weight", "=", "params", "[", "'weight'", "]", "\n", "\n", "output", "=", "input", ".", "matmul", "(", "weight", ".", "permute", "(", "*", "[", "i", "for", "i", "in", "range", "(", "len", "(", "weight", ".", "shape", ")", "-", "2", ")", "]", ",", "-", "1", ",", "-", "2", ")", ")", "\n", "output", "+=", "bias", ".", "unsqueeze", "(", "-", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Sine.__init": [[32, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Sine.forward": [[35, 37], ["torch.sin", "torch.sin", "torch.sin", "torch.sin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "sin", "(", "30", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.FCBlock.__init__": [[44, 85], ["torchmeta.modules.MetaModule.__init__", "modules.FCBlock.net.append", "range", "torchmeta.modules.MetaSequential", "torchmeta.modules.MetaSequential", "modules.FCBlock.net.append", "modules.FCBlock.net.append", "modules.FCBlock.net.append", "modules.FCBlock.net.apply", "modules.FCBlock.net[].apply", "modules.Sine", "torch.nn.ReLU", "torch.nn.ReLU", "modules.BatchLinear", "torchmeta.modules.MetaSequential", "torchmeta.modules.MetaSequential", "torchmeta.modules.MetaSequential", "modules.BatchLinear", "modules.BatchLinear", "modules.BatchLinear"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "num_hidden_layers", ",", "hidden_features", ",", "\n", "outermost_linear", "=", "False", ",", "nonlinearity", "=", "'sine'", ",", "weight_init", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first_layer_init", "=", "None", "\n", "\n", "# Dictionary that maps nonlinearity name to the respective function, initialization, and, if applicable,", "\n", "# special first-layer initialization scheme", "\n", "nls_and_inits", "=", "{", "'sine'", ":", "(", "Sine", "(", ")", ",", "sine_init", ",", "first_layer_sine_init", ")", ",", "\n", "'relu'", ":", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "init_weights_normal", ",", "None", ")", "}", "\n", "\n", "nl", ",", "nl_weight_init", ",", "first_layer_init", "=", "nls_and_inits", "[", "nonlinearity", "]", "\n", "\n", "if", "weight_init", "is", "not", "None", ":", "# Overwrite weight init if passed", "\n", "            ", "self", ".", "weight_init", "=", "weight_init", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_init", "=", "nl_weight_init", "\n", "\n", "", "self", ".", "net", "=", "[", "]", "\n", "self", ".", "net", ".", "append", "(", "MetaSequential", "(", "\n", "BatchLinear", "(", "in_features", ",", "hidden_features", ")", ",", "nl", "\n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_hidden_layers", ")", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "MetaSequential", "(", "\n", "BatchLinear", "(", "hidden_features", ",", "hidden_features", ")", ",", "nl", "\n", ")", ")", "\n", "\n", "", "if", "outermost_linear", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "MetaSequential", "(", "BatchLinear", "(", "hidden_features", ",", "out_features", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "MetaSequential", "(", "\n", "BatchLinear", "(", "hidden_features", ",", "out_features", ")", ",", "nl", "\n", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "MetaSequential", "(", "*", "self", ".", "net", ")", "\n", "if", "self", ".", "weight_init", "is", "not", "None", ":", "\n", "            ", "self", ".", "net", ".", "apply", "(", "self", ".", "weight_init", ")", "\n", "\n", "", "if", "first_layer_init", "is", "not", "None", ":", "# Apply special initialization to first layer, if applicable.", "\n", "            ", "self", ".", "net", "[", "0", "]", ".", "apply", "(", "first_layer_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.FCBlock.forward": [[86, 92], ["modules.FCBlock.net", "collections.OrderedDict", "modules.FCBlock.named_parameters", "torchmeta.modules.utils.get_subdict"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.modules.utils.get_subdict"], ["", "", "def", "forward", "(", "self", ",", "coords", ",", "params", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "\n", "", "output", "=", "self", ".", "net", "(", "coords", ",", "params", "=", "get_subdict", "(", "params", ",", "'net'", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SingleBVPNet.__init__": [[97, 104], ["torchmeta.modules.MetaModule.__init__", "modules.FCBlock"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "out_features", "=", "1", ",", "type", "=", "'sine'", ",", "in_features", "=", "3", ",", "\n", "mode", "=", "'mlp'", ",", "hidden_features", "=", "256", ",", "num_hidden_layers", "=", "3", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "net", "=", "FCBlock", "(", "in_features", "=", "in_features", ",", "out_features", "=", "out_features", ",", "num_hidden_layers", "=", "num_hidden_layers", ",", "\n", "hidden_features", "=", "hidden_features", ",", "outermost_linear", "=", "True", ",", "nonlinearity", "=", "type", ")", "\n", "# print(self)", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SingleBVPNet.forward": [[106, 123], ["coords.clone().detach().requires_grad_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.SingleBVPNet.net", "collections.OrderedDict", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchmeta.modules.utils.get_subdict", "modules.SingleBVPNet.named_parameters", "coords.clone().detach", "modules.encode_position", "coords.clone"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.modules.utils.get_subdict", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.encode_position"], ["", "def", "forward", "(", "self", ",", "shapes", ",", "coords", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "\n", "# Enables us to compute gradients w.r.t. coordinates", "\n", "", "coords_org", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "net_input_org", "=", "torch", ".", "cat", "(", "[", "shapes", ",", "coords_org", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "            ", "net_input", "=", "torch", ".", "cat", "(", "[", "net_input_org", "[", "...", ",", ":", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", "]", ",", "encode_position", "(", "net_input_org", "[", "...", ",", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ":", "]", ",", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", ",", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "net_input", "=", "net_input_org", "\n", "\n", "", "output", "=", "self", ".", "net", "(", "net_input", ",", "get_subdict", "(", "params", ",", "'net'", ")", ")", "\n", "return", "{", "'model_in'", ":", "net_input_org", ",", "'model_out'", ":", "output", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Net_shape.__init__": [[172, 588], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiPruning", "MinkowskiEngine.MinkowskiELU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiConvolution", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiAvgPooling", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiAvgPooling"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n", "chunk_size", "=", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", "\n", "shape_embedding_size", "=", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", "\n", "\n", "self", ".", "pruning_choice", "=", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'pruning_choice'", "]", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'nonlinearity'", "]", "==", "'elu'", ":", "\n", "            ", "nl", "=", "ME", ".", "MinkowskiELU", "(", ")", "\n", "", "elif", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'nonlinearity'", "]", "==", "'relu'", ":", "\n", "            ", "nl", "=", "ME", ".", "MinkowskiReLU", "(", ")", "\n", "\n", "", "if", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial_height'", ":", "\n", "            ", "in_channels", "=", "2", "\n", "", "else", ":", "\n", "            ", "in_channels", "=", "1", "\n", "\n", "", "enc_ch", "=", "self", ".", "ENC_CHANNELS", "\n", "dec_ch", "=", "self", ".", "DEC_CHANNELS", "\n", "\n", "# Encoder", "\n", "self", ".", "enc_block_s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "in_channels", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s1s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s2s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s4s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s8s16", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s16s32", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s32_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s32_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "# Decoder", "\n", "self", ".", "dec_block_s32s16", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "enc_ch", "[", "5", "]", ",", "\n", "dec_ch", "[", "4", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s16_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s16_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "0", "]", ":", "\n", "            ", "self", ".", "dec_s16_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "4", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "", "self", ".", "dec_block_s16s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "4", "]", ",", "\n", "dec_ch", "[", "3", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "1", "]", ":", "\n", "            ", "self", ".", "dec_s8_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "3", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "", "self", ".", "dec_block_s8s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "3", "]", ",", "\n", "dec_ch", "[", "2", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "2", "]", ":", "\n", "            ", "self", ".", "dec_s4_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "2", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "", "self", ".", "dec_block_s4s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "2", "]", ",", "\n", "dec_ch", "[", "1", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "3", "]", ":", "\n", "            ", "self", ".", "dec_s2_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "1", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "", "self", ".", "dec_block_s2s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "1", "]", ",", "\n", "dec_ch", "[", "0", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "nl", ",", "\n", ")", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "4", "]", ":", "\n", "            ", "self", ".", "dec_s1_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "0", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "# pruning", "\n", "", "self", ".", "pruning", "=", "ME", ".", "MinkowskiPruning", "(", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'output_layers'", "]", "==", "2", ":", "\n", "            ", "self", ".", "se_out", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "shape_embedding_size", "//", "2", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", "//", "2", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiConvolution", "(", "shape_embedding_size", "//", "2", ",", "shape_embedding_size", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiAvgPooling", "(", "kernel_size", "=", "chunk_size", ",", "stride", "=", "chunk_size", ",", "dimension", "=", "3", ")", ",", "\n", ")", "\n", "", "elif", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'output_layers'", "]", "==", "4", ":", "\n", "            ", "self", ".", "se_out", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "shape_embedding_size", "//", "8", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", "//", "8", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiConvolution", "(", "shape_embedding_size", "//", "8", ",", "shape_embedding_size", "//", "4", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", "//", "4", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiConvolution", "(", "shape_embedding_size", "//", "4", ",", "shape_embedding_size", "//", "2", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", "//", "2", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiConvolution", "(", "shape_embedding_size", "//", "2", ",", "shape_embedding_size", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiAvgPooling", "(", "kernel_size", "=", "chunk_size", ",", "stride", "=", "chunk_size", ",", "dimension", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Net_shape.get_target": [[590, 606], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cm.stride", "cm.kernel_map", "cm.kernel_map.items", "len", "curr_in[].long"], "methods", ["None"], ["", "", "def", "get_target", "(", "self", ",", "out", ",", "target_key", ",", "kernel_size", "=", "1", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target", "=", "torch", ".", "zeros", "(", "len", "(", "out", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "out", ".", "device", ")", "\n", "cm", "=", "out", ".", "coordinate_manager", "\n", "strided_target_key", "=", "cm", ".", "stride", "(", "\n", "target_key", ",", "out", ".", "tensor_stride", "[", "0", "]", ",", "\n", ")", "\n", "kernel_map", "=", "cm", ".", "kernel_map", "(", "\n", "out", ".", "coordinate_map_key", ",", "\n", "strided_target_key", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "region_type", "=", "1", ",", "\n", ")", "\n", "for", "k", ",", "curr_in", "in", "kernel_map", ".", "items", "(", ")", ":", "\n", "                ", "target", "[", "curr_in", "[", "0", "]", ".", "long", "(", ")", "]", "=", "1", "\n", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Net_shape.forward": [[607, 785], ["modules.D_Net_shape.enc_block_s1", "modules.D_Net_shape.enc_res_block_s1_0", "modules.D_Net_shape.enc_res_block_s1_1", "modules.D_Net_shape.enc_block_s1s2", "modules.D_Net_shape.enc_res_block_s2_0", "modules.D_Net_shape.enc_res_block_s2_1", "modules.D_Net_shape.enc_block_s2s4", "modules.D_Net_shape.enc_res_block_s4_0", "modules.D_Net_shape.enc_res_block_s4_1", "modules.D_Net_shape.enc_block_s4s8", "modules.D_Net_shape.enc_res_block_s8_0", "modules.D_Net_shape.enc_res_block_s8_1", "modules.D_Net_shape.enc_block_s8s16", "modules.D_Net_shape.enc_res_block_s16_0", "modules.D_Net_shape.enc_res_block_s16_1", "modules.D_Net_shape.enc_block_s16s32", "modules.D_Net_shape.enc_res_block_s32_0", "modules.D_Net_shape.enc_res_block_s32_1", "modules.D_Net_shape.dec_block_s32s16", "modules.D_Net_shape.dec_res_block_s16_0", "modules.D_Net_shape.dec_res_block_s16_1", "modules.D_Net_shape.dec_block_s16s8", "modules.D_Net_shape.dec_res_block_s8_0", "modules.D_Net_shape.dec_res_block_s8_1", "modules.D_Net_shape.dec_block_s8s4", "modules.D_Net_shape.dec_res_block_s4_0", "modules.D_Net_shape.dec_res_block_s4_1", "modules.D_Net_shape.dec_block_s4s2", "modules.D_Net_shape.dec_res_block_s2_0", "modules.D_Net_shape.dec_res_block_s2_1", "modules.D_Net_shape.dec_block_s2s1", "modules.D_Net_shape.dec_res_block_s1_0", "modules.D_Net_shape.dec_res_block_s1_1", "modules.D_Net_shape.se_out", "modules.D_Net_shape.dec_s16_cls", "modules.D_Net_shape.get_target", "targets.append", "out_cls.append", "modules.D_Net_shape.dec_s8_cls", "modules.D_Net_shape.get_target", "targets.append", "out_cls.append", "modules.D_Net_shape.dec_s4_cls", "modules.D_Net_shape.get_target", "targets.append", "out_cls.append", "modules.D_Net_shape.dec_s2_cls", "modules.D_Net_shape.get_target", "targets.append", "out_cls.append", "modules.D_Net_shape.dec_s1_cls", "modules.D_Net_shape.get_target", "targets.append", "out_cls.append", "keep_s16.sum", "modules.D_Net_shape.pruning", "keep_s8.sum", "modules.D_Net_shape.pruning", "keep_s4.sum", "modules.D_Net_shape.pruning", "keep_s2.sum", "modules.D_Net_shape.pruning", "keep_s1.sum", "modules.D_Net_shape.pruning"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target"], ["", "def", "forward", "(", "self", ",", "partial_in", ",", "target_key", ")", ":", "\n", "        ", "out_cls", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "enc_s1", "=", "self", ".", "enc_block_s1", "(", "partial_in", ")", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_0", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_1", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "\n", "enc_s2", "=", "self", ".", "enc_block_s1s2", "(", "enc_s1", ")", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_0", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_1", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "\n", "enc_s4", "=", "self", ".", "enc_block_s2s4", "(", "enc_s2", ")", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_0", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_1", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "\n", "enc_s8", "=", "self", ".", "enc_block_s4s8", "(", "enc_s4", ")", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_0", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_1", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "\n", "enc_s16", "=", "self", ".", "enc_block_s8s16", "(", "enc_s8", ")", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_0", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_1", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "\n", "enc_s32", "=", "self", ".", "enc_block_s16s32", "(", "enc_s16", ")", "\n", "enc_res_s32", "=", "self", ".", "enc_res_block_s32_0", "(", "enc_s32", ")", "\n", "enc_s32", "=", "enc_s32", "+", "enc_res_s32", "\n", "enc_res_s32", "=", "self", ".", "enc_res_block_s32_1", "(", "enc_s32", ")", "\n", "enc_s32", "=", "enc_s32", "+", "enc_res_s32", "\n", "\n", "##################################################", "\n", "# Decoder 32 -> 16", "\n", "##################################################", "\n", "dec_s16", "=", "self", ".", "dec_block_s32s16", "(", "enc_s32", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s16", "=", "dec_s16", "+", "enc_s16", "\n", "dec_res_s16", "=", "self", ".", "dec_res_block_s16_0", "(", "dec_s16", ")", "\n", "dec_s16", "=", "dec_s16", "+", "dec_res_s16", "\n", "dec_res_s16", "=", "self", ".", "dec_res_block_s16_1", "(", "dec_s16", ")", "\n", "dec_s16", "=", "dec_s16", "+", "dec_res_s16", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "0", "]", ":", "\n", "            ", "dec_s16_cls", "=", "self", ".", "dec_s16_cls", "(", "dec_s16", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s16", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s16_cls", ")", "\n", "keep_s16", "=", "(", "dec_s16_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "keep_s16", "+=", "target", "\n", "\n", "# Remove voxels s16", "\n", "", "if", "keep_s16", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "dec_s16", "=", "self", ".", "pruning", "(", "dec_s16", ",", "keep_s16", ")", "\n", "\n", "##################################################", "\n", "# Decoder 16 -> 8", "\n", "##################################################", "\n", "", "", "dec_s8", "=", "self", ".", "dec_block_s16s8", "(", "dec_s16", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s8", "=", "dec_s8", "+", "enc_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_0", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_1", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "1", "]", ":", "\n", "            ", "dec_s8_cls", "=", "self", ".", "dec_s8_cls", "(", "dec_s8", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s8", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s8_cls", ")", "\n", "keep_s8", "=", "(", "dec_s8_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "keep_s8", "+=", "target", "\n", "\n", "# Remove voxels s16", "\n", "", "if", "keep_s8", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "dec_s8", "=", "self", ".", "pruning", "(", "dec_s8", ",", "keep_s8", ")", "\n", "\n", "##################################################", "\n", "# Decoder 8 -> 4", "\n", "##################################################", "\n", "", "", "dec_s4", "=", "self", ".", "dec_block_s8s4", "(", "dec_s8", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s4", "=", "dec_s4", "+", "enc_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_0", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_1", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "2", "]", ":", "\n", "            ", "dec_s4_cls", "=", "self", ".", "dec_s4_cls", "(", "dec_s4", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s4", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s4_cls", ")", "\n", "keep_s4", "=", "(", "dec_s4_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "keep_s4", "+=", "target", "\n", "\n", "# Remove voxels s4", "\n", "", "if", "keep_s4", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "dec_s4", "=", "self", ".", "pruning", "(", "dec_s4", ",", "keep_s4", ")", "\n", "\n", "##################################################", "\n", "# Decoder 4 -> 2", "\n", "##################################################", "\n", "", "", "dec_s2", "=", "self", ".", "dec_block_s4s2", "(", "dec_s4", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s2", "=", "dec_s2", "+", "enc_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_0", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_1", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "3", "]", ":", "\n", "            ", "dec_s2_cls", "=", "self", ".", "dec_s2_cls", "(", "dec_s2", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s2", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s2_cls", ")", "\n", "keep_s2", "=", "(", "dec_s2_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "keep_s2", "+=", "target", "\n", "\n", "# Remove voxels s2", "\n", "", "if", "keep_s2", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "dec_s2", "=", "self", ".", "pruning", "(", "dec_s2", ",", "keep_s2", ")", "\n", "\n", "##################################################", "\n", "# Decoder 2 -> 1", "\n", "##################################################", "\n", "", "", "dec_s1", "=", "self", ".", "dec_block_s2s1", "(", "dec_s2", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s1", "=", "dec_s1", "+", "enc_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_0", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_1", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "\n", "if", "self", ".", "pruning_choice", "[", "4", "]", ":", "\n", "            ", "dec_s1_cls", "=", "self", ".", "dec_s1_cls", "(", "dec_s1", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s1", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s1_cls", ")", "\n", "keep_s1", "=", "(", "dec_s1_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Last layer does not require adding the target", "\n", "# if self.training:", "\n", "#     keep_s1 += target", "\n", "\n", "# Remove voxels s1", "\n", "if", "keep_s1", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "dec_s1", "=", "self", ".", "pruning", "(", "dec_s1", ",", "keep_s1", ")", "\n", "\n", "", "", "shape_out", "=", "self", ".", "se_out", "(", "dec_s1", ")", "\n", "\n", "return", "out_cls", ",", "targets", ",", "dec_s1", ",", "shape_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Net.__init__": [[788, 792], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.D_Net_shape"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "shapes", "=", "D_Net_shape", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Net.forward": [[793, 796], ["modules.D_Net.shapes"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "partial_in", ",", "target_key", ")", ":", "\n", "        ", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "=", "self", ".", "shapes", "(", "partial_in", ",", "target_key", ")", "\n", "return", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Seg_Net.__init__": [[804, 1094], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "{", "}", ",", "in_channels", "=", "1", ",", "out_channels", "=", "20", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n", "enc_ch", "=", "self", ".", "ENC_CHANNELS", "\n", "dec_ch", "=", "self", ".", "DEC_CHANNELS", "\n", "\n", "# Encoder", "\n", "self", ".", "enc_block_s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "in_channels", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s1s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s2s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s4s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s8s16", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "# Decoder", "\n", "self", ".", "dec_block_s16s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "dec_ch", "[", "4", "]", ",", "\n", "dec_ch", "[", "3", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_block_s8s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "dec_ch", "[", "3", "]", ",", "\n", "dec_ch", "[", "2", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_block_s4s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "dec_ch", "[", "2", "]", ",", "\n", "dec_ch", "[", "1", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_block_s2s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolutionTranspose", "(", "\n", "dec_ch", "[", "1", "]", ",", "\n", "dec_ch", "[", "0", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "out_block", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "out_channels", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "out_channels", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Seg_Net.forward": [[1096, 1178], ["modules.Seg_Net.enc_block_s1", "modules.Seg_Net.enc_res_block_s1_0", "modules.Seg_Net.enc_res_block_s1_1", "modules.Seg_Net.enc_block_s1s2", "modules.Seg_Net.enc_res_block_s2_0", "modules.Seg_Net.enc_res_block_s2_1", "modules.Seg_Net.enc_block_s2s4", "modules.Seg_Net.enc_res_block_s4_0", "modules.Seg_Net.enc_res_block_s4_1", "modules.Seg_Net.enc_block_s4s8", "modules.Seg_Net.enc_res_block_s8_0", "modules.Seg_Net.enc_res_block_s8_1", "modules.Seg_Net.enc_block_s8s16", "modules.Seg_Net.enc_res_block_s16_0", "modules.Seg_Net.enc_res_block_s16_1", "modules.Seg_Net.dec_block_s16s8", "modules.Seg_Net.dec_res_block_s8_0", "modules.Seg_Net.dec_res_block_s8_1", "modules.Seg_Net.dec_block_s8s4", "modules.Seg_Net.dec_res_block_s4_0", "modules.Seg_Net.dec_res_block_s4_1", "modules.Seg_Net.dec_block_s4s2", "modules.Seg_Net.dec_res_block_s2_0", "modules.Seg_Net.dec_res_block_s2_1", "modules.Seg_Net.dec_block_s2s1", "modules.Seg_Net.dec_res_block_s1_0", "modules.Seg_Net.dec_res_block_s1_1", "modules.Seg_Net.out_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "partial_in", ")", ":", "\n", "        ", "enc_s1", "=", "self", ".", "enc_block_s1", "(", "partial_in", ")", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_0", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_1", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "\n", "enc_s2", "=", "self", ".", "enc_block_s1s2", "(", "enc_s1", ")", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_0", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_1", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "\n", "enc_s4", "=", "self", ".", "enc_block_s2s4", "(", "enc_s2", ")", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_0", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_1", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "\n", "enc_s8", "=", "self", ".", "enc_block_s4s8", "(", "enc_s4", ")", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_0", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_1", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "\n", "enc_s16", "=", "self", ".", "enc_block_s8s16", "(", "enc_s8", ")", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_0", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_1", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "\n", "##################################################", "\n", "# Decoder 16 -> 8", "\n", "##################################################", "\n", "dec_s8", "=", "self", ".", "dec_block_s16s8", "(", "enc_s16", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s8", "=", "dec_s8", "+", "enc_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_0", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_1", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "\n", "##################################################", "\n", "# Decoder 8 -> 4", "\n", "##################################################", "\n", "dec_s4", "=", "self", ".", "dec_block_s8s4", "(", "dec_s8", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s4", "=", "dec_s4", "+", "enc_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_0", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_1", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "\n", "##################################################", "\n", "# Decoder 4 -> 2", "\n", "##################################################", "\n", "dec_s2", "=", "self", ".", "dec_block_s4s2", "(", "dec_s4", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s2", "=", "dec_s2", "+", "enc_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_0", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_1", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "\n", "##################################################", "\n", "# Decoder 2 -> 1", "\n", "##################################################", "\n", "dec_s1", "=", "self", ".", "dec_block_s2s1", "(", "dec_s2", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s1", "=", "dec_s1", "+", "enc_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_0", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_1", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "\n", "out_class", "=", "self", ".", "out_block", "(", "dec_s1", ")", "\n", "\n", "return", "out_class", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SSCNet_Decoder.__init__": [[1181, 1227], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv3d", "torch.nn.Conv3d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "nPlanes", ",", "classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Block 1", "\n", "self", ".", "b1_conv1_0", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_channels", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b1_conv1_1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "16", ",", "16", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b1_conv1_2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "16", ",", "16", ",", "3", ",", "2", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "16", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "b1_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "16", ",", "nPlanes", "[", "0", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b1_conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "0", "]", ",", "nPlanes", "[", "0", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b1_res", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "16", ",", "nPlanes", "[", "0", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 2", "\n", "self", ".", "b2_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "0", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_res", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "0", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 2_1", "\n", "self", ".", "b2_1_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_1_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_1_res", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 2_2", "\n", "self", ".", "b2_2_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_2_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b2_2_res", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "1", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 3", "\n", "self", ".", "b3_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "1", "]", ",", "nPlanes", "[", "2", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "2", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b3_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "2", "]", ",", "nPlanes", "[", "2", "]", ",", "3", ",", "1", ",", "padding", "=", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "2", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 4", "\n", "self", ".", "b4_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "2", "]", ",", "nPlanes", "[", "3", "]", ",", "3", ",", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b4_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "3", "]", ",", "nPlanes", "[", "3", "]", ",", "3", ",", "1", ",", "dilation", "=", "2", ",", "padding", "=", "2", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "3", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 5", "\n", "self", ".", "b5_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "3", "]", ",", "nPlanes", "[", "4", "]", ",", "3", ",", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "4", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b5_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "4", "]", ",", "nPlanes", "[", "4", "]", ",", "3", ",", "1", ",", "dilation", "=", "4", ",", "padding", "=", "4", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "4", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Block 6", "\n", "self", ".", "b6_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "4", "]", ",", "nPlanes", "[", "5", "]", ",", "3", ",", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "5", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "b6_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "5", "]", ",", "nPlanes", "[", "5", "]", ",", "3", ",", "1", ",", "dilation", "=", "8", ",", "padding", "=", "8", ")", ",", "nn", ".", "BatchNorm3d", "(", "nPlanes", "[", "5", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "# Prediction", "\n", "self", ".", "pre_conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "nPlanes", "[", "2", "]", "+", "nPlanes", "[", "3", "]", "+", "nPlanes", "[", "4", "]", "+", "nPlanes", "[", "5", "]", ",", "int", "(", "(", "nPlanes", "[", "2", "]", "+", "nPlanes", "[", "3", "]", "+", "nPlanes", "[", "4", "]", "+", "nPlanes", "[", "5", "]", ")", "/", "4", "*", "2", ")", ",", "1", ",", "1", ")", ",", "nn", ".", "BatchNorm3d", "(", "int", "(", "(", "nPlanes", "[", "2", "]", "+", "nPlanes", "[", "3", "]", "+", "nPlanes", "[", "4", "]", "+", "nPlanes", "[", "5", "]", ")", "/", "4", "*", "2", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "pre_conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "int", "(", "(", "nPlanes", "[", "2", "]", "+", "nPlanes", "[", "3", "]", "+", "nPlanes", "[", "4", "]", "+", "nPlanes", "[", "5", "]", ")", "/", "4", "*", "2", ")", ",", "classes", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SSCNet_Decoder.forward": [[1228, 1285], ["modules.SSCNet_Decoder.b1_conv1_0", "modules.SSCNet_Decoder.b1_conv1_1", "modules.SSCNet_Decoder.b1_conv1_2", "modules.SSCNet_Decoder.b1_res", "modules.SSCNet_Decoder.b1_conv2", "modules.SSCNet_Decoder.b1_conv3", "modules.SSCNet_Decoder.b2_res", "modules.SSCNet_Decoder.b2_conv1", "modules.SSCNet_Decoder.b2_conv2", "modules.SSCNet_Decoder.b2_1_res", "modules.SSCNet_Decoder.b2_1_conv1", "modules.SSCNet_Decoder.b2_1_conv2", "modules.SSCNet_Decoder.b2_2_res", "modules.SSCNet_Decoder.b2_2_conv1", "modules.SSCNet_Decoder.b2_2_conv2", "modules.SSCNet_Decoder.b3_conv1", "modules.SSCNet_Decoder.b3_conv2", "modules.SSCNet_Decoder.b4_conv1", "modules.SSCNet_Decoder.b4_conv2", "modules.SSCNet_Decoder.b5_conv1", "modules.SSCNet_Decoder.b5_conv2", "modules.SSCNet_Decoder.b6_conv1", "modules.SSCNet_Decoder.b6_conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modules.SSCNet_Decoder.pre_conv1", "modules.SSCNet_Decoder.pre_conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Block 1", "\n", "        ", "x", "=", "self", ".", "b1_conv1_0", "(", "x", ")", "\n", "x", "=", "self", ".", "b1_conv1_1", "(", "x", ")", "\n", "x", "=", "self", ".", "b1_conv1_2", "(", "x", ")", "\n", "\n", "# Block 1_1", "\n", "res_x", "=", "self", ".", "b1_res", "(", "x", ")", "\n", "x", "=", "self", ".", "b1_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "b1_conv3", "(", "x", ")", "\n", "x", "=", "x", "+", "res_x", "\n", "\n", "# Block 2", "\n", "res_x", "=", "self", ".", "b2_res", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_conv2", "(", "x", ")", "\n", "x", "=", "x", "+", "res_x", "\n", "\n", "# Block 2_1", "\n", "res_x", "=", "self", ".", "b2_1_res", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_1_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_1_conv2", "(", "x", ")", "\n", "x", "=", "x", "+", "res_x", "\n", "\n", "# Block 2_2", "\n", "res_x", "=", "self", ".", "b2_2_res", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_2_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "b2_2_conv2", "(", "x", ")", "\n", "x", "=", "x", "+", "res_x", "\n", "\n", "# Block 3", "\n", "b3_x1", "=", "self", ".", "b3_conv1", "(", "x", ")", "\n", "b3_x2", "=", "self", ".", "b3_conv2", "(", "b3_x1", ")", "\n", "b3_x", "=", "b3_x1", "+", "b3_x2", "\n", "\n", "# Block 4", "\n", "b4_x1", "=", "self", ".", "b4_conv1", "(", "b3_x", ")", "\n", "b4_x2", "=", "self", ".", "b4_conv2", "(", "b4_x1", ")", "\n", "b4_x", "=", "b4_x1", "+", "b4_x2", "\n", "\n", "# Block 5", "\n", "b5_x1", "=", "self", ".", "b5_conv1", "(", "b4_x", ")", "\n", "b5_x2", "=", "self", ".", "b5_conv2", "(", "b5_x1", ")", "\n", "b5_x", "=", "b5_x1", "+", "b5_x2", "\n", "\n", "# Block 6", "\n", "b6_x1", "=", "self", ".", "b6_conv1", "(", "b5_x", ")", "\n", "b6_x2", "=", "self", ".", "b6_conv2", "(", "b6_x1", ")", "\n", "b6_x", "=", "b6_x1", "+", "b6_x2", "\n", "\n", "# Concat b3,b4,b5", "\n", "x", "=", "torch", ".", "cat", "(", "(", "b3_x", ",", "b4_x", ",", "b5_x", ",", "b6_x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Prediction", "\n", "x", "=", "self", ".", "pre_conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pre_conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.PixelShuffle3D.__init__": [[1291, 1298], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "upscale_factor", ")", ":", "\n", "        ", "'''\n        :param upscale_factor: int\n        '''", "\n", "super", "(", "PixelShuffle3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "upscale_factor", "=", "upscale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.PixelShuffle3D.forward": [[1299, 1316], ["inputs.size", "inputs.contiguous().view", "inputs.contiguous().view.permute().contiguous", "inputs.contiguous().view.permute().contiguous.view", "inputs.contiguous", "inputs.contiguous().view.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "batch_size", ",", "channels", ",", "in_depth", ",", "in_height", ",", "in_width", "=", "inputs", ".", "size", "(", ")", "\n", "\n", "channels", "//=", "self", ".", "upscale_factor", "**", "3", "\n", "\n", "out_depth", "=", "in_depth", "*", "self", ".", "upscale_factor", "\n", "out_height", "=", "in_height", "*", "self", ".", "upscale_factor", "\n", "out_width", "=", "in_width", "*", "self", ".", "upscale_factor", "\n", "\n", "input_view", "=", "inputs", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "batch_size", ",", "channels", ",", "self", ".", "upscale_factor", ",", "self", ".", "upscale_factor", ",", "self", ".", "upscale_factor", ",", "\n", "in_depth", ",", "in_height", ",", "in_width", ")", "\n", "\n", "shuffle_out", "=", "input_view", ".", "permute", "(", "0", ",", "1", ",", "5", ",", "2", ",", "6", ",", "3", ",", "7", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "shuffle_out", ".", "view", "(", "batch_size", ",", "channels", ",", "out_depth", ",", "out_height", ",", "out_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SSC_Net.__init__": [[1319, 1332], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.SSCNet_Decoder", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv3d", "torch.nn.Conv3d", "torch.nn.BatchNorm3d", "torch.nn.BatchNorm3d", "torch.nn.ReLU", "torch.nn.ReLU", "modules.PixelShuffle3D"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "classes", "=", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", "\n", "\n", "in_channels", "=", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", "\n", "\n", "m", "=", "32", "\n", "\n", "self", ".", "Decoder", "=", "SSCNet_Decoder", "(", "in_channels", "=", "in_channels", ",", "nPlanes", "=", "[", "m", ",", "m", ",", "m", ",", "m", ",", "m", ",", "m", "]", ",", "classes", "=", "classes", ")", "\n", "self", ".", "upsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv3d", "(", "in_channels", "=", "classes", ",", "out_channels", "=", "classes", "*", "8", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "classes", "*", "8", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "PixelShuffle3D", "(", "upscale_factor", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.SSC_Net.forward": [[1333, 1338], ["modules.SSC_Net.Decoder", "modules.SSC_Net.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_in", ")", ":", "\n", "        ", "x", "=", "self", ".", "Decoder", "(", "x_in", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.__init__": [[1344, 1726], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiPruning", "torch.nn.Sequential", "torch.nn.Sequential", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiGenerativeConvolutionTranspose", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiConvolution", "MinkowskiEngine.MinkowskiBatchNorm", "MinkowskiEngine.MinkowskiLeakyReLU", "MinkowskiEngine.MinkowskiAvgPooling"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "{", "}", ",", "in_channels", "=", "20", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "chunk_size", "=", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", "\n", "shape_embedding_size", "=", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", "\n", "\n", "self", ".", "pruning_choice", "=", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'pruning_choice'", "]", "\n", "\n", "enc_ch", "=", "self", ".", "ENC_CHANNELS", "\n", "dec_ch", "=", "self", ".", "DEC_CHANNELS", "\n", "\n", "# Encoder", "\n", "self", ".", "enc_block_s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "in_channels", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s1s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "0", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s2s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "1", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s4s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "2", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s8s16", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "3", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s16_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_block_s16s32", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "\n", "enc_ch", "[", "4", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "dimension", "=", "3", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s32_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "enc_res_block_s32_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "enc_ch", "[", "5", "]", ",", "enc_ch", "[", "5", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "enc_ch", "[", "5", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "# Decoder", "\n", "self", ".", "dec_block_s32s16", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "enc_ch", "[", "5", "]", ",", "\n", "dec_ch", "[", "4", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s16_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s16_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "4", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "\n", "self", ".", "dec_s16_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "4", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "self", ".", "dec_block_s16s8", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "enc_ch", "[", "4", "]", ",", "\n", "dec_ch", "[", "3", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s8_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "3", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_s8_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "3", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "self", ".", "dec_block_s8s4", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "3", "]", ",", "\n", "dec_ch", "[", "2", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s4_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "2", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_s4_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "2", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "self", ".", "dec_block_s4s2", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "2", "]", ",", "\n", "dec_ch", "[", "1", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s2_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "1", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_s2_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "1", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "self", ".", "dec_block_s2s1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiGenerativeConvolutionTranspose", "(", "\n", "dec_ch", "[", "1", "]", ",", "\n", "dec_ch", "[", "0", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "dimension", "=", "3", ",", "\n", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_0", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_res_block_s1_1", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "dec_ch", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "dec_ch", "[", "0", "]", ")", ",", "\n", "ME", ".", "MinkowskiReLU", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "dec_s1_cls", "=", "ME", ".", "MinkowskiConvolution", "(", "\n", "dec_ch", "[", "0", "]", ",", "1", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ",", "dimension", "=", "3", "\n", ")", "\n", "\n", "# pruning", "\n", "self", ".", "pruning", "=", "ME", ".", "MinkowskiPruning", "(", ")", "\n", "\n", "self", ".", "se_out", "=", "nn", ".", "Sequential", "(", "\n", "ME", ".", "MinkowskiConvolution", "(", "dec_ch", "[", "0", "]", ",", "shape_embedding_size", "//", "2", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", "//", "2", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiConvolution", "(", "shape_embedding_size", "//", "2", ",", "shape_embedding_size", ",", "kernel_size", "=", "3", ",", "dimension", "=", "3", ")", ",", "\n", "ME", ".", "MinkowskiBatchNorm", "(", "shape_embedding_size", ")", ",", "\n", "ME", ".", "MinkowskiLeakyReLU", "(", ")", ",", "\n", "\n", "ME", ".", "MinkowskiAvgPooling", "(", "kernel_size", "=", "chunk_size", ",", "stride", "=", "chunk_size", ",", "dimension", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target": [[1728, 1744], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cm.stride", "cm.kernel_map", "cm.kernel_map.items", "len", "curr_in[].long"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "out", ",", "target_key", ",", "kernel_size", "=", "1", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "target", "=", "torch", ".", "zeros", "(", "len", "(", "out", ")", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "out", ".", "device", ")", "\n", "cm", "=", "out", ".", "coordinate_manager", "\n", "strided_target_key", "=", "cm", ".", "stride", "(", "\n", "target_key", ",", "out", ".", "tensor_stride", "[", "0", "]", ",", "\n", ")", "\n", "kernel_map", "=", "cm", ".", "kernel_map", "(", "\n", "out", ".", "coordinate_map_key", ",", "\n", "strided_target_key", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "region_type", "=", "1", ",", "\n", ")", "\n", "for", "k", ",", "curr_in", "in", "kernel_map", ".", "items", "(", ")", ":", "\n", "                ", "target", "[", "curr_in", "[", "0", "]", ".", "long", "(", ")", "]", "=", "1", "\n", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.forward": [[1745, 1914], ["modules.Com_Net.enc_block_s1", "modules.Com_Net.enc_res_block_s1_0", "modules.Com_Net.enc_res_block_s1_1", "modules.Com_Net.enc_block_s1s2", "modules.Com_Net.enc_res_block_s2_0", "modules.Com_Net.enc_res_block_s2_1", "modules.Com_Net.enc_block_s2s4", "modules.Com_Net.enc_res_block_s4_0", "modules.Com_Net.enc_res_block_s4_1", "modules.Com_Net.enc_block_s4s8", "modules.Com_Net.enc_res_block_s8_0", "modules.Com_Net.enc_res_block_s8_1", "modules.Com_Net.enc_block_s8s16", "modules.Com_Net.enc_res_block_s16_0", "modules.Com_Net.enc_res_block_s16_1", "modules.Com_Net.enc_block_s16s32", "modules.Com_Net.enc_res_block_s32_0", "modules.Com_Net.enc_res_block_s32_1", "modules.Com_Net.dec_block_s32s16", "modules.Com_Net.dec_res_block_s16_0", "modules.Com_Net.dec_res_block_s16_1", "modules.Com_Net.dec_s16_cls", "modules.Com_Net.get_target", "targets.append", "out_cls.append", "modules.Com_Net.dec_block_s16s8", "modules.Com_Net.dec_res_block_s8_0", "modules.Com_Net.dec_res_block_s8_1", "modules.Com_Net.dec_s8_cls", "modules.Com_Net.get_target", "targets.append", "out_cls.append", "modules.Com_Net.dec_block_s8s4", "modules.Com_Net.dec_res_block_s4_0", "modules.Com_Net.dec_res_block_s4_1", "modules.Com_Net.dec_s4_cls", "modules.Com_Net.get_target", "targets.append", "out_cls.append", "modules.Com_Net.dec_block_s4s2", "modules.Com_Net.dec_res_block_s2_0", "modules.Com_Net.dec_res_block_s2_1", "modules.Com_Net.dec_s2_cls", "modules.Com_Net.get_target", "targets.append", "out_cls.append", "modules.Com_Net.dec_block_s2s1", "modules.Com_Net.dec_res_block_s1_0", "modules.Com_Net.dec_res_block_s1_1", "modules.Com_Net.dec_s1_cls", "modules.Com_Net.get_target", "targets.append", "out_cls.append", "modules.Com_Net.se_out", "modules.Com_Net.pruning", "modules.Com_Net.pruning", "modules.Com_Net.pruning", "modules.Com_Net.pruning", "modules.Com_Net.pruning", "keep_s16.sum", "keep_s8.sum", "keep_s4.sum", "keep_s2.sum", "keep_s1.sum"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.Com_Net.get_target"], ["", "def", "forward", "(", "self", ",", "partial_in", ",", "target_key", ")", ":", "\n", "        ", "out_cls", ",", "targets", "=", "[", "]", ",", "[", "]", "\n", "\n", "enc_s1", "=", "self", ".", "enc_block_s1", "(", "partial_in", ")", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_0", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "enc_res_s1", "=", "self", ".", "enc_res_block_s1_1", "(", "enc_s1", ")", "\n", "enc_s1", "=", "enc_s1", "+", "enc_res_s1", "\n", "\n", "enc_s2", "=", "self", ".", "enc_block_s1s2", "(", "enc_s1", ")", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_0", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "enc_res_s2", "=", "self", ".", "enc_res_block_s2_1", "(", "enc_s2", ")", "\n", "enc_s2", "=", "enc_s2", "+", "enc_res_s2", "\n", "\n", "enc_s4", "=", "self", ".", "enc_block_s2s4", "(", "enc_s2", ")", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_0", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "enc_res_s4", "=", "self", ".", "enc_res_block_s4_1", "(", "enc_s4", ")", "\n", "enc_s4", "=", "enc_s4", "+", "enc_res_s4", "\n", "\n", "enc_s8", "=", "self", ".", "enc_block_s4s8", "(", "enc_s4", ")", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_0", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "enc_res_s8", "=", "self", ".", "enc_res_block_s8_1", "(", "enc_s8", ")", "\n", "enc_s8", "=", "enc_s8", "+", "enc_res_s8", "\n", "\n", "enc_s16", "=", "self", ".", "enc_block_s8s16", "(", "enc_s8", ")", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_0", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "enc_res_s16", "=", "self", ".", "enc_res_block_s16_1", "(", "enc_s16", ")", "\n", "enc_s16", "=", "enc_s16", "+", "enc_res_s16", "\n", "\n", "enc_s32", "=", "self", ".", "enc_block_s16s32", "(", "enc_s16", ")", "\n", "enc_res_s32", "=", "self", ".", "enc_res_block_s32_0", "(", "enc_s32", ")", "\n", "enc_s32", "=", "enc_s32", "+", "enc_res_s32", "\n", "enc_res_s32", "=", "self", ".", "enc_res_block_s32_1", "(", "enc_s32", ")", "\n", "enc_s32", "=", "enc_s32", "+", "enc_res_s32", "\n", "\n", "##################################################", "\n", "# Decoder 32 -> 16", "\n", "##################################################", "\n", "dec_s16", "=", "self", ".", "dec_block_s32s16", "(", "enc_s32", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s16", "=", "dec_s16", "+", "enc_s16", "\n", "dec_res_s16", "=", "self", ".", "dec_res_block_s16_0", "(", "dec_s16", ")", "\n", "dec_s16", "=", "dec_s16", "+", "dec_res_s16", "\n", "dec_res_s16", "=", "self", ".", "dec_res_block_s16_1", "(", "dec_s16", ")", "\n", "dec_s16", "=", "dec_s16", "+", "dec_res_s16", "\n", "\n", "dec_s16_cls", "=", "self", ".", "dec_s16_cls", "(", "dec_s16", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s16", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s16_cls", ")", "\n", "keep_s16", "=", "(", "dec_s16_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "keep_s16", "+=", "target", "\n", "\n", "# Remove voxels s16", "\n", "", "if", "keep_s16", ".", "sum", "(", ")", ">", "0", "and", "self", ".", "pruning_choice", "[", "0", "]", ":", "\n", "            ", "dec_s16", "=", "self", ".", "pruning", "(", "dec_s16", ",", "keep_s16", ")", "\n", "\n", "##################################################", "\n", "# Decoder 16 -> 8", "\n", "##################################################", "\n", "", "dec_s8", "=", "self", ".", "dec_block_s16s8", "(", "dec_s16", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s8", "=", "dec_s8", "+", "enc_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_0", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "dec_res_s8", "=", "self", ".", "dec_res_block_s8_1", "(", "dec_s8", ")", "\n", "dec_s8", "=", "dec_s8", "+", "dec_res_s8", "\n", "\n", "dec_s8_cls", "=", "self", ".", "dec_s8_cls", "(", "dec_s8", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s8", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s8_cls", ")", "\n", "keep_s8", "=", "(", "dec_s8_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "keep_s8", "+=", "target", "\n", "\n", "# Remove voxels s16", "\n", "", "if", "keep_s8", ".", "sum", "(", ")", ">", "0", "and", "self", ".", "pruning_choice", "[", "1", "]", ":", "\n", "            ", "dec_s8", "=", "self", ".", "pruning", "(", "dec_s8", ",", "keep_s8", ")", "\n", "\n", "##################################################", "\n", "# Decoder 8 -> 4", "\n", "##################################################", "\n", "", "dec_s4", "=", "self", ".", "dec_block_s8s4", "(", "dec_s8", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s4", "=", "dec_s4", "+", "enc_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_0", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "dec_res_s4", "=", "self", ".", "dec_res_block_s4_1", "(", "dec_s4", ")", "\n", "dec_s4", "=", "dec_s4", "+", "dec_res_s4", "\n", "\n", "dec_s4_cls", "=", "self", ".", "dec_s4_cls", "(", "dec_s4", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s4", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s4_cls", ")", "\n", "keep_s4", "=", "(", "dec_s4_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "keep_s4", "+=", "target", "\n", "\n", "# Remove voxels s4", "\n", "", "if", "keep_s4", ".", "sum", "(", ")", ">", "0", "and", "self", ".", "pruning_choice", "[", "2", "]", ":", "\n", "            ", "dec_s4", "=", "self", ".", "pruning", "(", "dec_s4", ",", "keep_s4", ")", "\n", "\n", "##################################################", "\n", "# Decoder 4 -> 2", "\n", "##################################################", "\n", "", "dec_s2", "=", "self", ".", "dec_block_s4s2", "(", "dec_s4", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s2", "=", "dec_s2", "+", "enc_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_0", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "dec_res_s2", "=", "self", ".", "dec_res_block_s2_1", "(", "dec_s2", ")", "\n", "dec_s2", "=", "dec_s2", "+", "dec_res_s2", "\n", "\n", "dec_s2_cls", "=", "self", ".", "dec_s2_cls", "(", "dec_s2", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s2", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s2_cls", ")", "\n", "keep_s2", "=", "(", "dec_s2_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "keep_s2", "+=", "target", "\n", "\n", "# Remove voxels s2", "\n", "", "if", "keep_s2", ".", "sum", "(", ")", ">", "0", "and", "self", ".", "pruning_choice", "[", "3", "]", ":", "\n", "            ", "dec_s2", "=", "self", ".", "pruning", "(", "dec_s2", ",", "keep_s2", ")", "\n", "\n", "##################################################", "\n", "# Decoder 2 -> 1", "\n", "##################################################", "\n", "", "dec_s1", "=", "self", ".", "dec_block_s2s1", "(", "dec_s2", ")", "\n", "\n", "# Add encoder features", "\n", "dec_s1", "=", "dec_s1", "+", "enc_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_0", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "dec_res_s1", "=", "self", ".", "dec_res_block_s1_1", "(", "dec_s1", ")", "\n", "dec_s1", "=", "dec_s1", "+", "dec_res_s1", "\n", "\n", "dec_s1_cls", "=", "self", ".", "dec_s1_cls", "(", "dec_s1", ")", "\n", "\n", "target", "=", "self", ".", "get_target", "(", "dec_s1", ",", "target_key", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "out_cls", ".", "append", "(", "dec_s1_cls", ")", "\n", "keep_s1", "=", "(", "dec_s1_cls", ".", "F", ">", "0", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Remove voxels s1", "\n", "if", "keep_s1", ".", "sum", "(", ")", ">", "0", "and", "self", ".", "pruning_choice", "[", "4", "]", ":", "\n", "            ", "dec_s1", "=", "self", ".", "pruning", "(", "dec_s1", ",", "keep_s1", ")", "\n", "\n", "", "shape_out", "=", "self", ".", "se_out", "(", "dec_s1", ")", "\n", "\n", "return", "out_cls", ",", "targets", ",", "shape_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Seg.__init__": [[1917, 1927], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.Seg_Net"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "if", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial_height'", ":", "\n", "            ", "in_channels", "=", "2", "\n", "", "else", ":", "\n", "            ", "in_channels", "=", "1", "\n", "\n", "", "self", ".", "classify", "=", "Seg_Net", "(", "config", ",", "in_channels", "=", "in_channels", ",", "out_channels", "=", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_Seg.forward": [[1928, 1932], ["modules.D_Seg.classify"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data_in", ")", ":", "\n", "        ", "class_out0", "=", "self", ".", "classify", "(", "data_in", ")", "\n", "\n", "return", "class_out0", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_SSC.__init__": [[1935, 1940], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.SSC_Net"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "ssc", "=", "SSC_Net", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_SSC.forward": [[1941, 1955], ["modules.D_SSC.ssc", "sparse_in.dense", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "class_out0", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "batch_size", "=", "self", ".", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "self", ".", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", "\n", "\n", "", "sparse_in", "=", "class_out0", "\n", "feature_dim", "=", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", "\n", "\n", "dense_input", "=", "sparse_in", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "batch_size", ",", "feature_dim", ",", "256", ",", "256", ",", "32", "]", ")", ")", "[", "0", "]", "\n", "\n", "class_out1", "=", "self", ".", "ssc", "(", "dense_input", ")", "\n", "\n", "return", "class_out1", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_shape.__init__": [[1958, 1963], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.Com_Net"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "shape", "=", "Com_Net", "(", "config", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.D_shape.forward": [[1964, 1970], ["modules.D_shape.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "class_out0", ",", "target_key", ")", ":", "\n", "        ", "shape_in", "=", "class_out0", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "self", ".", "shape", "(", "shape_in", ",", "target_key", ")", "\n", "\n", "return", "out_cls", ",", "targets", ",", "shape_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.G_siren.__init__": [[1973, 1987], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.SingleBVPNet"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "            ", "xyz_dim", "=", "3", "*", "(", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", "+", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", "*", "2", ")", "\n", "", "else", ":", "\n", "            ", "xyz_dim", "=", "3", "\n", "", "self", ".", "G_model", "=", "SingleBVPNet", "(", "out_features", "=", "1", ",", "\n", "type", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'nonlinearity'", "]", ",", "\n", "in_features", "=", "(", "xyz_dim", "+", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ")", ",", "\n", "hidden_features", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'hidden_features'", "]", ",", "\n", "num_hidden_layers", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'num_hidden_layers'", "]", ",", "\n", "config", "=", "config", ")", "\n", "", "def", "forward", "(", "self", ",", "shapes", ",", "coords", ")", ":", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.G_siren.forward": [[1987, 1992], ["modules.G_siren.G_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "shapes", ",", "coords", ")", ":", "\n", "\n", "        ", "g_model_output", "=", "self", ".", "G_model", "(", "shapes", ",", "coords", ")", "\n", "\n", "return", "g_model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.G_label.__init__": [[1995, 2009], ["torch.nn.Module.__init__", "torch.nn.Module.__init__", "modules.SingleBVPNet"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "            ", "xyz_dim", "=", "3", "*", "(", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", "+", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", "*", "2", ")", "\n", "", "else", ":", "\n", "            ", "xyz_dim", "=", "3", "\n", "", "self", ".", "G_model", "=", "SingleBVPNet", "(", "out_features", "=", "20", ",", "\n", "type", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'nonlinearity'", "]", ",", "\n", "in_features", "=", "(", "xyz_dim", "+", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ")", ",", "\n", "hidden_features", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'hidden_features'", "]", ",", "\n", "num_hidden_layers", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'num_hidden_layers'", "]", ",", "\n", "config", "=", "config", ")", "\n", "", "def", "forward", "(", "self", ",", "shapes", ",", "coords", ")", ":", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.G_label.forward": [[2009, 2014], ["modules.G_label.G_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "shapes", ",", "coords", ")", ":", "\n", "\n", "        ", "g_model_output", "=", "self", ".", "G_model", "(", "shapes", ",", "coords", ")", "\n", "\n", "return", "g_model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.init_weights_normal": [[125, 129], ["hasattr", "type", "type", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "init_weights_normal", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "BatchLinear", "or", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.0", ",", "nonlinearity", "=", "'relu'", ",", "mode", "=", "'fan_in'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.sine_init": [[131, 136], ["torch.no_grad", "torch.no_grad", "hasattr", "m.weight.size", "m.weight.uniform_", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "", "", "def", "sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ",", "np", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.first_layer_sine_init": [[138, 143], ["torch.no_grad", "torch.no_grad", "hasattr", "m.weight.size", "m.weight.uniform_"], "function", ["None"], ["", "", "", "def", "first_layer_sine_init", "(", "m", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "            ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "num_input", ",", "1", "/", "num_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.modules.encode_position": [[145, 166], ["range", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.sin", "torch.sin", "torch.cos", "torch.cos"], "function", ["None"], ["", "", "", "def", "encode_position", "(", "input", ",", "levels", ",", "inc_input", ")", ":", "\n", "    ", "'''\n    For each scalar, we encode it using a series of sin() and cos() functions with different frequency.\n        - With L pairs of sin/cos function, each scalar is encoded to a vector that has 2L elements. Concatenating with\n          itself results in 2L+1 elements.\n        - With C channels, we get C(2L+1) channels output.\n\n    :param input:   (..., C)            torch.float32\n    :param levels:  scalar L            int\n    :return:        (..., C*(2L+1))     torch.float32\n    '''", "\n", "\n", "# this is already doing 'log_sampling' in the official code.", "\n", "result_list", "=", "[", "input", "]", "if", "inc_input", "else", "[", "]", "\n", "for", "i", "in", "range", "(", "levels", ")", ":", "\n", "        ", "temp", "=", "2.0", "**", "i", "*", "input", "# (..., C)", "\n", "result_list", ".", "append", "(", "torch", ".", "sin", "(", "temp", ")", ")", "# (..., C)", "\n", "result_list", ".", "append", "(", "torch", ".", "cos", "(", "temp", ")", ")", "# (..., C)", "\n", "\n", "", "result_list", "=", "torch", ".", "cat", "(", "result_list", ",", "dim", "=", "-", "1", ")", "# (..., C*(2L+1)) The list has (2L+1) elements, with (..., C) shape each.", "\n", "return", "result_list", "# (..., C*(2L+1))", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.AverageMeter.__init__": [[42, 44], ["main_sc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.AverageMeter.reset": [[45, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "max", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.AverageMeter.update": [[52, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "self", ".", "val", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.eval_single": [[61, 132], ["int", "int", "int", "torch.get_rank", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_model.eval", "G_model.eval", "numpy.zeros", "numpy.ones", "range", "valid_iter.next", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_model", "evals.get_discrete_sdf", "range", "range", "len", "complet_evaluator.append", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "len", "numpy.where", "complet_evaluator[].addBatch", "len", "complet_evaluator[].get_confusion", "iou_list.append", "torch.get_rank", "writer.add_scalar", "iou_score.update", "print", "print", "print", "print", "print", "evals.iouEval", "pred_iou.astype", "label_iou.astype", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "", "", "def", "eval_single", "(", "D_model", ",", "G_model", ",", "valid_iter", ",", "total_steps", ",", "iou_score", ",", "writer", ",", "config", ")", ":", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "'================================'", ")", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_model", ".", "eval", "(", ")", "\n", "G_model", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "\n", "", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", "=", "valid_iter", ".", "next", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "=", "D_model", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "sdf_values", "=", "evals", ".", "get_discrete_sdf", "(", "config", ",", "G_model", ",", "shape_out", "[", "0", "]", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "threshold", "=", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "iou_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "conf", "=", "complet_evaluator", "[", "i", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'iou'", ",", "iou_list", "[", "1", "]", ",", "total_steps", ")", "\n", "iou_score", ".", "update", "(", "val", "=", "iou_list", "[", "1", "]", ")", "\n", "print", "(", "'================================'", ")", "\n", "print", "(", "indices", ")", "\n", "print", "(", "'iou: '", ",", "iou_list", ",", "iou_score", ".", "avg", ")", "\n", "print", "(", "'best iou: '", ",", "iou_score", ".", "max", ")", "\n", "print", "(", "'================================'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.train_single_epoch": [[134, 227], ["int", "int", "int", "iter", "enumerate", "time.time", "d_optim.zero_grad", "g_optim.zero_grad", "D_model.train", "G_model.train", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_model", "points[].cuda", "F.normalize.transpose", "points[].cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "G_model", "loss_fn.all_loss", "train_losses.append", "loss.backward", "d_optim.step", "g_optim.step", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.grid_sample", "torch.grid_sample", "value.cuda", "loss.item", "isinstance", "torch.get_rank", "writer.add_scalar", "loss_fn.all_loss.items", "pbar.update", "main_sc.eval_single", "points[].cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "gt.items", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "writer.add_scalar", "tqdm.autonotebook.tqdm.write", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "loss_data[].item", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "loss.item", "F.grid_sample.squeeze", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.all_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.eval_single"], ["", "", "", "def", "train_single_epoch", "(", "D_model", ",", "G_model", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "\n", "d_optim", ",", "g_optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", ":", "\n", "\n", "    ", "steps_til_eval", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_eval'", "]", "\n", "steps_til_summary", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_summary'", "]", "\n", "clip_grad", "=", "config", "[", "'TRAIN'", "]", "[", "'clip_grad'", "]", "\n", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "valid_iter", "=", "iter", "(", "valid_dataloader", ")", "\n", "\n", "for", "step", ",", "(", "indices", ",", "points", ",", "gt", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "\n", "d_optim", ".", "zero_grad", "(", ")", "\n", "g_optim", ".", "zero_grad", "(", ")", "\n", "\n", "D_model", ".", "train", "(", ")", "\n", "G_model", ".", "train", "(", ")", "\n", "\n", "####### D_model train #######", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "=", "D_model", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "####### G_model train #######", "\n", "", "coords", "=", "points", "[", "'coords'", "]", ".", "cuda", "(", ")", "\n", "\n", "# trilinear #", "\n", "shape_out", "=", "shape_out", ".", "transpose", "(", "2", ",", "4", ")", "# transpose axis x and z", "\n", "scaled_coords", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "gt", "=", "{", "key", ":", "value", ".", "cuda", "(", ")", "for", "key", ",", "value", "in", "gt", ".", "items", "(", ")", "}", "\n", "\n", "g_model_output", "=", "G_model", "(", "shapes", ",", "coords", ")", "\n", "\n", "loss_data", "=", "loss_fn", ".", "all_loss", "(", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", "\n", "loss", "=", "loss_data", "[", "'cmplt_loss'", "]", "+", "loss_data", "[", "'sdf'", "]", "+", "loss_data", "[", "'inter'", "]", "+", "loss_data", "[", "'normal_constraint'", "]", "+", "loss_data", "[", "'grad_constraint'", "]", "\n", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "clip_grad", ":", "\n", "            ", "if", "isinstance", "(", "clip_grad", ",", "bool", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "1.", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "clip_grad", ")", "\n", "", "", "d_optim", ".", "step", "(", ")", "\n", "g_optim", ".", "step", "(", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "for", "k", ",", "v", "in", "loss_data", ".", "items", "(", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "k", ",", "loss_data", "[", "k", "]", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "if", "not", "total_steps", "%", "steps_til_summary", ":", "\n", "                ", "tqdm", ".", "write", "(", "'Epoch %d, Total loss %0.6f, iteration time %0.6f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ",", "time", ".", "time", "(", ")", "-", "time1", ")", ")", "\n", "\n", "", "", "total_steps", "+=", "1", "\n", "\n", "if", "not", "total_steps", "%", "steps_til_eval", "and", "total_steps", ":", "\n", "            ", "eval_single", "(", "D_model", ",", "G_model", ",", "valid_iter", ",", "total_steps", ",", "iou_score", ",", "writer", ",", "config", ")", "\n", "\n", "", "", "return", "total_steps", ",", "train_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.train_pipeline": [[229, 332], ["D_model.parameters", "G_model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.get_rank", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "tqdm.autonotebook.tqdm", "main_sc.AverageMeter", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "D_model.parameters", "G_model.parameters", "torch.get_rank", "pbar.update", "train_sampler.set_epoch", "valid_sampler.set_epoch", "main_sc.train_single_epoch", "torch.get_rank", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "os.path.join", "os.path.join", "numpy.array", "len", "len", "torch.get_rank", "os.path.join", "os.path.join", "numpy.array", "D_model.module.state_dict", "G_model.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "D_model.module.state_dict", "G_model.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_single_epoch"], ["", "def", "train_pipeline", "(", "D_model", ",", "G_model", ",", "train_dataloader", ",", "valid_dataloader", ",", "train_sampler", ",", "valid_sampler", ",", "loss_fn", ",", "model_dir", ",", "config", ")", ":", "\n", "    ", "epochs_til_ckpt", "=", "config", "[", "'TRAIN'", "]", "[", "'epochs_til_ckpt'", "]", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "summaries_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summaries_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "summaries_dir", ")", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "summaries_dir", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "0", "\n", "\n", "", "epochs", "=", "config", "[", "'TRAIN'", "]", "[", "'num_epochs'", "]", "\n", "epoch", "=", "0", "\n", "lr", "=", "config", "[", "'TRAIN'", "]", "[", "'lr'", "]", "\n", "\n", "model_params", "=", "[", "]", "\n", "model_params", "+=", "D_model", ".", "parameters", "(", ")", "\n", "model_params", "+=", "G_model", ".", "parameters", "(", ")", "\n", "\n", "d_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "lr", ",", "params", "=", "D_model", ".", "parameters", "(", ")", ")", "\n", "g_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "lr", ",", "params", "=", "G_model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "        ", "d_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "d_optim", ",", "step_size", "=", "10", ",", "gamma", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", "\n", "g_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "g_optim", ",", "step_size", "=", "10", ",", "gamma", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "d_optim", ".", "load_state_dict", "(", "checkpoint", "[", "\"d_optim\"", "]", ")", "\n", "g_optim", ".", "load_state_dict", "(", "checkpoint", "[", "\"g_optim\"", "]", ")", "\n", "\n", "d_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"d_scheduler\"", "]", ")", "\n", "g_scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"g_scheduler\"", "]", ")", "\n", "\n", "total_steps", "=", "checkpoint", "[", "'total_steps'", "]", "\n", "\n", "# epoch = checkpoint['epoch']", "\n", "", "else", ":", "\n", "        ", "total_steps", "=", "0", "\n", "# epoch = 0", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "train_dataloader", ")", "*", "epochs", ")", "as", "pbar", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", "len", "(", "train_dataloader", ")", "*", "epoch", ")", "\n", "\n", "", "train_losses", "=", "[", "]", "\n", "\n", "iou_score", "=", "AverageMeter", "(", ")", "\n", "\n", "epoch_rest", "=", "epochs", "-", "epoch", "\n", "for", "i", "in", "range", "(", "epoch_rest", ")", ":", "\n", "            ", "if", "not", "epoch", "%", "epochs_til_ckpt", "and", "epoch", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_model'", ":", "D_model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_model'", ":", "G_model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'d_optim'", ":", "d_optim", ".", "state_dict", "(", ")", ",", "\n", "'g_optim'", ":", "g_optim", ".", "state_dict", "(", ")", ",", "\n", "'d_scheduler'", ":", "d_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'g_scheduler'", ":", "g_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "# 'epoch': epoch,", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_epoch_%04d_steps_%d.pth'", "%", "(", "epoch", ",", "total_steps", ")", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_epoch_%04d_steps_%d.txt'", "%", "(", "epoch", ",", "total_steps", ")", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n", "", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "valid_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "total_steps", ",", "train_losses", "=", "train_single_epoch", "(", "D_model", ",", "G_model", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "d_optim", ",", "g_optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "                ", "d_scheduler", ".", "step", "(", ")", "\n", "g_scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_model'", ":", "D_model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_model'", ":", "G_model", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'d_optim'", ":", "d_optim", ".", "state_dict", "(", ")", ",", "\n", "'g_optim'", ":", "g_optim", ".", "state_dict", "(", ")", ",", "\n", "'d_scheduler'", ":", "d_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'g_scheduler'", ":", "g_scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "# 'epoch': epoch,", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_final.pth'", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_final.txt'", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.train": [[334, 399], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Net", "modules.SingleBVPNet", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "MinkowskiEngine.MinkowskiSyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "loss.Loss_sc", "main_sc.train_pipeline", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "numpy.random.seed", "numpy.random.seed", "int", "int", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "def", "train", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "# dataset and dataloader", "\n", "    ", "train_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'train'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_train", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_model", "=", "modules", ".", "D_Net", "(", "config", ")", "\n", "# G_model = modules.G_siren(config)", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "        ", "xyz_dim", "=", "3", "*", "(", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", "+", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", "*", "2", ")", "\n", "", "else", ":", "\n", "        ", "xyz_dim", "=", "3", "\n", "", "G_model", "=", "modules", ".", "SingleBVPNet", "(", "out_features", "=", "1", ",", "\n", "type", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'nonlinearity'", "]", ",", "\n", "in_features", "=", "(", "xyz_dim", "+", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ")", ",", "\n", "hidden_features", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'hidden_features'", "]", ",", "\n", "num_hidden_layers", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'num_hidden_layers'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "D_model", "=", "D_model", ".", "cuda", "(", ")", "\n", "G_model", "=", "G_model", ".", "cuda", "(", ")", "\n", "\n", "D_model", "=", "ME", ".", "MinkowskiSyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_model", ")", "\n", "G_model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "G_model", ")", "\n", "\n", "D_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"D_model\"", "]", ")", "\n", "G_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "\"G_model\"", "]", ")", "\n", "\n", "", "loss_fn", "=", "loss", ".", "Loss_sc", "(", "train_dataset", ".", "compl_labelweights", ",", "config", "[", "'TRAIN'", "]", "[", "'loss_weights'", "]", ")", "\n", "\n", "# train", "\n", "train_pipeline", "(", "D_model", "=", "D_model", ",", "G_model", "=", "G_model", ",", "train_dataloader", "=", "train_dataloader", ",", "valid_dataloader", "=", "valid_dataloader", ",", "train_sampler", "=", "train_sampler", ",", "valid_sampler", "=", "valid_sampler", ",", "loss_fn", "=", "loss_fn", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.valid_pipeline": [[401, 488], ["int", "int", "int", "print", "results.append", "numpy.zeros_like", "results.append", "results.append", "results.append", "results.append", "numpy.savetxt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_model.eval", "G_model.eval", "numpy.zeros", "numpy.ones", "range", "range", "print", "os.path.join", "len", "complet_evaluator.append", "tqdm.autonotebook.tqdm", "enumerate", "len", "complet_evaluator[].get_confusion", "iou_list.append", "str", "str", "str", "evals.iouEval", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_model", "evals.get_discrete_sdf", "numpy.zeros_like", "range", "pbar.update", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "len", "numpy.where", "complet_evaluator[].addBatch", "numpy.sum", "len", "pred_iou.astype", "label_iou.astype", "evals.eval_cd", "numpy.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.eval_cd"], ["", "def", "valid_pipeline", "(", "D_model", ",", "G_model", ",", "valid_dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "all_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_model", ".", "eval", "(", ")", "\n", "G_model", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "valid_dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "=", "D_model", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "sdf_values", "=", "evals", ".", "get_discrete_sdf", "(", "config", ",", "G_model", ",", "shape_out", "[", "0", "]", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "single_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "                    ", "threshold", "=", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'eval_cd'", "]", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "evals", ".", "eval_cd", "(", "pred_voxels", ",", "label", ",", "mask", ")", "\n", "", "else", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "0", "\n", "\n", "", "", "all_cd", "+=", "single_cd", "\n", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", "and", "step", ">", "-", "1", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "iou_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "conf", "=", "complet_evaluator", "[", "i", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "", "print", "(", "'iou: '", ",", "iou_list", ")", "\n", "\n", "\n", "", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nIoU:  '", "+", "str", "(", "iou_list", ")", ")", "\n", "results", ".", "append", "(", "'\\nCD:   '", "+", "str", "(", "all_cd", "/", "len", "(", "valid_dataloader", ")", ")", ")", "\n", "results", ".", "append", "(", "'\\nThreshold: '", "+", "str", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'pred_iou.txt'", ")", ",", "results", ",", "fmt", "=", "'%s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.valid": [[490, 537], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Net", "modules.SingleBVPNet", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_sc.valid_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "def", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_model", "=", "modules", ".", "D_Net", "(", "config", ")", "\n", "# G_model = modules.G_siren(config)", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "        ", "xyz_dim", "=", "3", "*", "(", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", "+", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", "*", "2", ")", "\n", "", "else", ":", "\n", "        ", "xyz_dim", "=", "3", "\n", "", "G_model", "=", "modules", ".", "SingleBVPNet", "(", "out_features", "=", "1", ",", "\n", "type", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'nonlinearity'", "]", ",", "\n", "in_features", "=", "(", "xyz_dim", "+", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ")", ",", "\n", "hidden_features", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'hidden_features'", "]", ",", "\n", "num_hidden_layers", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'num_hidden_layers'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "D_model", "=", "D_model", ".", "cuda", "(", ")", "\n", "G_model", "=", "G_model", ".", "cuda", "(", ")", "\n", "\n", "D_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_model'", "]", ")", "\n", "G_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_model'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "valid_pipeline", "(", "D_model", "=", "D_model", ",", "G_model", "=", "G_model", ",", "valid_dataloader", "=", "valid_dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.visualize_pipeline": [[539, 601], ["int", "int", "int", "print", "numpy.zeros_like", "results.append", "results.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_model.eval", "G_model.eval", "results.append", "results.append", "results.append", "numpy.savetxt", "tqdm.autonotebook.tqdm", "enumerate", "print", "os.path.join", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_model", "evals.scene_save_sc", "results.append", "print", "print", "print", "str", "str", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "str", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "str"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_sc"], ["", "def", "visualize_pipeline", "(", "D_model", ",", "G_model", ",", "dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "results", "=", "[", "]", "\n", "all_iou", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "\n", "results", ".", "append", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "results", ".", "append", "(", "'========================'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_model", ".", "eval", "(", ")", "\n", "G_model", ".", "eval", "(", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "sout", ",", "shape_out", "=", "D_model", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "raw", "=", "eval_info", "[", "'raw'", "]", "[", "0", "]", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "\n", "iou", ",", "cd", "=", "evals", ".", "scene_save_sc", "(", "G_model", ",", "shape_out", "[", "0", "]", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "indices", "[", "0", "]", ")", "\n", "\n", "results", ".", "append", "(", "'>>> '", "+", "str", "(", "indices", "[", "0", "]", ")", "+", "' '", "+", "str", "(", "iou", ")", ")", "\n", "\n", "all_iou", "+=", "iou", "\n", "\n", "print", "(", "indices", ")", "\n", "print", "(", "'IoU:'", ",", "iou", ")", "\n", "print", "(", "'CD:'", ",", "cd", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", ":", "break", "\n", "\n", "", "print", "(", "'================================'", ")", "\n", "\n", "", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nAverage IoU:  '", "+", "str", "(", "all_iou", "/", "len", "(", "dataloader", ")", ")", ")", "\n", "results", ".", "append", "(", "'\\nThreshold: '", "+", "str", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'pred_iou.txt'", ")", ",", "results", ",", "fmt", "=", "'%s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.visualize": [[603, 649], ["dataio.DG_Dataset", "torch.utils.data.DataLoader", "modules.D_Net", "modules.SingleBVPNet", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_sc.visualize_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "def", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "1", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_model", "=", "modules", ".", "D_Net", "(", "config", ")", "\n", "# G_model = modules.G_siren(config)", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'encode_xyz'", "]", "==", "True", ":", "\n", "        ", "xyz_dim", "=", "3", "*", "(", "config", "[", "'TRAIN'", "]", "[", "'inc_input'", "]", "+", "config", "[", "'TRAIN'", "]", "[", "'encode_levels'", "]", "*", "2", ")", "\n", "", "else", ":", "\n", "        ", "xyz_dim", "=", "3", "\n", "", "G_model", "=", "modules", ".", "SingleBVPNet", "(", "out_features", "=", "1", ",", "\n", "type", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'nonlinearity'", "]", ",", "\n", "in_features", "=", "(", "xyz_dim", "+", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ")", ",", "\n", "hidden_features", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'hidden_features'", "]", ",", "\n", "num_hidden_layers", "=", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'num_hidden_layers'", "]", ",", "\n", "config", "=", "config", ")", "\n", "\n", "D_model", "=", "D_model", ".", "cuda", "(", ")", "\n", "G_model", "=", "G_model", ".", "cuda", "(", ")", "\n", "\n", "D_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_model", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_model'", "]", ")", "\n", "G_model", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_model'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "visualize_pipeline", "(", "D_model", "=", "D_model", ",", "G_model", "=", "G_model", ",", "dataloader", "=", "dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.parse_args": [[651, 663], ["configargparse.ArgumentParser", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "# argument", "\n", "    ", "p", "=", "configargparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "help", "=", "'train, valid, visualize'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'opt.yaml'", ",", "help", "=", "'path to config file'", ")", "\n", "p", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'name of experiment'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ")", "\n", "opt", "=", "p", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_sc.main": [[665, 712], ["main_sc.parse_args", "yaml.safe_load", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.join", "open", "torch.get_rank", "os.path.exists", "os.path.join", "os.path.exists", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "main_sc.train", "os.makedirs", "os.remove", "open", "yaml.safe_dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "main_sc.valid", "input", "main_sc.visualize", "shutil.rmtree", "os.makedirs", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "\n", "config", "=", "yaml", ".", "safe_load", "(", "open", "(", "opt", ".", "config", ",", "'r'", ")", ")", "\n", "config", "[", "'experiment_name'", "]", "=", "opt", ".", "experiment_name", "\n", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "=", "opt", ".", "task", "\n", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "local_rank", ")", "\n", "\n", "# expr path", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'logging_root'", "]", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'eval_logging_root'", "]", "\n", "", "expr_path", "=", "os", ".", "path", ".", "join", "(", "log_root", ",", "opt", ".", "experiment_name", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "expr_path", ")", ":", "\n", "            ", "if", "not", "(", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", "and", "(", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ")", ")", ":", "\n", "                ", "overwrite", "=", "input", "(", "'The model directory %s exists. Overwrite? (y/n)'", "%", "expr_path", ")", "\n", "if", "overwrite", "==", "'y'", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "expr_path", ")", "\n", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'The model directory %s already exists.'", "%", "expr_path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "\n", "# config saved", "\n", "", "config_path", "=", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "config_path", ")", "\n", "", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "", "shutil", ".", "copy", "(", "'dataio.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'dataio.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'modules.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'modules.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'loss.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'loss.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'evals.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'evals.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'main_sc.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'main_sc.py'", ")", ")", "\n", "\n", "", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ":", "\n", "        ", "train", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", ":", "\n", "        ", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.hessian": [[5, 25], ["torch.ones_like().to", "torch.zeros().to", "range", "torch.any", "range", "torch.isnan", "torch.ones_like", "torch.zeros", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["def", "hessian", "(", "y", ",", "x", ")", ":", "\n", "    ", "''' hessian of y wrt x\n    y: shape (meta_batch_size, num_observations, channels)\n    x: shape (meta_batch_size, num_observations, 2)\n    '''", "\n", "meta_batch_size", ",", "num_observations", "=", "y", ".", "shape", "[", ":", "2", "]", "\n", "grad_y", "=", "torch", ".", "ones_like", "(", "y", "[", "...", ",", "0", "]", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "h", "=", "torch", ".", "zeros", "(", "meta_batch_size", ",", "num_observations", ",", "y", ".", "shape", "[", "-", "1", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "# calculate dydx over batches for each feature value of y", "\n", "        ", "dydx", "=", "grad", "(", "y", "[", "...", ",", "i", "]", ",", "x", ",", "grad_y", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "# calculate hessian on y for each x value", "\n", "for", "j", "in", "range", "(", "x", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "h", "[", "...", ",", "i", ",", "j", ",", ":", "]", "=", "grad", "(", "dydx", "[", "...", ",", "j", "]", ",", "x", ",", "grad_y", ",", "create_graph", "=", "True", ")", "[", "0", "]", "[", "...", ",", ":", "]", "\n", "\n", "", "", "status", "=", "0", "\n", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "h", ")", ")", ":", "\n", "        ", "status", "=", "-", "1", "\n", "", "return", "h", ",", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.laplace": [[27, 30], ["diff_operators.gradient", "diff_operators.divergence"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.gradient", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.divergence"], ["", "def", "laplace", "(", "y", ",", "x", ")", ":", "\n", "    ", "grad", "=", "gradient", "(", "y", ",", "x", ")", "\n", "return", "divergence", "(", "grad", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.divergence": [[32, 37], ["range", "torch.autograd.grad", "torch.ones_like", "torch.autograd.grad"], "function", ["None"], ["", "def", "divergence", "(", "y", ",", "x", ")", ":", "\n", "    ", "div", "=", "0.", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "div", "+=", "grad", "(", "y", "[", "...", ",", "i", "]", ",", "x", ",", "torch", ".", "ones_like", "(", "y", "[", "...", ",", "i", "]", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", "[", "...", ",", "i", ":", "i", "+", "1", "]", "\n", "", "return", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.gradient": [[39, 44], ["torch.ones_like", "torch.autograd.grad"], "function", ["None"], ["", "def", "gradient", "(", "y", ",", "x", ",", "grad_outputs", "=", "None", ")", ":", "\n", "    ", "if", "grad_outputs", "is", "None", ":", "\n", "        ", "grad_outputs", "=", "torch", ".", "ones_like", "(", "y", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "y", ",", "[", "x", "]", ",", "grad_outputs", "=", "grad_outputs", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "return", "grad", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.jacobian": [[46, 60], ["torch.zeros().to", "range", "torch.any", "y[].view", "torch.isnan", "torch.zeros", "torch.autograd.grad", "torch.ones_like"], "function", ["None"], ["", "def", "jacobian", "(", "y", ",", "x", ")", ":", "\n", "    ", "''' jacobian of y wrt x '''", "\n", "meta_batch_size", ",", "num_observations", "=", "y", ".", "shape", "[", ":", "2", "]", "\n", "jac", "=", "torch", ".", "zeros", "(", "meta_batch_size", ",", "num_observations", ",", "y", ".", "shape", "[", "-", "1", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ")", ".", "to", "(", "y", ".", "device", ")", "# (meta_batch_size*num_points, 2, 2)", "\n", "for", "i", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "# calculate dydx over batches for each feature value of y", "\n", "        ", "y_flat", "=", "y", "[", "...", ",", "i", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "jac", "[", ":", ",", ":", ",", "i", ",", ":", "]", "=", "grad", "(", "y_flat", ",", "x", ",", "torch", ".", "ones_like", "(", "y_flat", ")", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "", "status", "=", "0", "\n", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "jac", ")", ")", ":", "\n", "        ", "status", "=", "-", "1", "\n", "\n", "", "return", "jac", ",", "status", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.__init__": [[108, 149], ["len", "dataio.DG_Dataset.files.items", "max", "numpy.zeros", "list", "numpy.array", "numpy.power", "os.path.join", "os.listdir", "dataio.DG_Dataset.filenames.extend", "remapdict.keys", "remapdict.values", "numpy.sum", "os.path.exists", "RuntimeError", "sorted", "dataio.DG_Dataset.files[].extend", "sorted", "len", "list", "numpy.amax", "len", "RuntimeError", "remapdict.keys", "os.path.join", "f.endswith", "f.endswith", "os.path.splitext"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "split", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "files", "=", "{", "}", "\n", "self", ".", "filenames", "=", "[", "]", "\n", "\n", "for", "ext", "in", "SPLIT_FILES", "[", "split", "]", ":", "\n", "            ", "self", ".", "files", "[", "EXT_TO_NAME", "[", "ext", "]", "]", "=", "[", "]", "\n", "\n", "", "for", "sequence", "in", "SPLIT_SEQUENCES", "[", "split", "]", ":", "\n", "            ", "voxels_path", "=", "os", ".", "path", ".", "join", "(", "config", "[", "'GENERAL'", "]", "[", "'dataset_dir'", "]", ",", "'sequences'", ",", "sequence", ",", "'voxels'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "voxels_path", ")", ":", "raise", "RuntimeError", "(", "'Voxel directory missing: '", "+", "voxels_path", ")", "\n", "\n", "files", "=", "os", ".", "listdir", "(", "voxels_path", ")", "\n", "for", "ext", "in", "SPLIT_FILES", "[", "split", "]", ":", "\n", "                ", "comletion_data", "=", "sorted", "(", "[", "os", ".", "path", ".", "join", "(", "voxels_path", ",", "f", ")", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "ext", ")", "]", ")", "\n", "if", "len", "(", "comletion_data", ")", "==", "0", ":", "raise", "RuntimeError", "(", "'Missing data for '", "+", "EXT_TO_NAME", "[", "ext", "]", ")", "\n", "self", ".", "files", "[", "EXT_TO_NAME", "[", "ext", "]", "]", ".", "extend", "(", "comletion_data", ")", "\n", "\n", "# filename", "\n", "", "self", ".", "filenames", ".", "extend", "(", "sorted", "(", "[", "(", "sequence", ",", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", ")", "for", "f", "in", "files", "if", "f", ".", "endswith", "(", "'.bin'", ")", "]", ")", ")", "\n", "\n", "", "self", ".", "num_files", "=", "len", "(", "self", ".", "filenames", ")", "\n", "config", "[", "'DATA_IO'", "]", "[", "'file_num'", "]", "=", "self", ".", "num_files", "\n", "# print('Files num: %d' % self.num_files)", "\n", "\n", "# sanity check:", "\n", "for", "k", ",", "v", "in", "self", ".", "files", ".", "items", "(", ")", ":", "\n", "            ", "assert", "(", "len", "(", "v", ")", "==", "self", ".", "num_files", ")", "\n", "\n", "", "remapdict", "=", "kitti_config", "[", "'learning_map'", "]", "\n", "maxkey", "=", "max", "(", "remapdict", ".", "keys", "(", ")", ")", "\n", "remap_lut", "=", "np", ".", "zeros", "(", "(", "maxkey", "+", "100", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "remap_lut", "[", "list", "(", "remapdict", ".", "keys", "(", ")", ")", "]", "=", "list", "(", "remapdict", ".", "values", "(", ")", ")", "\n", "remap_lut", "[", "remap_lut", "==", "0", "]", "=", "255", "# map 0 to 'invalid'", "\n", "remap_lut", "[", "0", "]", "=", "0", "# only 'empty' stays 'empty'.", "\n", "self", ".", "comletion_remap_lut", "=", "remap_lut", "\n", "\n", "complt_num_per_class", "=", "np", ".", "array", "(", "config", "[", "'DATA_IO'", "]", "[", "'complt_num_per_class'", "]", ")", "\n", "compl_labelweights", "=", "complt_num_per_class", "/", "np", ".", "sum", "(", "complt_num_per_class", ")", "\n", "self", ".", "compl_labelweights", "=", "np", ".", "power", "(", "np", ".", "amax", "(", "compl_labelweights", ")", "/", "compl_labelweights", ",", "1", "/", "3.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.__len__": [[150, 152], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_files", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.getitem_train": [[153, 267], ["dataio.unpack", "raw_data.reshape.reshape.reshape", "numpy.fromfile", "label.reshape.reshape.reshape", "dataio.unpack", "invalid.reshape.reshape.reshape", "dataio.data_augmentation", "numpy.zeros", "numpy.random.choice", "numpy.zeros", "label_volume[].reshape", "numpy.zeros", "numpy.random.uniform", "numpy.random.uniform", "numpy.concatenate", "numpy.ones", "numpy.concatenate", "torch.from_numpy().float", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.fromfile", "numpy.fromfile", "numpy.ones", "numpy.ones_like", "numpy.transpose", "numpy.random.choice", "numpy.zeros", "numpy.ones", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "torch.ones", "numpy.ones", "numpy.ones", "numpy.ones_like.nonzero", "numpy.ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.norm().reshape", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "torch.norm().reshape", "out_raw_data[].reshape", "torch.cat", "tuple", "torch.norm", "numpy.transpose", "torch.norm", "numpy.zeros.astype", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.unpack", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.unpack", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.data_augmentation"], ["", "def", "getitem_train", "(", "self", ",", "idx", ")", ":", "\n", "# input, label, invalid, mask", "\n", "        ", "raw_data", "=", "unpack", "(", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'input'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "raw_data", "=", "raw_data", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "\n", "label", "=", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'label'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "label", "=", "self", ".", "comletion_remap_lut", "[", "label", "]", "\n", "label", "=", "label", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "\n", "invalid", "=", "unpack", "(", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'invalid'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "invalid", "=", "invalid", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "\n", "# augmentation", "\n", "raw_data_sparse", ",", "occupancy_normal", ",", "label_volume", ",", "invalid", "=", "data_augmentation", "(", "raw_data", ",", "label", ",", "invalid", ",", "self", ".", "config", ")", "\n", "\n", "# points", "\n", "point_cloud_size", "=", "occupancy_normal", ".", "shape", "[", "0", "]", "\n", "\n", "occupancy_sparse", "=", "np", ".", "zeros", "(", "[", "point_cloud_size", ",", "3", "]", ")", "\n", "occupancy_sparse", "=", "occupancy_normal", "[", ":", ",", ":", "3", "]", "\n", "\n", "# on&off surface points coordinates and normals", "\n", "on_surface_size", "=", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'G_TRAIN'", "]", "[", "'on_surface_size'", "]", "\n", "rand_idcs", "=", "np", ".", "random", ".", "choice", "(", "point_cloud_size", ",", "size", "=", "on_surface_size", ")", "\n", "\n", "on_surface_coords", "=", "np", ".", "zeros", "(", "[", "on_surface_size", ",", "3", "]", ")", "\n", "on_surface_coords", "=", "occupancy_normal", "[", "rand_idcs", ",", ":", "3", "]", "\n", "\n", "on_surface_labels", "=", "label_volume", "[", "tuple", "(", "np", ".", "transpose", "(", "on_surface_coords", ".", "astype", "(", "np", ".", "int", ")", ")", ")", "]", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "on_surface_coords", "+=", "0.5", "\n", "on_surface_coords", "=", "on_surface_coords", "/", "256.0", "\n", "on_surface_coords", "-=", "0.5", "\n", "on_surface_coords", "*=", "2", "\n", "\n", "on_surface_normals", "=", "occupancy_normal", "[", "rand_idcs", ",", "3", ":", "]", "\n", "on_surface_occ", "=", "np", ".", "zeros", "(", "on_surface_size", ")", "\n", "\n", "off_count_scale", "=", "self", ".", "config", "[", "'DATA_IO'", "]", "[", "'off_count_scale'", "]", "\n", "\n", "off_surface_size", "=", "on_surface_size", "//", "off_count_scale", "\n", "off_surface_xy", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "(", "off_surface_size", ",", "2", ")", ")", "\n", "off_surface_z", "=", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "-", "0.75", ",", "size", "=", "(", "off_surface_size", ",", "1", ")", ")", "# -1,-0.75", "\n", "off_surface_coords", "=", "np", ".", "concatenate", "(", "(", "off_surface_xy", ",", "off_surface_z", ")", ",", "axis", "=", "1", ")", "\n", "\n", "off_surface_normals", "=", "np", ".", "ones", "(", "(", "off_surface_size", ",", "3", ")", ")", "*", "-", "1", "\n", "if", "self", ".", "config", "[", "'DATA_IO'", "]", "[", "'ignore_off_label'", "]", ":", "\n", "            ", "off_surface_labels", "=", "np", ".", "ones", "(", "off_surface_size", ")", "*", "255", "\n", "", "else", ":", "\n", "            ", "off_surface_labels", "=", "np", ".", "ones", "(", "off_surface_size", ")", "*", "0", "\n", "", "off_surface_occ", "=", "np", ".", "ones", "(", "off_surface_size", ")", "\n", "\n", "# off_surface vertex", "\n", "if", "self", ".", "config", "[", "'DATA_IO'", "]", "[", "'use_off_vertex'", "]", ":", "\n", "            ", "off_surface_v_size", "=", "on_surface_size", "//", "off_count_scale", "\n", "\n", "empty", "=", "np", ".", "ones_like", "(", "label_volume", ")", "\n", "empty", "[", "label_volume", "!=", "0", "]", "=", "0", "\n", "empty_vertex", "=", "np", ".", "transpose", "(", "empty", ".", "nonzero", "(", ")", ")", "\n", "\n", "rand_idcs", "=", "np", ".", "random", ".", "choice", "(", "empty_vertex", ".", "shape", "[", "0", "]", ",", "size", "=", "off_surface_v_size", ")", "\n", "\n", "off_surface_v_coords", "=", "empty_vertex", "[", "rand_idcs", ",", ":", "3", "]", "\n", "off_surface_v_coords", "=", "off_surface_v_coords", "*", "1.0", "+", "0.5", "\n", "off_surface_v_coords", "=", "off_surface_v_coords", "/", "256.0", "\n", "off_surface_v_coords", "-=", "0.5", "\n", "off_surface_v_coords", "*=", "2", "\n", "\n", "off_surface_v_normals", "=", "np", ".", "ones", "(", "(", "off_surface_v_size", ",", "3", ")", ")", "*", "-", "1", "\n", "off_surface_v_labels", "=", "np", ".", "zeros", "(", "off_surface_v_size", ")", "\n", "off_surface_v_occ", "=", "np", ".", "ones", "(", "off_surface_v_size", ")", "\n", "", "else", ":", "\n", "            ", "off_surface_v_size", "=", "0", "\n", "off_surface_v_coords", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "off_surface_v_normals", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "off_surface_v_labels", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "off_surface_v_occ", "=", "np", ".", "array", "(", "[", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# output", "\n", "", "coords", "=", "np", ".", "concatenate", "(", "(", "on_surface_coords", ",", "off_surface_coords", ",", "off_surface_v_coords", ")", ",", "axis", "=", "0", ")", "\n", "# coords = np.concatenate((on_surface_coords, off_surface_v_coords), axis=0)", "\n", "out_coords", "=", "torch", ".", "from_numpy", "(", "coords", ")", ".", "float", "(", ")", "\n", "\n", "sdf", "=", "np", ".", "zeros", "(", "(", "on_surface_size", "+", "off_surface_size", "+", "off_surface_v_size", ",", "1", ")", ")", "# on-surface = 0", "\n", "sdf", "[", "on_surface_size", ":", ",", ":", "]", "=", "-", "1", "# off-surface = -1", "\n", "normals", "=", "np", ".", "concatenate", "(", "(", "on_surface_normals", ",", "off_surface_normals", ",", "off_surface_v_normals", ")", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "(", "on_surface_labels", ",", "off_surface_labels", ",", "off_surface_v_labels", ")", ",", "axis", "=", "0", ")", "\n", "occ", "=", "np", ".", "concatenate", "(", "(", "on_surface_occ", ",", "off_surface_occ", ",", "off_surface_v_occ", ")", ",", "axis", "=", "0", ")", "\n", "\n", "out_sdf", "=", "torch", ".", "from_numpy", "(", "sdf", ")", ".", "float", "(", ")", "\n", "out_normals", "=", "torch", ".", "from_numpy", "(", "normals", ")", ".", "float", "(", ")", "\n", "out_labels_point", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "long", "(", ")", "\n", "out_occ", "=", "torch", ".", "from_numpy", "(", "occ", ")", ".", "float", "(", ")", "\n", "\n", "out_label", "=", "torch", ".", "from_numpy", "(", "label_volume", ")", ".", "long", "(", ")", "\n", "out_invalid", "=", "torch", ".", "from_numpy", "(", "invalid", ")", ".", "long", "(", ")", "\n", "\n", "out_raw_data", "=", "torch", ".", "from_numpy", "(", "raw_data_sparse", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'occupancy'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "ones", "(", "(", "len", "(", "out_raw_data", ")", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "norm", "(", "out_raw_data", "-", "torch", ".", "tensor", "(", "[", "0", ",", "127.5", ",", "0", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial_height'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "norm", "(", "out_raw_data", "-", "torch", ".", "tensor", "(", "[", "0", ",", "127.5", ",", "0", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "z", "=", "out_raw_data", "[", ":", ",", "2", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "out_raw_feat", "=", "torch", ".", "cat", "(", "(", "out_raw_feat", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "out_occupancy", "=", "torch", ".", "from_numpy", "(", "occupancy_sparse", ")", ".", "float", "(", ")", "\n", "\n", "return", "idx", ",", "{", "'coords'", ":", "out_coords", "}", ",", "{", "'sdf'", ":", "out_sdf", ",", "'normals'", ":", "out_normals", ",", "'label'", ":", "out_label", ",", "'invalid'", ":", "out_invalid", ",", "'label_points'", ":", "out_labels_point", ",", "'occ'", ":", "out_occ", "}", ",", "{", "'raw'", ":", "out_raw_data", ",", "'raw_feat'", ":", "out_raw_feat", ",", "'occupancy'", ":", "out_occupancy", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.getitem_valid": [[268, 298], ["dataio.unpack", "raw_data.reshape.reshape.reshape", "raw_data.reshape.reshape.nonzero", "numpy.transpose", "numpy.fromfile", "label.reshape.reshape.reshape", "dataio.unpack", "invalid.reshape.reshape.reshape", "dataio.get_eval_mask", "torch.from_numpy().float", "numpy.fromfile", "numpy.fromfile", "torch.ones", "torch.from_numpy", "torch.norm().reshape", "len", "torch.norm().reshape", "out_raw_data[].reshape", "torch.cat", "torch.norm", "torch.norm", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.unpack", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.unpack", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.get_eval_mask"], ["", "def", "getitem_valid", "(", "self", ",", "idx", ")", ":", "\n", "# input, label, invalid, mask", "\n", "        ", "raw_data", "=", "unpack", "(", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'input'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "raw_data", "=", "raw_data", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "raw_pos", "=", "raw_data", ".", "nonzero", "(", ")", "\n", "raw_data_sparse", "=", "np", ".", "transpose", "(", "raw_pos", ")", "\n", "\n", "label", "=", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'label'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "label", "=", "self", ".", "comletion_remap_lut", "[", "label", "]", "\n", "label", "=", "label", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "\n", "invalid", "=", "unpack", "(", "np", ".", "fromfile", "(", "self", ".", "files", "[", "'invalid'", "]", "[", "idx", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "invalid", "=", "invalid", ".", "reshape", "(", "VOXEL_SCALE", ")", "\n", "\n", "mask", "=", "get_eval_mask", "(", "label", ",", "invalid", ")", "\n", "\n", "out_raw_data", "=", "torch", ".", "from_numpy", "(", "raw_data_sparse", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'occupancy'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "ones", "(", "(", "len", "(", "out_raw_data", ")", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "norm", "(", "out_raw_data", "-", "torch", ".", "tensor", "(", "[", "0", ",", "127.5", ",", "0", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "config", "[", "'TRAIN'", "]", "[", "'D_TRAIN'", "]", "[", "'D_input'", "]", "==", "'radial_height'", ":", "\n", "            ", "out_raw_feat", "=", "torch", ".", "norm", "(", "out_raw_data", "-", "torch", ".", "tensor", "(", "[", "0", ",", "127.5", ",", "0", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "z", "=", "out_raw_data", "[", ":", ",", "2", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "out_raw_feat", "=", "torch", ".", "cat", "(", "(", "out_raw_feat", ",", "z", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "index_info", "=", "self", ".", "filenames", "[", "idx", "]", "[", "0", "]", "+", "'_'", "+", "self", ".", "filenames", "[", "idx", "]", "[", "1", "]", "\n", "return", "index_info", ",", "{", "'raw'", ":", "out_raw_data", ",", "'raw_feat'", ":", "out_raw_feat", "}", ",", "{", "'label'", ":", "label", ",", "'mask'", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.__getitem__": [[299, 304], ["dataio.DG_Dataset.getitem_train", "dataio.DG_Dataset.getitem_valid"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.getitem_train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_Dataset.getitem_valid"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "return", "self", ".", "getitem_train", "(", "idx", ")", "\n", "", "elif", "self", ".", "split", "==", "'valid'", ":", "\n", "            ", "return", "self", ".", "getitem_valid", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.unpack": [[44, 57], ["numpy.zeros"], "function", ["None"], ["def", "unpack", "(", "compressed", ")", ":", "\n", "    ", "''' given a bit encoded voxel grid, make a normal voxel grid out of it.  '''", "\n", "uncompressed", "=", "np", ".", "zeros", "(", "compressed", ".", "shape", "[", "0", "]", "*", "8", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "uncompressed", "[", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "7", "&", "1", "\n", "uncompressed", "[", "1", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "6", "&", "1", "\n", "uncompressed", "[", "2", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "5", "&", "1", "\n", "uncompressed", "[", "3", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "4", "&", "1", "\n", "uncompressed", "[", "4", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "3", "&", "1", "\n", "uncompressed", "[", "5", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "2", "&", "1", "\n", "uncompressed", "[", "6", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", ">>", "1", "&", "1", "\n", "uncompressed", "[", "7", ":", ":", "8", "]", "=", "compressed", "[", ":", "]", "&", "1", "\n", "\n", "return", "uncompressed", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.get_eval_mask": [[59, 71], ["numpy.ones_like"], "function", ["None"], ["", "def", "get_eval_mask", "(", "labels", ",", "invalid_voxels", ")", ":", "\n", "  ", "'''\n  Ignore labels set to 255 and invalid voxels (the ones never hit by a laser ray, probed using ray tracing)\n  :param labels: input ground truth voxels\n  :param invalid_voxels: voxels ignored during evaluation since the lie beyond the scene that was captured by the laser\n  :return: boolean mask to subsample the voxels to evaluate\n  '''", "\n", "masks", "=", "np", ".", "ones_like", "(", "labels", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "masks", "[", "labels", "==", "255", "]", "=", "False", "\n", "masks", "[", "invalid_voxels", "==", "1", "]", "=", "False", "\n", "\n", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.data_augmentation": [[73, 105], ["scipy.ndimage.rotate", "scipy.ndimage.rotate", "scipy.ndimage.rotate", "np.flip.nonzero", "numpy.transpose", "np.flip.nonzero", "numpy.transpose", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.estimate_normals", "o3d.geometry.PointCloud.orient_normals_to_align_with_direction", "numpy.concatenate", "random.randint", "numpy.flip", "numpy.flip", "numpy.flip", "open3d.geometry.KDTreeSearchParamKNN", "numpy.array", "numpy.asarray", "numpy.asarray", "numpy.random.rand"], "function", ["None"], ["", "def", "data_augmentation", "(", "raw", ",", "label", ",", "invalid", ",", "config", ")", ":", "\n", "    ", "'''flip & rotate'''", "\n", "if", "config", "[", "'DATA_IO'", "]", "[", "'augmentation'", "]", ":", "\n", "        ", "angle", "=", "config", "[", "'DATA_IO'", "]", "[", "'augmentation_angle'", "]", "\n", "theta", "=", "random", ".", "randint", "(", "0", ",", "angle", "*", "2", ")", "-", "angle", "\n", "if", "config", "[", "'DATA_IO'", "]", "[", "'augmentation_flip'", "]", "and", "np", ".", "random", ".", "rand", "(", "1", ")", ">", "0.5", ":", "\n", "            ", "raw", "=", "np", ".", "flip", "(", "raw", ",", "axis", "=", "1", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "1", ")", "\n", "invalid", "=", "np", ".", "flip", "(", "invalid", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "0", "\n", "\n", "", "raw", "=", "ndimage", ".", "rotate", "(", "raw", ",", "theta", ",", "reshape", "=", "False", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ")", "\n", "label", "=", "ndimage", ".", "rotate", "(", "label", ",", "theta", ",", "reshape", "=", "False", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ",", "cval", "=", "0", ")", "\n", "invalid", "=", "ndimage", ".", "rotate", "(", "invalid", ",", "theta", ",", "reshape", "=", "False", ",", "order", "=", "0", ",", "mode", "=", "'constant'", ",", "cval", "=", "1", ")", "\n", "\n", "# raw points", "\n", "raw_pos", "=", "raw", ".", "nonzero", "(", ")", "\n", "raw_points", "=", "np", ".", "transpose", "(", "raw_pos", ")", "\n", "\n", "# label points", "\n", "label_pos", "=", "label", ".", "nonzero", "(", ")", "\n", "label_value", "=", "label", "[", "label_pos", "]", "\n", "label_points", "=", "np", ".", "transpose", "(", "label_pos", ")", "\n", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "label_points", "[", ":", ",", ":", "3", "]", ")", "\n", "pcd", ".", "estimate_normals", "(", "search_param", "=", "o3d", ".", "geometry", ".", "KDTreeSearchParamKNN", "(", "knn", "=", "30", ")", ")", "\n", "pcd", ".", "orient_normals_to_align_with_direction", "(", "orientation_reference", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", ")", "\n", "occupancy_normal", "=", "np", ".", "concatenate", "(", "(", "np", ".", "asarray", "(", "pcd", ".", "points", ")", ",", "np", ".", "asarray", "(", "pcd", ".", "normals", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "raw_points", ",", "occupancy_normal", ",", "label", ",", "invalid", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_DataMerge_train": [[306, 355], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "MinkowskiEngine.utils.batched_coordinates", "torch.cat", "MinkowskiEngine.utils.batched_coordinates", "out_indices.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "out_raw_data.append", "out_feature.append", "out_occupancy.append"], "function", ["None"], ["", "", "", "def", "DG_DataMerge_train", "(", "batch", ")", ":", "\n", "    ", "out_coords", "=", "[", "]", "\n", "out_sdf", "=", "[", "]", "\n", "out_normals", "=", "[", "]", "\n", "out_labels", "=", "[", "]", "\n", "out_invalid", "=", "[", "]", "\n", "out_label_points", "=", "[", "]", "\n", "out_occ", "=", "[", "]", "\n", "out_indices", "=", "[", "]", "\n", "out_raw_data", "=", "[", "]", "\n", "out_feature", "=", "[", "]", "\n", "out_occupancy", "=", "[", "]", "\n", "\n", "for", "num", ",", "example", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "idx", ",", "points", ",", "gt", ",", "raw_occupancy", "=", "example", "\n", "\n", "out_indices", ".", "append", "(", "idx", ")", "\n", "\n", "out_coords", ".", "append", "(", "points", "[", "'coords'", "]", ")", "\n", "\n", "out_sdf", ".", "append", "(", "gt", "[", "'sdf'", "]", ")", "\n", "out_normals", ".", "append", "(", "gt", "[", "'normals'", "]", ")", "\n", "out_labels", ".", "append", "(", "gt", "[", "'label'", "]", ")", "\n", "out_invalid", ".", "append", "(", "gt", "[", "'invalid'", "]", ")", "\n", "out_label_points", ".", "append", "(", "gt", "[", "'label_points'", "]", ")", "\n", "out_occ", ".", "append", "(", "gt", "[", "'occ'", "]", ")", "\n", "\n", "out_raw_data", ".", "append", "(", "raw_occupancy", "[", "'raw'", "]", ")", "\n", "out_feature", ".", "append", "(", "raw_occupancy", "[", "'raw_feat'", "]", ")", "\n", "out_occupancy", ".", "append", "(", "raw_occupancy", "[", "'occupancy'", "]", ")", "\n", "\n", "", "out_coords", "=", "torch", ".", "stack", "(", "out_coords", ")", "\n", "\n", "out_sdf", "=", "torch", ".", "stack", "(", "out_sdf", ")", "\n", "out_normals", "=", "torch", ".", "stack", "(", "out_normals", ")", "\n", "out_labels", "=", "torch", ".", "stack", "(", "out_labels", ")", "\n", "out_invalid", "=", "torch", ".", "stack", "(", "out_invalid", ")", "\n", "out_label_points", "=", "torch", ".", "stack", "(", "out_label_points", ")", "\n", "out_occ", "=", "torch", ".", "stack", "(", "out_occ", ")", "\n", "\n", "indices_out", "=", "out_indices", "\n", "points_out", "=", "{", "'coords'", ":", "out_coords", "}", "\n", "gt_output", "=", "{", "'sdf'", ":", "out_sdf", ",", "'normals'", ":", "out_normals", ",", "'label'", ":", "out_labels", ",", "'invalid'", ":", "out_invalid", ",", "'out_label_points'", ":", "out_label_points", ",", "'occ'", ":", "out_occ", "}", "\n", "\n", "raw_data_out", "=", "ME", ".", "utils", ".", "batched_coordinates", "(", "out_raw_data", ")", "\n", "feature_out", "=", "torch", ".", "cat", "(", "out_feature", ")", "\n", "occupancy_out", "=", "ME", ".", "utils", ".", "batched_coordinates", "(", "out_occupancy", ")", "\n", "\n", "return", "indices_out", ",", "points_out", ",", "gt_output", ",", "raw_data_out", ",", "feature_out", ",", "occupancy_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.dataio.DG_DataMerge_valid": [[357, 390], ["enumerate", "numpy.stack", "numpy.stack", "numpy.stack", "MinkowskiEngine.utils.batched_coordinates", "torch.cat", "MinkowskiEngine.utils.batched_coordinates", "out_indices.append", "np.stack.append", "np.stack.append", "out_raw_data.append", "out_feature.append", "out_occupancy.append", "torch.zeros"], "function", ["None"], ["", "def", "DG_DataMerge_valid", "(", "batch", ")", ":", "\n", "    ", "out_labels", "=", "[", "]", "\n", "out_masks", "=", "[", "]", "\n", "out_indices", "=", "[", "]", "\n", "out_raw_data", "=", "[", "]", "\n", "out_feature", "=", "[", "]", "\n", "out_occupancy", "=", "[", "]", "\n", "\n", "for", "num", ",", "example", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "idx", ",", "raw_occupancy", ",", "eval_info", "=", "example", "\n", "\n", "out_indices", ".", "append", "(", "idx", ")", "\n", "\n", "out_labels", ".", "append", "(", "eval_info", "[", "'label'", "]", ")", "\n", "out_masks", ".", "append", "(", "eval_info", "[", "'mask'", "]", ")", "\n", "\n", "out_raw_data", ".", "append", "(", "raw_occupancy", "[", "'raw'", "]", ")", "\n", "out_feature", ".", "append", "(", "raw_occupancy", "[", "'raw_feat'", "]", ")", "\n", "\n", "out_occupancy", ".", "append", "(", "torch", ".", "zeros", "(", "[", "1", ",", "3", "]", ")", ")", "# no use", "\n", "\n", "", "indices_out", "=", "out_indices", "\n", "out_raw", "=", "np", ".", "stack", "(", "out_raw_data", ",", "axis", "=", "0", ")", "\n", "out_labels", "=", "np", ".", "stack", "(", "out_labels", ",", "axis", "=", "0", ")", "\n", "out_masks", "=", "np", ".", "stack", "(", "out_masks", ",", "axis", "=", "0", ")", "\n", "eval_out", "=", "{", "'raw'", ":", "out_raw", ",", "'label'", ":", "out_labels", ",", "'mask'", ":", "out_masks", "}", "\n", "\n", "raw_data_out", "=", "ME", ".", "utils", ".", "batched_coordinates", "(", "out_raw_data", ")", "\n", "feature_out", "=", "torch", ".", "cat", "(", "out_feature", ")", "\n", "\n", "occupancy_out", "=", "ME", ".", "utils", ".", "batched_coordinates", "(", "out_occupancy", ")", "\n", "\n", "return", "indices_out", ",", "eval_out", ",", "raw_data_out", ",", "feature_out", ",", "occupancy_out", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_sc.__init__": [[13, 16], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "complt_w", ",", "loss_weights", ")", ":", "\n", "        ", "self", ".", "complt_w", "=", "torch", ".", "Tensor", "(", "complt_w", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_sc.cmplt_loss": [[17, 27], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "zip", "len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.nn.BCEWithLogitsLoss.", "out_cl.F.squeeze", "target.type().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "target.type"], "methods", ["None"], ["", "def", "cmplt_loss", "(", "self", ",", "out_cls", ",", "targets", ")", ":", "\n", "\n", "        ", "cmplt_crit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "num_layers", ",", "cmplt_loss", "=", "len", "(", "out_cls", ")", ",", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "for", "out_cl", ",", "target", "in", "zip", "(", "out_cls", ",", "targets", ")", ":", "\n", "            ", "curr_loss", "=", "cmplt_crit", "(", "out_cl", ".", "F", ".", "squeeze", "(", ")", ",", "target", ".", "type", "(", "out_cl", ".", "F", ".", "dtype", ")", ".", "cuda", "(", ")", ")", "\n", "cmplt_loss", "+=", "curr_loss", "/", "num_layers", "\n", "\n", "", "return", "cmplt_loss", "*", "self", ".", "loss_weights", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_sc.sdf_loss": [[28, 48], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "diff_operators.gradient", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gradient.norm", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cosine_similarity", "torch.cosine_similarity", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.gradient"], ["", "def", "sdf_loss", "(", "self", ",", "model_output", ",", "gt", ")", ":", "\n", "        ", "gt_sdf", "=", "gt", "[", "'sdf'", "]", "\n", "gt_normals", "=", "gt", "[", "'normals'", "]", "\n", "\n", "shape_coords", "=", "model_output", "[", "'model_in'", "]", "\n", "pred_sdf", "=", "model_output", "[", "'model_out'", "]", "\n", "\n", "gradient", "=", "diff_operators", ".", "gradient", "(", "pred_sdf", ",", "shape_coords", ")", "[", "...", ",", "-", "3", ":", "]", "\n", "\n", "# Wherever boundary_values is not equal to zero, we interpret it as a boundary constraint.", "\n", "sdf_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "pred_sdf", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ")", "\n", "inter_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ",", "torch", ".", "exp", "(", "-", "1e2", "*", "torch", ".", "abs", "(", "pred_sdf", ")", ")", ")", "\n", "normal_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "1", "-", "F", ".", "cosine_similarity", "(", "gradient", ",", "gt_normals", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", ",", "\n", "torch", ".", "zeros_like", "(", "gradient", "[", "...", ",", ":", "1", "]", ")", ")", "\n", "grad_constraint", "=", "torch", ".", "abs", "(", "gradient", ".", "norm", "(", "dim", "=", "-", "1", ")", "-", "1", ")", "\n", "\n", "return", "{", "'sdf'", ":", "torch", ".", "abs", "(", "sdf_constraint", ")", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "0", "]", ",", "\n", "'inter'", ":", "inter_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "1", "]", ",", "\n", "'normal_constraint'", ":", "normal_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "2", "]", ",", "\n", "'grad_constraint'", ":", "grad_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "3", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_sc.all_loss": [[49, 60], ["loss.Loss_sc.cmplt_loss", "loss.Loss_sc.sdf_loss"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.cmplt_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss"], ["", "def", "all_loss", "(", "self", ",", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", ":", "\n", "\n", "        ", "ret_cmplt_loss", "=", "self", ".", "cmplt_loss", "(", "out_cls", ",", "targets", ")", "\n", "ret_sdf_loss", "=", "self", ".", "sdf_loss", "(", "g_model_output", ",", "gt", ")", "\n", "\n", "return", "{", "\n", "'cmplt_loss'", ":", "ret_cmplt_loss", ",", "\n", "'sdf'", ":", "ret_sdf_loss", "[", "'sdf'", "]", ",", "\n", "'inter'", ":", "ret_sdf_loss", "[", "'inter'", "]", ",", "\n", "'normal_constraint'", ":", "ret_sdf_loss", "[", "'normal_constraint'", "]", ",", "\n", "'grad_constraint'", ":", "ret_sdf_loss", "[", "'grad_constraint'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.__init__": [[64, 67], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "complt_w", ",", "loss_weights", ")", ":", "\n", "        ", "self", ".", "complt_w", "=", "torch", ".", "Tensor", "(", "complt_w", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.seg_loss": [[68, 81], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "label[].cuda", "torch.cross_entropy", "torch.cross_entropy", "tuple", "numpy.transpose", "class_out0.C.cpu().numpy", "class_out0.C.cpu"], "methods", ["None"], ["", "def", "seg_loss", "(", "self", ",", "class_out0", ",", "gt", ")", ":", "\n", "        ", "label", "=", "gt", "[", "'label'", "]", "\n", "invalid", "=", "gt", "[", "'invalid'", "]", "\n", "\n", "masks", "=", "torch", ".", "ones_like", "(", "label", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "masks", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "False", "\n", "masks", "[", "invalid", "==", "1", "]", "=", "True", "\n", "label", "[", "masks", "]", "=", "255", "\n", "\n", "seg_label", "=", "label", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out0", ".", "C", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "]", ".", "cuda", "(", ")", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "class_out0", ".", "F", ",", "seg_label", ",", "weight", "=", "self", ".", "complt_w", ",", "ignore_index", "=", "255", ")", "\n", "\n", "return", "seg_loss", "*", "self", ".", "loss_weights", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.moo_seg_loss": [[82, 95], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "label[].cuda", "torch.cross_entropy", "torch.cross_entropy", "tuple", "numpy.transpose", "class_out0.C.cpu().numpy", "class_out0.C.cpu"], "methods", ["None"], ["", "def", "moo_seg_loss", "(", "self", ",", "class_out0", ",", "class_out0_F", ",", "gt", ")", ":", "\n", "        ", "label", "=", "gt", "[", "'label'", "]", "\n", "invalid", "=", "gt", "[", "'invalid'", "]", "\n", "\n", "masks", "=", "torch", ".", "ones_like", "(", "label", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "masks", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "False", "\n", "masks", "[", "invalid", "==", "1", "]", "=", "True", "\n", "label", "[", "masks", "]", "=", "255", "\n", "\n", "seg_label", "=", "label", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out0", ".", "C", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "]", ".", "cuda", "(", ")", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "class_out0_F", ",", "seg_label", ",", "weight", "=", "self", ".", "complt_w", ",", "ignore_index", "=", "255", ")", "\n", "\n", "return", "seg_loss", "*", "self", ".", "loss_weights", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.ssc_loss": [[96, 108], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "ssc_loss", "(", "self", ",", "class_out1", ",", "gt", ")", ":", "\n", "        ", "label", "=", "gt", "[", "'label'", "]", "\n", "invalid", "=", "gt", "[", "'invalid'", "]", "\n", "\n", "masks", "=", "torch", ".", "ones_like", "(", "label", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "masks", "[", ":", ",", ":", ",", ":", ",", ":", "]", "=", "False", "\n", "masks", "[", "invalid", "==", "1", "]", "=", "True", "\n", "label", "[", "masks", "]", "=", "255", "\n", "\n", "ssc_loss", "=", "F", ".", "cross_entropy", "(", "class_out1", ",", "label", ",", "weight", "=", "self", ".", "complt_w", ",", "ignore_index", "=", "255", ")", "\n", "\n", "return", "ssc_loss", "*", "self", ".", "loss_weights", "[", "6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.cmplt_loss": [[109, 119], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "zip", "len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.nn.BCEWithLogitsLoss.", "out_cl.F.squeeze", "target.type().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "target.type"], "methods", ["None"], ["", "def", "cmplt_loss", "(", "self", ",", "out_cls", ",", "targets", ")", ":", "\n", "\n", "        ", "cmplt_crit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "num_layers", ",", "cmplt_loss", "=", "len", "(", "out_cls", ")", ",", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "for", "out_cl", ",", "target", "in", "zip", "(", "out_cls", ",", "targets", ")", ":", "\n", "            ", "curr_loss", "=", "cmplt_crit", "(", "out_cl", ".", "F", ".", "squeeze", "(", ")", ",", "target", ".", "type", "(", "out_cl", ".", "F", ".", "dtype", ")", ".", "cuda", "(", ")", ")", "\n", "cmplt_loss", "+=", "curr_loss", "/", "num_layers", "\n", "\n", "", "return", "cmplt_loss", "*", "self", ".", "loss_weights", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.sdf_loss": [[120, 140], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "diff_operators.gradient", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gradient.norm", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cosine_similarity", "torch.cosine_similarity", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.gradient"], ["", "def", "sdf_loss", "(", "self", ",", "model_output", ",", "gt", ")", ":", "\n", "        ", "gt_sdf", "=", "gt", "[", "'sdf'", "]", "\n", "gt_normals", "=", "gt", "[", "'normals'", "]", "\n", "\n", "shape_coords", "=", "model_output", "[", "'model_in'", "]", "\n", "pred_sdf", "=", "model_output", "[", "'model_out'", "]", "\n", "\n", "gradient", "=", "diff_operators", ".", "gradient", "(", "pred_sdf", ",", "shape_coords", ")", "[", "...", ",", "-", "3", ":", "]", "\n", "\n", "# Wherever boundary_values is not equal to zero, we interpret it as a boundary constraint.", "\n", "sdf_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "pred_sdf", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ")", "\n", "inter_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ",", "torch", ".", "exp", "(", "-", "1e2", "*", "torch", ".", "abs", "(", "pred_sdf", ")", ")", ")", "\n", "normal_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "1", "-", "F", ".", "cosine_similarity", "(", "gradient", ",", "gt_normals", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", ",", "\n", "torch", ".", "zeros_like", "(", "gradient", "[", "...", ",", ":", "1", "]", ")", ")", "\n", "grad_constraint", "=", "torch", ".", "abs", "(", "gradient", ".", "norm", "(", "dim", "=", "-", "1", ")", "-", "1", ")", "\n", "\n", "return", "{", "'sdf'", ":", "torch", ".", "abs", "(", "sdf_constraint", ")", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "0", "]", ",", "\n", "'inter'", ":", "inter_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "1", "]", ",", "\n", "'normal_constraint'", ":", "normal_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "2", "]", ",", "\n", "'grad_constraint'", ":", "grad_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "3", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.shape_siren_loss": [[141, 150], ["loss.Loss_ssc_a.cmplt_loss", "loss.Loss_ssc_a.sdf_loss"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.cmplt_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss"], ["", "def", "shape_siren_loss", "(", "self", ",", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", ":", "\n", "        ", "ret_cmplt_loss", "=", "self", ".", "cmplt_loss", "(", "out_cls", ",", "targets", ")", "\n", "\n", "ret_sdf_loss", "=", "self", ".", "sdf_loss", "(", "g_model_output", ",", "gt", ")", "\n", "\n", "final_loss", "=", "ret_cmplt_loss", "+", "ret_sdf_loss", "[", "'sdf'", "]", "+", "ret_sdf_loss", "[", "'inter'", "]", "+", "ret_sdf_loss", "[", "'normal_constraint'", "]", "+", "ret_sdf_loss", "[", "'grad_constraint'", "]", "\n", "\n", "return", "final_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.all_loss": [[151, 168], ["loss.Loss_ssc_a.seg_loss", "loss.Loss_ssc_a.ssc_loss", "loss.Loss_ssc_a.cmplt_loss", "loss.Loss_ssc_a.sdf_loss"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.seg_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.ssc_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.cmplt_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss"], ["", "def", "all_loss", "(", "self", ",", "class_out0", ",", "class_out1", ",", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", ":", "\n", "\n", "        ", "ret_seg_loss", "=", "self", ".", "seg_loss", "(", "class_out0", ",", "gt", ")", "\n", "\n", "ret_ssc_loss", "=", "self", ".", "ssc_loss", "(", "class_out1", ",", "gt", ")", "\n", "\n", "ret_cmplt_loss", "=", "self", ".", "cmplt_loss", "(", "out_cls", ",", "targets", ")", "\n", "ret_sdf_loss", "=", "self", ".", "sdf_loss", "(", "g_model_output", ",", "gt", ")", "\n", "\n", "return", "{", "\n", "'seg_loss'", ":", "ret_seg_loss", ",", "\n", "'ssc_loss'", ":", "ret_ssc_loss", ",", "\n", "'cmplt_loss'", ":", "ret_cmplt_loss", ",", "\n", "'sdf'", ":", "ret_sdf_loss", "[", "'sdf'", "]", ",", "\n", "'inter'", ":", "ret_sdf_loss", "[", "'inter'", "]", ",", "\n", "'normal_constraint'", ":", "ret_sdf_loss", "[", "'normal_constraint'", "]", ",", "\n", "'grad_constraint'", ":", "ret_sdf_loss", "[", "'grad_constraint'", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.__init__": [[172, 175], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "complt_w", ",", "loss_weights", ")", ":", "\n", "        ", "self", ".", "complt_w", "=", "torch", ".", "Tensor", "(", "complt_w", ")", ".", "cuda", "(", ")", "\n", "self", ".", "loss_weights", "=", "loss_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.cmplt_loss": [[176, 186], ["torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "zip", "len", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.nn.BCEWithLogitsLoss.", "out_cl.F.squeeze", "target.type().cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "target.type"], "methods", ["None"], ["", "def", "cmplt_loss", "(", "self", ",", "out_cls", ",", "targets", ")", ":", "\n", "\n", "        ", "cmplt_crit", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "num_layers", ",", "cmplt_loss", "=", "len", "(", "out_cls", ")", ",", "torch", ".", "tensor", "(", "0.", ")", ".", "cuda", "(", ")", "\n", "for", "out_cl", ",", "target", "in", "zip", "(", "out_cls", ",", "targets", ")", ":", "\n", "            ", "curr_loss", "=", "cmplt_crit", "(", "out_cl", ".", "F", ".", "squeeze", "(", ")", ",", "target", ".", "type", "(", "out_cl", ".", "F", ".", "dtype", ")", ".", "cuda", "(", ")", ")", "\n", "cmplt_loss", "+=", "curr_loss", "/", "num_layers", "\n", "\n", "", "return", "cmplt_loss", "*", "self", ".", "loss_weights", "[", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss": [[187, 207], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "diff_operators.gradient", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "gradient.norm", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.where.mean", "torch.abs.mean", "torch.abs.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cosine_similarity", "torch.cosine_similarity", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.diff_operators.gradient"], ["", "def", "sdf_loss", "(", "self", ",", "model_in", ",", "sdf_out", ",", "gt", ")", ":", "\n", "        ", "gt_sdf", "=", "gt", "[", "'sdf'", "]", "\n", "gt_normals", "=", "gt", "[", "'normals'", "]", "\n", "\n", "shape_coords", "=", "model_in", "\n", "pred_sdf", "=", "sdf_out", "\n", "\n", "gradient", "=", "diff_operators", ".", "gradient", "(", "pred_sdf", ",", "shape_coords", ")", "[", "...", ",", "-", "3", ":", "]", "\n", "\n", "# Wherever boundary_values is not equal to zero, we interpret it as a boundary constraint.", "\n", "sdf_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "pred_sdf", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ")", "\n", "inter_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "torch", ".", "zeros_like", "(", "pred_sdf", ")", ",", "torch", ".", "exp", "(", "-", "1e2", "*", "torch", ".", "abs", "(", "pred_sdf", ")", ")", ")", "\n", "normal_constraint", "=", "torch", ".", "where", "(", "gt_sdf", "!=", "-", "1", ",", "1", "-", "F", ".", "cosine_similarity", "(", "gradient", ",", "gt_normals", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", ",", "\n", "torch", ".", "zeros_like", "(", "gradient", "[", "...", ",", ":", "1", "]", ")", ")", "\n", "grad_constraint", "=", "torch", ".", "abs", "(", "gradient", ".", "norm", "(", "dim", "=", "-", "1", ")", "-", "1", ")", "\n", "\n", "return", "{", "'sdf'", ":", "torch", ".", "abs", "(", "sdf_constraint", ")", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "0", "]", ",", "\n", "'inter'", ":", "inter_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "1", "]", ",", "\n", "'normal_constraint'", ":", "normal_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "2", "]", ",", "\n", "'grad_constraint'", ":", "grad_constraint", ".", "mean", "(", ")", "*", "self", ".", "loss_weights", "[", "3", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.label_loss": [[208, 216], ["label_out.transpose", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "label_loss", "(", "self", ",", "label_out", ",", "gt", ")", ":", "\n", "        ", "gt_label", "=", "gt", "[", "'out_label_points'", "]", "\n", "\n", "pred_label", "=", "label_out", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "label_loss", "=", "F", ".", "cross_entropy", "(", "pred_label", ",", "gt_label", ",", "weight", "=", "self", ".", "complt_w", ",", "ignore_index", "=", "255", ")", "\n", "\n", "return", "label_loss", "*", "self", ".", "loss_weights", "[", "5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.all_loss": [[217, 232], ["loss.Loss_ssc_b.cmplt_loss", "loss.Loss_ssc_b.sdf_loss", "loss.Loss_ssc_b.label_loss"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.cmplt_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.label_loss"], ["", "def", "all_loss", "(", "self", ",", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", ":", "\n", "\n", "        ", "ret_cmplt_loss", "=", "self", ".", "cmplt_loss", "(", "out_cls", ",", "targets", ")", "\n", "\n", "ret_sdf_loss", "=", "self", ".", "sdf_loss", "(", "g_model_output", "[", "'model_in'", "]", ",", "g_model_output", "[", "'sdf_out'", "]", ",", "gt", ")", "\n", "\n", "ret_label_loss", "=", "self", ".", "label_loss", "(", "g_model_output", "[", "'label_out'", "]", ",", "gt", ")", "\n", "\n", "return", "{", "\n", "'cmplt_loss'", ":", "ret_cmplt_loss", ",", "\n", "'sdf'", ":", "ret_sdf_loss", "[", "'sdf'", "]", ",", "\n", "'inter'", ":", "ret_sdf_loss", "[", "'inter'", "]", ",", "\n", "'normal_constraint'", ":", "ret_sdf_loss", "[", "'normal_constraint'", "]", ",", "\n", "'grad_constraint'", ":", "ret_sdf_loss", "[", "'grad_constraint'", "]", ",", "\n", "'label_loss'", ":", "ret_label_loss", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.AverageMeter.__init__": [[42, 44], ["main_ssc_a.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.AverageMeter.reset": [[45, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "max", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.AverageMeter.update": [[52, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "self", ".", "val", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.eval_single": [[61, 171], ["int", "int", "int", "iter", "torch.get_rank", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_Seg.eval", "D_SSC.eval", "D_shape.eval", "G_siren.eval", "range", "evals.iouEval", "numpy.zeros", "numpy.ones", "iter.next", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_Seg", "D_SSC", "D_shape", "evals.get_discrete_sdf", "[].cpu().numpy", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "range", "evals.iouEval.addBatch", "range", "evals.iouEval.getIoU", "evals.iouEval.get_confusion", "len", "complet_evaluator.append", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "len", "numpy.where", "np.where.nonzero", "numpy.transpose", "sklearn.neighbors.NearestNeighbors.kneighbors().squeeze", "complet_evaluator[].addBatch", "class_out[].astype", "label_iou.astype", "len", "complet_evaluator[].getIoU", "complet_evaluator[].get_confusion", "iou_list.append", "miou_list.append", "class_jaccard[].mean", "torch.get_rank", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "iou_score.update", "miou_score.update", "print", "print", "print", "print", "print", "print", "print", "print", "print", "evals.iouEval", "[].cpu", "pred_iou.astype", "label_iou.astype", "class_jaccard[].mean", "numpy.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs", "sklearn.neighbors.NearestNeighbors.kneighbors", "tuple", "numpy.sum", "numpy.sum", "numpy.transpose", "numpy.sum", "class_out1[].data.max"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "", "", "def", "eval_single", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "valid_dataloader", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "config", ")", ":", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "valid_iter", "=", "iter", "(", "valid_dataloader", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "'================================'", ")", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_Seg", ".", "eval", "(", ")", "\n", "D_SSC", ".", "eval", "(", ")", "\n", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "", "complet_evaluator_ssc", "=", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", "=", "valid_iter", ".", "next", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "class_out0", ",", "target_key", ")", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "sdf_values", "=", "evals", ".", "get_discrete_sdf", "(", "config", ",", "G_siren", ",", "shape_out", "[", "0", "]", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "class_out", "=", "class_out1", "[", "0", "]", ".", "data", ".", "max", "(", "0", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "class_out_points", "=", "np", ".", "transpose", "(", "(", "class_out", "*", "mask", ")", ".", "nonzero", "(", ")", ")", "\n", "k_neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "k_neigh", ".", "fit", "(", "class_out_points", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "threshold", "=", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "\n", "pos", "=", "pred_voxels", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "if", "pred_points", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indexes", "=", "k_neigh", ".", "kneighbors", "(", "pred_points", ",", "return_distance", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "co_pred", "=", "class_out", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out_points", "[", "indexes", "]", ")", ")", "]", "\n", "pred_voxels", "[", "pos", "]", "=", "co_pred", "\n", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "complet_evaluator_ssc", ".", "addBatch", "(", "class_out", "[", "mask", "]", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "iou_list", "=", "[", "]", "\n", "miou_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "_", ",", "class_jaccard", "=", "complet_evaluator", "[", "i", "]", ".", "getIoU", "(", ")", "\n", "miou_cmplt", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator", "[", "i", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "miou_list", ".", "append", "(", "miou_cmplt", ")", "\n", "\n", "", "_", ",", "class_jaccard", "=", "complet_evaluator_ssc", ".", "getIoU", "(", ")", "\n", "miou_cmplt_ssc", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator_ssc", ".", "get_confusion", "(", ")", "\n", "iou_cmplt_ssc", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'iou'", ",", "iou_list", "[", "1", "]", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'miou'", ",", "miou_list", "[", "1", "]", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'ssc_iou'", ",", "iou_cmplt_ssc", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'ssc_miou'", ",", "miou_cmplt_ssc", ",", "total_steps", ")", "\n", "iou_score", ".", "update", "(", "val", "=", "iou_list", "[", "1", "]", ")", "\n", "miou_score", ".", "update", "(", "val", "=", "miou_list", "[", "1", "]", ")", "\n", "print", "(", "'================================'", ")", "\n", "print", "(", "indices", ")", "\n", "print", "(", "'iou: '", ",", "iou_list", ",", "iou_score", ".", "avg", ")", "\n", "print", "(", "'miou: '", ",", "miou_list", ",", "miou_score", ".", "avg", ")", "\n", "print", "(", "'ssc_iou: '", ",", "iou_cmplt_ssc", ")", "\n", "print", "(", "'ssc_miou: '", ",", "miou_cmplt_ssc", ")", "\n", "print", "(", "'best iou: '", ",", "iou_score", ".", "max", ")", "\n", "print", "(", "'best miou: '", ",", "miou_score", ".", "max", ")", "\n", "print", "(", "'================================'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.train_single_epoch": [[173, 368], ["int", "int", "int", "enumerate", "time.time", "D_Seg.train", "D_SSC.train", "D_shape.train", "G_siren.train", "optim.zero_grad", "optim.zero_grad", "MinkowskiEngine.SparseTensor", "D_Seg", "D_SSC", "cm.insert_and_map", "points[].cuda", "D_shape", "F.normalize.transpose", "points[].cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "G_siren", "loss_fn.all_loss", "train_losses.append", "loss.backward", "optim.step", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "value.cuda", "MinkowskiEngine.SparseTensor", "D_Seg", "torch.autograd.Variable", "optim.zero_grad", "loss_fn.moo_seg_loss", "loss.backward", "grads[].append", "torch.autograd.Variable.grad.data.zero_", "optim.zero_grad", "MinkowskiEngine.SparseTensor", "D_SSC", "loss_fn.ssc_loss", "loss.backward", "grads[].append", "torch.autograd.Variable.grad.data.zero_", "optim.zero_grad", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "points[].cuda", "D_shape", "F.normalize.transpose", "points[].cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "G_siren", "loss_fn.shape_siren_loss", "loss.backward", "grads[].append", "torch.autograd.Variable.grad.data.zero_", "min_norm_solvers.MinNormSolver.find_min_norm_element", "float", "float", "float", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.grid_sample", "torch.grid_sample", "loss.item", "isinstance", "torch.get_rank", "writer.add_scalar", "loss_fn.all_loss.items", "pbar.update", "main_ssc_a.eval_single", "gt.items", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable", "D_Seg.F.data.clone", "torch.autograd.Variable", "torch.autograd.Variable", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.grid_sample", "torch.grid_sample", "torch.autograd.Variable", "points[].cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "writer.add_scalar", "tqdm.autonotebook.tqdm.write", "torch.autograd.Variable.grad.data.clone", "torch.autograd.Variable.grad.data.clone", "points[].cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "torch.autograd.Variable.grad.data.clone", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "loss_data[].item", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "loss.item", "F.grid_sample.squeeze", "time.time", "F.grid_sample.squeeze"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.all_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.moo_seg_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.ssc_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.shape_siren_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver.find_min_norm_element", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.eval_single"], ["", "", "", "def", "train_single_epoch", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "\n", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", ":", "\n", "\n", "    ", "steps_til_eval", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_eval'", "]", "\n", "steps_til_summary", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_summary'", "]", "\n", "clip_grad", "=", "config", "[", "'TRAIN'", "]", "[", "'clip_grad'", "]", "\n", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "for", "step", ",", "(", "indices", ",", "points", ",", "gt", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "\n", "D_Seg", ".", "train", "(", ")", "\n", "D_SSC", ".", "train", "(", ")", "\n", "D_shape", ".", "train", "(", ")", "\n", "G_siren", ".", "train", "(", ")", "\n", "\n", "loss_data", "=", "{", "}", "\n", "grads", "=", "{", "}", "\n", "scale", "=", "{", "}", "\n", "\n", "gt", "=", "{", "key", ":", "value", ".", "cuda", "(", ")", "for", "key", ",", "value", "in", "gt", ".", "items", "(", ")", "}", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'moo'", "]", ":", "\n", "# encoder", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "in_feat_volatile", "=", "Variable", "(", "in_feat", ".", "data", ")", "\n", "\n", "", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat_volatile", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "rep_variable", "=", "Variable", "(", "class_out0", ".", "F", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# decoder seg", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "decoder_seg_loss", "=", "loss_fn", ".", "moo_seg_loss", "(", "class_out0", ",", "rep_variable", ",", "gt", ")", "\n", "\n", "loss", "=", "decoder_seg_loss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "grads", "[", "'decoder_seg_loss'", "]", "=", "[", "]", "\n", "grads", "[", "'decoder_seg_loss'", "]", ".", "append", "(", "Variable", "(", "rep_variable", ".", "grad", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "rep_variable", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# decoder ssc", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "sparse_class", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "rep_variable", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "class_out1", "=", "D_SSC", "(", "sparse_class", ")", "\n", "\n", "decoder_ssc_loss", "=", "loss_fn", ".", "ssc_loss", "(", "class_out1", ",", "gt", ")", "\n", "loss", "=", "decoder_ssc_loss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "grads", "[", "'decoder_ssc_loss'", "]", "=", "[", "]", "\n", "grads", "[", "'decoder_ssc_loss'", "]", ".", "append", "(", "Variable", "(", "rep_variable", ".", "grad", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "rep_variable", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# decoder siren", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "rep_variable", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "coords", "=", "points", "[", "'coords'", "]", ".", "cuda", "(", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "# trilinear #", "\n", "", "shape_out", "=", "shape_out", ".", "transpose", "(", "2", ",", "4", ")", "# transpose axis x and z", "\n", "scaled_coords", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "                ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "g_model_output", "=", "G_siren", "(", "shapes", ",", "coords", ")", "\n", "\n", "decoder_siren_loss", "=", "loss_fn", ".", "shape_siren_loss", "(", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", "\n", "loss", "=", "decoder_siren_loss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "grads", "[", "'decoder_siren_loss'", "]", "=", "[", "]", "\n", "grads", "[", "'decoder_siren_loss'", "]", ".", "append", "(", "Variable", "(", "rep_variable", ".", "grad", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "rep_variable", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "sol", ",", "min_norm", "=", "MinNormSolver", ".", "find_min_norm_element", "(", "[", "grads", "[", "'decoder_seg_loss'", "]", ",", "grads", "[", "'decoder_ssc_loss'", "]", ",", "grads", "[", "'decoder_siren_loss'", "]", "]", ")", "\n", "scale", "[", "'decoder_seg_loss'", "]", "=", "float", "(", "sol", "[", "0", "]", ")", "\n", "scale", "[", "'decoder_ssc_loss'", "]", "=", "float", "(", "sol", "[", "1", "]", ")", "\n", "scale", "[", "'decoder_siren_loss'", "]", "=", "float", "(", "sol", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale", "[", "'decoder_seg_loss'", "]", "=", "1.", "\n", "scale", "[", "'decoder_ssc_loss'", "]", "=", "1.", "\n", "scale", "[", "'decoder_siren_loss'", "]", "=", "1.", "\n", "\n", "# train", "\n", "", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "coords", "=", "points", "[", "'coords'", "]", ".", "cuda", "(", ")", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "class_out0", ",", "target_key", ")", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "# trilinear #", "\n", "", "shape_out", "=", "shape_out", ".", "transpose", "(", "2", ",", "4", ")", "# transpose axis x and z", "\n", "scaled_coords", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "g_model_output", "=", "G_siren", "(", "shapes", ",", "coords", ")", "\n", "\n", "\n", "loss_data", "=", "loss_fn", ".", "all_loss", "(", "class_out0", ",", "class_out1", ",", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", "\n", "loss", "=", "loss_data", "[", "'seg_loss'", "]", "*", "scale", "[", "'decoder_seg_loss'", "]", "+", "loss_data", "[", "'ssc_loss'", "]", "*", "scale", "[", "'decoder_ssc_loss'", "]", "+", "loss_data", "[", "'cmplt_loss'", "]", "*", "scale", "[", "'decoder_siren_loss'", "]", "+", "loss_data", "[", "'sdf'", "]", "*", "scale", "[", "'decoder_siren_loss'", "]", "+", "loss_data", "[", "'inter'", "]", "*", "scale", "[", "'decoder_siren_loss'", "]", "+", "loss_data", "[", "'normal_constraint'", "]", "*", "scale", "[", "'decoder_siren_loss'", "]", "+", "loss_data", "[", "'grad_constraint'", "]", "*", "scale", "[", "'decoder_siren_loss'", "]", "\n", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "clip_grad", ":", "\n", "            ", "if", "isinstance", "(", "clip_grad", ",", "bool", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "1.", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "clip_grad", ")", "\n", "", "", "optim", ".", "step", "(", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "for", "k", ",", "v", "in", "loss_data", ".", "items", "(", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "k", ",", "loss_data", "[", "k", "]", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "if", "not", "total_steps", "%", "steps_til_summary", ":", "\n", "                ", "tqdm", ".", "write", "(", "'Epoch %d, Total loss %0.6f, iteration time %0.6f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ",", "time", ".", "time", "(", ")", "-", "time1", ")", ")", "\n", "\n", "", "", "total_steps", "+=", "1", "\n", "\n", "if", "not", "total_steps", "%", "steps_til_eval", "and", "total_steps", ":", "\n", "            ", "eval_single", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "valid_dataloader", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "config", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "total_steps", ",", "train_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.train_pipeline": [[370, 467], ["D_Seg.parameters", "D_SSC.parameters", "D_shape.parameters", "G_siren.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.get_rank", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "tqdm.autonotebook.tqdm", "main_ssc_a.AverageMeter", "main_ssc_a.AverageMeter", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.get_rank", "pbar.update", "train_sampler.set_epoch", "valid_sampler.set_epoch", "main_ssc_a.train_single_epoch", "torch.get_rank", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.optim.lr_scheduler.StepLR.step", "os.path.join", "os.path.join", "numpy.array", "len", "len", "torch.get_rank", "os.path.join", "os.path.join", "numpy.array", "D_Seg.module.state_dict", "D_SSC.module.state_dict", "D_shape.module.state_dict", "G_siren.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "D_Seg.module.state_dict", "D_SSC.module.state_dict", "D_shape.module.state_dict", "G_siren.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_single_epoch"], ["", "def", "train_pipeline", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "train_dataloader", ",", "valid_dataloader", ",", "train_sampler", ",", "valid_sampler", ",", "loss_fn", ",", "model_dir", ",", "config", ")", ":", "\n", "    ", "epochs_til_ckpt", "=", "config", "[", "'TRAIN'", "]", "[", "'epochs_til_ckpt'", "]", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "summaries_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summaries_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "summaries_dir", ")", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "summaries_dir", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "0", "\n", "\n", "", "epochs", "=", "config", "[", "'TRAIN'", "]", "[", "'num_epochs'", "]", "\n", "lr", "=", "config", "[", "'TRAIN'", "]", "[", "'lr'", "]", "\n", "\n", "model_params", "=", "[", "]", "\n", "model_params", "+=", "D_Seg", ".", "parameters", "(", ")", "\n", "model_params", "+=", "D_SSC", ".", "parameters", "(", ")", "\n", "model_params", "+=", "D_shape", ".", "parameters", "(", ")", "\n", "model_params", "+=", "G_siren", ".", "parameters", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "lr", ",", "params", "=", "model_params", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optim", ",", "step_size", "=", "10", ",", "gamma", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "optim", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "total_steps", "=", "checkpoint", "[", "'total_steps'", "]", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "        ", "total_steps", "=", "0", "\n", "epoch", "=", "0", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "train_dataloader", ")", "*", "epochs", ")", "as", "pbar", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", "len", "(", "train_dataloader", ")", "*", "epoch", ")", "\n", "\n", "", "train_losses", "=", "[", "]", "\n", "\n", "iou_score", "=", "AverageMeter", "(", ")", "\n", "miou_score", "=", "AverageMeter", "(", ")", "\n", "\n", "epoch_rest", "=", "epochs", "-", "epoch", "\n", "for", "i", "in", "range", "(", "epoch_rest", ")", ":", "\n", "            ", "if", "not", "epoch", "%", "epochs_til_ckpt", "and", "epoch", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_Seg'", ":", "D_Seg", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_SSC'", ":", "D_SSC", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_shape'", ":", "D_shape", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_siren'", ":", "G_siren", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_epoch_%04d_steps_%d.pth'", "%", "(", "epoch", ",", "total_steps", ")", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_epoch_%04d_steps_%d.txt'", "%", "(", "epoch", ",", "total_steps", ")", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n", "", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "valid_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "total_steps", ",", "train_losses", "=", "train_single_epoch", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_Seg'", ":", "D_Seg", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_SSC'", ":", "D_SSC", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_shape'", ":", "D_shape", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_siren'", ":", "G_siren", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_final.pth'", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_final.txt'", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.train": [[469, 539], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Seg", "modules.D_SSC", "modules.D_shape", "modules.G_siren", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "MinkowskiEngine.MinkowskiSyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "MinkowskiEngine.MinkowskiSyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "loss.Loss_ssc_a", "main_ssc_a.train_pipeline", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "numpy.random.seed", "numpy.random.seed", "int", "int", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "def", "train", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "# dataset and dataloader", "\n", "    ", "train_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'train'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_train", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_Seg", "=", "modules", ".", "D_Seg", "(", "config", ")", "\n", "D_SSC", "=", "modules", ".", "D_SSC", "(", "config", ")", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "\n", "D_Seg", "=", "D_Seg", ".", "cuda", "(", ")", "\n", "D_SSC", "=", "D_SSC", ".", "cuda", "(", ")", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "\n", "D_Seg", "=", "ME", ".", "MinkowskiSyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_Seg", ")", "\n", "D_SSC", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_SSC", ")", "\n", "D_shape", "=", "ME", ".", "MinkowskiSyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_shape", ")", "\n", "G_siren", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "G_siren", ")", "\n", "\n", "D_Seg", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_Seg", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_SSC", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_SSC", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "\n", "", "elif", "config", "[", "'TRAIN'", "]", "[", "'use_ssc_pretrain'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'ssc_pretrain_path'", "]", ",", "'cuda'", ")", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "\n", "", "loss_fn", "=", "loss", ".", "Loss_ssc_a", "(", "train_dataset", ".", "compl_labelweights", ",", "config", "[", "'TRAIN'", "]", "[", "'loss_weights'", "]", ")", "\n", "\n", "# train", "\n", "train_pipeline", "(", "D_Seg", "=", "D_Seg", ",", "D_SSC", "=", "D_SSC", ",", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "train_dataloader", "=", "train_dataloader", ",", "valid_dataloader", "=", "valid_dataloader", ",", "train_sampler", "=", "train_sampler", ",", "valid_sampler", "=", "valid_sampler", ",", "loss_fn", "=", "loss_fn", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.valid_pipeline": [[541, 679], ["int", "int", "int", "print", "results.append", "numpy.zeros_like", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "numpy.savetxt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_Seg.eval", "D_SSC.eval", "D_shape.eval", "G_siren.eval", "numpy.zeros", "numpy.ones", "range", "evals.iouEval", "range", "evals.iouEval.getIoU", "evals.iouEval.get_confusion", "print", "print", "print", "print", "print", "os.path.join", "len", "complet_evaluator.append", "tqdm.autonotebook.tqdm", "enumerate", "len", "results.append", "complet_evaluator[].getIoU", "complet_evaluator[].get_confusion", "enumerate", "print", "print", "results.append", "results.append", "iou_list.append", "miou_list.append", "class_jaccard[].mean", "str", "str", "str", "str", "str", "str", "evals.iouEval", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_Seg", "D_SSC", "D_shape", "evals.get_discrete_sdf", "[].cpu().numpy", "numpy.transpose", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "numpy.zeros_like", "range", "evals.iouEval.addBatch", "pbar.update", "class_jaccard[].mean", "numpy.sum", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "[].cpu().numpy.nonzero", "len", "numpy.where", "np.where.nonzero", "numpy.transpose", "sklearn.neighbors.NearestNeighbors.kneighbors().squeeze", "complet_evaluator[].addBatch", "class_out[].astype", "label_iou.astype", "numpy.sum", "results.append", "print", "numpy.sum", "len", "[].cpu", "pred_iou.astype", "label_iou.astype", "evals.eval_cd", "numpy.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs", "sklearn.neighbors.NearestNeighbors.kneighbors", "tuple", "numpy.transpose", "class_out1[].data.max"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.eval_cd"], ["", "def", "valid_pipeline", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "valid_dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "all_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_Seg", ".", "eval", "(", ")", "\n", "D_SSC", ".", "eval", "(", ")", "\n", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "", "complet_evaluator_ssc", "=", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "valid_dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "class_out0", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "sdf_values", "=", "evals", ".", "get_discrete_sdf", "(", "config", ",", "G_siren", ",", "shape_out", "[", "0", "]", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "class_out", "=", "class_out1", "[", "0", "]", ".", "data", ".", "max", "(", "0", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "class_out_points", "=", "np", ".", "transpose", "(", "(", "class_out", ")", ".", "nonzero", "(", ")", ")", "\n", "k_neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "k_neigh", ".", "fit", "(", "class_out_points", ")", "\n", "\n", "single_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "                    ", "threshold", "=", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "sdf_values", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "\n", "pos", "=", "pred_voxels", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "indexes", "=", "k_neigh", ".", "kneighbors", "(", "pred_points", ",", "return_distance", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "co_pred", "=", "class_out", "[", "tuple", "(", "np", ".", "transpose", "(", "class_out_points", "[", "indexes", "]", ")", ")", "]", "\n", "pred_voxels", "[", "pos", "]", "=", "co_pred", "\n", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'eval_cd'", "]", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "evals", ".", "eval_cd", "(", "pred_voxels", ",", "label", ",", "mask", ")", "\n", "", "else", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "0", "\n", "\n", "", "", "all_cd", "+=", "single_cd", "\n", "\n", "complet_evaluator_ssc", ".", "addBatch", "(", "class_out", "[", "mask", "]", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", "and", "step", ">", "-", "1", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "iou_list", "=", "[", "]", "\n", "miou_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "'============='", ")", "\n", "_", ",", "class_jaccard", "=", "complet_evaluator", "[", "j", "]", ".", "getIoU", "(", ")", "\n", "miou_cmplt", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator", "[", "j", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "ignore", "=", "[", "0", "]", "\n", "# print also classwise", "\n", "for", "i", ",", "jacc", "in", "enumerate", "(", "class_jaccard", ")", ":", "\n", "                ", "if", "i", "not", "in", "ignore", ":", "\n", "                    ", "log", "=", "'IoU class {i:} [{class_str:}] = {jacc:.3f}'", ".", "format", "(", "\n", "i", "=", "i", ",", "class_str", "=", "class_strings", "[", "class_inv_remap", "[", "i", "]", "]", ",", "jacc", "=", "jacc", "*", "100", ")", "\n", "results", ".", "append", "(", "log", ")", "\n", "print", "(", "log", ")", "\n", "\n", "", "", "print", "(", "'miou: '", ",", "miou_cmplt", ")", "\n", "print", "(", "'iou: '", ",", "iou_cmplt", ")", "\n", "results", ".", "append", "(", "miou_cmplt", ")", "\n", "results", ".", "append", "(", "iou_cmplt", ")", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "miou_list", ".", "append", "(", "miou_cmplt", ")", "\n", "\n", "", "_", ",", "class_jaccard", "=", "complet_evaluator_ssc", ".", "getIoU", "(", ")", "\n", "miou_cmplt_ssc", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator_ssc", ".", "get_confusion", "(", ")", "\n", "iou_cmplt_ssc", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "print", "(", "'================'", ")", "\n", "print", "(", "'iou: '", ",", "iou_list", ")", "\n", "print", "(", "'miou: '", ",", "miou_list", ")", "\n", "print", "(", "'ssc_iou: '", ",", "iou_cmplt_ssc", ")", "\n", "print", "(", "'ssc_miou: '", ",", "miou_cmplt_ssc", ")", "\n", "\n", "", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nSSC IoU:  '", "+", "str", "(", "iou_cmplt_ssc", ")", ")", "\n", "results", ".", "append", "(", "'\\nSSC mIoU:  '", "+", "str", "(", "miou_cmplt_ssc", ")", ")", "\n", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nIoU:  '", "+", "str", "(", "iou_list", ")", ")", "\n", "results", ".", "append", "(", "'\\nmIoU:  '", "+", "str", "(", "miou_list", ")", ")", "\n", "results", ".", "append", "(", "'\\nCD:   '", "+", "str", "(", "all_cd", "/", "len", "(", "valid_dataloader", ")", ")", ")", "\n", "results", ".", "append", "(", "'\\nThreshold: '", "+", "str", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'pred_iou.txt'", ")", ",", "results", ",", "fmt", "=", "'%s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.valid": [[681, 727], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Seg", "modules.D_SSC", "modules.D_shape", "modules.G_siren", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_ssc_a.valid_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "def", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_Seg", "=", "modules", ".", "D_Seg", "(", "config", ")", "\n", "D_SSC", "=", "modules", ".", "D_SSC", "(", "config", ")", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "\n", "D_Seg", "=", "D_Seg", ".", "cuda", "(", ")", "\n", "D_SSC", "=", "D_SSC", ".", "cuda", "(", ")", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "\n", "D_Seg", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_Seg", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_SSC", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_SSC", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "valid_pipeline", "(", "D_Seg", "=", "D_Seg", ",", "D_SSC", "=", "D_SSC", ",", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "valid_dataloader", "=", "valid_dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_single_epoch": [[729, 788], ["int", "int", "int", "D_Seg.train", "D_SSC.train", "enumerate", "time.time", "optim.zero_grad", "MinkowskiEngine.SparseTensor", "D_Seg", "D_SSC", "loss_fn.seg_loss", "loss_fn.ssc_loss", "train_losses.append", "loss.backward", "optim.step", "value.cuda", "loss.item", "isinstance", "torch.get_rank", "writer.add_scalar", "loss_data.items", "pbar.update", "gt.items", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "writer.add_scalar", "tqdm.autonotebook.tqdm.write", "loss_data[].item", "loss.item", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.seg_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_a.ssc_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "def", "ssc_pretrain_single_epoch", "(", "D_Seg", ",", "D_SSC", ",", "model_params", ",", "train_dataloader", ",", "\n", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", ":", "\n", "\n", "    ", "steps_til_eval", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_eval'", "]", "\n", "steps_til_summary", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_summary'", "]", "\n", "clip_grad", "=", "config", "[", "'TRAIN'", "]", "[", "'clip_grad'", "]", "\n", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "D_Seg", ".", "train", "(", ")", "\n", "D_SSC", ".", "train", "(", ")", "\n", "\n", "for", "step", ",", "(", "indices", ",", "points", ",", "gt", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "\n", "gt", "=", "{", "key", ":", "value", ".", "cuda", "(", ")", "for", "key", ",", "value", "in", "gt", ".", "items", "(", ")", "}", "\n", "\n", "# train", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "loss_data", "=", "{", "}", "\n", "loss_data", "[", "'seg_loss'", "]", "=", "loss_fn", ".", "seg_loss", "(", "class_out0", ",", "gt", ")", "\n", "loss_data", "[", "'ssc_loss'", "]", "=", "loss_fn", ".", "ssc_loss", "(", "class_out1", ",", "gt", ")", "\n", "\n", "loss", "=", "loss_data", "[", "'seg_loss'", "]", "+", "loss_data", "[", "'ssc_loss'", "]", "\n", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "clip_grad", ":", "\n", "            ", "if", "isinstance", "(", "clip_grad", ",", "bool", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "1.", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "clip_grad", ")", "\n", "", "", "optim", ".", "step", "(", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "for", "k", ",", "v", "in", "loss_data", ".", "items", "(", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "k", ",", "loss_data", "[", "k", "]", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "if", "not", "total_steps", "%", "steps_til_summary", ":", "\n", "                ", "tqdm", ".", "write", "(", "'Epoch %d, Total loss %0.6f, iteration time %0.6f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ",", "time", ".", "time", "(", ")", "-", "time1", ")", ")", "\n", "\n", "", "", "total_steps", "+=", "1", "\n", "\n", "", "return", "total_steps", ",", "train_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_valid": [[790, 876], ["max", "numpy.zeros", "list", "print", "print", "class_inv_remap.keys", "class_inv_remap.values", "tqdm.autonotebook.tqdm", "torch.get_rank", "list", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "evals.iouEval", "D_Seg.eval", "D_SSC.eval", "enumerate", "evals.iouEval.getIoU", "evals.iouEval.get_confusion", "class_inv_remap.keys", "len", "MinkowskiEngine.SparseTensor", "D_Seg", "D_SSC", "[].cpu().numpy", "evals.iouEval.addBatch", "class_jaccard[].mean", "torch.get_rank", "enumerate", "iou_score.update", "miou_score.update", "print", "print", "print", "print", "print", "print", "masked_class_out.astype", "label_iou.astype", "evals.eval_cd", "os.path.join", "class_out.astype.astype", "class_out.astype.reshape", "class_out.astype.astype", "class_out.astype.astype", "class_out.astype.tofile", "torch.get_rank", "pbar_valid.update", "numpy.sum", "writer.add_scalar", "writer.add_scalar", "str", "[].cpu", "numpy.sum", "print", "len", "D_SSC.data.max"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.eval_cd", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "def", "ssc_pretrain_valid", "(", "D_Seg", ",", "D_SSC", ",", "valid_dataloader", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "expr_path", ",", "config", ",", "train", ")", ":", "\n", "    ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "train", ":", "\n", "        ", "print", "(", "'================================'", ")", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "# make lookup table for mapping", "\n", "", "maxkey", "=", "max", "(", "class_inv_remap", ".", "keys", "(", ")", ")", "\n", "\n", "# +100 hack making lut bigger just in case there are unknown labels", "\n", "remap_lut_First", "=", "np", ".", "zeros", "(", "(", "maxkey", "+", "100", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "remap_lut_First", "[", "list", "(", "class_inv_remap", ".", "keys", "(", ")", ")", "]", "=", "list", "(", "class_inv_remap", ".", "values", "(", ")", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "valid_dataloader", ")", ")", "as", "pbar_valid", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "all_cd", "=", "0.", "\n", "\n", "D_Seg", ".", "eval", "(", ")", "\n", "D_SSC", ".", "eval", "(", ")", "\n", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "class_out", "=", "class_out1", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "masked_class_out", "=", "class_out", "[", "mask", "]", "\n", "\n", "complet_evaluator", ".", "addBatch", "(", "masked_class_out", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "if", "(", "not", "train", ")", "and", "config", "[", "'EVAL'", "]", "[", "'eval_cd'", "]", ":", "\n", "                    ", "all_cd", "+=", "evals", ".", "eval_cd", "(", "class_out", "[", "0", "]", ",", "label", "[", "0", "]", ",", "mask", "[", "0", "]", ")", "\n", "\n", "# save", "\n", "", "if", "not", "train", "and", "config", "[", "'EVAL'", "]", "[", "'save_predict_point'", "]", ":", "\n", "                    ", "full_save_dir", "=", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'predictions'", ",", "indices", "[", "0", "]", "[", "-", "6", ":", "]", "+", "'.label'", ")", "\n", "class_out", "=", "class_out", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "class_out", "=", "class_out", ".", "reshape", "(", "(", "-", "1", ")", ")", "\n", "upper_half", "=", "class_out", ">>", "16", "# get upper half for instances", "\n", "lower_half", "=", "class_out", "&", "0xFFFF", "# get lower half for semantics", "\n", "lower_half", "=", "remap_lut_First", "[", "lower_half", "]", "# do the remapping of semantics", "\n", "class_out", "=", "(", "upper_half", "<<", "16", ")", "+", "lower_half", "# reconstruct full label", "\n", "class_out", "=", "class_out", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "# Save", "\n", "final_preds", "=", "class_out", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "final_preds", ".", "tofile", "(", "full_save_dir", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "pbar_valid", ".", "update", "(", "1", ")", "\n", "\n", "", "", "_", ",", "class_jaccard", "=", "complet_evaluator", ".", "getIoU", "(", ")", "\n", "unet_miou", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator", ".", "get_confusion", "(", ")", "\n", "unet_iou", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "if", "train", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "'miou'", ",", "unet_miou", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'iou'", ",", "unet_iou", ",", "total_steps", ")", "\n", "\n", "", "ignore", "=", "[", "0", "]", "\n", "for", "i", ",", "jacc", "in", "enumerate", "(", "class_jaccard", ")", ":", "\n", "                    ", "if", "i", "not", "in", "ignore", ":", "\n", "                        ", "print", "(", "'IoU class {i:} [{class_str:}] = {jacc:.3f}'", ".", "format", "(", "\n", "i", "=", "i", ",", "class_str", "=", "class_strings", "[", "class_inv_remap", "[", "i", "]", "]", ",", "jacc", "=", "jacc", "*", "100", ")", ")", "\n", "\n", "", "", "iou_score", ".", "update", "(", "val", "=", "unet_iou", ")", "\n", "miou_score", ".", "update", "(", "val", "=", "unet_miou", ")", "\n", "print", "(", "'=========='", ")", "\n", "print", "(", "'IoU:'", ",", "unet_iou", ",", "iou_score", ".", "avg", ")", "\n", "print", "(", "'mIoU:'", ",", "unet_miou", ",", "miou_score", ".", "avg", ")", "\n", "print", "(", "'Best mIoU:'", ",", "miou_score", ".", "max", ")", "\n", "print", "(", "'CD:'", ",", "str", "(", "all_cd", "/", "len", "(", "valid_dataloader", ")", ")", ")", "\n", "print", "(", "'================================'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_pipeline": [[878, 971], ["D_Seg.parameters", "D_SSC.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.get_rank", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "tqdm.autonotebook.tqdm", "main_ssc_a.AverageMeter", "main_ssc_a.AverageMeter", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.get_rank", "pbar.update", "train_sampler.set_epoch", "valid_sampler.set_epoch", "main_ssc_a.ssc_pretrain_single_epoch", "main_ssc_a.ssc_pretrain_valid", "torch.get_rank", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.optim.lr_scheduler.StepLR.step", "os.path.join", "os.path.join", "numpy.array", "len", "len", "torch.get_rank", "os.path.join", "os.path.join", "numpy.array", "D_Seg.module.state_dict", "D_SSC.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "D_Seg.module.state_dict", "D_SSC.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_single_epoch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_valid"], ["", "", "", "", "def", "ssc_pretrain_pipeline", "(", "D_Seg", ",", "D_SSC", ",", "train_dataloader", ",", "valid_dataloader", ",", "train_sampler", ",", "valid_sampler", ",", "loss_fn", ",", "model_dir", ",", "config", ")", ":", "\n", "    ", "epochs_til_ckpt", "=", "config", "[", "'TRAIN'", "]", "[", "'epochs_til_ckpt'", "]", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "summaries_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summaries_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "summaries_dir", ")", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "summaries_dir", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "0", "\n", "\n", "", "epochs", "=", "config", "[", "'TRAIN'", "]", "[", "'num_epochs'", "]", "\n", "lr", "=", "config", "[", "'TRAIN'", "]", "[", "'lr'", "]", "\n", "\n", "model_params", "=", "[", "]", "\n", "model_params", "+=", "D_Seg", ".", "parameters", "(", ")", "\n", "model_params", "+=", "D_SSC", ".", "parameters", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "lr", ",", "params", "=", "model_params", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optim", ",", "step_size", "=", "10", ",", "gamma", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "optim", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "total_steps", "=", "checkpoint", "[", "'total_steps'", "]", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "        ", "total_steps", "=", "0", "\n", "epoch", "=", "0", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "train_dataloader", ")", "*", "epochs", ")", "as", "pbar", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", "len", "(", "train_dataloader", ")", "*", "epoch", ")", "\n", "\n", "", "train_losses", "=", "[", "]", "\n", "\n", "iou_score", "=", "AverageMeter", "(", ")", "\n", "miou_score", "=", "AverageMeter", "(", ")", "\n", "\n", "epoch_rest", "=", "epochs", "-", "epoch", "\n", "for", "i", "in", "range", "(", "epoch_rest", ")", ":", "\n", "            ", "if", "not", "epoch", "%", "epochs_til_ckpt", "and", "epoch", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_Seg'", ":", "D_Seg", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_SSC'", ":", "D_SSC", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_epoch_%04d_steps_%d.pth'", "%", "(", "epoch", ",", "total_steps", ")", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_epoch_%04d_steps_%d.txt'", "%", "(", "epoch", ",", "total_steps", ")", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n", "", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "valid_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "total_steps", ",", "train_losses", "=", "ssc_pretrain_single_epoch", "(", "D_Seg", ",", "D_SSC", ",", "model_params", ",", "train_dataloader", ",", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", "\n", "\n", "ssc_pretrain_valid", "(", "D_Seg", ",", "D_SSC", ",", "valid_dataloader", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "model_dir", ",", "config", ",", "True", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_Seg'", ":", "D_Seg", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'D_SSC'", ":", "D_SSC", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_final.pth'", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_final.txt'", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain": [[973, 1027], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Seg", "modules.D_SSC", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "MinkowskiEngine.MinkowskiSyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "loss.Loss_ssc_a", "main_ssc_a.ssc_pretrain_pipeline", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "numpy.random.seed", "numpy.random.seed", "int", "int", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "def", "ssc_pretrain", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "# dataset and dataloader", "\n", "    ", "train_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'train'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_train", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_Seg", "=", "modules", ".", "D_Seg", "(", "config", ")", "\n", "D_SSC", "=", "modules", ".", "D_SSC", "(", "config", ")", "\n", "\n", "D_Seg", "=", "D_Seg", ".", "cuda", "(", ")", "\n", "D_SSC", "=", "D_SSC", ".", "cuda", "(", ")", "\n", "\n", "D_Seg", "=", "ME", ".", "MinkowskiSyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_Seg", ")", "\n", "D_SSC", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_SSC", ")", "\n", "\n", "D_Seg", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_Seg", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_SSC", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_SSC", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "\n", "", "loss_fn", "=", "loss", ".", "Loss_ssc_a", "(", "train_dataset", ".", "compl_labelweights", ",", "config", "[", "'TRAIN'", "]", "[", "'loss_weights'", "]", ")", "\n", "\n", "# train", "\n", "ssc_pretrain_pipeline", "(", "D_Seg", "=", "D_Seg", ",", "D_SSC", "=", "D_SSC", ",", "train_dataloader", "=", "train_dataloader", ",", "valid_dataloader", "=", "valid_dataloader", ",", "train_sampler", "=", "train_sampler", ",", "valid_sampler", "=", "valid_sampler", ",", "loss_fn", "=", "loss_fn", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_valid": [[1029, 1070], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_Seg", "modules.D_SSC", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "os.makedirs", "main_ssc_a.AverageMeter", "main_ssc_a.AverageMeter", "main_ssc_a.ssc_pretrain_valid", "open", "yaml.safe_dump", "os.path.join", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain_valid", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "def", "ssc_valid", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_Seg", "=", "modules", ".", "D_Seg", "(", "config", ")", "\n", "D_SSC", "=", "modules", ".", "D_SSC", "(", "config", ")", "\n", "\n", "D_Seg", "=", "D_Seg", ".", "cuda", "(", ")", "\n", "D_SSC", "=", "D_SSC", ".", "cuda", "(", ")", "\n", "\n", "D_Seg", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_Seg", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_SSC", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_SSC", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'ssc_pretrain_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'predictions'", ")", ")", "\n", "\n", "# valid", "\n", "total_steps", "=", "0", "\n", "iou_score", "=", "AverageMeter", "(", ")", "\n", "miou_score", "=", "AverageMeter", "(", ")", "\n", "writer", "=", "0", "\n", "ssc_pretrain_valid", "(", "D_Seg", ",", "D_SSC", ",", "valid_dataloader", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "expr_path", ",", "config", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.visualize_pipeline": [[1072, 1131], ["int", "int", "int", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_Seg.eval", "D_SSC.eval", "D_shape.eval", "G_siren.eval", "numpy.zeros", "numpy.ones", "tqdm.autonotebook.tqdm", "enumerate", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_Seg", "D_SSC", "D_shape", "[].cpu().numpy", "print", "print", "evals.scene_save_ssc_a", "print", "print", "pbar.update", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "[].cpu", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "class_out1[].data.max"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_ssc_a", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "def", "visualize_pipeline", "(", "D_Seg", ",", "D_SSC", ",", "D_shape", ",", "G_siren", ",", "dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_Seg", ".", "eval", "(", ")", "\n", "D_SSC", ".", "eval", "(", ")", "\n", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "class_out0", "=", "D_Seg", "(", "sparse_input", ")", "\n", "class_out1", "=", "D_SSC", "(", "class_out0", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "class_out0", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "raw", "=", "eval_info", "[", "'raw'", "]", "[", "0", "]", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "class_out", "=", "class_out1", "[", "0", "]", ".", "data", ".", "max", "(", "0", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "'==========='", ")", "\n", "print", "(", "indices", "[", "0", "]", ")", "\n", "\n", "iou_out", "=", "evals", ".", "scene_save_ssc_a", "(", "G_siren", ",", "shape_out", "[", "0", "]", ",", "class_out", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "indices", "[", "0", "]", ")", "\n", "\n", "print", "(", "'iou: '", ",", "iou_out", ")", "\n", "print", "(", "'==========='", ")", "\n", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", "and", "step", ">", "5", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.visualize": [[1133, 1178], ["dataio.DG_Dataset", "torch.utils.data.DataLoader", "modules.D_Seg", "modules.D_SSC", "modules.D_shape", "modules.G_siren", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_ssc_a.visualize_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "", "", "def", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "1", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_Seg", "=", "modules", ".", "D_Seg", "(", "config", ")", "\n", "D_SSC", "=", "modules", ".", "D_SSC", "(", "config", ")", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "config", "[", "'TRAIN'", "]", "[", "'class_count'", "]", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "\n", "D_Seg", "=", "D_Seg", ".", "cuda", "(", ")", "\n", "D_SSC", "=", "D_SSC", ".", "cuda", "(", ")", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "\n", "D_Seg", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_Seg", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_SSC", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_SSC", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_Seg", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_Seg'", "]", ")", "\n", "D_SSC", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_SSC'", "]", ")", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "visualize_pipeline", "(", "D_Seg", "=", "D_Seg", ",", "D_SSC", "=", "D_SSC", ",", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "dataloader", "=", "dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.parse_args": [[1180, 1192], ["configargparse.ArgumentParser", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "# argument", "\n", "    ", "p", "=", "configargparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "help", "=", "'train, ssc_pretrain, valid, ssc_valid, visualize'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'opt.yaml'", ",", "help", "=", "'path to config file'", ")", "\n", "p", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'name of experiment'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ")", "\n", "opt", "=", "p", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.main": [[1194, 1245], ["main_ssc_a.parse_args", "yaml.safe_load", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.join", "open", "torch.get_rank", "os.path.exists", "os.path.join", "os.path.exists", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "main_ssc_a.train", "os.makedirs", "os.remove", "open", "yaml.safe_dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "main_ssc_a.valid", "input", "main_ssc_a.ssc_pretrain", "shutil.rmtree", "os.makedirs", "RuntimeError", "main_ssc_a.ssc_valid", "main_ssc_a.visualize"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_pretrain", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_a.ssc_valid", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "\n", "config", "=", "yaml", ".", "safe_load", "(", "open", "(", "opt", ".", "config", ",", "'r'", ")", ")", "\n", "config", "[", "'experiment_name'", "]", "=", "opt", ".", "experiment_name", "\n", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "=", "opt", ".", "task", "\n", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "local_rank", ")", "\n", "\n", "# expr path", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'ssc_pretrain'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'logging_root'", "]", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'ssc_valid'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'eval_logging_root'", "]", "\n", "", "expr_path", "=", "os", ".", "path", ".", "join", "(", "log_root", ",", "opt", ".", "experiment_name", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "expr_path", ")", ":", "\n", "            ", "if", "not", "(", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", "and", "(", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'ssc_pretrain'", ")", ")", ":", "\n", "                ", "overwrite", "=", "input", "(", "'The model directory %s exists. Overwrite? (y/n)'", "%", "expr_path", ")", "\n", "if", "overwrite", "==", "'y'", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "expr_path", ")", "\n", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'The model directory %s already exists.'", "%", "expr_path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "\n", "# config saved", "\n", "", "config_path", "=", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "config_path", ")", "\n", "", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "", "shutil", ".", "copy", "(", "'dataio.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'dataio.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'modules.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'modules.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'loss.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'loss.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'evals.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'evals.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'main_ssc_a.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'main_ssc_a.py'", ")", ")", "\n", "\n", "", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ":", "\n", "        ", "train", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", ":", "\n", "        ", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'ssc_pretrain'", ":", "\n", "        ", "ssc_pretrain", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'ssc_valid'", ":", "\n", "        ", "ssc_valid", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.__init__": [[42, 44], ["main_ssc_b.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.reset": [[45, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "max", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update": [[52, 59], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "self", ".", "val", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.eval_single": [[61, 161], ["int", "int", "int", "torch.get_rank", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_shape.eval", "G_siren.eval", "G_label.eval", "numpy.zeros", "numpy.ones", "range", "evals.iouEval", "valid_iter.next", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_shape", "evals.get_discrete_sdf_label_dec", "pred_label.argmax", "range", "evals.iouEval.addBatch", "range", "evals.iouEval.getIoU", "evals.iouEval.get_confusion", "len", "complet_evaluator.append", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "len", "numpy.where", "np.where.nonzero", "numpy.transpose", "complet_evaluator[].addBatch", "class_out[].astype", "label_iou.astype", "len", "complet_evaluator[].getIoU", "complet_evaluator[].get_confusion", "iou_list.append", "miou_list.append", "class_jaccard[].mean", "torch.get_rank", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "iou_score.update", "miou_score.update", "print", "print", "print", "print", "print", "print", "print", "print", "print", "evals.iouEval", "pred_iou.astype", "label_iou.astype", "class_jaccard[].mean", "numpy.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf_label_dec", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "", "", "def", "eval_single", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "valid_iter", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "config", ")", ":", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "print", "(", "'================================'", ")", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "G_label", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "", "complet_evaluator_ssc", "=", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", "=", "valid_iter", ".", "next", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "pred_sdf", ",", "pred_label", "=", "evals", ".", "get_discrete_sdf_label_dec", "(", "config", ",", "G_siren", ",", "G_label", ",", "shape_out", "[", "0", "]", ")", "\n", "class_out", "=", "pred_label", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "threshold", "=", "config", "[", "'TRAIN'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "pred_sdf", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "\n", "pos", "=", "pred_voxels", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "if", "pred_points", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "pred_voxels", "[", "pos", "]", "=", "class_out", "[", "pos", "]", "\n", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "", "complet_evaluator_ssc", ".", "addBatch", "(", "class_out", "[", "mask", "]", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "iou_list", "=", "[", "]", "\n", "miou_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "_", ",", "class_jaccard", "=", "complet_evaluator", "[", "i", "]", ".", "getIoU", "(", ")", "\n", "miou_cmplt", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator", "[", "i", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "miou_list", ".", "append", "(", "miou_cmplt", ")", "\n", "\n", "", "_", ",", "class_jaccard", "=", "complet_evaluator_ssc", ".", "getIoU", "(", ")", "\n", "miou_cmplt_ssc", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator_ssc", ".", "get_confusion", "(", ")", "\n", "iou_cmplt_ssc", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'iou'", ",", "iou_list", "[", "1", "]", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'miou'", ",", "miou_list", "[", "1", "]", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'ssc_iou'", ",", "iou_cmplt_ssc", ",", "total_steps", ")", "\n", "writer", ".", "add_scalar", "(", "'ssc_miou'", ",", "miou_cmplt_ssc", ",", "total_steps", ")", "\n", "iou_score", ".", "update", "(", "val", "=", "iou_list", "[", "1", "]", ")", "\n", "miou_score", ".", "update", "(", "val", "=", "miou_list", "[", "1", "]", ")", "\n", "print", "(", "'================================'", ")", "\n", "print", "(", "indices", ")", "\n", "print", "(", "'iou: '", ",", "iou_list", ",", "iou_score", ".", "avg", ")", "\n", "print", "(", "'miou: '", ",", "miou_list", ",", "miou_score", ".", "avg", ")", "\n", "print", "(", "'ssc_iou: '", ",", "iou_cmplt_ssc", ")", "\n", "print", "(", "'ssc_miou: '", ",", "miou_cmplt_ssc", ")", "\n", "print", "(", "'best iou: '", ",", "iou_score", ".", "max", ")", "\n", "print", "(", "'best miou: '", ",", "miou_score", ".", "max", ")", "\n", "print", "(", "'================================'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_single_epoch": [[163, 334], ["int", "int", "int", "iter", "enumerate", "time.time", "D_shape.train", "G_siren.train", "G_label.train", "optim.zero_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "optim.zero_grad", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_shape", "F.normalize.transpose", "points[].cuda", "points[].cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "G_siren", "G_label", "loss_fn.all_loss", "train_losses.append", "loss.backward", "optim.step", "value.cuda", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_shape", "F.normalize.transpose", "points[].cuda", "points[].cuda.clone().detach", "F.grid_sample.squeeze().squeeze().transpose().cuda", "torch.autograd.Variable", "optim.zero_grad", "G_label", "loss_fn.label_loss", "loss.backward", "grads[].append", "torch.autograd.Variable.grad.data.zero_", "optim.zero_grad", "G_siren", "loss_fn.sdf_loss", "loss.backward", "grads[].append", "torch.autograd.Variable.grad.data.zero_", "min_norm_solvers.MinNormSolver.find_min_norm_element", "float", "float", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.grid_sample", "torch.grid_sample", "loss.item", "isinstance", "torch.get_rank", "writer.add_scalar", "loss_fn.all_loss.items", "pbar.update", "main_ssc_b.eval_single", "gt.items", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.autograd.Variable", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.grid_sample", "torch.grid_sample", "F.grid_sample.data.clone", "torch.autograd.Variable", "torch.autograd.Variable", "points[].cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.item", "writer.add_scalar", "tqdm.autonotebook.tqdm.write", "points[].cuda.clone", "scaled_coords[].unsqueeze().unsqueeze", "scaled_coords[].unsqueeze().unsqueeze", "F.grid_sample.squeeze().squeeze().transpose", "torch.autograd.Variable.grad.data.clone", "torch.autograd.Variable.grad.data.clone", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "loss_data[].item", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "scaled_coords[].unsqueeze", "scaled_coords[].unsqueeze", "F.grid_sample.squeeze().squeeze", "loss.item", "F.grid_sample.squeeze", "time.time", "F.grid_sample.squeeze"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.all_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.label_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.loss.Loss_ssc_b.sdf_loss", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.min_norm_solvers.MinNormSolver.find_min_norm_element", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.eval_single"], ["", "", "", "def", "train_single_epoch", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "\n", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", ":", "\n", "\n", "    ", "steps_til_eval", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_eval'", "]", "\n", "steps_til_summary", "=", "config", "[", "'TRAIN'", "]", "[", "'steps_til_summary'", "]", "\n", "clip_grad", "=", "config", "[", "'TRAIN'", "]", "[", "'clip_grad'", "]", "\n", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "valid_iter", "=", "iter", "(", "valid_dataloader", ")", "\n", "\n", "for", "step", ",", "(", "indices", ",", "points", ",", "gt", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "train_dataloader", ")", ":", "\n", "        ", "time1", "=", "time", ".", "time", "(", ")", "\n", "\n", "D_shape", ".", "train", "(", ")", "\n", "G_siren", ".", "train", "(", ")", "\n", "G_label", ".", "train", "(", ")", "\n", "\n", "loss_data", "=", "{", "}", "\n", "grads", "=", "{", "}", "\n", "scale", "=", "{", "}", "\n", "\n", "gt", "=", "{", "key", ":", "value", ".", "cuda", "(", ")", "for", "key", ",", "value", "in", "gt", ".", "items", "(", ")", "}", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'moo'", "]", ":", "\n", "# encoder", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "in_feat_volatile", "=", "Variable", "(", "in_feat", ".", "data", ")", "\n", "\n", "", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat_volatile", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "", "shape_out", "=", "shape_out", ".", "transpose", "(", "2", ",", "4", ")", "# transpose axis x and z", "\n", "coords", "=", "points", "[", "'coords'", "]", ".", "cuda", "(", ")", "\n", "scaled_coords", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "                ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "rep_variable", "=", "Variable", "(", "shapes", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "# decoder label", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "label_out", "=", "G_label", "(", "rep_variable", ",", "coords", ")", "\n", "\n", "decoder_label_loss", "=", "loss_fn", ".", "label_loss", "(", "label_out", "[", "'model_out'", "]", ",", "gt", ")", "\n", "loss", "=", "decoder_label_loss", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "grads", "[", "'decoder_label_loss'", "]", "=", "[", "]", "\n", "grads", "[", "'decoder_label_loss'", "]", ".", "append", "(", "Variable", "(", "rep_variable", ".", "grad", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "rep_variable", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# decoder sdf", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "sdf_out", "=", "G_siren", "(", "rep_variable", ",", "coords", ")", "\n", "\n", "decoder_sdf_loss", "=", "loss_fn", ".", "sdf_loss", "(", "sdf_out", "[", "'model_in'", "]", ",", "sdf_out", "[", "'model_out'", "]", ",", "gt", ")", "\n", "loss", "=", "decoder_sdf_loss", "[", "'sdf'", "]", "+", "decoder_sdf_loss", "[", "'inter'", "]", "+", "decoder_sdf_loss", "[", "'normal_constraint'", "]", "+", "decoder_sdf_loss", "[", "'grad_constraint'", "]", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "grads", "[", "'decoder_sdf_loss'", "]", "=", "[", "]", "\n", "grads", "[", "'decoder_sdf_loss'", "]", ".", "append", "(", "Variable", "(", "rep_variable", ".", "grad", ".", "data", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ")", "\n", "rep_variable", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# get scale", "\n", "sol", ",", "min_norm", "=", "MinNormSolver", ".", "find_min_norm_element", "(", "[", "grads", "[", "'decoder_label_loss'", "]", ",", "grads", "[", "'decoder_sdf_loss'", "]", "]", ")", "\n", "scale", "[", "'decoder_label_loss'", "]", "=", "float", "(", "sol", "[", "0", "]", ")", "\n", "scale", "[", "'decoder_sdf_loss'", "]", "=", "float", "(", "sol", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale", "[", "'decoder_label_loss'", "]", "=", "1.", "\n", "scale", "[", "'decoder_sdf_loss'", "]", "=", "1.", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# train", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "'target'", ",", "\n", ")", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "            ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "# trilinear #", "\n", "", "shape_out", "=", "shape_out", ".", "transpose", "(", "2", ",", "4", ")", "# transpose axis x and z", "\n", "coords", "=", "points", "[", "'coords'", "]", ".", "cuda", "(", ")", "\n", "scaled_coords", "=", "coords", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "=", "(", "(", "scaled_coords", "[", ":", ",", ":", ",", "2", "]", "+", "1.", ")", "/", "0.25", "-", "0.5", ")", "*", "2.", "# coords z located in [-1., -0.75], scale to [-1,1]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_sample_strategy'", "]", "==", "'trilinear'", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "shapes", "=", "F", ".", "grid_sample", "(", "shape_out", ",", "scaled_coords", "[", ":", ",", ":", ",", ":", "3", "]", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ",", "mode", "=", "'nearest'", ",", "padding_mode", "=", "'border'", ",", "align_corners", "=", "False", ")", "\n", "", "shapes", "=", "shapes", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "# batch_size * point_num * shape_embedding_size", "\n", "\n", "sdf_out", "=", "G_siren", "(", "shapes", ",", "coords", ")", "\n", "label_out", "=", "G_label", "(", "shapes", ",", "coords", ")", "\n", "g_model_output", "=", "{", "'model_in'", ":", "sdf_out", "[", "'model_in'", "]", ",", "'sdf_out'", ":", "sdf_out", "[", "'model_out'", "]", ",", "'label_out'", ":", "label_out", "[", "'model_out'", "]", "}", "\n", "\n", "loss_data", "=", "loss_fn", ".", "all_loss", "(", "out_cls", ",", "targets", ",", "g_model_output", ",", "gt", ")", "\n", "loss", "=", "loss_data", "[", "'cmplt_loss'", "]", "*", "1.", "+", "loss_data", "[", "'label_loss'", "]", "*", "scale", "[", "'decoder_label_loss'", "]", "+", "loss_data", "[", "'sdf'", "]", "*", "scale", "[", "'decoder_sdf_loss'", "]", "+", "loss_data", "[", "'inter'", "]", "*", "scale", "[", "'decoder_sdf_loss'", "]", "+", "loss_data", "[", "'normal_constraint'", "]", "*", "scale", "[", "'decoder_sdf_loss'", "]", "+", "loss_data", "[", "'grad_constraint'", "]", "*", "scale", "[", "'decoder_sdf_loss'", "]", "\n", "\n", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "clip_grad", ":", "\n", "            ", "if", "isinstance", "(", "clip_grad", ",", "bool", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "1.", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model_params", ",", "max_norm", "=", "clip_grad", ")", "\n", "", "", "optim", ".", "step", "(", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'training_loss'", ",", "loss", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "for", "k", ",", "v", "in", "loss_data", ".", "items", "(", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "k", ",", "loss_data", "[", "k", "]", ".", "item", "(", ")", ",", "total_steps", ")", "\n", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "if", "not", "total_steps", "%", "steps_til_summary", ":", "\n", "                ", "tqdm", ".", "write", "(", "'Epoch %d, Total loss %0.6f, iteration time %0.6f'", "%", "(", "epoch", ",", "loss", ".", "item", "(", ")", ",", "time", ".", "time", "(", ")", "-", "time1", ")", ")", "\n", "\n", "", "", "total_steps", "+=", "1", "\n", "\n", "if", "not", "total_steps", "%", "steps_til_eval", "and", "total_steps", ":", "\n", "            ", "eval_single", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "valid_iter", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "writer", ",", "config", ")", "\n", "\n", "# torch.cuda.empty_cache()", "\n", "\n", "", "", "return", "total_steps", ",", "train_losses", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_pipeline": [[336, 430], ["D_shape.parameters", "G_siren.parameters", "G_label.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.get_rank", "os.path.join", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "torch.optim.lr_scheduler.StepLR.load_state_dict", "tqdm.autonotebook.tqdm", "main_ssc_b.AverageMeter", "main_ssc_b.AverageMeter", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.get_rank", "pbar.update", "train_sampler.set_epoch", "valid_sampler.set_epoch", "main_ssc_b.train_single_epoch", "torch.get_rank", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "numpy.savetxt", "torch.optim.lr_scheduler.StepLR.step", "os.path.join", "os.path.join", "numpy.array", "len", "len", "torch.get_rank", "os.path.join", "os.path.join", "numpy.array", "D_shape.module.state_dict", "G_siren.module.state_dict", "G_label.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict", "D_shape.module.state_dict", "G_siren.module.state_dict", "G_label.module.state_dict", "torch.optim.Adam.state_dict", "torch.optim.lr_scheduler.StepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_single_epoch"], ["", "def", "train_pipeline", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "train_dataloader", ",", "valid_dataloader", ",", "train_sampler", ",", "valid_sampler", ",", "loss_fn", ",", "model_dir", ",", "config", ")", ":", "\n", "    ", "epochs_til_ckpt", "=", "config", "[", "'TRAIN'", "]", "[", "'epochs_til_ckpt'", "]", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "summaries_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summaries_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "summaries_dir", ")", "\n", "\n", "", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoints_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoints_dir", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "summaries_dir", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "0", "\n", "\n", "", "epochs", "=", "config", "[", "'TRAIN'", "]", "[", "'num_epochs'", "]", "\n", "lr", "=", "config", "[", "'TRAIN'", "]", "[", "'lr'", "]", "\n", "\n", "model_params", "=", "[", "]", "\n", "model_params", "+=", "D_shape", ".", "parameters", "(", ")", "\n", "model_params", "+=", "G_siren", ".", "parameters", "(", ")", "\n", "model_params", "+=", "G_label", ".", "parameters", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "lr", ",", "params", "=", "model_params", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optim", ",", "step_size", "=", "10", ",", "gamma", "=", "0.9", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "optim", ".", "load_state_dict", "(", "checkpoint", "[", "'optim'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "total_steps", "=", "checkpoint", "[", "'total_steps'", "]", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "        ", "total_steps", "=", "0", "\n", "epoch", "=", "0", "\n", "\n", "", "with", "tqdm", "(", "total", "=", "len", "(", "train_dataloader", ")", "*", "epochs", ")", "as", "pbar", ":", "\n", "        ", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "pbar", ".", "update", "(", "len", "(", "train_dataloader", ")", "*", "epoch", ")", "\n", "\n", "", "train_losses", "=", "[", "]", "\n", "\n", "iou_score", "=", "AverageMeter", "(", ")", "\n", "miou_score", "=", "AverageMeter", "(", ")", "\n", "\n", "epoch_rest", "=", "epochs", "-", "epoch", "\n", "for", "i", "in", "range", "(", "epoch_rest", ")", ":", "\n", "            ", "if", "not", "epoch", "%", "epochs_til_ckpt", "and", "epoch", "and", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_shape'", ":", "D_shape", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_siren'", ":", "G_siren", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_label'", ":", "G_label", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_epoch_%04d_steps_%d.pth'", "%", "(", "epoch", ",", "total_steps", ")", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_epoch_%04d_steps_%d.txt'", "%", "(", "epoch", ",", "total_steps", ")", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n", "", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "valid_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "total_steps", ",", "train_losses", "=", "train_single_epoch", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "model_params", ",", "train_dataloader", ",", "valid_dataloader", ",", "optim", ",", "loss_fn", ",", "epoch", ",", "total_steps", ",", "iou_score", ",", "miou_score", ",", "train_losses", ",", "writer", ",", "pbar", ",", "config", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'lr_scheduler'", "]", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "\n", "{", "\n", "'D_shape'", ":", "D_shape", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_siren'", ":", "G_siren", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'G_label'", ":", "G_label", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optim'", ":", "optim", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'total_steps'", ":", "total_steps", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'weights_final.pth'", ")", "\n", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'train_losses_final.txt'", ")", ",", "\n", "np", ".", "array", "(", "train_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train": [[432, 493], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_shape", "modules.G_siren", "modules.G_label", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "MinkowskiEngine.MinkowskiSyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "loss.Loss_ssc_b", "main_ssc_b.train_pipeline", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "numpy.random.seed", "numpy.random.seed", "int", "int", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "def", "train", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "# dataset and dataloader", "\n", "    ", "train_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'train'", ")", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_train", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'train_batch_size'", "]", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "1", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "G_label", "=", "modules", ".", "G_label", "(", "config", ")", "\n", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "G_label", "=", "G_label", ".", "cuda", "(", ")", "\n", "\n", "D_shape", "=", "ME", ".", "MinkowskiSyncBatchNorm", ".", "convert_sync_batchnorm", "(", "D_shape", ")", "\n", "G_siren", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "G_siren", ")", "\n", "G_label", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "G_label", ")", "\n", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_label", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_label", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'TRAIN'", "]", "[", "'resume_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "G_label", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_label'", "]", ")", "\n", "\n", "", "loss_fn", "=", "loss", ".", "Loss_ssc_b", "(", "train_dataset", ".", "compl_labelweights", ",", "config", "[", "'TRAIN'", "]", "[", "'loss_weights'", "]", ")", "\n", "\n", "# train", "\n", "train_pipeline", "(", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "G_label", "=", "G_label", ",", "train_dataloader", "=", "train_dataloader", ",", "valid_dataloader", "=", "valid_dataloader", ",", "train_sampler", "=", "train_sampler", ",", "valid_sampler", "=", "valid_sampler", ",", "loss_fn", "=", "loss_fn", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid_pipeline": [[495, 628], ["int", "int", "int", "print", "results.append", "numpy.zeros_like", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "results.append", "numpy.savetxt", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_shape.eval", "G_siren.eval", "G_label.eval", "numpy.zeros", "numpy.ones", "range", "evals.iouEval", "range", "evals.iouEval.getIoU", "evals.iouEval.get_confusion", "print", "print", "print", "print", "print", "os.path.join", "len", "complet_evaluator.append", "tqdm.autonotebook.tqdm", "enumerate", "len", "results.append", "complet_evaluator[].getIoU", "complet_evaluator[].get_confusion", "enumerate", "print", "results.append", "print", "results.append", "iou_list.append", "miou_list.append", "class_jaccard[].mean", "str", "str", "str", "str", "str", "str", "evals.iouEval", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_shape", "evals.get_discrete_sdf_label_dec", "pred_label.argmax", "numpy.zeros_like", "range", "evals.iouEval.addBatch", "pbar.update", "class_jaccard[].mean", "str", "str", "numpy.sum", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "len", "numpy.where", "np.where.nonzero", "numpy.transpose", "complet_evaluator[].addBatch", "class_out[].astype", "label_iou.astype", "numpy.sum", "print", "results.append", "numpy.sum", "len", "pred_iou.astype", "label_iou.astype", "evals.eval_cd", "numpy.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "abs"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.getIoU", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.get_confusion", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.get_discrete_sdf_label_dec", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.iouEval.addBatch", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.eval_cd"], ["", "def", "valid_pipeline", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "valid_dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "all_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "G_label", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "NUM_CLASS_COMPLET", "=", "20", "\n", "complet_evaluator", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "            ", "complet_evaluator", ".", "append", "(", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", ")", "\n", "", "complet_evaluator_ssc", "=", "evals", ".", "iouEval", "(", "NUM_CLASS_COMPLET", ",", "[", "]", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "valid_dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "valid_dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "pred_sdf", ",", "pred_label", "=", "evals", ".", "get_discrete_sdf_label_dec", "(", "config", ",", "G_siren", ",", "G_label", ",", "shape_out", "[", "0", "]", ")", "\n", "class_out", "=", "pred_label", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "label_iou", "=", "label", "[", "mask", "]", "\n", "\n", "single_cd", "=", "np", ".", "zeros_like", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", ":", "\n", "                    ", "threshold", "=", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", "[", "i", "]", "\n", "pred_voxels", "=", "np", ".", "where", "(", "abs", "(", "pred_sdf", ")", "<", "threshold", ",", "one_array", ",", "zero_array", ")", "\n", "\n", "pos", "=", "pred_voxels", ".", "nonzero", "(", ")", "\n", "pred_points", "=", "np", ".", "transpose", "(", "pos", ")", "\n", "if", "pred_points", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "pred_voxels", "[", "pos", "]", "=", "class_out", "[", "pos", "]", "\n", "\n", "pred_iou", "=", "pred_voxels", "[", "mask", "]", "\n", "\n", "complet_evaluator", "[", "i", "]", ".", "addBatch", "(", "pred_iou", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "if", "config", "[", "'EVAL'", "]", "[", "'eval_cd'", "]", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "evals", ".", "eval_cd", "(", "pred_voxels", ",", "label", ",", "mask", ")", "\n", "", "else", ":", "\n", "                        ", "single_cd", "[", "i", "]", "=", "0", "\n", "\n", "", "", "all_cd", "+=", "single_cd", "\n", "\n", "complet_evaluator_ssc", ".", "addBatch", "(", "class_out", "[", "mask", "]", ".", "astype", "(", "int", ")", ",", "label_iou", ".", "astype", "(", "int", ")", ")", "\n", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", "and", "step", ">", "-", "1", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "iou_list", "=", "[", "]", "\n", "miou_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "complet_evaluator", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "'========='", ")", "\n", "_", ",", "class_jaccard", "=", "complet_evaluator", "[", "j", "]", ".", "getIoU", "(", ")", "\n", "miou_cmplt", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator", "[", "j", "]", ".", "get_confusion", "(", ")", "\n", "iou_cmplt", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "ignore", "=", "[", "0", "]", "\n", "# print also classwise", "\n", "for", "i", ",", "jacc", "in", "enumerate", "(", "class_jaccard", ")", ":", "\n", "                ", "if", "i", "not", "in", "ignore", ":", "\n", "                    ", "log", "=", "'IoU class {i:} [{class_str:}] = {jacc:.3f}'", ".", "format", "(", "\n", "i", "=", "i", ",", "class_str", "=", "class_strings", "[", "class_inv_remap", "[", "i", "]", "]", ",", "jacc", "=", "jacc", "*", "100", ")", "\n", "print", "(", "log", ")", "\n", "results", ".", "append", "(", "log", ")", "\n", "\n", "", "", "log", "=", "'miou: '", "+", "str", "(", "miou_cmplt", ")", "\n", "print", "(", "log", ")", "\n", "results", ".", "append", "(", "log", ")", "\n", "log", "=", "'iou: '", "+", "str", "(", "iou_cmplt", ")", "\n", "print", "(", "log", ")", "\n", "results", ".", "append", "(", "log", ")", "\n", "\n", "iou_list", ".", "append", "(", "iou_cmplt", ")", "\n", "miou_list", ".", "append", "(", "miou_cmplt", ")", "\n", "\n", "", "_", ",", "class_jaccard", "=", "complet_evaluator_ssc", ".", "getIoU", "(", ")", "\n", "miou_cmplt_ssc", "=", "class_jaccard", "[", "1", ":", "]", ".", "mean", "(", ")", "*", "100", "\n", "conf", "=", "complet_evaluator_ssc", ".", "get_confusion", "(", ")", "\n", "iou_cmplt_ssc", "=", "(", "np", ".", "sum", "(", "conf", "[", "1", ":", ",", "1", ":", "]", ")", ")", "/", "(", "np", ".", "sum", "(", "conf", ")", "-", "conf", "[", "0", ",", "0", "]", ")", "*", "100", "\n", "\n", "print", "(", "'================'", ")", "\n", "print", "(", "'iou: '", ",", "iou_list", ")", "\n", "print", "(", "'miou: '", ",", "miou_list", ")", "\n", "print", "(", "'ssc_iou: '", ",", "iou_cmplt_ssc", ")", "\n", "print", "(", "'ssc_miou: '", ",", "miou_cmplt_ssc", ")", "\n", "\n", "", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nSSC IoU:  '", "+", "str", "(", "iou_cmplt_ssc", ")", ")", "\n", "results", ".", "append", "(", "'\\nSSC mIoU:  '", "+", "str", "(", "miou_cmplt_ssc", ")", ")", "\n", "results", ".", "append", "(", "'========================'", ")", "\n", "results", ".", "append", "(", "'\\nIoU:  '", "+", "str", "(", "iou_list", ")", ")", "\n", "results", ".", "append", "(", "'\\nmIoU:  '", "+", "str", "(", "miou_list", ")", ")", "\n", "results", ".", "append", "(", "'\\nCD:   '", "+", "str", "(", "all_cd", "/", "len", "(", "valid_dataloader", ")", ")", ")", "\n", "results", ".", "append", "(", "'\\nThreshold: '", "+", "str", "(", "config", "[", "'EVAL'", "]", "[", "'eval_threshold'", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'pred_iou.txt'", ")", ",", "results", ",", "fmt", "=", "'%s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid": [[630, 672], ["dataio.DG_Dataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "modules.D_shape", "modules.G_siren", "modules.G_label", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_ssc_b.valid_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "def", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "valid_dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "\n", "sampler", "=", "valid_sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "1", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "G_label", "=", "modules", ".", "G_label", "(", "config", ")", "\n", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "G_label", "=", "G_label", ".", "cuda", "(", ")", "\n", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_label", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_label", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "G_label", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_label'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "valid_pipeline", "(", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "G_label", "=", "G_label", ",", "valid_dataloader", "=", "valid_dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize_pipeline": [[674, 729], ["int", "int", "int", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "D_shape.eval", "G_siren.eval", "G_label.eval", "numpy.zeros", "numpy.ones", "tqdm.autonotebook.tqdm", "enumerate", "MinkowskiEngine.SparseTensor", "cm.insert_and_map", "D_shape", "print", "print", "evals.scene_save_ssc_b", "print", "print", "pbar.update", "len", "occupancy.cuda", "F.normalize.dense", "torch.normalize", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.evals.scene_save_ssc_b", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "def", "visualize_pipeline", "(", "D_shape", ",", "G_siren", ",", "G_label", ",", "dataloader", ",", "model_dir", ",", "config", ")", ":", "\n", "\n", "    ", "x_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "y_size", "=", "int", "(", "256", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "z_size", "=", "int", "(", "32", "/", "config", "[", "'TRAIN'", "]", "[", "'chunk_size'", "]", ")", "\n", "\n", "print", "(", "config", "[", "'experiment_name'", "]", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "D_shape", ".", "eval", "(", ")", "\n", "G_siren", ".", "eval", "(", ")", "\n", "G_label", ".", "eval", "(", ")", "\n", "\n", "SCALE", "=", "[", "256", ",", "256", ",", "32", "]", "\n", "zero_array", "=", "np", ".", "zeros", "(", "SCALE", ")", "\n", "one_array", "=", "np", ".", "ones", "(", "SCALE", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "len", "(", "dataloader", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "step", ",", "(", "indices", ",", "eval_info", ",", "raw_data", ",", "in_feat", ",", "occupancy", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "\n", "                ", "sparse_input", "=", "ME", ".", "SparseTensor", "(", "\n", "features", "=", "in_feat", ",", "\n", "coordinates", "=", "raw_data", ",", "\n", "device", "=", "'cuda'", ",", "\n", ")", "\n", "\n", "cm", "=", "sparse_input", ".", "coordinate_manager", "\n", "target_key", ",", "_", "=", "cm", ".", "insert_and_map", "(", "\n", "occupancy", ".", "cuda", "(", ")", ",", "\n", "string_id", "=", "\"target\"", ",", "\n", ")", "\n", "\n", "out_cls", ",", "targets", ",", "shape_out", "=", "D_shape", "(", "sparse_input", ",", "target_key", ")", "\n", "\n", "shape_out", "=", "shape_out", ".", "dense", "(", "shape", "=", "torch", ".", "Size", "(", "[", "config", "[", "'DATA_IO'", "]", "[", "'valid_batch_size'", "]", ",", "config", "[", "'TRAIN'", "]", "[", "'shape_embedding_size'", "]", ",", "x_size", ",", "y_size", ",", "z_size", "]", ")", ")", "[", "0", "]", "\n", "if", "config", "[", "'TRAIN'", "]", "[", "'shape_normalize'", "]", "==", "True", ":", "\n", "                    ", "shape_out", "=", "F", ".", "normalize", "(", "shape_out", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "raw", "=", "eval_info", "[", "'raw'", "]", "[", "0", "]", "\n", "label", "=", "eval_info", "[", "'label'", "]", "[", "0", "]", "\n", "mask", "=", "eval_info", "[", "'mask'", "]", "[", "0", "]", "\n", "\n", "print", "(", "'==========='", ")", "\n", "print", "(", "indices", "[", "0", "]", ")", "\n", "\n", "iou_out", "=", "evals", ".", "scene_save_ssc_b", "(", "G_siren", ",", "G_label", ",", "shape_out", "[", "0", "]", ",", "raw", ",", "label", ",", "mask", ",", "config", ",", "model_dir", ",", "indices", "[", "0", "]", ")", "\n", "\n", "print", "(", "'iou: '", ",", "iou_out", ")", "\n", "print", "(", "'==========='", ")", "\n", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'debug'", "]", "and", "step", ">", "5", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize": [[731, 772], ["dataio.DG_Dataset", "torch.utils.data.DataLoader", "modules.D_shape", "modules.G_siren", "modules.G_label", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "torch.nn.parallel.DistributedDataParallel.module.load_state_dict", "main_ssc_b.visualize_pipeline", "open", "yaml.safe_dump", "os.path.join", "numpy.random.seed", "int", "time.time"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize_pipeline", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "", "", "", "def", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", ":", "\n", "    ", "dataset", "=", "dataio", ".", "DG_Dataset", "(", "config", ",", "split", "=", "'valid'", ")", "\n", "dataloader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "dataio", ".", "DG_DataMerge_valid", ",", "\n", "batch_size", "=", "1", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "config", "[", "'DATA_IO'", "]", "[", "'num_workers'", "]", ",", "\n", "worker_init_fn", "=", "lambda", "x", ":", "np", ".", "random", ".", "seed", "(", "x", "+", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", ")", "\n", "\n", "# model", "\n", "D_shape", "=", "modules", ".", "D_shape", "(", "1", ",", "config", ")", "\n", "G_siren", "=", "modules", ".", "G_siren", "(", "config", ")", "\n", "G_label", "=", "modules", ".", "G_label", "(", "config", ")", "\n", "\n", "D_shape", "=", "D_shape", ".", "cuda", "(", ")", "\n", "G_siren", "=", "G_siren", ".", "cuda", "(", ")", "\n", "G_label", "=", "G_label", ".", "cuda", "(", ")", "\n", "\n", "D_shape", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "D_shape", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_siren", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_siren", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "G_label", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "G_label", ",", "device_ids", "=", "[", "opt", ".", "local_rank", "]", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'EVAL'", "]", "[", "'checkpoint_path'", "]", ",", "'cuda'", ")", "\n", "\n", "D_shape", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'D_shape'", "]", ")", "\n", "G_siren", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_siren'", "]", ")", "\n", "G_label", ".", "module", ".", "load_state_dict", "(", "checkpoint", "[", "'G_label'", "]", ")", "\n", "\n", "# config saved", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "\n", "# valid", "\n", "", "visualize_pipeline", "(", "D_shape", "=", "D_shape", ",", "G_siren", "=", "G_siren", ",", "G_label", "=", "G_label", ",", "dataloader", "=", "dataloader", ",", "model_dir", "=", "expr_path", ",", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args": [[774, 786], ["configargparse.ArgumentParser", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "# argument", "\n", "    ", "p", "=", "configargparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'--task'", ",", "type", "=", "str", ",", "help", "=", "'train, valid, visualize'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--config'", ",", "type", "=", "str", ",", "default", "=", "'opt.yaml'", ",", "help", "=", "'path to config file'", ")", "\n", "p", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'name of experiment'", ")", "\n", "\n", "p", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ")", "\n", "opt", "=", "p", ".", "parse_args", "(", ")", "\n", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.main": [[788, 835], ["main_ssc_b.parse_args", "yaml.safe_load", "torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.path.join", "open", "torch.get_rank", "os.path.exists", "os.path.join", "os.path.exists", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "main_ssc_b.train", "os.makedirs", "os.remove", "open", "yaml.safe_dump", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "main_ssc_b.valid", "input", "main_ssc_b.visualize", "shutil.rmtree", "os.makedirs", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.parse_args", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.train", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.valid", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.visualize"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "\n", "config", "=", "yaml", ".", "safe_load", "(", "open", "(", "opt", ".", "config", ",", "'r'", ")", ")", "\n", "config", "[", "'experiment_name'", "]", "=", "opt", ".", "experiment_name", "\n", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "=", "opt", ".", "task", "\n", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "local_rank", ")", "\n", "\n", "# expr path", "\n", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'logging_root'", "]", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", "or", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "log_root", "=", "config", "[", "'GENERAL'", "]", "[", "'eval_logging_root'", "]", "\n", "", "expr_path", "=", "os", ".", "path", ".", "join", "(", "log_root", ",", "opt", ".", "experiment_name", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "expr_path", ")", ":", "\n", "            ", "if", "not", "(", "config", "[", "'TRAIN'", "]", "[", "'resume'", "]", "and", "(", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ")", ")", ":", "\n", "                ", "overwrite", "=", "input", "(", "'The model directory %s exists. Overwrite? (y/n)'", "%", "expr_path", ")", "\n", "if", "overwrite", "==", "'y'", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "expr_path", ")", "\n", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'The model directory %s already exists.'", "%", "expr_path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "expr_path", ")", "\n", "\n", "# config saved", "\n", "", "config_path", "=", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'config.yaml'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "config_path", ")", "\n", "", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "safe_dump", "(", "config", ",", "f", ")", "\n", "", "shutil", ".", "copy", "(", "'dataio.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'dataio.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'modules.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'modules.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'loss.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'loss.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'evals.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'evals.py'", ")", ")", "\n", "shutil", ".", "copy", "(", "'main_ssc_b.py'", ",", "os", ".", "path", ".", "join", "(", "expr_path", ",", "'main_ssc_b.py'", ")", ")", "\n", "\n", "", "if", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'train'", ":", "\n", "        ", "train", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'valid'", ":", "\n", "        ", "valid", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "", "elif", "config", "[", "'GENERAL'", "]", "[", "'task'", "]", "==", "'visualize'", ":", "\n", "        ", "visualize", "(", "opt", ",", "config", ",", "expr_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_num_samples": [[7, 14], ["targets.size", "torch.no_grad", "torch.no_grad", "torch.ones_like", "torch.ones_like", "torch.ones_like.new_zeros", "ones.new_zeros.scatter_add_"], "function", ["None"], ["def", "get_num_samples", "(", "targets", ",", "num_classes", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "ones", "=", "torch", ".", "ones_like", "(", "targets", ",", "dtype", "=", "dtype", ")", "\n", "num_samples", "=", "ones", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ")", ")", "\n", "num_samples", ".", "scatter_add_", "(", "1", ",", "targets", ",", "ones", ")", "\n", "", "return", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_prototypes": [[16, 50], ["prototype.get_num_samples", "torch.max.unsqueeze_", "torch.max", "torch.max", "embeddings.new_zeros", "targets.unsqueeze().expand_as", "embeddings.new_zeros.scatter_add_().div_", "embeddings.size", "embeddings.size", "torch.ones_like", "torch.ones_like", "targets.unsqueeze", "embeddings.new_zeros.scatter_add_"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_num_samples"], ["", "def", "get_prototypes", "(", "embeddings", ",", "targets", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Compute the prototypes (the mean vector of the embedded training/support \n    points belonging to its class) for each classes in the task.\n\n    Parameters\n    ----------\n    embeddings : `torch.FloatTensor` instance\n        A tensor containing the embeddings of the support points. This tensor \n        has shape `(batch_size, num_examples, embedding_size)`.\n\n    targets : `torch.LongTensor` instance\n        A tensor containing the targets of the support points. This tensor has \n        shape `(batch_size, num_examples)`.\n\n    num_classes : int\n        Number of classes in the task.\n\n    Returns\n    -------\n    prototypes : `torch.FloatTensor` instance\n        A tensor containing the prototypes for each class. This tensor has shape\n        `(batch_size, num_classes, embedding_size)`.\n    \"\"\"", "\n", "batch_size", ",", "embedding_size", "=", "embeddings", ".", "size", "(", "0", ")", ",", "embeddings", ".", "size", "(", "-", "1", ")", "\n", "\n", "num_samples", "=", "get_num_samples", "(", "targets", ",", "num_classes", ",", "dtype", "=", "embeddings", ".", "dtype", ")", "\n", "num_samples", ".", "unsqueeze_", "(", "-", "1", ")", "\n", "num_samples", "=", "torch", ".", "max", "(", "num_samples", ",", "torch", ".", "ones_like", "(", "num_samples", ")", ")", "\n", "\n", "prototypes", "=", "embeddings", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ",", "embedding_size", ")", ")", "\n", "indices", "=", "targets", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "embeddings", ")", "\n", "prototypes", ".", "scatter_add_", "(", "1", ",", "indices", ",", "embeddings", ")", ".", "div_", "(", "num_samples", ")", "\n", "\n", "return", "prototypes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.prototypical_loss": [[52, 78], ["torch.sum", "torch.sum", "torch.cross_entropy", "prototypes.unsqueeze", "embeddings.unsqueeze"], "function", ["None"], ["", "def", "prototypical_loss", "(", "prototypes", ",", "embeddings", ",", "targets", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Compute the loss (i.e. negative log-likelihood) for the prototypical \n    network, on the test/query points.\n\n    Parameters\n    ----------\n    prototypes : `torch.FloatTensor` instance\n        A tensor containing the prototypes for each class. This tensor has shape \n        `(batch_size, num_classes, embedding_size)`.\n\n    embeddings : `torch.FloatTensor` instance\n        A tensor containing the embeddings of the query points. This tensor has \n        shape `(batch_size, num_examples, embedding_size)`.\n\n    targets : `torch.LongTensor` instance\n        A tensor containing the targets of the query points. This tensor has \n        shape `(batch_size, num_examples)`.\n\n    Returns\n    -------\n    loss : `torch.FloatTensor` instance\n        The negative log-likelihood on the query points.\n    \"\"\"", "\n", "squared_distances", "=", "torch", ".", "sum", "(", "(", "prototypes", ".", "unsqueeze", "(", "2", ")", "\n", "-", "embeddings", ".", "unsqueeze", "(", "1", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "F", ".", "cross_entropy", "(", "-", "squared_distances", ",", "targets", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.metrics._pad_images": [[9, 15], ["torch.pad"], "function", ["None"], ["def", "_pad_images", "(", "inputs", ",", "size", "=", "(", "224", ",", "224", ")", ",", "**", "kwargs", ")", ":", "\n", "    ", "height", ",", "width", "=", "inputs", ".", "shape", "[", "-", "2", ":", "]", "\n", "pad_height", ",", "pad_width", "=", "(", "size", "[", "0", "]", "-", "height", ")", "//", "2", ",", "(", "size", "[", "1", "]", "-", "width", ")", "//", "2", "\n", "padding", "=", "(", "pad_width", ",", "size", "[", "1", "]", "-", "width", "-", "pad_width", ",", "\n", "pad_height", ",", "size", "[", "0", "]", "-", "height", "-", "pad_height", ")", "\n", "return", "F", ".", "pad", "(", "inputs", ",", "padding", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.metrics.hardness_metric": [[17, 101], ["torch.mean", "torch.mean", "ValueError", "ValueError", "torch.no_grad", "torch.no_grad", "torch.hub.load", "torch.hub.load", "torch.hub.load.eval", "test_inputs.size", "torch.hub.load.to", "metrics._pad_images", "metrics._pad_images", "torch.hub.load.", "torch.relu", "torchmeta.utils.prototype.get_prototypes", "torch.normalize", "torch.hub.load.", "torch.bmm.view", "torch.normalize", "torch.bmm", "torch.bmm", "ValueError", "_pad_images.view", "F.relu.view", "_pad_images.view", "torch.bmm.transpose", "torch.cross_entropy", "torch.log1p", "torch.log1p", "test_log_probas.exp"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.utils.metrics._pad_images", "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.metrics._pad_images", "home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_prototypes"], ["", "def", "hardness_metric", "(", "batch", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Hardness metric of an episode, as defined in [1].\n\n    Parameters\n    ----------\n    batch : dict\n        The batch of tasks over which the metric is computed. The batch of tasks\n        is a dictionary containing the keys `train` (or `support`) and `test`\n        (or `query`). This is typically the output of `BatchMetaDataLoader`.\n\n    num_classes : int\n        The number of classes in the classification task. This corresponds to\n        the number of ways in an `N`-way classification problem.\n\n    Returns\n    -------\n    metric : `torch.FloatTensor` instance\n        Values of the hardness metric for each task in the batch.\n\n    References\n    ----------\n    .. [1] Dhillon, G. S., Chaudhari, P., Ravichandran, A. and Soatto S. (2019).\n           A Baseline for Few-Shot Image Classification. (https://arxiv.org/abs/1909.02729)\n    \"\"\"", "\n", "if", "(", "'train'", "not", "in", "batch", ")", "and", "(", "'support'", "not", "in", "batch", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The tasks do not contain any training/support set. '", "\n", "'Make sure the tasks contain either the \"train\" or the '", "\n", "'\"support\" key.'", ")", "\n", "", "if", "(", "'test'", "not", "in", "batch", ")", "and", "(", "'query'", "not", "in", "batch", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The tasks do not contain any test/query set. Make '", "\n", "'sure the tasks contain either the \"test\" of the '", "\n", "'\"query\" key.'", ")", "\n", "\n", "", "train", "=", "'train'", "if", "(", "'train'", "in", "batch", ")", "else", "'support'", "\n", "test", "=", "'test'", "if", "(", "'test'", "in", "batch", ")", "else", "'query'", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Load a pre-trained backbone Resnet-152 model from PyTorch Hub", "\n", "        ", "backbone", "=", "torch", ".", "hub", ".", "load", "(", "'pytorch/vision:v0.5.0'", ",", "\n", "'resnet152'", ",", "\n", "pretrained", "=", "True", ",", "\n", "verbose", "=", "False", ")", "\n", "backbone", ".", "eval", "(", ")", "\n", "\n", "train_inputs", ",", "train_targets", "=", "batch", "[", "train", "]", "\n", "test_inputs", ",", "test_targets", "=", "batch", "[", "test", "]", "\n", "batch_size", ",", "num_images", ",", "num_channels", "=", "train_inputs", ".", "shape", "[", ":", "3", "]", "\n", "num_test_images", "=", "test_inputs", ".", "size", "(", "1", ")", "\n", "\n", "backbone", ".", "to", "(", "device", "=", "train_inputs", ".", "device", ")", "\n", "\n", "if", "num_channels", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'The images must be RGB images.'", ")", "\n", "\n", "# Pad the images so that they are compatible with the pre-trained model", "\n", "", "padded_train_inputs", "=", "_pad_images", "(", "train_inputs", ",", "\n", "size", "=", "(", "224", ",", "224", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0.", ")", "\n", "padded_test_inputs", "=", "_pad_images", "(", "test_inputs", ",", "\n", "size", "=", "(", "224", ",", "224", ")", ",", "mode", "=", "'constant'", ",", "value", "=", "0.", ")", "\n", "\n", "# Compute the features from the logits returned by the pre-trained", "\n", "# model on the train/support examples. These features are z(x, theta)_+,", "\n", "# averaged for each class", "\n", "train_logits", "=", "backbone", "(", "padded_train_inputs", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", ")", "\n", "train_logits", "=", "F", ".", "relu", "(", "train_logits", ".", "view", "(", "batch_size", ",", "num_images", ",", "-", "1", ")", ")", "\n", "train_features", "=", "get_prototypes", "(", "train_logits", ",", "train_targets", ",", "num_classes", ")", "\n", "\n", "# Get the weights by normalizing the features", "\n", "weights", "=", "F", ".", "normalize", "(", "train_features", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n", "# Compute and normalize the logits of the test/query examples", "\n", "test_logits", "=", "backbone", "(", "padded_test_inputs", ".", "view", "(", "-", "1", ",", "3", ",", "224", ",", "224", ")", ")", "\n", "test_logits", "=", "test_logits", ".", "view", "(", "batch_size", ",", "num_test_images", ",", "-", "1", ")", "\n", "test_logits", "=", "F", ".", "normalize", "(", "test_logits", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "\n", "# Compute the log probabilities of the test/query examples", "\n", "test_logits", "=", "torch", ".", "bmm", "(", "weights", ",", "test_logits", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "test_log_probas", "=", "-", "F", ".", "cross_entropy", "(", "test_logits", ",", "test_targets", ",", "\n", "reduction", "=", "'none'", ")", "\n", "\n", "# Compute the log-odds ratios for each image of the test/query set", "\n", "log_odds_ratios", "=", "torch", ".", "log1p", "(", "-", "test_log_probas", ".", "exp", "(", ")", ")", "-", "test_log_probas", "\n", "\n", "", "return", "torch", ".", "mean", "(", "log_odds_ratios", ",", "dim", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.__init__": [[44, 84], ["set", "list", "ValueError", "ValueError", "isinstance", "TypeError", "ValueError", "set.add", "type", "warnings.warn", "repr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "class_augmentations", "=", "None", ")", ":", "\n", "        ", "if", "meta_train", "+", "meta_val", "+", "meta_test", "==", "0", ":", "\n", "            ", "if", "meta_split", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'The meta-split is undefined. Use either the '", "\n", "'argument `meta_train=True` (or `meta_val`/`meta_test`), or '", "\n", "'the argument `meta_split=\"train\"` (or \"val\"/\"test\").'", ")", "\n", "", "elif", "meta_split", "not", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown meta-split name `{0}`. The meta-split '", "\n", "'must be in [`train`, `val`, `test`].'", ".", "format", "(", "meta_split", ")", ")", "\n", "", "meta_train", "=", "(", "meta_split", "==", "'train'", ")", "\n", "meta_val", "=", "(", "meta_split", "==", "'val'", ")", "\n", "meta_test", "=", "(", "meta_split", "==", "'test'", ")", "\n", "", "elif", "meta_train", "+", "meta_val", "+", "meta_test", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Multiple arguments among `meta_train`, `meta_val` '", "\n", "'and `meta_test` are set to `True`. Exactly one must be set to '", "\n", "'`True`.'", ")", "\n", "", "self", ".", "meta_train", "=", "meta_train", "\n", "self", ".", "meta_val", "=", "meta_val", "\n", "self", ".", "meta_test", "=", "meta_test", "\n", "self", ".", "_meta_split", "=", "meta_split", "\n", "\n", "if", "class_augmentations", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "class_augmentations", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'Unknown type for `class_augmentations`. '", "\n", "'Expected `list`, got `{0}`.'", ".", "format", "(", "type", "(", "class_augmentations", ")", ")", ")", "\n", "", "unique_augmentations", "=", "set", "(", ")", "\n", "for", "augmentations", "in", "class_augmentations", ":", "\n", "                ", "for", "transform", "in", "augmentations", ":", "\n", "                    ", "if", "transform", "in", "unique_augmentations", ":", "\n", "                        ", "warnings", ".", "warn", "(", "'The class augmentation `{0}` already '", "\n", "'exists in the list of class augmentations (`{1}`). '", "\n", "'To avoid any duplicate, this transformation is '", "\n", "'ignored.'", ".", "format", "(", "transform", ",", "repr", "(", "transform", ")", ")", ",", "\n", "UserWarning", ",", "stacklevel", "=", "2", ")", "\n", "", "unique_augmentations", ".", "add", "(", "transform", ")", "\n", "", "", "class_augmentations", "=", "list", "(", "unique_augmentations", ")", "\n", "", "else", ":", "\n", "            ", "class_augmentations", "=", "[", "]", "\n", "", "self", ".", "class_augmentations", "=", "class_augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_class_augmentation": [[85, 90], ["None"], "methods", ["None"], ["", "def", "get_class_augmentation", "(", "self", ",", "index", ")", ":", "\n", "        ", "transform_index", "=", "(", "index", "//", "self", ".", "num_classes", ")", "-", "1", "\n", "if", "transform_index", "<", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "class_augmentations", "[", "transform_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform": [[91, 98], ["dataset.ClassDataset.get_class_augmentation", "torchvision.transforms.Compose"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_class_augmentation"], ["", "def", "get_transform", "(", "self", ",", "index", ",", "transform", "=", "None", ")", ":", "\n", "        ", "class_transform", "=", "self", ".", "get_class_augmentation", "(", "index", ")", "\n", "if", "class_transform", "is", "None", ":", "\n", "            ", "return", "transform", "\n", "", "if", "transform", "is", "None", ":", "\n", "            ", "return", "class_transform", "\n", "", "return", "Compose", "(", "[", "class_transform", ",", "transform", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform": [[99, 102], ["dataset.ClassDataset.get_class_augmentation", "torchmeta.transforms.FixedCategory"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_class_augmentation"], ["", "def", "get_target_transform", "(", "self", ",", "index", ")", ":", "\n", "        ", "class_transform", "=", "self", ".", "get_class_augmentation", "(", "index", ")", "\n", "return", "FixedCategory", "(", "class_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.meta_split": [[103, 115], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "meta_split", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_meta_split", "is", "None", ":", "\n", "            ", "if", "self", ".", "meta_train", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'train'", "\n", "", "elif", "self", ".", "meta_val", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'val'", "\n", "", "elif", "self", ".", "meta_test", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'test'", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "return", "self", ".", "_meta_split", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.__getitem__": [[116, 118], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.num_classes": [[119, 122], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_classes", "*", "(", "len", "(", "self", ".", "class_augmentations", ")", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.__init__": [[159, 183], ["dataset.MetaDataset.seed", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["def", "__init__", "(", "self", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ")", ":", "\n", "        ", "if", "meta_train", "+", "meta_val", "+", "meta_test", "==", "0", ":", "\n", "            ", "if", "meta_split", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'The meta-split is undefined. Use either the '", "\n", "'argument `meta_train=True` (or `meta_val`/`meta_test`), or '", "\n", "'the argument `meta_split=\"train\"` (or \"val\"/\"test\").'", ")", "\n", "", "elif", "meta_split", "not", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown meta-split name `{0}`. The meta-split '", "\n", "'must be in [`train`, `val`, `test`].'", ".", "format", "(", "meta_split", ")", ")", "\n", "", "meta_train", "=", "(", "meta_split", "==", "'train'", ")", "\n", "meta_val", "=", "(", "meta_split", "==", "'val'", ")", "\n", "meta_test", "=", "(", "meta_split", "==", "'test'", ")", "\n", "", "elif", "meta_train", "+", "meta_val", "+", "meta_test", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Multiple arguments among `meta_train`, `meta_val` '", "\n", "'and `meta_test` are set to `True`. Exactly one must be set to '", "\n", "'`True`.'", ")", "\n", "", "self", ".", "meta_train", "=", "meta_train", "\n", "self", ".", "meta_val", "=", "meta_val", "\n", "self", ".", "meta_test", "=", "meta_test", "\n", "self", ".", "_meta_split", "=", "meta_split", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "dataset_transform", "=", "dataset_transform", "\n", "self", ".", "seed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.meta_split": [[184, 196], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "meta_split", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_meta_split", "is", "None", ":", "\n", "            ", "if", "self", ".", "meta_train", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'train'", "\n", "", "elif", "self", ".", "meta_val", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'val'", "\n", "", "elif", "self", ".", "meta_test", ":", "\n", "                ", "self", ".", "_meta_split", "=", "'test'", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "return", "self", ".", "_meta_split", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.seed": [[197, 201], ["numpy.random.RandomState", "dataset._seed_dataset_transform"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset._seed_dataset_transform"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "# Seed the dataset transform", "\n", "_seed_dataset_transform", "(", "self", ".", "dataset_transform", ",", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.__iter__": [[202, 205], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.sample_task": [[206, 209], ["dataset.MetaDataset.np_random.randint", "len"], "methods", ["None"], ["", "", "def", "sample_task", "(", "self", ")", ":", "\n", "        ", "index", "=", "self", ".", "np_random", ".", "randint", "(", "len", "(", "self", ")", ")", "\n", "return", "self", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.__getitem__": [[210, 212], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.MetaDataset.__len__": [[213, 215], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset.__init__": [[239, 256], ["dataset.MetaDataset.__init__", "isinstance", "TypeError", "torchmeta.transforms.DefaultTargetTransform", "type"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_classes_per_task", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "num_classes_per_task", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Unknown type for `num_classes_per_task`. Expected '", "\n", "'`int`, got `{0}`.'", ".", "format", "(", "type", "(", "num_classes_per_task", ")", ")", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_classes_per_task", "=", "num_classes_per_task", "\n", "# If no target_transform, then use a default target transform that", "\n", "# is well behaved for the `default_collate` function (assign class", "\n", "# augmentations ot integers).", "\n", "if", "target_transform", "is", "None", ":", "\n", "            ", "target_transform", "=", "DefaultTargetTransform", "(", "dataset", ".", "class_augmentations", ")", "\n", "\n", "", "super", "(", "CombinationMetaDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "dataset", ".", "meta_train", ",", "\n", "meta_val", "=", "dataset", ".", "meta_val", ",", "meta_test", "=", "dataset", ".", "meta_test", ",", "\n", "meta_split", "=", "dataset", ".", "meta_split", ",", "target_transform", "=", "target_transform", ",", "\n", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset.__iter__": [[257, 261], ["len", "itertools.combinations"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "self", ".", "dataset", ")", "\n", "for", "index", "in", "combinations", "(", "num_classes", ",", "self", ".", "num_classes_per_task", ")", ":", "\n", "            ", "yield", "self", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset.sample_task": [[262, 266], ["dataset.CombinationMetaDataset.np_random.choice", "len", "tuple"], "methods", ["None"], ["", "", "def", "sample_task", "(", "self", ")", ":", "\n", "        ", "index", "=", "self", ".", "np_random", ".", "choice", "(", "len", "(", "self", ".", "dataset", ")", ",", "\n", "size", "=", "self", ".", "num_classes_per_task", ",", "replace", "=", "False", ")", "\n", "return", "self", "[", "tuple", "(", "index", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset.__getitem__": [[267, 287], ["isinstance", "torchmeta.utils.data.task.ConcatTask", "ValueError", "len", "dataset.CombinationMetaDataset.dataset_transform", "torchmeta.transforms.utils.wrap_transform", "str", "range"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.wrap_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "isinstance", "(", "index", ",", "int", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The index of a `CombinationMetaDataset` must be '", "\n", "'a tuple of integers, and not an integer. For example, call '", "\n", "'`dataset[({0})]` to get a task with classes from 0 to {1} '", "\n", "'(got `{2}`).'", ".", "format", "(", "', '", ".", "join", "(", "[", "str", "(", "idx", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_classes_per_task", ")", "]", ")", ",", "\n", "self", ".", "num_classes_per_task", "-", "1", ",", "index", ")", ")", "\n", "", "assert", "len", "(", "index", ")", "==", "self", ".", "num_classes_per_task", "\n", "datasets", "=", "[", "self", ".", "dataset", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "# Use deepcopy on `Categorical` target transforms, to avoid any side", "\n", "# effect across tasks.", "\n", "task", "=", "ConcatTask", "(", "datasets", ",", "self", ".", "num_classes_per_task", ",", "\n", "target_transform", "=", "wrap_transform", "(", "self", ".", "target_transform", ",", "\n", "self", ".", "_copy_categorical", ",", "transform_type", "=", "Categorical", ")", ")", "\n", "\n", "if", "self", ".", "dataset_transform", "is", "not", "None", ":", "\n", "            ", "task", "=", "self", ".", "dataset_transform", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset._copy_categorical": [[288, 294], ["isinstance", "transform.reset", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset"], ["", "def", "_copy_categorical", "(", "self", ",", "transform", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transform", ",", "Categorical", ")", "\n", "transform", ".", "reset", "(", ")", "\n", "if", "transform", ".", "num_classes", "is", "None", ":", "\n", "            ", "transform", ".", "num_classes", "=", "self", ".", "num_classes_per_task", "\n", "", "return", "deepcopy", "(", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.CombinationMetaDataset.__len__": [[295, 300], ["range", "int", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "num_classes", ",", "length", "=", "len", "(", "self", ".", "dataset", ")", ",", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_classes_per_task", "+", "1", ")", ":", "\n", "            ", "length", "*=", "(", "num_classes", "-", "i", "+", "1", ")", "/", "i", "\n", "", "return", "int", "(", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset._seed_dataset_transform": [[302, 308], ["isinstance", "hasattr", "dataset._seed_dataset_transform", "transform.seed"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset._seed_dataset_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["", "", "def", "_seed_dataset_transform", "(", "transform", ",", "seed", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "transform", ",", "Compose", ")", ":", "\n", "        ", "for", "subtransform", "in", "transform", ".", "transforms", ":", "\n", "            ", "_seed_dataset_transform", "(", "subtransform", ",", "seed", "=", "seed", ")", "\n", "", "", "elif", "hasattr", "(", "transform", ",", "'seed'", ")", ":", "\n", "        ", "transform", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.sampler.CombinationSequentialSampler.__init__": [[11, 15], ["torch.utils.data.sampler.SequentialSampler.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "data_source", ",", "CombinationMetaDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "super", "(", "CombinationSequentialSampler", ",", "self", ")", ".", "__init__", "(", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.sampler.CombinationSequentialSampler.__iter__": [[16, 20], ["len", "itertools.combinations", "range"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "self", ".", "data_source", ".", "dataset", ")", "\n", "num_classes_per_task", "=", "self", ".", "data_source", ".", "num_classes_per_task", "\n", "return", "combinations", "(", "range", "(", "num_classes", ")", ",", "num_classes_per_task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.sampler.CombinationRandomSampler.__init__": [[23, 27], ["isinstance", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "data_source", ",", "CombinationMetaDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "self", ".", "data_source", "=", "data_source", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.sampler.CombinationRandomSampler.__iter__": [[28, 33], ["len", "itertools.combinations", "range", "tuple", "random.sample", "range"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "self", ".", "data_source", ".", "dataset", ")", "\n", "num_classes_per_task", "=", "self", ".", "data_source", ".", "num_classes_per_task", "\n", "for", "_", "in", "combinations", "(", "range", "(", "num_classes", ")", ",", "num_classes_per_task", ")", ":", "\n", "            ", "yield", "tuple", "(", "random", ".", "sample", "(", "range", "(", "num_classes", ")", ",", "num_classes_per_task", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataloader.MetaDataLoader.__init__": [[30, 49], ["torch.utils.data.DataLoader.__init__", "isinstance", "torchmeta.utils.data.sampler.CombinationRandomSampler", "torchmeta.utils.data.sampler.CombinationSequentialSampler"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "sampler", "=", "None", ",", "\n", "batch_sampler", "=", "None", ",", "num_workers", "=", "0", ",", "collate_fn", "=", "None", ",", "\n", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", ":", "\n", "        ", "if", "collate_fn", "is", "None", ":", "\n", "            ", "collate_fn", "=", "no_collate", "\n", "\n", "", "if", "isinstance", "(", "dataset", ",", "CombinationMetaDataset", ")", "and", "(", "sampler", "is", "None", ")", ":", "\n", "            ", "if", "shuffle", ":", "\n", "                ", "sampler", "=", "CombinationRandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "                ", "sampler", "=", "CombinationSequentialSampler", "(", "dataset", ")", "\n", "", "shuffle", "=", "False", "\n", "\n", "", "super", "(", "MetaDataLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "sampler", "=", "sampler", ",", "batch_sampler", "=", "batch_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "drop_last", ",", "timeout", "=", "timeout", ",", "\n", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataloader.BatchMetaDataLoader.__init__": [[52, 61], ["dataloader.batch_meta_collate", "dataloader.MetaDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataloader.batch_meta_collate", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "sampler", "=", "None", ",", "num_workers", "=", "0", ",", "\n", "pin_memory", "=", "False", ",", "drop_last", "=", "False", ",", "timeout", "=", "0", ",", "worker_init_fn", "=", "None", ")", ":", "\n", "        ", "collate_fn", "=", "batch_meta_collate", "(", "default_collate", ")", "\n", "\n", "super", "(", "BatchMetaDataLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "collate_fn", ",", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "drop_last", ",", "\n", "timeout", "=", "timeout", ",", "worker_init_fn", "=", "worker_init_fn", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataloader.batch_meta_collate": [[11, 25], ["isinstance", "collate_fn", "isinstance", "collections.OrderedDict", "NotImplementedError", "dataloader.batch_meta_collate.collate_task", "torch.utils.data.dataloader.default_collate"], "function", ["None"], ["def", "batch_meta_collate", "(", "collate_fn", ")", ":", "\n", "    ", "def", "collate_task", "(", "task", ")", ":", "\n", "        ", "if", "isinstance", "(", "task", ",", "TorchDataset", ")", ":", "\n", "            ", "return", "collate_fn", "(", "[", "task", "[", "idx", "]", "for", "idx", "in", "range", "(", "len", "(", "task", ")", ")", "]", ")", "\n", "", "elif", "isinstance", "(", "task", ",", "OrderedDict", ")", ":", "\n", "            ", "return", "OrderedDict", "(", "[", "(", "key", ",", "collate_task", "(", "subtask", ")", ")", "\n", "for", "(", "key", ",", "subtask", ")", "in", "task", ".", "items", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "", "def", "_collate_fn", "(", "batch", ")", ":", "\n", "        ", "return", "collate_fn", "(", "[", "collate_task", "(", "task", ")", "for", "task", "in", "batch", "]", ")", "\n", "\n", "", "return", "_collate_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataloader.no_collate": [[26, 28], ["None"], "function", ["None"], ["", "def", "no_collate", "(", "batch", ")", ":", "\n", "    ", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Dataset.__init__": [[9, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "index", "=", "index", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Dataset.target_transform_append": [[14, 21], ["torchvision.transforms.Compose"], "methods", ["None"], ["", "def", "target_transform_append", "(", "self", ",", "transform", ")", ":", "\n", "        ", "if", "transform", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "target_transform", "is", "None", ":", "\n", "            ", "self", ".", "target_transform", "=", "transform", "\n", "", "else", ":", "\n", "            ", "self", ".", "target_transform", "=", "Compose", "(", "[", "self", ".", "target_transform", ",", "transform", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Dataset.__hash__": [[22, 24], ["hash"], "methods", ["None"], ["", "", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Task.__init__": [[34, 39], ["task.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "index", ",", "num_classes", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Task", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.ConcatTask.__init__": [[42, 48], ["tuple", "task.Task.__init__", "torch.utils.data.ConcatDataset.__init__", "task.target_transform_append"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Dataset.target_transform_append"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ",", "num_classes", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "index", "=", "tuple", "(", "task", ".", "index", "for", "task", "in", "datasets", ")", "\n", "Task", ".", "__init__", "(", "self", ",", "index", ",", "num_classes", ")", "\n", "ConcatDataset", ".", "__init__", "(", "self", ",", "datasets", ")", "\n", "for", "task", "in", "self", ".", "datasets", ":", "\n", "            ", "task", ".", "target_transform_append", "(", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.ConcatTask.__getitem__": [[49, 51], ["torch.utils.data.ConcatDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__getitem__"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "ConcatDataset", ".", "__getitem__", "(", "self", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.SubsetTask.__init__": [[54, 61], ["task.Task.__init__", "torch.utils.data.Subset.__init__", "task.SubsetTask.dataset.target_transform_append"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.Dataset.target_transform_append"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "indices", ",", "num_classes", "=", "None", ",", "\n", "target_transform", "=", "None", ")", ":", "\n", "        ", "if", "num_classes", "is", "None", ":", "\n", "            ", "num_classes", "=", "dataset", ".", "num_classes", "\n", "", "Task", ".", "__init__", "(", "self", ",", "dataset", ".", "index", ",", "num_classes", ")", "\n", "Subset", ".", "__init__", "(", "self", ",", "dataset", ",", "indices", ")", "\n", "self", ".", "dataset", ".", "target_transform_append", "(", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.SubsetTask.__getitem__": [[62, 64], ["torch.utils.data.Subset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "Subset", ".", "__getitem__", "(", "self", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.data.task.SubsetTask.__hash__": [[65, 67], ["hash", "tuple"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "self", ".", "index", ",", "tuple", "(", "self", ".", "indices", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenet.__init__": [[84, 94], ["tieredimagenet.TieredImagenetClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "TieredImagenetClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "super", "(", "TieredImagenet", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.__init__": [[107, 132], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.expanduser", "tieredimagenet.TieredImagenetClassDataset.filename.format", "tieredimagenet.TieredImagenetClassDataset.filename_labels.format", "tieredimagenet.TieredImagenetClassDataset.download", "tieredimagenet.TieredImagenetClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "TieredImagenetClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels_specific", "=", "None", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'TieredImagenet integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels_specific", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.data": [[133, 139], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data_file", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "self", ".", "_data", "=", "self", ".", "_data_file", "[", "'datasets'", "]", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.labels_specific": [[140, 146], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels_specific", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels_specific", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels_specific", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels_specific", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.__getitem__": [[147, 157], ["tieredimagenet.TieredImagenetClassDataset.get_transform", "tieredimagenet.TieredImagenetClassDataset.get_target_transform", "tieredimagenet.TieredImagenetDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "specific_class_name", "=", "self", ".", "labels_specific", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "specific_class_name", "]", "\n", "general_class_name", "=", "data", ".", "attrs", "[", "'label_general'", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "TieredImagenetDataset", "(", "index", ",", "data", ",", "\n", "general_class_name", ",", "specific_class_name", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.num_classes": [[158, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.close": [[162, 167], ["tieredimagenet.TieredImagenetClassDataset._data_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset._check_integrity": [[168, 171], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetClassDataset.download": [[172, 226], ["tieredimagenet.TieredImagenetClassDataset._check_integrity", "torchvision.datasets.utils.download_file_from_google_drive", "os.path.join", "os.path.join", "os.path.isdir", "tarfile.open", "f.extractall", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "shutil.rmtree", "tieredimagenet.TieredImagenetClassDataset.filename.format", "os.path.isfile", "IOError", "open", "pickle.load", "os.path.isfile", "IOError", "open", "pickle.load", "open", "json.dump", "h5py.File", "f.create_group", "h5py.special_dtype", "enumerate", "os.path.join", "tqdm", "numpy.where", "f.create_group.create_dataset", "enumerate", "tieredimagenet.TieredImagenetClassDataset.filename_labels.format", "numpy.squeeze", "len", "len"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "import", "shutil", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "download_file_from_google_drive", "(", "self", ".", "gdrive_id", ",", "self", ".", "root", ",", "\n", "self", ".", "tar_filename", ",", "md5", "=", "self", ".", "tar_md5", ")", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "tar_filename", ")", "\n", "with", "tarfile", ".", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "self", ".", "root", ")", "\n", "", "tar_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "tar_folder", ")", "\n", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "images_filename", "=", "os", ".", "path", ".", "join", "(", "tar_folder", ",", "'{0}_images_png.pkl'", ".", "format", "(", "split", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "images_filename", ")", ":", "\n", "                ", "raise", "IOError", "(", "images_filename", ")", "\n", "", "with", "open", "(", "images_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "images", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "\n", "", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "tar_folder", ",", "'{0}_labels.pkl'", ".", "format", "(", "split", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "labels_filename", ")", ":", "\n", "                ", "raise", "IOError", "(", ")", "\n", "", "with", "open", "(", "labels_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "labels_str", "=", "labels", "[", "'label_specific_str'", "]", "\n", "general_labels_str", "=", "labels", "[", "'label_general_str'", "]", "\n", "general_labels", "=", "labels", "[", "'label_general'", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "labels_str", ",", "f", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "'datasets'", ")", "\n", "dtype", "=", "h5py", ".", "special_dtype", "(", "vlen", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "tqdm", "(", "labels_str", ",", "desc", "=", "filename", ")", ")", ":", "\n", "                    ", "indices", ",", "=", "np", ".", "where", "(", "labels", "[", "'label_specific'", "]", "==", "i", ")", "\n", "dataset", "=", "group", ".", "create_dataset", "(", "label", ",", "(", "len", "(", "indices", ")", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "general_idx", "=", "general_labels", "[", "indices", "[", "0", "]", "]", "\n", "dataset", ".", "attrs", "[", "'label_general'", "]", "=", "(", "general_labels_str", "[", "general_idx", "]", "\n", "if", "general_idx", "<", "len", "(", "general_labels_str", ")", "else", "''", ")", "\n", "dataset", ".", "attrs", "[", "'label_specific'", "]", "=", "label", "\n", "for", "j", ",", "k", "in", "enumerate", "(", "indices", ")", ":", "\n", "                        ", "dataset", "[", "j", "]", "=", "np", ".", "squeeze", "(", "images", "[", "k", "]", ")", "\n", "\n", "", "", "", "", "if", "os", ".", "path", ".", "isdir", "(", "tar_folder", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tar_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetDataset.__init__": [[229, 236], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "general_class_name", ",", "specific_class_name", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "TieredImagenetDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "general_class_name", "=", "general_class_name", "\n", "self", ".", "specific_class_name", "=", "specific_class_name", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetDataset.__len__": [[237, 239], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tieredimagenet.TieredImagenetDataset.__getitem__": [[240, 251], ["PIL.Image.open", "io.BytesIO", "tieredimagenet.TieredImagenetDataset.transform", "tieredimagenet.TieredImagenetDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "self", ".", "data", "[", "index", "]", ")", ")", "\n", "target", "=", "(", "self", ".", "general_class_name", ",", "self", ".", "specific_class_name", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.__init__": [[100, 126], ["torchmeta.utils.data.MetaDataset.__init__", "os.path.join", "tcga.TCGA.get_task_ids", "os.path.join", "os.path.expanduser", "tcga.TCGA.download", "tcga.TCGA._preload_gene_expression_data", "tcga.TCGA.filename_tasks.format"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.get_task_ids", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA._preload_gene_expression_data"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "min_samples_per_class", "=", "5", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ",", "download", "=", "False", ",", "chunksize", "=", "100", ",", "preload", "=", "True", ")", ":", "\n", "        ", "super", "(", "TCGA", ",", "self", ")", ".", "__init__", "(", "meta_train", ",", "meta_val", ",", "meta_test", ",", "meta_split", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "min_samples_per_class", "=", "min_samples_per_class", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "_all_sample_ids", "=", "None", "\n", "self", ".", "_gene_ids", "=", "None", "\n", "self", ".", "_tasks", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", "chunksize", ")", "\n", "\n", "", "self", ".", "preloaded", "=", "False", "\n", "self", ".", "gene_expression_data", "=", "None", "\n", "self", ".", "gene_expression_file", "=", "None", "\n", "if", "preload", ":", "\n", "            ", "self", ".", "_preload_gene_expression_data", "(", ")", "\n", "self", ".", "preloaded", "=", "True", "\n", "\n", "", "self", ".", "task_ids", "=", "self", ".", "get_task_ids", "(", ")", "\n", "self", ".", "split_filename_tasks", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_tasks", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.__len__": [[127, 129], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "task_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.gene_expression_path": [[130, 136], ["os.path.join", "os.path.isfile", "IOError"], "methods", ["None"], ["", "@", "property", "\n", "def", "gene_expression_path", "(", "self", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gene_expression_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Gene expression data not found at {}'", ".", "format", "(", "filename", ")", ")", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.tasks": [[137, 143], ["tcga.TCGA.open"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "tasks", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_tasks", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_tasks", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_tasks", "=", "[", "task", "for", "task", "in", "json", ".", "load", "(", "f", ")", "if", "tuple", "(", "task", ")", "in", "self", ".", "task_ids", "]", "\n", "", "", "return", "self", ".", "_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.cancers": [[144, 149], ["tcga.get_cancers"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_cancers"], ["", "@", "property", "\n", "def", "cancers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_cancers", "is", "None", ":", "\n", "            ", "self", ".", "_cancers", "=", "get_cancers", "(", ")", "\n", "", "return", "self", ".", "_cancers", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.task_variables": [[150, 155], ["frozenset", "tcga.get_task_variables"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_task_variables"], ["", "@", "property", "\n", "def", "task_variables", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_task_variables", "is", "None", ":", "\n", "            ", "self", ".", "_task_variables", "=", "frozenset", "(", "get_task_variables", "(", ")", ")", "\n", "", "return", "self", ".", "_task_variables", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.gene_ids": [[156, 165], ["os.path.join", "os.path.isfile", "IOError", "tcga.TCGA.open"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "gene_ids", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_gene_ids", "is", "None", ":", "\n", "            ", "gene_ids_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'gene_ids.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "gene_ids_file", ")", ":", "\n", "                ", "raise", "IOError", "(", "'Gene id data not found at {}'", ".", "format", "(", "gene_ids_file", ")", ")", "\n", "", "with", "open", "(", "gene_ids_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_gene_ids", "=", "set", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "", "", "return", "self", ".", "_gene_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.all_sample_ids": [[166, 176], ["os.path.join", "dict", "os.path.isfile", "IOError", "tcga.TCGA.open"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "all_sample_ids", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_all_sample_ids", "is", "None", ":", "\n", "            ", "all_sample_ids_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'all_sample_ids.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "all_sample_ids_file", ")", ":", "\n", "                ", "raise", "IOError", "(", "'All sample id data not found at {}'", ".", "format", "(", "all_sample_ids_file", ")", ")", "\n", "", "with", "open", "(", "all_sample_ids_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "all_sample_ids", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "_all_sample_ids", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "(", "k", ",", "v", ")", "in", "enumerate", "(", "all_sample_ids", ")", ")", "\n", "", "return", "self", ".", "_all_sample_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.get_processed_filename": [[177, 184], ["os.path.join", "os.path.join", "tcga.TCGA.clinical_matrix_filename.format", "os.path.isfile", "IOError"], "methods", ["None"], ["", "def", "get_processed_filename", "(", "self", ",", "cancer", ")", ":", "\n", "        ", "processed_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'clinicalMatrices'", ",", "'processed'", ")", "\n", "filename", "=", "'{0}.tsv'", ".", "format", "(", "self", ".", "clinical_matrix_filename", ".", "format", "(", "cancer", ")", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "processed_folder", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Clinical matrix file not found at {}'", ".", "format", "(", "filepath", ")", ")", "\n", "", "return", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.__getitem__": [[185, 208], ["tcga.TCGA.get_processed_filename", "pd.read_csv", "dataframe[].dropna().astype", "tcga.TCGATask", "dataframe[].dropna().astype.cat.codes.tolist", "dataframe[].dropna().astype.cat.categories.tolist", "tcga.TCGA.dataset_transform", "dataframe[].dropna", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.get_processed_filename"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "\n", "label", ",", "cancer", "=", "self", ".", "tasks", "[", "index", "]", "\n", "filename", "=", "self", ".", "get_processed_filename", "(", "cancer", ")", "\n", "dataframe", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "index_col", "=", "0", ",", "header", "=", "0", ")", "\n", "labels", "=", "dataframe", "[", "label", "]", ".", "dropna", "(", ")", ".", "astype", "(", "'category'", ")", "\n", "labels", "=", "labels", "[", "self", ".", "task_ids", "[", "(", "label", ",", "cancer", ")", "]", "]", "\n", "\n", "if", "self", ".", "gene_expression_file", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "gene_expression_data", "[", "labels", ".", "index", "]", "\n", "", "else", ":", "\n", "            ", "with", "h5py", ".", "File", "(", "self", ".", "gene_expression_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "data", "=", "f", "[", "'expression_data'", "]", "[", "labels", ".", "index", "]", "\n", "\n", "", "", "task", "=", "TCGATask", "(", "(", "label", ",", "cancer", ")", ",", "data", ",", "labels", ".", "cat", ".", "codes", ".", "tolist", "(", ")", ",", "\n", "labels", ".", "cat", ".", "categories", ".", "tolist", "(", ")", ",", "transform", "=", "self", ".", "transform", ",", "\n", "target_transform", "=", "self", ".", "target_transform", ")", "\n", "\n", "if", "self", ".", "dataset_transform", "is", "not", "None", ":", "\n", "            ", "task", "=", "self", ".", "dataset_transform", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA._preload_gene_expression_data": [[209, 212], ["h5py.File"], "methods", ["None"], ["", "def", "_preload_gene_expression_data", "(", "self", ")", ":", "\n", "        ", "self", ".", "gene_expression_file", "=", "h5py", ".", "File", "(", "self", ".", "gene_expression_path", ",", "'r'", ")", "\n", "self", ".", "gene_expression_data", "=", "self", ".", "gene_expression_file", "[", "'expression_data'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA._process_clinical_matrices": [[213, 236], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "tcga.TCGA.clinical_matrix_filename.format", "os.path.join", "os.path.join", "os.path.isfile", "pd.read_csv", "dataframe.sort_index.sort_index.index.map", "dataframe.sort_index.sort_index.sort_index", "dataframe.sort_index.sort_index.to_csv", "pd.read_csv.index.isin"], "methods", ["None"], ["", "def", "_process_clinical_matrices", "(", "self", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "clinical_matrices_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'clinicalMatrices'", ")", "\n", "processed_folder", "=", "os", ".", "path", ".", "join", "(", "clinical_matrices_folder", ",", "'processed'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "processed_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "processed_folder", ")", "\n", "\n", "", "col_in_task_variables", "=", "lambda", "col", ":", "(", "col", "==", "'sampleID'", ")", "or", "(", "col", "in", "self", ".", "task_variables", ")", "\n", "\n", "for", "cancer", "in", "self", ".", "cancers", ":", "\n", "            ", "filename", "=", "self", ".", "clinical_matrix_filename", ".", "format", "(", "cancer", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "clinical_matrices_folder", ",", "'{0}.tsv'", ".", "format", "(", "filename", ")", ")", "\n", "processed", "=", "os", ".", "path", ".", "join", "(", "processed_folder", ",", "'{0}.tsv'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "processed", ")", ":", "\n", "                ", "raw_df", "=", "pd", ".", "read_csv", "(", "filepath", ",", "sep", "=", "'\\t'", ",", "index_col", "=", "0", ",", "header", "=", "0", ",", "\n", "usecols", "=", "col_in_task_variables", ")", "\n", "dataframe", "=", "raw_df", "[", "raw_df", ".", "index", ".", "isin", "(", "self", ".", "all_sample_ids", ")", "]", "\n", "dataframe", ".", "index", "=", "dataframe", ".", "index", ".", "map", "(", "lambda", "index", ":", "self", ".", "all_sample_ids", "[", "index", "]", ")", "\n", "dataframe", ".", "index", ".", "names", "=", "[", "'index'", "]", "\n", "dataframe", "=", "dataframe", ".", "sort_index", "(", "axis", "=", "0", ")", "\n", "dataframe", ".", "to_csv", "(", "processed", ",", "sep", "=", "'\\t'", ")", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.get_task_ids": [[237, 249], ["tcga.get_task_id_splits", "dict", "all", "tuple", "tuple.split", "counts.values"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_task_id_splits"], ["", "def", "get_task_ids", "(", "self", ")", ":", "\n", "        ", "tasks", "=", "get_task_id_splits", "(", "self", ".", "meta_split", ")", "\n", "task_ids", "=", "dict", "(", ")", "\n", "\n", "for", "task_id", "in", "tasks", ":", "\n", "            ", "indices", ",", "counts", "=", "tasks", "[", "task_id", "]", "\n", "enough_samples", "=", "all", "(", "count", ">", "self", ".", "min_samples_per_class", "for", "count", "in", "counts", ".", "values", "(", ")", ")", "\n", "if", "enough_samples", ":", "\n", "                ", "task_id", "=", "tuple", "(", "task_id", ".", "split", "(", "'|'", ",", "1", ")", ")", "\n", "task_ids", "[", "task_id", "]", "=", "indices", "\n", "\n", "", "", "return", "task_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.download": [[250, 340], ["os.path.join", "os.path.join", "tcga.TCGA._process_clinical_matrices", "os.path.exists", "os.makedirs", "tcga.TCGA.clinical_matrix_filename.format", "os.path.join", "os.path.join", "os.path.isfile", "print", "os.path.isfile", "print", "at.get", "print", "print", "pd.read_csv", "os.path.join", "os.path.join", "os.path.isfile", "print", "os.path.join", "torchmeta.datasets.utils.get_asset", "tcga.TCGA.clinical_matrix_filename.format", "os.path.join", "os.path.isfile", "ImportError", "os.path.exists", "print", "tcga.TCGA.clinical_matrix_url.format", "urllib.request.urlretrieve", "gzip.open", "tqdm", "tcga.TCGA.open"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA._process_clinical_matrices", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "download", "(", "self", ",", "chunksize", "=", "100", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "gzip", "\n", "import", "shutil", "\n", "import", "pandas", "as", "pd", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "import", "academictorrents", "as", "at", "\n", "", "except", "ImportError", "as", "exception", ":", "\n", "            ", "raise", "ImportError", "(", "'{0}. To use the TCGA dataset, you need to '", "\n", "'install the necessary dependencies with '", "\n", "'`pip install torchmeta[tcga]`.'", ".", "format", "(", "exception", ".", "message", ")", ")", "\n", "\n", "", "clinical_matrices_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'clinicalMatrices'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "clinical_matrices_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "clinical_matrices_folder", ")", "\n", "\n", "", "for", "cancer", "in", "self", ".", "cancers", ":", "\n", "            ", "filename", "=", "self", ".", "clinical_matrix_filename", ".", "format", "(", "cancer", ")", "\n", "rawpath", "=", "os", ".", "path", ".", "join", "(", "clinical_matrices_folder", ",", "'{0}.gz'", ".", "format", "(", "filename", ")", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "clinical_matrices_folder", ",", "'{0}.tsv'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "rawpath", ")", ":", "\n", "                ", "print", "(", "'Downloading `{0}.gz`...'", ".", "format", "(", "filename", ")", ")", "\n", "url", "=", "self", ".", "clinical_matrix_url", ".", "format", "(", "cancer", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "rawpath", ")", "\n", "\n", "", "print", "(", "'Extracting `{0}.gz`...'", ".", "format", "(", "filename", ")", ")", "\n", "with", "gzip", ".", "open", "(", "rawpath", ",", "'rb'", ")", "as", "gzf", ":", "\n", "                ", "with", "open", "(", "filepath", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "shutil", ".", "copyfileobj", "(", "gzf", ",", "f", ")", "\n", "\n", "", "", "", "gene_expression_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gene_expression_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "gene_expression_file", ")", ":", "\n", "            ", "from", "tqdm", "import", "tqdm", "\n", "print", "(", "'Downloading `{0}` using `academictorrents`...'", ".", "format", "(", "\n", "self", ".", "gene_expression_filename", ")", ")", "\n", "csv_file", "=", "at", ".", "get", "(", "self", ".", "gene_expression_torrent", ",", "datastore", "=", "self", ".", "root", ")", "\n", "print", "(", "'Downloaded to: `{0}`'", ".", "format", "(", "csv_file", ")", ")", "\n", "\n", "print", "(", "'Converting TCGA CSV dataset to HDF5. This may take a while, '", "\n", "'but only happens on the first run.'", ")", "\n", "reader", "=", "pd", ".", "read_csv", "(", "csv_file", ",", "compression", "=", "'gzip'", ",", "sep", "=", "'\\t'", ",", "\n", "header", "=", "0", ",", "index_col", "=", "0", ",", "chunksize", "=", "chunksize", ")", "\n", "shape", "=", "(", "10459", ",", "20530", ")", "\n", "\n", "with", "tqdm", "(", "total", "=", "shape", "[", "1", "]", ")", "as", "pbar", ":", "\n", "                ", "with", "h5py", ".", "File", "(", "gene_expression_file", ",", "'w'", ")", "as", "f", ":", "\n", "                    ", "dataset", "=", "f", ".", "create_dataset", "(", "'expression_data'", ",", "\n", "shape", "=", "shape", ",", "dtype", "=", "'f4'", ")", "\n", "gene_ids", "=", "[", "]", "\n", "for", "idx", ",", "chunk", "in", "enumerate", "(", "reader", ")", ":", "\n", "                        ", "slice_", "=", "slice", "(", "idx", "*", "chunksize", ",", "(", "idx", "+", "1", ")", "*", "chunksize", ")", "\n", "dataset", "[", ":", ",", "slice_", "]", "=", "chunk", ".", "T", "\n", "gene_ids", ".", "extend", "(", "chunk", ".", "index", ")", "\n", "pbar", ".", "update", "(", "chunk", ".", "shape", "[", "0", "]", ")", "\n", "", "all_sample_ids", "=", "chunk", ".", "columns", ".", "tolist", "(", ")", "\n", "\n", "", "", "gene_ids_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'gene_ids.json'", ")", "\n", "with", "open", "(", "gene_ids_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "gene_ids", ",", "f", ")", "\n", "\n", "", "all_sample_ids_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'all_sample_ids.json'", ")", "\n", "with", "open", "(", "all_sample_ids_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "all_sample_ids", ",", "f", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "csv_file", ")", ":", "\n", "                ", "os", ".", "remove", "(", "csv_file", ")", "\n", "\n", "", "print", "(", "'Done'", ")", "\n", "\n", "", "self", ".", "_process_clinical_matrices", "(", ")", "\n", "\n", "# Create label files", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_tasks", ".", "format", "(", "split", ")", ")", "\n", "data", "=", "get_asset", "(", "self", ".", "folder", ",", "'{0}.json'", ".", "format", "(", "split", ")", ",", "dtype", "=", "'json'", ")", "\n", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "sorted", "(", "[", "key", ".", "split", "(", "'|'", ",", "1", ")", "for", "key", "in", "data", "]", ")", "\n", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n", "# Clean up", "\n", "", "", "for", "cancer", "in", "self", ".", "cancers", ":", "\n", "            ", "filename", "=", "self", ".", "clinical_matrix_filename", ".", "format", "(", "cancer", ")", "\n", "rawpath", "=", "os", ".", "path", ".", "join", "(", "clinical_matrices_folder", ",", "'{0}.gz'", ".", "format", "(", "filename", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "rawpath", ")", ":", "\n", "                ", "os", ".", "remove", "(", "rawpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.close": [[341, 347], ["tcga.TCGA.gene_expression_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "preloaded", ":", "\n", "            ", "self", ".", "gene_expression_file", ".", "close", "(", ")", "\n", "self", ".", "gene_expression_data", "=", "None", "\n", "self", ".", "gene_expression_file", "=", "None", "\n", "self", ".", "preloaded", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open": [[348, 352], ["tcga.TCGA._preload_gene_expression_data"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA._preload_gene_expression_data"], ["", "", "def", "open", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "preloaded", ":", "\n", "            ", "self", ".", "_preload_gene_expression_data", "(", ")", "\n", "self", ".", "preloaded", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.from_id": [[355, 380], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "pd.read_csv", "dataframe[].dropna().astype", "cls", "os.path.expanduser", "os.path.isfile", "IOError", "TCGA.clinical_matrix_filename.format", "os.path.isfile", "IOError", "h5py.File", "dataframe[].dropna().astype.cat.codes.tolist", "dataframe[].dropna().astype.cat.categories.tolist", "dataframe[].dropna"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "from_id", "(", "cls", ",", "root", ",", "task_id", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "TCGA", ".", "folder", ")", "\n", "gene_filepath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "TCGA", ".", "gene_expression_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "gene_filepath", ")", ":", "\n", "            ", "raise", "IOError", "(", ")", "\n", "\n", "", "label", ",", "cancer", "=", "task_id", "\n", "\n", "processed_folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'clinicalMatrices'", ",", "'processed'", ")", "\n", "filename", "=", "'{0}.tsv'", ".", "format", "(", "TCGA", ".", "clinical_matrix_filename", ".", "format", "(", "cancer", ")", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "processed_folder", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filepath", ")", ":", "\n", "            ", "raise", "IOError", "(", ")", "\n", "\n", "", "dataframe", "=", "pd", ".", "read_csv", "(", "filepath", ",", "sep", "=", "'\\t'", ",", "index_col", "=", "0", ",", "header", "=", "0", ")", "\n", "labels", "=", "dataframe", "[", "label", "]", ".", "dropna", "(", ")", ".", "astype", "(", "'category'", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "gene_filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", "[", "'expression_data'", "]", "[", "labels", ".", "index", "]", "\n", "\n", "", "return", "cls", "(", "task_id", ",", "data", ",", "labels", ".", "cat", ".", "codes", ".", "tolist", "(", ")", ",", "\n", "labels", ".", "cat", ".", "categories", ".", "tolist", "(", ")", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.__init__": [[381, 389], ["torchmeta.utils.data.Task.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["", "def", "__init__", "(", "self", ",", "task_id", ",", "data", ",", "labels", ",", "categories", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "TCGATask", ",", "self", ")", ".", "__init__", "(", "task_id", ",", "len", "(", "categories", ")", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "id", "=", "task_id", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "categories", "=", "categories", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.input_size": [[390, 393], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "input_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.__len__": [[394, 396], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.__iter__": [[397, 400], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "index", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGATask.__getitem__": [[401, 412], ["tcga.TCGATask.transform", "tcga.TCGATask.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "data", "[", "index", "]", "\n", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "sample", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga._assign_samples": [[414, 448], ["tcga.get_cancers", "tcga_metadataset.get_processed_filename", "pd.read_csv", "dataframe.reindex.drop", "dataframe.reindex.reindex", "dataframe.reindex.notna", "labels.drop.applymap", "labels.drop.apply", "labels.drop.drop", "numpy.tile", "munkres.Munkres().compute", "blacklist.extend", "numpy.int", "sample_to_task_assignment.setdefault().append", "dataframe.reindex.index.tolist", "torch.randperm", "numpy.ceil", "munkres.Munkres", "len", "all", "sample_to_task_assignment.setdefault"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_cancers", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.get_processed_filename"], ["", "", "def", "_assign_samples", "(", "tcga_metadataset", ")", ":", "\n", "    ", "import", "pandas", "as", "pd", "\n", "import", "munkres", "\n", "\n", "blacklist", "=", "[", "]", "\n", "sample_to_task_assignment", "=", "{", "}", "\n", "for", "cancer", "in", "get_cancers", "(", ")", ":", "\n", "        ", "filename", "=", "tcga_metadataset", ".", "get_processed_filename", "(", "cancer", ")", "\n", "dataframe", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "index_col", "=", "0", ",", "header", "=", "0", ")", "\n", "dataframe", "=", "dataframe", ".", "drop", "(", "blacklist", ",", "errors", "=", "'ignore'", ")", "\n", "permutation", "=", "dataframe", ".", "index", "[", "torch", ".", "randperm", "(", "len", "(", "dataframe", ".", "index", ")", ")", "]", "\n", "dataframe", "=", "dataframe", ".", "reindex", "(", "permutation", ")", "\n", "labels", "=", "dataframe", ".", "notna", "(", ")", "\n", "labels", "=", "labels", ".", "applymap", "(", "lambda", "x", ":", "1.", "if", "x", "else", "munkres", ".", "DISALLOWED", ")", "\n", "all_disallowed", "=", "labels", ".", "apply", "(", "lambda", "x", ":", "True", "if", "all", "(", "x", "==", "munkres", ".", "DISALLOWED", ")", "else", "False", ",", "axis", "=", "1", ")", "\n", "labels", "=", "labels", ".", "drop", "(", "labels", "[", "all_disallowed", "]", ".", "index", ")", "\n", "\n", "matrix", "=", "labels", ".", "values", "\n", "shape", "=", "matrix", ".", "shape", "\n", "# The +5 allows for some slack in the assignment", "\n", "# which is necessary for the used implementation to converge on BRCA", "\n", "repeats", "=", "np", ".", "int", "(", "np", ".", "ceil", "(", "shape", "[", "0", "]", "/", "shape", "[", "1", "]", ")", ")", "+", "5", "\n", "expanded_matrix", "=", "np", ".", "tile", "(", "matrix", ",", "(", "1", ",", "repeats", ")", ")", "\n", "\n", "indices", "=", "munkres", ".", "Munkres", "(", ")", ".", "compute", "(", "expanded_matrix", ")", "\n", "mapped_indices", "=", "[", "(", "a", ",", "b", "%", "shape", "[", "1", "]", ")", "for", "a", ",", "b", "in", "indices", "]", "\n", "\n", "for", "index", ",", "mapped_index", "in", "mapped_indices", ":", "\n", "            ", "sample_to_task_assignment", ".", "setdefault", "(", "(", "dataframe", ".", "columns", "[", "mapped_index", "]", ",", "cancer", ")", ",", "[", "]", ")", ".", "append", "(", "\n", "dataframe", ".", "index", "[", "index", "]", ")", "\n", "\n", "", "blacklist", ".", "extend", "(", "dataframe", ".", "index", ".", "tolist", "(", ")", ")", "\n", "\n", "", "return", "sample_to_task_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga._expand_sample_usage": [[450, 465], ["set", "meta_dataset.items", "set.update", "set", "meta_dataset.keys", "set.update", "set", "set.intersection", "list", "additional_samples.intersection"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update"], ["", "def", "_expand_sample_usage", "(", "meta_dataset", ",", "all_allowed_samples", ",", "additional_samples", ")", ":", "\n", "    ", "expanded_metadataset", "=", "{", "}", "\n", "all_samples_of_metadataset", "=", "set", "(", ")", "\n", "for", "key", ",", "value", "in", "meta_dataset", ".", "items", "(", ")", ":", "\n", "        ", "all_samples_of_metadataset", ".", "update", "(", "value", ")", "\n", "", "all_samples_of_metadataset", ".", "update", "(", "additional_samples", ")", "\n", "\n", "used_additional_samples", "=", "set", "(", ")", "\n", "for", "key", "in", "meta_dataset", ".", "keys", "(", ")", ":", "\n", "        ", "allowed_samples", "=", "set", "(", "all_allowed_samples", "[", "key", "]", ")", "\n", "intersection", "=", "allowed_samples", ".", "intersection", "(", "all_samples_of_metadataset", ")", "\n", "expanded_metadataset", "[", "key", "]", "=", "list", "(", "intersection", ")", "\n", "used_additional_samples", "=", "additional_samples", ".", "intersection", "(", "intersection", ")", "\n", "\n", "", "return", "expanded_metadataset", ",", "used_additional_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga._split_tcga": [[467, 516], ["tcga._assign_samples", "set().difference", "set", "torch.randperm().numpy", "numpy.argsort", "set", "tcga_metadataset.close", "set", "set.update", "metadatasets.append", "len", "set.difference", "tcga._expand_sample_usage", "set.update", "copy.deepcopy", "tcga_metadatasets.append", "all_allowed_samples.keys", "set", "torch.randperm", "len", "copy.deepcopy.open", "_assign_samples.keys", "len"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga._assign_samples", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga._expand_sample_usage", "home.repos.pwc.inspect_result.open-air-sun_sisc.None.main_ssc_b.AverageMeter.update", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "_split_tcga", "(", "tcga_metadataset", ",", "counts", ")", ":", "\n", "    ", "all_allowed_samples", "=", "tcga_metadataset", ".", "task_ids", "\n", "\n", "# We first uniquely assing every sample to a task", "\n", "sample_to_task_assignment", "=", "_assign_samples", "(", "tcga_metadataset", ")", "\n", "\n", "keys", "=", "[", "i", "for", "i", "in", "all_allowed_samples", ".", "keys", "(", ")", "]", "\n", "difference", "=", "set", "(", "sample_to_task_assignment", ".", "keys", "(", ")", ")", ".", "difference", "(", "set", "(", "keys", ")", ")", "\n", "\n", "unassigned_samples", "=", "set", "(", ")", "\n", "for", "key", "in", "difference", ":", "\n", "        ", "unassigned_samples", ".", "update", "(", "sample_to_task_assignment", "[", "key", "]", ")", "\n", "\n", "# Second we split the metadataset", "\n", "# with a torch-based random sample", "\n", "", "permutation", "=", "torch", ".", "randperm", "(", "len", "(", "keys", ")", ")", ".", "numpy", "(", ")", "\n", "\n", "metadatasets", "=", "[", "]", "\n", "start", "=", "0", "\n", "end", "=", "0", "\n", "for", "count", "in", "counts", ":", "\n", "        ", "end", "+=", "count", "\n", "current_keys", "=", "[", "keys", "[", "index", "]", "for", "index", "in", "permutation", "[", "start", ":", "end", "]", "]", "\n", "metadatasets", ".", "append", "(", "{", "key", ":", "sample_to_task_assignment", "[", "key", "]", "for", "key", "in", "current_keys", "}", ")", "\n", "start", "=", "end", "\n", "\n", "", "expanded_metadatasets", "=", "[", "None", "]", "*", "len", "(", "metadatasets", ")", "\n", "order", "=", "np", ".", "argsort", "(", "[", "len", "(", "metadataset", ")", "for", "metadataset", "in", "metadatasets", "]", ")", "\n", "\n", "# Finally we expand the tasks by reusing samples wherever possible in the sets", "\n", "blacklist", "=", "set", "(", ")", "\n", "for", "i", "in", "order", ":", "\n", "        ", "additional_samples", "=", "unassigned_samples", ".", "difference", "(", "blacklist", ")", "\n", "expanded_metadataset", ",", "used_additional_samples", "=", "_expand_sample_usage", "(", "metadatasets", "[", "i", "]", ",", "all_allowed_samples", ",", "\n", "additional_samples", ")", "\n", "expanded_metadatasets", "[", "i", "]", "=", "(", "expanded_metadataset", ")", "\n", "blacklist", ".", "update", "(", "used_additional_samples", ")", "\n", "\n", "", "tcga_metadatasets", "=", "[", "]", "\n", "tcga_metadataset", ".", "close", "(", ")", "\n", "preloaded", "=", "tcga_metadataset", ".", "preloaded", "\n", "for", "metadataset", "in", "expanded_metadatasets", ":", "\n", "        ", "current_tcga_metadataset", "=", "copy", ".", "deepcopy", "(", "tcga_metadataset", ")", "\n", "current_tcga_metadataset", ".", "task_ids", "=", "metadataset", "\n", "if", "preloaded", ":", "\n", "            ", "current_tcga_metadataset", ".", "open", "(", ")", "\n", "", "tcga_metadatasets", ".", "append", "(", "current_tcga_metadataset", ")", "\n", "\n", "", "return", "tcga_metadatasets", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_cancers": [[518, 520], ["torchmeta.datasets.utils.get_asset"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset"], ["", "def", "get_cancers", "(", ")", ":", "\n", "    ", "return", "get_asset", "(", "TCGA", ".", "folder", ",", "'cancers.json'", ",", "dtype", "=", "'json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_task_variables": [[522, 524], ["torchmeta.datasets.utils.get_asset"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset"], ["", "def", "get_task_variables", "(", ")", ":", "\n", "    ", "return", "get_asset", "(", "TCGA", ".", "folder", ",", "'task_variables.json'", ",", "dtype", "=", "'json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.get_task_id_splits": [[526, 528], ["torchmeta.datasets.utils.get_asset"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset"], ["", "def", "get_task_id_splits", "(", "meta_split", ")", ":", "\n", "    ", "return", "get_asset", "(", "TCGA", ".", "folder", ",", "'{}.json'", ".", "format", "(", "meta_split", ")", ",", "dtype", "=", "'json'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNIST.__init__": [[89, 100], ["triplemnist.TripleMNISTClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "TripleMNISTClassDataset", "(", "root", ",", "\n", "meta_train", "=", "meta_train", ",", "meta_val", "=", "meta_val", ",", "\n", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "transform", "=", "transform", ",", "\n", "class_augmentations", "=", "class_augmentations", ",", "download", "=", "download", ")", "\n", "super", "(", "TripleMNIST", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.__init__": [[114, 139], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.expanduser", "triplemnist.TripleMNISTClassDataset.filename.format", "triplemnist.TripleMNISTClassDataset.filename_labels.format", "triplemnist.TripleMNISTClassDataset.download", "triplemnist.TripleMNISTClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "TripleMNISTClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Triple MNIST integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.__getitem__": [[140, 148], ["triplemnist.TripleMNISTClassDataset.get_transform", "triplemnist.TripleMNISTClassDataset.get_target_transform", "triplemnist.TripleMNISTDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "label", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "TripleMNISTDataset", "(", "index", ",", "data", ",", "label", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.num_classes": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.data": [[153, 159], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data_file", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "self", ".", "_data", "=", "self", ".", "_data_file", "[", "'datasets'", "]", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.labels": [[160, 166], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset._check_integrity": [[167, 170], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.close": [[171, 176], ["triplemnist.TripleMNISTClassDataset._data_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTClassDataset.download": [[177, 229], ["triplemnist.TripleMNISTClassDataset._check_integrity", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isfile", "torchvision.datasets.utils.download_file_from_google_drive", "os.path.isdir", "os.path.join", "os.path.isfile", "torchmeta.datasets.utils.get_asset", "os.path.join", "os.path.join", "shutil.rmtree", "zipfile.ZipFile", "tqdm", "triplemnist.TripleMNISTClassDataset.filename.format", "triplemnist.TripleMNISTClassDataset.filename_labels.format", "open", "json.dump", "h5py.File", "f.create_group", "h5py.special_dtype", "enumerate", "f.infolist", "tqdm", "glob.glob", "glob.glob.sort", "f.create_group.create_dataset", "enumerate", "f.extract", "os.path.join", "print", "len", "open", "bytearray", "numpy.asarray", "f.read"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "zipfile", "\n", "import", "shutil", "\n", "import", "glob", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "zip_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "zip_filename", ")", ":", "\n", "            ", "download_file_from_google_drive", "(", "self", ".", "gdrive_id", ",", "self", ".", "root", ",", "\n", "self", ".", "zip_filename", ",", "md5", "=", "self", ".", "zip_md5", ")", "\n", "\n", "", "zip_foldername", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "image_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "zip_foldername", ")", ":", "\n", "            ", "with", "zipfile", ".", "ZipFile", "(", "zip_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "member", "in", "tqdm", "(", "f", ".", "infolist", "(", ")", ",", "desc", "=", "'Extracting '", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "f", ".", "extract", "(", "member", ",", "self", ".", "root", ")", "\n", "", "except", "zipfile", ".", "BadZipFile", ":", "\n", "                        ", "print", "(", "'Error: Zip file is corrupted'", ")", "\n", "\n", "", "", "", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "labels", "=", "get_asset", "(", "self", ".", "folder", ",", "'{0}.json'", ".", "format", "(", "split", ")", ")", "\n", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "with", "open", "(", "labels_filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n", "", "image_folder", "=", "os", ".", "path", ".", "join", "(", "zip_foldername", ",", "split", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "'datasets'", ")", "\n", "dtype", "=", "h5py", ".", "special_dtype", "(", "vlen", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "tqdm", "(", "labels", ",", "desc", "=", "filename", ")", ")", ":", "\n", "                    ", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "label", ",", "\n", "'*.png'", ")", ")", "\n", "images", ".", "sort", "(", ")", "\n", "dataset", "=", "group", ".", "create_dataset", "(", "label", ",", "(", "len", "(", "images", ")", ",", ")", ",", "\n", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "                        ", "with", "open", "(", "image", ",", "'rb'", ")", "as", "f", ":", "\n", "                            ", "array", "=", "bytearray", "(", "f", ".", "read", "(", ")", ")", "\n", "dataset", "[", "i", "]", "=", "np", ".", "asarray", "(", "array", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "", "", "", "if", "os", ".", "path", ".", "isdir", "(", "zip_foldername", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "zip_foldername", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTDataset.__init__": [[232, 238], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "label", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "TripleMNISTDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTDataset.__len__": [[239, 241], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.triplemnist.TripleMNISTDataset.__getitem__": [[242, 253], ["PIL.Image.open().convert", "triplemnist.TripleMNISTDataset.transform", "triplemnist.TripleMNISTDataset.target_transform", "PIL.Image.open", "io.BytesIO"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "self", ".", "data", "[", "index", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "self", ".", "label", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUB.__init__": [[89, 98], ["cub.CUBClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "CUBClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "meta_val", "=", "meta_val", ",", "\n", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "transform", "=", "transform", ",", "\n", "class_augmentations", "=", "class_augmentations", ",", "download", "=", "download", ")", "\n", "super", "(", "CUB", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.__init__": [[109, 134], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.expanduser", "cub.CUBClassDataset.filename.format", "cub.CUBClassDataset.filename_labels.format", "cub.CUBClassDataset.download", "cub.CUBClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "CUBClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'CUB integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.__getitem__": [[135, 143], ["cub.CUBClassDataset.get_transform", "cub.CUBClassDataset.get_target_transform", "cub.CUBDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "label", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "CUBDataset", "(", "index", ",", "data", ",", "label", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.num_classes": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.data": [[148, 154], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data_file", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "self", ".", "_data", "=", "self", ".", "_data_file", "[", "'datasets'", "]", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.labels": [[155, 161], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset._check_integrity": [[162, 165], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.close": [[166, 171], ["cub.CUBClassDataset._data_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBClassDataset.download": [[172, 218], ["cub.CUBClassDataset._check_integrity", "os.path.basename", "torchvision.datasets.utils.download_url", "os.path.join", "os.path.join", "os.path.splitext", "os.path.isdir", "os.path.join", "os.path.isfile", "tarfile.open", "f.extractall", "os.path.join", "os.path.isfile", "torchmeta.datasets.utils.get_asset", "os.path.join", "shutil.rmtree", "os.remove", "cub.CUBClassDataset.filename.format", "cub.CUBClassDataset.filename_labels.format", "open", "json.dump", "h5py.File", "f.create_group", "h5py.special_dtype", "enumerate", "tqdm", "glob.glob", "glob.glob.sort", "f.create_group.create_dataset", "enumerate", "os.path.join", "len", "open", "bytearray", "numpy.asarray", "f.read"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "import", "shutil", "\n", "import", "glob", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "download_url", ")", "\n", "download_url", "(", "self", ".", "download_url", ",", "self", ".", "root", ",", "filename", ",", "self", ".", "tgz_md5", ")", "\n", "\n", "tgz_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "filename", ")", "\n", "with", "tarfile", ".", "open", "(", "tgz_filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "self", ".", "root", ")", "\n", "", "image_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "image_folder", ")", "\n", "\n", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "labels", "=", "get_asset", "(", "self", ".", "folder", ",", "'{0}.json'", ".", "format", "(", "split", ")", ")", "\n", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "with", "open", "(", "labels_filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n", "", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "'datasets'", ")", "\n", "dtype", "=", "h5py", ".", "special_dtype", "(", "vlen", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "tqdm", "(", "labels", ",", "desc", "=", "filename", ")", ")", ":", "\n", "                    ", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "label", ",", "'*.jpg'", ")", ")", "\n", "images", ".", "sort", "(", ")", "\n", "dataset", "=", "group", ".", "create_dataset", "(", "label", ",", "(", "len", "(", "images", ")", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "                        ", "with", "open", "(", "image", ",", "'rb'", ")", "as", "f", ":", "\n", "                            ", "array", "=", "bytearray", "(", "f", ".", "read", "(", ")", ")", "\n", "dataset", "[", "i", "]", "=", "np", ".", "asarray", "(", "array", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "", "", "", "tar_folder", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "tgz_filename", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "tar_folder", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "tar_folder", ")", "\n", "\n", "", "attributes_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'attributes.txt'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "attributes_filename", ")", ":", "\n", "            ", "os", ".", "remove", "(", "attributes_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBDataset.__init__": [[221, 227], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "label", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "CUBDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBDataset.__len__": [[228, 230], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.cub.CUBDataset.__getitem__": [[231, 242], ["PIL.Image.open().convert", "cub.CUBDataset.transform", "cub.CUBDataset.target_transform", "PIL.Image.open", "io.BytesIO"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "self", ".", "data", "[", "index", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "self", ".", "label", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenet.__init__": [[82, 92], ["miniimagenet.MiniImagenetClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "MiniImagenetClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "super", "(", "MiniImagenet", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.__init__": [[105, 129], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.expanduser", "miniimagenet.MiniImagenetClassDataset.filename.format", "miniimagenet.MiniImagenetClassDataset.filename_labels.format", "miniimagenet.MiniImagenetClassDataset.download", "miniimagenet.MiniImagenetClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "MiniImagenetClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'MiniImagenet integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.__getitem__": [[130, 138], ["miniimagenet.MiniImagenetClassDataset.get_transform", "miniimagenet.MiniImagenetClassDataset.get_target_transform", "miniimagenet.MiniImagenetDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "class_name", "=", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "class_name", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "MiniImagenetDataset", "(", "index", ",", "data", ",", "class_name", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.num_classes": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.data": [[143, 149], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data_file", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "self", ".", "_data", "=", "self", ".", "_data_file", "[", "'datasets'", "]", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.labels": [[150, 156], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset._check_integrity": [[157, 160], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.close": [[161, 166], ["miniimagenet.MiniImagenetClassDataset._data_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetClassDataset.download": [[167, 204], ["miniimagenet.MiniImagenetClassDataset._check_integrity", "torchvision.datasets.utils.download_file_from_google_drive", "os.path.join", "tarfile.open", "f.extractall", "os.path.join", "os.path.isfile", "os.path.join", "os.path.join", "os.path.isfile", "miniimagenet.MiniImagenetClassDataset.filename.format", "miniimagenet.MiniImagenetClassDataset.pkl_filename.format", "os.path.isfile", "IOError", "open", "pickle.load", "h5py.File", "f.create_group", "classes.items", "miniimagenet.MiniImagenetClassDataset.filename_labels.format", "open", "sorted", "json.dump", "os.remove", "f.create_group.create_dataset", "list", "classes.keys"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "download_file_from_google_drive", "(", "self", ".", "gdrive_id", ",", "self", ".", "root", ",", "\n", "self", ".", "gz_filename", ",", "md5", "=", "self", ".", "gz_md5", ")", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gz_filename", ")", "\n", "with", "tarfile", ".", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extractall", "(", "self", ".", "root", ")", "\n", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "pkl_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "pkl_filename", ".", "format", "(", "split", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pkl_filename", ")", ":", "\n", "                ", "raise", "IOError", "(", ")", "\n", "", "with", "open", "(", "pkl_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "images", ",", "classes", "=", "data", "[", "'image_data'", "]", ",", "data", "[", "'class_dict'", "]", "\n", "\n", "", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "'datasets'", ")", "\n", "for", "name", ",", "indices", "in", "classes", ".", "items", "(", ")", ":", "\n", "                    ", "group", ".", "create_dataset", "(", "name", ",", "data", "=", "images", "[", "indices", "]", ")", "\n", "\n", "", "", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "with", "open", "(", "labels_filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "sorted", "(", "list", "(", "classes", ".", "keys", "(", ")", ")", ")", "\n", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "pkl_filename", ")", ":", "\n", "                ", "os", ".", "remove", "(", "pkl_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetDataset.__init__": [[207, 213], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "class_name", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "MiniImagenetDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "class_name", "=", "class_name", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetDataset.__len__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.miniimagenet.MiniImagenetDataset.__getitem__": [[217, 228], ["PIL.Image.fromarray", "miniimagenet.MiniImagenetDataset.transform", "miniimagenet.MiniImagenetDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "fromarray", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "target", "=", "self", ".", "class_name", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default": [[18, 41], ["torchmeta.transforms.ClassSplitter", "torchmeta.transforms.ClassSplitter.seed", "warnings.warn", "defaults.get", "defaults.get", "defaults.get", "torchvision.transforms.ToTensor", "torchmeta.transforms.Categorical", "torchmeta.datasets.Omniglot", "torchmeta.datasets.MiniImagenet", "torchmeta.datasets.TieredImagenet", "torchmeta.datasets.CIFARFS", "torchmeta.datasets.CUB", "torchmeta.datasets.DoubleMNIST", "torchmeta.datasets.TripleMNIST"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["def", "helper_with_default", "(", "klass", ",", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "\n", "test_shots", "=", "None", ",", "seed", "=", "None", ",", "defaults", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "'num_classes_per_task'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Both arguments `ways` and `num_classes_per_task` were '", "\n", "'set in the helper function for the number of classes per task. '", "\n", "'Ignoring the argument `ways`.'", ",", "stacklevel", "=", "2", ")", "\n", "ways", "=", "kwargs", "[", "'num_classes_per_task'", "]", "\n", "", "if", "'transform'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'transform'", "]", "=", "defaults", ".", "get", "(", "'transform'", ",", "ToTensor", "(", ")", ")", "\n", "", "if", "'target_transform'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'target_transform'", "]", "=", "defaults", ".", "get", "(", "'target_transform'", ",", "\n", "Categorical", "(", "ways", ")", ")", "\n", "", "if", "'class_augmentations'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'class_augmentations'", "]", "=", "defaults", ".", "get", "(", "'class_augmentations'", ",", "None", ")", "\n", "", "if", "test_shots", "is", "None", ":", "\n", "        ", "test_shots", "=", "shots", "\n", "\n", "", "dataset", "=", "klass", "(", "folder", ",", "num_classes_per_task", "=", "ways", ",", "**", "kwargs", ")", "\n", "dataset", "=", "ClassSplitter", "(", "dataset", ",", "shuffle", "=", "shuffle", ",", "\n", "num_train_per_class", "=", "shots", ",", "num_test_per_class", "=", "test_shots", ")", "\n", "dataset", ".", "seed", "(", "seed", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.omniglot": [[43, 86], ["helpers.helper_with_default", "torchvision.transforms.Compose", "torchmeta.transforms.Rotation", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "omniglot", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Omniglot dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `omniglot` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `Omniglot` class.\n\n    See also\n    --------\n    `datasets.Omniglot` : Meta-dataset for the Omniglot dataset.\n    \"\"\"", "\n", "defaults", "=", "{", "\n", "'transform'", ":", "Compose", "(", "[", "Resize", "(", "28", ")", ",", "ToTensor", "(", ")", "]", ")", ",", "\n", "'class_augmentations'", ":", "[", "Rotation", "(", "[", "90", ",", "180", ",", "270", "]", ")", "]", "\n", "}", "\n", "\n", "return", "helper_with_default", "(", "Omniglot", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "defaults", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.miniimagenet": [[87, 129], ["helpers.helper_with_default", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "miniimagenet", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Mini-Imagenet dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `miniimagenet` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds\n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way`\n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the\n        number of test examples is equal to the number of training examples per\n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `MiniImagenet` class.\n\n    See also\n    --------\n    `datasets.MiniImagenet` : Meta-dataset for the Mini-Imagenet dataset.\n    \"\"\"", "\n", "defaults", "=", "{", "\n", "'transform'", ":", "Compose", "(", "[", "Resize", "(", "84", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "}", "\n", "\n", "return", "helper_with_default", "(", "MiniImagenet", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "defaults", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.tieredimagenet": [[130, 172], ["helpers.helper_with_default", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "tieredimagenet", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Tiered-Imagenet dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `tieredimagenet` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `TieredImagenet` class.\n\n    See also\n    --------\n    `datasets.TieredImagenet` : Meta-dataset for the Tiered-Imagenet dataset.\n    \"\"\"", "\n", "defaults", "=", "{", "\n", "'transform'", ":", "Compose", "(", "[", "Resize", "(", "84", ")", ",", "ToTensor", "(", ")", "]", ")", "\n", "}", "\n", "\n", "return", "helper_with_default", "(", "TieredImagenet", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "defaults", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.cifar_fs": [[173, 211], ["helpers.helper_with_default"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "cifar_fs", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the CIFAR-FS dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `cifar100` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `CIFARFS` class.\n\n    See also\n    --------\n    `datasets.cifar100.CIFARFS` : Meta-dataset for the CIFAR-FS dataset.\n    \"\"\"", "\n", "return", "helper_with_default", "(", "CIFARFS", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "{", "}", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.cub": [[212, 259], ["helpers.helper_with_default", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "int"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "cub", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Caltech-UCSD Birds dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `cub` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `CUB` class.\n\n    See also\n    --------\n    `datasets.cub.CUB` : Meta-dataset for the Caltech-UCSD Birds dataset.\n    \"\"\"", "\n", "image_size", "=", "84", "\n", "defaults", "=", "{", "\n", "'transform'", ":", "Compose", "(", "[", "\n", "Resize", "(", "int", "(", "image_size", "*", "1.5", ")", ")", ",", "\n", "CenterCrop", "(", "image_size", ")", ",", "\n", "ToTensor", "(", ")", "\n", "]", ")", "\n", "}", "\n", "\n", "return", "helper_with_default", "(", "CUB", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "defaults", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.doublemnist": [[260, 298], ["helpers.helper_with_default"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "doublemnist", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Double MNIST dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `doublemnist` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `DoubleMNIST` class.\n\n    See also\n    --------\n    `datasets.doublemnist.DoubleMNIST` : Meta-dataset for the Double MNIST dataset.\n    \"\"\"", "\n", "return", "helper_with_default", "(", "DoubleMNIST", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "{", "}", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.triplemnist": [[300, 338], ["helpers.helper_with_default"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.helpers.helper_with_default"], ["", "def", "triplemnist", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Helper function to create a meta-dataset for the Triple MNIST dataset.\n\n    Parameters\n    ----------\n    folder : string\n        Root directory where the dataset folder `triplemnist` exists.\n\n    shots : int\n        Number of (training) examples per class in each task. This corresponds \n        to `k` in `k-shot` classification.\n\n    ways : int\n        Number of classes per task. This corresponds to `N` in `N-way` \n        classification.\n\n    shuffle : bool (default: `True`)\n        Shuffle the examples when creating the tasks.\n\n    test_shots : int, optional\n        Number of test examples per class in each task. If `None`, then the \n        number of test examples is equal to the number of training examples per \n        class.\n\n    seed : int, optional\n        Random seed to be used in the meta-dataset.\n\n    kwargs\n        Additional arguments passed to the `TripleMNIST` class.\n\n    See also\n    --------\n    `datasets.triplemnist.TripleMNIST` : Meta-dataset for the Triple MNIST dataset.\n    \"\"\"", "\n", "return", "helper_with_default", "(", "TripleMNIST", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "{", "}", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.Omniglot.__init__": [[94, 105], ["omniglot.OmniglotClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "use_vinyals_split", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "OmniglotClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "\n", "use_vinyals_split", "=", "use_vinyals_split", ",", "transform", "=", "transform", ",", "\n", "meta_split", "=", "meta_split", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "super", "(", "Omniglot", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.__init__": [[118, 148], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "ValueError", "os.path.expanduser", "omniglot.OmniglotClassDataset.filename_labels.format", "omniglot.OmniglotClassDataset.download", "omniglot.OmniglotClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "use_vinyals_split", "=", "True", ",", "transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "OmniglotClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "if", "self", ".", "meta_val", "and", "(", "not", "use_vinyals_split", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Trying to use the meta-validation without the '", "\n", "'Vinyals split. You must set `use_vinyals_split=True` to use '", "\n", "'the meta-validation split.'", ")", "\n", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "use_vinyals_split", "=", "use_vinyals_split", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "'vinyals_'", "if", "use_vinyals_split", "else", "''", ",", "\n", "self", ".", "meta_split", ")", ")", "\n", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Omniglot integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.__getitem__": [[149, 157], ["omniglot.OmniglotClassDataset.get_transform", "omniglot.OmniglotClassDataset.get_target_transform", "omniglot.OmniglotDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "character_name", "=", "'/'", ".", "join", "(", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", ")", "\n", "data", "=", "self", ".", "data", "[", "character_name", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "OmniglotDataset", "(", "index", ",", "data", ",", "character_name", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.num_classes": [[158, 161], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.data": [[162, 167], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.labels": [[168, 174], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset._check_integrity": [[175, 178], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.close": [[179, 183], ["omniglot.OmniglotClassDataset._data.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data", ".", "close", "(", ")", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotClassDataset.download": [[184, 242], ["omniglot.OmniglotClassDataset._check_integrity", "os.path.join", "os.path.join", "os.path.isfile", "torchvision.datasets.utils.download_url", "h5py.File", "os.path.join", "torchmeta.datasets.utils.get_asset", "zipfile.ZipFile", "f.extractall", "f.create_group", "torchvision.datasets.utils.list_dir", "os.path.join", "shutil.rmtree", "omniglot.OmniglotClassDataset.filename_labels.format", "open", "sorted", "json.dump", "os.path.join", "omniglot.OmniglotClassDataset.filename_labels.format", "open", "sorted", "json.dump", "glob.glob", "f.create_group.create_dataset", "enumerate", "os.path.join", "torchvision.datasets.utils.list_dir", "os.path.join", "PIL.Image.open().convert", "PIL.ImageOps.invert", "os.path.join", "len", "torchmeta.datasets.utils.get_asset.items", "torchvision.datasets.utils.list_dir.items", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "zipfile", "\n", "import", "shutil", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "name", "in", "self", ".", "zips_md5", ":", "\n", "            ", "zip_filename", "=", "'{0}.zip'", ".", "format", "(", "name", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "zip_filename", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "url", "=", "'{0}/{1}'", ".", "format", "(", "self", ".", "download_url_prefix", ",", "zip_filename", ")", "\n", "download_url", "(", "url", ",", "self", ".", "root", ",", "zip_filename", ",", "self", ".", "zips_md5", "[", "name", "]", ")", "\n", "\n", "with", "zipfile", ".", "ZipFile", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "f", ".", "extractall", "(", "self", ".", "root", ")", "\n", "\n", "", "", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "name", "in", "self", ".", "zips_md5", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "name", ")", "\n", "\n", "alphabets", "=", "list_dir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name", ")", ")", "\n", "characters", "=", "[", "(", "name", ",", "alphabet", ",", "character", ")", "for", "alphabet", "in", "alphabets", "\n", "for", "character", "in", "list_dir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name", ",", "alphabet", ")", ")", "]", "\n", "\n", "split", "=", "'train'", "if", "name", "==", "'images_background'", "else", "'test'", "\n", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "''", ",", "split", ")", ")", "\n", "with", "open", "(", "labels_filename", ",", "'w'", ")", "as", "f_labels", ":", "\n", "                    ", "labels", "=", "sorted", "(", "characters", ")", "\n", "json", ".", "dump", "(", "labels", ",", "f_labels", ")", "\n", "\n", "", "for", "_", ",", "alphabet", ",", "character", "in", "characters", ":", "\n", "                    ", "filenames", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name", ",", "\n", "alphabet", ",", "character", ",", "'*.png'", ")", ")", "\n", "dataset", "=", "group", ".", "create_dataset", "(", "'{0}/{1}'", ".", "format", "(", "alphabet", ",", "\n", "character", ")", ",", "(", "len", "(", "filenames", ")", ",", "105", ",", "105", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "for", "i", ",", "char_filename", "in", "enumerate", "(", "filenames", ")", ":", "\n", "                        ", "image", "=", "Image", ".", "open", "(", "char_filename", ",", "mode", "=", "'r'", ")", ".", "convert", "(", "'L'", ")", "\n", "dataset", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "image", ")", "\n", "\n", "", "", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "name", ")", ")", "\n", "\n", "", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_labels", ".", "format", "(", "\n", "'vinyals_'", ",", "split", ")", ")", "\n", "data", "=", "get_asset", "(", "self", ".", "folder", ",", "'{0}.json'", ".", "format", "(", "split", ")", ",", "dtype", "=", "'json'", ")", "\n", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "sorted", "(", "[", "(", "'images_{0}'", ".", "format", "(", "name", ")", ",", "alphabet", ",", "character", ")", "\n", "for", "(", "name", ",", "alphabets", ")", "in", "data", ".", "items", "(", ")", "\n", "for", "(", "alphabet", ",", "characters", ")", "in", "alphabets", ".", "items", "(", ")", "\n", "for", "character", "in", "characters", "]", ")", "\n", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotDataset.__init__": [[245, 251], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "character_name", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "OmniglotDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "character_name", "=", "character_name", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotDataset.__len__": [[252, 254], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.omniglot.OmniglotDataset.__getitem__": [[255, 266], ["PIL.Image.fromarray", "omniglot.OmniglotDataset.transform", "omniglot.OmniglotDataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "fromarray", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "target", "=", "self", ".", "character_name", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNIST.__init__": [[89, 100], ["doublemnist.DoubleMNISTClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "DoubleMNISTClassDataset", "(", "root", ",", "\n", "meta_train", "=", "meta_train", ",", "meta_val", "=", "meta_val", ",", "\n", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "transform", "=", "transform", ",", "\n", "class_augmentations", "=", "class_augmentations", ",", "download", "=", "download", ")", "\n", "super", "(", "DoubleMNIST", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.__init__": [[114, 139], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.expanduser", "doublemnist.DoubleMNISTClassDataset.filename.format", "doublemnist.DoubleMNISTClassDataset.filename_labels.format", "doublemnist.DoubleMNISTClassDataset.download", "doublemnist.DoubleMNISTClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "DoubleMNISTClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Double MNIST integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.__getitem__": [[140, 148], ["doublemnist.DoubleMNISTClassDataset.get_transform", "doublemnist.DoubleMNISTClassDataset.get_target_transform", "doublemnist.DoubleMNISTDataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "label", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "DoubleMNISTDataset", "(", "index", ",", "data", ",", "label", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.num_classes": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.data": [[153, 159], ["h5py.File"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data_file", "=", "h5py", ".", "File", "(", "self", ".", "split_filename", ",", "'r'", ")", "\n", "self", ".", "_data", "=", "self", ".", "_data_file", "[", "'datasets'", "]", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.labels": [[160, 166], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset._check_integrity": [[167, 170], ["os.path.isfile", "os.path.isfile"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.close": [[171, 176], ["doublemnist.DoubleMNISTClassDataset._data_file.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "self", ".", "_data_file", "=", "None", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTClassDataset.download": [[177, 229], ["doublemnist.DoubleMNISTClassDataset._check_integrity", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isfile", "torchvision.datasets.utils.download_file_from_google_drive", "os.path.isdir", "os.path.join", "os.path.isfile", "torchmeta.datasets.utils.get_asset", "os.path.join", "os.path.join", "shutil.rmtree", "zipfile.ZipFile", "tqdm", "doublemnist.DoubleMNISTClassDataset.filename.format", "doublemnist.DoubleMNISTClassDataset.filename_labels.format", "open", "json.dump", "h5py.File", "f.create_group", "h5py.special_dtype", "enumerate", "f.infolist", "tqdm", "glob.glob", "glob.glob.sort", "f.create_group.create_dataset", "enumerate", "f.extract", "os.path.join", "print", "len", "open", "bytearray", "numpy.asarray", "f.read"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "zipfile", "\n", "import", "shutil", "\n", "import", "glob", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "zip_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "zip_filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "zip_filename", ")", ":", "\n", "            ", "download_file_from_google_drive", "(", "self", ".", "gdrive_id", ",", "self", ".", "root", ",", "\n", "self", ".", "zip_filename", ",", "md5", "=", "self", ".", "zip_md5", ")", "\n", "\n", "", "zip_foldername", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "image_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "zip_foldername", ")", ":", "\n", "            ", "with", "zipfile", ".", "ZipFile", "(", "zip_filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "member", "in", "tqdm", "(", "f", ".", "infolist", "(", ")", ",", "desc", "=", "'Extracting '", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "f", ".", "extract", "(", "member", ",", "self", ".", "root", ")", "\n", "", "except", "zipfile", ".", "BadZipFile", ":", "\n", "                        ", "print", "(", "'Error: Zip file is corrupted'", ")", "\n", "\n", "", "", "", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "labels", "=", "get_asset", "(", "self", ".", "folder", ",", "'{0}.json'", ".", "format", "(", "split", ")", ")", "\n", "labels_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "with", "open", "(", "labels_filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "\n", "", "image_folder", "=", "os", ".", "path", ".", "join", "(", "zip_foldername", ",", "split", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "'datasets'", ")", "\n", "dtype", "=", "h5py", ".", "special_dtype", "(", "vlen", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "tqdm", "(", "labels", ",", "desc", "=", "filename", ")", ")", ":", "\n", "                    ", "images", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_folder", ",", "label", ",", "\n", "'*.png'", ")", ")", "\n", "images", ".", "sort", "(", ")", "\n", "dataset", "=", "group", ".", "create_dataset", "(", "label", ",", "(", "len", "(", "images", ")", ",", ")", ",", "\n", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "                        ", "with", "open", "(", "image", ",", "'rb'", ")", "as", "f", ":", "\n", "                            ", "array", "=", "bytearray", "(", "f", ".", "read", "(", ")", ")", "\n", "dataset", "[", "i", "]", "=", "np", ".", "asarray", "(", "array", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "", "", "", "", "if", "os", ".", "path", ".", "isdir", "(", "zip_foldername", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "zip_foldername", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTDataset.__init__": [[232, 238], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "label", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DoubleMNISTDataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTDataset.__len__": [[239, 241], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.doublemnist.DoubleMNISTDataset.__getitem__": [[242, 253], ["PIL.Image.open().convert", "doublemnist.DoubleMNISTDataset.transform", "doublemnist.DoubleMNISTDataset.target_transform", "PIL.Image.open", "io.BytesIO"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "self", ".", "data", "[", "index", "]", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "target", "=", "self", ".", "label", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset_path": [[4, 7], ["os.path.dirname", "os.path.join"], "function", ["None"], ["def", "get_asset_path", "(", "*", "args", ")", ":", "\n", "    ", "basedir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "basedir", ",", "'assets'", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset": [[9, 24], ["utils.get_asset_path", "os.path.isfile", "IOError", "os.path.splitext", "NotImplementedError", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset_path", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "get_asset", "(", "*", "args", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "filename", "=", "get_asset_path", "(", "*", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "IOError", "(", "'{} not found'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "_", ",", "dtype", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "dtype", "=", "dtype", "[", "1", ":", "]", "\n", "\n", "", "if", "dtype", "==", "'json'", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.__init__": [[27, 51], ["torchmeta.utils.data.ClassDataset.__init__", "os.path.join", "os.path.join", "len", "ValueError", "os.path.expanduser", "base.CIFAR100ClassDataset.filename_labels.format", "base.CIFAR100ClassDataset.download", "base.CIFAR100ClassDataset._check_integrity", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "CIFAR100ClassDataset", ",", "self", ")", ".", "__init__", "(", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "class_augmentations", "=", "class_augmentations", ")", "\n", "\n", "if", "self", ".", "subfolder", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "root", ")", ",", "self", ".", "folder", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "subfolder", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "self", ".", "meta_split", ")", ")", "\n", "self", ".", "_data", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'CIFAR100 integrity check failed'", ")", "\n", "", "self", ".", "_num_classes", "=", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.__getitem__": [[52, 60], ["base.CIFAR100ClassDataset.get_transform", "base.CIFAR100ClassDataset.get_target_transform", "base.CIFAR100Dataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_transform", "home.repos.pwc.inspect_result.open-air-sun_sisc.data.dataset.ClassDataset.get_target_transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "coarse_label_name", ",", "fine_label_name", "=", "self", ".", "labels", "[", "index", "%", "self", ".", "num_classes", "]", "\n", "data", "=", "self", ".", "data", "[", "'{0}/{1}'", ".", "format", "(", "coarse_label_name", ",", "fine_label_name", ")", "]", "\n", "transform", "=", "self", ".", "get_transform", "(", "index", ",", "self", ".", "transform", ")", "\n", "target_transform", "=", "self", ".", "get_target_transform", "(", "index", ")", "\n", "\n", "return", "CIFAR100Dataset", "(", "index", ",", "data", ",", "coarse_label_name", ",", "fine_label_name", ",", "\n", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.num_classes": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.data": [[65, 70], ["h5py.File", "os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "None", ":", "\n", "            ", "self", ".", "_data", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ",", "'r'", ")", "\n", "", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.labels": [[71, 77], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_labels", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "split_filename_labels", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "_labels", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity": [[78, 82], ["base.CIFAR100ClassDataset._check_integrity_data", "os.path.isfile", "os.path.isfile", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity_data"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_check_integrity_data", "(", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "self", ".", "split_filename_labels", ")", "\n", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_fine_names", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity_data": [[83, 85], ["os.path.isfile", "os.path.join"], "methods", ["None"], ["", "def", "_check_integrity_data", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close": [[86, 90], ["base.CIFAR100ClassDataset._data.close"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "_data", ".", "close", "(", ")", "\n", "self", ".", "_data", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset.download": [[91, 151], ["base.CIFAR100ClassDataset._check_integrity_data", "torchvision.datasets.utils.download_url", "os.path.join", "torchvision.datasets.utils.check_integrity", "os.path.join", "torchvision.datasets.utils.check_integrity", "numpy.concatenate.reshape", "numpy.concatenate.transpose", "os.path.join", "torchvision.datasets.utils.check_integrity", "os.path.join", "dict", "os.path.join", "os.path.join", "os.path.isdir", "os.path.isfile", "tarfile.open", "tar.extractall", "open", "pickle.load", "open", "pickle.load", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "open", "pickle.load", "h5py.File", "enumerate", "open", "json.dump", "shutil.rmtree", "os.remove", "os.path.join", "f.create_group", "numpy.unique", "f.create_group.create_dataset"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity_data", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "import", "pickle", "\n", "import", "shutil", "\n", "\n", "if", "self", ".", "_check_integrity_data", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "gz_filename", "=", "'{0}.tar.gz'", ".", "format", "(", "self", ".", "gz_folder", ")", "\n", "download_url", "(", "self", ".", "download_url", ",", "self", ".", "root", ",", "filename", "=", "gz_filename", ",", "\n", "md5", "=", "self", ".", "gz_md5", ")", "\n", "with", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "gz_filename", ")", ",", "'r:gz'", ")", "as", "tar", ":", "\n", "            ", "tar", ".", "extractall", "(", "path", "=", "self", ".", "root", ")", "\n", "\n", "", "train_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gz_folder", ",", "'train'", ")", "\n", "check_integrity", "(", "train_filename", ",", "self", ".", "files_md5", "[", "'train'", "]", ")", "\n", "with", "open", "(", "train_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "images", "=", "data", "[", "b'data'", "]", "\n", "fine_labels", "=", "data", "[", "b'fine_labels'", "]", "\n", "coarse_labels", "=", "data", "[", "b'coarse_labels'", "]", "\n", "\n", "", "test_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gz_folder", ",", "'test'", ")", "\n", "check_integrity", "(", "test_filename", ",", "self", ".", "files_md5", "[", "'test'", "]", ")", "\n", "with", "open", "(", "test_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'bytes'", ")", "\n", "images", "=", "np", ".", "concatenate", "(", "(", "images", ",", "data", "[", "b'data'", "]", ")", ",", "axis", "=", "0", ")", "\n", "fine_labels", "=", "np", ".", "concatenate", "(", "(", "fine_labels", ",", "data", "[", "b'fine_labels'", "]", ")", ",", "axis", "=", "0", ")", "\n", "coarse_labels", "=", "np", ".", "concatenate", "(", "(", "coarse_labels", ",", "data", "[", "b'coarse_labels'", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "images", "=", "images", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "meta_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gz_folder", ",", "'meta'", ")", "\n", "check_integrity", "(", "meta_filename", ",", "self", ".", "files_md5", "[", "'meta'", "]", ")", "\n", "with", "open", "(", "meta_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "fine_label_names", "=", "data", "[", "'fine_label_names'", "]", "\n", "coarse_label_names", "=", "data", "[", "'coarse_label_names'", "]", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename", ")", "\n", "fine_names", "=", "dict", "(", ")", "\n", "with", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "coarse_name", "in", "enumerate", "(", "coarse_label_names", ")", ":", "\n", "                ", "group", "=", "f", ".", "create_group", "(", "coarse_name", ")", "\n", "fine_indices", "=", "np", ".", "unique", "(", "fine_labels", "[", "coarse_labels", "==", "i", "]", ")", "\n", "for", "j", "in", "fine_indices", ":", "\n", "                    ", "dataset", "=", "group", ".", "create_dataset", "(", "fine_label_names", "[", "j", "]", ",", "\n", "data", "=", "images", "[", "fine_labels", "==", "j", "]", ")", "\n", "", "fine_names", "[", "coarse_name", "]", "=", "[", "fine_label_names", "[", "j", "]", "for", "j", "in", "fine_indices", "]", "\n", "\n", "", "", "filename_fine_names", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_fine_names", ")", "\n", "with", "open", "(", "filename_fine_names", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "fine_names", ",", "f", ")", "\n", "\n", "", "gz_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "gz_folder", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "gz_folder", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "gz_folder", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "'{0}.tar.gz'", ".", "format", "(", "gz_folder", ")", ")", ":", "\n", "            ", "os", ".", "remove", "(", "'{0}.tar.gz'", ".", "format", "(", "gz_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100Dataset.__init__": [[154, 161], ["torchmeta.utils.data.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "data", ",", "coarse_label_name", ",", "fine_label_name", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "CIFAR100Dataset", ",", "self", ")", ".", "__init__", "(", "index", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "coarse_label_name", "=", "coarse_label_name", "\n", "self", ".", "fine_label_name", "=", "fine_label_name", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100Dataset.__len__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100Dataset.__getitem__": [[165, 176], ["PIL.Image.fromarray", "base.CIFAR100Dataset.transform", "base.CIFAR100Dataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "fromarray", "(", "self", ".", "data", "[", "index", "]", ")", "\n", "target", "=", "(", "self", ".", "coarse_label_name", ",", "self", ".", "fine_label_name", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "image", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.fc100.FC100.__init__": [[78, 88], ["fc100.FC100ClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "FC100ClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "super", "(", "FC100", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.fc100.FC100ClassDataset.__init__": [[93, 100], ["torchmeta.datasets.cifar100.base.CIFAR100ClassDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "FC100ClassDataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.fc100.FC100ClassDataset.download": [[101, 126], ["fc100.FC100ClassDataset._check_integrity", "super().download", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "open", "json.load", "os.path.join", "os.path.isfile", "torchmeta.datasets.utils.get_asset", "fc100.FC100ClassDataset.filename_labels.format", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "", "super", "(", "FC100ClassDataset", ",", "self", ")", ".", "download", "(", ")", "\n", "\n", "subfolder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "subfolder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subfolder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "subfolder", ")", "\n", "\n", "", "filename_fine_names", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "filename_fine_names", ")", "\n", "with", "open", "(", "filename_fine_names", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "fine_names", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "subfolder", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "split_filename_labels", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "data", "=", "get_asset", "(", "self", ".", "folder", ",", "self", ".", "subfolder", ",", "\n", "'{0}.json'", ".", "format", "(", "split", ")", ",", "dtype", "=", "'json'", ")", "\n", "with", "open", "(", "split_filename_labels", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "[", "[", "coarse_name", ",", "fine_name", "]", "for", "coarse_name", "in", "data", "\n", "for", "fine_name", "in", "fine_names", "[", "coarse_name", "]", "]", "\n", "json", ".", "dump", "(", "labels", ",", "f", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFS.__init__": [[77, 87], ["cifar_fs.CIFARFSClassDataset", "torchmeta.utils.data.CombinationMetaDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "num_classes_per_task", "=", "None", ",", "meta_train", "=", "False", ",", "\n", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "meta_split", "=", "None", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "dataset_transform", "=", "None", ",", "\n", "class_augmentations", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "dataset", "=", "CIFARFSClassDataset", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "super", "(", "CIFARFS", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_classes_per_task", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.__init__": [[92, 99], ["torchmeta.datasets.cifar100.base.CIFAR100ClassDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "meta_train", "=", "False", ",", "meta_val", "=", "False", ",", "meta_test", "=", "False", ",", "\n", "meta_split", "=", "None", ",", "transform", "=", "None", ",", "class_augmentations", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "CIFARFSClassDataset", ",", "self", ")", ".", "__init__", "(", "root", ",", "meta_train", "=", "meta_train", ",", "\n", "meta_val", "=", "meta_val", ",", "meta_test", "=", "meta_test", ",", "meta_split", "=", "meta_split", ",", "\n", "transform", "=", "transform", ",", "class_augmentations", "=", "class_augmentations", ",", "\n", "download", "=", "download", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download": [[100, 119], ["cifar_fs.CIFARFSClassDataset._check_integrity", "super().download", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.isfile", "torchmeta.datasets.utils.get_asset", "cifar_fs.CIFARFSClassDataset.filename_labels.format", "open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.base.CIFAR100ClassDataset._check_integrity", "home.repos.pwc.inspect_result.open-air-sun_sisc.cifar100.cifar_fs.CIFARFSClassDataset.download", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.utils.get_asset", "home.repos.pwc.inspect_result.open-air-sun_sisc.datasets.tcga.TCGA.open"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "return", "\n", "", "super", "(", "CIFARFSClassDataset", ",", "self", ")", ".", "download", "(", ")", "\n", "\n", "subfolder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "subfolder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subfolder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "subfolder", ")", "\n", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "split_filename_labels", "=", "os", ".", "path", ".", "join", "(", "subfolder", ",", "\n", "self", ".", "filename_labels", ".", "format", "(", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "split_filename_labels", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "data", "=", "get_asset", "(", "self", ".", "folder", ",", "self", ".", "subfolder", ",", "\n", "'{0}.json'", ".", "format", "(", "split", ")", ",", "dtype", "=", "'json'", ")", "\n", "with", "open", "(", "split_filename_labels", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.normalization.MetaLayerNorm.forward": [[10, 17], ["collections.OrderedDict.get", "collections.OrderedDict.get", "torch.layer_norm", "torch.layer_norm", "collections.OrderedDict", "normalization.MetaLayerNorm.named_parameters"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "weight", "=", "params", ".", "get", "(", "'weight'", ",", "None", ")", "\n", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "return", "F", ".", "layer_norm", "(", "\n", "input", ",", "self", ".", "normalized_shape", ",", "weight", ",", "bias", ",", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.module.MetaModule.meta_named_parameters": [[17, 24], ["module.MetaModule._named_members", "isinstance", "module._parameters.items"], "methods", ["None"], ["def", "meta_named_parameters", "(", "self", ",", "prefix", "=", "''", ",", "recurse", "=", "True", ")", ":", "\n", "        ", "gen", "=", "self", ".", "_named_members", "(", "\n", "lambda", "module", ":", "module", ".", "_parameters", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "module", ",", "MetaModule", ")", "else", "[", "]", ",", "\n", "prefix", "=", "prefix", ",", "recurse", "=", "recurse", ")", "\n", "for", "elem", "in", "gen", ":", "\n", "            ", "yield", "elem", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.module.MetaModule.meta_parameters": [[25, 28], ["module.MetaModule.meta_named_parameters"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.modules.module.MetaModule.meta_named_parameters"], ["", "", "def", "meta_parameters", "(", "self", ",", "recurse", "=", "True", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "meta_named_parameters", "(", "recurse", "=", "recurse", ")", ":", "\n", "            ", "yield", "param", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.conv.MetaConv1d.forward": [[11, 24], ["collections.OrderedDict.get", "torch.conv1d", "torch.conv1d", "collections.OrderedDict", "torch.conv1d", "torch.conv1d", "conv.MetaConv1d.named_parameters", "torch.pad", "torch.pad", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "\n", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "return", "F", ".", "conv1d", "(", "F", ".", "pad", "(", "input", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", ",", "\n", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "_single", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "return", "F", ".", "conv1d", "(", "input", ",", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.conv.MetaConv2d.forward": [[28, 42], ["collections.OrderedDict.get", "torch.conv2d", "torch.conv2d", "collections.OrderedDict", "torch.conv2d", "torch.conv2d", "conv.MetaConv2d.named_parameters", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "\n", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", ",", "\n", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.conv.MetaConv3d.forward": [[46, 61], ["collections.OrderedDict.get", "torch.conv3d", "torch.conv3d", "collections.OrderedDict", "torch.conv3d", "torch.conv3d", "conv.MetaConv3d.named_parameters", "torch.pad", "torch.pad", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "\n", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "2", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "2", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "return", "F", ".", "conv3d", "(", "F", ".", "pad", "(", "input", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", ",", "\n", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "_triple", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n", "", "return", "F", ".", "conv3d", "(", "input", ",", "params", "[", "'weight'", "]", ",", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.container.MetaSequential.forward": [[9, 20], ["container.MetaSequential._modules.items", "isinstance", "module", "isinstance", "module", "TypeError", "torchmeta.modules.utils.get_subdict", "type"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.modules.utils.get_subdict"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "for", "name", ",", "module", "in", "self", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "MetaModule", ")", ":", "\n", "                ", "input", "=", "module", "(", "input", ",", "params", "=", "get_subdict", "(", "params", ",", "name", ")", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Module", ")", ":", "\n", "                ", "input", "=", "module", "(", "input", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'The module must be either a torch module '", "\n", "'(inheriting from `nn.Module`), or a `MetaModule`. '", "\n", "'Got type: `{0}`'", ".", "format", "(", "type", "(", "module", ")", ")", ")", "\n", "", "", "return", "input", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.batchnorm._MetaBatchNorm.forward": [[9, 37], ["batchnorm._MetaBatchNorm._check_input_dim", "collections.OrderedDict.get", "collections.OrderedDict.get", "torch.batch_norm", "torch.batch_norm", "collections.OrderedDict", "batchnorm._MetaBatchNorm.named_parameters", "float"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.modules.batchnorm.MetaBatchNorm3d._check_input_dim"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "self", ".", "_check_input_dim", "(", "input", ")", "\n", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "\n", "# exponential_average_factor is self.momentum set to", "\n", "# (when it is available) only so that if gets updated", "\n", "# in ONNX graph when this node is exported to ONNX.", "\n", "", "if", "self", ".", "momentum", "is", "None", ":", "\n", "            ", "exponential_average_factor", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "if", "self", ".", "training", "and", "self", ".", "track_running_stats", ":", "\n", "            ", "if", "self", ".", "num_batches_tracked", "is", "not", "None", ":", "\n", "                ", "self", ".", "num_batches_tracked", "+=", "1", "\n", "if", "self", ".", "momentum", "is", "None", ":", "# use cumulative moving average", "\n", "                    ", "exponential_average_factor", "=", "1.0", "/", "float", "(", "self", ".", "num_batches_tracked", ")", "\n", "", "else", ":", "# use exponential moving average", "\n", "                    ", "exponential_average_factor", "=", "self", ".", "momentum", "\n", "\n", "", "", "", "weight", "=", "params", ".", "get", "(", "'weight'", ",", "None", ")", "\n", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "\n", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "weight", ",", "bias", ",", "\n", "self", ".", "training", "or", "not", "self", ".", "track_running_stats", ",", "\n", "exponential_average_factor", ",", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.batchnorm.MetaBatchNorm1d._check_input_dim": [[41, 45], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.batchnorm.MetaBatchNorm2d._check_input_dim": [[49, 53], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.batchnorm.MetaBatchNorm3d._check_input_dim": [[57, 61], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.linear.MetaLinear.forward": [[10, 15], ["collections.OrderedDict.get", "torch.linear", "torch.linear", "collections.OrderedDict", "linear.MetaLinear.named_parameters"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "return", "F", ".", "linear", "(", "input", ",", "params", "[", "'weight'", "]", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.linear.MetaBilinear.forward": [[19, 24], ["collections.OrderedDict.get", "torch.bilinear", "torch.bilinear", "collections.OrderedDict", "linear.MetaBilinear.named_parameters"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input1", ",", "input2", ",", "params", "=", "None", ")", ":", "\n", "        ", "if", "params", "is", "None", ":", "\n", "            ", "params", "=", "OrderedDict", "(", "self", ".", "named_parameters", "(", ")", ")", "\n", "", "bias", "=", "params", ".", "get", "(", "'bias'", ",", "None", ")", "\n", "return", "F", ".", "bilinear", "(", "input1", ",", "input2", ",", "params", "[", "'weight'", "]", ",", "bias", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.modules.utils.get_subdict": [[4, 12], ["re.compile", "collections.OrderedDict", "re.escape", "re.compile.sub", "dictionary.items", "re.compile.match"], "function", ["None"], ["def", "get_asset_path", "(", "*", "args", ")", ":", "\n", "    ", "basedir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "basedir", ",", "'assets'", ",", "*", "args", ")", "\n", "\n", "\n", "", "def", "get_asset", "(", "*", "args", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "filename", "=", "get_asset_path", "(", "*", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "IOError", "(", "'{} not found'", ".", "format", "(", "filename", ")", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_splitters.test_seed_class_splitter": [[10, 36], ["torchmeta.transforms.splitters.ClassSplitter", "torchmeta.toy.Sinusoid", "torchmeta.toy.Sinusoid.seed", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "enumerate", "enumerate", "len", "len", "numpy.isclose", "numpy.isclose", "numpy.isclose", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["def", "test_seed_class_splitter", "(", ")", ":", "\n", "    ", "dataset_transform", "=", "ClassSplitter", "(", "shuffle", "=", "True", ",", "\n", "num_train_per_class", "=", "5", ",", "num_test_per_class", "=", "5", ")", "\n", "dataset", "=", "Sinusoid", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "0.1", ",", "\n", "dataset_transform", "=", "dataset_transform", ")", "\n", "dataset", ".", "seed", "(", "1", ")", "\n", "\n", "expected_train_inputs", "=", "np", ".", "array", "(", "[", "-", "2.03870077", ",", "0.09898378", ",", "3.75388738", ",", "1.08565437", ",", "-", "1.56211897", "]", ")", "\n", "expected_train_targets", "=", "np", ".", "array", "(", "[", "-", "0.1031986", ",", "-", "1.61885041", ",", "0.91773121", ",", "-", "0.00309463", ",", "-", "1.37650356", "]", ")", "\n", "\n", "expected_test_inputs", "=", "np", ".", "array", "(", "[", "4.62078213", ",", "-", "2.48340416", ",", "0.32922559", ",", "0.76977846", ",", "-", "3.15504396", "]", ")", "\n", "expected_test_targets", "=", "np", ".", "array", "(", "[", "-", "0.9346262", ",", "0.73113509", ",", "-", "1.52508997", ",", "-", "0.4698061", ",", "1.86656819", "]", ")", "\n", "\n", "task", "=", "dataset", "[", "0", "]", "\n", "train_dataset", ",", "test_dataset", "=", "task", "[", "'train'", "]", ",", "task", "[", "'test'", "]", "\n", "\n", "assert", "len", "(", "train_dataset", ")", "==", "5", "\n", "assert", "len", "(", "test_dataset", ")", "==", "5", "\n", "\n", "for", "i", ",", "(", "train_input", ",", "train_target", ")", "in", "enumerate", "(", "train_dataset", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "train_input", ",", "expected_train_inputs", "[", "i", "]", ")", "\n", "assert", "np", ".", "isclose", "(", "train_target", ",", "expected_train_targets", "[", "i", "]", ")", "\n", "\n", "", "for", "i", ",", "(", "test_input", ",", "test_target", ")", "in", "enumerate", "(", "test_dataset", ")", ":", "\n", "        ", "assert", "np", ".", "isclose", "(", "test_input", ",", "expected_test_inputs", "[", "i", "]", ")", "\n", "assert", "np", ".", "isclose", "(", "test_target", ",", "expected_test_targets", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_splitters.test_class_splitter_for_fold_overlaps": [[37, 76], ["torchmeta.transforms.splitters.ClassSplitter", "DemoTask", "list", "list", "range", "set().union", "set().union", "torchmeta.transforms.splitters.ClassSplitter.", "set", "set", "list.append", "list.append", "len", "super().__init__", "numpy.arange", "len", "len", "set", "set", "set().union.intersection", "set.intersection", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter", "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["", "", "def", "test_class_splitter_for_fold_overlaps", "(", ")", ":", "\n", "    ", "class", "DemoTask", "(", "Task", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "DemoTask", ",", "self", ")", ".", "__init__", "(", "index", "=", "0", ",", "num_classes", "=", "None", ")", "\n", "self", ".", "_inputs", "=", "np", ".", "arange", "(", "10", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "_inputs", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "return", "self", ".", "_inputs", "[", "index", "]", "\n", "\n", "", "", "splitter", "=", "ClassSplitter", "(", "shuffle", "=", "True", ",", "num_train_per_class", "=", "5", ",", "num_test_per_class", "=", "5", ")", "\n", "task", "=", "DemoTask", "(", ")", "\n", "\n", "all_train_samples", "=", "list", "(", ")", "\n", "all_test_samples", "=", "list", "(", ")", "\n", "\n", "# split task ten times into train and test", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "        ", "tasks_split", "=", "splitter", "(", "task", ")", "\n", "train_task", "=", "tasks_split", "[", "\"train\"", "]", "\n", "test_task", "=", "tasks_split", "[", "\"test\"", "]", "\n", "\n", "train_samples", "=", "set", "(", "[", "train_task", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "train_task", ")", ")", "]", ")", "\n", "test_samples", "=", "set", "(", "[", "test_task", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "train_task", ")", ")", "]", ")", "\n", "\n", "# no overlap between train and test splits at single split", "\n", "assert", "len", "(", "train_samples", ".", "intersection", "(", "test_samples", ")", ")", "==", "0", "\n", "\n", "all_train_samples", ".", "append", "(", "train_samples", ")", "\n", "all_train_samples", ".", "append", "(", "train_samples", ")", "\n", "\n", "# gather unique samples from multiple splits", "\n", "", "samples_in_all_train_splits", "=", "set", "(", ")", ".", "union", "(", "*", "all_train_samples", ")", "\n", "samples_in_all_test_splits", "=", "set", "(", ")", ".", "union", "(", "*", "all_test_samples", ")", "\n", "\n", "# no overlap between train and test splits at multiple splits", "\n", "assert", "len", "(", "samples_in_all_test_splits", ".", "intersection", "(", "samples_in_all_train_splits", ")", ")", "==", "0", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_dataloaders.test_meta_dataloader": [[11, 24], ["torchmeta.toy.Sinusoid", "torchmeta.utils.data.MetaDataLoader", "isinstance", "next", "isinstance", "isinstance", "len", "iter", "len", "len"], "function", ["None"], ["def", "test_meta_dataloader", "(", ")", ":", "\n", "    ", "dataset", "=", "Sinusoid", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "meta_dataloader", "=", "MetaDataLoader", "(", "dataset", ",", "batch_size", "=", "4", ")", "\n", "assert", "isinstance", "(", "meta_dataloader", ",", "DataLoader", ")", "\n", "assert", "len", "(", "meta_dataloader", ")", "==", "250", "# 1000 / 4", "\n", "\n", "batch", "=", "next", "(", "iter", "(", "meta_dataloader", ")", ")", "\n", "assert", "isinstance", "(", "batch", ",", "list", ")", "\n", "assert", "len", "(", "batch", ")", "==", "4", "\n", "\n", "task", "=", "batch", "[", "0", "]", "\n", "assert", "isinstance", "(", "task", ",", "Task", ")", "\n", "assert", "len", "(", "task", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_dataloaders.test_meta_dataloader_task_loader": [[26, 40], ["torchmeta.toy.Sinusoid", "torchmeta.utils.data.MetaDataLoader", "next", "torch.utils.data.DataLoader", "next", "isinstance", "isinstance", "iter", "iter", "len"], "function", ["None"], ["", "def", "test_meta_dataloader_task_loader", "(", ")", ":", "\n", "    ", "dataset", "=", "Sinusoid", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "meta_dataloader", "=", "MetaDataLoader", "(", "dataset", ",", "batch_size", "=", "4", ")", "\n", "batch", "=", "next", "(", "iter", "(", "meta_dataloader", ")", ")", "\n", "\n", "dataloader", "=", "DataLoader", "(", "batch", "[", "0", "]", ",", "batch_size", "=", "5", ")", "\n", "inputs", ",", "targets", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "\n", "assert", "len", "(", "dataloader", ")", "==", "2", "# 10 / 5", "\n", "# PyTorch dataloaders convert numpy array to tensors", "\n", "assert", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "targets", ",", "torch", ".", "Tensor", ")", "\n", "assert", "inputs", ".", "shape", "==", "(", "5", ",", "1", ")", "\n", "assert", "targets", ".", "shape", "==", "(", "5", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_dataloaders.test_batch_meta_dataloader": [[42, 53], ["torchmeta.toy.Sinusoid", "torchmeta.utils.data.BatchMetaDataLoader", "isinstance", "next", "isinstance", "isinstance", "len", "iter"], "function", ["None"], ["", "def", "test_batch_meta_dataloader", "(", ")", ":", "\n", "    ", "dataset", "=", "Sinusoid", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "meta_dataloader", "=", "BatchMetaDataLoader", "(", "dataset", ",", "batch_size", "=", "4", ")", "\n", "assert", "isinstance", "(", "meta_dataloader", ",", "DataLoader", ")", "\n", "assert", "len", "(", "meta_dataloader", ")", "==", "250", "# 1000 / 4", "\n", "\n", "inputs", ",", "targets", "=", "next", "(", "iter", "(", "meta_dataloader", ")", ")", "\n", "assert", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "targets", ",", "torch", ".", "Tensor", ")", "\n", "assert", "inputs", ".", "shape", "==", "(", "4", ",", "10", ",", "1", ")", "\n", "assert", "targets", ".", "shape", "==", "(", "4", ",", "10", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_dataloaders.test_batch_meta_dataloader_splitter": [[55, 76], ["torchmeta.toy.Sinusoid", "torchmeta.transforms.ClassSplitter", "torchmeta.utils.data.BatchMetaDataLoader", "next", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "iter"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter"], ["", "def", "test_batch_meta_dataloader_splitter", "(", ")", ":", "\n", "    ", "dataset", "=", "Sinusoid", "(", "20", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "dataset", "=", "ClassSplitter", "(", "dataset", ",", "num_train_per_class", "=", "5", ",", "\n", "num_test_per_class", "=", "15", ")", "\n", "meta_dataloader", "=", "BatchMetaDataLoader", "(", "dataset", ",", "batch_size", "=", "4", ")", "\n", "\n", "batch", "=", "next", "(", "iter", "(", "meta_dataloader", ")", ")", "\n", "assert", "isinstance", "(", "batch", ",", "dict", ")", "\n", "assert", "'train'", "in", "batch", "\n", "assert", "'test'", "in", "batch", "\n", "\n", "train_inputs", ",", "train_targets", "=", "batch", "[", "'train'", "]", "\n", "test_inputs", ",", "test_targets", "=", "batch", "[", "'test'", "]", "\n", "assert", "isinstance", "(", "train_inputs", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "train_targets", ",", "torch", ".", "Tensor", ")", "\n", "assert", "train_inputs", ".", "shape", "==", "(", "4", ",", "5", ",", "1", ")", "\n", "assert", "train_targets", ".", "shape", "==", "(", "4", ",", "5", ",", "1", ")", "\n", "assert", "isinstance", "(", "test_inputs", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "test_targets", ",", "torch", ".", "Tensor", ")", "\n", "assert", "test_inputs", ".", "shape", "==", "(", "4", ",", "15", ",", "1", ")", "\n", "assert", "test_targets", ".", "shape", "==", "(", "4", ",", "15", ",", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_toy.test_toy_meta_dataset": [[11, 18], ["pytest.mark.parametrize", "dataset_class", "isinstance", "len"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'dataset_class'", ",", "\n", "[", "Sinusoid", ",", "Harmonic", ",", "SinusoidAndLine", "]", ")", "\n", "def", "test_toy_meta_dataset", "(", "dataset_class", ")", ":", "\n", "    ", "dataset", "=", "dataset_class", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "\n", "assert", "isinstance", "(", "dataset", ",", "MetaDataset", ")", "\n", "assert", "len", "(", "dataset", ")", "==", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_toy.test_toy_task": [[20, 28], ["pytest.mark.parametrize", "dataset_class", "isinstance", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'dataset_class'", ",", "\n", "[", "Sinusoid", ",", "Harmonic", ",", "SinusoidAndLine", "]", ")", "\n", "def", "test_toy_task", "(", "dataset_class", ")", ":", "\n", "    ", "dataset", "=", "dataset_class", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "task", "=", "dataset", "[", "0", "]", "\n", "\n", "assert", "isinstance", "(", "task", ",", "Task", ")", "\n", "assert", "len", "(", "task", ")", "==", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_toy.test_toy_sample": [[30, 41], ["pytest.mark.parametrize", "dataset_class", "isinstance", "isinstance"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'dataset_class'", ",", "\n", "[", "Sinusoid", ",", "Harmonic", ",", "SinusoidAndLine", "]", ")", "\n", "def", "test_toy_sample", "(", "dataset_class", ")", ":", "\n", "    ", "dataset", "=", "dataset_class", "(", "10", ",", "num_tasks", "=", "1000", ",", "noise_std", "=", "None", ")", "\n", "task", "=", "dataset", "[", "0", "]", "\n", "input", ",", "target", "=", "task", "[", "0", "]", "\n", "\n", "assert", "isinstance", "(", "input", ",", "np", ".", "ndarray", ")", "\n", "assert", "isinstance", "(", "target", ",", "np", ".", "ndarray", ")", "\n", "assert", "input", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "target", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_toy.test_toy_helpers": [[43, 60], ["pytest.mark.parametrize", "getattr", "getattr.", "isinstance", "isinstance", "isinstance", "isinstance", "len", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'name,dataset_class'", ",", "\n", "[", "(", "'sinusoid'", ",", "Sinusoid", ")", ",", "(", "'harmonic'", ",", "Harmonic", ")", "]", ")", "\n", "def", "test_toy_helpers", "(", "name", ",", "dataset_class", ")", ":", "\n", "    ", "dataset_fn", "=", "getattr", "(", "helpers", ",", "name", ")", "\n", "dataset", "=", "dataset_fn", "(", "shots", "=", "5", ",", "test_shots", "=", "15", ")", "\n", "assert", "isinstance", "(", "dataset", ",", "dataset_class", ")", "\n", "\n", "task", "=", "dataset", "[", "0", "]", "\n", "assert", "isinstance", "(", "task", ",", "OrderedDict", ")", "\n", "assert", "'train'", "in", "task", "\n", "assert", "'test'", "in", "task", "\n", "\n", "train", ",", "test", "=", "task", "[", "'train'", "]", ",", "task", "[", "'test'", "]", "\n", "assert", "isinstance", "(", "train", ",", "Task", ")", "\n", "assert", "isinstance", "(", "test", ",", "Task", ")", "\n", "assert", "len", "(", "train", ")", "==", "5", "\n", "assert", "len", "(", "test", ")", "==", "15", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_prototype.test_get_num_samples": [[9, 28], ["pytest.mark.parametrize", "numpy.random.randint", "torch.as_tensor", "torchmeta.utils.prototype.get_num_samples", "numpy.zeros", "range", "numpy.testing.assert_equal", "range", "torchmeta.utils.prototype.get_num_samples.numpy"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_num_samples"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'dtype'", ",", "[", "None", ",", "torch", ".", "float32", "]", ")", "\n", "def", "test_get_num_samples", "(", "dtype", ")", ":", "\n", "# Numpy", "\n", "    ", "num_classes", "=", "3", "\n", "targets_np", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "(", "2", ",", "5", ")", ")", "\n", "\n", "# PyTorch", "\n", "targets_th", "=", "torch", ".", "as_tensor", "(", "targets_np", ")", "\n", "num_samples_th", "=", "get_num_samples", "(", "targets_th", ",", "num_classes", ",", "dtype", "=", "dtype", ")", "\n", "\n", "num_samples_np", "=", "np", ".", "zeros", "(", "(", "2", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int_", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "            ", "num_samples_np", "[", "i", ",", "targets_np", "[", "i", ",", "j", "]", "]", "+=", "1", "\n", "\n", "", "", "assert", "num_samples_th", ".", "shape", "==", "(", "2", ",", "num_classes", ")", "\n", "if", "dtype", "is", "not", "None", ":", "\n", "        ", "assert", "num_samples_th", ".", "dtype", "==", "dtype", "\n", "", "np", ".", "testing", ".", "assert_equal", "(", "num_samples_th", ".", "numpy", "(", ")", ",", "num_samples_np", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.tests.test_prototype.test_get_prototypes": [[30, 58], ["numpy.random.rand().astype", "numpy.random.randint", "torch.as_tensor", "torch.as_tensor", "torchmeta.utils.prototype.get_prototypes", "numpy.zeros", "numpy.zeros", "range", "range", "numpy.testing.assert_allclose", "range", "range", "torchmeta.utils.prototype.get_prototypes.detach().numpy", "numpy.random.rand", "range", "range", "max", "torchmeta.utils.prototype.get_prototypes.detach"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.utils.prototype.get_prototypes"], ["", "def", "test_get_prototypes", "(", ")", ":", "\n", "# Numpy", "\n", "    ", "num_classes", "=", "3", "\n", "embeddings_np", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "5", ",", "7", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "targets_np", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "(", "2", ",", "5", ")", ")", "\n", "\n", "# PyTorch", "\n", "embeddings_th", "=", "torch", ".", "as_tensor", "(", "embeddings_np", ")", "\n", "targets_th", "=", "torch", ".", "as_tensor", "(", "targets_np", ")", "\n", "prototypes_th", "=", "get_prototypes", "(", "embeddings_th", ",", "targets_th", ",", "num_classes", ")", "\n", "\n", "assert", "prototypes_th", ".", "shape", "==", "(", "2", ",", "num_classes", ",", "7", ")", "\n", "assert", "prototypes_th", ".", "dtype", "==", "embeddings_th", ".", "dtype", "\n", "\n", "prototypes_np", "=", "np", ".", "zeros", "(", "(", "2", ",", "num_classes", ",", "7", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_samples_np", "=", "np", ".", "zeros", "(", "(", "2", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "int_", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "5", ")", ":", "\n", "            ", "num_samples_np", "[", "i", ",", "targets_np", "[", "i", ",", "j", "]", "]", "+=", "1", "\n", "for", "k", "in", "range", "(", "7", ")", ":", "\n", "                ", "prototypes_np", "[", "i", ",", "targets_np", "[", "i", ",", "j", "]", ",", "k", "]", "+=", "embeddings_np", "[", "i", ",", "j", ",", "k", "]", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "7", ")", ":", "\n", "                ", "prototypes_np", "[", "i", ",", "j", ",", "k", "]", "/=", "max", "(", "num_samples_np", "[", "i", ",", "j", "]", ",", "1", ")", "\n", "\n", "", "", "", "np", ".", "testing", ".", "assert_allclose", "(", "prototypes_th", ".", "detach", "(", ")", ".", "numpy", "(", ")", ",", "prototypes_np", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.__init__": [[31, 36], ["torchmeta.transforms.target_transforms.TargetTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_classes", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.reset": [[37, 40], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_classes", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.classes": [[41, 55], ["collections.defaultdict", "ValueError", "len", "len", "len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_classes", "is", "None", ":", "\n", "            ", "self", ".", "_classes", "=", "defaultdict", "(", "None", ")", "\n", "if", "self", ".", "num_classes", "is", "None", ":", "\n", "                ", "default_factory", "=", "lambda", ":", "len", "(", "self", ".", "_classes", ")", "\n", "", "else", ":", "\n", "                ", "default_factory", "=", "lambda", ":", "self", ".", "labels", "[", "len", "(", "self", ".", "_classes", ")", "]", "\n", "", "self", ".", "_classes", ".", "default_factory", "=", "default_factory", "\n", "", "if", "(", "self", ".", "num_classes", "is", "not", "None", ")", "and", "(", "len", "(", "self", ".", "_classes", ")", ">", "self", ".", "num_classes", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of individual labels ({0}) is greater '", "\n", "'than the number of classes defined by `num_classes` '", "\n", "'({1}).'", ".", "format", "(", "len", "(", "self", ".", "_classes", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "", "return", "self", ".", "_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.labels": [[56, 62], ["torch.randperm().tolist", "torch.randperm"], "methods", ["None"], ["", "@", "property", "\n", "def", "labels", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "_labels", "is", "None", ")", "and", "(", "self", ".", "num_classes", "is", "not", "None", ")", ":", "\n", "# TODO: Replace torch.randperm with seed-friendly counterpart", "\n", "            ", "self", ".", "_labels", "=", "torch", ".", "randperm", "(", "self", ".", "num_classes", ")", ".", "tolist", "(", ")", "\n", "", "return", "self", ".", "_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.__call__": [[63, 65], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "classes", "[", "target", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.Categorical.__repr__": [[66, 68], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{0}({1})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "num_classes", "or", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.FixedCategory.__init__": [[71, 73], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.FixedCategory.__call__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "(", "index", ",", "self", ".", "transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.categorical.FixedCategory.__repr__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "(", "'{0}({1})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "transform", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.target_transforms.TargetTransform.__call__": [[2, 4], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.target_transforms.TargetTransform.__repr__": [[5, 7], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.target_transforms.DefaultTargetTransform.__init__": [[10, 17], ["object.__init__", "dict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_augmentations", ")", ":", "\n", "        ", "super", "(", "DefaultTargetTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "class_augmentations", "=", "class_augmentations", "\n", "\n", "self", ".", "_augmentations", "=", "dict", "(", "(", "augmentation", ",", "i", "+", "1", ")", "\n", "for", "(", "i", ",", "augmentation", ")", "in", "enumerate", "(", "class_augmentations", ")", ")", "\n", "self", ".", "_augmentations", "[", "None", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.target_transforms.DefaultTargetTransform.__call__": [[18, 22], ["isinstance", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "assert", "isinstance", "(", "target", ",", "tuple", ")", "and", "len", "(", "target", ")", "==", "2", "\n", "label", ",", "augmentation", "=", "target", "\n", "return", "(", "label", ",", "self", ".", "_augmentations", "[", "augmentation", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__init__": [[4, 21], ["object.__init__", "isinstance", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "angle", ",", "resample", "=", "False", ",", "expand", "=", "False", ",", "center", "=", "None", ")", ":", "\n", "        ", "super", "(", "Rotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "angle", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "self", ".", "_angles", "=", "angle", "\n", "self", ".", "angle", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_angles", "=", "[", "angle", "]", "\n", "self", ".", "angle", "=", "angle", "\n", "if", "angle", "%", "360", "==", "0", ":", "\n", "                ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'Applying a rotation of {0} degrees (`{1}`) as a '", "\n", "'class augmentation on a dataset is equivalent to the original '", "\n", "'dataset.'", ".", "format", "(", "angle", ",", "self", ")", ",", "UserWarning", ",", "stacklevel", "=", "2", ")", "\n", "\n", "", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "expand", "=", "expand", "\n", "self", ".", "center", "=", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__iter__": [[22, 25], ["iter", "augmentations.Rotation"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "Rotation", "(", "angle", ",", "resample", "=", "self", ".", "resample", ",", "expand", "=", "self", ".", "expand", ",", "\n", "center", "=", "self", ".", "center", ")", "for", "angle", "in", "self", ".", "_angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__call__": [[26, 36], ["tuple", "torchvision.rotate", "ValueError", "len", "image.getbands"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "self", ".", "angle", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'The value of the angle is unspecified.'", ")", "\n", "# QKFIX: Explicitly compute the pixel fill value due to an", "\n", "# incompatibility between Torchvision 0.5 and Pillow 7.0.0", "\n", "# https://github.com/pytorch/vision/issues/1759#issuecomment-583826810", "\n", "# Will be fixed in Torchvision 0.6", "\n", "", "fill", "=", "tuple", "(", "[", "0", "]", "*", "len", "(", "image", ".", "getbands", "(", ")", ")", ")", "\n", "return", "F", ".", "rotate", "(", "image", ",", "self", ".", "angle", "%", "360", ",", "self", ".", "resample", ",", "\n", "self", ".", "expand", ",", "self", ".", "center", ",", "fill", "=", "fill", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__hash__": [[37, 39], ["hash", "repr"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "repr", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__eq__": [[40, 44], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "(", "self", ".", "angle", "is", "None", ")", "or", "(", "other", ".", "angle", "is", "None", ")", ":", "\n", "            ", "return", "self", ".", "_angles", "==", "other", ".", "_angles", "\n", "", "return", "(", "self", ".", "angle", "%", "360", ")", "==", "(", "other", ".", "angle", "%", "360", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__repr__": [[45, 50], ["map"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "angle", "is", "None", ":", "\n", "            ", "return", "'Rotation({0})'", ".", "format", "(", "', '", ".", "join", "(", "map", "(", "str", ",", "self", ".", "_angles", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "'Rotation({0})'", ".", "format", "(", "self", ".", "angle", "%", "360", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.Rotation.__str__": [[51, 56], ["map"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "angle", "is", "None", ":", "\n", "            ", "return", "'Rotation({0})'", ".", "format", "(", "', '", ".", "join", "(", "map", "(", "str", ",", "self", ".", "_angles", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "'Rotation({0})'", ".", "format", "(", "self", ".", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.HorizontalFlip.__iter__": [[58, 60], ["iter", "augmentations.HorizontalFlip"], "methods", ["None"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "[", "HorizontalFlip", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.HorizontalFlip.__call__": [[61, 63], ["torchvision.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "F", ".", "hflip", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.HorizontalFlip.__repr__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'HorizontalFlip()'", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.VerticalFlip.__iter__": [[68, 70], ["iter", "augmentations.VerticalFlip"], "methods", ["None"], ["    ", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "[", "VerticalFlip", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.VerticalFlip.__call__": [[71, 73], ["torchvision.vflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "F", ".", "vflip", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.augmentations.VerticalFlip.__repr__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'VerticalFlip()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.apply_wrapper": [[4, 21], ["isinstance", "wrapper", "isinstance", "NotImplementedError", "torchvision.transforms.Compose"], "function", ["None"], ["def", "get_asset_path", "(", "*", "args", ")", ":", "\n", "    ", "basedir", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "basedir", ",", "'assets'", ",", "*", "args", ")", "\n", "\n", "\n", "", "def", "get_asset", "(", "*", "args", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "filename", "=", "get_asset_path", "(", "*", "args", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "IOError", "(", "'{} not found'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "if", "dtype", "is", "None", ":", "\n", "        ", "_", ",", "dtype", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "dtype", "=", "dtype", "[", "1", ":", "]", "\n", "\n", "", "if", "dtype", "==", "'json'", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.wrap_transform": [[22, 30], ["isinstance", "fn", "isinstance", "torchvision.transforms.Compose", "utils.wrap_transform"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.wrap_transform"], ["        ", "raise", "NotImplementedError", "(", ")", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.__init__": [[12, 16], ["splitters.Splitter.seed"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["    ", "def", "__init__", "(", "self", ",", "splits", ",", "random_state_seed", ")", ":", "\n", "        ", "self", ".", "splits", "=", "splits", "\n", "self", ".", "random_state_seed", "=", "random_state_seed", "\n", "self", ".", "seed", "(", "random_state_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed": [[17, 19], ["numpy.random.RandomState"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "self", ".", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.get_indices": [[20, 29], ["isinstance", "splitters.Splitter.get_indices_concattask", "isinstance", "splitters.Splitter.get_indices_task", "ValueError", "type"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter_.get_indices_concattask", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter_.get_indices_task"], ["", "def", "get_indices", "(", "self", ",", "task", ")", ":", "\n", "        ", "if", "isinstance", "(", "task", ",", "ConcatTask", ")", ":", "\n", "            ", "indices", "=", "self", ".", "get_indices_concattask", "(", "task", ")", "\n", "", "elif", "isinstance", "(", "task", ",", "Task", ")", ":", "\n", "            ", "indices", "=", "self", ".", "get_indices_task", "(", "task", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The task must be of type `ConcatTask` or `Task`, '", "\n", "'Got type `{0}`.'", ".", "format", "(", "type", "(", "task", ")", ")", ")", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.get_indices_task": [[30, 32], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_indices_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method `get_indices_task` must be '", "\n", "'implemented in classes inherited from `Splitter`.'", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.get_indices_concattask": [[34, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_indices_concattask", "(", "self", ",", "task", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Method `get_indices_concattask` must be '", "\n", "'implemented in classes inherited from `Splitter`.'", ")", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter._get_class_indices": [[38, 59], ["collections.defaultdict", "range", "range", "len", "len", "class_indices[].append", "len", "ValueError", "ValueError", "isinstance", "len", "len"], "methods", ["None"], ["", "def", "_get_class_indices", "(", "self", ",", "task", ")", ":", "\n", "        ", "class_indices", "=", "defaultdict", "(", "list", ")", "\n", "if", "task", ".", "num_classes", "is", "None", ":", "# Regression task", "\n", "            ", "class_indices", "[", "'regression'", "]", "=", "range", "(", "len", "(", "task", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "index", "in", "range", "(", "len", "(", "task", ")", ")", ":", "\n", "                ", "sample", "=", "task", "[", "index", "]", "\n", "if", "(", "not", "isinstance", "(", "sample", ",", "tuple", ")", ")", "or", "(", "len", "(", "sample", ")", "<", "2", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'In order to split the dataset in train/'", "\n", "'test splits, `Splitter` must access the targets. Each '", "\n", "'sample from a task must be a tuple with at least 2 '", "\n", "'elements, with the last one being the target.'", ")", "\n", "", "class_indices", "[", "sample", "[", "-", "1", "]", "]", ".", "append", "(", "index", ")", "\n", "\n", "", "if", "len", "(", "class_indices", ")", "!=", "task", ".", "num_classes", ":", "\n", "                ", "raise", "ValueError", "(", "'The number of classes detected in `Splitter` '", "\n", "'({0}) is different from the property `num_classes` ({1}) '", "\n", "'in task `{2}`.'", ".", "format", "(", "len", "(", "class_indices", ")", ",", "\n", "task", ".", "num_classes", ",", "task", ")", ")", "\n", "\n", "", "", "return", "class_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.__call__": [[60, 64], ["splitters.Splitter.get_indices", "collections.OrderedDict", "torchmeta.utils.data.task.SubsetTask"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.get_indices"], ["", "def", "__call__", "(", "self", ",", "task", ")", ":", "\n", "        ", "indices", "=", "self", ".", "get_indices", "(", "task", ")", "\n", "return", "OrderedDict", "(", "[", "(", "split", ",", "SubsetTask", "(", "task", ",", "indices", "[", "split", "]", ")", ")", "\n", "for", "split", "in", "self", ".", "splits", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "splits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter_.__init__": [[70, 142], ["sum", "splitters.Splitter.__init__", "collections.OrderedDict", "len", "collections.OrderedDict.values"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shuffle", "=", "True", ",", "num_samples_per_class", "=", "None", ",", "\n", "num_train_per_class", "=", "None", ",", "num_test_per_class", "=", "None", ",", "\n", "num_support_per_class", "=", "None", ",", "num_query_per_class", "=", "None", ",", "\n", "random_state_seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Transforms a dataset into train/test splits for few-shot learning tasks,\n        based on a fixed number of samples per class for each split. This is a\n        dataset transformation to be applied as a `dataset_transform` in a\n        `MetaDataset`.\n\n        Parameters\n        ----------\n        shuffle : bool (default: `True`)\n            Shuffle the data in the dataset before the split.\n\n        num_samples_per_class : dict, optional\n            Dictionary containing the names of the splits (as keys) and the\n            corresponding number of samples per class in each split (as values).\n            If not `None`, then the arguments `num_train_per_class`,\n            `num_test_per_class`, `num_support_per_class` and\n            `num_query_per_class` are ignored.\n\n        num_train_per_class : int, optional\n            Number of samples per class in the training split. This corresponds\n            to the number of \"shots\" in \"k-shot learning\". If not `None`, this\n            creates an item `train` for each task.\n\n        num_test_per_class : int, optional\n            Number of samples per class in the test split. If not `None`, this\n            creates an item `test` for each task.\n\n        num_support_per_class : int, optional\n            Alias for `num_train_per_class`. If `num_train_per_class` is not\n            `None`, then this argument is ignored. If not `None`, this creates\n            an item `support` for each task.\n\n        num_query_per_class : int, optional\n            Alias for `num_test_per_class`. If `num_test_per_class` is not\n            `None`, then this argument is ignored. If not `None`, this creates\n            an item `query` for each task.\n\n        random_state_seed : int, optional\n            seed of the np.RandomState. Defaults to '0'.\n\n        Examples\n        --------\n        >>> transform = ClassSplitter(num_samples_per_class={\n        ...     'train': 5, 'test': 15})\n        >>> dataset = Omniglot('data', num_classes_per_task=5,\n        ...                    dataset_transform=transform, meta_train=True)\n        >>> task = dataset.sample_task()\n        >>> task.keys()\n        ['train', 'test']\n        >>> len(task['train']), len(task['test'])\n        (25, 75)\n        \"\"\"", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "if", "num_samples_per_class", "is", "None", ":", "\n", "            ", "num_samples_per_class", "=", "OrderedDict", "(", ")", "\n", "if", "num_train_per_class", "is", "not", "None", ":", "\n", "                ", "num_samples_per_class", "[", "'train'", "]", "=", "num_train_per_class", "\n", "", "elif", "num_support_per_class", "is", "not", "None", ":", "\n", "                ", "num_samples_per_class", "[", "'support'", "]", "=", "num_support_per_class", "\n", "", "if", "num_test_per_class", "is", "not", "None", ":", "\n", "                ", "num_samples_per_class", "[", "'test'", "]", "=", "num_test_per_class", "\n", "", "elif", "num_query_per_class", "is", "not", "None", ":", "\n", "                ", "num_samples_per_class", "[", "'query'", "]", "=", "num_query_per_class", "\n", "", "", "assert", "len", "(", "num_samples_per_class", ")", ">", "0", "\n", "\n", "self", ".", "_min_samples_per_class", "=", "sum", "(", "num_samples_per_class", ".", "values", "(", ")", ")", "\n", "super", "(", "ClassSplitter_", ",", "self", ")", ".", "__init__", "(", "num_samples_per_class", ",", "random_state_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter_.get_indices_task": [[143, 170], ["splitters.ClassSplitter_._get_class_indices", "collections.OrderedDict", "splitters.ClassSplitter_.items", "len", "splitters.ClassSplitter_.splits.items", "ValueError", "numpy.random.RandomState().permutation", "numpy.arange", "indices[].extend", "splitters.ClassSplitter_.np_random.shuffle", "hash", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter._get_class_indices"], ["", "def", "get_indices_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "all_class_indices", "=", "self", ".", "_get_class_indices", "(", "task", ")", "\n", "indices", "=", "OrderedDict", "(", "[", "(", "split", ",", "[", "]", ")", "for", "split", "in", "self", ".", "splits", "]", ")", "\n", "\n", "for", "name", ",", "class_indices", "in", "all_class_indices", ".", "items", "(", ")", ":", "\n", "            ", "num_samples", "=", "len", "(", "class_indices", ")", "\n", "if", "num_samples", "<", "self", ".", "_min_samples_per_class", ":", "\n", "                ", "raise", "ValueError", "(", "'The number of samples for class `{0}` ({1}) '", "\n", "'is smaller than the minimum number of samples per class '", "\n", "'required by `ClassSplitter` ({2}).'", ".", "format", "(", "name", ",", "\n", "num_samples", ",", "self", ".", "_min_samples_per_class", ")", ")", "\n", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "                ", "seed", "=", "(", "hash", "(", "task", ")", "+", "self", ".", "random_state_seed", ")", "%", "(", "2", "**", "32", ")", "\n", "dataset_indices", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "permutation", "(", "num_samples", ")", "\n", "", "else", ":", "\n", "                ", "dataset_indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "\n", "", "ptr", "=", "0", "\n", "for", "split", ",", "num_split", "in", "self", ".", "splits", ".", "items", "(", ")", ":", "\n", "                ", "split_indices", "=", "dataset_indices", "[", "ptr", ":", "ptr", "+", "num_split", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "                    ", "self", ".", "np_random", ".", "shuffle", "(", "split_indices", ")", "\n", "", "indices", "[", "split", "]", ".", "extend", "(", "[", "class_indices", "[", "idx", "]", "for", "idx", "in", "split_indices", "]", ")", "\n", "ptr", "+=", "num_split", "\n", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter_.get_indices_concattask": [[171, 199], ["collections.OrderedDict", "len", "splitters.ClassSplitter_.splits.items", "ValueError", "numpy.random.RandomState().permutation", "numpy.arange", "indices[].extend", "splitters.ClassSplitter_.np_random.shuffle", "hash", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "get_indices_concattask", "(", "self", ",", "task", ")", ":", "\n", "        ", "indices", "=", "OrderedDict", "(", "[", "(", "split", ",", "[", "]", ")", "for", "split", "in", "self", ".", "splits", "]", ")", "\n", "cum_size", "=", "0", "\n", "\n", "for", "dataset", "in", "task", ".", "datasets", ":", "\n", "            ", "num_samples", "=", "len", "(", "dataset", ")", "\n", "if", "num_samples", "<", "self", ".", "_min_samples_per_class", ":", "\n", "                ", "raise", "ValueError", "(", "'The number of samples for one class ({0}) '", "\n", "'is smaller than the minimum number of samples per class '", "\n", "'required by `ClassSplitter` ({1}).'", ".", "format", "(", "num_samples", ",", "\n", "self", ".", "_min_samples_per_class", ")", ")", "\n", "\n", "", "if", "self", ".", "shuffle", ":", "\n", "                ", "seed", "=", "(", "hash", "(", "task", ")", "+", "self", ".", "random_state_seed", ")", "%", "(", "2", "**", "32", ")", "\n", "dataset_indices", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "permutation", "(", "num_samples", ")", "\n", "", "else", ":", "\n", "                ", "dataset_indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "\n", "", "ptr", "=", "0", "\n", "for", "split", ",", "num_split", "in", "self", ".", "splits", ".", "items", "(", ")", ":", "\n", "                ", "split_indices", "=", "dataset_indices", "[", "ptr", ":", "ptr", "+", "num_split", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "                    ", "self", ".", "np_random", ".", "shuffle", "(", "split_indices", ")", "\n", "", "indices", "[", "split", "]", ".", "extend", "(", "split_indices", "+", "cum_size", ")", "\n", "ptr", "+=", "num_split", "\n", "", "cum_size", "+=", "num_samples", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter_.__init__": [[202, 297], ["sum", "splitters.Splitter.__init__", "collections.OrderedDict", "len", "sum", "isinstance", "collections.OrderedDict", "isinstance", "isinstance", "splitters.WeightedClassSplitter_.min_num_samples.values", "collections.OrderedDict.values", "collections.OrderedDict", "NotImplementedError", "collections.OrderedDict", "isinstance", "collections.OrderedDict", "NotImplementedError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "shuffle", "=", "True", ",", "min_num_samples", "=", "1", ",", "max_num_samples", "=", "None", ",", "\n", "weights", "=", "None", ",", "train_weights", "=", "None", ",", "test_weights", "=", "None", ",", "\n", "support_weights", "=", "None", ",", "query_weights", "=", "None", ",", "\n", "force_equal_per_class", "=", "False", ",", "random_state_seed", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        Transforms a dataset into train/test splits for few-shot learning tasks.\n        The number of samples per class is proportional to the number of samples\n        per class in the original dataset. This is a dataset transformation to\n        be applied as a `dataset_transform` in a `MetaDataset`.\n\n        Parameters\n        ----------\n        shuffle : bool (default: `True`)\n            Shuffle the data in the dataset before the split.\n\n        min_num_samples : int or dict, optional (default: 1)\n            Minimum number of samples per class.\n\n        max_num_samples : int or dict, optional\n            Maximum number of samples per class.\n\n        weights : dict, optional\n            Dictionary containing the names of the splits (as keys) and the\n            corresponding proportions of samples per class in each split (as\n            values). If not `None`, then the arguments `train_weights`,\n            `test_weights`, `support_weights` and `query_weights` are ignored.\n\n        train_weights : float, optional\n            Proportion of samples from each class in the training split. If not\n            `None`, this creates an item `train` for each task.\n\n        test_weights : float, optional\n            Proportion of samples from each class in the training split. If not\n            `None`, this creates an item `test` for each task.\n\n        support_weights : float, optional\n            Alias for `train_weights`. If `train_weights` is not `None`, then\n            this argument is ignored. If not `None`, this creates an item\n            `support` for each task.\n\n        query_weights : float, optional\n            Alias for `test_weights`. If `test_weights` is not `None`, then this\n            argument is ignored. If not `None`, this creates an item `query` for\n            each task.\n\n        force_equal_per_class : bool (default: `False`)\n            If `True`, then the number of samples per class is equal for each\n            class; this is then proportional to the number of samples in the\n            class with the minimum number of samples.\n\n        random_state_seed : int, optional\n            seed of the np.RandomState. Defaults to '0'.\n        \"\"\"", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "force_equal_per_class", "=", "force_equal_per_class", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "OrderedDict", "(", ")", "\n", "if", "train_weights", "is", "not", "None", ":", "\n", "                ", "weights", "[", "'train'", "]", "=", "train_weights", "\n", "", "elif", "support_weights", "is", "not", "None", ":", "\n", "                ", "weights", "[", "'support'", "]", "=", "support_weights", "\n", "", "if", "test_weights", "is", "not", "None", ":", "\n", "                ", "weights", "[", "'test'", "]", "=", "test_weights", "\n", "", "elif", "query_weights", "is", "not", "None", ":", "\n", "                ", "weights", "[", "'query'", "]", "=", "query_weights", "\n", "", "", "assert", "len", "(", "weights", ")", ">", "0", "\n", "assert", "sum", "(", "weights", ".", "values", "(", ")", ")", "<=", "1.", "\n", "\n", "if", "(", "min_num_samples", "is", "None", ")", "or", "isinstance", "(", "min_num_samples", ",", "int", ")", ":", "\n", "            ", "if", "min_num_samples", "is", "None", ":", "\n", "                ", "min_num_samples", "=", "0", "\n", "", "self", ".", "min_num_samples", "=", "OrderedDict", "(", "[", "(", "split", ",", "min_num_samples", ")", "\n", "for", "split", "in", "weights", "]", ")", "\n", "", "elif", "isinstance", "(", "min_num_samples", ",", "dict", ")", ":", "\n", "            ", "self", ".", "min_num_samples", "=", "OrderedDict", "(", "min_num_samples", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Argument `min_num_samples` in '", "\n", "'`WeightedClassSplitter` must be of type `dict` or `int`. Got '", "\n", "'type `{0}`.'", ".", "format", "(", "type", "(", "min_num_samples", ")", ")", ")", "\n", "\n", "", "if", "max_num_samples", "is", "None", ":", "\n", "            ", "self", ".", "max_num_samples", "=", "None", "\n", "", "elif", "isinstance", "(", "max_num_samples", ",", "int", ")", ":", "\n", "            ", "self", ".", "max_num_samples", "=", "OrderedDict", "(", "[", "(", "split", ",", "max_num_samples", ")", "\n", "for", "split", "in", "weights", "]", ")", "\n", "", "elif", "isinstance", "(", "max_num_samples", ",", "dict", ")", ":", "\n", "            ", "self", ".", "max_num_samples", "=", "OrderedDict", "(", "max_num_samples", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Argument `max_num_samples` in '", "\n", "'`WeightedClassSplitter` must be of type `dict` or `int`. Got '", "\n", "'type `{0}`.'", ".", "format", "(", "type", "(", "min_num_samples", ")", ")", ")", "\n", "\n", "", "self", ".", "_min_samples_per_class", "=", "sum", "(", "self", ".", "min_num_samples", ".", "values", "(", ")", ")", "\n", "super", "(", "WeightedClassSplitter_", ",", "self", ")", ".", "__init__", "(", "weights", ",", "random_state_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter_.get_indices_task": [[298, 331], ["splitters.WeightedClassSplitter_._get_class_indices", "collections.OrderedDict", "min", "splitters.WeightedClassSplitter_.values", "ValueError", "splitters.WeightedClassSplitter_.splits.items", "len", "len", "numpy.random.RandomState().permutation", "numpy.arange", "max", "indices[].extend", "splitters.WeightedClassSplitter_.values", "int", "min", "splitters.WeightedClassSplitter_.np_random.shuffle", "hash", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter._get_class_indices"], ["", "def", "get_indices_task", "(", "self", ",", "task", ")", ":", "\n", "        ", "all_class_indices", "=", "self", ".", "_get_class_indices", "(", "task", ")", "\n", "indices", "=", "OrderedDict", "(", "[", "(", "split", ",", "[", "]", ")", "for", "split", "in", "self", ".", "splits", "]", ")", "\n", "\n", "min_samples", "=", "min", "(", "[", "len", "(", "class_indices", ")", "for", "class_indices", "\n", "in", "all_class_indices", ".", "values", "(", ")", "]", ")", "\n", "if", "min_samples", "<", "self", ".", "_min_samples_per_class", ":", "\n", "            ", "raise", "ValueError", "(", "'The smallest number of samples in a class ({0}) '", "\n", "'is smaller than the minimum number of samples per class '", "\n", "'required by `WeightedClassSplitter` ({1}).'", ".", "format", "(", "\n", "min_samples", ",", "self", ".", "_min_samples_per_class", ")", ")", "\n", "\n", "", "for", "class_indices", "in", "all_class_indices", ".", "values", "(", ")", ":", "\n", "            ", "num_samples", "=", "(", "min_samples", "if", "self", ".", "force_equal_per_class", "\n", "else", "len", "(", "class_indices", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "                ", "seed", "=", "(", "hash", "(", "task", ")", "+", "self", ".", "random_state_seed", ")", "%", "(", "2", "**", "32", ")", "\n", "dataset_indices", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "permutation", "(", "num_samples", ")", "\n", "", "else", ":", "\n", "                ", "dataset_indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "\n", "", "ptr", "=", "0", "\n", "for", "split", ",", "weight", "in", "self", ".", "splits", ".", "items", "(", ")", ":", "\n", "                ", "num_split", "=", "max", "(", "self", ".", "min_num_samples", "[", "split", "]", ",", "int", "(", "weight", "*", "num_samples", ")", ")", "\n", "if", "self", ".", "max_num_samples", "is", "not", "None", ":", "\n", "                    ", "num_split", "=", "min", "(", "self", ".", "max_num_samples", "[", "split", "]", ",", "num_split", ")", "\n", "", "split_indices", "=", "dataset_indices", "[", "ptr", ":", "ptr", "+", "num_split", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "                    ", "self", ".", "np_random", ".", "shuffle", "(", "split_indices", ")", "\n", "", "indices", "[", "split", "]", ".", "extend", "(", "[", "class_indices", "[", "idx", "]", "for", "idx", "in", "split_indices", "]", ")", "\n", "ptr", "+=", "num_split", "\n", "\n", "", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter_.get_indices_concattask": [[332, 362], ["collections.OrderedDict", "min", "ValueError", "splitters.WeightedClassSplitter_.splits.items", "len", "len", "numpy.random.RandomState().permutation", "numpy.arange", "max", "indices[].extend", "int", "splitters.WeightedClassSplitter_.np_random.shuffle", "hash", "numpy.random.RandomState"], "methods", ["None"], ["", "def", "get_indices_concattask", "(", "self", ",", "task", ")", ":", "\n", "        ", "indices", "=", "OrderedDict", "(", "[", "(", "split", ",", "[", "]", ")", "for", "split", "in", "self", ".", "splits", "]", ")", "\n", "cum_size", "=", "0", "\n", "\n", "min_samples", "=", "min", "(", "[", "len", "(", "dataset", ")", "for", "dataset", "in", "task", ".", "datasets", "]", ")", "\n", "if", "min_samples", "<", "self", ".", "_min_samples_per_class", ":", "\n", "            ", "raise", "ValueError", "(", "'The smallest number of samples in a class ({0}) '", "\n", "'is smaller than the minimum number of samples per class '", "\n", "'required by `WeightedClassSplitter` ({1}).'", ".", "format", "(", "\n", "min_samples", ",", "self", ".", "_min_samples_per_class", ")", ")", "\n", "\n", "", "for", "dataset", "in", "task", ".", "datasets", ":", "\n", "            ", "num_samples", "=", "(", "min_samples", "if", "self", ".", "force_equal_per_class", "\n", "else", "len", "(", "dataset", ")", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "                ", "seed", "=", "(", "hash", "(", "task", ")", "+", "self", ".", "random_state_seed", ")", "%", "(", "2", "**", "32", ")", "\n", "dataset_indices", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "permutation", "(", "num_samples", ")", "\n", "", "else", ":", "\n", "                ", "dataset_indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "\n", "", "ptr", "=", "0", "\n", "for", "split", ",", "weight", "in", "self", ".", "splits", ".", "items", "(", ")", ":", "\n", "                ", "num_split", "=", "max", "(", "self", ".", "min_num_samples", ",", "int", "(", "weight", "*", "num_samples", ")", ")", "\n", "split_indices", "=", "dataset_indices", "[", "ptr", ":", "ptr", "+", "num_split", "]", "\n", "if", "self", ".", "shuffle", ":", "\n", "                    ", "self", ".", "np_random", ".", "shuffle", "(", "split_indices", ")", "\n", "", "indices", "[", "split", "]", ".", "extend", "(", "split_indices", "+", "cum_size", ")", "\n", "", "cum_size", "+=", "num_samples", "\n", "\n", "", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter": [[364, 366], ["torchmeta.transforms.utils.apply_wrapper", "splitters.ClassSplitter_"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.apply_wrapper"], ["", "", "def", "ClassSplitter", "(", "task", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "apply_wrapper", "(", "ClassSplitter_", "(", "*", "args", ",", "**", "kwargs", ")", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.WeightedClassSplitter": [[367, 369], ["torchmeta.transforms.utils.apply_wrapper", "splitters.WeightedClassSplitter_"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.utils.apply_wrapper"], ["", "def", "WeightedClassSplitter", "(", "task", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "apply_wrapper", "(", "WeightedClassSplitter_", "(", "*", "args", ",", "**", "kwargs", ")", ",", "task", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.__init__": [[51, 69], ["torchmeta.utils.data.MetaDataset.__init__", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "num_samples_per_task", ",", "num_tasks", "=", "5000", ",", "\n", "noise_std", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Harmonic", ",", "self", ")", ".", "__init__", "(", "meta_split", "=", "'train'", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "self", ".", "num_samples_per_task", "=", "num_samples_per_task", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "_domain_range", "=", "np", ".", "array", "(", "[", "-", "4.0", ",", "4.0", "]", ")", "\n", "self", ".", "_frequency_range", "=", "np", ".", "array", "(", "[", "5.0", ",", "7.0", "]", ")", "\n", "self", ".", "_phase_range", "=", "np", ".", "array", "(", "[", "0", ",", "2", "*", "np", ".", "pi", "]", ")", "\n", "\n", "self", ".", "_domains", "=", "None", "\n", "self", ".", "_frequencies", "=", "None", "\n", "self", ".", "_phases", "=", "None", "\n", "self", ".", "_amplitudes", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.domains": [[70, 76], ["harmonic.Harmonic.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "domains", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_domains", "is", "None", ":", "\n", "            ", "self", ".", "_domains", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_domain_range", "[", "0", "]", ",", "\n", "self", ".", "_domain_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_domains", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.frequencies": [[77, 83], ["harmonic.Harmonic.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "frequencies", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_frequencies", "is", "None", ":", "\n", "            ", "self", ".", "_frequencies", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_frequency_range", "[", "0", "]", ",", "\n", "self", ".", "_frequency_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_frequencies", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.phases": [[84, 90], ["harmonic.Harmonic.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "phases", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_phases", "is", "None", ":", "\n", "            ", "self", ".", "_phases", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_phase_range", "[", "0", "]", ",", "\n", "self", ".", "_phase_range", "[", "1", "]", ",", "size", "=", "(", "self", ".", "num_tasks", ",", "2", ")", ")", "\n", "", "return", "self", ".", "_phases", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.amplitudes": [[91, 96], ["harmonic.Harmonic.np_random.randn"], "methods", ["None"], ["", "@", "property", "\n", "def", "amplitudes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_amplitudes", "is", "None", ":", "\n", "            ", "self", ".", "_amplitudes", "=", "self", ".", "np_random", ".", "randn", "(", "self", ".", "num_tasks", ",", "2", ")", "\n", "", "return", "self", ".", "_amplitudes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.__len__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.Harmonic.__getitem__": [[100, 114], ["harmonic.HarmonicTask", "harmonic.Harmonic.dataset_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "domain", "=", "self", ".", "domains", "[", "index", "]", "\n", "frequency", "=", "self", ".", "frequencies", "[", "index", "]", "\n", "phases", "=", "self", ".", "phases", "[", "index", "]", "\n", "amplitudes", "=", "self", ".", "amplitudes", "[", "index", "]", "\n", "\n", "task", "=", "HarmonicTask", "(", "index", ",", "domain", ",", "frequency", ",", "phases", ",", "amplitudes", ",", "\n", "self", ".", "noise_std", ",", "self", ".", "num_samples_per_task", ",", "self", ".", "transform", ",", "\n", "self", ".", "target_transform", ",", "np_random", "=", "self", ".", "np_random", ")", "\n", "\n", "if", "self", ".", "dataset_transform", "is", "not", "None", ":", "\n", "            ", "task", "=", "self", ".", "dataset_transform", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.HarmonicTask.__init__": [[117, 142], ["torchmeta.utils.data.Task.__init__", "numpy.random.RandomState", "numpy.random.RandomState.randn", "numpy.sin", "numpy.sin", "numpy.random.RandomState.randn"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "domain", ",", "frequency", ",", "phases", ",", "amplitudes", ",", "\n", "noise_std", ",", "num_samples", ",", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "np_random", "=", "None", ")", ":", "\n", "        ", "super", "(", "HarmonicTask", ",", "self", ")", ".", "__init__", "(", "index", ",", "None", ")", "# Regression task", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "frequency", "=", "frequency", "\n", "self", ".", "phases", "=", "phases", "\n", "self", ".", "amplitudes", "=", "amplitudes", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "if", "np_random", "is", "None", ":", "\n", "            ", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "\n", "", "a_1", ",", "a_2", "=", "self", ".", "amplitudes", "\n", "b_1", ",", "b_2", "=", "self", ".", "phases", "\n", "\n", "self", ".", "_inputs", "=", "self", ".", "domain", "+", "np_random", ".", "randn", "(", "num_samples", ",", "1", ")", "\n", "self", ".", "_targets", "=", "(", "a_1", "*", "np", ".", "sin", "(", "frequency", "*", "self", ".", "_inputs", "+", "b_1", ")", "\n", "+", "a_2", "*", "np", ".", "sin", "(", "2", "*", "frequency", "*", "self", ".", "_inputs", "+", "b_2", ")", ")", "\n", "if", "(", "noise_std", "is", "not", "None", ")", "and", "(", "noise_std", ">", "0.", ")", ":", "\n", "            ", "self", ".", "_targets", "+=", "noise_std", "*", "np_random", ".", "randn", "(", "num_samples", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.HarmonicTask.__len__": [[143, 145], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.harmonic.HarmonicTask.__getitem__": [[146, 156], ["harmonic.HarmonicTask.transform", "harmonic.HarmonicTask.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", ",", "target", "=", "self", ".", "_inputs", "[", "index", "]", ",", "self", ".", "_targets", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "input", "=", "self", ".", "transform", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "input", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.Sinusoid.__init__": [[48, 64], ["torchmeta.utils.data.MetaDataset.__init__", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "num_samples_per_task", ",", "num_tasks", "=", "1000000", ",", "\n", "noise_std", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "Sinusoid", ",", "self", ")", ".", "__init__", "(", "meta_split", "=", "'train'", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "self", ".", "num_samples_per_task", "=", "num_samples_per_task", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "_input_range", "=", "np", ".", "array", "(", "[", "-", "5.0", ",", "5.0", "]", ")", "\n", "self", ".", "_amplitude_range", "=", "np", ".", "array", "(", "[", "0.1", ",", "5.0", "]", ")", "\n", "self", ".", "_phase_range", "=", "np", ".", "array", "(", "[", "0", ",", "np", ".", "pi", "]", ")", "\n", "\n", "self", ".", "_amplitudes", "=", "None", "\n", "self", ".", "_phases", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.Sinusoid.amplitudes": [[65, 71], ["sinusoid.Sinusoid.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "amplitudes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_amplitudes", "is", "None", ":", "\n", "            ", "self", ".", "_amplitudes", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_amplitude_range", "[", "0", "]", ",", "\n", "self", ".", "_amplitude_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_amplitudes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.Sinusoid.phases": [[72, 78], ["sinusoid.Sinusoid.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "phases", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_phases", "is", "None", ":", "\n", "            ", "self", ".", "_phases", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_phase_range", "[", "0", "]", ",", "\n", "self", ".", "_phase_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_phases", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.Sinusoid.__len__": [[79, 81], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.Sinusoid.__getitem__": [[82, 92], ["sinusoid.SinusoidTask", "sinusoid.Sinusoid.dataset_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "amplitude", ",", "phase", "=", "self", ".", "amplitudes", "[", "index", "]", ",", "self", ".", "phases", "[", "index", "]", "\n", "task", "=", "SinusoidTask", "(", "index", ",", "amplitude", ",", "phase", ",", "self", ".", "_input_range", ",", "\n", "self", ".", "noise_std", ",", "self", ".", "num_samples_per_task", ",", "self", ".", "transform", ",", "\n", "self", ".", "target_transform", ",", "np_random", "=", "self", ".", "np_random", ")", "\n", "\n", "if", "self", ".", "dataset_transform", "is", "not", "None", ":", "\n", "            ", "task", "=", "self", ".", "dataset_transform", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.SinusoidTask.__init__": [[95, 116], ["torchmeta.utils.data.Task.__init__", "numpy.random.RandomState.uniform", "numpy.random.RandomState", "numpy.sin", "numpy.random.RandomState.randn"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "amplitude", ",", "phase", ",", "input_range", ",", "noise_std", ",", "\n", "num_samples", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "np_random", "=", "None", ")", ":", "\n", "        ", "super", "(", "SinusoidTask", ",", "self", ")", ".", "__init__", "(", "index", ",", "None", ")", "# Regression task", "\n", "self", ".", "amplitude", "=", "amplitude", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "input_range", "=", "input_range", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "if", "np_random", "is", "None", ":", "\n", "            ", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "\n", "", "self", ".", "_inputs", "=", "np_random", ".", "uniform", "(", "input_range", "[", "0", "]", ",", "input_range", "[", "1", "]", ",", "\n", "size", "=", "(", "num_samples", ",", "1", ")", ")", "\n", "self", ".", "_targets", "=", "amplitude", "*", "np", ".", "sin", "(", "self", ".", "_inputs", "-", "phase", ")", "\n", "if", "(", "noise_std", "is", "not", "None", ")", "and", "(", "noise_std", ">", "0.", ")", ":", "\n", "            ", "self", ".", "_targets", "+=", "noise_std", "*", "np_random", ".", "randn", "(", "num_samples", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.SinusoidTask.__len__": [[117, 119], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid.SinusoidTask.__getitem__": [[120, 130], ["sinusoid.SinusoidTask.transform", "sinusoid.SinusoidTask.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", ",", "target", "=", "self", ".", "_inputs", "[", "index", "]", ",", "self", ".", "_targets", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "input", "=", "self", ".", "transform", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "input", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.__init__": [[53, 75], ["torchmeta.utils.data.MetaDataset.__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["def", "__init__", "(", "self", ",", "num_samples_per_task", ",", "num_tasks", "=", "1000000", ",", "\n", "noise_std", "=", "None", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "dataset_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "SinusoidAndLine", ",", "self", ")", ".", "__init__", "(", "meta_split", "=", "'train'", ",", "\n", "target_transform", "=", "target_transform", ",", "dataset_transform", "=", "dataset_transform", ")", "\n", "self", ".", "num_samples_per_task", "=", "num_samples_per_task", "\n", "self", ".", "num_tasks", "=", "num_tasks", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "_input_range", "=", "np", ".", "array", "(", "[", "-", "5.0", ",", "5.0", "]", ")", "\n", "self", ".", "_amplitude_range", "=", "np", ".", "array", "(", "[", "0.1", ",", "5.0", "]", ")", "\n", "self", ".", "_phase_range", "=", "np", ".", "array", "(", "[", "0", ",", "np", ".", "pi", "]", ")", "\n", "self", ".", "_slope_range", "=", "np", ".", "array", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "\n", "self", ".", "_intercept_range", "=", "np", ".", "array", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "\n", "\n", "\n", "self", ".", "_is_sinusoid", "=", "None", "\n", "self", ".", "_amplitudes", "=", "None", "\n", "self", ".", "_phases", "=", "None", "\n", "self", ".", "_slopes", "=", "None", "\n", "self", ".", "_intercepts", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.amplitudes": [[76, 82], ["sinusoid_line.SinusoidAndLine.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "amplitudes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_amplitudes", "is", "None", ":", "\n", "            ", "self", ".", "_amplitudes", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_amplitude_range", "[", "0", "]", ",", "\n", "self", ".", "_amplitude_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_amplitudes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.phases": [[83, 89], ["sinusoid_line.SinusoidAndLine.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "phases", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_phases", "is", "None", ":", "\n", "            ", "self", ".", "_phases", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_phase_range", "[", "0", "]", ",", "\n", "self", ".", "_phase_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_phases", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.slopes": [[90, 96], ["sinusoid_line.SinusoidAndLine.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "slopes", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_slopes", "is", "None", ":", "\n", "            ", "self", ".", "_slopes", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_slope_range", "[", "0", "]", ",", "\n", "self", ".", "_slope_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_slopes", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.intercepts": [[97, 103], ["sinusoid_line.SinusoidAndLine.np_random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "intercepts", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_intercepts", "is", "None", ":", "\n", "            ", "self", ".", "_intercepts", "=", "self", ".", "np_random", ".", "uniform", "(", "self", ".", "_intercept_range", "[", "0", "]", ",", "\n", "self", ".", "_intercept_range", "[", "1", "]", ",", "size", "=", "self", ".", "num_tasks", ")", "\n", "", "return", "self", ".", "_intercepts", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.is_sinusoid": [[104, 111], ["numpy.zeros", "sinusoid_line.SinusoidAndLine.np_random.shuffle"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_sinusoid", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_is_sinusoid", "is", "None", ":", "\n", "            ", "self", ".", "_is_sinusoid", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_tasks", ",", ")", ",", "dtype", "=", "np", ".", "bool_", ")", "\n", "self", ".", "_is_sinusoid", "[", "self", ".", "num_tasks", "//", "2", ":", "]", "=", "True", "\n", "self", ".", "np_random", ".", "shuffle", "(", "self", ".", "_is_sinusoid", ")", "\n", "", "return", "self", ".", "_is_sinusoid", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.__len__": [[112, 114], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.SinusoidAndLine.__getitem__": [[115, 131], ["torchmeta.toy.sinusoid.SinusoidTask", "sinusoid_line.LinearTask", "sinusoid_line.SinusoidAndLine.dataset_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "is_sinusoid", "[", "index", "]", ":", "\n", "            ", "amplitude", ",", "phase", "=", "self", ".", "amplitudes", "[", "index", "]", ",", "self", ".", "phases", "[", "index", "]", "\n", "task", "=", "SinusoidTask", "(", "index", ",", "amplitude", ",", "phase", ",", "self", ".", "_input_range", ",", "\n", "self", ".", "noise_std", ",", "self", ".", "num_samples_per_task", ",", "self", ".", "transform", ",", "\n", "self", ".", "target_transform", ",", "np_random", "=", "self", ".", "np_random", ")", "\n", "", "else", ":", "\n", "            ", "slope", ",", "intercept", "=", "self", ".", "slopes", "[", "index", "]", ",", "self", ".", "intercepts", "[", "index", "]", "\n", "task", "=", "LinearTask", "(", "index", ",", "slope", ",", "intercept", ",", "self", ".", "_input_range", ",", "\n", "self", ".", "noise_std", ",", "self", ".", "num_samples_per_task", ",", "self", ".", "transform", ",", "\n", "self", ".", "target_transform", ",", "np_random", "=", "self", ".", "np_random", ")", "\n", "\n", "", "if", "self", ".", "dataset_transform", "is", "not", "None", ":", "\n", "            ", "task", "=", "self", ".", "dataset_transform", "(", "task", ")", "\n", "\n", "", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__": [[134, 155], ["torchmeta.utils.data.Task.__init__", "numpy.random.RandomState.uniform", "numpy.random.RandomState", "numpy.random.RandomState.randn"], "methods", ["home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__init__"], ["    ", "def", "__init__", "(", "self", ",", "index", ",", "slope", ",", "intercept", ",", "input_range", ",", "noise_std", ",", "\n", "num_samples", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "np_random", "=", "None", ")", ":", "\n", "        ", "super", "(", "LinearTask", ",", "self", ")", ".", "__init__", "(", "index", ",", "None", ")", "# Regression task", "\n", "self", ".", "slope", "=", "slope", "\n", "self", ".", "intercept", "=", "intercept", "\n", "self", ".", "input_range", "=", "input_range", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "if", "np_random", "is", "None", ":", "\n", "            ", "np_random", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "\n", "", "self", ".", "_inputs", "=", "np_random", ".", "uniform", "(", "input_range", "[", "0", "]", ",", "input_range", "[", "1", "]", ",", "\n", "size", "=", "(", "num_samples", ",", "1", ")", ")", "\n", "self", ".", "_targets", "=", "intercept", "+", "slope", "*", "self", ".", "_inputs", "\n", "if", "(", "noise_std", "is", "not", "None", ")", "and", "(", "noise_std", ">", "0.", ")", ":", "\n", "            ", "self", ".", "_targets", "+=", "noise_std", "*", "np_random", ".", "randn", "(", "num_samples", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__len__": [[156, 158], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.sinusoid_line.LinearTask.__getitem__": [[159, 169], ["sinusoid_line.LinearTask.transform", "sinusoid_line.LinearTask.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "input", ",", "target", "=", "self", ".", "_inputs", "[", "index", "]", ",", "self", ".", "_targets", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "input", "=", "self", ".", "transform", "(", "input", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "(", "input", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.helpers.sinusoid": [[6, 55], ["torchmeta.toy.Sinusoid", "torchmeta.transforms.ClassSplitter", "torchmeta.transforms.ClassSplitter.seed", "warnings.warn", "ValueError"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["\n", "__all__", "=", "[", "\n", "'omniglot'", ",", "\n", "'miniimagenet'", ",", "\n", "'tieredimagenet'", ",", "\n", "'cifar_fs'", ",", "\n", "'cub'", ",", "\n", "'doublemnist'", ",", "\n", "'triplemnist'", "\n", "]", "\n", "\n", "\n", "def", "helper_with_default", "(", "klass", ",", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "\n", "test_shots", "=", "None", ",", "seed", "=", "None", ",", "defaults", "=", "{", "}", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "'num_classes_per_task'", "in", "kwargs", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Both arguments `ways` and `num_classes_per_task` were '", "\n", "'set in the helper function for the number of classes per task. '", "\n", "'Ignoring the argument `ways`.'", ",", "stacklevel", "=", "2", ")", "\n", "ways", "=", "kwargs", "[", "'num_classes_per_task'", "]", "\n", "", "if", "'transform'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'transform'", "]", "=", "defaults", ".", "get", "(", "'transform'", ",", "ToTensor", "(", ")", ")", "\n", "", "if", "'target_transform'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'target_transform'", "]", "=", "defaults", ".", "get", "(", "'target_transform'", ",", "\n", "Categorical", "(", "ways", ")", ")", "\n", "", "if", "'class_augmentations'", "not", "in", "kwargs", ":", "\n", "        ", "kwargs", "[", "'class_augmentations'", "]", "=", "defaults", ".", "get", "(", "'class_augmentations'", ",", "None", ")", "\n", "", "if", "test_shots", "is", "None", ":", "\n", "        ", "test_shots", "=", "shots", "\n", "\n", "", "dataset", "=", "klass", "(", "folder", ",", "num_classes_per_task", "=", "ways", ",", "**", "kwargs", ")", "\n", "dataset", "=", "ClassSplitter", "(", "dataset", ",", "shuffle", "=", "shuffle", ",", "\n", "num_train_per_class", "=", "shots", ",", "num_test_per_class", "=", "test_shots", ")", "\n", "dataset", ".", "seed", "(", "seed", ")", "\n", "\n", "return", "dataset", "\n", "\n", "\n", "", "def", "omniglot", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.open-air-sun_sisc.toy.helpers.harmonic": [[56, 105], ["torchmeta.toy.Harmonic", "torchmeta.transforms.ClassSplitter", "torchmeta.transforms.ClassSplitter.seed", "warnings.warn", "ValueError"], "function", ["home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.ClassSplitter", "home.repos.pwc.inspect_result.open-air-sun_sisc.transforms.splitters.Splitter.seed"], ["\n", "defaults", "=", "{", "\n", "'transform'", ":", "Compose", "(", "[", "Resize", "(", "28", ")", ",", "ToTensor", "(", ")", "]", ")", ",", "\n", "'class_augmentations'", ":", "[", "Rotation", "(", "[", "90", ",", "180", ",", "270", "]", ")", "]", "\n", "}", "\n", "\n", "return", "helper_with_default", "(", "Omniglot", ",", "folder", ",", "shots", ",", "ways", ",", "\n", "shuffle", "=", "shuffle", ",", "test_shots", "=", "test_shots", ",", "\n", "seed", "=", "seed", ",", "defaults", "=", "defaults", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "miniimagenet", "(", "folder", ",", "shots", ",", "ways", ",", "shuffle", "=", "True", ",", "test_shots", "=", "None", ",", "\n", "seed", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    "]]}