{"home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.SpeedCallback.on_train_epoch_start": [[22, 24], ["time.time"], "methods", ["None"], ["    ", "def", "on_train_epoch_start", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "        ", "self", ".", "_start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.SpeedCallback.on_train_epoch_end": [[25, 28], ["print", "time.time"], "methods", ["None"], ["", "def", "on_train_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ",", "unused", "=", "None", ")", ":", "\n", "# The reproducing the mTAN times and calibrating to our GPU shows that my GPU is 1.33 times faster", "\n", "        ", "print", "(", "f\"Took {1.34*(time.time()-self._start)/60:0.3f} minutes\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.__init__": [[31, 39], ["pytorch_lightning.LightningModule.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", "\n", "weight", "=", "torch", ".", "Tensor", "(", "(", "1.0", ",", "hparams", "[", "\"class_weight\"", "]", ")", ")", "\n", ")", "\n", "self", ".", "_hparams", "=", "hparams", "\n", "self", ".", "_all_rocs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner._prepare_batch": [[40, 46], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tt.size"], "methods", ["None"], ["", "def", "_prepare_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "x", ",", "tt", ",", "mask", ",", "y", "=", "batch", "\n", "t_elapsed", "=", "tt", "[", ":", ",", "1", ":", "]", "-", "tt", "[", ":", ",", ":", "-", "1", "]", "\n", "t_fill", "=", "torch", ".", "zeros", "(", "tt", ".", "size", "(", "0", ")", ",", "1", ",", "device", "=", "x", ".", "device", ")", "\n", "t", "=", "torch", ".", "cat", "(", "(", "t_fill", ",", "t_elapsed", ")", ",", "dim", "=", "1", ")", "\n", "return", "x", ",", "t", ",", "mask", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.training_step": [[47, 59], ["train_physio.PhysionetLearner._prepare_batch", "train_physio.PhysionetLearner.model.forward", "y_hat.view.view.view", "y.view.view.view", "train_physio.PhysionetLearner.loss_fn", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "pytorch_lightning.metrics.functional.accuracy", "train_physio.PhysionetLearner.log", "train_physio.PhysionetLearner.log", "y_hat.view.view.size", "y_hat.view.view.detach"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner._prepare_batch", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.forward"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "tt", ",", "mask", ",", "y", "=", "self", ".", "_prepare_batch", "(", "batch", ")", "\n", "\n", "y_hat", "=", "self", ".", "model", ".", "forward", "(", "x", ",", "tt", ",", "mask", ")", "\n", "y_hat", "=", "y_hat", ".", "view", "(", "-", "1", ",", "y_hat", ".", "size", "(", "-", "1", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "y_hat", ".", "detach", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "acc", "=", "accuracy", "(", "preds", ",", "y", ")", "\n", "self", ".", "log", "(", "\"train_acc\"", ",", "acc", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "log", "(", "\"train_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.validation_step": [[60, 75], ["train_physio.PhysionetLearner._prepare_batch", "train_physio.PhysionetLearner.model.forward", "y_hat.view.view.view", "y.view().long.view().long.view().long", "train_physio.PhysionetLearner.loss_fn", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "pytorch_lightning.metrics.functional.accuracy", "train_physio.PhysionetLearner.log", "train_physio.PhysionetLearner.log", "y_hat.view.view.size", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "y.view().long.view().long.view"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner._prepare_batch", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.forward"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", ",", "tt", ",", "mask", ",", "y", "=", "self", ".", "_prepare_batch", "(", "batch", ")", "\n", "\n", "y_hat", "=", "self", ".", "model", ".", "forward", "(", "x", ",", "tt", ",", "mask", ")", "\n", "y_hat", "=", "y_hat", ".", "view", "(", "-", "1", ",", "y_hat", ".", "size", "(", "-", "1", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "y_hat", ",", "y", ")", "\n", "\n", "preds", "=", "torch", ".", "argmax", "(", "y_hat", ",", "dim", "=", "1", ")", "\n", "acc", "=", "accuracy", "(", "preds", ",", "y", ")", "\n", "softmax", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "y_hat", ",", "dim", "=", "1", ")", "[", ":", ",", "1", "]", "\n", "self", ".", "log", "(", "\"val_loss\"", ",", "loss", ",", "prog_bar", "=", "True", ")", "\n", "self", ".", "log", "(", "\"val_acc\"", ",", "acc", ",", "prog_bar", "=", "True", ")", "\n", "return", "[", "softmax", ",", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.validation_epoch_end": [[76, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pytorch_lightning.metrics.functional.auroc", "train_physio.PhysionetLearner._all_rocs.append", "train_physio.PhysionetLearner.log"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "validation_step_outputs", ")", ":", "\n", "        ", "all_preds", "=", "torch", ".", "cat", "(", "[", "l", "[", "0", "]", "for", "l", "in", "validation_step_outputs", "]", ")", "\n", "all_labels", "=", "torch", ".", "cat", "(", "[", "l", "[", "1", "]", "for", "l", "in", "validation_step_outputs", "]", ")", "\n", "\n", "auc", "=", "auroc", "(", "all_preds", ",", "all_labels", ",", "pos_label", "=", "1", ")", "\n", "self", ".", "_all_rocs", ".", "append", "(", "auc", ")", "\n", "self", ".", "log", "(", "\"val_rocauc\"", ",", "auc", ",", "prog_bar", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.test_step": [[84, 87], ["train_physio.PhysionetLearner.validation_step"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.validation_step"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "# Here we just reuse the validation_step for testing", "\n", "        ", "return", "self", ".", "validation_step", "(", "batch", ",", "batch_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.test_epoch_end": [[88, 90], ["train_physio.PhysionetLearner.validation_epoch_end"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.validation_epoch_end"], ["", "def", "test_epoch_end", "(", "self", ",", "test_step_outputs", ")", ":", "\n", "        ", "return", "self", ".", "validation_epoch_end", "(", "test_step_outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.configure_optimizers": [[91, 117], ["optimizer.", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "train_physio.PhysionetLearner._hparams.keys", "train_physio.PhysionetLearner.model.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optim", "=", "\"rmsprop\"", "\n", "if", "\"optim\"", "in", "self", ".", "_hparams", ".", "keys", "(", ")", ":", "\n", "            ", "optim", "=", "self", ".", "_hparams", "[", "\"optim\"", "]", "\n", "", "optimizer", "=", "{", "\n", "\"adamw\"", ":", "torch", ".", "optim", ".", "AdamW", ",", "\n", "\"adam\"", ":", "torch", ".", "optim", ".", "Adam", ",", "\n", "\"rmsprop\"", ":", "torch", ".", "optim", ".", "RMSprop", ",", "\n", "}", "[", "optim", "]", "\n", "# optimizer = torch.optim.Adam(", "\n", "optimizer", "=", "optimizer", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "_hparams", "[", "\"base_lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "_hparams", "[", "\"weight_decay\"", "]", ",", "\n", ")", "\n", "\n", "def", "lamb_f", "(", "epoch", ")", ":", "\n", "            ", "lr", "=", "self", ".", "_hparams", "[", "\"decay_lr\"", "]", "**", "epoch", "\n", "# print(f\"LEARNING RATE = {lr:0.4g} (epoch={epoch})\")", "\n", "return", "lr", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lamb_f", ")", "\n", "# scheduler = torch.optim.lr_scheduler.LambdaLR(", "\n", "#     optimizer, lambda epoch: self._hparams[\"decay_lr\"] ** epoch", "\n", "# )", "\n", "return", "[", "optimizer", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.PhysionetLearner.optimizer_step": [[118, 133], ["optimizer.optimizer.step", "train_physio.PhysionetLearner.model.rnn_cell.apply_weight_constraints"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.apply_weight_constraints"], ["", "def", "optimizer_step", "(", "\n", "self", ",", "\n", "current_epoch", ",", "\n", "batch_nb", ",", "\n", "optimizer", ",", "\n", "optimizer_idx", ",", "\n", "closure", ",", "\n", "on_tpu", "=", "False", ",", "\n", "using_native_amp", "=", "False", ",", "\n", "using_lbfgs", "=", "False", ",", "\n", ")", ":", "\n", "        ", "optimizer", ".", "optimizer", ".", "step", "(", "closure", "=", "closure", ")", "\n", "# Apply weight constraints", "\n", "if", "self", ".", "_hparams", "[", "\"use_ltc\"", "]", ":", "\n", "            ", "self", ".", "model", ".", "rnn_cell", ".", "apply_weight_constraints", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.eval": [[135, 178], ["torch_cfc.Cfc", "train_physio.PhysionetLearner", "FakeArg", "duv_physionet.get_physio", "pytorch_lightning.Trainer", "pl.Trainer.fit", "float", "os.environ.keys", "str", "pl.Trainer.test", "train_physio.SpeedCallback"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.get_physio"], ["", "", "", "def", "eval", "(", "hparams", ",", "speed", "=", "False", ")", ":", "\n", "# torch.set_num_threads(4)", "\n", "    ", "model", "=", "Cfc", "(", "\n", "in_features", "=", "41", "*", "2", ",", "\n", "hidden_size", "=", "hparams", "[", "\"hidden_size\"", "]", ",", "\n", "out_feature", "=", "2", ",", "\n", "hparams", "=", "hparams", ",", "\n", "use_mixed", "=", "hparams", "[", "\"use_mixed\"", "]", ",", "\n", "use_ltc", "=", "hparams", "[", "\"use_ltc\"", "]", ",", "\n", ")", "\n", "learner", "=", "PhysionetLearner", "(", "model", ",", "hparams", ")", "\n", "\n", "class", "FakeArg", ":", "\n", "        ", "batch_size", "=", "32", "\n", "classif", "=", "True", "\n", "n", "=", "8000", "\n", "extrap", "=", "False", "\n", "sample_tp", "=", "None", "\n", "cut_tp", "=", "None", "\n", "\n", "", "fake_arg", "=", "FakeArg", "(", ")", "\n", "fake_arg", ".", "batch_size", "=", "hparams", "[", "\"batch_size\"", "]", "\n", "device", "=", "\"cpu\"", "\n", "data_obj", "=", "get_physio", "(", "fake_arg", ",", "device", ")", "\n", "train_loader", "=", "data_obj", "[", "\"train_dataloader\"", "]", "\n", "test_loader", "=", "data_obj", "[", "\"test_dataloader\"", "]", "\n", "\n", "gpu_name", "=", "\"cpu\"", "\n", "if", "\"CUDA_VISIBLE_DEVICES\"", "in", "os", ".", "environ", ".", "keys", "(", ")", ":", "\n", "        ", "gpu_name", "=", "str", "(", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", ")", "\n", "\n", "", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "max_epochs", "=", "hparams", "[", "\"epochs\"", "]", ",", "\n", "gradient_clip_val", "=", "hparams", "[", "\"clipnorm\"", "]", ",", "\n", "gpus", "=", "1", ",", "\n", "callbacks", "=", "[", "SpeedCallback", "(", ")", "]", "if", "speed", "else", "None", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "\n", "learner", ",", "\n", "train_loader", ",", "\n", ")", "\n", "results", "=", "trainer", ".", "test", "(", "learner", ",", "test_loader", ")", "[", "0", "]", "\n", "return", "float", "(", "results", "[", "\"val_rocauc\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_physio.score": [[292, 298], ["range", "print", "means.append", "train_physio.eval", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval"], ["def", "score", "(", "config", ",", "n", "=", "5", ")", ":", "\n", "\n", "    ", "means", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "means", ".", "append", "(", "eval", "(", "config", ",", "speed", "=", "True", ")", ")", "\n", "", "print", "(", "f\"Test AUC: {np.mean(means):0.4f} $\\\\pm$ {np.std(means):0.4f} \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LSTMCell.__init__": [[7, 16], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch_cfc.LSTMCell.init_weights"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.CfcCell.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "LSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "input_map", "=", "nn", ".", "Linear", "(", "input_size", ",", "4", "*", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "recurrent_map", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "4", "*", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LSTMCell.init_weights": [[17, 28], ["torch_cfc.LSTMCell.input_map.parameters", "torch_cfc.LSTMCell.recurrent_map.parameters", "w.dim", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "w.dim", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "w", "in", "self", ".", "input_map", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "w", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "w", ",", "-", "0.1", ",", "0.1", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "w", ")", "\n", "", "", "for", "w", "in", "self", ".", "recurrent_map", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "w", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "w", ",", "-", "0.1", ",", "0.1", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LSTMCell.forward": [[29, 44], ["z.chunk", "torch_cfc.LSTMCell.tanh", "torch_cfc.LSTMCell.sigmoid", "torch_cfc.LSTMCell.sigmoid", "torch_cfc.LSTMCell.sigmoid", "torch_cfc.LSTMCell.input_map", "torch_cfc.LSTMCell.recurrent_map", "torch_cfc.LSTMCell.tanh"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "        ", "output_state", ",", "cell_state", "=", "states", "\n", "\n", "z", "=", "self", ".", "input_map", "(", "inputs", ")", "+", "self", ".", "recurrent_map", "(", "output_state", ")", "\n", "i", ",", "ig", ",", "fg", ",", "og", "=", "z", ".", "chunk", "(", "4", ",", "1", ")", "\n", "\n", "input_activation", "=", "self", ".", "tanh", "(", "i", ")", "\n", "input_gate", "=", "self", ".", "sigmoid", "(", "ig", ")", "\n", "forget_gate", "=", "self", ".", "sigmoid", "(", "fg", "+", "1.0", ")", "\n", "output_gate", "=", "self", ".", "sigmoid", "(", "og", ")", "\n", "\n", "new_cell", "=", "cell_state", "*", "forget_gate", "+", "input_activation", "*", "input_gate", "\n", "output_state", "=", "self", ".", "tanh", "(", "new_cell", ")", "*", "output_gate", "\n", "\n", "return", "output_state", ",", "new_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LeCun.__init__": [[47, 50], ["torch.Module.__init__", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeCun", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LeCun.forward": [[51, 53], ["torch_cfc.LeCun.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1.7159", "*", "self", ".", "tanh", "(", "0.666", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.CfcCell.__init__": [[56, 108], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch_cfc.CfcCell.init_weights", "torch.Linear", "torch.Linear", "backbone_activation", "layer_list.append", "layer_list.append", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "backbone_activation", "torch_cfc.CfcCell.hparams.keys", "layer_list.append", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ValueError"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.CfcCell.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "CfcCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "_no_gate", "=", "False", "\n", "if", "\"no_gate\"", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "_no_gate", "=", "self", ".", "hparams", "[", "\"no_gate\"", "]", "\n", "", "self", ".", "_minimal", "=", "False", "\n", "if", "\"minimal\"", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "_minimal", "=", "self", ".", "hparams", "[", "\"minimal\"", "]", "\n", "\n", "", "if", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"silu\"", ":", "\n", "            ", "backbone_activation", "=", "nn", ".", "SiLU", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"relu\"", ":", "\n", "            ", "backbone_activation", "=", "nn", ".", "ReLU", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"tanh\"", ":", "\n", "            ", "backbone_activation", "=", "nn", ".", "Tanh", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"lecun\"", ":", "\n", "            ", "backbone_activation", "=", "LeCun", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown activation\"", ")", "\n", "", "layer_list", "=", "[", "\n", "nn", ".", "Linear", "(", "input_size", "+", "hidden_size", ",", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ")", ",", "\n", "backbone_activation", "(", ")", ",", "\n", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "hparams", "[", "\"backbone_layers\"", "]", ")", ":", "\n", "            ", "layer_list", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "\n", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "self", ".", "hparams", "[", "\"backbone_units\"", "]", "\n", ")", "\n", ")", "\n", "layer_list", ".", "append", "(", "backbone_activation", "(", ")", ")", "\n", "if", "\"backbone_dr\"", "in", "self", ".", "hparams", ".", "keys", "(", ")", ":", "\n", "                ", "layer_list", ".", "append", "(", "torch", ".", "nn", ".", "Dropout", "(", "self", ".", "hparams", "[", "\"backbone_dr\"", "]", ")", ")", "\n", "", "", "self", ".", "backbone", "=", "nn", ".", "Sequential", "(", "*", "layer_list", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "ff1", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "hidden_size", ")", "\n", "if", "self", ".", "_minimal", ":", "\n", "            ", "self", ".", "w_tau", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "data", "=", "torch", ".", "zeros", "(", "1", ",", "self", ".", "hidden_size", ")", ",", "requires_grad", "=", "True", "\n", ")", "\n", "self", ".", "A", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "data", "=", "torch", ".", "ones", "(", "1", ",", "self", ".", "hidden_size", ")", ",", "requires_grad", "=", "True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ff2", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "hidden_size", ")", "\n", "self", ".", "time_a", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "hidden_size", ")", "\n", "self", ".", "time_b", "=", "nn", ".", "Linear", "(", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "hidden_size", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.CfcCell.init_weights": [[109, 115], ["torch_cfc.CfcCell.hparams.get", "torch_cfc.CfcCell.parameters", "w.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "init_gain", "=", "self", ".", "hparams", ".", "get", "(", "\"init\"", ")", "\n", "if", "init_gain", "is", "not", "None", ":", "\n", "            ", "for", "w", "in", "self", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "w", ".", "dim", "(", ")", "==", "2", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "w", ",", "gain", "=", "init_gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.CfcCell.forward": [[116, 144], ["input.size", "ts.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_cfc.CfcCell.backbone", "torch_cfc.CfcCell.ff1", "torch_cfc.CfcCell.tanh", "torch_cfc.CfcCell.tanh", "torch_cfc.CfcCell.time_a", "torch_cfc.CfcCell.time_b", "torch_cfc.CfcCell.sigmoid", "torch_cfc.CfcCell.ff1", "torch_cfc.CfcCell.ff2", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "input", ",", "hx", ",", "ts", ")", ":", "\n", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "ts", "=", "ts", ".", "view", "(", "batch_size", ",", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "input", ",", "hx", "]", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "if", "self", ".", "_minimal", ":", "\n", "# Solution", "\n", "            ", "ff1", "=", "self", ".", "ff1", "(", "x", ")", "\n", "new_hidden", "=", "(", "\n", "-", "self", ".", "A", "\n", "*", "torch", ".", "exp", "(", "-", "ts", "*", "(", "torch", ".", "abs", "(", "self", ".", "w_tau", ")", "+", "torch", ".", "abs", "(", "ff1", ")", ")", ")", "\n", "*", "ff1", "\n", "+", "self", ".", "A", "\n", ")", "\n", "", "else", ":", "\n", "# Cfc", "\n", "            ", "ff1", "=", "self", ".", "tanh", "(", "self", ".", "ff1", "(", "x", ")", ")", "\n", "ff2", "=", "self", ".", "tanh", "(", "self", ".", "ff2", "(", "x", ")", ")", "\n", "t_a", "=", "self", ".", "time_a", "(", "x", ")", "\n", "t_b", "=", "self", ".", "time_b", "(", "x", ")", "\n", "t_interp", "=", "self", ".", "sigmoid", "(", "t_a", "*", "ts", "+", "t_b", ")", "\n", "if", "self", ".", "_no_gate", ":", "\n", "                ", "new_hidden", "=", "ff1", "+", "t_interp", "*", "ff2", "\n", "", "else", ":", "\n", "                ", "new_hidden", "=", "ff1", "*", "(", "1.0", "-", "t_interp", ")", "+", "t_interp", "*", "ff2", "\n", "", "", "return", "new_hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.Cfc.__init__": [[148, 172], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch_cfc.LTCCell", "torch_cfc.CfcCell", "torch_cfc.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "hidden_size", ",", "\n", "out_feature", ",", "\n", "hparams", ",", "\n", "return_sequences", "=", "False", ",", "\n", "use_mixed", "=", "False", ",", "\n", "use_ltc", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Cfc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_feature", "=", "out_feature", "\n", "self", ".", "return_sequences", "=", "return_sequences", "\n", "\n", "if", "use_ltc", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "LTCCell", "(", "in_features", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rnn_cell", "=", "CfcCell", "(", "in_features", ",", "hidden_size", ",", "hparams", ")", "\n", "", "self", ".", "use_mixed", "=", "use_mixed", "\n", "if", "self", ".", "use_mixed", ":", "\n", "            ", "self", ".", "lstm", "=", "LSTMCell", "(", "in_features", ",", "hidden_size", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "out_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.Cfc.forward": [[173, 234], ["x.size", "x.size", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "timespans[].squeeze", "torch_cfc.Cfc.rnn_cell.forward", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch_cfc.Cfc.lstm", "torch.max", "torch.max", "torch.max", "torch.max", "cur_mask.view.view.view", "torch_cfc.Cfc.fc", "output_sequence.append", "torch_cfc.Cfc.fc", "mask.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_cfc.Cfc.fc", "mask.size", "timespans[].squeeze.view"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "timespans", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "device", "=", "x", ".", "device", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "seq_len", "=", "x", ".", "size", "(", "1", ")", "\n", "true_in_features", "=", "x", ".", "size", "(", "2", ")", "\n", "h_state", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "device", ")", "\n", "if", "self", ".", "use_mixed", ":", "\n", "            ", "c_state", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "hidden_size", ")", ",", "device", "=", "device", ")", "\n", "", "output_sequence", "=", "[", "]", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "forwarded_output", "=", "torch", ".", "zeros", "(", "\n", "(", "batch_size", ",", "self", ".", "out_feature", ")", ",", "device", "=", "device", "\n", ")", "\n", "forwarded_input", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "true_in_features", ")", ",", "device", "=", "device", ")", "\n", "time_since_update", "=", "torch", ".", "zeros", "(", "\n", "(", "batch_size", ",", "true_in_features", ")", ",", "device", "=", "device", "\n", ")", "\n", "", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "inputs", "=", "x", "[", ":", ",", "t", "]", "\n", "ts", "=", "timespans", "[", ":", ",", "t", "]", ".", "squeeze", "(", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "if", "mask", ".", "size", "(", "-", "1", ")", "==", "true_in_features", ":", "\n", "                    ", "forwarded_input", "=", "(", "\n", "mask", "[", ":", ",", "t", "]", "*", "inputs", "+", "(", "1", "-", "mask", "[", ":", ",", "t", "]", ")", "*", "forwarded_input", "\n", ")", "\n", "time_since_update", "=", "(", "ts", ".", "view", "(", "batch_size", ",", "1", ")", "+", "time_since_update", ")", "*", "(", "\n", "1", "-", "mask", "[", ":", ",", "t", "]", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "forwarded_input", "=", "inputs", "\n", "", "if", "(", "\n", "true_in_features", "*", "2", "<", "self", ".", "in_features", "\n", "and", "mask", ".", "size", "(", "-", "1", ")", "==", "true_in_features", "\n", ")", ":", "\n", "# we have 3x in-features", "\n", "                    ", "inputs", "=", "torch", ".", "cat", "(", "\n", "(", "forwarded_input", ",", "time_since_update", ",", "mask", "[", ":", ",", "t", "]", ")", ",", "dim", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "# we have 2x in-feature", "\n", "                    ", "inputs", "=", "torch", ".", "cat", "(", "(", "forwarded_input", ",", "mask", "[", ":", ",", "t", "]", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "self", ".", "use_mixed", ":", "\n", "                ", "h_state", ",", "c_state", "=", "self", ".", "lstm", "(", "inputs", ",", "(", "h_state", ",", "c_state", ")", ")", "\n", "", "h_state", "=", "self", ".", "rnn_cell", ".", "forward", "(", "inputs", ",", "h_state", ",", "ts", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "cur_mask", ",", "_", "=", "torch", ".", "max", "(", "mask", "[", ":", ",", "t", "]", ",", "dim", "=", "1", ")", "\n", "cur_mask", "=", "cur_mask", ".", "view", "(", "batch_size", ",", "1", ")", "\n", "current_output", "=", "self", ".", "fc", "(", "h_state", ")", "\n", "forwarded_output", "=", "(", "\n", "cur_mask", "*", "current_output", "+", "(", "1.0", "-", "cur_mask", ")", "*", "forwarded_output", "\n", ")", "\n", "", "if", "self", ".", "return_sequences", ":", "\n", "                ", "output_sequence", ".", "append", "(", "self", ".", "fc", "(", "h_state", ")", ")", "\n", "\n", "", "", "if", "self", ".", "return_sequences", ":", "\n", "            ", "readout", "=", "torch", ".", "stack", "(", "output_sequence", ",", "dim", "=", "1", ")", "\n", "", "elif", "mask", "is", "not", "None", ":", "\n", "            ", "readout", "=", "forwarded_output", "\n", "", "else", ":", "\n", "            ", "readout", "=", "self", ".", "fc", "(", "h_state", ")", "\n", "", "return", "readout", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.__init__": [[237, 263], ["torch.Module.__init__", "torch.Identity", "torch.Identity", "torch_cfc.LTCCell._allocate_parameters"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._allocate_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ",", "\n", "units", ",", "\n", "ode_unfolds", "=", "6", ",", "\n", "epsilon", "=", "1e-8", ",", "\n", ")", ":", "\n", "        ", "super", "(", "LTCCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "units", "=", "units", "\n", "self", ".", "_init_ranges", "=", "{", "\n", "\"gleak\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"vleak\"", ":", "(", "-", "0.2", ",", "0.2", ")", ",", "\n", "\"cm\"", ":", "(", "0.4", ",", "0.6", ")", ",", "\n", "\"w\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"sigma\"", ":", "(", "3", ",", "8", ")", ",", "\n", "\"mu\"", ":", "(", "0.3", ",", "0.8", ")", ",", "\n", "\"sensory_w\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"sensory_sigma\"", ":", "(", "3", ",", "8", ")", ",", "\n", "\"sensory_mu\"", ":", "(", "0.3", ",", "0.8", ")", ",", "\n", "}", "\n", "self", ".", "_ode_unfolds", "=", "ode_unfolds", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "# self.softplus = nn.Softplus()", "\n", "self", ".", "softplus", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "_allocate_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.state_size": [[264, 267], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "units", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.sensory_size": [[268, 271], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensory_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "in_features", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight": [[272, 276], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch_cfc.LTCCell.register_parameter"], "methods", ["None"], ["", "def", "add_weight", "(", "self", ",", "name", ",", "init_value", ")", ":", "\n", "        ", "param", "=", "torch", ".", "nn", ".", "Parameter", "(", "init_value", ")", "\n", "self", ".", "register_parameter", "(", "name", ",", "param", ")", "\n", "return", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value": [[277, 283], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "_get_init_value", "(", "self", ",", "shape", ",", "param_name", ")", ":", "\n", "        ", "minval", ",", "maxval", "=", "self", ".", "_init_ranges", "[", "param_name", "]", "\n", "if", "minval", "==", "maxval", ":", "\n", "            ", "return", "torch", ".", "ones", "(", "shape", ")", "*", "minval", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "rand", "(", "*", "shape", ")", "*", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._erev_initializer": [[284, 286], ["numpy.random.default_rng().choice", "numpy.random.default_rng"], "methods", ["None"], ["", "", "def", "_erev_initializer", "(", "self", ",", "shape", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "default_rng", "(", ")", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "size", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._allocate_parameters": [[287, 350], ["torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell.add_weight", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch_cfc.LTCCell._get_init_value", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch_cfc.LTCCell._erev_initializer", "torch_cfc.LTCCell._erev_initializer"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._get_init_value", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._erev_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._erev_initializer"], ["", "def", "_allocate_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "_params", "=", "{", "}", "\n", "self", ".", "_params", "[", "\"gleak\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"gleak\"", ",", "init_value", "=", "self", ".", "_get_init_value", "(", "(", "self", ".", "state_size", ",", ")", ",", "\"gleak\"", ")", "\n", ")", "\n", "self", ".", "_params", "[", "\"vleak\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"vleak\"", ",", "init_value", "=", "self", ".", "_get_init_value", "(", "(", "self", ".", "state_size", ",", ")", ",", "\"vleak\"", ")", "\n", ")", "\n", "self", ".", "_params", "[", "\"cm\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"cm\"", ",", "init_value", "=", "self", ".", "_get_init_value", "(", "(", "self", ".", "state_size", ",", ")", ",", "\"cm\"", ")", "\n", ")", "\n", "self", ".", "_params", "[", "\"sigma\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sigma\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "\n", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\"sigma\"", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"mu\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"mu\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\"mu\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"w\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\"w\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"erev\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"erev\"", ",", "\n", "init_value", "=", "torch", ".", "Tensor", "(", "\n", "self", ".", "_erev_initializer", "(", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ")", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_sigma\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_sigma\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "\n", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\"sensory_sigma\"", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_mu\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_mu\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "\n", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\"sensory_mu\"", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_w\"", ",", "\n", "init_value", "=", "self", ".", "_get_init_value", "(", "\n", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\"sensory_w\"", "\n", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_erev\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_erev\"", ",", "\n", "init_value", "=", "torch", ".", "Tensor", "(", "\n", "self", ".", "_erev_initializer", "(", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ")", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_params", "[", "\"input_w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"input_w\"", ",", "\n", "init_value", "=", "torch", ".", "ones", "(", "(", "self", ".", "sensory_size", ",", ")", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"input_b\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"input_b\"", ",", "\n", "init_value", "=", "torch", ".", "zeros", "(", "(", "self", ".", "sensory_size", ",", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._sigmoid": [[353, 358], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "_sigmoid", "(", "self", ",", "v_pre", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "v_pre", "=", "torch", ".", "unsqueeze", "(", "v_pre", ",", "-", "1", ")", "# For broadcasting", "\n", "mues", "=", "v_pre", "-", "mu", "\n", "x", "=", "sigma", "*", "mues", "\n", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._ode_solver": [[359, 402], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "torch_cfc.LTCCell.softplus", "torch_cfc.LTCCell._sigmoid", "torch_cfc.LTCCell.softplus().view", "torch.any", "torch.any", "torch.any", "torch.any", "torch_cfc.LTCCell.softplus", "torch_cfc.LTCCell._sigmoid", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "breakpoint", "torch_cfc.LTCCell.softplus", "torch_cfc.LTCCell.softplus", "torch_cfc.LTCCell.softplus"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._sigmoid", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._sigmoid"], ["", "def", "_ode_solver", "(", "self", ",", "inputs", ",", "state", ",", "elapsed_time", ")", ":", "\n", "        ", "v_pre", "=", "state", "\n", "\n", "# We can pre-compute the effects of the sensory neurons here", "\n", "sensory_w_activation", "=", "self", ".", "softplus", "(", "self", ".", "_params", "[", "\"sensory_w\"", "]", ")", "*", "self", ".", "_sigmoid", "(", "\n", "inputs", ",", "self", ".", "_params", "[", "\"sensory_mu\"", "]", ",", "self", ".", "_params", "[", "\"sensory_sigma\"", "]", "\n", ")", "\n", "\n", "sensory_rev_activation", "=", "sensory_w_activation", "*", "self", ".", "_params", "[", "\"sensory_erev\"", "]", "\n", "\n", "# Reduce over dimension 1 (=source sensory neurons)", "\n", "w_numerator_sensory", "=", "torch", ".", "sum", "(", "sensory_rev_activation", ",", "dim", "=", "1", ")", "\n", "w_denominator_sensory", "=", "torch", ".", "sum", "(", "sensory_w_activation", ",", "dim", "=", "1", ")", "\n", "\n", "# cm/t is loop invariant", "\n", "cm_t", "=", "self", ".", "softplus", "(", "self", ".", "_params", "[", "\"cm\"", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "/", "(", "\n", "(", "elapsed_time", "+", "1", ")", "/", "self", ".", "_ode_unfolds", "\n", ")", "\n", "\n", "# Unfold the multiply ODE multiple times into one RNN step", "\n", "for", "t", "in", "range", "(", "self", ".", "_ode_unfolds", ")", ":", "\n", "            ", "w_activation", "=", "self", ".", "softplus", "(", "self", ".", "_params", "[", "\"w\"", "]", ")", "*", "self", ".", "_sigmoid", "(", "\n", "v_pre", ",", "self", ".", "_params", "[", "\"mu\"", "]", ",", "self", ".", "_params", "[", "\"sigma\"", "]", "\n", ")", "\n", "\n", "rev_activation", "=", "w_activation", "*", "self", ".", "_params", "[", "\"erev\"", "]", "\n", "\n", "# Reduce over dimension 1 (=source neurons)", "\n", "w_numerator", "=", "torch", ".", "sum", "(", "rev_activation", ",", "dim", "=", "1", ")", "+", "w_numerator_sensory", "\n", "w_denominator", "=", "torch", ".", "sum", "(", "w_activation", ",", "dim", "=", "1", ")", "+", "w_denominator_sensory", "\n", "\n", "numerator", "=", "(", "\n", "cm_t", "*", "v_pre", "\n", "+", "self", ".", "softplus", "(", "self", ".", "_params", "[", "\"gleak\"", "]", ")", "*", "self", ".", "_params", "[", "\"vleak\"", "]", "\n", "+", "w_numerator", "\n", ")", "\n", "denominator", "=", "cm_t", "+", "self", ".", "softplus", "(", "self", ".", "_params", "[", "\"gleak\"", "]", ")", "+", "w_denominator", "\n", "\n", "# Avoid dividing by 0", "\n", "v_pre", "=", "numerator", "/", "(", "denominator", "+", "self", ".", "_epsilon", ")", "\n", "if", "torch", ".", "any", "(", "torch", ".", "isnan", "(", "v_pre", ")", ")", ":", "\n", "                ", "breakpoint", "(", ")", "\n", "", "", "return", "v_pre", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._map_inputs": [[403, 407], ["None"], "methods", ["None"], ["", "def", "_map_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "inputs", "*", "self", ".", "_params", "[", "\"input_w\"", "]", "\n", "inputs", "=", "inputs", "+", "self", ".", "_params", "[", "\"input_b\"", "]", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._map_outputs": [[408, 413], ["None"], "methods", ["None"], ["", "def", "_map_outputs", "(", "self", ",", "state", ")", ":", "\n", "        ", "output", "=", "state", "\n", "output", "=", "output", "*", "self", ".", "_params", "[", "\"output_w\"", "]", "\n", "output", "=", "output", "+", "self", ".", "_params", "[", "\"output_b\"", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._clip": [[414, 416], ["torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["None"], ["", "def", "_clip", "(", "self", ",", "w", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ReLU", "(", ")", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.apply_weight_constraints": [[417, 422], ["torch_cfc.LTCCell._clip", "torch_cfc.LTCCell._clip", "torch_cfc.LTCCell._clip", "torch_cfc.LTCCell._clip"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._clip", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._clip", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._clip", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell._clip"], ["", "def", "apply_weight_constraints", "(", "self", ")", ":", "\n", "        ", "self", ".", "_params", "[", "\"w\"", "]", ".", "data", "=", "self", ".", "_clip", "(", "self", ".", "_params", "[", "\"w\"", "]", ".", "data", ")", "\n", "self", ".", "_params", "[", "\"sensory_w\"", "]", ".", "data", "=", "self", ".", "_clip", "(", "self", ".", "_params", "[", "\"sensory_w\"", "]", ".", "data", ")", "\n", "self", ".", "_params", "[", "\"cm\"", "]", ".", "data", "=", "self", ".", "_clip", "(", "self", ".", "_params", "[", "\"cm\"", "]", ".", "data", ")", "\n", "self", ".", "_params", "[", "\"gleak\"", "]", ".", "data", "=", "self", ".", "_clip", "(", "self", ".", "_params", "[", "\"gleak\"", "]", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.forward": [[423, 433], ["ts.view.view.view", "torch_cfc.LTCCell._map_inputs", "torch_cfc.LTCCell._ode_solver"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._map_inputs", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._ode_solver"], ["", "def", "forward", "(", "self", ",", "input", ",", "hx", ",", "ts", ")", ":", "\n", "# Regularly sampled mode (elapsed time = 1 second)", "\n", "        ", "ts", "=", "ts", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "inputs", "=", "self", ".", "_map_inputs", "(", "input", ")", "\n", "\n", "next_state", "=", "self", ".", "_ode_solver", "(", "inputs", ",", "hx", ",", "ts", ")", "\n", "\n", "# outputs = self._map_outputs(next_state)", "\n", "\n", "return", "next_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_xor.eval": [[16, 73], ["irregular_sampled_datasets.XORData", "config.get", "tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.layers.RNN", "tensorflow.keras.layers.Dense", "tf.keras.layers.RNN.", "tf.keras.layers.Dense.", "tensorflow.keras.Model", "tensorflow.keras.optimizers.schedules.ExponentialDecay", "opt", "tf.keras.Model.compile", "tf.keras.Model.fit", "tf.keras.Model.evaluate", "tf_cfc.LTCCell", "tf_cfc.MixedCfcCell", "tf_cfc.CfcCell", "tensorflow.keras.losses.BinaryCrossentropy", "tensorflow.keras.metrics.BinaryAccuracy"], "function", ["None"], ["def", "eval", "(", "config", ",", "index_arg", ",", "verbose", "=", "0", ")", ":", "\n", "    ", "data", "=", "XORData", "(", "time_major", "=", "False", ",", "event_based", "=", "True", ",", "pad_size", "=", "32", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"use_ltc\"", ")", ":", "\n", "        ", "cell", "=", "LTCCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "ode_unfolds", "=", "6", ")", "\n", "", "elif", "config", "[", "\"use_mixed\"", "]", ":", "\n", "        ", "cell", "=", "MixedCfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "CfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "\n", "", "pixel_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "pad_size", ",", "1", ")", ",", "name", "=", "\"input\"", ")", "\n", "time_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "pad_size", ",", "1", ")", ",", "name", "=", "\"time\"", ")", "\n", "mask_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "pad_size", ",", ")", ",", "dtype", "=", "tf", ".", "bool", ",", "name", "=", "\"mask\"", ")", "\n", "\n", "rnn", "=", "tf", ".", "keras", ".", "layers", ".", "RNN", "(", "cell", ",", "time_major", "=", "False", ",", "return_sequences", "=", "False", ")", "\n", "dense_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ")", "\n", "\n", "output_states", "=", "rnn", "(", "(", "pixel_input", ",", "time_input", ")", ",", "mask", "=", "mask_input", ")", "\n", "y", "=", "dense_layer", "(", "output_states", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "pixel_input", ",", "time_input", ",", "mask_input", "]", ",", "outputs", "=", "[", "y", "]", ")", "\n", "\n", "base_lr", "=", "config", "[", "\"base_lr\"", "]", "\n", "decay_lr", "=", "config", "[", "\"decay_lr\"", "]", "\n", "# end_lr = config[\"end_lr\"]", "\n", "train_steps", "=", "data", ".", "train_events", ".", "shape", "[", "0", "]", "//", "config", "[", "\"batch_size\"", "]", "\n", "learning_rate_fn", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "ExponentialDecay", "(", "\n", "base_lr", ",", "train_steps", ",", "decay_lr", "\n", ")", "\n", "opt", "=", "(", "\n", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "\n", "if", "config", "[", "\"optimizer\"", "]", "==", "\"adam\"", "\n", "else", "tf", ".", "keras", ".", "optimizers", ".", "RMSprop", "\n", ")", "\n", "optimizer", "=", "opt", "(", "learning_rate_fn", ",", "clipnorm", "=", "config", "[", "\"clipnorm\"", "]", ")", "\n", "model", ".", "compile", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "BinaryCrossentropy", "(", "from_logits", "=", "True", ")", ",", "\n", "metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "BinaryAccuracy", "(", "threshold", "=", "0.0", ")", "]", ",", "\n", ")", "\n", "# model.summary()", "\n", "\n", "# Fit model", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "(", "data", ".", "train_events", ",", "data", ".", "train_elapsed", ",", "data", ".", "train_mask", ")", ",", "\n", "y", "=", "data", ".", "train_y", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "epochs", "=", "config", "[", "\"epochs\"", "]", ",", "\n", "verbose", "=", "0", ",", "\n", ")", "\n", "# Evaluate model after training", "\n", "_", ",", "best_test_acc", "=", "model", ".", "evaluate", "(", "\n", "x", "=", "(", "data", ".", "test_events", ",", "data", ".", "test_elapsed", ",", "data", ".", "test_mask", ")", ",", "\n", "y", "=", "data", ".", "test_y", ",", "\n", "verbose", "=", "2", ",", "\n", ")", "\n", "return", "best_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_xor.score": [[170, 176], ["range", "acc.append", "print", "train_xor.eval", "len", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval"], ["def", "score", "(", "config", ")", ":", "\n", "    ", "acc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "acc", ".", "append", "(", "100", "*", "eval", "(", "config", ",", "i", ")", ")", "\n", "print", "(", "\n", "f\"Accuracy [n={len(acc)}]: {np.mean(acc):0.2f}\\\\% $\\\\pm$ {np.std(acc):0.2f}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.CfcCell.__init__": [[13, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "units", ",", "hparams", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CfcCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "units", "=", "units", "\n", "self", ".", "state_size", "=", "units", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "_no_gate", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.CfcCell.build": [[20, 104], ["isinstance", "range", "tensorflow.keras.models.Sequential", "tf_cfc.CfcCell.backbone.append", "tf_cfc.CfcCell.backbone.append", "tensorflow.keras.layers.Dense", "tf_cfc.CfcCell.add_weight", "tf_cfc.CfcCell.add_weight", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.regularizers.L2", "tensorflow.keras.initializers.Zeros", "tensorflow.keras.initializers.Ones", "tensorflow.keras.regularizers.L2", "tensorflow.keras.regularizers.L2", "tensorflow.keras.regularizers.L2", "tensorflow.keras.regularizers.L2", "tensorflow.keras.regularizers.L2", "ValueError"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "tuple", ")", ":", "\n", "# Nested tuple", "\n", "            ", "input_dim", "=", "input_shape", "[", "0", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"silu\"", ":", "\n", "            ", "backbone_activation", "=", "tf", ".", "nn", ".", "silu", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"relu\"", ":", "\n", "            ", "backbone_activation", "=", "tf", ".", "nn", ".", "relu", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"tanh\"", ":", "\n", "            ", "backbone_activation", "=", "tf", ".", "nn", ".", "tanh", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"lecun\"", ":", "\n", "            ", "backbone_activation", "=", "lecun_tanh", "\n", "", "elif", "self", ".", "hparams", "[", "\"backbone_activation\"", "]", "==", "\"softplus\"", ":", "\n", "            ", "backbone_activation", "=", "tf", ".", "nn", ".", "softplus", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown backbone activation\"", ")", "\n", "\n", "", "self", ".", "_no_gate", "=", "False", "\n", "if", "\"no_gate\"", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "_no_gate", "=", "self", ".", "hparams", "[", "\"no_gate\"", "]", "\n", "", "self", ".", "_minimal", "=", "False", "\n", "if", "\"minimal\"", "in", "self", ".", "hparams", ":", "\n", "            ", "self", ".", "_minimal", "=", "self", ".", "hparams", "[", "\"minimal\"", "]", "\n", "\n", "", "self", ".", "backbone", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "hparams", "[", "\"backbone_layers\"", "]", ")", ":", "\n", "\n", "            ", "self", ".", "backbone", ".", "append", "(", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "hparams", "[", "\"backbone_units\"", "]", ",", "\n", "backbone_activation", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "self", ".", "backbone", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "self", ".", "hparams", "[", "\"backbone_dr\"", "]", ")", ")", "\n", "\n", "", "self", ".", "backbone", "=", "tf", ".", "keras", ".", "models", ".", "Sequential", "(", "self", ".", "backbone", ")", "\n", "\n", "if", "self", ".", "_minimal", ":", "\n", "            ", "self", ".", "ff1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "units", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "w_tau", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "1", ",", "self", ".", "units", ")", ",", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Zeros", "(", ")", "\n", ")", "\n", "self", ".", "A", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "1", ",", "self", ".", "units", ")", ",", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Ones", "(", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ff1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "units", ",", "\n", "lecun_tanh", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "ff2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "units", ",", "\n", "lecun_tanh", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "time_a", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "units", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "time_b", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "\n", "self", ".", "units", ",", "\n", "kernel_regularizer", "=", "tf", ".", "keras", ".", "regularizers", ".", "L2", "(", "\n", "self", ".", "hparams", "[", "\"weight_decay\"", "]", "\n", ")", ",", "\n", ")", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.CfcCell.call": [[105, 136], ["tf_cfc.CfcCell.backbone", "tf_cfc.CfcCell.ff1", "tensorflow.reshape", "tensorflow.keras.layers.Concatenate", "tf_cfc.CfcCell.ff2", "tf_cfc.CfcCell.time_a", "tf_cfc.CfcCell.time_b", "tensorflow.nn.sigmoid", "isinstance", "isinstance", "len", "tensorflow.math.exp", "tensorflow.math.abs", "tensorflow.math.abs"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ",", "**", "kwargs", ")", ":", "\n", "        ", "hidden_state", "=", "states", "[", "0", "]", "\n", "t", "=", "1.0", "\n", "if", "(", "isinstance", "(", "inputs", ",", "tuple", ")", "or", "isinstance", "(", "inputs", ",", "list", ")", ")", "and", "len", "(", "inputs", ")", ">", "1", ":", "\n", "            ", "elapsed", "=", "inputs", "[", "1", "]", "\n", "t", "=", "tf", ".", "reshape", "(", "elapsed", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "inputs", "=", "inputs", "[", "0", "]", "\n", "\n", "", "x", "=", "tf", ".", "keras", ".", "layers", ".", "Concatenate", "(", ")", "(", "[", "inputs", ",", "hidden_state", "]", ")", "\n", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "ff1", "=", "self", ".", "ff1", "(", "x", ")", "\n", "if", "self", ".", "_minimal", ":", "\n", "# Solution", "\n", "            ", "new_hidden", "=", "(", "\n", "-", "self", ".", "A", "\n", "*", "tf", ".", "math", ".", "exp", "(", "-", "t", "*", "(", "tf", ".", "math", ".", "abs", "(", "self", ".", "w_tau", ")", "+", "tf", ".", "math", ".", "abs", "(", "ff1", ")", ")", ")", "\n", "*", "ff1", "\n", "+", "self", ".", "A", "\n", ")", "\n", "", "else", ":", "\n", "# Cfc", "\n", "            ", "ff2", "=", "self", ".", "ff2", "(", "x", ")", "\n", "t_a", "=", "self", ".", "time_a", "(", "x", ")", "\n", "t_b", "=", "self", ".", "time_b", "(", "x", ")", "\n", "t_interp", "=", "tf", ".", "nn", ".", "sigmoid", "(", "-", "t_a", "*", "t", "+", "t_b", ")", "\n", "if", "self", ".", "_no_gate", ":", "\n", "                ", "new_hidden", "=", "ff1", "+", "t_interp", "*", "ff2", "\n", "", "else", ":", "\n", "                ", "new_hidden", "=", "ff1", "*", "(", "1.0", "-", "t_interp", ")", "+", "t_interp", "*", "ff2", "\n", "\n", "", "", "return", "new_hidden", ",", "[", "new_hidden", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.MixedCfcCell.__init__": [[139, 149], ["tf_cfc.CfcCell", "super().__init__", "hparams.keys"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "units", ",", "hparams", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "units", "=", "units", "\n", "self", ".", "state_size", "=", "(", "units", ",", "units", ")", "\n", "self", ".", "initializer", "=", "\"glorot_uniform\"", "\n", "self", ".", "recurrent_initializer", "=", "\"orthogonal\"", "\n", "self", ".", "forget_gate_bias", "=", "1", "\n", "if", "\"forget_bias\"", "in", "hparams", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "forget_gate_bias", "=", "hparams", "[", "\"forget_bias\"", "]", "\n", "", "self", ".", "cfc", "=", "CfcCell", "(", "self", ".", "units", ",", "hparams", ")", "\n", "super", "(", "MixedCfcCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.MixedCfcCell.get_initial_state": [[150, 154], ["tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["", "def", "get_initial_state", "(", "self", ",", "inputs", "=", "None", ",", "batch_size", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "return", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "units", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "units", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.MixedCfcCell.build": [[156, 180], ["isinstance", "tf_cfc.MixedCfcCell.cfc.build", "tf_cfc.MixedCfcCell.add_weight", "tf_cfc.MixedCfcCell.add_weight", "tf_cfc.MixedCfcCell.add_weight", "tensorflow.keras.initializers.Zeros"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.build", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "tuple", ")", ":", "\n", "# Nested tuple", "\n", "            ", "input_dim", "=", "input_shape", "[", "0", "]", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "cfc", ".", "build", "(", "input_shape", ")", "\n", "self", ".", "input_kernel", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "input_dim", ",", "4", "*", "self", ".", "units", ")", ",", "\n", "initializer", "=", "self", ".", "initializer", ",", "\n", "name", "=", "\"input_kernel\"", ",", "\n", ")", "\n", "self", ".", "recurrent_kernel", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "units", ",", "4", "*", "self", ".", "units", ")", ",", "\n", "initializer", "=", "self", ".", "recurrent_initializer", ",", "\n", "name", "=", "\"recurrent_kernel\"", ",", "\n", ")", "\n", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "4", "*", "self", ".", "units", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Zeros", "(", ")", ",", "\n", "name", "=", "\"bias\"", ",", "\n", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.MixedCfcCell.call": [[181, 208], ["tensorflow.zeros", "tensorflow.split", "tensorflow.nn.tanh", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tf_cfc.MixedCfcCell.cfc", "tensorflow.nn.tanh", "isinstance", "isinstance", "len", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ",", "**", "kwargs", ")", ":", "\n", "        ", "cell_state", ",", "ode_state", "=", "states", "\n", "elapsed", "=", "tf", ".", "zeros", "(", "(", "1", ",", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "(", "isinstance", "(", "inputs", ",", "tuple", ")", "or", "isinstance", "(", "inputs", ",", "list", ")", ")", "and", "len", "(", "inputs", ")", ">", "1", ":", "\n", "            ", "elapsed", "=", "inputs", "[", "1", "]", "\n", "inputs", "=", "inputs", "[", "0", "]", "\n", "\n", "", "z", "=", "(", "\n", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "input_kernel", ")", "\n", "+", "tf", ".", "matmul", "(", "ode_state", ",", "self", ".", "recurrent_kernel", ")", "\n", "+", "self", ".", "bias", "\n", ")", "\n", "i", ",", "ig", ",", "fg", ",", "og", "=", "tf", ".", "split", "(", "z", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "\n", "input_activation", "=", "tf", ".", "nn", ".", "tanh", "(", "i", ")", "\n", "input_gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "ig", ")", "\n", "forget_gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "fg", "+", "self", ".", "forget_gate_bias", ")", "\n", "output_gate", "=", "tf", ".", "nn", ".", "sigmoid", "(", "og", ")", "\n", "\n", "new_cell", "=", "cell_state", "*", "forget_gate", "+", "input_activation", "*", "input_gate", "\n", "ode_input", "=", "tf", ".", "nn", ".", "tanh", "(", "new_cell", ")", "*", "output_gate", "# LSTM output = ODE input", "\n", "\n", "# Implementation choice on how to parametrize ODE component", "\n", "ode_output", ",", "new_ode_state", "=", "self", ".", "cfc", "(", "[", "ode_input", ",", "elapsed", "]", ",", "[", "ode_state", "]", ")", "\n", "# ode_output, new_ode_state = self.ctrnn.call([ode_input, elapsed], [ode_input])", "\n", "\n", "return", "ode_output", ",", "[", "new_cell", ",", "new_ode_state", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.__init__": [[211, 229], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "units", ",", "ode_unfolds", "=", "3", ",", "epsilon", "=", "1e-8", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "units", "=", "units", "\n", "self", ".", "_init_ranges", "=", "{", "\n", "\"gleak\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"vleak\"", ":", "(", "-", "0.2", ",", "0.2", ")", ",", "\n", "\"cm\"", ":", "(", "0.4", ",", "0.6", ")", ",", "\n", "\"w\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"sigma\"", ":", "(", "3", ",", "8", ")", ",", "\n", "\"mu\"", ":", "(", "0.3", ",", "0.8", ")", ",", "\n", "\"sensory_w\"", ":", "(", "0.001", ",", "1.0", ")", ",", "\n", "\"sensory_sigma\"", ":", "(", "3", ",", "8", ")", ",", "\n", "\"sensory_mu\"", ":", "(", "0.3", ",", "0.8", ")", ",", "\n", "}", "\n", "\n", "self", ".", "_ode_unfolds", "=", "ode_unfolds", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "super", "(", "LTCCell", ",", "self", ")", ".", "__init__", "(", "name", "=", "\"ltc_cell\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.state_size": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "units", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.sensory_size": [[234, 237], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sensory_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "input_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer": [[238, 244], ["tensorflow.keras.initializers.Constant", "tensorflow.keras.initializers.RandomUniform"], "methods", ["None"], ["", "def", "_get_initializer", "(", "self", ",", "param_name", ")", ":", "\n", "        ", "minval", ",", "maxval", "=", "self", ".", "_init_ranges", "[", "param_name", "]", "\n", "if", "minval", "==", "maxval", ":", "\n", "            ", "return", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "minval", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "minval", ",", "maxval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._erev_initializer": [[245, 247], ["numpy.random.default_rng().choice", "numpy.random.default_rng"], "methods", ["None"], ["", "", "def", "_erev_initializer", "(", "self", ",", "shape", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "default_rng", "(", ")", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ",", "size", "=", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.build": [[248, 355], ["isinstance", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tf_cfc.LTCCell.add_weight", "tensorflow.keras.constraints.NonNeg", "tf_cfc.LTCCell._get_initializer", "tf_cfc.LTCCell._get_initializer", "tensorflow.keras.constraints.NonNeg", "tf_cfc.LTCCell._get_initializer", "tf_cfc.LTCCell._get_initializer", "tf_cfc.LTCCell._get_initializer", "tensorflow.keras.constraints.NonNeg", "tf_cfc.LTCCell._get_initializer", "tf_cfc.LTCCell._get_initializer", "tf_cfc.LTCCell._get_initializer", "tensorflow.keras.constraints.NonNeg", "tf_cfc.LTCCell._get_initializer", "tensorflow.keras.initializers.Constant", "tensorflow.keras.initializers.Constant", "tensorflow.keras.initializers.Constant", "tensorflow.keras.initializers.Constant"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.torch_cfc.LTCCell.add_weight", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "# Check if input_shape is nested tuple/list", "\n", "        ", "if", "isinstance", "(", "input_shape", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_shape", "=", "input_shape", "[", "0", "]", "\n", "\n", "", "self", ".", "input_dim", "=", "input_shape", "[", "-", "1", "]", "\n", "\n", "self", ".", "_params", "=", "{", "}", "\n", "self", ".", "_params", "[", "\"gleak\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"gleak\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"gleak\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"vleak\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"vleak\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"vleak\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"cm\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"cm\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"cm\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sigma\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sigma\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"sigma\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"mu\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"mu\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"mu\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"w\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"w\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"erev\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"erev\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_erev_initializer", ",", "\n", ")", "\n", "\n", "self", ".", "_params", "[", "\"sensory_sigma\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_sigma\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"sensory_sigma\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_mu\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_mu\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"sensory_mu\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_w\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ",", "\n", "initializer", "=", "self", ".", "_get_initializer", "(", "\"sensory_w\"", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"sensory_erev\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"sensory_erev\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", "self", ".", "state_size", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "self", ".", "_erev_initializer", ",", "\n", ")", "\n", "\n", "self", ".", "_params", "[", "\"input_w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"input_w\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "1", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"input_b\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"input_b\"", ",", "\n", "shape", "=", "(", "self", ".", "sensory_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "0", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_params", "[", "\"output_w\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"output_w\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "1", ")", ",", "\n", ")", "\n", "self", ".", "_params", "[", "\"output_b\"", "]", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "\"output_b\"", ",", "\n", "shape", "=", "(", "self", ".", "state_size", ",", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "Constant", "(", "0", ")", ",", "\n", ")", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._sigmoid": [[356, 361], ["tensorflow.expand_dims", "tensorflow.nn.sigmoid"], "methods", ["None"], ["", "def", "_sigmoid", "(", "self", ",", "v_pre", ",", "mu", ",", "sigma", ")", ":", "\n", "        ", "v_pre", "=", "tf", ".", "expand_dims", "(", "v_pre", ",", "axis", "=", "-", "1", ")", "# For broadcasting", "\n", "mues", "=", "v_pre", "-", "mu", "\n", "x", "=", "sigma", "*", "mues", "\n", "return", "tf", ".", "nn", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._ode_solver": [[362, 404], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "range", "tf_cfc.LTCCell._sigmoid", "tensorflow.cast", "tf_cfc.LTCCell._sigmoid", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._sigmoid", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._sigmoid"], ["", "def", "_ode_solver", "(", "self", ",", "inputs", ",", "state", ",", "elapsed_time", ")", ":", "\n", "        ", "v_pre", "=", "state", "\n", "\n", "# We can pre-compute the effects of the sensory neurons here", "\n", "sensory_w_activation", "=", "self", ".", "_params", "[", "\"sensory_w\"", "]", "*", "self", ".", "_sigmoid", "(", "\n", "inputs", ",", "self", ".", "_params", "[", "\"sensory_mu\"", "]", ",", "self", ".", "_params", "[", "\"sensory_sigma\"", "]", "\n", ")", "\n", "\n", "sensory_rev_activation", "=", "sensory_w_activation", "*", "self", ".", "_params", "[", "\"sensory_erev\"", "]", "\n", "\n", "# Reduce over dimension 1 (=source sensory neurons)", "\n", "w_numerator_sensory", "=", "tf", ".", "reduce_sum", "(", "sensory_rev_activation", ",", "axis", "=", "1", ")", "\n", "w_denominator_sensory", "=", "tf", ".", "reduce_sum", "(", "sensory_w_activation", ",", "axis", "=", "1", ")", "\n", "\n", "# cm/t is loop invariant", "\n", "cm_t", "=", "self", ".", "_params", "[", "\"cm\"", "]", "/", "tf", ".", "cast", "(", "\n", "(", "elapsed_time", "+", "1e-3", ")", "/", "self", ".", "_ode_unfolds", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "\n", "# Unfold the multiply ODE multiple times into one RNN step", "\n", "for", "t", "in", "range", "(", "self", ".", "_ode_unfolds", ")", ":", "\n", "            ", "w_activation", "=", "self", ".", "_params", "[", "\"w\"", "]", "*", "self", ".", "_sigmoid", "(", "\n", "v_pre", ",", "self", ".", "_params", "[", "\"mu\"", "]", ",", "self", ".", "_params", "[", "\"sigma\"", "]", "\n", ")", "\n", "\n", "rev_activation", "=", "w_activation", "*", "self", ".", "_params", "[", "\"erev\"", "]", "\n", "\n", "# Reduce over dimension 1 (=source neurons)", "\n", "w_numerator", "=", "tf", ".", "reduce_sum", "(", "rev_activation", ",", "axis", "=", "1", ")", "+", "w_numerator_sensory", "\n", "w_denominator", "=", "tf", ".", "reduce_sum", "(", "w_activation", ",", "axis", "=", "1", ")", "+", "w_denominator_sensory", "\n", "\n", "numerator", "=", "(", "\n", "cm_t", "*", "v_pre", "\n", "+", "self", ".", "_params", "[", "\"gleak\"", "]", "*", "self", ".", "_params", "[", "\"vleak\"", "]", "\n", "+", "w_numerator", "\n", ")", "\n", "denominator", "=", "cm_t", "+", "self", ".", "_params", "[", "\"gleak\"", "]", "+", "w_denominator", "\n", "\n", "# Avoid dividing by 0", "\n", "v_pre", "=", "numerator", "/", "(", "denominator", "+", "self", ".", "_epsilon", ")", "\n", "\n", "", "return", "v_pre", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._map_inputs": [[405, 409], ["None"], "methods", ["None"], ["", "def", "_map_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "inputs", "*", "self", ".", "_params", "[", "\"input_w\"", "]", "\n", "inputs", "=", "inputs", "+", "self", ".", "_params", "[", "\"input_b\"", "]", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._map_outputs": [[410, 415], ["None"], "methods", ["None"], ["", "def", "_map_outputs", "(", "self", ",", "state", ")", ":", "\n", "        ", "output", "=", "state", "\n", "output", "=", "output", "*", "self", ".", "_params", "[", "\"output_w\"", "]", "\n", "output", "=", "output", "+", "self", ".", "_params", "[", "\"output_b\"", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell.call": [[416, 430], ["isinstance", "tf_cfc.LTCCell._map_inputs", "tf_cfc.LTCCell._ode_solver", "tf_cfc.LTCCell._map_outputs"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._map_inputs", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._ode_solver", "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.LTCCell._map_outputs"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "# Irregularly sampled mode", "\n", "            ", "inputs", ",", "elapsed_time", "=", "inputs", "\n", "", "else", ":", "\n", "# Regularly sampled mode (elapsed time = 1 second)", "\n", "            ", "elapsed_time", "=", "1.0", "\n", "", "inputs", "=", "self", ".", "_map_inputs", "(", "inputs", ")", "\n", "\n", "next_state", "=", "self", ".", "_ode_solver", "(", "inputs", ",", "states", "[", "0", "]", ",", "elapsed_time", ")", "\n", "\n", "outputs", "=", "self", ".", "_map_outputs", "(", "next_state", ")", "\n", "\n", "return", "outputs", ",", "[", "next_state", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.raminmh_CfC.None.tf_cfc.lecun_tanh": [[8, 10], ["tensorflow.nn.tanh"], "function", ["None"], ["def", "lecun_tanh", "(", "x", ")", ":", "\n", "    ", "return", "1.7159", "*", "tf", ".", "nn", ".", "tanh", "(", "0.666", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs": [[22, 25], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["def", "makedirs", "(", "dirname", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.save_checkpoint": [[26, 31], ["os.path.join", "torch.save", "torch.save", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["", "", "def", "save_checkpoint", "(", "state", ",", "save", ",", "epoch", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'checkpt-%04d.pth'", "%", "epoch", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_logger": [[33, 57], ["logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.info", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.info", "open", "logging.getLogger.info", "package_f.read"], "function", ["None"], ["", "def", "get_logger", "(", "logpath", ",", "filepath", ",", "package_files", "=", "[", "]", ",", "\n", "displaying", "=", "True", ",", "saving", "=", "True", ",", "debug", "=", "False", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "debug", ":", "\n", "        ", "level", "=", "logging", ".", "DEBUG", "\n", "", "else", ":", "\n", "        ", "level", "=", "logging", ".", "INFO", "\n", "", "logger", ".", "setLevel", "(", "level", ")", "\n", "if", "saving", ":", "\n", "        ", "info_file_handler", "=", "logging", ".", "FileHandler", "(", "logpath", ",", "mode", "=", "'w'", ")", "\n", "info_file_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "info_file_handler", ")", "\n", "", "if", "displaying", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "level", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "logger", ".", "info", "(", "filepath", ")", "\n", "\n", "for", "f", "in", "package_files", ":", "\n", "        ", "logger", ".", "info", "(", "f", ")", "\n", "with", "open", "(", "f", ",", "'r'", ")", "as", "package_f", ":", "\n", "            ", "logger", ".", "info", "(", "package_f", ".", "read", "(", ")", ")", "\n", "\n", "", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.inf_generator": [[59, 69], ["iterable.__iter__", "iterable.__iter__.__next__", "iterable.__iter__"], "function", ["None"], ["", "def", "inf_generator", "(", "iterable", ")", ":", "\n", "    ", "\"\"\"Allows training with DataLoaders in a single infinite loop:\n        for i, (x, y) in enumerate(inf_generator(train_loader)):\n    \"\"\"", "\n", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "yield", "iterator", ".", "__next__", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "iterator", "=", "iterable", ".", "__iter__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.dump_pickle": [[70, 73], ["open", "pickle.dump"], "function", ["None"], ["", "", "", "def", "dump_pickle", "(", "data", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "pkl_file", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "pkl_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle": [[74, 78], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "pkl_file", ":", "\n", "        ", "filecontent", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "", "return", "filecontent", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.make_dataset": [[79, 91], ["duv_utils.load_pickle", "duv_utils.load_pickle", "Exception", "duv_utils.load_pickle", "duv_utils.load_pickle"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle"], ["", "def", "make_dataset", "(", "dataset_type", "=", "\"spiral\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "dataset_type", "==", "\"spiral\"", ":", "\n", "        ", "data_path", "=", "\"data/spirals.pickle\"", "\n", "dataset", "=", "load_pickle", "(", "data_path", ")", "[", "\"dataset\"", "]", "\n", "chiralities", "=", "load_pickle", "(", "data_path", ")", "[", "\"chiralities\"", "]", "\n", "", "elif", "dataset_type", "==", "\"chiralspiral\"", ":", "\n", "        ", "data_path", "=", "\"data/chiral-spirals.pickle\"", "\n", "dataset", "=", "load_pickle", "(", "data_path", ")", "[", "\"dataset\"", "]", "\n", "chiralities", "=", "load_pickle", "(", "data_path", ")", "[", "\"chiralities\"", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown dataset type \"", "+", "dataset_type", ")", "\n", "", "return", "dataset", ",", "chiralities", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_last_dim": [[93, 103], ["data.size", "len", "len", "data.size", "data.size"], "function", ["None"], ["", "def", "split_last_dim", "(", "data", ")", ":", "\n", "    ", "last_dim", "=", "data", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "last_dim", "=", "last_dim", "//", "2", "\n", "\n", "if", "len", "(", "data", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "        ", "res", "=", "data", "[", ":", ",", ":", ",", ":", "last_dim", "]", ",", "data", "[", ":", ",", ":", ",", "last_dim", ":", "]", "\n", "\n", "", "if", "len", "(", "data", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "res", "=", "data", "[", ":", ",", ":", "last_dim", "]", ",", "data", "[", ":", ",", "last_dim", ":", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.init_network_weights": [[105, 110], ["net.modules", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "def", "init_network_weights", "(", "net", ",", "std", "=", "0.1", ")", ":", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "val", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.flatten": [[112, 114], ["x.reshape", "x.size"], "function", ["None"], ["", "", "", "def", "flatten", "(", "x", ",", "dim", ")", ":", "\n", "    ", "return", "x", ".", "reshape", "(", "x", ".", "size", "(", ")", "[", ":", "dim", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.subsample_timepoints": [[116, 152], ["len", "int", "range", "data.size", "sorted", "range", "numpy.random.choice", "data.size", "mask[].sum().cpu", "len", "int", "sorted", "numpy.setdiff1d", "numpy.arange", "numpy.where", "numpy.random.choice", "mask[].sum"], "function", ["None"], ["", "def", "subsample_timepoints", "(", "data", ",", "time_steps", ",", "mask", ",", "n_tp_to_sample", "=", "None", ")", ":", "\n", "# n_tp_to_sample: number of time points to subsample. If not None, sample exactly n_tp_to_sample points", "\n", "    ", "if", "n_tp_to_sample", "is", "None", ":", "\n", "        ", "return", "data", ",", "time_steps", ",", "mask", "\n", "", "n_tp_in_batch", "=", "len", "(", "time_steps", ")", "\n", "\n", "\n", "if", "n_tp_to_sample", ">", "1", ":", "\n", "# Subsample exact number of points", "\n", "        ", "assert", "(", "n_tp_to_sample", "<=", "n_tp_in_batch", ")", "\n", "n_tp_to_sample", "=", "int", "(", "n_tp_to_sample", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "missing_idx", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "n_tp_in_batch", ")", ",", "n_tp_in_batch", "-", "n_tp_to_sample", ",", "replace", "=", "False", ")", ")", "\n", "\n", "data", "[", "i", ",", "missing_idx", "]", "=", "0.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "mask", "[", "i", ",", "missing_idx", "]", "=", "0.", "\n", "\n", "", "", "", "elif", "(", "n_tp_to_sample", "<=", "1", ")", "and", "(", "n_tp_to_sample", ">", "0", ")", ":", "\n", "# Subsample percentage of points from each time series", "\n", "        ", "percentage_tp_to_sample", "=", "n_tp_to_sample", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "# take mask for current training sample and sum over all features -- figure out which time points don't have any measurements at all in this batch", "\n", "            ", "current_mask", "=", "mask", "[", "i", "]", ".", "sum", "(", "-", "1", ")", ".", "cpu", "(", ")", "\n", "non_missing_tp", "=", "np", ".", "where", "(", "current_mask", ">", "0", ")", "[", "0", "]", "\n", "n_tp_current", "=", "len", "(", "non_missing_tp", ")", "\n", "n_to_sample", "=", "int", "(", "n_tp_current", "*", "percentage_tp_to_sample", ")", "\n", "subsampled_idx", "=", "sorted", "(", "np", ".", "random", ".", "choice", "(", "non_missing_tp", ",", "n_to_sample", ",", "replace", "=", "False", ")", ")", "\n", "tp_to_set_to_zero", "=", "np", ".", "setdiff1d", "(", "non_missing_tp", ",", "subsampled_idx", ")", "\n", "\n", "data", "[", "i", ",", "tp_to_set_to_zero", "]", "=", "0.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "mask", "[", "i", ",", "tp_to_set_to_zero", "]", "=", "0.", "\n", "\n", "", "", "", "return", "data", ",", "time_steps", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.cut_out_timepoints": [[155, 175], ["len", "int", "range", "Exception", "data.size", "numpy.random.choice", "numpy.arange"], "function", ["None"], ["", "def", "cut_out_timepoints", "(", "data", ",", "time_steps", ",", "mask", ",", "n_points_to_cut", "=", "None", ")", ":", "\n", "# n_points_to_cut: number of consecutive time points to cut out", "\n", "    ", "if", "n_points_to_cut", "is", "None", ":", "\n", "        ", "return", "data", ",", "time_steps", ",", "mask", "\n", "", "n_tp_in_batch", "=", "len", "(", "time_steps", ")", "\n", "\n", "if", "n_points_to_cut", "<", "1", ":", "\n", "        ", "raise", "Exception", "(", "\"Number of time points to cut out must be > 1\"", ")", "\n", "\n", "", "assert", "(", "n_points_to_cut", "<=", "n_tp_in_batch", ")", "\n", "n_points_to_cut", "=", "int", "(", "n_points_to_cut", ")", "\n", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "start", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "5", ",", "n_tp_in_batch", "-", "n_points_to_cut", "-", "5", ")", ",", "replace", "=", "False", ")", "\n", "\n", "data", "[", "i", ",", "start", ":", "(", "start", "+", "n_points_to_cut", ")", "]", "=", "0.", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "[", "i", ",", "start", ":", "(", "start", "+", "n_points_to_cut", ")", "]", "=", "0.", "\n", "\n", "", "", "return", "data", ",", "time_steps", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device": [[180, 185], ["torch.device", "torch.device", "tensor.get_device"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device"], ["", "def", "get_device", "(", "tensor", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "if", "tensor", ".", "is_cuda", ":", "\n", "        ", "device", "=", "tensor", ".", "get_device", "(", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.sample_standard_gaussian": [[186, 192], ["duv_utils.get_device", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal", "torch.distributions.normal.Normal.sample().squeeze", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "mu.float", "torch.distributions.normal.Normal.sample", "sigma.float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mu.size"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device"], ["", "def", "sample_standard_gaussian", "(", "mu", ",", "sigma", ")", ":", "\n", "    ", "device", "=", "get_device", "(", "mu", ")", "\n", "\n", "d", "=", "torch", ".", "distributions", ".", "normal", ".", "Normal", "(", "torch", ".", "Tensor", "(", "[", "0.", "]", ")", ".", "to", "(", "device", ")", ",", "torch", ".", "Tensor", "(", "[", "1.", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "r", "=", "d", ".", "sample", "(", "mu", ".", "size", "(", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "r", "*", "sigma", ".", "float", "(", ")", "+", "mu", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_train_test": [[194, 199], ["data.size", "int", "int"], "function", ["None"], ["", "def", "split_train_test", "(", "data", ",", "train_fraq", "=", "0.8", ")", ":", "\n", "    ", "n_samples", "=", "data", ".", "size", "(", "0", ")", "\n", "data_train", "=", "data", "[", ":", "int", "(", "n_samples", "*", "train_fraq", ")", "]", "\n", "data_test", "=", "data", "[", "int", "(", "n_samples", "*", "train_fraq", ")", ":", "]", "\n", "return", "data_train", ",", "data_test", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_train_test_data_and_time": [[200, 210], ["data.size", "len", "int", "int", "time_steps.size", "int", "int"], "function", ["None"], ["", "def", "split_train_test_data_and_time", "(", "data", ",", "time_steps", ",", "train_fraq", "=", "0.8", ")", ":", "\n", "    ", "n_samples", "=", "data", ".", "size", "(", "0", ")", "\n", "data_train", "=", "data", "[", ":", "int", "(", "n_samples", "*", "train_fraq", ")", "]", "\n", "data_test", "=", "data", "[", "int", "(", "n_samples", "*", "train_fraq", ")", ":", "]", "\n", "\n", "assert", "(", "len", "(", "time_steps", ".", "size", "(", ")", ")", "==", "2", ")", "\n", "train_time_steps", "=", "time_steps", "[", ":", ",", ":", "int", "(", "n_samples", "*", "train_fraq", ")", "]", "\n", "test_time_steps", "=", "time_steps", "[", ":", ",", "int", "(", "n_samples", "*", "train_fraq", ")", ":", "]", "\n", "\n", "return", "data_train", ",", "data_test", ",", "train_time_steps", ",", "test_time_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_next_batch": [[213, 248], ["dataloader.__next__", "duv_utils.get_dict_template", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_dict_template"], ["", "def", "get_next_batch", "(", "dataloader", ")", ":", "\n", "# Make the union of all time points and perform normalization across the whole dataset", "\n", "    ", "data_dict", "=", "dataloader", ".", "__next__", "(", ")", "\n", "\n", "batch_dict", "=", "get_dict_template", "(", ")", "\n", "\n", "# remove the time points where there are no observations in this batch", "\n", "non_missing_tp", "=", "torch", ".", "sum", "(", "data_dict", "[", "\"observed_data\"", "]", ",", "(", "0", ",", "2", ")", ")", "!=", "0.", "\n", "batch_dict", "[", "\"observed_data\"", "]", "=", "data_dict", "[", "\"observed_data\"", "]", "[", ":", ",", "non_missing_tp", "]", "\n", "batch_dict", "[", "\"observed_tp\"", "]", "=", "data_dict", "[", "\"observed_tp\"", "]", "[", "non_missing_tp", "]", "\n", "\n", "# print(\"observed data\")", "\n", "# print(batch_dict[\"observed_data\"].size())", "\n", "\n", "if", "(", "\"observed_mask\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"observed_mask\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "batch_dict", "[", "\"observed_mask\"", "]", "=", "data_dict", "[", "\"observed_mask\"", "]", "[", ":", ",", "non_missing_tp", "]", "\n", "\n", "", "batch_dict", "[", "\"data_to_predict\"", "]", "=", "data_dict", "[", "\"data_to_predict\"", "]", "\n", "batch_dict", "[", "\"tp_to_predict\"", "]", "=", "data_dict", "[", "\"tp_to_predict\"", "]", "\n", "\n", "non_missing_tp", "=", "torch", ".", "sum", "(", "data_dict", "[", "\"data_to_predict\"", "]", ",", "(", "0", ",", "2", ")", ")", "!=", "0.", "\n", "batch_dict", "[", "\"data_to_predict\"", "]", "=", "data_dict", "[", "\"data_to_predict\"", "]", "[", ":", ",", "non_missing_tp", "]", "\n", "batch_dict", "[", "\"tp_to_predict\"", "]", "=", "data_dict", "[", "\"tp_to_predict\"", "]", "[", "non_missing_tp", "]", "\n", "\n", "# print(\"data_to_predict\")", "\n", "# print(batch_dict[\"data_to_predict\"].size())", "\n", "\n", "if", "(", "\"mask_predicted_data\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"mask_predicted_data\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "batch_dict", "[", "\"mask_predicted_data\"", "]", "=", "data_dict", "[", "\"mask_predicted_data\"", "]", "[", ":", ",", "non_missing_tp", "]", "\n", "\n", "", "if", "(", "\"labels\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"labels\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "batch_dict", "[", "\"labels\"", "]", "=", "data_dict", "[", "\"labels\"", "]", "\n", "\n", "", "batch_dict", "[", "\"mode\"", "]", "=", "data_dict", "[", "\"mode\"", "]", "\n", "return", "batch_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_ckpt_model": [[251, 267], ["torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "model.to", "os.path.exists", "Exception", "state_dict.items"], "function", ["None"], ["", "def", "get_ckpt_model", "(", "ckpt_path", ",", "model", ",", "device", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_path", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"Checkpoint \"", "+", "ckpt_path", "+", "\" does not exist.\"", ")", "\n", "# Load checkpoint.", "\n", "", "checkpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "ckpt_args", "=", "checkpt", "[", "'args'", "]", "\n", "state_dict", "=", "checkpt", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "# 1. filter out unnecessary keys", "\n", "state_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "state_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.update_learning_rate": [[269, 274], ["max"], "function", ["None"], ["", "def", "update_learning_rate", "(", "optimizer", ",", "decay_rate", "=", "0.999", ",", "lowest", "=", "1e-3", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "lr", "=", "param_group", "[", "'lr'", "]", "\n", "lr", "=", "max", "(", "lr", "*", "decay_rate", ",", "lowest", ")", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.linspace_vector": [[276, 292], ["numpy.prod", "start.size", "start.size", "end.size", "torch.linspace", "torch.linspace", "torch.Tensor", "torch.Tensor", "range", "torch.t", "torch.t", "start.size", "torch.cat", "torch.cat", "torch.cat.reshape", "start.size", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "", "def", "linspace_vector", "(", "start", ",", "end", ",", "n_points", ")", ":", "\n", "# start is either one value or a vector", "\n", "    ", "size", "=", "np", ".", "prod", "(", "start", ".", "size", "(", ")", ")", "\n", "\n", "assert", "(", "start", ".", "size", "(", ")", "==", "end", ".", "size", "(", ")", ")", "\n", "if", "size", "==", "1", ":", "\n", "# start and end are 1d-tensors", "\n", "        ", "res", "=", "torch", ".", "linspace", "(", "start", ",", "end", ",", "n_points", ")", "\n", "", "else", ":", "\n", "# start and end are vectors", "\n", "        ", "res", "=", "torch", ".", "Tensor", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "start", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "res", "=", "torch", ".", "cat", "(", "(", "res", ",", "\n", "torch", ".", "linspace", "(", "start", "[", "i", "]", ",", "end", "[", "i", "]", ",", "n_points", ")", ")", ",", "0", ")", "\n", "", "res", "=", "torch", ".", "t", "(", "res", ".", "reshape", "(", "start", ".", "size", "(", "0", ")", ",", "n_points", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.reverse": [[293, 296], ["range", "tensor.size"], "function", ["None"], ["", "def", "reverse", "(", "tensor", ")", ":", "\n", "    ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "tensor", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "return", "tensor", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.create_net": [[298, 308], ["range", "layers.append", "layers.append", "torch.Sequential", "torch.Linear", "layers.append", "layers.append", "nonlinear", "torch.Linear", "nonlinear", "torch.Linear"], "function", ["None"], ["", "def", "create_net", "(", "n_inputs", ",", "n_outputs", ",", "n_layers", "=", "1", ",", "\n", "n_units", "=", "100", ",", "nonlinear", "=", "nn", ".", "Tanh", ")", ":", "\n", "    ", "layers", "=", "[", "nn", ".", "Linear", "(", "n_inputs", ",", "n_units", ")", "]", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "nonlinear", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "n_units", ",", "n_units", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "nonlinear", "(", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "n_units", ",", "n_outputs", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_item_from_pickle": [[310, 315], ["duv_utils.load_pickle"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.load_pickle"], ["", "def", "get_item_from_pickle", "(", "pickle_file", ",", "item_name", ")", ":", "\n", "    ", "from_pickle", "=", "load_pickle", "(", "pickle_file", ")", "\n", "if", "item_name", "in", "from_pickle", ":", "\n", "        ", "return", "from_pickle", "[", "item_name", "]", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_dict_template": [[317, 325], ["None"], "function", ["None"], ["", "def", "get_dict_template", "(", ")", ":", "\n", "    ", "return", "{", "\"observed_data\"", ":", "None", ",", "\n", "\"observed_tp\"", ":", "None", ",", "\n", "\"data_to_predict\"", ":", "None", ",", "\n", "\"tp_to_predict\"", ":", "None", ",", "\n", "\"observed_mask\"", ":", "None", ",", "\n", "\"mask_predicted_data\"", ":", "None", ",", "\n", "\"labels\"", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.normalize_data": [[328, 346], ["data.reshape", "torch.isnan().any", "torch.isnan().any", "data.size", "torch.min", "torch.min", "torch.max", "torch.max", "Exception", "Exception", "torch.isnan", "torch.isnan"], "function", ["None"], ["", "def", "normalize_data", "(", "data", ")", ":", "\n", "    ", "reshaped", "=", "data", ".", "reshape", "(", "-", "1", ",", "data", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "att_min", "=", "torch", ".", "min", "(", "reshaped", ",", "0", ")", "[", "0", "]", "\n", "att_max", "=", "torch", ".", "max", "(", "reshaped", ",", "0", ")", "[", "0", "]", "\n", "\n", "# we don't want to divide by zero", "\n", "att_max", "[", "att_max", "==", "0.", "]", "=", "1.", "\n", "\n", "if", "(", "att_max", "!=", "0.", ")", ".", "all", "(", ")", ":", "\n", "        ", "data_norm", "=", "(", "data", "-", "att_min", ")", "/", "att_max", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Zero!\"", ")", "\n", "\n", "", "if", "torch", ".", "isnan", "(", "data_norm", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"nans!\"", ")", "\n", "\n", "", "return", "data_norm", ",", "att_min", ",", "att_max", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.normalize_masked_data": [[348, 364], ["torch.isnan().any", "torch.isnan().any", "Exception", "Exception", "torch.isnan", "torch.isnan"], "function", ["None"], ["", "def", "normalize_masked_data", "(", "data", ",", "mask", ",", "att_min", ",", "att_max", ")", ":", "\n", "# we don't want to divide by zero", "\n", "    ", "att_max", "[", "att_max", "==", "0.", "]", "=", "1.", "\n", "\n", "if", "(", "att_max", "!=", "0.", ")", ".", "all", "(", ")", ":", "\n", "        ", "data_norm", "=", "(", "data", "-", "att_min", ")", "/", "att_max", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Zero!\"", ")", "\n", "\n", "", "if", "torch", ".", "isnan", "(", "data_norm", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"nans!\"", ")", "\n", "\n", "# set masked out elements back to zero ", "\n", "", "data_norm", "[", "mask", "==", "0", "]", "=", "0", "\n", "\n", "return", "data_norm", ",", "att_min", ",", "att_max", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.shift_outputs": [[366, 374], ["first_datapoint.reshape.size", "first_datapoint.reshape.reshape", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "shift_outputs", "(", "outputs", ",", "first_datapoint", "=", "None", ")", ":", "\n", "    ", "outputs", "=", "outputs", "[", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "\n", "if", "first_datapoint", "is", "not", "None", ":", "\n", "        ", "n_traj", ",", "n_dims", "=", "first_datapoint", ".", "size", "(", ")", "\n", "first_datapoint", "=", "first_datapoint", ".", "reshape", "(", "1", ",", "n_traj", ",", "1", ",", "n_dims", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "first_datapoint", ",", "outputs", ")", ",", "2", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_extrap": [[378, 403], ["duv_utils.get_device", "data_dict[].size", "[].clone", "[].clone", "[].clone", "[].clone", "[].clone", "[].clone", "data_dict[].clone", "data_dict[].size"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device"], ["", "def", "split_data_extrap", "(", "data_dict", ",", "dataset", "=", "\"\"", ")", ":", "\n", "    ", "device", "=", "get_device", "(", "data_dict", "[", "\"data\"", "]", ")", "\n", "\n", "n_observed_tp", "=", "data_dict", "[", "\"data\"", "]", ".", "size", "(", "1", ")", "//", "2", "\n", "if", "dataset", "==", "\"hopper\"", ":", "\n", "        ", "n_observed_tp", "=", "data_dict", "[", "\"data\"", "]", ".", "size", "(", "1", ")", "//", "3", "\n", "\n", "", "split_dict", "=", "{", "\"observed_data\"", ":", "data_dict", "[", "\"data\"", "]", "[", ":", ",", ":", "n_observed_tp", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "\"observed_tp\"", ":", "data_dict", "[", "\"time_steps\"", "]", "[", ":", "n_observed_tp", "]", ".", "clone", "(", ")", ",", "\n", "\"data_to_predict\"", ":", "data_dict", "[", "\"data\"", "]", "[", ":", ",", "n_observed_tp", ":", ",", ":", "]", ".", "clone", "(", ")", ",", "\n", "\"tp_to_predict\"", ":", "data_dict", "[", "\"time_steps\"", "]", "[", "n_observed_tp", ":", "]", ".", "clone", "(", ")", "}", "\n", "\n", "split_dict", "[", "\"observed_mask\"", "]", "=", "None", "\n", "split_dict", "[", "\"mask_predicted_data\"", "]", "=", "None", "\n", "split_dict", "[", "\"labels\"", "]", "=", "None", "\n", "\n", "if", "(", "\"mask\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"mask\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "split_dict", "[", "\"observed_mask\"", "]", "=", "data_dict", "[", "\"mask\"", "]", "[", ":", ",", ":", "n_observed_tp", "]", ".", "clone", "(", ")", "\n", "split_dict", "[", "\"mask_predicted_data\"", "]", "=", "data_dict", "[", "\"mask\"", "]", "[", ":", ",", "n_observed_tp", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "(", "\"labels\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"labels\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "split_dict", "[", "\"labels\"", "]", "=", "data_dict", "[", "\"labels\"", "]", ".", "clone", "(", ")", "\n", "\n", "", "split_dict", "[", "\"mode\"", "]", "=", "\"extrap\"", "\n", "return", "split_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_interp": [[408, 429], ["duv_utils.get_device", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device"], ["", "def", "split_data_interp", "(", "data_dict", ")", ":", "\n", "    ", "device", "=", "get_device", "(", "data_dict", "[", "\"data\"", "]", ")", "\n", "\n", "split_dict", "=", "{", "\"observed_data\"", ":", "data_dict", "[", "\"data\"", "]", ".", "clone", "(", ")", ",", "\n", "\"observed_tp\"", ":", "data_dict", "[", "\"time_steps\"", "]", ".", "clone", "(", ")", ",", "\n", "\"data_to_predict\"", ":", "data_dict", "[", "\"data\"", "]", ".", "clone", "(", ")", ",", "\n", "\"tp_to_predict\"", ":", "data_dict", "[", "\"time_steps\"", "]", ".", "clone", "(", ")", "}", "\n", "\n", "split_dict", "[", "\"observed_mask\"", "]", "=", "None", "\n", "split_dict", "[", "\"mask_predicted_data\"", "]", "=", "None", "\n", "split_dict", "[", "\"labels\"", "]", "=", "None", "\n", "\n", "if", "\"mask\"", "in", "data_dict", "and", "data_dict", "[", "\"mask\"", "]", "is", "not", "None", ":", "\n", "        ", "split_dict", "[", "\"observed_mask\"", "]", "=", "data_dict", "[", "\"mask\"", "]", ".", "clone", "(", ")", "\n", "split_dict", "[", "\"mask_predicted_data\"", "]", "=", "data_dict", "[", "\"mask\"", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "(", "\"labels\"", "in", "data_dict", ")", "and", "(", "data_dict", "[", "\"labels\"", "]", "is", "not", "None", ")", ":", "\n", "        ", "split_dict", "[", "\"labels\"", "]", "=", "data_dict", "[", "\"labels\"", "]", ".", "clone", "(", ")", "\n", "\n", "", "split_dict", "[", "\"mode\"", "]", "=", "\"interp\"", "\n", "return", "split_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.add_mask": [[432, 441], ["torch.ones_like().to", "torch.ones_like().to", "duv_utils.get_device", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_device"], ["", "def", "add_mask", "(", "data_dict", ")", ":", "\n", "    ", "data", "=", "data_dict", "[", "\"observed_data\"", "]", "\n", "mask", "=", "data_dict", "[", "\"observed_mask\"", "]", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "        ", "mask", "=", "torch", ".", "ones_like", "(", "data", ")", ".", "to", "(", "get_device", "(", "data", ")", ")", "\n", "\n", "", "data_dict", "[", "\"observed_mask\"", "]", "=", "mask", "\n", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.subsample_observed_data": [[443, 479], ["data_dict.keys", "data.clone", "time_steps.clone", "mask.clone", "duv_utils.subsample_timepoints", "duv_utils.cut_out_timepoints", "data.clone", "time_steps.clone", "mask.clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone", "data_dict[].clone"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.subsample_timepoints", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.cut_out_timepoints"], ["", "def", "subsample_observed_data", "(", "data_dict", ",", "n_tp_to_sample", "=", "None", ",", "n_points_to_cut", "=", "None", ")", ":", "\n", "# n_tp_to_sample -- if not None, randomly subsample the time points. The resulting timeline has n_tp_to_sample points", "\n", "# n_points_to_cut -- if not None, cut out consecutive points on the timeline.  The resulting timeline has (N - n_points_to_cut) points", "\n", "\n", "    ", "if", "n_tp_to_sample", "is", "not", "None", ":", "\n", "# Randomly subsample time points", "\n", "        ", "data", ",", "time_steps", ",", "mask", "=", "subsample_timepoints", "(", "\n", "data_dict", "[", "\"observed_data\"", "]", ".", "clone", "(", ")", ",", "\n", "time_steps", "=", "data_dict", "[", "\"observed_tp\"", "]", ".", "clone", "(", ")", ",", "\n", "mask", "=", "(", "data_dict", "[", "\"observed_mask\"", "]", ".", "clone", "(", ")", "if", "data_dict", "[", "\"observed_mask\"", "]", "is", "not", "None", "else", "None", ")", ",", "\n", "n_tp_to_sample", "=", "n_tp_to_sample", ")", "\n", "\n", "", "if", "n_points_to_cut", "is", "not", "None", ":", "\n", "# Remove consecutive time points", "\n", "        ", "data", ",", "time_steps", ",", "mask", "=", "cut_out_timepoints", "(", "\n", "data_dict", "[", "\"observed_data\"", "]", ".", "clone", "(", ")", ",", "\n", "time_steps", "=", "data_dict", "[", "\"observed_tp\"", "]", ".", "clone", "(", ")", ",", "\n", "mask", "=", "(", "data_dict", "[", "\"observed_mask\"", "]", ".", "clone", "(", ")", "if", "data_dict", "[", "\"observed_mask\"", "]", "is", "not", "None", "else", "None", ")", ",", "\n", "n_points_to_cut", "=", "n_points_to_cut", ")", "\n", "\n", "", "new_data_dict", "=", "{", "}", "\n", "for", "key", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "        ", "new_data_dict", "[", "key", "]", "=", "data_dict", "[", "key", "]", "\n", "\n", "", "new_data_dict", "[", "\"observed_data\"", "]", "=", "data", ".", "clone", "(", ")", "\n", "new_data_dict", "[", "\"observed_tp\"", "]", "=", "time_steps", ".", "clone", "(", ")", "\n", "new_data_dict", "[", "\"observed_mask\"", "]", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "if", "n_points_to_cut", "is", "not", "None", ":", "\n", "# Cut the section in the data to predict as well", "\n", "# Used only for the demo on the periodic function", "\n", "        ", "new_data_dict", "[", "\"data_to_predict\"", "]", "=", "data", ".", "clone", "(", ")", "\n", "new_data_dict", "[", "\"tp_to_predict\"", "]", "=", "time_steps", ".", "clone", "(", ")", "\n", "new_data_dict", "[", "\"mask_predicted_data\"", "]", "=", "mask", ".", "clone", "(", ")", "\n", "\n", "", "return", "new_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_and_subsample_batch": [[481, 509], ["duv_utils.add_mask", "duv_utils.subsample_observed_data", "duv_utils.split_data_extrap", "duv_utils.split_data_interp", "duv_utils.split_data_extrap", "duv_utils.split_data_interp"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.add_mask", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.subsample_observed_data", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_extrap", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_interp", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_extrap", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_data_interp"], ["", "def", "split_and_subsample_batch", "(", "data_dict", ",", "args", ",", "data_type", "=", "\"train\"", ")", ":", "\n", "    ", "if", "data_type", "==", "\"train\"", ":", "\n", "# Training set", "\n", "        ", "if", "args", ".", "extrap", ":", "\n", "            ", "processed_dict", "=", "split_data_extrap", "(", "data_dict", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "processed_dict", "=", "split_data_interp", "(", "data_dict", ")", "\n", "\n", "", "", "else", ":", "\n", "# Test set", "\n", "        ", "if", "args", ".", "extrap", ":", "\n", "            ", "processed_dict", "=", "split_data_extrap", "(", "data_dict", ",", "dataset", "=", "args", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "processed_dict", "=", "split_data_interp", "(", "data_dict", ")", "\n", "\n", "# add mask", "\n", "", "", "processed_dict", "=", "add_mask", "(", "processed_dict", ")", "\n", "\n", "# Subsample points or cut out the whole section of the timeline", "\n", "if", "(", "args", ".", "sample_tp", "is", "not", "None", ")", "or", "(", "args", ".", "cut_tp", "is", "not", "None", ")", ":", "\n", "        ", "processed_dict", "=", "subsample_observed_data", "(", "processed_dict", ",", "\n", "n_tp_to_sample", "=", "args", ".", "sample_tp", ",", "\n", "n_points_to_cut", "=", "args", ".", "cut_tp", ")", "\n", "\n", "# if (args.sample_tp is not None):", "\n", "#     processed_dict = subsample_observed_data(processed_dict, ", "\n", "#         n_tp_to_sample = args.sample_tp)", "\n", "", "return", "processed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.compute_loss_all_batches": [[514, 612], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "range", "print", "duv_utils.get_next_batch", "model.compute_all_losses", "total.keys", "total.items", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "results[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "all_test_labels.repeat.repeat", "os.makedirs", "all_test_labels.repeat.repeat", "torch.max", "torch.max", "torch.max", "torch.max", "pred_class_id.reshape.reshape", "sklearn.metrics.accuracy_score", "str", "isinstance", "torch.isnan", "torch.isnan", "torch.sum", "torch.sum", "print", "print", "sklearn.metrics.roc_auc_score", "print", "torch.sum", "torch.sum", "class_labels.cpu().numpy", "pred_class_id.reshape.cpu().numpy", "results[].reshape", "batch_dict[].reshape", "var.detach.detach", "str", "all_test_labels.repeat.cpu().numpy().reshape", "torch.cat.cpu().numpy().reshape", "len", "torch.sum", "torch.sum", "class_labels.cpu", "pred_class_id.reshape.cpu", "all_test_labels.repeat.reshape", "all_test_labels.repeat.cpu().numpy", "torch.cat.cpu().numpy", "all_test_labels.repeat.cpu", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.get_next_batch", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["", "def", "compute_loss_all_batches", "(", "model", ",", "\n", "test_dataloader", ",", "args", ",", "\n", "n_batches", ",", "experimentID", ",", "device", ",", "\n", "n_traj_samples", "=", "1", ",", "kl_coef", "=", "1.", ",", "\n", "max_samples_for_eval", "=", "None", ")", ":", "\n", "\n", "    ", "total", "=", "{", "}", "\n", "total", "[", "\"loss\"", "]", "=", "0", "\n", "total", "[", "\"likelihood\"", "]", "=", "0", "\n", "total", "[", "\"mse\"", "]", "=", "0", "\n", "total", "[", "\"kl_first_p\"", "]", "=", "0", "\n", "total", "[", "\"std_first_p\"", "]", "=", "0", "\n", "total", "[", "\"pois_likelihood\"", "]", "=", "0", "\n", "total", "[", "\"ce_loss\"", "]", "=", "0", "\n", "\n", "n_test_batches", "=", "0", "\n", "\n", "classif_predictions", "=", "torch", ".", "Tensor", "(", "[", "]", ")", ".", "to", "(", "device", ")", "\n", "all_test_labels", "=", "torch", ".", "Tensor", "(", "[", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "print", "(", "\"Computing loss... \"", "+", "str", "(", "i", ")", ")", "\n", "\n", "batch_dict", "=", "get_next_batch", "(", "test_dataloader", ")", "\n", "\n", "results", "=", "model", ".", "compute_all_losses", "(", "batch_dict", ",", "\n", "n_traj_samples", "=", "n_traj_samples", ",", "kl_coef", "=", "kl_coef", ")", "\n", "\n", "if", "args", ".", "classif", ":", "\n", "            ", "n_labels", "=", "model", ".", "n_labels", "#batch_dict[\"labels\"].size(-1)", "\n", "n_traj_samples", "=", "results", "[", "\"label_predictions\"", "]", ".", "size", "(", "0", ")", "\n", "\n", "classif_predictions", "=", "torch", ".", "cat", "(", "(", "classif_predictions", ",", "\n", "results", "[", "\"label_predictions\"", "]", ".", "reshape", "(", "n_traj_samples", ",", "-", "1", ",", "n_labels", ")", ")", ",", "1", ")", "\n", "all_test_labels", "=", "torch", ".", "cat", "(", "(", "all_test_labels", ",", "\n", "batch_dict", "[", "\"labels\"", "]", ".", "reshape", "(", "-", "1", ",", "n_labels", ")", ")", ",", "0", ")", "\n", "\n", "", "for", "key", "in", "total", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "in", "results", ":", "\n", "                ", "var", "=", "results", "[", "key", "]", "\n", "if", "isinstance", "(", "var", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "var", "=", "var", ".", "detach", "(", ")", "\n", "", "total", "[", "key", "]", "+=", "var", "\n", "\n", "", "", "n_test_batches", "+=", "1", "\n", "\n", "# for speed", "\n", "if", "max_samples_for_eval", "is", "not", "None", ":", "\n", "            ", "if", "n_batches", "*", "batch_size", ">=", "max_samples_for_eval", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "if", "n_test_batches", ">", "0", ":", "\n", "        ", "for", "key", ",", "value", "in", "total", ".", "items", "(", ")", ":", "\n", "            ", "total", "[", "key", "]", "=", "total", "[", "key", "]", "/", "n_test_batches", "\n", "\n", "", "", "if", "args", ".", "classif", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"physionet\"", ":", "\n", "#all_test_labels = all_test_labels.reshape(-1)", "\n", "# For each trajectory, we get n_traj_samples samples from z0 -- compute loss on all of them", "\n", "            ", "all_test_labels", "=", "all_test_labels", ".", "repeat", "(", "n_traj_samples", ",", "1", ",", "1", ")", "\n", "\n", "\n", "idx_not_nan", "=", "~", "torch", ".", "isnan", "(", "all_test_labels", ")", "\n", "classif_predictions", "=", "classif_predictions", "[", "idx_not_nan", "]", "\n", "all_test_labels", "=", "all_test_labels", "[", "idx_not_nan", "]", "\n", "\n", "dirname", "=", "\"plots/\"", "+", "str", "(", "experimentID", ")", "+", "\"/\"", "\n", "os", ".", "makedirs", "(", "dirname", ",", "exist_ok", "=", "True", ")", "\n", "\n", "total", "[", "\"auc\"", "]", "=", "0.", "\n", "if", "torch", ".", "sum", "(", "all_test_labels", ")", "!=", "0.", ":", "\n", "                ", "print", "(", "\"Number of labeled examples: {}\"", ".", "format", "(", "len", "(", "all_test_labels", ".", "reshape", "(", "-", "1", ")", ")", ")", ")", "\n", "print", "(", "\"Number of examples with mortality 1: {}\"", ".", "format", "(", "torch", ".", "sum", "(", "all_test_labels", "==", "1.", ")", ")", ")", "\n", "\n", "# Cannot compute AUC with only 1 class", "\n", "total", "[", "\"auc\"", "]", "=", "sk", ".", "metrics", ".", "roc_auc_score", "(", "all_test_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ",", "\n", "classif_predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Warning: Couldn't compute AUC -- all examples are from the same class\"", ")", "\n", "\n", "", "", "if", "args", ".", "dataset", "==", "\"activity\"", ":", "\n", "            ", "all_test_labels", "=", "all_test_labels", ".", "repeat", "(", "n_traj_samples", ",", "1", ",", "1", ")", "\n", "\n", "labeled_tp", "=", "torch", ".", "sum", "(", "all_test_labels", ",", "-", "1", ")", ">", "0.", "\n", "\n", "all_test_labels", "=", "all_test_labels", "[", "labeled_tp", "]", "\n", "classif_predictions", "=", "classif_predictions", "[", "labeled_tp", "]", "\n", "\n", "# classif_predictions and all_test_labels are in on-hot-encoding -- convert to class ids", "\n", "_", ",", "pred_class_id", "=", "torch", ".", "max", "(", "classif_predictions", ",", "-", "1", ")", "\n", "_", ",", "class_labels", "=", "torch", ".", "max", "(", "all_test_labels", ",", "-", "1", ")", "\n", "\n", "pred_class_id", "=", "pred_class_id", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "total", "[", "\"accuracy\"", "]", "=", "sk", ".", "metrics", ".", "accuracy_score", "(", "\n", "class_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "pred_class_id", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.check_mask": [[613, 623], ["torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "torch.sum().cpu().numpy", "numpy.prod", "torch.sum", "torch.sum", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "torch.sum().cpu", "list", "mask.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "check_mask", "(", "data", ",", "mask", ")", ":", "\n", "#check that \"mask\" argument indeed contains a mask for data", "\n", "    ", "n_zeros", "=", "torch", ".", "sum", "(", "mask", "==", "0.", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_ones", "=", "torch", ".", "sum", "(", "mask", "==", "1.", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# mask should contain only zeros and ones", "\n", "assert", "(", "(", "n_zeros", "+", "n_ones", ")", "==", "np", ".", "prod", "(", "list", "(", "mask", ".", "size", "(", ")", ")", ")", ")", "\n", "\n", "# all masked out elements should be zeros", "\n", "assert", "(", "torch", ".", "sum", "(", "data", "[", "mask", "==", "0.", "]", "!=", "0.", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_imdb.load_imdb": [[18, 29], ["tensorflow.keras.datasets.imdb.load_data", "tensorflow.keras.preprocessing.sequence.pad_sequences", "tensorflow.keras.preprocessing.sequence.pad_sequences"], "function", ["None"], ["def", "load_imdb", "(", ")", ":", "\n", "\n", "    ", "\"\"\"\n    ## Download and prepare dataset\n    \"\"\"", "\n", "(", "x_train", ",", "y_train", ")", ",", "(", "x_val", ",", "y_val", ")", "=", "tf", ".", "keras", ".", "datasets", ".", "imdb", ".", "load_data", "(", "\n", "num_words", "=", "vocab_size", "\n", ")", "\n", "x_train", "=", "tf", ".", "keras", ".", "preprocessing", ".", "sequence", ".", "pad_sequences", "(", "x_train", ",", "maxlen", "=", "maxlen", ")", "\n", "x_val", "=", "tf", ".", "keras", ".", "preprocessing", ".", "sequence", ".", "pad_sequences", "(", "x_val", ",", "maxlen", "=", "maxlen", ")", "\n", "return", "(", "x_train", ",", "y_train", ")", ",", "(", "x_val", ",", "y_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_imdb.eval": [[32, 87], ["train_imdb.load_imdb", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Embedding", "tf.keras.layers.Embedding.", "tensorflow.keras.layers.RNN", "tensorflow.keras.layers.Dense", "tf.keras.layers.RNN.", "tf.keras.layers.Dense.", "tensorflow.keras.Model", "tensorflow.keras.optimizers.schedules.ExponentialDecay", "opt", "tf.keras.Model.compile", "tf.keras.Model.fit", "tf.keras.Model.evaluate", "tf_cfc.MixedCfcCell", "tf_cfc.CfcCell", "tensorflow.keras.layers.Dropout", "tensorflow.keras.losses.SparseCategoricalCrossentropy", "tensorflow.keras.metrics.SparseCategoricalAccuracy"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.train_imdb.load_imdb"], ["", "def", "eval", "(", "config", ",", "index_arg", ",", "verbose", "=", "0", ")", ":", "\n", "    ", "(", "train_x", ",", "train_y", ")", ",", "(", "test_x", ",", "test_y", ")", "=", "load_imdb", "(", ")", "\n", "if", "config", "[", "\"use_mixed\"", "]", ":", "\n", "        ", "cell", "=", "MixedCfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "CfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "\n", "# pixel_input = tf.keras.Input(shape=(28 * 28, 1), name=\"pixel\")", "\n", "", "inputs", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "maxlen", ",", ")", ")", "\n", "token_emb", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "\n", "input_dim", "=", "vocab_size", ",", "output_dim", "=", "config", "[", "\"embed_dim\"", "]", "\n", ")", "\n", "cell_input", "=", "token_emb", "(", "inputs", ")", "\n", "cell_input", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", "[", "\"embed_dr\"", "]", ")", "(", "cell_input", ")", "\n", "\n", "rnn", "=", "tf", ".", "keras", ".", "layers", ".", "RNN", "(", "cell", ",", "time_major", "=", "False", ",", "return_sequences", "=", "False", ")", "\n", "dense_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "10", ")", "\n", "\n", "output_states", "=", "rnn", "(", "cell_input", ")", "\n", "y", "=", "dense_layer", "(", "output_states", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", ",", "y", ")", "\n", "\n", "base_lr", "=", "config", "[", "\"base_lr\"", "]", "\n", "decay_lr", "=", "config", "[", "\"decay_lr\"", "]", "\n", "# end_lr = config[\"end_lr\"]", "\n", "train_steps", "=", "train_x", ".", "shape", "[", "0", "]", "//", "config", "[", "\"batch_size\"", "]", "\n", "learning_rate_fn", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "ExponentialDecay", "(", "\n", "base_lr", ",", "train_steps", ",", "decay_lr", "\n", ")", "\n", "opt", "=", "(", "\n", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "\n", "if", "config", "[", "\"optimizer\"", "]", "==", "\"adam\"", "\n", "else", "tf", ".", "keras", ".", "optimizers", ".", "RMSprop", "\n", ")", "\n", "optimizer", "=", "opt", "(", "learning_rate_fn", ",", "clipnorm", "=", "config", "[", "\"clipnorm\"", "]", ")", "\n", "model", ".", "compile", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "SparseCategoricalCrossentropy", "(", "from_logits", "=", "True", ")", ",", "\n", "metrics", "=", "[", "tf", ".", "keras", ".", "metrics", ".", "SparseCategoricalAccuracy", "(", ")", "]", ",", "\n", ")", "\n", "\n", "# Fit and evaluate", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "train_x", ",", "\n", "y", "=", "train_y", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "epochs", "=", "config", "[", "\"epochs\"", "]", ",", "\n", "validation_data", "=", "(", "test_x", ",", "test_y", ")", "if", "verbose", "else", "None", ",", "\n", "verbose", "=", "verbose", ",", "\n", ")", "\n", "# test_accuracies = hist.history[\"val_sparse_categorical_accuracy\"]", "\n", "# return np.max(test_accuracies)", "\n", "_", ",", "test_accuracy", "=", "model", ".", "evaluate", "(", "test_x", ",", "test_y", ",", "verbose", "=", "0", ")", "\n", "return", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_imdb.score": [[194, 202], ["range", "print", "acc.append", "print", "train_imdb.eval", "numpy.mean", "numpy.std", "len", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval"], ["def", "score", "(", "config", ")", ":", "\n", "    ", "acc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "acc", ".", "append", "(", "100", "*", "eval", "(", "config", ",", "i", ")", ")", "\n", "print", "(", "\n", "f\"IMDB test accuracy [{len(acc)}/5]: {np.mean(acc):0.2f}\\\\% $\\\\pm$ {np.std(acc):0.2f}\"", "\n", ")", "\n", "", "print", "(", "f\"IMDB test accuracy: {np.mean(acc):0.2f}\\\\% $\\\\pm$ {np.std(acc):0.2f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_walker.BackupCallback.__init__": [[16, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "BackupCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "saved_weights", "=", "None", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "best_loss", "=", "np", ".", "PINF", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_walker.BackupCallback.on_epoch_end": [[22, 27], ["train_walker.BackupCallback.model.get_weights"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "logs", "[", "\"val_loss\"", "]", "<", "self", ".", "best_loss", ":", "\n", "            ", "self", ".", "best_loss", "=", "logs", "[", "\"val_loss\"", "]", "\n", "# print(f\" new best -> {logs['val_loss']:0.3f}\")", "\n", "self", ".", "saved_weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_walker.BackupCallback.restore": [[28, 31], ["train_walker.BackupCallback.model.set_weights"], "methods", ["None"], ["", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "best_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "set_weights", "(", "self", ".", "saved_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_walker.eval": [[33, 86], ["irregular_sampled_datasets.Walker2dImitationData", "config.get", "tensorflow.keras.Input", "tensorflow.keras.Input", "tensorflow.keras.layers.RNN", "tf.keras.layers.RNN.", "tensorflow.keras.Model", "tensorflow.keras.optimizers.schedules.ExponentialDecay", "opt", "tf.keras.Model.compile", "tf.keras.Model.fit", "tf.keras.Model.evaluate", "tf_cfc.LTCCell", "tensorflow.keras.layers.Dense", "tf_cfc.MixedCfcCell", "tf_cfc.CfcCell", "tensorflow.keras.losses.MeanSquaredError", "train_walker.BackupCallback"], "function", ["None"], ["", "", "", "def", "eval", "(", "config", ",", "index_arg", ",", "verbose", "=", "0", ")", ":", "\n", "    ", "data", "=", "Walker2dImitationData", "(", "seq_len", "=", "64", ")", "\n", "\n", "if", "config", ".", "get", "(", "\"use_ltc\"", ")", ":", "\n", "        ", "cell", "=", "LTCCell", "(", "units", "=", "config", "[", "\"size\"", "]", ")", "\n", "", "elif", "config", "[", "\"use_mixed\"", "]", ":", "\n", "        ", "cell", "=", "MixedCfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "CfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "\n", "", "signal_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "seq_len", ",", "data", ".", "input_size", ")", ",", "name", "=", "\"robot\"", ")", "\n", "time_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "seq_len", ",", "1", ")", ",", "name", "=", "\"time\"", ")", "\n", "\n", "rnn", "=", "tf", ".", "keras", ".", "layers", ".", "RNN", "(", "cell", ",", "time_major", "=", "False", ",", "return_sequences", "=", "True", ")", "\n", "\n", "output_states", "=", "rnn", "(", "(", "signal_input", ",", "time_input", ")", ")", "\n", "y", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "data", ".", "input_size", ")", "(", "output_states", ")", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "signal_input", ",", "time_input", "]", ",", "outputs", "=", "[", "y", "]", ")", "\n", "\n", "base_lr", "=", "config", "[", "\"base_lr\"", "]", "\n", "decay_lr", "=", "config", "[", "\"decay_lr\"", "]", "\n", "train_steps", "=", "data", ".", "train_x", ".", "shape", "[", "0", "]", "//", "config", "[", "\"batch_size\"", "]", "\n", "learning_rate_fn", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "ExponentialDecay", "(", "\n", "base_lr", ",", "train_steps", ",", "decay_lr", "\n", ")", "\n", "opt", "=", "(", "\n", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "\n", "if", "config", "[", "\"optimizer\"", "]", "==", "\"adam\"", "\n", "else", "tf", ".", "keras", ".", "optimizers", ".", "RMSprop", "\n", ")", "\n", "optimizer", "=", "opt", "(", "learning_rate_fn", ",", "clipnorm", "=", "config", "[", "\"clipnorm\"", "]", ")", "\n", "model", ".", "compile", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "MeanSquaredError", "(", ")", ",", "\n", ")", "\n", "# model.summary()", "\n", "\n", "# Fit model", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "(", "data", ".", "train_x", ",", "data", ".", "train_times", ")", ",", "\n", "y", "=", "data", ".", "train_y", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "epochs", "=", "config", "[", "\"epochs\"", "]", ",", "\n", "validation_data", "=", "(", "(", "data", ".", "valid_x", ",", "data", ".", "valid_times", ")", ",", "data", ".", "valid_y", ")", ",", "\n", "callbacks", "=", "[", "BackupCallback", "(", "model", ")", "]", ",", "\n", "verbose", "=", "0", ",", "\n", ")", "\n", "# Evaluate model after training", "\n", "test_loss", "=", "model", ".", "evaluate", "(", "\n", "x", "=", "(", "data", ".", "test_x", ",", "data", ".", "test_times", ")", ",", "y", "=", "data", ".", "test_y", ",", "verbose", "=", "2", "\n", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.train_walker.score": [[186, 189], ["print", "train_walker.eval", "range", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval"], ["def", "score", "(", "config", ")", ":", "\n", "    ", "acc", "=", "[", "eval", "(", "config", ",", "i", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "print", "(", "f\"MSE: {np.mean(acc):0.5f} $\\\\pm$ {np.std(acc):0.5f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.TrafficData.__init__": [[55, 101], ["traffic_with_cfc.load_trace", "traffic_with_cfc.cut_in_sequences", "numpy.stack", "numpy.stack", "print", "numpy.random.RandomState().permutation", "int", "int", "numpy.swapaxes", "numpy.swapaxes", "numpy.swapaxes", "numpy.swapaxes", "numpy.swapaxes", "numpy.swapaxes", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.zip", "tensorflow.data.Dataset.zip", "tensorflow.data.Dataset.zip", "traffic_with_cfc.TrafficData.train.batch", "traffic_with_cfc.TrafficData.valid.batch", "traffic_with_cfc.TrafficData.test.batch", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.load_trace", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.cut_in_sequences"], ["    ", "def", "__init__", "(", "self", ",", "seq_len", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "x", ",", "y", "=", "load_trace", "(", ")", "\n", "\n", "train_x", ",", "train_y", "=", "cut_in_sequences", "(", "x", ",", "y", ",", "seq_len", ",", "inc", "=", "4", ")", "\n", "\n", "self", ".", "train_x", "=", "np", ".", "stack", "(", "train_x", ",", "axis", "=", "0", ")", "\n", "self", ".", "train_y", "=", "np", ".", "stack", "(", "train_y", ",", "axis", "=", "0", ")", "\n", "total_seqs", "=", "self", ".", "train_x", ".", "shape", "[", "1", "]", "\n", "print", "(", "\"Total number of training sequences: {}\"", ".", "format", "(", "total_seqs", ")", ")", "\n", "permutation", "=", "np", ".", "random", ".", "RandomState", "(", "23489", ")", ".", "permutation", "(", "total_seqs", ")", "\n", "valid_size", "=", "int", "(", "0.1", "*", "total_seqs", ")", "\n", "test_size", "=", "int", "(", "0.15", "*", "total_seqs", ")", "\n", "\n", "self", ".", "valid_x", "=", "self", ".", "train_x", "[", ":", ",", "permutation", "[", ":", "valid_size", "]", "]", "\n", "self", ".", "valid_y", "=", "self", ".", "train_y", "[", ":", ",", "permutation", "[", ":", "valid_size", "]", "]", "\n", "self", ".", "test_x", "=", "self", ".", "train_x", "[", ":", ",", "permutation", "[", "valid_size", ":", "valid_size", "+", "test_size", "]", "]", "\n", "self", ".", "test_y", "=", "self", ".", "train_y", "[", ":", ",", "permutation", "[", "valid_size", ":", "valid_size", "+", "test_size", "]", "]", "\n", "self", ".", "train_x", "=", "self", ".", "train_x", "[", ":", ",", "permutation", "[", "valid_size", "+", "test_size", ":", "]", "]", "\n", "self", ".", "train_y", "=", "self", ".", "train_y", "[", ":", ",", "permutation", "[", "valid_size", "+", "test_size", ":", "]", "]", "\n", "\n", "self", ".", "train_x", "=", "np", ".", "swapaxes", "(", "self", ".", "train_x", ",", "0", ",", "1", ")", "\n", "self", ".", "train_y", "=", "np", ".", "swapaxes", "(", "self", ".", "train_y", ",", "0", ",", "1", ")", "\n", "self", ".", "valid_x", "=", "np", ".", "swapaxes", "(", "self", ".", "valid_x", ",", "0", ",", "1", ")", "\n", "self", ".", "valid_y", "=", "np", ".", "swapaxes", "(", "self", ".", "valid_y", ",", "0", ",", "1", ")", "\n", "self", ".", "test_x", "=", "np", ".", "swapaxes", "(", "self", ".", "test_x", ",", "0", ",", "1", ")", "\n", "self", ".", "test_y", "=", "np", ".", "swapaxes", "(", "self", ".", "test_y", ",", "0", ",", "1", ")", "\n", "\n", "self", ".", "input_size", "=", "self", ".", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "output_size", "=", "self", ".", "train_y", ".", "shape", "[", "-", "1", "]", "\n", "\n", "self", ".", "valid_x", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "valid_x", ")", "\n", "self", ".", "valid_y", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "valid_y", ")", "\n", "self", ".", "test_x", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "test_x", ")", "\n", "self", ".", "test_y", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "test_y", ")", "\n", "self", ".", "train_x", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "train_x", ")", "\n", "self", ".", "train_y", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "self", ".", "train_y", ")", "\n", "\n", "self", ".", "train", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "self", ".", "train_x", ",", "self", ".", "train_y", ")", ")", "\n", "self", ".", "valid", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "self", ".", "valid_x", ",", "self", ".", "valid_y", ")", ")", "\n", "self", ".", "test", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "self", ".", "test_x", ",", "self", ".", "test_y", ")", ")", "\n", "\n", "self", ".", "train", "=", "self", ".", "train", ".", "batch", "(", "batch_size", ")", "\n", "self", ".", "valid", "=", "self", ".", "valid", ".", "batch", "(", "batch_size", ")", "\n", "self", ".", "test", "=", "self", ".", "test", ".", "batch", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.BackupCallback.__init__": [[103, 108], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "BackupCallback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "saved_weights", "=", "None", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "best_loss", "=", "np", ".", "PINF", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.BackupCallback.on_epoch_end": [[109, 114], ["traffic_with_cfc.BackupCallback.model.get_weights"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "logs", "[", "\"val_loss\"", "]", "<", "self", ".", "best_loss", ":", "\n", "            ", "self", ".", "best_loss", "=", "logs", "[", "\"val_loss\"", "]", "\n", "# print(f\" new best -> {logs['val_loss']:0.3f}\")", "\n", "self", ".", "saved_weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.BackupCallback.restore": [[115, 118], ["traffic_with_cfc.BackupCallback.model.set_weights"], "methods", ["None"], ["", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "best_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "set_weights", "(", "self", ".", "saved_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.load_trace": [[16, 38], ["pandas.read_csv", "df[].values.astype", "numpy.mean", "df[].values.astype", "df[].values.astype", "df[].values.astype", "numpy.array().astype", "numpy.array().astype", "numpy.sin", "numpy.stack", "df[].values.astype", "numpy.mean", "numpy.std", "datetime.datetime.strptime", "numpy.array", "numpy.array", "d.weekday"], "function", ["None"], ["def", "load_trace", "(", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "\"data/traffic/Metro_Interstate_Traffic_Volume.csv\"", ")", "\n", "holiday", "=", "(", "df", "[", "\"holiday\"", "]", ".", "values", "==", "None", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "temp", "=", "df", "[", "\"temp\"", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "temp", "-=", "np", ".", "mean", "(", "temp", ")", "# normalize temp by annual mean", "\n", "rain", "=", "df", "[", "\"rain_1h\"", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "snow", "=", "df", "[", "\"snow_1h\"", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "clouds", "=", "df", "[", "\"clouds_all\"", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "date_time", "=", "df", "[", "\"date_time\"", "]", ".", "values", "\n", "# 2012-10-02 13:00:00", "\n", "date_time", "=", "[", "dt", ".", "datetime", ".", "strptime", "(", "d", ",", "\"%Y-%m-%d %H:%M:%S\"", ")", "for", "d", "in", "date_time", "]", "\n", "weekday", "=", "np", ".", "array", "(", "[", "d", ".", "weekday", "(", ")", "for", "d", "in", "date_time", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "noon", "=", "np", ".", "array", "(", "[", "d", ".", "hour", "for", "d", "in", "date_time", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "noon", "=", "np", ".", "sin", "(", "noon", "*", "np", ".", "pi", "/", "24", ")", "\n", "\n", "features", "=", "np", ".", "stack", "(", "[", "holiday", ",", "temp", ",", "rain", ",", "snow", ",", "clouds", ",", "weekday", ",", "noon", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "traffic_volume", "=", "df", "[", "\"traffic_volume\"", "]", ".", "values", ".", "astype", "(", "np", ".", "float32", ")", "\n", "traffic_volume", "-=", "np", ".", "mean", "(", "traffic_volume", ")", "# normalize", "\n", "traffic_volume", "/=", "np", ".", "std", "(", "traffic_volume", ")", "# normalize", "\n", "\n", "return", "features", ",", "traffic_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.cut_in_sequences": [[40, 52], ["range", "sequences_x.append", "sequences_y.append", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "cut_in_sequences", "(", "x", ",", "y", ",", "seq_len", ",", "inc", "=", "1", ")", ":", "\n", "\n", "    ", "sequences_x", "=", "[", "]", "\n", "sequences_y", "=", "[", "]", "\n", "\n", "for", "s", "in", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", "-", "seq_len", ",", "inc", ")", ":", "\n", "        ", "start", "=", "s", "\n", "end", "=", "start", "+", "seq_len", "\n", "sequences_x", ".", "append", "(", "x", "[", "start", ":", "end", "]", ")", "\n", "sequences_y", ".", "append", "(", "y", "[", "start", ":", "end", "]", ")", "\n", "\n", "", "return", "np", ".", "stack", "(", "sequences_x", ",", "axis", "=", "1", ")", ",", "np", ".", "stack", "(", "sequences_y", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval": [[120, 177], ["config.get", "traffic_with_cfc.TrafficData", "tensorflow.keras.Input", "tensorflow.keras.layers.RNN", "tf.keras.layers.RNN.", "tensorflow.keras.Model", "tensorflow.keras.optimizers.schedules.ExponentialDecay", "opt", "tf.keras.Model.compile", "tf.keras.Model.summary", "tf.keras.Model.fit", "tf.keras.Model.evaluate", "tf_cfc.LTCCell", "config.get", "tensorflow.keras.layers.Dense", "len", "tf_cfc.MixedLTCCell", "tensorflow.keras.losses.MeanSquaredError", "tf_cfc.MixedCfcCell", "tf_cfc.CfcCell", "traffic_with_cfc.BackupCallback"], "function", ["None"], ["", "", "", "def", "eval", "(", "config", ",", "index_arg", ",", "verbose", "=", "0", ")", ":", "\n", "\n", "    ", "if", "config", ".", "get", "(", "\"use_ltc\"", ")", ":", "\n", "        ", "cell", "=", "LTCCell", "(", "units", "=", "config", "[", "\"size\"", "]", ")", "\n", "", "elif", "config", ".", "get", "(", "\"use_mixed_ltc\"", ")", ":", "\n", "        ", "cell", "=", "MixedLTCCell", "(", "units", "=", "config", "[", "\"size\"", "]", ")", "\n", "", "elif", "config", "[", "\"use_mixed\"", "]", ":", "\n", "        ", "cell", "=", "MixedCfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "", "else", ":", "\n", "        ", "cell", "=", "CfcCell", "(", "units", "=", "config", "[", "\"size\"", "]", ",", "hparams", "=", "config", ")", "\n", "\n", "", "data", "=", "TrafficData", "(", "seq_len", "=", "32", ",", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ")", "\n", "\n", "signal_input", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "(", "data", ".", "seq_len", ",", "data", ".", "input_size", ")", ",", "name", "=", "\"robot\"", ")", "\n", "#time_input = tf.keras.Input(shape=(data.seq_len, 1), name=\"time\")", "\n", "\n", "rnn", "=", "tf", ".", "keras", ".", "layers", ".", "RNN", "(", "cell", ",", "time_major", "=", "False", ",", "return_sequences", "=", "False", ")", "\n", "\n", "output_states", "=", "rnn", "(", "(", "signal_input", ")", ")", "\n", "y", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "data", ".", "output_size", ")", "(", "output_states", ")", "\n", "\n", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "[", "signal_input", "]", ",", "outputs", "=", "[", "y", "]", ")", "\n", "\n", "base_lr", "=", "config", "[", "\"base_lr\"", "]", "\n", "decay_lr", "=", "config", "[", "\"decay_lr\"", "]", "\n", "\n", "train_steps", "=", "len", "(", "data", ".", "train_x", ")", "//", "config", "[", "\"batch_size\"", "]", "\n", "learning_rate_fn", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "ExponentialDecay", "(", "\n", "base_lr", ",", "train_steps", ",", "decay_lr", "\n", ")", "\n", "opt", "=", "(", "\n", "tf", ".", "keras", ".", "optimizers", ".", "Adam", "\n", "if", "config", "[", "\"optimizer\"", "]", "==", "\"adam\"", "\n", "else", "tf", ".", "keras", ".", "optimizers", ".", "RMSprop", "\n", ")", "\n", "optimizer", "=", "opt", "(", "learning_rate_fn", ",", "clipnorm", "=", "config", "[", "\"clipnorm\"", "]", ")", "\n", "model", ".", "compile", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "loss", "=", "tf", ".", "keras", ".", "losses", ".", "MeanSquaredError", "(", ")", ",", "\n", ")", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "# Fit model", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "data", ".", "train", ",", "\n", "batch_size", "=", "config", "[", "\"batch_size\"", "]", ",", "\n", "epochs", "=", "config", "[", "\"epochs\"", "]", ",", "\n", "validation_data", "=", "data", ".", "valid", ",", "\n", "callbacks", "=", "[", "BackupCallback", "(", "model", ")", "]", ",", "\n", "verbose", "=", "1", ",", "\n", ")", "\n", "# Evaluate model after training", "\n", "test_loss", "=", "model", ".", "evaluate", "(", "\n", "x", "=", "data", ".", "test", ",", "verbose", "=", "2", "\n", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.score": [[274, 277], ["print", "traffic_with_cfc.eval", "range", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.traffic_with_cfc.eval"], ["def", "score", "(", "config", ")", ":", "\n", "    ", "acc", "=", "[", "eval", "(", "config", ",", "i", ")", "for", "i", "in", "range", "(", "1", ")", "]", "\n", "print", "(", "f\"MSE: {np.mean(acc):0.5f} $\\\\pm$ {np.std(acc):0.5f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.__init__": [[10, 51], ["os.makedirs", "sorted", "numpy.random.RandomState", "numpy.random.RandomState().shuffle", "int", "int", "irregular_sampled_datasets.Walker2dImitationData._load_files", "irregular_sampled_datasets.Walker2dImitationData._load_files", "irregular_sampled_datasets.Walker2dImitationData._load_files", "irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "irregular_sampled_datasets.Walker2dImitationData.align_sequences", "irregular_sampled_datasets.Walker2dImitationData.align_sequences", "irregular_sampled_datasets.Walker2dImitationData.align_sequences", "os.path.isfile", "os.system", "os.system", "os.path.join", "numpy.random.RandomState", "len", "len", "os.listdir", "d.endswith"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData._load_files", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData._load_files", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData._load_files", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.perturb_sequences", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.align_sequences", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.align_sequences", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.align_sequences"], ["    ", "def", "__init__", "(", "self", ",", "seq_len", ")", ":", "\n", "        ", "self", ".", "seq_len", "=", "seq_len", "\n", "os", ".", "makedirs", "(", "\"data\"", ",", "exist_ok", "=", "True", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "\"data/walker/rollout_000.npy\"", ")", ":", "\n", "            ", "os", ".", "system", "(", "\"wget https://pub.ist.ac.at/~mlechner/datasets/walker.zip\"", ")", "\n", "os", ".", "system", "(", "\"unzip walker.zip -d data/\"", ")", "\n", "", "all_files", "=", "sorted", "(", "\n", "[", "\n", "os", ".", "path", ".", "join", "(", "\"data/walker\"", ",", "d", ")", "\n", "for", "d", "in", "os", ".", "listdir", "(", "\"data/walker\"", ")", "\n", "if", "d", ".", "endswith", "(", "\".npy\"", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "891374", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "125487", ")", ".", "shuffle", "(", "all_files", ")", "\n", "# 15% test set, 10% validation set, the rest is for training", "\n", "test_n", "=", "int", "(", "0.15", "*", "len", "(", "all_files", ")", ")", "\n", "valid_n", "=", "int", "(", "(", "0.15", "+", "0.1", ")", "*", "len", "(", "all_files", ")", ")", "\n", "test_files", "=", "all_files", "[", ":", "test_n", "]", "\n", "valid_files", "=", "all_files", "[", "test_n", ":", "valid_n", "]", "\n", "train_files", "=", "all_files", "[", "valid_n", ":", "]", "\n", "\n", "train_x", ",", "train_t", ",", "train_y", "=", "self", ".", "_load_files", "(", "train_files", ")", "\n", "valid_x", ",", "valid_t", ",", "valid_y", "=", "self", ".", "_load_files", "(", "valid_files", ")", "\n", "test_x", ",", "test_t", ",", "test_y", "=", "self", ".", "_load_files", "(", "test_files", ")", "\n", "\n", "train_x", ",", "train_t", ",", "train_y", "=", "self", ".", "perturb_sequences", "(", "train_x", ",", "train_t", ",", "train_y", ")", "\n", "valid_x", ",", "valid_t", ",", "valid_y", "=", "self", ".", "perturb_sequences", "(", "valid_x", ",", "valid_t", ",", "valid_y", ")", "\n", "test_x", ",", "test_t", ",", "test_y", "=", "self", ".", "perturb_sequences", "(", "test_x", ",", "test_t", ",", "test_y", ")", "\n", "\n", "self", ".", "train_x", ",", "self", ".", "train_times", ",", "self", ".", "train_y", "=", "self", ".", "align_sequences", "(", "\n", "train_x", ",", "train_t", ",", "train_y", "\n", ")", "\n", "self", ".", "valid_x", ",", "self", ".", "valid_times", ",", "self", ".", "valid_y", "=", "self", ".", "align_sequences", "(", "\n", "valid_x", ",", "valid_t", ",", "valid_y", "\n", ")", "\n", "self", ".", "test_x", ",", "self", ".", "test_times", ",", "self", ".", "test_y", "=", "self", ".", "align_sequences", "(", "\n", "test_x", ",", "test_t", ",", "test_y", "\n", ")", "\n", "self", ".", "input_size", "=", "self", ".", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.align_sequences": [[56, 76], ["range", "len", "range", "numpy.stack", "numpy.expand_dims", "numpy.stack", "x.append", "times.append", "y.append", "numpy.stack"], "methods", ["None"], ["", "def", "align_sequences", "(", "self", ",", "set_x", ",", "set_t", ",", "set_y", ")", ":", "\n", "\n", "        ", "times", "=", "[", "]", "\n", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "set_y", ")", ")", ":", "\n", "\n", "            ", "seq_x", "=", "set_x", "[", "i", "]", "\n", "seq_t", "=", "set_t", "[", "i", "]", "\n", "seq_y", "=", "set_y", "[", "i", "]", "\n", "\n", "for", "t", "in", "range", "(", "0", ",", "seq_y", ".", "shape", "[", "0", "]", "-", "self", ".", "seq_len", ",", "self", ".", "seq_len", "//", "4", ")", ":", "\n", "                ", "x", ".", "append", "(", "seq_x", "[", "t", ":", "t", "+", "self", ".", "seq_len", "]", ")", "\n", "times", ".", "append", "(", "seq_t", "[", "t", ":", "t", "+", "self", ".", "seq_len", "]", ")", "\n", "y", ".", "append", "(", "seq_y", "[", "t", ":", "t", "+", "self", ".", "seq_len", "]", ")", "\n", "\n", "", "", "return", "(", "\n", "np", ".", "stack", "(", "x", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "expand_dims", "(", "np", ".", "stack", "(", "times", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", ",", "\n", "np", ".", "stack", "(", "y", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData.perturb_sequences": [[78, 105], ["range", "len", "range", "x.append", "times.append", "y.append", "numpy.stack", "numpy.stack", "numpy.stack", "irregular_sampled_datasets.Walker2dImitationData.rng.rand", "new_x.append", "new_times.append", "new_y.append"], "methods", ["None"], ["", "def", "perturb_sequences", "(", "self", ",", "set_x", ",", "set_t", ",", "set_y", ")", ":", "\n", "\n", "        ", "x", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "set_y", ")", ")", ":", "\n", "\n", "            ", "seq_x", "=", "set_x", "[", "i", "]", "\n", "seq_y", "=", "set_y", "[", "i", "]", "\n", "\n", "new_x", ",", "new_times", "=", "[", "]", ",", "[", "]", "\n", "new_y", "=", "[", "]", "\n", "\n", "skip", "=", "0", "\n", "for", "t", "in", "range", "(", "seq_y", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "skip", "+=", "1", "\n", "if", "self", ".", "rng", ".", "rand", "(", ")", "<", "0.9", ":", "\n", "                    ", "new_x", ".", "append", "(", "seq_x", "[", "t", "]", ")", "\n", "new_times", ".", "append", "(", "skip", ")", "\n", "new_y", ".", "append", "(", "seq_y", "[", "t", "]", ")", "\n", "skip", "=", "0", "\n", "\n", "", "", "x", ".", "append", "(", "np", ".", "stack", "(", "new_x", ",", "axis", "=", "0", ")", ")", "\n", "times", ".", "append", "(", "np", ".", "stack", "(", "new_times", ",", "axis", "=", "0", ")", ")", "\n", "y", ".", "append", "(", "np", ".", "stack", "(", "new_y", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "x", ",", "times", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.Walker2dImitationData._load_files": [[106, 123], ["numpy.load", "arr[].astype", "arr[].astype", "numpy.ones", "all_x.append", "all_t.append", "all_y.append"], "methods", ["None"], ["", "def", "_load_files", "(", "self", ",", "files", ")", ":", "\n", "        ", "all_x", "=", "[", "]", "\n", "all_t", "=", "[", "]", "\n", "all_y", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "\n", "            ", "arr", "=", "np", ".", "load", "(", "f", ")", "\n", "x_state", "=", "arr", "[", ":", "-", "1", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "arr", "[", "1", ":", ",", ":", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "x_times", "=", "np", ".", "ones", "(", "x_state", ".", "shape", "[", "0", "]", ")", "\n", "all_x", ".", "append", "(", "x_state", ")", "\n", "all_t", ".", "append", "(", "x_times", ")", "\n", "all_y", ".", "append", "(", "y", ")", "\n", "\n", "# print(\"Loaded file '{}' of length {:d}\".format(f, x_state.shape[0]))", "\n", "", "return", "all_x", ",", "all_t", ",", "all_y", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.__init__": [[126, 135], ["irregular_sampled_datasets.ETSMnistData.load_from_cache", "irregular_sampled_datasets.ETSMnistData.create_dataset"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.load_from_cache", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_dataset"], ["    ", "def", "__init__", "(", "self", ",", "time_major", ",", "pad_size", "=", "256", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "128", "\n", "self", ".", "pad_size", "=", "pad_size", "\n", "\n", "if", "not", "self", ".", "load_from_cache", "(", ")", ":", "\n", "            ", "self", ".", "create_dataset", "(", ")", "\n", "\n", "", "self", ".", "train_elapsed", "/=", "self", ".", "pad_size", "\n", "self", ".", "test_elapsed", "/=", "self", ".", "pad_size", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.load_from_cache": [[136, 159], ["os.path.isfile", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "print", "print", "print", "print", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "load_from_cache", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "\"dataset/test_mask.npy\"", ")", ":", "\n", "            ", "self", ".", "train_events", "=", "np", ".", "load", "(", "\"dataset/train_events.npy\"", ")", "\n", "self", ".", "train_elapsed", "=", "np", ".", "load", "(", "\"dataset/train_elapsed.npy\"", ")", "\n", "self", ".", "train_mask", "=", "np", ".", "load", "(", "\"dataset/train_mask.npy\"", ")", "\n", "self", ".", "train_y", "=", "np", ".", "load", "(", "\"dataset/train_y.npy\"", ")", "\n", "\n", "self", ".", "test_events", "=", "np", ".", "load", "(", "\"dataset/test_events.npy\"", ")", "\n", "self", ".", "test_elapsed", "=", "np", ".", "load", "(", "\"dataset/test_elapsed.npy\"", ")", "\n", "self", ".", "test_mask", "=", "np", ".", "load", "(", "\"dataset/test_mask.npy\"", ")", "\n", "self", ".", "test_y", "=", "np", ".", "load", "(", "\"dataset/test_y.npy\"", ")", "\n", "\n", "print", "(", "\"train_events.shape: \"", ",", "str", "(", "self", ".", "train_events", ".", "shape", ")", ")", "\n", "print", "(", "\"train_elapsed.shape: \"", ",", "str", "(", "self", ".", "train_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"train_mask.shape: \"", ",", "str", "(", "self", ".", "train_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"train_y.shape: \"", ",", "str", "(", "self", ".", "train_y", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"test_events.shape: \"", ",", "str", "(", "self", ".", "test_events", ".", "shape", ")", ")", "\n", "print", "(", "\"test_elapsed.shape: \"", ",", "str", "(", "self", ".", "test_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"test_mask.shape: \"", ",", "str", "(", "self", ".", "test_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"test_y.shape: \"", ",", "str", "(", "self", ".", "test_y", ".", "shape", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.transform_sample": [[160, 186], ["x.flatten.flatten.flatten", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "irregular_sampled_datasets.ETSMnistData._all_lenghts.append", "int"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.flatten"], ["", "def", "transform_sample", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", ")", "\n", "\n", "events", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "elapsed", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "last_char", "=", "-", "1", "\n", "write_index", "=", "0", "\n", "elapsed_counter", "=", "0", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "elapsed_counter", "+=", "1", "\n", "char", "=", "int", "(", "x", "[", "i", "]", ">", "self", ".", "threshold", ")", "\n", "if", "last_char", "!=", "char", ":", "\n", "                ", "events", "[", "write_index", "]", "=", "char", "\n", "elapsed", "[", "write_index", "]", "=", "elapsed_counter", "\n", "mask", "[", "write_index", "]", "=", "True", "\n", "write_index", "+=", "1", "\n", "if", "write_index", ">=", "self", ".", "pad_size", ":", "\n", "# Enough 1s in this sample, abort", "\n", "                    ", "self", ".", "_abort_counter", "+=", "1", "\n", "break", "\n", "", "elapsed_counter", "=", "0", "\n", "", "last_char", "=", "char", "\n", "", "self", ".", "_all_lenghts", ".", "append", "(", "write_index", ")", "\n", "return", "events", ",", "elapsed", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.transform_array": [[187, 202], ["tqdm.tqdm.tqdm", "range", "irregular_sampled_datasets.ETSMnistData.transform_sample", "events_list.append", "elapsed_list.append", "mask_list.append", "numpy.stack", "numpy.stack", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.transform_sample"], ["", "def", "transform_array", "(", "self", ",", "x", ")", ":", "\n", "        ", "events_list", "=", "[", "]", "\n", "elapsed_list", "=", "[", "]", "\n", "mask_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "            ", "events", ",", "elapsed", ",", "mask", "=", "self", ".", "transform_sample", "(", "x", "[", "i", "]", ")", "\n", "events_list", ".", "append", "(", "events", ")", "\n", "elapsed_list", ".", "append", "(", "elapsed", ")", "\n", "mask_list", ".", "append", "(", "mask", ")", "\n", "\n", "", "return", "(", "\n", "np", ".", "stack", "(", "events_list", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "elapsed_list", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "mask_list", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.create_dataset": [[204, 237], ["tensorflow.keras.datasets.mnist.load_data", "train_x.reshape.reshape.reshape", "test_x.reshape.reshape.reshape", "print", "irregular_sampled_datasets.ETSMnistData.transform_array", "print", "irregular_sampled_datasets.ETSMnistData.transform_array", "print", "print", "os.makedirs", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "str", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.transform_array", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.ETSMnistData.transform_array", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["", "def", "create_dataset", "(", "self", ")", ":", "\n", "        ", "(", "train_x", ",", "train_y", ")", ",", "(", "test_x", ",", "test_y", ")", "=", "tf", ".", "keras", ".", "datasets", ".", "mnist", ".", "load_data", "(", ")", "\n", "\n", "self", ".", "_all_lenghts", "=", "[", "]", "\n", "self", ".", "_abort_counter", "=", "0", "\n", "\n", "train_x", "=", "train_x", ".", "reshape", "(", "[", "-", "1", ",", "28", "*", "28", "]", ")", "\n", "test_x", "=", "test_x", ".", "reshape", "(", "[", "-", "1", ",", "28", "*", "28", "]", ")", "\n", "\n", "self", ".", "train_y", "=", "train_y", "\n", "self", ".", "test_y", "=", "test_y", "\n", "\n", "print", "(", "\"Transforming training samples\"", ")", "\n", "self", ".", "train_events", ",", "self", ".", "train_elapsed", ",", "self", ".", "train_mask", "=", "self", ".", "transform_array", "(", "\n", "train_x", "\n", ")", "\n", "print", "(", "\"Transforming test samples\"", ")", "\n", "self", ".", "test_events", ",", "self", ".", "test_elapsed", ",", "self", ".", "test_mask", "=", "self", ".", "transform_array", "(", "\n", "test_x", "\n", ")", "\n", "\n", "print", "(", "\"Average time-series length: {:0.2f}\"", ".", "format", "(", "np", ".", "mean", "(", "self", ".", "_all_lenghts", ")", ")", ")", "\n", "print", "(", "\"Abort counter: \"", ",", "str", "(", "self", ".", "_abort_counter", ")", ")", "\n", "os", ".", "makedirs", "(", "\"dataset\"", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "save", "(", "\"dataset/train_events.npy\"", ",", "self", ".", "train_events", ")", "\n", "np", ".", "save", "(", "\"dataset/train_elapsed.npy\"", ",", "self", ".", "train_elapsed", ")", "\n", "np", ".", "save", "(", "\"dataset/train_mask.npy\"", ",", "self", ".", "train_mask", ")", "\n", "np", ".", "save", "(", "\"dataset/train_y.npy\"", ",", "self", ".", "train_y", ")", "\n", "\n", "np", ".", "save", "(", "\"dataset/test_events.npy\"", ",", "self", ".", "test_events", ")", "\n", "np", ".", "save", "(", "\"dataset/test_elapsed.npy\"", ",", "self", ".", "test_elapsed", ")", "\n", "np", ".", "save", "(", "\"dataset/test_mask.npy\"", ",", "self", ".", "test_mask", ")", "\n", "np", ".", "save", "(", "\"dataset/test_y.npy\"", ",", "self", ".", "test_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.__init__": [[261, 292], ["irregular_sampled_datasets.PersonData.load_crappy_formated_csv", "irregular_sampled_datasets.PersonData.cut_in_sequences", "print", "print", "print", "print", "numpy.random.RandomState().permutation", "int", "int", "print", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "numpy.random.RandomState"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.load_crappy_formated_csv", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.cut_in_sequences"], ["def", "__init__", "(", "self", ",", "seq_len", "=", "32", ")", ":", "\n", "\n", "        ", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_classes", "=", "7", "\n", "all_x", ",", "all_t", ",", "all_y", "=", "self", ".", "load_crappy_formated_csv", "(", ")", "\n", "all_x", ",", "all_t", ",", "all_y", "=", "self", ".", "cut_in_sequences", "(", "\n", "all_x", ",", "all_t", ",", "all_y", ",", "seq_len", "=", "seq_len", ",", "inc", "=", "seq_len", "//", "2", "\n", ")", "\n", "\n", "print", "(", "\"all_x.shape: \"", ",", "str", "(", "all_x", ".", "shape", ")", ")", "\n", "print", "(", "\"all_t.shape: \"", ",", "str", "(", "all_t", ".", "shape", ")", ")", "\n", "print", "(", "\"all_y.shape: \"", ",", "str", "(", "all_y", ".", "shape", ")", ")", "\n", "total_seqs", "=", "all_x", ".", "shape", "[", "0", "]", "\n", "print", "(", "\"Total number of sequences: {}\"", ".", "format", "(", "total_seqs", ")", ")", "\n", "permutation", "=", "np", ".", "random", ".", "RandomState", "(", "98841", ")", ".", "permutation", "(", "total_seqs", ")", "\n", "test_size", "=", "int", "(", "0.2", "*", "total_seqs", ")", "\n", "\n", "self", ".", "test_x", "=", "all_x", "[", "permutation", "[", ":", "test_size", "]", "]", "\n", "self", ".", "test_y", "=", "all_y", "[", "permutation", "[", ":", "test_size", "]", "]", "\n", "self", ".", "test_t", "=", "all_t", "[", "permutation", "[", ":", "test_size", "]", "]", "\n", "self", ".", "train_x", "=", "all_x", "[", "permutation", "[", "test_size", ":", "]", "]", "\n", "self", ".", "train_t", "=", "all_t", "[", "permutation", "[", "test_size", ":", "]", "]", "\n", "self", ".", "train_y", "=", "all_y", "[", "permutation", "[", "test_size", ":", "]", "]", "\n", "\n", "self", ".", "feature_size", "=", "int", "(", "self", ".", "train_x", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "print", "(", "\"train_x.shape: \"", ",", "str", "(", "self", ".", "train_x", ".", "shape", ")", ")", "\n", "print", "(", "\"train_t.shape: \"", ",", "str", "(", "self", ".", "train_t", ".", "shape", ")", ")", "\n", "print", "(", "\"train_y.shape: \"", ",", "str", "(", "self", ".", "train_y", ".", "shape", ")", ")", "\n", "print", "(", "\"Total number of train sequences: {}\"", ".", "format", "(", "self", ".", "train_x", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "\"Total number of test  sequences: {}\"", ".", "format", "(", "self", ".", "test_x", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.load_crappy_formated_csv": [[293, 357], ["os.path.isfile", "print", "print", "print", "sys.exit", "open", "line.split", "numpy.array", "numpy.zeros", "numpy.concatenate", "numpy.stack.append", "numpy.stack.append", "numpy.array.append", "len", "numpy.stack", "numpy.stack", "numpy.array", "all_x.append", "all_t.append", "all_y.append", "numpy.int64", "float", "arr[].replace"], "methods", ["None"], ["", "def", "load_crappy_formated_csv", "(", "self", ")", ":", "\n", "\n", "        ", "all_x", "=", "[", "]", "\n", "all_y", "=", "[", "]", "\n", "all_t", "=", "[", "]", "\n", "\n", "series_x", "=", "[", "]", "\n", "series_t", "=", "[", "]", "\n", "series_y", "=", "[", "]", "\n", "\n", "last_millis", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "\"data/person/ConfLongDemo_JSI.txt\"", ")", ":", "\n", "            ", "print", "(", "\"ERROR: File 'data/person/ConfLongDemo_JSI.txt' not found\"", ")", "\n", "print", "(", "\"Please execute the command\"", ")", "\n", "print", "(", "\"source download_dataset.sh\"", ")", "\n", "import", "sys", "\n", "\n", "sys", ".", "exit", "(", "-", "1", ")", "\n", "", "with", "open", "(", "\"data/person/ConfLongDemo_JSI.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "current_person", "=", "\"A01\"", "\n", "\n", "for", "line", "in", "f", ":", "\n", "                ", "arr", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "if", "len", "(", "arr", ")", "<", "6", ":", "\n", "                    ", "break", "\n", "", "if", "arr", "[", "0", "]", "!=", "current_person", ":", "\n", "# Enque and reset", "\n", "                    ", "series_x", "=", "np", ".", "stack", "(", "series_x", ",", "axis", "=", "0", ")", "\n", "series_t", "=", "np", ".", "stack", "(", "series_t", ",", "axis", "=", "0", ")", "\n", "series_y", "=", "np", ".", "array", "(", "series_y", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "all_x", ".", "append", "(", "series_x", ")", "\n", "all_t", ".", "append", "(", "series_t", ")", "\n", "all_y", ".", "append", "(", "series_y", ")", "\n", "last_millis", "=", "None", "\n", "series_x", "=", "[", "]", "\n", "series_y", "=", "[", "]", "\n", "series_t", "=", "[", "]", "\n", "\n", "", "millis", "=", "np", ".", "int64", "(", "arr", "[", "2", "]", ")", "/", "(", "100", "*", "1000", ")", "\n", "# 100ms will be normalized to 1.0", "\n", "millis_mapped_to_1", "=", "10.0", "\n", "if", "last_millis", "is", "None", ":", "\n", "                    ", "elasped_sec", "=", "0.05", "\n", "", "else", ":", "\n", "                    ", "elasped_sec", "=", "float", "(", "millis", "-", "last_millis", ")", "/", "1000.0", "\n", "", "elasped", "=", "elasped_sec", "*", "1000", "/", "millis_mapped_to_1", "\n", "\n", "last_millis", "=", "millis", "\n", "current_person", "=", "arr", "[", "0", "]", "\n", "sensor_id", "=", "self", ".", "sensor_ids", "[", "arr", "[", "1", "]", "]", "\n", "label_col", "=", "self", ".", "class_map", "[", "arr", "[", "7", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "]", "\n", "feature_col_2", "=", "np", ".", "array", "(", "arr", "[", "4", ":", "7", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# Last 3 entries of the feature vector contain sensor value", "\n", "\n", "# First 4 entries of the feature vector contain sensor ID", "\n", "feature_col_1", "=", "np", ".", "zeros", "(", "4", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "feature_col_1", "[", "sensor_id", "]", "=", "1", "\n", "\n", "feature_col", "=", "np", ".", "concatenate", "(", "[", "feature_col_1", ",", "feature_col_2", "]", ")", "\n", "series_x", ".", "append", "(", "feature_col", ")", "\n", "series_t", ".", "append", "(", "elasped", ")", "\n", "series_y", ".", "append", "(", "label_col", ")", "\n", "\n", "", "", "return", "all_x", ",", "all_t", ",", "all_y", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.PersonData.cut_in_sequences": [[358, 378], ["range", "len", "range", "numpy.stack", "numpy.stack().reshape", "numpy.stack", "sequences_x.append", "sequences_t.append", "sequences_y.append", "numpy.stack"], "methods", ["None"], ["", "def", "cut_in_sequences", "(", "self", ",", "all_x", ",", "all_t", ",", "all_y", ",", "seq_len", ",", "inc", "=", "1", ")", ":", "\n", "\n", "        ", "sequences_x", "=", "[", "]", "\n", "sequences_t", "=", "[", "]", "\n", "sequences_y", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "all_x", ")", ")", ":", "\n", "            ", "x", ",", "t", ",", "y", "=", "all_x", "[", "i", "]", ",", "all_t", "[", "i", "]", ",", "all_y", "[", "i", "]", "\n", "\n", "for", "s", "in", "range", "(", "0", ",", "x", ".", "shape", "[", "0", "]", "-", "seq_len", ",", "inc", ")", ":", "\n", "                ", "start", "=", "s", "\n", "end", "=", "start", "+", "seq_len", "\n", "sequences_x", ".", "append", "(", "x", "[", "start", ":", "end", "]", ")", "\n", "sequences_t", ".", "append", "(", "t", "[", "start", ":", "end", "]", ")", "\n", "sequences_y", ".", "append", "(", "y", "[", "start", ":", "end", "]", ")", "\n", "\n", "", "", "return", "(", "\n", "np", ".", "stack", "(", "sequences_x", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "sequences_t", ",", "axis", "=", "0", ")", ".", "reshape", "(", "[", "-", "1", ",", "seq_len", ",", "1", "]", ")", ",", "\n", "np", ".", "stack", "(", "sequences_y", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.__init__": [[382, 391], ["irregular_sampled_datasets.XORData.load_from_cache", "irregular_sampled_datasets.XORData.create_dataset"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.load_from_cache", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_dataset"], ["    ", "def", "__init__", "(", "self", ",", "time_major", ",", "event_based", "=", "True", ",", "pad_size", "=", "24", ")", ":", "\n", "        ", "self", ".", "pad_size", "=", "pad_size", "\n", "self", ".", "event_based", "=", "event_based", "\n", "self", ".", "_abort_counter", "=", "0", "\n", "if", "not", "self", ".", "load_from_cache", "(", ")", ":", "\n", "            ", "self", ".", "create_dataset", "(", ")", "\n", "\n", "", "self", ".", "train_elapsed", "/=", "self", ".", "pad_size", "\n", "self", ".", "test_elapsed", "/=", "self", ".", "pad_size", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.load_from_cache": [[392, 415], ["os.path.isfile", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "print", "print", "print", "print", "print", "print", "print", "print", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "load_from_cache", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "\"dataset/xor_test_y.npy\"", ")", ":", "\n", "            ", "self", ".", "train_events", "=", "np", ".", "load", "(", "\"dataset/xor_train_events.npy\"", ")", "\n", "self", ".", "train_elapsed", "=", "np", ".", "load", "(", "\"dataset/xor_train_elapsed.npy\"", ")", "\n", "self", ".", "train_mask", "=", "np", ".", "load", "(", "\"dataset/xor_train_mask.npy\"", ")", "\n", "self", ".", "train_y", "=", "np", ".", "load", "(", "\"dataset/xor_train_y.npy\"", ")", "\n", "\n", "self", ".", "test_events", "=", "np", ".", "load", "(", "\"dataset/xor_test_events.npy\"", ")", "\n", "self", ".", "test_elapsed", "=", "np", ".", "load", "(", "\"dataset/xor_test_elapsed.npy\"", ")", "\n", "self", ".", "test_mask", "=", "np", ".", "load", "(", "\"dataset/xor_test_mask.npy\"", ")", "\n", "self", ".", "test_y", "=", "np", ".", "load", "(", "\"dataset/xor_test_y.npy\"", ")", "\n", "\n", "print", "(", "\"train_events.shape: \"", ",", "str", "(", "self", ".", "train_events", ".", "shape", ")", ")", "\n", "print", "(", "\"train_elapsed.shape: \"", ",", "str", "(", "self", ".", "train_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"train_mask.shape: \"", ",", "str", "(", "self", ".", "train_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"train_y.shape: \"", ",", "str", "(", "self", ".", "train_y", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"test_events.shape: \"", ",", "str", "(", "self", ".", "test_events", ".", "shape", ")", ")", "\n", "print", "(", "\"test_elapsed.shape: \"", ",", "str", "(", "self", ".", "test_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"test_mask.shape: \"", ",", "str", "(", "self", ".", "test_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"test_y.shape: \"", ",", "str", "(", "self", ".", "test_y", ".", "shape", ")", ")", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_event_based_sample": [[416, 450], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "rng.randint", "range", "int", "rng.randint"], "methods", ["None"], ["", "def", "create_event_based_sample", "(", "self", ",", "rng", ")", ":", "\n", "\n", "        ", "label", "=", "0", "\n", "events", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "elapsed", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "last_char", "=", "-", "1", "\n", "write_index", "=", "0", "\n", "elapsed_counter", "=", "0", "\n", "length", "=", "rng", ".", "randint", "(", "low", "=", "2", ",", "high", "=", "self", ".", "pad_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "elapsed_counter", "+=", "1", "\n", "\n", "char", "=", "int", "(", "rng", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ")", ")", "\n", "label", "+=", "char", "\n", "if", "last_char", "!=", "char", ":", "\n", "                ", "events", "[", "write_index", "]", "=", "char", "\n", "elapsed", "[", "write_index", "]", "=", "elapsed_counter", "\n", "mask", "[", "write_index", "]", "=", "True", "\n", "write_index", "+=", "1", "\n", "elapsed_counter", "=", "0", "\n", "if", "write_index", ">=", "self", ".", "pad_size", "-", "1", ":", "\n", "# Enough 1s in this sample, abort", "\n", "                    ", "self", ".", "_abort_counter", "+=", "1", "\n", "break", "\n", "", "", "last_char", "=", "char", "\n", "", "if", "elapsed_counter", ">", "0", ":", "\n", "            ", "events", "[", "write_index", "]", "=", "char", "\n", "elapsed", "[", "write_index", "]", "=", "elapsed_counter", "\n", "mask", "[", "write_index", "]", "=", "True", "\n", "", "label", "=", "label", "%", "2", "\n", "return", "events", ",", "elapsed", ",", "mask", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_dense_sample": [[451, 477], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "rng.randint", "range", "int", "int", "rng.randint", "numpy.sum"], "methods", ["None"], ["", "def", "create_dense_sample", "(", "self", ",", "rng", ")", ":", "\n", "\n", "        ", "label", "=", "0", "\n", "events", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "elapsed", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", ",", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "self", ".", "pad_size", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "last_char", "=", "-", "1", "\n", "write_index", "=", "0", "\n", "elapsed_counter", "=", "0", "\n", "\n", "length", "=", "rng", ".", "randint", "(", "low", "=", "2", ",", "high", "=", "self", ".", "pad_size", ")", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "            ", "elapsed_counter", "+=", "1", "\n", "\n", "char", "=", "int", "(", "rng", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "2", ")", ")", "\n", "label", "+=", "char", "\n", "events", "[", "write_index", "]", "=", "char", "\n", "elapsed", "[", "write_index", "]", "=", "elapsed_counter", "\n", "mask", "[", "write_index", "]", "=", "True", "\n", "write_index", "+=", "1", "\n", "elapsed_counter", "=", "0", "\n", "", "label", "=", "label", "%", "2", "\n", "label2", "=", "int", "(", "np", ".", "sum", "(", "events", ")", ")", "%", "2", "\n", "assert", "label", "==", "label2", "\n", "return", "events", ",", "elapsed", ",", "mask", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_set": [[478, 500], ["numpy.random.RandomState", "tqdm.tqdm.tqdm", "range", "events_list.append", "elapsed_list.append", "mask_list.append", "label_list.append", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "irregular_sampled_datasets.XORData.create_event_based_sample", "irregular_sampled_datasets.XORData.create_dense_sample"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_event_based_sample", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_dense_sample"], ["", "def", "create_set", "(", "self", ",", "size", ",", "seed", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "events_list", "=", "[", "]", "\n", "elapsed_list", "=", "[", "]", "\n", "mask_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "size", ")", ")", ":", "\n", "            ", "if", "self", ".", "event_based", ":", "\n", "                ", "events", ",", "elapsed", ",", "mask", ",", "label", "=", "self", ".", "create_event_based_sample", "(", "rng", ")", "\n", "", "else", ":", "\n", "                ", "events", ",", "elapsed", ",", "mask", ",", "label", "=", "self", ".", "create_dense_sample", "(", "rng", ")", "\n", "", "events_list", ".", "append", "(", "events", ")", "\n", "elapsed_list", ".", "append", "(", "elapsed", ")", "\n", "mask_list", ".", "append", "(", "mask", ")", "\n", "label_list", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "(", "\n", "np", ".", "stack", "(", "events_list", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "elapsed_list", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "mask_list", ",", "axis", "=", "0", ")", ",", "\n", "np", ".", "stack", "(", "label_list", ",", "axis", "=", "0", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_dataset": [[502, 540], ["print", "irregular_sampled_datasets.XORData.create_set", "print", "irregular_sampled_datasets.XORData.create_set", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.makedirs", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_set", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.XORData.create_set", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["", "def", "create_dataset", "(", "self", ")", ":", "\n", "\n", "        ", "print", "(", "\"Transforming training samples\"", ")", "\n", "(", "\n", "self", ".", "train_events", ",", "\n", "self", ".", "train_elapsed", ",", "\n", "self", ".", "train_mask", ",", "\n", "self", ".", "train_y", ",", "\n", ")", "=", "self", ".", "create_set", "(", "100000", ",", "1234984", ")", "\n", "print", "(", "\"Transforming test samples\"", ")", "\n", "(", "\n", "self", ".", "test_events", ",", "\n", "self", ".", "test_elapsed", ",", "\n", "self", ".", "test_mask", ",", "\n", "self", ".", "test_y", ",", "\n", ")", "=", "self", ".", "create_set", "(", "10000", ",", "48736", ")", "\n", "\n", "print", "(", "\"train_events.shape: \"", ",", "str", "(", "self", ".", "train_events", ".", "shape", ")", ")", "\n", "print", "(", "\"train_elapsed.shape: \"", ",", "str", "(", "self", ".", "train_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"train_mask.shape: \"", ",", "str", "(", "self", ".", "train_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"train_y.shape: \"", ",", "str", "(", "self", ".", "train_y", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"test_events.shape: \"", ",", "str", "(", "self", ".", "test_events", ".", "shape", ")", ")", "\n", "print", "(", "\"test_elapsed.shape: \"", ",", "str", "(", "self", ".", "test_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"test_mask.shape: \"", ",", "str", "(", "self", ".", "test_mask", ".", "shape", ")", ")", "\n", "print", "(", "\"test_y.shape: \"", ",", "str", "(", "self", ".", "test_y", ".", "shape", ")", ")", "\n", "\n", "print", "(", "\"Abort counter: \"", ",", "str", "(", "self", ".", "_abort_counter", ")", ")", "\n", "os", ".", "makedirs", "(", "\"dataset\"", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_train_events.npy\"", ",", "self", ".", "train_events", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_train_elapsed.npy\"", ",", "self", ".", "train_elapsed", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_train_mask.npy\"", ",", "self", ".", "train_mask", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_train_y.npy\"", ",", "self", ".", "train_y", ")", "\n", "\n", "np", ".", "save", "(", "\"dataset/xor_test_events.npy\"", ",", "self", ".", "test_events", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_test_elapsed.npy\"", ",", "self", ".", "test_elapsed", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_test_mask.npy\"", ",", "self", ".", "test_mask", ")", "\n", "np", ".", "save", "(", "\"dataset/xor_test_y.npy\"", ",", "self", ".", "test_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.NBodyData.__init__": [[543, 568], ["irregular_sampled_datasets.NBodyData.load_file", "irregular_sampled_datasets.NBodyData.load_file", "irregular_sampled_datasets.NBodyData.load_file", "print", "print", "print", "print", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.NBodyData.load_file", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.NBodyData.load_file", "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.NBodyData.load_file"], ["    ", "def", "__init__", "(", "self", ",", "seq_len", ",", "mask_len", ")", ":", "\n", "        ", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "mask_len", "=", "mask_len", "\n", "\n", "(", "\n", "self", ".", "train_x", ",", "\n", "self", ".", "train_elapsed", ",", "\n", "self", ".", "train_mask", ",", "\n", "self", ".", "train_y", ",", "\n", ")", "=", "self", ".", "load_file", "(", "\"data/nbody/train.npz\"", ")", "\n", "(", "\n", "self", ".", "valid_x", ",", "\n", "self", ".", "valid_elapsed", ",", "\n", "self", ".", "valid_mask", ",", "\n", "self", ".", "valid_y", ",", "\n", ")", "=", "self", ".", "load_file", "(", "\"data/nbody/valid.npz\"", ")", "\n", "self", ".", "test_x", ",", "self", ".", "test_elapsed", ",", "self", ".", "test_mask", ",", "self", ".", "test_y", "=", "self", ".", "load_file", "(", "\n", "\"data/nbody/test.npz\"", "\n", ")", "\n", "self", ".", "input_size", "=", "self", ".", "train_x", ".", "shape", "[", "-", "1", "]", "\n", "\n", "print", "(", "\"train_elapsed \"", ",", "str", "(", "self", ".", "train_elapsed", ".", "shape", ")", ")", "\n", "print", "(", "\"train_x: \"", ",", "str", "(", "self", ".", "train_x", ".", "shape", ")", ")", "\n", "print", "(", "\"train_y: \"", ",", "str", "(", "self", ".", "train_y", ".", "shape", ")", ")", "\n", "print", "(", "\"train_mask: \"", ",", "str", "(", "self", ".", "train_mask", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.irregular_sampled_datasets.NBodyData.load_file": [[569, 596], ["numpy.load", "x.reshape.reshape.reshape", "range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.expand_dims", "numpy.zeros", "numpy.expand_dims", "numpy.expand_dims.append", "numpy.concatenate.append", "numpy.concatenate.append", "numpy.expand_dims.astype"], "methods", ["None"], ["", "def", "load_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "arr", "=", "np", ".", "load", "(", "filename", ")", "\n", "x", "=", "arr", "[", "\"x\"", "]", "\n", "t", "=", "arr", "[", "\"t\"", "]", "\n", "x", "=", "x", ".", "reshape", "(", "(", "t", ".", "shape", "[", "0", "]", ",", "t", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "all_x", "=", "[", "]", "\n", "all_y", "=", "[", "]", "\n", "all_elapsed", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "x", ".", "shape", "[", "1", "]", "-", "self", ".", "seq_len", "-", "1", ",", "self", ".", "seq_len", "//", "2", ")", ":", "\n", "            ", "all_elapsed", ".", "append", "(", "\n", "t", "[", ":", ",", "i", "+", "1", ":", "i", "+", "self", ".", "seq_len", "+", "1", "]", "-", "t", "[", ":", ",", "i", ":", "i", "+", "self", ".", "seq_len", "]", "\n", ")", "\n", "all_x", ".", "append", "(", "x", "[", ":", ",", "i", ":", "i", "+", "self", ".", "seq_len", "]", ")", "\n", "# Predict relative change", "\n", "all_y", ".", "append", "(", "\n", "x", "[", ":", ",", "i", "+", "1", ":", "i", "+", "self", ".", "seq_len", "+", "1", "]", "-", "x", "[", ":", ",", "i", ":", "i", "+", "self", ".", "seq_len", "]", "\n", ")", "\n", "", "all_x", "=", "np", ".", "concatenate", "(", "all_x", ",", "axis", "=", "0", ")", "\n", "all_y", "=", "np", ".", "concatenate", "(", "all_y", ",", "axis", "=", "0", ")", "\n", "all_elapsed", "=", "np", ".", "concatenate", "(", "all_elapsed", ",", "axis", "=", "0", ")", "\n", "all_elapsed", "=", "np", ".", "expand_dims", "(", "all_elapsed", ",", "axis", "=", "-", "1", ")", "\n", "all_mask", "=", "np", ".", "zeros", "(", "(", "all_x", ".", "shape", "[", "0", "]", ",", "self", ".", "seq_len", ")", ",", "np", ".", "bool", ")", "\n", "all_mask", "[", ":", ",", "self", ".", "mask_len", ":", "]", "=", "1", "\n", "all_mask", "=", "np", ".", "expand_dims", "(", "all_mask", ",", "axis", "=", "-", "1", ")", "\n", "all_y", "=", "all_y", "*", "all_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "all_x", ",", "all_elapsed", ",", "all_mask", ",", "all_y", "", "", "", ""]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__init__": [[184, 228], ["torch.device", "duv_physionet.PhysioNet.download", "duv_physionet.PhysioNet._check_exists", "RuntimeError", "torch.device", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.download", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet._check_exists"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "False", ",", "\n", "quantization", "=", "0.1", ",", "\n", "n_samples", "=", "None", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "reduce", "=", "\"average\"", "\n", "self", ".", "quantization", "=", "quantization", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", "device", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Dataset not found. You can use download=True to download it\"", "\n", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "data_file", "=", "self", ".", "training_file", "\n", "", "else", ":", "\n", "            ", "data_file", "=", "self", ".", "test_file", "\n", "\n", "", "if", "device", "==", "torch", ".", "device", "(", "\"cpu\"", ")", ":", "\n", "            ", "self", ".", "data", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "data_file", ")", ",", "map_location", "=", "\"cpu\"", "\n", ")", "\n", "self", ".", "labels", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "label_file", ")", ",", "map_location", "=", "\"cpu\"", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "data_file", ")", ")", "\n", "self", ".", "labels", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "self", ".", "label_file", ")", "\n", ")", "\n", "\n", "", "if", "n_samples", "is", "not", "None", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", ":", "n_samples", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", ":", "n_samples", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.download": [[229, 335], ["duv_physionet.PhysioNet._check_exists", "os.makedirs", "os.makedirs", "print", "torchvision.datasets.utils.download_url", "os.path.join", "torchvision.datasets.utils.download_url", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "print", "os.path.join", "os.listdir", "torch.save", "url.rpartition", "open", "f.readlines", "torch.save", "url.rpartition", "os.path.join", "torch.tensor().to", "torch.stack", "torch.stack", "patients.append", "os.path.join", "l.rstrip().split.rstrip().split.rstrip().split", "torch.Tensor().to", "os.path.join", "filename.split", "os.path.join.split", "open", "f.readlines", "numpy.array().astype", "os.path.join", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "l.rstrip().split.rstrip().split.split", "torch.tensor", "l.rstrip().split.rstrip().split.rstrip", "torch.Tensor", "len", "float", "round", "torch.tensor().to.append", "torch.stack.append", "torch.stack.append", "nobs.append", "str", "numpy.array", "filename.split", "torch.zeros", "torch.zeros", "float", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "float", "len", "len", "time.split", "filename.split", "time.split", "torch.zeros", "torch.zeros", "torch.zeros", "float", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet._check_exists", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.makedirs"], ["", "", "def", "download", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "# self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")", "\n", "\n", "", "os", ".", "makedirs", "(", "self", ".", "raw_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "processed_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Download outcome data", "\n", "for", "url", "in", "self", ".", "outcome_urls", ":", "\n", "            ", "filename", "=", "url", ".", "rpartition", "(", "\"/\"", ")", "[", "2", "]", "\n", "download_url", "(", "url", ",", "self", ".", "raw_folder", ",", "filename", ",", "None", ")", "\n", "\n", "txtfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "filename", ")", "\n", "with", "open", "(", "txtfile", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "outcomes", "=", "{", "}", "\n", "for", "l", "in", "lines", "[", "1", ":", "]", ":", "\n", "                    ", "l", "=", "l", ".", "rstrip", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "record_id", ",", "labels", "=", "l", "[", "0", "]", ",", "np", ".", "array", "(", "l", "[", "1", ":", "]", ")", ".", "astype", "(", "float", ")", "\n", "outcomes", "[", "record_id", "]", "=", "torch", ".", "Tensor", "(", "labels", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "torch", ".", "save", "(", "\n", "labels", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "processed_folder", ",", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".pt\"", ")", ",", "\n", ")", "\n", "\n", "", "", "for", "url", "in", "self", ".", "urls", ":", "\n", "            ", "filename", "=", "url", ".", "rpartition", "(", "\"/\"", ")", "[", "2", "]", "\n", "download_url", "(", "url", ",", "self", ".", "raw_folder", ",", "filename", ",", "None", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "filename", ")", ",", "\"r:gz\"", ")", "\n", "tar", ".", "extractall", "(", "self", ".", "raw_folder", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "print", "(", "\"Processing {}...\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "dirname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "raw_folder", ",", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "patients", "=", "[", "]", "\n", "total", "=", "0", "\n", "for", "txtfile", "in", "os", ".", "listdir", "(", "dirname", ")", ":", "\n", "                ", "record_id", "=", "txtfile", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "txtfile", ")", ")", "as", "f", ":", "\n", "                    ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "prev_time", "=", "0", "\n", "tt", "=", "[", "0.0", "]", "\n", "vals", "=", "[", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", ".", "to", "(", "device", ")", "]", "\n", "mask", "=", "[", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", ".", "to", "(", "device", ")", "]", "\n", "nobs", "=", "[", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", "]", "\n", "for", "l", "in", "lines", "[", "1", ":", "]", ":", "\n", "                        ", "total", "+=", "1", "\n", "time", ",", "param", ",", "val", "=", "l", ".", "split", "(", "\",\"", ")", "\n", "# Time in hours", "\n", "time", "=", "(", "\n", "float", "(", "time", ".", "split", "(", "\":\"", ")", "[", "0", "]", ")", "+", "float", "(", "time", ".", "split", "(", "\":\"", ")", "[", "1", "]", ")", "/", "60.0", "\n", ")", "\n", "# round up the time stamps (up to 6 min by default)", "\n", "# used for speed -- we actually don't need to quantize it in Latent ODE", "\n", "time", "=", "round", "(", "time", "/", "self", ".", "quantization", ")", "*", "self", ".", "quantization", "\n", "\n", "if", "time", "!=", "prev_time", ":", "\n", "                            ", "tt", ".", "append", "(", "time", ")", "\n", "vals", ".", "append", "(", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "mask", ".", "append", "(", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "nobs", ".", "append", "(", "torch", ".", "zeros", "(", "len", "(", "self", ".", "params", ")", ")", ".", "to", "(", "device", ")", ")", "\n", "prev_time", "=", "time", "\n", "\n", "", "if", "param", "in", "self", ".", "params_dict", ":", "\n", "# vals[-1][self.params_dict[param]] = float(val)", "\n", "                            ", "n_observations", "=", "nobs", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "\n", "if", "self", ".", "reduce", "==", "\"average\"", "and", "n_observations", ">", "0", ":", "\n", "                                ", "prev_val", "=", "vals", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "\n", "new_val", "=", "(", "prev_val", "*", "n_observations", "+", "float", "(", "val", ")", ")", "/", "(", "\n", "n_observations", "+", "1", "\n", ")", "\n", "vals", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "=", "new_val", "\n", "", "else", ":", "\n", "                                ", "vals", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "=", "float", "(", "val", ")", "\n", "", "mask", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "=", "1", "\n", "nobs", "[", "-", "1", "]", "[", "self", ".", "params_dict", "[", "param", "]", "]", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "assert", "(", "\n", "param", "==", "\"RecordID\"", "\n", ")", ",", "\"Read unexpected param {}\"", ".", "format", "(", "param", ")", "\n", "", "", "", "tt", "=", "torch", ".", "tensor", "(", "tt", ")", ".", "to", "(", "device", ")", "\n", "vals", "=", "torch", ".", "stack", "(", "vals", ")", "\n", "mask", "=", "torch", ".", "stack", "(", "mask", ")", "\n", "\n", "labels", "=", "None", "\n", "if", "record_id", "in", "outcomes", ":", "\n", "# Only training set has labels", "\n", "                    ", "labels", "=", "outcomes", "[", "record_id", "]", "\n", "# Out of 5 label types provided for Physionet, take only the last one -- mortality", "\n", "labels", "=", "labels", "[", "4", "]", "\n", "\n", "", "patients", ".", "append", "(", "(", "record_id", ",", "tt", ",", "vals", ",", "mask", ",", "labels", ")", ")", "\n", "\n", "", "torch", ".", "save", "(", "\n", "patients", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "processed_folder", ",", "\n", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "self", ".", "quantization", ")", "+", "\".pt\"", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "print", "(", "\"Done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet._check_exists": [[336, 348], ["url.rpartition", "os.path.exists", "os.path.join", "str", "filename.split"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "for", "url", "in", "self", ".", "urls", ":", "\n", "            ", "filename", "=", "url", ".", "rpartition", "(", "\"/\"", ")", "[", "2", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "processed_folder", ",", "\n", "filename", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_\"", "+", "str", "(", "self", ".", "quantization", ")", "+", "\".pt\"", ",", "\n", ")", "\n", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.raw_folder": [[349, 352], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "raw_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ",", "\"raw\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.processed_folder": [[353, 356], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "processed_folder", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "__class__", ".", "__name__", ",", "\"processed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.training_file": [[357, 360], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "training_file", "(", "self", ")", ":", "\n", "        ", "return", "\"set-a_{}.pt\"", ".", "format", "(", "self", ".", "quantization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.test_file": [[361, 364], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_file", "(", "self", ")", ":", "\n", "        ", "return", "\"set-b_{}.pt\"", ".", "format", "(", "self", ".", "quantization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.label_file": [[365, 368], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "label_file", "(", "self", ")", ":", "\n", "        ", "return", "\"Outcomes-a.pt\"", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__getitem__": [[369, 371], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__len__": [[372, 374], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.get_label": [[375, 377], ["None"], "methods", ["None"], ["", "def", "get_label", "(", "self", ",", "record_id", ")", ":", "\n", "        ", "return", "self", ".", "labels", "[", "record_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__repr__": [[378, 386], ["duv_physionet.PhysioNet.__len__"], "methods", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.__len__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "\"Dataset \"", "+", "self", ".", "__class__", ".", "__name__", "+", "\"\\n\"", "\n", "fmt_str", "+=", "\"    Number of datapoints: {}\\n\"", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "\"    Split: {}\\n\"", ".", "format", "(", "\"train\"", "if", "self", ".", "train", "is", "True", "else", "\"test\"", ")", "\n", "fmt_str", "+=", "\"    Root Location: {}\\n\"", ".", "format", "(", "self", ".", "root", ")", "\n", "fmt_str", "+=", "\"    Quantization: {}\\n\"", ".", "format", "(", "self", ".", "quantization", ")", "\n", "fmt_str", "+=", "\"    Reduce: {}\\n\"", ".", "format", "(", "self", ".", "reduce", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.PhysioNet.visualize": [[387, 427], ["sum", "matplotlib.subplots", "matplotlib.subplots", "matplotlib.subplots", "range", "fig.tight_layout", "fig.savefig", "matplotlib.close", "matplotlib.close", "matplotlib.close", "mask[].long", "ax_list[].plot", "ax_list[].set_title", "range", "enumerate", "tp_cur_param.numpy", "data_cur_param.numpy", "torch.sum", "len"], "methods", ["None"], ["", "def", "visualize", "(", "self", ",", "timesteps", ",", "data", ",", "mask", ",", "plot_name", ")", ":", "\n", "        ", "width", "=", "15", "\n", "height", "=", "15", "\n", "\n", "non_zero_attributes", "=", "(", "torch", ".", "sum", "(", "mask", ",", "0", ")", ">", "2", ")", ".", "numpy", "(", ")", "\n", "non_zero_idx", "=", "[", "\n", "i", "for", "i", "in", "range", "(", "len", "(", "non_zero_attributes", ")", ")", "if", "non_zero_attributes", "[", "i", "]", "==", "1.0", "\n", "]", "\n", "n_non_zero", "=", "sum", "(", "non_zero_attributes", ")", "\n", "\n", "mask", "=", "mask", "[", ":", ",", "non_zero_idx", "]", "\n", "data", "=", "data", "[", ":", ",", "non_zero_idx", "]", "\n", "\n", "params_non_zero", "=", "[", "self", ".", "params", "[", "i", "]", "for", "i", "in", "non_zero_idx", "]", "\n", "params_dict", "=", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "params_non_zero", ")", "}", "\n", "\n", "n_col", "=", "3", "\n", "n_row", "=", "n_non_zero", "//", "n_col", "+", "(", "n_non_zero", "%", "n_col", ">", "0", ")", "\n", "fig", ",", "ax_list", "=", "plt", ".", "subplots", "(", "\n", "n_row", ",", "n_col", ",", "figsize", "=", "(", "width", ",", "height", ")", ",", "facecolor", "=", "\"white\"", "\n", ")", "\n", "\n", "# for i in range(len(self.params)):", "\n", "for", "i", "in", "range", "(", "n_non_zero", ")", ":", "\n", "            ", "param", "=", "params_non_zero", "[", "i", "]", "\n", "param_id", "=", "params_dict", "[", "param", "]", "\n", "\n", "tp_mask", "=", "mask", "[", ":", ",", "param_id", "]", ".", "long", "(", ")", "\n", "\n", "tp_cur_param", "=", "timesteps", "[", "tp_mask", "==", "1.0", "]", "\n", "data_cur_param", "=", "data", "[", "tp_mask", "==", "1.0", ",", "param_id", "]", "\n", "\n", "ax_list", "[", "i", "//", "n_col", ",", "i", "%", "n_col", "]", ".", "plot", "(", "\n", "tp_cur_param", ".", "numpy", "(", ")", ",", "data_cur_param", ".", "numpy", "(", ")", ",", "marker", "=", "\"o\"", "\n", ")", "\n", "ax_list", "[", "i", "//", "n_col", ",", "i", "%", "n_col", "]", ".", "set_title", "(", "param", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "plot_name", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.get_physio": [[27, 90], ["duv_physionet.PhysioNet", "sklearn.model_selection.train_test_split", "len", "vals.size", "min", "duv_physionet.get_data_min_max", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "min", "len", "len", "min", "len", "len", "duv_physionet.variable_time_collate_fn2", "duv_physionet.variable_time_collate_fn2"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.get_data_min_max", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.variable_time_collate_fn2", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.variable_time_collate_fn2"], ["def", "get_physio", "(", "args", ",", "device", ")", ":", "\n", "    ", "train_dataset_obj", "=", "PhysioNet", "(", "\n", "\"data/physionet\"", ",", "\n", "train", "=", "True", ",", "\n", "quantization", "=", "0.016", ",", "\n", "download", "=", "True", ",", "\n", "n_samples", "=", "min", "(", "10000", ",", "8000", ")", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "# Combine and shuffle samples from physionet Train and physionet Test", "\n", "total_dataset", "=", "train_dataset_obj", "[", ":", "len", "(", "train_dataset_obj", ")", "]", "\n", "# print(\"total_dataset len: \", len(total_dataset))", "\n", "# Shuffle and split", "\n", "train_data", ",", "test_data", "=", "train_test_split", "(", "\n", "total_dataset", ",", "train_size", "=", "0.8", ",", "random_state", "=", "42", ",", "shuffle", "=", "True", "\n", ")", "\n", "# print(\"train_data len: \", len(train_data))", "\n", "# print(\"test_data len: \", len(test_data))", "\n", "\n", "record_id", ",", "tt", ",", "vals", ",", "mask", ",", "labels", "=", "train_data", "[", "0", "]", "\n", "\n", "n_samples", "=", "len", "(", "total_dataset", ")", "\n", "input_dim", "=", "vals", ".", "size", "(", "-", "1", ")", "\n", "\n", "batch_size", "=", "min", "(", "min", "(", "len", "(", "train_dataset_obj", ")", ",", "args", ".", "batch_size", ")", ",", "8000", ")", "\n", "data_min", ",", "data_max", "=", "get_data_min_max", "(", "total_dataset", ",", "device", ")", "\n", "# print(\"data_min,\", data_min)", "\n", "# print(\"data_max, \", data_max)", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "\n", "collate_fn", "=", "lambda", "batch", ":", "variable_time_collate_fn2", "(", "\n", "batch", ",", "args", ",", "device", ",", "data_type", "=", "\"train\"", ",", "data_min", "=", "data_min", ",", "data_max", "=", "data_max", "\n", ")", ",", "\n", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "n_samples", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "collate_fn", "=", "lambda", "batch", ":", "variable_time_collate_fn2", "(", "\n", "batch", ",", "args", ",", "device", ",", "data_type", "=", "\"test\"", ",", "data_min", "=", "data_min", ",", "data_max", "=", "data_max", "\n", ")", ",", "\n", ")", "\n", "\n", "attr_names", "=", "train_dataset_obj", ".", "params", "\n", "data_objects", "=", "{", "\n", "\"dataset_obj\"", ":", "train_dataset_obj", ",", "\n", "\"train_dataloader\"", ":", "train_dataloader", ",", "\n", "\"test_dataloader\"", ":", "test_dataloader", ",", "\n", "# \"train_dataloader\": utils.inf_generator(train_dataloader),", "\n", "# \"test_dataloader\": utils.inf_generator(test_dataloader),", "\n", "\"input_dim\"", ":", "input_dim", ",", "\n", "\"n_train_batches\"", ":", "len", "(", "train_dataloader", ")", ",", "\n", "\"n_test_batches\"", ":", "len", "(", "test_dataloader", ")", ",", "\n", "\"attr\"", ":", "attr_names", ",", "# optional", "\n", "\"classif_per_tp\"", ":", "False", ",", "# optional", "\n", "\"n_labels\"", ":", "1", ",", "\n", "}", "# optional", "\n", "return", "data_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.get_data_min_max": [[93, 124], ["[].to", "enumerate", "vals.size", "range", "torch.stack", "torch.stack", "torch.min", "torch.max", "torch.Tensor", "len", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.min().to", "torch.max().to", "float", "torch.min", "torch.max"], "function", ["None"], ["", "def", "get_data_min_max", "(", "records", ",", "device", ")", ":", "\n", "\n", "    ", "data_min", ",", "data_max", "=", "None", ",", "None", "\n", "inf", "=", "torch", ".", "Tensor", "(", "[", "float", "(", "\"Inf\"", ")", "]", ")", "[", "0", "]", ".", "to", "(", "device", ")", "\n", "\n", "for", "b", ",", "(", "record_id", ",", "tt", ",", "vals", ",", "mask", ",", "labels", ")", "in", "enumerate", "(", "records", ")", ":", "\n", "        ", "n_features", "=", "vals", ".", "size", "(", "-", "1", ")", "\n", "\n", "batch_min", "=", "[", "]", "\n", "batch_max", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_features", ")", ":", "\n", "            ", "non_missing_vals", "=", "vals", "[", ":", ",", "i", "]", "[", "mask", "[", ":", ",", "i", "]", "==", "1", "]", "\n", "if", "len", "(", "non_missing_vals", ")", "==", "0", ":", "\n", "                ", "batch_min", ".", "append", "(", "inf", ")", "\n", "batch_max", ".", "append", "(", "-", "inf", ")", "\n", "", "else", ":", "\n", "                ", "batch_min", ".", "append", "(", "torch", ".", "min", "(", "non_missing_vals", ")", ".", "to", "(", "device", ")", ")", "\n", "batch_max", ".", "append", "(", "torch", ".", "max", "(", "non_missing_vals", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "", "batch_min", "=", "torch", ".", "stack", "(", "batch_min", ")", "\n", "batch_max", "=", "torch", ".", "stack", "(", "batch_max", ")", "\n", "\n", "if", "(", "data_min", "is", "None", ")", "and", "(", "data_max", "is", "None", ")", ":", "\n", "            ", "data_min", "=", "batch_min", "\n", "data_max", "=", "batch_max", "\n", "", "else", ":", "\n", "            ", "data_min", "=", "torch", ".", "min", "(", "data_min", ",", "batch_min", ")", "\n", "data_max", "=", "torch", ".", "max", "(", "data_max", ",", "batch_max", ")", "\n", "\n", "", "", "data_max", "[", "data_max", "==", "0.0", "]", "=", "1", "\n", "return", "data_min", ",", "data_max", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.variable_time_collate_fn2": [[429, 486], ["torch.device", "numpy.max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor().to", "enumerate", "len", "tt.to.to", "vals.to.to", "mask.to.to", "labels.to.to", "tt.to.size", "torch.zeros.long", "ex[].size", "len", "len", "len", "torch.Tensor"], "function", ["None"], ["", "", "def", "variable_time_collate_fn2", "(", "\n", "batch", ",", "\n", "args", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "data_type", "=", "\"train\"", ",", "\n", "data_min", "=", "None", ",", "\n", "data_max", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Expects a batch of time series data in the form of (record_id, tt, vals, mask, labels) where\n        - record_id is a patient id\n        - tt is a 1-dimensional tensor containing T time values of observations.\n        - vals is a (T, D) tensor containing observed values for D variables.\n        - mask is a (T, D) tensor containing 1 where values were observed and 0 otherwise.\n        - labels is a list of labels for the current patient, if labels are available. Otherwise None.\n    Returns:\n        combined_tt: The union of all time observations.\n        combined_vals: (M, T, D) tensor containing the observed values.\n        combined_mask: (M, T, D) tensor containing 1 where values were observed and 0 otherwise.\n    \"\"\"", "\n", "# print(\"Batch,\")", "\n", "# for i, b in enumerate(batch):", "\n", "#     for j, v in enumerate(b):", "\n", "#         repr = v.size() if isinstance(v, torch.Tensor) else v", "\n", "#         print(f\"Batch[{i}] item {j}: {str(repr)}\")", "\n", "#     if i > 3:", "\n", "#         break", "\n", "# print(\"EOP\")", "\n", "\n", "D", "=", "batch", "[", "0", "]", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "combined_seq_len", "=", "np", ".", "max", "(", "[", "ex", "[", "1", "]", ".", "size", "(", "0", ")", "for", "ex", "in", "batch", "]", ")", "\n", "\n", "combined_inputs", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "combined_seq_len", ",", "D", "]", ",", "device", "=", "device", ")", "\n", "combined_mask", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "combined_seq_len", ",", "D", "]", ",", "device", "=", "device", ")", "\n", "combined_tt", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "combined_seq_len", "]", ",", "device", "=", "device", ")", "\n", "combined_labels", "=", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "device", "=", "device", ")", "\n", "\n", "eps", "=", "torch", ".", "Tensor", "(", "[", "1e-3", "]", ")", ".", "to", "(", "device", ")", "\n", "for", "b", ",", "(", "record_id", ",", "tt", ",", "vals", ",", "mask", ",", "labels", ")", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "tt", "=", "tt", ".", "to", "(", "device", ")", "\n", "vals", "=", "vals", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "# print(\"tt: \", tt[0:10])", "\n", "item_len", "=", "tt", ".", "size", "(", "0", ")", "\n", "# combined_mask[b, 0:item_len] = 1  # Enable", "\n", "\n", "# normed_vals = vals", "\n", "normed_vals", "=", "(", "vals", "-", "data_min", ")", "/", "data_max", "\n", "# print(\"normed_vals\", normed_vals)", "\n", "combined_inputs", "[", "b", ",", ":", "item_len", "]", "=", "normed_vals", "\n", "combined_mask", "[", "b", ",", ":", "item_len", "]", "=", "mask", "\n", "combined_tt", "[", "b", ",", "1", ":", "item_len", "]", "=", "tt", "[", ":", "1", "]", "-", "tt", "[", ":", "-", "1", "]", "\n", "\n", "combined_labels", "[", "b", "]", "=", "labels", "\n", "\n", "", "return", "combined_inputs", ",", "combined_tt", ",", "combined_mask", ",", "combined_labels", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_physionet.variable_time_collate_fn": [[488, 556], ["torch.device", "torch.unique", "combined_tt.to.to", "torch.zeros().to", "torch.zeros().to", "combined_labels.to.to", "enumerate", "duv_utils.normalize_masked_data", "duv_utils.split_and_subsample_batch", "torch.cat", "torch.zeros", "torch.tensor", "tt.to.to", "vals.to.to", "mask.to.to", "len", "torch.max", "torch.zeros", "torch.zeros", "len", "float", "labels.to.to", "torch.max", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.normalize_masked_data", "home.repos.pwc.inspect_result.raminmh_CfC.None.duv_utils.split_and_subsample_batch"], ["", "def", "variable_time_collate_fn", "(", "\n", "batch", ",", "\n", "args", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", "data_type", "=", "\"train\"", ",", "\n", "data_min", "=", "None", ",", "\n", "data_max", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Expects a batch of time series data in the form of (record_id, tt, vals, mask, labels) where\n        - record_id is a patient id\n        - tt is a 1-dimensional tensor containing T time values of observations.\n        - vals is a (T, D) tensor containing observed values for D variables.\n        - mask is a (T, D) tensor containing 1 where values were observed and 0 otherwise.\n        - labels is a list of labels for the current patient, if labels are available. Otherwise None.\n    Returns:\n        combined_tt: The union of all time observations.\n        combined_vals: (M, T, D) tensor containing the observed values.\n        combined_mask: (M, T, D) tensor containing 1 where values were observed and 0 otherwise.\n    \"\"\"", "\n", "D", "=", "batch", "[", "0", "]", "[", "2", "]", ".", "shape", "[", "1", "]", "\n", "combined_tt", ",", "inverse_indices", "=", "torch", ".", "unique", "(", "\n", "torch", ".", "cat", "(", "[", "ex", "[", "1", "]", "for", "ex", "in", "batch", "]", ")", ",", "sorted", "=", "True", ",", "return_inverse", "=", "True", "\n", ")", "\n", "combined_tt", "=", "combined_tt", ".", "to", "(", "device", ")", "\n", "\n", "offset", "=", "0", "\n", "combined_vals", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "len", "(", "combined_tt", ")", ",", "D", "]", ")", ".", "to", "(", "device", ")", "\n", "combined_mask", "=", "torch", ".", "zeros", "(", "[", "len", "(", "batch", ")", ",", "len", "(", "combined_tt", ")", ",", "D", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "combined_labels", "=", "None", "\n", "N_labels", "=", "1", "\n", "\n", "combined_labels", "=", "torch", ".", "zeros", "(", "len", "(", "batch", ")", ",", "N_labels", ")", "+", "torch", ".", "tensor", "(", "float", "(", "\"nan\"", ")", ")", "\n", "combined_labels", "=", "combined_labels", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "for", "b", ",", "(", "record_id", ",", "tt", ",", "vals", ",", "mask", ",", "labels", ")", "in", "enumerate", "(", "batch", ")", ":", "\n", "        ", "tt", "=", "tt", ".", "to", "(", "device", ")", "\n", "vals", "=", "vals", ".", "to", "(", "device", ")", "\n", "mask", "=", "mask", ".", "to", "(", "device", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "indices", "=", "inverse_indices", "[", "offset", ":", "offset", "+", "len", "(", "tt", ")", "]", "\n", "offset", "+=", "len", "(", "tt", ")", "\n", "\n", "combined_vals", "[", "b", ",", "indices", "]", "=", "vals", "\n", "combined_mask", "[", "b", ",", "indices", "]", "=", "mask", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "combined_labels", "[", "b", "]", "=", "labels", "\n", "\n", "", "", "combined_vals", ",", "_", ",", "_", "=", "utils", ".", "normalize_masked_data", "(", "\n", "combined_vals", ",", "combined_mask", ",", "att_min", "=", "data_min", ",", "att_max", "=", "data_max", "\n", ")", "\n", "\n", "if", "torch", ".", "max", "(", "combined_tt", ")", "!=", "0.0", ":", "\n", "        ", "combined_tt", "=", "combined_tt", "/", "torch", ".", "max", "(", "combined_tt", ")", "\n", "\n", "", "data_dict", "=", "{", "\n", "\"data\"", ":", "combined_vals", ",", "\n", "\"time_steps\"", ":", "combined_tt", ",", "\n", "\"mask\"", ":", "combined_mask", ",", "\n", "\"labels\"", ":", "combined_labels", ",", "\n", "}", "\n", "\n", "data_dict", "=", "utils", ".", "split_and_subsample_batch", "(", "data_dict", ",", "args", ",", "data_type", "=", "data_type", ")", "\n", "return", "data_dict", "\n", "\n"]]}