{"home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.config.Config.__init__": [[27, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "search_type", ",", "root", "=", "'./'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "'PPG_Dalia'", "\n", "self", ".", "root", "=", "root", "\n", "\n", "self", ".", "search_type", "=", "search_type", "\n", "\n", "# Data preprocessing parameters. Needs to be left unchanged", "\n", "self", ".", "time_window", "=", "8", "\n", "self", ".", "input_shape", "=", "32", "*", "self", ".", "time_window", "\n", "\n", "# Training Parameters", "\n", "self", ".", "batch_size", "=", "128", "\n", "self", ".", "lr", "=", "0.001", "\n", "self", ".", "epochs", "=", "500", "\n", "self", ".", "a", "=", "35", "\n", "\n", "\n", "self", ".", "path_PPG_Dalia", "=", "self", ".", "root", "\n", "\n", "# warmup_epochs determines the number of training epochs without regularization", "\n", "# it could be an integer number or the string 'max' to indicate that we fully train the ", "\n", "# network", "\n", "self", ".", "warmup", "=", "20", "\n", "# reg_strength determines how agressive lasso-reg is", "\n", "self", ".", "reg_strength", "=", "1e-6", "\n", "# Amount of l2 regularization to be applied. Usually 0.", "\n", "self", ".", "l2", "=", "0.", "\n", "# threshold value is the value at which a weight is treated as 0. ", "\n", "self", ".", "threshold", "=", "0.5", "\n", "\n", "self", ".", "hyst", "=", "0", "\n", "\n", "# Where data are saved", "\n", "self", ".", "saving_path", "=", "self", ".", "root", "+", "'saved_models_'", "+", "self", ".", "search_type", "+", "'/'", "\n", "\n", "# parameters MorphNet training", "\n", "self", ".", "epochs_MN", "=", "350", "\n", "self", ".", "batch_size_MN", "=", "128", "\n", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.RandomGroupkfold.RandomGroupKFold_split": [[22, 40], ["pandas.Series", "numpy.arange", "numpy.unique", "numpy.random.RandomState().shuffle", "numpy.array_split", "len", "print", "pd.Series.isin", "result.append", "numpy.random.RandomState"], "function", ["None"], ["def", "RandomGroupKFold_split", "(", "groups", ",", "n", ",", "seed", "=", "None", ")", ":", "# noqa: N802", "\n", "    ", "\"\"\"\n    Random analogous of sklearn.model_selection.GroupKFold.split.\n\n    :return: list of (train, test) indices\n    \"\"\"", "\n", "groups", "=", "pd", ".", "Series", "(", "groups", ")", "\n", "ix", "=", "np", ".", "arange", "(", "len", "(", "groups", ")", ")", "\n", "unique", "=", "np", ".", "unique", "(", "groups", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "shuffle", "(", "unique", ")", "\n", "result", "=", "[", "]", "\n", "for", "split", "in", "np", ".", "array_split", "(", "unique", ",", "n", ")", ":", "\n", "        ", "print", "(", "split", ")", "\n", "mask", "=", "groups", ".", "isin", "(", "split", ")", "\n", "train", ",", "test", "=", "ix", "[", "~", "mask", "]", ",", "ix", "[", "mask", "]", "\n", "result", ".", "append", "(", "(", "train", ",", "test", ")", ")", "\n", "\n", "", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_losses.NLL": [[24, 34], ["tensorflow.linalg.trace", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.cast", "tensorflow.transpose", "tensorflow.cast", "tensorflow.transpose", "tensorflow.cast", "tensorflow.cast", "tensorflow.math.log", "tensorflow.math.log", "tensorflow.clip_by_value", "tensorflow.clip_by_value"], "function", ["None"], ["def", "NLL", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "    ", "return", "-", "tf", ".", "linalg", ".", "trace", "(", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "cast", "(", "y_true", ",", "dtype", "=", "'float32'", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "log", "(", "tf", ".", "clip_by_value", "(", "y_pred", ",", "1e-8", ",", "1.0", ")", ")", ",", "dtype", "=", "'float32'", ")", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", ")", "+", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "cast", "(", "(", "1", "-", "y_true", ")", ",", "dtype", "=", "'float32'", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "cast", "(", "tf", ".", "math", ".", "log", "(", "tf", ".", "clip_by_value", "(", "1", "-", "y_pred", ",", "1e-8", ",", "1.0", ")", ")", ",", "dtype", "=", "'float32'", ")", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_losses.accuracy": [[37, 45], ["tensorflow.argmax", "tensorflow.cast", "tensorflow.cast", "tensorflow.ndim", "tensorflow.ndim", "tensorflow.squeeze", "tensorflow.floatx", "tensorflow.equal", "tensorflow.floatx"], "function", ["None"], ["", "def", "accuracy", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# reshape in case it's in shape (num_samples, 1) instead of (num_samples,)", "\n", "            ", "if", "K", ".", "ndim", "(", "y_true", ")", "==", "K", ".", "ndim", "(", "y_pred", ")", ":", "\n", "                ", "y_true", "=", "K", ".", "squeeze", "(", "y_true", ",", "-", "1", ")", "\n", "# convert dense predictions to labels", "\n", "", "y_pred_labels", "=", "K", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "y_pred_labels", "=", "K", ".", "cast", "(", "y_pred_labels", ",", "K", ".", "floatx", "(", ")", ")", "\n", "return", "K", ".", "cast", "(", "K", ".", "equal", "(", "y_true", ",", "y_pred_labels", ")", ",", "K", ".", "floatx", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.post_proc.obtain_MAE": [[33, 46], ["numpy.arange", "numpy.asarray", "print", "print", "numpy.mean", "np.asarray.append", "numpy.abs", "numpy.mean", "numpy.median", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["def", "obtain_MAE", "(", "dataset", ",", "fine", "=", "False", ")", ":", "\n", "    ", "pred", "=", "'_pred'", "if", "not", "fine", "else", "'_pred_fine'", "\n", "label", "=", "'_label'", "if", "not", "fine", "else", "'_label_fine'", "\n", "MAE", "=", "[", "]", "\n", "for", "pat", "in", "np", ".", "arange", "(", "1", ",", "16", ")", ":", "\n", "        ", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "=", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "\n", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "label", "]", "=", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "label", "]", "\n", "MAE_pat", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "label", "]", "-", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", ")", ")", "\n", "MAE", ".", "append", "(", "MAE_pat", ")", "\n", "", "MAE", "=", "np", ".", "asarray", "(", "MAE", ")", "\n", "print", "(", "'Mean-Pre: {}'", ".", "format", "(", "np", ".", "mean", "(", "MAE", ")", ")", ")", "\n", "print", "(", "'Median-Pre: {}'", ".", "format", "(", "np", ".", "median", "(", "MAE", ")", ")", ")", "\n", "return", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.post_proc.post_processing": [[47, 67], ["numpy.arange", "numpy.asarray", "print", "print", "numpy.arange", "numpy.mean", "np.asarray.append", "len", "numpy.abs", "numpy.mean", "numpy.median", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "post_processing", "(", "dataset", ",", "fine", "=", "False", ")", ":", "\n", "    ", "n", "=", "10", "\n", "f_h", "=", "10", "\n", "f_l", "=", "10", "\n", "pred", "=", "'_pred'", "if", "not", "fine", "else", "'_pred_fine'", "\n", "label", "=", "'_label'", "if", "not", "fine", "else", "'_label_fine'", "\n", "MAE_postprocessing", "=", "[", "]", "\n", "for", "pat", "in", "np", ".", "arange", "(", "1", ",", "16", ")", ":", "\n", "    \t", "old_value", "=", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "0", "]", "\n", "for", "i", "in", "np", ".", "arange", "(", "n", ",", "len", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "label", "]", ")", ")", ":", "\n", "    \t\t", "if", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "i", "]", ")", ">", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "(", "i", "-", "n", ")", ":", "i", "]", ")", "*", "(", "100", "+", "f_h", ")", "/", "100.0", ":", "\n", "    \t\t    ", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "i", "]", "=", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "(", "i", "-", "n", ")", ":", "i", "]", ")", "*", "(", "100", "+", "f_h", ")", "/", "100", "\n", "", "if", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "i", "]", ")", "<", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "(", "i", "-", "n", ")", ":", "i", "]", ")", "*", "(", "100", "-", "f_l", ")", "/", "100.0", ":", "\n", "    \t\t    ", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "i", "]", "=", "np", ".", "mean", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", "[", "(", "i", "-", "n", ")", ":", "i", "]", ")", "*", "(", "100", "-", "f_l", ")", "/", "100", "\n", "", "", "MAE_pat", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "label", "]", "-", "dataset", "[", "'P'", "+", "str", "(", "pat", ")", "+", "pred", "]", ")", ")", "\n", "MAE_postprocessing", ".", "append", "(", "MAE_pat", ")", "\n", "", "MAE_postprocessing", "=", "np", ".", "asarray", "(", "MAE_postprocessing", ")", "\n", "print", "(", "'Mean-Post: {}'", ".", "format", "(", "np", ".", "mean", "(", "MAE_postprocessing", ")", ")", ")", "\n", "print", "(", "'Median-Post: {}'", ".", "format", "(", "np", ".", "median", "(", "MAE_postprocessing", ")", ")", ")", "\n", "return", "MAE_postprocessing", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure.__init__": [[36, 39], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cf", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "super", "(", "export_structure", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure.set_model": [[40, 42], ["None"], "methods", ["None"], ["", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure.on_train_begin": [[43, 56], ["dict", "print", "sys.exit"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# Initialize the best as infinity.", "\n", "        ", "if", "self", ".", "cf", ".", "dataset", "==", "'PPG_Dalia'", ":", "\n", "           ", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "elif", "self", ".", "cf", ".", "dataset", "==", "'Nottingham'", "or", "self", ".", "cf", ".", "dataset", "==", "'JSB_Chorales'", ":", "\n", "           ", "self", ".", "best", "=", "np", ".", "Inf", "\n", "", "elif", "self", ".", "cf", ".", "dataset", "==", "'SeqMNIST'", "or", "self", ".", "cf", ".", "dataset", "==", "'PerMNIST'", ":", "\n", "           ", "self", ".", "best", "=", "0", "\n", "", "else", ":", "\n", "           ", "print", "(", "\"{} is not supported\"", ".", "format", "(", "self", ".", "cf", ".", "dataset", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "self", ".", "gamma", "=", "dict", "(", ")", "\n", "self", ".", "i", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure.on_epoch_end": [[57, 92], ["logs.get", "print", "sys.exit", "bool", "bool", "custom_callbacks.export_structure.model.get_weights", "zip", "print", "print", "re.search", "utils.save_dil_fact", "numpy.less", "numpy.array", "utils.dil_fact", "re.search", "numpy.array", "utils.dil_fact"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.save_dil_fact", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.dil_fact", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.dil_fact"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "#get current validation mae", "\n", "        ", "if", "self", ".", "cf", ".", "dataset", "==", "'PPG_Dalia'", ":", "\n", "            ", "current", "=", "logs", ".", "get", "(", "val_mae", ")", "\n", "l", "=", "1", "\n", "h", "=", "0", "\n", "wait", "=", "0", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"{} is not supported\"", ".", "format", "(", "self", ".", "cf", ".", "dataset", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "if", "self", ".", "i", ">", "wait", ":", "\n", "# compare with previous best one", "\n", "            ", "if", "bool", "(", "np", ".", "less", "(", "current", ",", "self", ".", "best", ")", "*", "l", ")", "^", "bool", "(", "(", "current", ">", "self", ".", "best", ")", "*", "h", ")", ":", "\n", "                ", "self", ".", "best", "=", "current", "\n", "\n", "# Record the best model if current results is better.", "\n", "names", "=", "[", "weight", ".", "name", "for", "layer", "in", "self", ".", "model", ".", "layers", "for", "weight", "in", "layer", ".", "weights", "]", "\n", "weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "for", "name", ",", "weight", "in", "zip", "(", "names", ",", "weights", ")", ":", "\n", "                    ", "if", "re", ".", "search", "(", "'learned_conv2d.+_?[0-9]/gamma'", ",", "name", ")", ":", "\n", "                        ", "self", ".", "gamma", "[", "name", "]", "=", "weight", "\n", "self", ".", "gamma", "[", "name", "]", "=", "np", ".", "array", "(", "self", ".", "gamma", "[", "name", "]", ">", "self", ".", "cf", ".", "threshold", ",", "dtype", "=", "bool", ")", "\n", "self", ".", "gamma", "[", "name", "]", "=", "utils", ".", "dil_fact", "(", "self", ".", "gamma", "[", "name", "]", ",", "op", "=", "'mul'", ")", "\n", "", "elif", "re", ".", "search", "(", "'weight_norm.+_?[0-9]/gamma'", ",", "name", ")", ":", "\n", "                        ", "self", ".", "gamma", "[", "name", "]", "=", "weight", "\n", "self", ".", "gamma", "[", "name", "]", "=", "np", ".", "array", "(", "self", ".", "gamma", "[", "name", "]", ">", "self", ".", "cf", ".", "threshold", ",", "dtype", "=", "bool", ")", "\n", "self", ".", "gamma", "[", "name", "]", "=", "utils", ".", "dil_fact", "(", "self", ".", "gamma", "[", "name", "]", ",", "op", "=", "'mul'", ")", "\n", "", "", "print", "(", "\"New best model, update file. \\n\"", ")", "\n", "print", "(", "self", ".", "gamma", ")", "\n", "if", "self", ".", "cf", ".", "dataset", "==", "'PPG_Dalia'", ":", "\n", "                    ", "utils", ".", "save_dil_fact", "(", "self", ".", "cf", ".", "saving_path", ",", "self", ".", "gamma", ",", "self", ".", "cf", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.SaveGamma.set_model": [[96, 98], ["None"], "methods", ["None"], ["    ", "def", "set_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.SaveGamma.on_epoch_end": [[99, 115], ["custom_callbacks.SaveGamma.model.get_weights", "dict", "zip", "re.search", "print", "re.search", "weight.tolist", "print", "weight.tolist", "weight.tolist", "weight.tolist"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", ")", ":", "\n", "\n", "        ", "names", "=", "[", "weight", ".", "name", "for", "layer", "in", "self", ".", "model", ".", "layers", "for", "weight", "in", "layer", ".", "weights", "]", "\n", "weights", "=", "self", ".", "model", ".", "get_weights", "(", ")", "\n", "\n", "gamma", "=", "dict", "(", ")", "\n", "i", "=", "0", "\n", "for", "name", ",", "weight", "in", "zip", "(", "names", ",", "weights", ")", ":", "\n", "            ", "if", "re", ".", "search", "(", "'learned_conv2d.+_?[0-9]/gamma'", ",", "name", ")", ":", "\n", "                ", "print", "(", "'gamma: '", ",", "weight", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "gamma", "[", "i", "]", "=", "weight", ".", "tolist", "(", ")", "[", "0", "]", "\n", "i", "+=", "1", "\n", "", "elif", "re", ".", "search", "(", "'weight_norm.+_?[0-9]/gamma'", ",", "name", ")", ":", "\n", "                ", "print", "(", "'gamma: '", ",", "weight", ".", "tolist", "(", ")", "[", "0", "]", ")", "\n", "gamma", "[", "i", "]", "=", "weight", ".", "tolist", "(", ")", "[", "0", "]", "\n", "i", "+=", "1", "\n", "#gamma_history.append(gamma)", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure_MN.__init__": [[133, 140], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "cf", ",", "network_regularizer", ",", "patience", "=", "0", ")", ":", "\n", "        ", "super", "(", "export_structure_MN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cf", "=", "cf", "\n", "self", ".", "network_regularizer", "=", "network_regularizer", "\n", "self", ".", "patience", "=", "patience", "\n", "# exporter to store best architecture.", "\n", "self", ".", "exporter", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure_MN.on_train_begin": [[141, 148], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# The number of epoch it has waited when loss is no longer minimum.", "\n", "        ", "self", ".", "wait", "=", "0", "\n", "# The epoch the training stops at.", "\n", "self", ".", "stopped_epoch", "=", "0", "\n", "# Initialize the best as infinity.", "\n", "self", ".", "best", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure_MN.on_epoch_end": [[149, 190], ["logs.get", "numpy.less", "morph_net.tools.structure_exporter.StructureExporter", "custom_callbacks.export_structure_MN.exporter.tensors.items", "custom_callbacks.export_structure_MN.exporter.populate_tensor_values", "custom_callbacks.export_structure_MN.exporter.create_file_and_save_alive_counts", "os.replace", "print", "print", "print", "tensorflow.keras.backend.eval"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "\n", "#get current validation mae", "\n", "        ", "current", "=", "logs", ".", "get", "(", "\"val_mean_absolute_error\"", ")", "\n", "\n", "#compare with previous best one", "\n", "if", "np", ".", "less", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "            ", "self", ".", "best", "=", "current", "\n", "self", ".", "wait", "=", "0", "\n", "# Record the best model if current results is better (less).", "\n", "self", ".", "exporter", "=", "structure_exporter", ".", "StructureExporter", "(", "self", ".", "network_regularizer", ".", "op_regularizer_manager", ")", "\n", "\n", "values", "=", "{", "}", "\n", "for", "key", ",", "item", "in", "self", ".", "exporter", ".", "tensors", ".", "items", "(", ")", ":", "\n", "              ", "values", "[", "key", "]", "=", "tf", ".", "keras", ".", "backend", ".", "eval", "(", "item", ")", "\n", "\n", "", "self", ".", "exporter", ".", "populate_tensor_values", "(", "values", ")", "\n", "\n", "self", ".", "exporter", ".", "create_file_and_save_alive_counts", "(", "\n", "self", ".", "cf", ".", "saving_path", ",", "\n", "'learned_channels_{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "threshold", ")", "+", "'.json'", ")", "\n", "# rename file because the exporter.create_file_and_save_alive_counts() methods automatically", "\n", "# add an unwanted prefix", "\n", "os", ".", "replace", "(", "\n", "self", ".", "cf", ".", "saving_path", "+", "'learned_structure/alive_learned_channels_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "threshold", ")", "+", "'.json'", ",", "\n", "self", ".", "cf", ".", "saving_path", "+", "'learned_structure/learned_channels_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "threshold", ")", "+", "'.json'", ")", "\n", "path", "=", "self", ".", "cf", ".", "saving_path", "+", "'learned_channels_'", "+", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "reg_strength", ")", "+", "'_'", "+", "'{:.1e}'", ".", "format", "(", "self", ".", "cf", ".", "threshold", ")", "+", "'.json'", "\n", "print", "(", "'\\nSaving model at:'", ",", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wait", "+=", "1", "\n", "print", "(", "'\\nval_mae did not improve from {}'", ".", "format", "(", "self", ".", "best", ")", ")", "\n", "print", "(", "'Keep going on for at least {} epochs'", ".", "format", "(", "self", ".", "patience", "-", "self", ".", "wait", ")", ")", "\n", "if", "self", ".", "wait", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "stopped_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.custom_callbacks.export_structure_MN.on_train_end": [[191, 194], ["print"], "methods", ["None"], ["", "", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "stopped_epoch", ">", "0", ":", "\n", "            ", "print", "(", "\"\\n Epoch %05d: early stopping\"", "%", "(", "self", ".", "stopped_epoch", "+", "1", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.eval_flops.get_flops": [[23, 106], ["range", "len", "model.get_layer", "re.search", "re.search", "model.get_layer.get_config", "model.get_layer.input.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.input.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.output.get_shape().as_list", "model.get_layer.input.get_shape().as_list", "re.search", "re.search", "model.get_layer.input.get_shape", "model.get_layer.output.get_shape", "model.get_layer.input.get_shape", "model.get_layer.output.get_shape", "len", "re.search", "re.search", "re.search", "model.get_layer.output.get_shape", "model.get_layer.input.get_shape", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "re.search", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.get_config", "len", "re.search", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.output.get_shape().as_list", "model.get_layer.get_config", "model.get_layer.get_config", "re.search", "re.search", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "model.get_layer.output.get_shape", "re.search", "re.search", "print", "sys.exit", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.get_config", "model.get_layer.get_config"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config"], ["def", "get_flops", "(", "model", ")", ":", "\n", "    ", "flops", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "        ", "layer", "=", "model", ".", "get_layer", "(", "index", "=", "i", ")", "\n", "\n", "if", "re", ".", "search", "(", "'conv.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "#print (layer)", "\n", "\n", "            ", "in_shape", "=", "layer", ".", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "c_in", "=", "layer", ".", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "c_out", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "k", "=", "layer", ".", "get_config", "(", ")", "[", "'kernel_size'", "]", "[", "1", "]", "\n", "\n", "flops", "+=", "2", "*", "out_shape", "*", "k", "*", "c_in", "*", "c_out", "\n", "\n", "", "elif", "re", ".", "search", "(", "'dense.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "#print (layer)", "\n", "\n", "            ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "in_shape", "=", "layer", ".", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "# import pdb", "\n", "# pdb.set_trace()", "\n", "flops", "+=", "2", "*", "out_shape", "*", "in_shape", "\n", "\n", "", "elif", "re", ".", "search", "(", "'batch_normalization.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", "or", "re", ".", "search", "(", "'bn.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "#print (layer)", "\n", "\n", "# bn after conv", "\n", "            ", "if", "len", "(", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "4", ":", "\n", "                ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "c_out", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "flops", "+=", "2", "*", "4", "*", "c_out", "*", "out_shape", "\n", "# bn after fc", "\n", "", "else", ":", "\n", "                ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "flops", "+=", "2", "*", "4", "*", "out_shape", "\n", "\n", "", "", "elif", "re", ".", "search", "(", "'average_pooling2d.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", "or", "re", ".", "search", "(", "'^pool.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "\n", "#print(layer)", "\n", "            ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "c_out", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "flops", "+=", "2", "*", "out_shape", "*", "c_out", "\n", "\n", "", "elif", "re", ".", "search", "(", "'act.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "\n", "# act after conv", "\n", "            ", "if", "len", "(", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "==", "4", ":", "\n", "                ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "c_out", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "flops", "+=", "2", "*", "out_shape", "*", "c_out", "\n", "# act after fc", "\n", "", "else", ":", "\n", "                ", "out_shape", "=", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "flops", "+=", "2", "*", "4", "*", "out_shape", "\n", "\n", "", "", "elif", "re", ".", "search", "(", "'flatten.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "re", ".", "search", "(", "'drop.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "re", ".", "search", "(", "'zero_padding2d.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", "or", "re", ".", "search", "(", "'pad.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "re", ".", "search", "(", "'global_average_pooling2d.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", "or", "re", ".", "search", "(", "'gpool.+'", ",", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unknown layer: {}\"", ".", "format", "(", "layer", ".", "get_config", "(", ")", "[", "'name'", "]", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "return", "flops", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.gamma_mul": [[47, 71], ["utils.gamma_mul", "list", "list.extend", "int", "range", "list.extend", "list.extend", "math.log", "len", "line[].append", "copy.deepcopy", "utils.dil_fact"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.gamma_mul", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.dil_fact"], ["", "", "def", "gamma_mul", "(", "dil_fact", ",", "it", "=", "0", ",", "line", "=", "[", "]", ")", ":", "\n", "\n", "# entry point", "\n", "    ", "if", "it", "==", "0", ":", "\n", "        ", "line", "=", "list", "(", ")", "\n", "line", ".", "extend", "(", "[", "[", "1", "]", "]", ")", "\n", "it", "+=", "1", "\n", "\n", "# exit point", "\n", "", "elif", "it", "==", "int", "(", "math", ".", "log", "(", "dil_fact", ",", "2", ")", ")", ":", "\n", "        ", "return", "line", "\n", "\n", "", "else", ":", "\n", "#it += 1 ", "\n", "        ", "for", "pos", "in", "range", "(", "len", "(", "line", ")", ")", ":", "\n", "            ", "line", "[", "pos", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "line", ".", "extend", "(", "[", "[", "0", "]", "*", "(", "it", ")", "+", "[", "1", "]", "]", ")", "\n", "\n", "line", ".", "extend", "(", "copy", ".", "deepcopy", "(", "line", "[", ":", "(", "2", "**", "it", "-", "1", ")", "]", ")", ")", "\n", "\n", "it", "+=", "1", "\n", "\n", "", "return", "gamma_mul", "(", "dil_fact", ",", "it", ",", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.prune_mul": [[72, 154], ["math.floor", "list", "list", "tensorflow.transpose", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.add", "tensorflow.reshape", "tensorflow.transpose", "kernel.get_shape().as_list", "math.log", "list", "len", "tensorflow.constant", "numpy.flip", "numpy.flip", "tensorflow.math.reduce_prod", "tensorflow.reshape", "tensorflow.multiply", "list.extend", "list.append", "list.append", "utils.gamma_mul", "numpy.triu", "numpy.tril", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.transpose", "kernel.get_shape", "list.append", "list.append", "numpy.ones", "numpy.ones", "tensorflow.add", "tf.reshape.get_shape().as_list", "tensorflow.multiply", "tf.constant.get_shape().as_list", "len", "len", "tensorflow.matmul", "tf.reshape.get_shape", "tensorflow.cast", "tensorflow.constant", "tf.constant.get_shape", "tensorflow.reshape", "tensorflow.shape", "gamma.get_shape().as_list", "gamma.get_shape"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.gamma_mul"], ["", "def", "prune_mul", "(", "kernel", ",", "gamma", ")", ":", "\n", "    ", "eps", "=", "1e-6", "\n", "kernel_size", "=", "kernel", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "n_max", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "kernel_size", "-", "eps", ",", "2", ")", ")", "\n", "dil_fact_max", "=", "2", "**", "n_max", "\n", "\n", "# gamma_mul matrix gen", "\n", "matrix_list", "=", "list", "(", ")", "\n", "sum_list", "=", "list", "(", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "kernel_size", ":", "\n", "        ", "vector_list", "=", "list", "(", ")", "\n", "\n", "# first element and multiples of dil_fact_max are always not pruned", "\n", "if", "i", "%", "dil_fact_max", "==", "0", ":", "\n", "            ", "vector_list", ".", "extend", "(", "[", "0", "]", "*", "n_max", ")", "\n", "matrix_list", ".", "append", "(", "vector_list", ")", "\n", "sum_list", ".", "append", "(", "1", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "for", "line", "in", "gamma_mul", "(", "dil_fact_max", ")", ":", "\n", "                ", "matrix_list", ".", "append", "(", "line", ")", "\n", "sum_list", ".", "append", "(", "0", ")", "\n", "i", "+=", "1", "\n", "\n", "# Truncate not necessary rows in matrix_list. ", "\n", "# i.e., from kernel_size to end", "\n", "# if len(matrix_list) == kernel_size, matrix_list[:-0] = [] !!! ", "\n", "", "", "", "if", "len", "(", "matrix_list", ")", "!=", "kernel_size", ":", "\n", "        ", "matrix_list", "=", "matrix_list", "[", ":", "-", "(", "len", "(", "matrix_list", ")", "-", "kernel_size", ")", "]", "\n", "# Same for sum_list", "\n", "sum_list", "=", "sum_list", "[", ":", "-", "(", "len", "(", "sum_list", ")", "-", "kernel_size", ")", "]", "\n", "\n", "", "mask_mul", "=", "tf", ".", "transpose", "(", "tf", ".", "constant", "(", "matrix_list", ",", "shape", "=", "[", "kernel_size", ",", "n_max", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "mask_sum", "=", "tf", ".", "constant", "(", "sum_list", ",", "shape", "=", "[", "kernel_size", ",", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "m_1", "=", "tf", ".", "constant", "(", "\n", "np", ".", "flip", "(", "\n", "np", ".", "triu", "(", "\n", "np", ".", "ones", "(", "(", "n_max", ",", "n_max", ")", ")", ")", ",", "\n", "1", "\n", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "\n", "m_2", "=", "tf", ".", "constant", "(", "\n", "np", ".", "flip", "(", "\n", "np", ".", "tril", "(", "\n", "np", ".", "ones", "(", "(", "n_max", ",", "n_max", ")", ")", ",", "\n", "-", "1", "\n", ")", ",", "\n", "1", "\n", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "\n", "Gamma", "=", "tf", ".", "add", "(", "\n", "tf", ".", "math", ".", "reduce_prod", "(", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "add", "(", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "matmul", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "gamma", ",", "[", "tf", ".", "shape", "(", "gamma", ")", "[", "1", "]", ",", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", ",", "\n", "tf", ".", "constant", "(", "1", ",", "shape", "=", "(", "1", ",", "gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ")", ",", "dtype", "=", "'float32'", ")", "\n", ")", ",", "\n", "m_1", "\n", ")", ",", "\n", "m_2", "\n", ")", ",", "\n", "mask_mul", "\n", ")", ",", "\n", "axis", "=", "0", "\n", ")", ",", "\n", "tf", ".", "reshape", "(", "mask_sum", ",", "[", "mask_sum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "]", ")", "\n", ")", "\n", "\n", "Gamma", "=", "tf", ".", "reshape", "(", "Gamma", ",", "[", "Gamma", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", ",", "1", "]", ")", "\n", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "Gamma", ",", "[", "0", ",", "1", "]", ")", ",", "\n", "tf", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "1", ",", "0", "]", ")", "\n", ")", ",", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.dil_fact": [[155, 172], ["arr.flatten", "reversed", "arr.flatten"], "function", ["None"], ["", "def", "dil_fact", "(", "arr", ",", "op", "=", "'sum'", ")", ":", "\n", "    ", "if", "op", "==", "'sum'", ":", "\n", "        ", "dil", "=", "0", "\n", "for", "i", "in", "arr", ".", "flatten", "(", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "dil", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "return", "2", "**", "dil", "\n", "", "else", ":", "\n", "        ", "dil", "=", "0", "\n", "for", "i", "in", "reversed", "(", "arr", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "dil", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "return", "2", "**", "dil", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.save_dil_fact": [[173, 179], ["open", "open.write", "open.close", "utils.format_structure"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.format_structure"], ["", "", "def", "save_dil_fact", "(", "saving_path", ",", "dil", ",", "cf", ")", ":", "\n", "    ", "f", "=", "open", "(", "saving_path", "+", "'learned_dil_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "'{}'", ".", "format", "(", "cf", ".", "warmup", ")", "+", "'.json'", ",", "'w'", ")", "\n", "f", ".", "write", "(", "format_structure", "(", "dil", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.format_structure": [[180, 182], ["json.dumps"], "function", ["None"], ["", "def", "format_structure", "(", "dil", ")", ":", "\n", "  ", "return", "json", ".", "dumps", "(", "dil", ",", "indent", "=", "2", ",", "sort_keys", "=", "False", ",", "default", "=", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.g_weights": [[183, 192], ["range", "tensorflow.constant", "w.get_shape().as_list", "g_w_list.append", "w.get_shape", "math.ceil", "utils.max_dil"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.max_dil"], ["", "def", "g_weights", "(", "w", ",", "c_in", ",", "c_out", ",", "r_f", ")", ":", "\n", "    ", "kernel_size", "=", "w", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "\n", "g_w_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "kernel_size", ")", ":", "\n", "        ", "g_w_list", ".", "append", "(", "\n", "c_in", "*", "c_out", "*", "math", ".", "ceil", "(", "(", "(", "r_f", "-", "1", ")", "/", "2", "**", "(", "max_dil", "(", "r_f", ")", "-", "i", ")", ")", "-", "0.5", ")", "\n", ")", "\n", "", "return", "tf", ".", "constant", "(", "g_w_list", ",", "shape", "=", "[", "1", ",", "kernel_size", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.effective_size": [[193, 217], ["dict", "model.get_weights", "zip", "re.search", "re.search", "model.count_params", "numpy.array", "utils.dil_fact", "layer.get_weights", "math.ceil"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.dil_fact"], ["", "def", "effective_size", "(", "model", ",", "cf", ")", ":", "\n", "    ", "actual_gamma", "=", "dict", "(", ")", "\n", "\n", "delta_params", "=", "0", "\n", "i", "=", "0", "\n", "names", "=", "[", "weight", ".", "name", "for", "layer", "in", "model", ".", "layers", "for", "weight", "in", "layer", ".", "weights", "]", "\n", "weights", "=", "model", ".", "get_weights", "(", ")", "\n", "for", "name", ",", "weight", "in", "zip", "(", "names", ",", "weights", ")", ":", "\n", "        ", "if", "re", ".", "search", "(", "'learned_conv2d.+_?[0-9]/gamma'", ",", "name", ")", ":", "\n", "            ", "actual_gamma", "[", "i", "]", "=", "weight", "\n", "actual_gamma", "[", "i", "]", "=", "np", ".", "array", "(", "actual_gamma", "[", "i", "]", ">", "cf", ".", "threshold", ",", "dtype", "=", "bool", ")", "\n", "actual_gamma", "[", "i", "]", "=", "dil_fact", "(", "actual_gamma", "[", "i", "]", ",", "op", "=", "'mul'", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "i", "=", "0", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "re", ".", "search", "(", "'learned_conv2d.+_?[0-9]'", ",", "layer", ".", "name", ")", ":", "\n", "# weights organized in the returned list as a gamma | kernel | bias", "\n", "            ", "kernels", "=", "layer", ".", "get_weights", "(", ")", "[", "1", "]", "\n", "delta_params", "+=", "kernels", ".", "shape", "[", "3", "]", "*", "kernels", ".", "shape", "[", "2", "]", "*", "(", "\n", "kernels", ".", "shape", "[", "1", "]", "-", "math", ".", "ceil", "(", "kernels", ".", "shape", "[", "1", "]", "/", "actual_gamma", "[", "i", "]", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "model", ".", "count_params", "(", ")", "-", "delta_params", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.copy_weights": [[218, 242], ["tmp_model.get_weights", "enumerate", "re.search", "model.layers[].set_weights", "re.search", "model.layers[].set_weights", "model.layers[].set_weights", "layer.get_weights", "layer.get_weights", "layer.get_weights"], "function", ["None"], ["", "def", "copy_weights", "(", "model", ",", "tmp_model", ",", "cf", ")", ":", "\n", "# copy weights from tmp_model to model", "\n", "# this tedious step is necessary because keras save in last positions non-trainable", "\n", "# weights, thus passing from non-trainable to trainable generates a mismatch error", "\n", "# between shapes of array of weights", "\n", "    ", "weight_list", "=", "tmp_model", ".", "get_weights", "(", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "tmp_model", ".", "layers", ")", ":", "\n", "        ", "if", "re", ".", "search", "(", "'learned_conv2d.+_?[0-9]'", ",", "layer", ".", "name", ")", ":", "\n", "            ", "if", "cf", ".", "hyst", "==", "0", ":", "\n", "                ", "order", "=", "[", "2", ",", "0", ",", "1", "]", "\n", "", "elif", "cf", ".", "hyst", "==", "1", ":", "\n", "                ", "order", "=", "[", "2", ",", "0", ",", "1", ",", "3", "]", "\n", "", "ordered_w", "=", "[", "layer", ".", "get_weights", "(", ")", "[", "i", "]", "for", "i", "in", "order", "]", "\n", "model", ".", "layers", "[", "i", "]", ".", "set_weights", "(", "ordered_w", ")", "\n", "", "elif", "re", ".", "search", "(", "'weight_norm.+_?[0-9]'", ",", "layer", ".", "name", ")", ":", "\n", "            ", "if", "cf", ".", "hyst", "==", "0", ":", "\n", "                ", "order", "=", "[", "0", ",", "1", ",", "4", ",", "2", ",", "3", "]", "\n", "", "elif", "cf", ".", "hyst", "==", "1", ":", "\n", "                ", "order", "=", "[", "0", ",", "1", ",", "4", ",", "2", ",", "3", ",", "5", "]", "\n", "", "ordered_w", "=", "[", "layer", ".", "get_weights", "(", ")", "[", "i", "]", "for", "i", "in", "order", "]", "\n", "model", ".", "layers", "[", "i", "]", ".", "set_weights", "(", "ordered_w", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "layers", "[", "i", "]", ".", "set_weights", "(", "layer", ".", "get_weights", "(", ")", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.max_dil": [[243, 246], ["math.floor", "math.log"], "function", ["None"], ["", "def", "max_dil", "(", "kernel_dim", ")", ":", "\n", "    ", "eps", "=", "1e-6", "\n", "return", "math", ".", "floor", "(", "math", ".", "log", "(", "kernel_dim", "-", "eps", ",", "2", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.preprocessing.preprocessing_Dalia.preprocessing": [[27, 108], ["dict", "dict", "dict", "dict", "dict", "random.seed", "dict", "print", "os.path.exists", "list", "random.sample", "dict", "numpy.hstack", "numpy.vstack", "numpy.reshape", "numpy.vstack", "dict", "range", "len", "numpy.moveaxis", "numpy.concatenate", "numpy.moveaxis", "np.hstack.append", "sig_list.append", "act_list.append", "numpy.reshape", "ground_truth_list.append", "numpy.vstack", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "numpy.full", "skimage.util.shape.view_as_windows", "skimage.util.shape.view_as_windows", "str", "str"], "function", ["None"], ["def", "preprocessing", "(", "dataset", ",", "cf", ")", ":", "\n", "# Sampling frequency of both ppg and acceleration data in IEEE_Training dataset", "\n", "    ", "fs_IEEE_Training", "=", "125", "\n", "# Sampling frequency of acceleration data in PPG_Dalia dataset", "\n", "# The sampling frequency of ppg data in PPG_Dalia dataset is fs_PPG_Dalia*2", "\n", "fs_PPG_Dalia", "=", "32", "\n", "\n", "fs_activity", "=", "4", "\n", "\n", "Sessioni", "=", "dict", "(", ")", "\n", "S", "=", "dict", "(", ")", "\n", "acc", "=", "dict", "(", ")", "\n", "ppg", "=", "dict", "(", ")", "\n", "activity", "=", "dict", "(", ")", "\n", "\n", "random", ".", "seed", "(", "20", ")", "\n", "\n", "ground_truth", "=", "dict", "(", ")", "\n", "\n", "val", "=", "dataset", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cf", ".", "path_PPG_Dalia", "+", "'slimmed_dalia.pkl'", ")", ":", "\n", "        ", "numbers", "=", "list", "(", "range", "(", "1", ",", "16", ")", ")", "\n", "session_list", "=", "random", ".", "sample", "(", "numbers", ",", "len", "(", "numbers", ")", ")", "\n", "for", "j", "in", "session_list", ":", "\n", "            ", "paz", "=", "j", "\n", "\n", "with", "open", "(", "cf", ".", "path_PPG_Dalia", "+", "'PPG_FieldStudy/S'", "+", "str", "(", "j", ")", "+", "'/S'", "+", "str", "(", "j", ")", "+", "'.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "S", "[", "paz", "]", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "ppg", "[", "paz", "]", "=", "S", "[", "paz", "]", "[", "'signal'", "]", "[", "'wrist'", "]", "[", "'BVP'", "]", "[", ":", ":", "2", "]", "\n", "acc", "[", "paz", "]", "=", "S", "[", "paz", "]", "[", "'signal'", "]", "[", "'wrist'", "]", "[", "'ACC'", "]", "\n", "activity", "[", "paz", "]", "=", "S", "[", "paz", "]", "[", "'activity'", "]", "\n", "ground_truth", "[", "paz", "]", "=", "S", "[", "paz", "]", "[", "'label'", "]", "\n", "\n", "", "sig", "=", "dict", "(", ")", "\n", "act_list", "=", "[", "]", "\n", "groups", "=", "[", "]", "\n", "sig_list", "=", "[", "]", "\n", "ground_truth_list", "=", "[", "]", "\n", "\n", "# Loop on keys of dictionary ground_truth", "\n", "for", "k", "in", "ground_truth", ":", "\n", "# Remeber to set the desired time window", "\n", "            ", "activity", "[", "k", "]", "=", "np", ".", "moveaxis", "(", "view_as_windows", "(", "activity", "[", "k", "]", ",", "(", "4", "*", "cf", ".", "time_window", ",", "1", ")", ",", "4", "*", "2", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "1", ",", "2", ")", "\n", "activity", "[", "k", "]", "=", "activity", "[", "k", "]", "[", ":", ",", ":", ",", "0", "]", "\n", "sig", "[", "k", "]", "=", "np", ".", "concatenate", "(", "(", "ppg", "[", "k", "]", ",", "acc", "[", "k", "]", ")", ",", "axis", "=", "1", ")", "\n", "sig", "[", "k", "]", "=", "np", ".", "moveaxis", "(", "view_as_windows", "(", "sig", "[", "k", "]", ",", "(", "fs_PPG_Dalia", "*", "cf", ".", "time_window", ",", "4", ")", ",", "fs_PPG_Dalia", "*", "2", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "1", ",", "2", ")", "\n", "groups", ".", "append", "(", "np", ".", "full", "(", "sig", "[", "k", "]", ".", "shape", "[", "0", "]", ",", "k", ")", ")", "\n", "sig_list", ".", "append", "(", "sig", "[", "k", "]", ")", "\n", "act_list", ".", "append", "(", "activity", "[", "k", "]", ")", "\n", "ground_truth", "[", "k", "]", "=", "np", ".", "reshape", "(", "ground_truth", "[", "k", "]", ",", "(", "ground_truth", "[", "k", "]", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "ground_truth_list", ".", "append", "(", "ground_truth", "[", "k", "]", ")", "\n", "\n", "#print(\"gruppo\",groups)", "\n", "", "groups", "=", "np", ".", "hstack", "(", "groups", ")", "\n", "X", "=", "np", ".", "vstack", "(", "sig_list", ")", "\n", "y", "=", "np", ".", "reshape", "(", "np", ".", "vstack", "(", "ground_truth_list", ")", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "act", "=", "np", ".", "vstack", "(", "act_list", ")", "\n", "\n", "data", "=", "dict", "(", ")", "\n", "data", "[", "'X'", "]", "=", "X", "\n", "data", "[", "'y'", "]", "=", "y", "\n", "data", "[", "'groups'", "]", "=", "groups", "\n", "data", "[", "'act'", "]", "=", "act", "\n", "\n", "with", "open", "(", "cf", ".", "path_PPG_Dalia", "+", "'slimmed_dalia.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "cf", ".", "path_PPG_Dalia", "+", "'slimmed_dalia.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "X", "=", "data", "[", "'X'", "]", "\n", "y", "=", "data", "[", "'y'", "]", "\n", "groups", "=", "data", "[", "'groups'", "]", "\n", "act", "=", "data", "[", "'act'", "]", "\n", "\n", "", "", "print", "(", "\"dimensione train\"", ",", "X", ".", "shape", ",", "\"dimesione test\"", ",", "y", ".", "shape", ",", "\"dimensione gruppi\"", ",", "groups", ".", "shape", ")", "\n", "\n", "return", "X", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ",", "y", ",", "groups", "[", ":", "y", ".", "shape", "[", "0", "]", "]", ",", "act", "[", ":", "y", ".", "shape", "[", "0", "]", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.Dilation_Reg.__init__": [[55, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reg_strength", ",", "c_in", ",", "c_out", ",", "r_f", ",", "l2", "=", "0.05", ")", ":", "\n", "        ", "self", ".", "reg_strength", "=", "reg_strength", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_out", "=", "c_out", "\n", "self", ".", "r_f", "=", "r_f", "\n", "self", ".", "l2", "=", "l2", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.Dilation_Reg.__call__": [[62, 71], ["utils.g_weights", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.square", "tensorflow.abs"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.g_weights"], ["", "def", "__call__", "(", "self", ",", "w", ")", ":", "\n", "        ", "gamma_weights", "=", "g_weights", "(", "w", ",", "self", ".", "c_in", ",", "self", ".", "c_out", ",", "self", ".", "r_f", ")", "\n", "return", "self", ".", "reg_strength", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "\n", "gamma_weights", ",", "\n", "tf", ".", "abs", "(", "w", ")", ",", "\n", ")", "\n", ")", "+", "self", ".", "l2", "*", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "w", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.Dilation_Reg.get_config": [[74, 80], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "'regularization_strength'", ":", "self", ".", "reg_strength", ",", "\n", "'channel_in'", ":", "self", ".", "c_in", ",", "\n", "'channel_out'", ":", "self", ".", "c_out", ",", "\n", "'receptive field'", ":", "self", ".", "r_f", ",", "\n", "'l2_strength'", ":", "self", ".", "l2", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.clip_0_1.__init__": [[84, 86], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.clip_0_1.__call__": [[87, 89], ["tensorflow.clip_by_value"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "w", ")", ":", "\n", "        ", "return", "tf", ".", "clip_by_value", "(", "w", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.clip_0_1.get_config": [[90, 92], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.LearnedConv2D.__init__": [[95, 100], ["tensorflow.keras.layers.Conv2D.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cf", "=", "None", ",", "gamma_trainable", "=", "True", ",", "hyst", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cf", "=", "cf", "\n", "self", ".", "gamma_trainable", "=", "gamma_trainable", "\n", "self", ".", "hyst", "=", "hyst", "\n", "super", "(", "LearnedConv2D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.LearnedConv2D._assign_new_value": [[101, 105], ["tensorflow.python.keras.backend.name_scope", "tensorflow.python.framework.ops.colocate_with", "tensorflow.python.ops.state_ops.assign"], "methods", ["None"], ["", "def", "_assign_new_value", "(", "self", ",", "variable", ",", "value", ")", ":", "\n", "        ", "with", "K", ".", "name_scope", "(", "'AssignNewValue'", ")", "as", "scope", ":", "\n", "            ", "with", "ops", ".", "colocate_with", "(", "variable", ")", ":", "\n", "                ", "return", "state_ops", ".", "assign", "(", "variable", ",", "value", ",", "name", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.LearnedConv2D.build": [[106, 182], ["tensorflow.python.framework.tensor_shape.TensorShape", "int", "auto_layers.LearnedConv2D.add_weight", "auto_layers.LearnedConv2D.add_weight", "tensorflow.python.keras.engine.base_layer.InputSpec", "tensorflow.python.ops.nn_ops.Convolution", "ValueError", "auto_layers.LearnedConv2D.add_weight", "auto_layers.LearnedConv2D.add_weight", "isinstance", "op_padding.upper.upper.upper", "auto_layers.clip_0_1", "auto_layers.Dilation_Reg", "tensorflow.keras.initializers.RandomUniform", "tensorflow.python.keras.utils.conv_utils.convert_data_format", "utils.max_dil", "tensorflow.keras.constraints.NonNeg", "tensorflow.keras.initializers.RandomUniform", "utils.max_dil"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.max_dil", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.max_dil"], ["", "", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_shape", "=", "tensor_shape", ".", "TensorShape", "(", "input_shape", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "          ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "          ", "channel_axis", "=", "-", "1", "\n", "", "if", "input_shape", ".", "dims", "[", "channel_axis", "]", ".", "value", "is", "None", ":", "\n", "          ", "raise", "ValueError", "(", "'The channel dimension of the inputs '", "\n", "'should be defined. Found `None`.'", ")", "\n", "\n", "", "input_dim", "=", "int", "(", "input_shape", "[", "channel_axis", "]", ")", "\n", "kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "input_dim", ",", "self", ".", "filters", ")", "\n", "\n", "# Trainable parameters that identifies the learned amount of dilation", "\n", "self", ".", "gamma", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'gamma'", ",", "\n", "shape", "=", "(", "1", ",", "max_dil", "(", "self", ".", "kernel_size", "[", "-", "1", "]", ")", ")", ",", "\n", "#constraint=tf.keras.constraints.NonNeg(),", "\n", "constraint", "=", "clip_0_1", "(", ")", ",", "\n", "regularizer", "=", "Dilation_Reg", "(", "self", ".", "cf", ".", "reg_strength", ",", "input_dim", ",", "\n", "self", ".", "filters", ",", "self", ".", "kernel_size", "[", "-", "1", "]", ",", "l2", "=", "self", ".", "cf", ".", "l2", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "1", ",", "1", ")", ",", "\n", "trainable", "=", "self", ".", "gamma_trainable", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "hyst", "==", "1", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'alpha'", ",", "\n", "shape", "=", "(", "1", ",", "max_dil", "(", "self", ".", "kernel_size", "[", "-", "1", "]", ")", ")", ",", "\n", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "1.", ",", "1.", ")", ",", "\n", "synchronization", "=", "tf_variables", ".", "VariableSynchronization", ".", "ON_READ", ",", "\n", "trainable", "=", "False", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'kernel'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "          ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'bias'", ",", "\n", "shape", "=", "(", "self", ".", "filters", ",", ")", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "input_spec", "=", "InputSpec", "(", "ndim", "=", "self", ".", "rank", "+", "2", ",", "\n", "axes", "=", "{", "channel_axis", ":", "input_dim", "}", ")", "\n", "\n", "if", "self", ".", "padding", "==", "'causal'", ":", "\n", "          ", "op_padding", "=", "'valid'", "\n", "", "else", ":", "\n", "          ", "op_padding", "=", "self", ".", "padding", "\n", "", "if", "not", "isinstance", "(", "op_padding", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "          ", "op_padding", "=", "op_padding", ".", "upper", "(", ")", "\n", "\n", "", "self", ".", "_convolution_op", "=", "nn_ops", ".", "Convolution", "(", "\n", "input_shape", ",", "\n", "filter_shape", "=", "self", ".", "kernel", ".", "shape", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ",", "\n", "strides", "=", "self", ".", "strides", ",", "\n", "padding", "=", "op_padding", ",", "\n", "data_format", "=", "conv_utils", ".", "convert_data_format", "(", "self", ".", "data_format", ",", "\n", "self", ".", "rank", "+", "2", ")", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.LearnedConv2D.call": [[183, 223], ["auto_layers.LearnedConv2D._convolution_op", "utils.binarize", "utils.prune_mul", "auto_layers.LearnedConv2D.activation", "utils.binarize", "utils.binarize", "tensorflow.add", "auto_layers.LearnedConv2D._assign_new_value", "utils.prune_mul", "tensorflow.python.ops.nn.bias_add", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.nn.bias_add", "tensorflow.constant", "utils.max_dil"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.prune_mul", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.LearnedConv2D._assign_new_value", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.prune_mul", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.utils.max_dil"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "hyst", "==", "0", ":", "\n", "            ", "bin_gamma", "=", "binarize", "(", "self", ".", "gamma", ",", "self", ".", "cf", ".", "threshold", ")", "\n", "pruned_kernel", "=", "prune_mul", "(", "self", ".", "kernel", ",", "bin_gamma", ")", "\n", "", "elif", "self", ".", "hyst", "==", "1", ":", "\n", "            ", "bin_alpha_a", "=", "binarize", "(", "self", ".", "gamma", ",", "self", ".", "cf", ".", "threshold", ")", "\n", "bin_alpha_b", "=", "binarize", "(", "self", ".", "gamma", ",", "self", ".", "cf", ".", "threshold", "+", "self", ".", "cf", ".", "epsilon", ")", "\n", "bin_alpha", "=", "tf", ".", "add", "(", "\n", "tf", ".", "multiply", "(", "\n", "self", ".", "alpha", ",", "\n", "bin_alpha_a", "\n", ")", ",", "\n", "tf", ".", "multiply", "(", "\n", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "1", ",", "max_dil", "(", "self", ".", "kernel_size", "[", "-", "1", "]", ")", "]", ")", "-", "self", ".", "alpha", ",", "\n", "bin_alpha_b", "\n", ")", "\n", ")", "\n", "\n", "#self.add_update((self.alpha, bin_alpha), inputs)", "\n", "self", ".", "_assign_new_value", "(", "self", ".", "alpha", ",", "bin_alpha", ")", "\n", "\n", "pruned_kernel", "=", "prune_mul", "(", "self", ".", "kernel", ",", "bin_alpha", ")", "\n", "\n", "", "outputs", "=", "self", ".", "_convolution_op", "(", "inputs", ",", "pruned_kernel", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "          ", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "if", "self", ".", "rank", "==", "1", ":", "\n", "# nn.bias_add does not accept a 1D input tensor.", "\n", "              ", "bias", "=", "array_ops", ".", "reshape", "(", "self", ".", "bias", ",", "(", "1", ",", "self", ".", "filters", ",", "1", ")", ")", "\n", "outputs", "+=", "bias", "\n", "", "else", ":", "\n", "              ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ",", "data_format", "=", "'NCHW'", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ",", "data_format", "=", "'NHWC'", ")", "\n", "\n", "", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "          ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.WeightNormConv2D.__init__": [[226, 228], ["tensorflow.keras.layers.Conv2D.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WeightNormConv2D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.WeightNormConv2D.build": [[230, 291], ["tensorflow.python.framework.tensor_shape.TensorShape", "int", "auto_layers.WeightNormConv2D.add_weight", "auto_layers.WeightNormConv2D.add_weight", "tensorflow.python.keras.engine.base_layer.InputSpec", "tensorflow.python.ops.nn_ops.Convolution", "ValueError", "auto_layers.WeightNormConv2D.add_weight", "isinstance", "op_padding.upper.upper.upper", "tensorflow.keras.initializers.RandomUniform", "tensorflow.python.keras.utils.conv_utils.convert_data_format"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_shape", "=", "tensor_shape", ".", "TensorShape", "(", "input_shape", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "          ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "          ", "channel_axis", "=", "-", "1", "\n", "", "if", "input_shape", ".", "dims", "[", "channel_axis", "]", ".", "value", "is", "None", ":", "\n", "          ", "raise", "ValueError", "(", "'The channel dimension of the inputs '", "\n", "'should be defined. Found `None`.'", ")", "\n", "\n", "", "input_dim", "=", "int", "(", "input_shape", "[", "channel_axis", "]", ")", "\n", "kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "input_dim", ",", "self", ".", "filters", ")", "\n", "\n", "self", ".", "wn_g", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'wn_g'", ",", "\n", "shape", "=", "(", "self", ".", "filters", ",", ")", ",", "\n", "initializer", "=", "tf", ".", "keras", ".", "initializers", ".", "RandomUniform", "(", "1", ",", "1", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'kernel'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "          ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'bias'", ",", "\n", "shape", "=", "(", "self", ".", "filters", ",", ")", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ",", "\n", "trainable", "=", "True", ",", "\n", "dtype", "=", "self", ".", "dtype", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "input_spec", "=", "InputSpec", "(", "ndim", "=", "self", ".", "rank", "+", "2", ",", "\n", "axes", "=", "{", "channel_axis", ":", "input_dim", "}", ")", "\n", "\n", "if", "self", ".", "padding", "==", "'causal'", ":", "\n", "          ", "op_padding", "=", "'valid'", "\n", "", "else", ":", "\n", "          ", "op_padding", "=", "self", ".", "padding", "\n", "", "if", "not", "isinstance", "(", "op_padding", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "          ", "op_padding", "=", "op_padding", ".", "upper", "(", ")", "\n", "\n", "", "self", ".", "_convolution_op", "=", "nn_ops", ".", "Convolution", "(", "\n", "input_shape", ",", "\n", "filter_shape", "=", "self", ".", "kernel", ".", "shape", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ",", "\n", "strides", "=", "self", ".", "strides", ",", "\n", "padding", "=", "op_padding", ",", "\n", "data_format", "=", "conv_utils", ".", "convert_data_format", "(", "self", ".", "data_format", ",", "\n", "self", ".", "rank", "+", "2", ")", ")", "\n", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.WeightNormConv2D.call": [[292, 317], ["tensorflow.sqrt", "tensorflow.rsqrt", "auto_layers.WeightNormConv2D._convolution_op", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "auto_layers.WeightNormConv2D.activation", "tensorflow.square", "tensorflow.square", "tensorflow.python.ops.nn.bias_add", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.nn.bias_add"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "\n", "        ", "norm_w", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "self", ".", "kernel", ")", ",", "[", "0", ",", "1", ",", "2", "]", ",", "keepdims", "=", "False", ")", ")", "\n", "norm_v", "=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "square", "(", "self", ".", "wn_g", ")", ")", ")", "\n", "norm_kernel", "=", "self", ".", "kernel", "*", "self", ".", "wn_g", "*", "(", "norm_v", "*", "norm_w", ")", "\n", "\n", "outputs", "=", "self", ".", "_convolution_op", "(", "inputs", ",", "norm_kernel", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "          ", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "            ", "if", "self", ".", "rank", "==", "1", ":", "\n", "# nn.bias_add does not accept a 1D input tensor.", "\n", "              ", "bias", "=", "array_ops", ".", "reshape", "(", "self", ".", "bias", ",", "(", "1", ",", "self", ".", "filters", ",", "1", ")", ")", "\n", "outputs", "+=", "bias", "\n", "", "else", ":", "\n", "              ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ",", "data_format", "=", "'NCHW'", ")", "\n", "", "", "else", ":", "\n", "            ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ",", "data_format", "=", "'NHWC'", ")", "\n", "\n", "", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "          ", "return", "self", ".", "activation", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.__init__": [[367, 401], ["tensorflow.keras.layers.Layer.__init__", "int", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.engine.base_layer.InputSpec", "kwargs.pop", "tensorflow.python.keras.regularizers.get"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "units", ",", "\n", "activation", "=", "None", ",", "\n", "use_bias", "=", "True", ",", "\n", "# kernel_initializer='glorot_uniform',", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "# kernel_regularizer=None,", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "# kernel_constraint=None,", "\n", "bias_constraint", "=", "None", ",", "\n", "tied_to", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "'input_shape'", "not", "in", "kwargs", "and", "'input_dim'", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'input_shape'", "]", "=", "(", "kwargs", ".", "pop", "(", "'input_dim'", ")", ",", ")", "\n", "\n", "", "super", "(", "DenseTied", ",", "self", ")", ".", "__init__", "(", "\n", "activity_regularizer", "=", "regularizers", ".", "get", "(", "activity_regularizer", ")", ",", "**", "kwargs", ")", "\n", "self", ".", "tied_to", "=", "tied_to", "\n", "self", ".", "units", "=", "int", "(", "units", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "\n", "\"\"\"transposed weights are variables and don't use any regularizators or initizlizators\"\"\"", "\n", "# self.kernel_initializer = None", "\n", "# self.kernel_constraint = None  ", "\n", "# self.kernel_regularizer = None ", "\n", "\n", "\"\"\"biases are still initialized and regularized\"\"\"", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "self", ".", "supports_masking", "=", "True", "\n", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.build": [[402, 440], ["tensorflow.python.framework.tensor_shape.TensorShape", "tensorflow.python.keras.engine.base_layer.InputSpec", "isinstance", "ValueError", "tensorflow.transpose", "tensorflow.transpose", "auto_layers.DenseTied.add_weight", "model.get_layer", "tensorflow.get_collection"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_shape", "=", "tensor_shape", ".", "TensorShape", "(", "input_shape", ")", "\n", "if", "input_shape", "[", "-", "1", "]", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'The last dimension of the inputs to `Dense` '", "\n", "'should be defined. Found `None`.'", ")", "\n", "", "self", ".", "input_spec", "=", "InputSpec", "(", "min_ndim", "=", "2", ",", "\n", "axes", "=", "{", "-", "1", ":", "input_shape", "[", "-", "1", "]", "}", ")", "\n", "\n", "\"\"\"Get and transpose tied weights \n        Caution: <weights> method returns array of arrays with kernels and biases and use only kernels here\"\"\"", "\n", "\n", "if", "isinstance", "(", "self", ".", "tied_to", ",", "str", ")", ":", "\n", "# if <tied_to> is str i.e. tf layer name", "\n", "            ", "try", ":", "\n", "                ", "weights", "=", "model", ".", "get_layer", "(", "\"{}\"", ".", "format", "(", "self", ".", "tied_to", ")", ")", ".", "weights", "[", "0", "]", "\n", "", "except", ":", "\n", "                ", "weights", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "\"{}\"", ".", "format", "(", "self", ".", "tied_to", ")", ")", "[", "0", "]", "\n", "", "self", ".", "transposed_weights", "=", "tf", ".", "transpose", "(", "weights", ",", "name", "=", "'{}_kernel_transpose'", ".", "format", "(", "self", ".", "tied_to", ")", ")", "\n", "\n", "", "else", ":", "\n", "# if <tied_to> is layer variable", "\n", "            ", "weights", "=", "self", ".", "tied_to", ".", "weights", "[", "0", "]", "\n", "#weights = self.tied_to.kernel", "\n", "self", ".", "transposed_weights", "=", "tf", ".", "transpose", "(", "weights", ",", "name", "=", "'{}_kernel_transpose'", ".", "format", "(", "self", ".", "tied_to", ".", "name", ")", ")", "\n", "\n", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "'bias'", ",", "\n", "shape", "=", "[", "self", ".", "units", ",", "]", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ",", "\n", "dtype", "=", "self", ".", "dtype", ",", "\n", "trainable", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.call": [[441, 481], ["len", "tensorflow.python.ops.standard_ops.tensordot", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.keras.backend.is_sparse", "tensorflow.python.ops.nn.bias_add", "auto_layers.DenseTied.activation", "tensorflow.python.eager.context.executing_eagerly", "tensorflow.python.ops.math_ops.cast.shape.as_list", "tensorflow.python.ops.gen_math_ops.mat_mul.set_shape", "tensorflow.python.ops.sparse_ops.sparse_tensor_dense_matmul", "tensorflow.python.ops.gen_math_ops.mat_mul"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "rank", "=", "len", "(", "inputs", ".", "shape", ")", "\n", "if", "rank", ">", "2", ":", "\n", "# Broadcasting is required for the inputs.", "\n", "          ", "outputs", "=", "standard_ops", ".", "tensordot", "(", "inputs", ",", "self", ".", "transposed_weights", ",", "[", "[", "rank", "-", "1", "]", ",", "[", "0", "]", "]", ")", "\n", "# Reshape the output back to the original ndim of the input.", "\n", "if", "not", "context", ".", "executing_eagerly", "(", ")", ":", "\n", "            ", "shape", "=", "inputs", ".", "shape", ".", "as_list", "(", ")", "\n", "output_shape", "=", "shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "units", "]", "\n", "outputs", ".", "set_shape", "(", "output_shape", ")", "\n", "", "", "else", ":", "\n", "          ", "inputs", "=", "math_ops", ".", "cast", "(", "inputs", ",", "self", ".", "_compute_dtype", ")", "\n", "if", "K", ".", "is_sparse", "(", "inputs", ")", ":", "\n", "            ", "outputs", "=", "sparse_ops", ".", "sparse_tensor_dense_matmul", "(", "inputs", ",", "self", ".", "transposed_weights", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "gen_math_ops", ".", "mat_mul", "(", "inputs", ",", "self", ".", "transposed_weights", ")", "\n", "", "", "if", "self", ".", "use_bias", ":", "\n", "          ", "outputs", "=", "nn", ".", "bias_add", "(", "outputs", ",", "self", ".", "bias", ")", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "          ", "return", "self", ".", "activation", "(", "outputs", ")", "# pylint: disable=not-callable", "\n", "", "return", "outputs", "\n", "'''\n        inputs = ops.convert_to_tensor(inputs, dtype=self.dtype)\n        rank = common_shapes.rank(inputs)\n        if rank > 2:\n            # Broadcasting is required for the inputs.\n            outputs = standard_ops.tensordot(inputs, self.transposed_weights, [[rank - 1], [0]])\n            # Reshape the output back to the original ndim of the input.\n            if not context.executing_eagerly():\n                shape = inputs.get_shape().as_list()\n                output_shape = shape[:-1] + [self.units]\n                outputs.set_shape(output_shape)\n        else:\n            outputs = gen_math_ops.mat_mul(inputs, self.transposed_weights)\n        if self.use_bias:\n            outputs = nn.bias_add(outputs, self.bias)\n        if self.activation is not None:\n            return self.activation(outputs)  # pylint: disable=not-callable\n        return outputs\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.compute_output_shape": [[482, 490], ["tensorflow.python.framework.tensor_shape.TensorShape", "input_shape.with_rank_at_least.with_rank_at_least.with_rank_at_least", "input_shape[].concatenate", "ValueError"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_shape", "=", "tensor_shape", ".", "TensorShape", "(", "input_shape", ")", "\n", "input_shape", "=", "input_shape", ".", "with_rank_at_least", "(", "2", ")", "\n", "if", "input_shape", "[", "-", "1", "]", ".", "value", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The innermost dimension of input_shape must be defined, but saw: %s'", "\n", "%", "input_shape", ")", "\n", "", "return", "input_shape", "[", ":", "-", "1", "]", ".", "concatenate", "(", "self", ".", "units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config": [[491, 507], ["super().get_config", "dict", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.custom_layers.auto_layers.DenseTied.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "'units'", ":", "self", ".", "units", ",", "\n", "'activation'", ":", "activations", ".", "serialize", "(", "self", ".", "activation", ")", ",", "\n", "'use_bias'", ":", "self", ".", "use_bias", ",", "\n", "# 'kernel_initializer': initializers.serialize(self.kernel_initializer),", "\n", "'bias_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "bias_initializer", ")", ",", "\n", "# 'kernel_regularizer': regularizers.serialize(self.kernel_regularizer),", "\n", "'bias_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "bias_regularizer", ")", ",", "\n", "'activity_regularizer'", ":", "\n", "regularizers", ".", "serialize", "(", "self", ".", "activity_regularizer", ")", ",", "\n", "# 'kernel_constraint': constraints.serialize(self.kernel_constraint),", "\n", "'bias_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "bias_constraint", ")", "\n", "}", "\n", "base_config", "=", "super", "(", "DenseTied", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_pit": [[24, 132], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.summary", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "custom_layers.auto_layers.LearnedConv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense"], "function", ["None"], ["def", "TEMPONet_pit", "(", "width_mult", ",", "in_shape", ",", "cf", ",", "trainable", "=", "True", ",", "ofmap", "=", "[", "]", ")", ":", "\n", "\n", "    ", "input_channel", "=", "width_mult", "*", "32", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "if", "not", "ofmap", ":", "\n", "        ", "ofmap", "=", "[", "\n", "32", ",", "32", ",", "64", ",", "\n", "64", ",", "64", ",", "128", ",", "\n", "128", ",", "128", ",", "128", ",", "\n", "256", ",", "128", ",", "1", "\n", "]", "\n", "\n", "", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "0", "]", ",", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "1", "]", ",", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "2", "]", ",", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "input_channel", "=", "width_mult", "*", "64", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "3", "]", ",", "kernel_size", "=", "(", "1", ",", "9", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", "//", "2", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "4", "]", ",", "kernel_size", "=", "(", "1", ",", "9", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", "//", "2", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "5", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "strides", "=", "2", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "input_channel", "=", "width_mult", "*", "128", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "6", "]", ",", "kernel_size", "=", "(", "1", ",", "17", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", "//", "4", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "LearnedConv2D", "(", "\n", "cf", "=", "cf", ",", "\n", "gamma_trainable", "=", "trainable", ",", "\n", "filters", "=", "ofmap", "[", "7", "]", ",", "kernel_size", "=", "(", "1", ",", "17", ")", ",", "padding", "=", "'same'", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "input_shape", "=", "(", "1", ",", "in_shape", "//", "4", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "filters", "=", "ofmap", "[", "8", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "strides", "=", "4", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "9", "]", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "10", "]", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "11", "]", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_mn": [[133, 263], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.summary", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.GlobalAveragePooling2D", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil"], "function", ["None"], ["", "def", "TEMPONet_mn", "(", "width_mult", ",", "in_shape", ",", "dil_ht", ",", "dil_list", "=", "[", "]", ",", "ofmap", "=", "[", "]", ")", ":", "\n", "\n", "    ", "rf", "=", "[", "5", ",", "9", ",", "17", "]", "\n", "\n", "if", "dil_ht", ":", "\n", "        ", "dil_list", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "", "else", ":", "\n", "        ", "if", "not", "dil_list", ":", "\n", "            ", "dil_list", "=", "[", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "\n", "1", ",", "1", "\n", "]", "\n", "\n", "", "", "if", "not", "ofmap", ":", "\n", "        ", "ofmap", "=", "[", "\n", "32", ",", "32", ",", "64", ",", "\n", "64", ",", "64", ",", "128", ",", "\n", "128", ",", "128", ",", "128", ",", "\n", "256", ",", "128", ",", "1", "\n", "]", "\n", "\n", "", "input_channel", "=", "width_mult", "*", "32", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "0", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "0", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", ",", "4", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "1", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "1", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", ",", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "4", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "2", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "2", "]", ")", ")", ",", "\n", "padding", "=", "'valid'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "2", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "+", "4", ",", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "input_channel", "=", "width_mult", "*", "64", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "3", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "1", "]", "/", "dil_list", "[", "3", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "3", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "8", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "4", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "1", "]", "/", "dil_list", "[", "4", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "4", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "8", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "4", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "5", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'valid'", ",", "\n", "strides", "=", "2", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "4", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "input_channel", "=", "width_mult", "*", "128", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "6", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "2", "]", "/", "dil_list", "[", "5", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "5", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "16", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "7", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "2", "]", "/", "dil_list", "[", "6", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "6", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "16", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "5", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "8", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'valid'", ",", "\n", "strides", "=", "4", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "5", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "#model.add(layers.BatchNormalization())", "\n", "\n", "# Conv2D <==> Dense(256)", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "filters", "=", "ofmap", "[", "9", "]", ",", "kernel_size", "=", "(", "1", ",", "4", ")", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "64", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "# Conv2D <==> Dense(128)", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "filters", "=", "ofmap", "[", "10", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "256", ",", "256", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "\n", "# Conv2D <==> Dense(1)", "\n", "model", ".", "add", "(", "layers", ".", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "filters", "=", "1", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "256", ",", "128", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "GlobalAveragePooling2D", "(", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_learned": [[264, 396], ["tensorflow.keras.Sequential", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.add", "tensorflow.keras.Sequential.summary", "enumerate", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.ZeroPadding2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.AveragePooling2D", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Dense", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil"], "function", ["None"], ["", "def", "TEMPONet_learned", "(", "width_mult", ",", "in_shape", ",", "dil_ht", ",", "dil_list", "=", "[", "]", ",", "ofmap", "=", "[", "]", ",", "n_ch", "=", "4", ")", ":", "\n", "\n", "    ", "rf", "=", "[", "5", ",", "9", ",", "17", "]", "\n", "\n", "if", "not", "dil_list", "and", "dil_ht", ":", "\n", "        ", "dil_list", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "", "elif", "not", "dil_list", ":", "\n", "        ", "dil_list", "=", "[", "\n", "1", ",", "1", ",", "1", ",", "\n", "1", ",", "1", ",", "\n", "1", ",", "1", "\n", "]", "\n", "\n", "\n", "", "if", "not", "ofmap", ":", "\n", "        ", "ofmap", "=", "[", "\n", "32", ",", "32", ",", "64", ",", "\n", "64", ",", "64", ",", "128", ",", "\n", "128", ",", "128", ",", "128", ",", "\n", "256", ",", "128", ",", "1", "\n", "]", "\n", "", "else", ":", "\n", "        ", "for", "idx", ",", "i", "in", "enumerate", "(", "ofmap", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "ofmap", "[", "idx", "]", "=", "1", "\n", "\n", "\n", "", "", "", "input_channel", "=", "width_mult", "*", "32", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "0", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "0", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", ",", "n_ch", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "1", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "1", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "1", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", ",", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "4", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "2", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "0", "]", "/", "dil_list", "[", "2", "]", ")", ")", ",", "\n", "padding", "=", "'valid'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "2", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "+", "4", ",", "32", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "input_channel", "=", "width_mult", "*", "64", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "3", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "1", "]", "/", "dil_list", "[", "3", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "3", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "8", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "4", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "1", "]", "/", "dil_list", "[", "4", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "4", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "8", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "4", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "5", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'valid'", ",", "\n", "strides", "=", "2", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "2", "+", "4", ",", "64", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "input_channel", "=", "width_mult", "*", "128", "\n", "output_channel", "=", "input_channel", "*", "2", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "6", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "2", "]", "/", "dil_list", "[", "5", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "5", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "16", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "7", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "math", ".", "ceil", "(", "rf", "[", "2", "]", "/", "dil_list", "[", "6", "]", ")", ")", ",", "\n", "padding", "=", "'same'", ",", "dilation_rate", "=", "(", "1", ",", "dil_list", "[", "6", "]", ")", ",", "\n", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "16", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "ZeroPadding2D", "(", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "5", ",", "0", ")", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "ofmap", "[", "8", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "5", ")", ",", "padding", "=", "'valid'", ",", "\n", "strides", "=", "4", ",", "input_shape", "=", "(", "1", ",", "in_shape", "/", "8", "+", "5", ",", "128", ")", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "AveragePooling2D", "(", "pool_size", "=", "(", "1", ",", "2", ")", ",", "strides", "=", "2", ",", "padding", "=", "'valid'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "9", "]", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "10", "]", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "layers", ".", "BatchNormalization", "(", ")", ")", "\n", "\n", "model", ".", "add", "(", "layers", ".", "Dense", "(", "ofmap", "[", "11", "]", ")", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.warmup": [[34, 41], ["model.fit", "numpy.transpose", "X_sh.reshape"], "function", ["None"], ["def", "warmup", "(", "model", ",", "epochs_num", ",", "X_sh", ",", "y_sh", ",", "early_stop", ",", "checkpoint", ",", "cf", ")", ":", "\n", "    ", "hist", "=", "model", ".", "fit", "(", "x", "=", "np", ".", "transpose", "(", "X_sh", ".", "reshape", "(", "X_sh", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_sh", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.1", ",", "verbose", "=", "1", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "epochs", "=", "epochs_num", ",", "\n", "callbacks", "=", "[", "early_stop", ",", "checkpoint", "]", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.train_gammas": [[42, 49], ["model.fit", "numpy.transpose", "X_sh.reshape"], "function", ["None"], ["", "def", "train_gammas", "(", "model", ",", "X_sh", ",", "y_sh", ",", "early_stop", ",", "save_gamma", ",", "exp_str", ",", "cf", ")", ":", "\n", "    ", "hist", "=", "model", ".", "fit", "(", "x", "=", "np", ".", "transpose", "(", "X_sh", ".", "reshape", "(", "X_sh", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_sh", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.1", ",", "verbose", "=", "1", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "epochs", "=", "cf", ".", "epochs", ",", "\n", "callbacks", "=", "[", "early_stop", ",", "save_gamma", ",", "exp_str", "]", ")", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.morphnet_search": [[50, 59], ["model.fit", "numpy.transpose", "X_sh.reshape"], "function", ["None"], ["", "def", "morphnet_search", "(", "model", ",", "X_sh", ",", "y_sh", ",", "callback_list", ",", "cf", ")", ":", "\n", "    ", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "np", ".", "transpose", "(", "X_sh", ".", "reshape", "(", "X_sh", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_sh", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.1", ",", "verbose", "=", "1", ",", "batch_size", "=", "cf", ".", "batch_size_MN", ",", "epochs", "=", "cf", ".", "epochs_MN", ",", "\n", "callbacks", "=", "callback_list", ")", "\n", "\n", "return", "hist", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.retrain_dil": [[60, 143], ["dict", "dict", "dict", "sklearn.model_selection.GroupKFold", "sklearn.model_selection.GroupKFold.get_n_splits", "RandomGroupkfold.RandomGroupKFold_split", "sklearn.model_selection.LeaveOneGroupOut", "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", "sklearn.model_selection.LeaveOneGroupOut.split", "open", "pickle.dump", "models.build_TEMPONet.TEMPONet_learned", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.optimizers.Adam", "build_TEMPONet.TEMPONet_learned.compile", "sklearn.utils.shuffle", "print", "print", "print", "build_TEMPONet.TEMPONet_learned.fit", "build_TEMPONet.TEMPONet_learned.predict", "print", "open", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "X_test.reshape", "json.loads().items", "str", "X_train.reshape", "numpy.transpose", "X_validate.reshape", "str", "str", "str", "json.loads", "f.read"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.RandomGroupkfold.RandomGroupKFold_split", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_learned"], ["", "def", "retrain_dil", "(", "groups", ",", "X", ",", "y", ",", "activity", ",", "checkpoint", ",", "early_stop", ",", "cf", ",", "ofmap", ")", ":", "\n", "\n", "    ", "predictions", "=", "dict", "(", ")", "\n", "MAE", "=", "dict", "(", ")", "\n", "\n", "dataset", "=", "dict", "(", ")", "\n", "\n", "# organize data", "\n", "group_kfold", "=", "GroupKFold", "(", "n_splits", "=", "4", ")", "\n", "group_kfold", ".", "get_n_splits", "(", "X", ",", "y", ",", "groups", ")", "\n", "\n", "# retrain and cross-validate", "\n", "#result = rgkf.RandomGroupKFold_split(groups,4,cf.a)", "\n", "result", "=", "RandomGroupKFold_split", "(", "groups", ",", "4", ",", "cf", ".", "a", ")", "\n", "for", "train_index", ",", "test_val_index", "in", "result", ":", "\n", "        ", "X_train", ",", "X_val_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_val_index", "]", "\n", "y_train", ",", "y_val_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_val_index", "]", "\n", "activity_train", ",", "activity_val_test", "=", "activity", "[", "train_index", "]", ",", "activity", "[", "test_val_index", "]", "\n", "\n", "logo", "=", "LeaveOneGroupOut", "(", ")", "\n", "logo", ".", "get_n_splits", "(", "groups", "=", "groups", "[", "test_val_index", "]", ")", "# 'groups' is always required", "\n", "for", "validate_index", ",", "test_index", "in", "logo", ".", "split", "(", "X_val_test", ",", "y_val_test", ",", "groups", "[", "test_val_index", "]", ")", ":", "\n", "            ", "X_validate", ",", "X_test", "=", "X_val_test", "[", "validate_index", "]", ",", "X_val_test", "[", "test_index", "]", "\n", "y_validate", ",", "y_test", "=", "y_val_test", "[", "validate_index", "]", ",", "y_val_test", "[", "test_index", "]", "\n", "activity_validate", ",", "activity_test", "=", "activity_val_test", "[", "validate_index", "]", ",", "activity_val_test", "[", "test_index", "]", "\n", "groups_val", "=", "groups", "[", "test_val_index", "]", "\n", "k", "=", "groups_val", "[", "test_index", "]", "[", "0", "]", "\n", "\n", "# init", "\n", "try", ":", "\n", "               ", "del", "model", "\n", "", "except", ":", "\n", "               ", "pass", "\n", "\n", "# obtain conv #output filters from learned json structure", "\n", "", "with", "open", "(", "cf", ".", "saving_path", "+", "'/learned_dil_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "'{}'", ".", "format", "(", "cf", ".", "warmup", ")", "+", "'.json'", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "dil_list", "=", "[", "val", "for", "_", ",", "val", "in", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "items", "(", ")", "]", "\n", "\n", "", "model", "=", "build_TEMPONet", ".", "TEMPONet_learned", "(", "1", ",", "cf", ".", "input_shape", ",", "\n", "dil_ht", "=", "False", ",", "\n", "dil_list", "=", "dil_list", ",", "ofmap", "=", "ofmap", ")", "\n", "\n", "# save model and weights", "\n", "val_mae", "=", "'val_mean_absolute_error'", "\n", "mae", "=", "'mean_absolute_error'", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "cf", ".", "saving_path", "+", "'test_reg'", "+", "str", "(", "k", ")", "+", "'.h5'", ",", "monitor", "=", "val_mae", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "False", ",", "mode", "=", "'min'", ",", "period", "=", "1", ")", "\n", "#configure  model", "\n", "adam", "=", "Adam", "(", "lr", "=", "cf", ".", "lr", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'logcosh'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "mae", "]", ")", "\n", "\n", "\n", "X_train", ",", "y_train", "=", "shuffle", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "X_train", ".", "shape", ")", "\n", "print", "(", "X_validate", ".", "shape", ")", "\n", "print", "(", "X_test", ".", "shape", ")", "\n", "\n", "# Training", "\n", "hist", "=", "model", ".", "fit", "(", "x", "=", "np", ".", "transpose", "(", "X_train", ".", "reshape", "(", "X_train", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_train", ",", "epochs", "=", "cf", ".", "epochs", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "validation_data", "=", "(", "np", ".", "transpose", "(", "X_validate", ".", "reshape", "(", "X_validate", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y_validate", ")", ",", "verbose", "=", "1", ",", "callbacks", "=", "[", "checkpoint", ",", "early_stop", "]", ")", "\n", "\n", "#evaluate", "\n", "predictions", "[", "k", "]", "=", "model", ".", "predict", "(", "np", ".", "transpose", "(", "X_test", ".", "reshape", "(", "X_test", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ")", "\n", "MAE", "[", "k", "]", "=", "np", ".", "linalg", ".", "norm", "(", "y_test", "-", "predictions", "[", "k", "]", ",", "ord", "=", "1", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "MAE", ")", "\n", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label'", "]", "=", "y_test", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred'", "]", "=", "predictions", "[", "k", "]", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_activity'", "]", "=", "activity_test", "\n", "\n", "# save predictions and real values", "\n", "", "", "with", "open", "(", "cf", ".", "saving_path", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{}'", ".", "format", "(", "cf", ".", "warmup", ")", "+", "\n", "'_data.pickle'", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "model", ",", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.retrain_ch": [[144, 234], ["dict", "dict", "dict", "sklearn.model_selection.GroupKFold", "sklearn.model_selection.GroupKFold.get_n_splits", "RandomGroupkfold.RandomGroupKFold_split", "sklearn.model_selection.LeaveOneGroupOut", "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", "sklearn.model_selection.LeaveOneGroupOut.split", "open", "pickle.dump", "models.build_TEMPONet.TEMPONet_learned", "tensorflow.keras.optimizers.Adam", "build_TEMPONet.TEMPONet_learned.compile", "sklearn.utils.shuffle", "print", "print", "print", "build_TEMPONet.TEMPONet_learned.fit", "build_TEMPONet.TEMPONet_learned.predict", "print", "open", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "X_test.reshape", "json.loads().items", "X_train.reshape", "numpy.transpose", "X_validate.reshape", "str", "str", "str", "json.loads", "f.read"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.RandomGroupkfold.RandomGroupKFold_split", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_learned"], ["", "def", "retrain_ch", "(", "groups", ",", "X", ",", "y", ",", "activity", ",", "early_stop", ",", "cf", ",", "ofmap", ")", ":", "\n", "\n", "    ", "predictions", "=", "dict", "(", ")", "\n", "MAE", "=", "dict", "(", ")", "\n", "dataset", "=", "dict", "(", ")", "\n", "\n", "# organize data", "\n", "group_kfold", "=", "GroupKFold", "(", "n_splits", "=", "4", ")", "\n", "group_kfold", ".", "get_n_splits", "(", "X", ",", "y", ",", "groups", ")", "\n", "\n", "# retrain and cross-validate", "\n", "#result = rgkf.RandomGroupKFold_split(groups,4,cf.a)", "\n", "result", "=", "RandomGroupKFold_split", "(", "groups", ",", "4", ",", "cf", ".", "a", ")", "\n", "for", "train_index", ",", "test_val_index", "in", "result", ":", "\n", "        ", "X_train", ",", "X_val_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_val_index", "]", "\n", "y_train", ",", "y_val_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_val_index", "]", "\n", "activity_train", ",", "activity_val_test", "=", "activity", "[", "train_index", "]", ",", "activity", "[", "test_val_index", "]", "\n", "\n", "logo", "=", "LeaveOneGroupOut", "(", ")", "\n", "logo", ".", "get_n_splits", "(", "groups", "=", "groups", "[", "test_val_index", "]", ")", "# 'groups' is always required", "\n", "for", "validate_index", ",", "test_index", "in", "logo", ".", "split", "(", "X_val_test", ",", "y_val_test", ",", "groups", "[", "test_val_index", "]", ")", ":", "\n", "            ", "X_validate", ",", "X_test", "=", "X_val_test", "[", "validate_index", "]", ",", "X_val_test", "[", "test_index", "]", "\n", "y_validate", ",", "y_test", "=", "y_val_test", "[", "validate_index", "]", ",", "y_val_test", "[", "test_index", "]", "\n", "activity_validate", ",", "activity_test", "=", "activity_val_test", "[", "validate_index", "]", ",", "activity_val_test", "[", "test_index", "]", "\n", "groups_val", "=", "groups", "[", "test_val_index", "]", "\n", "k", "=", "groups_val", "[", "test_index", "]", "[", "0", "]", "\n", "\n", "# init", "\n", "try", ":", "\n", "               ", "del", "model", "\n", "", "except", ":", "\n", "               ", "pass", "\n", "\n", "# obtain conv #output filters from learned json structure", "\n", "", "with", "open", "(", "cf", ".", "saving_path", "+", "\n", "'learned_structure/learned_channels_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "threshold", ")", "+", "'.json'", ",", "\n", "'r'", ")", "as", "f", ":", "\n", "                ", "conv_list", "=", "[", "val", "for", "_", ",", "val", "in", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", ".", "items", "(", ")", "]", "\n", "#conv_list=conv_list[3:]+conv_list[:3]", "\n", "\n", "", "model", "=", "build_TEMPONet", ".", "TEMPONet_learned", "(", "1", ",", "\n", "cf", ".", "input_shape", ",", "\n", "dil_ht", "=", "False", ",", "\n", "dil_list", "=", "[", "]", ",", "\n", "ofmap", "=", "conv_list", ")", "\n", "\n", "# save model and weights", "\n", "val_mae", "=", "'val_mean_absolute_error'", "\n", "mae", "=", "'mean_absolute_error'", "\n", "#configure  model", "\n", "adam", "=", "Adam", "(", "lr", "=", "cf", ".", "lr", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'logcosh'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "mae", "]", ")", "\n", "\n", "\n", "X_train", ",", "y_train", "=", "shuffle", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "X_train", ".", "shape", ")", "\n", "print", "(", "X_validate", ".", "shape", ")", "\n", "print", "(", "X_test", ".", "shape", ")", "\n", "\n", "# Training", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "np", ".", "transpose", "(", "X_train", ".", "reshape", "(", "X_train", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "\n", "y", "=", "y_train", ",", "epochs", "=", "cf", ".", "epochs", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "validation_data", "=", "(", "np", ".", "transpose", "(", "X_validate", ".", "reshape", "(", "X_validate", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y_validate", ")", ",", "verbose", "=", "1", ",", "callbacks", "=", "[", "early_stop", "]", ")", "\n", "\n", "#evaluate", "\n", "predictions", "[", "k", "]", "=", "model", ".", "predict", "(", "np", ".", "transpose", "(", "X_test", ".", "reshape", "(", "X_test", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ")", "\n", "MAE", "[", "k", "]", "=", "np", ".", "linalg", ".", "norm", "(", "y_test", "-", "predictions", "[", "k", "]", ",", "ord", "=", "1", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "MAE", ")", "\n", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label'", "]", "=", "y_test", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred'", "]", "=", "predictions", "[", "k", "]", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_activity'", "]", "=", "activity_test", "\n", "\n", "# save predictions and real values", "\n", "", "", "with", "open", "(", "\n", "cf", ".", "saving_path", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "threshold", ")", "+", "\n", "'_data.pickle'", ",", "\n", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "model", ",", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.retrain": [[235, 404], ["dict", "dict", "dict", "dict", "sklearn.model_selection.GroupKFold", "sklearn.model_selection.GroupKFold.get_n_splits", "RandomGroupkfold.RandomGroupKFold_split", "sklearn.model_selection.LeaveOneGroupOut", "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", "sklearn.model_selection.LeaveOneGroupOut.split", "open", "pickle.dump", "models.build_TEMPONet.TEMPONet_learned", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.optimizers.Adam", "build_TEMPONet.TEMPONet_learned.compile", "sklearn.utils.shuffle", "print", "print", "print", "build_TEMPONet.TEMPONet_learned.fit", "build_TEMPONet.TEMPONet_learned.predict", "print", "open", "pickle.dump", "open", "pickle.dump", "numpy.transpose", "numpy.linalg.norm", "numpy.unique", "numpy.unique", "numpy.unique", "dict", "dict", "build_TEMPONet.TEMPONet_learned.predict", "print", "numpy.transpose", "X_test.reshape", "build_TEMPONet.TEMPONet_learned.predict", "dict", "build_TEMPONet.TEMPONet_learned.predict", "dict", "numpy.transpose", "numpy.linalg.norm", "str", "X_train.reshape", "numpy.transpose", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "numpy.linalg.norm", "X_test.reshape", "ValueError", "X_validate.reshape", "str", "train_data_X.reshape", "val_data_X.reshape", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.RandomGroupkfold.RandomGroupKFold_split", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_learned"], ["", "def", "retrain", "(", "groups", ",", "X", ",", "y", ",", "activity", ",", "checkpoint", ",", "early_stop", ",", "cf", ",", "ofmap", ",", "dil", ",", "input_setup", "=", "'normal'", ",", "test_all_subj", "=", "False", ")", ":", "\n", "\n", "    ", "predictions", "=", "dict", "(", ")", "\n", "MAE", "=", "dict", "(", ")", "\n", "\n", "dataset", "=", "dict", "(", ")", "\n", "\n", "all_subjects_perf", "=", "dict", "(", ")", "\n", "\n", "# organize data", "\n", "group_kfold", "=", "GroupKFold", "(", "n_splits", "=", "4", ")", "\n", "group_kfold", ".", "get_n_splits", "(", "X", ",", "y", ",", "groups", ")", "\n", "\n", "# retrain and cross-validate", "\n", "#result = rgkf.RandomGroupKFold_split(groups,4,cf.a)", "\n", "result", "=", "RandomGroupKFold_split", "(", "groups", ",", "4", ",", "cf", ".", "a", ")", "\n", "for", "train_index", ",", "test_val_index", "in", "result", ":", "\n", "        ", "X_train", ",", "X_val_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_val_index", "]", "\n", "y_train", ",", "y_val_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_val_index", "]", "\n", "activity_train", ",", "activity_val_test", "=", "activity", "[", "train_index", "]", ",", "activity", "[", "test_val_index", "]", "\n", "\n", "logo", "=", "LeaveOneGroupOut", "(", ")", "\n", "logo", ".", "get_n_splits", "(", "groups", "=", "groups", "[", "test_val_index", "]", ")", "# 'groups' is always required", "\n", "for", "validate_index", ",", "test_index", "in", "logo", ".", "split", "(", "X_val_test", ",", "y_val_test", ",", "groups", "[", "test_val_index", "]", ")", ":", "\n", "            ", "X_validate", ",", "X_test", "=", "X_val_test", "[", "validate_index", "]", ",", "X_val_test", "[", "test_index", "]", "\n", "y_validate", ",", "y_test", "=", "y_val_test", "[", "validate_index", "]", ",", "y_val_test", "[", "test_index", "]", "\n", "activity_validate", ",", "activity_test", "=", "activity_val_test", "[", "validate_index", "]", ",", "activity_val_test", "[", "test_index", "]", "\n", "groups_val", "=", "groups", "[", "test_val_index", "]", "\n", "k", "=", "groups_val", "[", "test_index", "]", "[", "0", "]", "\n", "\n", "\n", "# init", "\n", "try", ":", "\n", "               ", "del", "model", "\n", "", "except", ":", "\n", "               ", "pass", "\n", "\n", "", "dil_list", "=", "dil", "\n", "\n", "# [PPG_1, PPG_2, ACC_x, ACC_y, ACC_z]", "\n", "if", "input_setup", "==", "'normal'", ":", "\n", "                ", "n_ch", "=", "4", "\n", "#X_train = X_train[:, [0, 2, 3, 4], :]", "\n", "#X_validate = X_validate[:, [0, 2, 3, 4], :]", "\n", "#X_test = X_test[:, [0, 2, 3, 4], :]", "\n", "", "elif", "input_setup", "==", "'ppg_only_1'", ":", "\n", "                ", "n_ch", "=", "1", "\n", "X_train", "=", "X_train", "[", ":", ",", "[", "0", "]", ",", ":", "]", "\n", "X_validate", "=", "X_validate", "[", ":", ",", "[", "0", "]", ",", ":", "]", "\n", "X_test", "=", "X_test", "[", ":", ",", "[", "0", "]", ",", ":", "]", "\n", "", "elif", "input_setup", "==", "'ppg_only_2'", ":", "\n", "                ", "n_ch", "=", "2", "\n", "X_train", "=", "X_train", "[", ":", ",", "[", "0", ",", "1", "]", ",", ":", "]", "\n", "X_validate", "=", "X_validate", "[", ":", ",", "[", "0", ",", "1", "]", ",", ":", "]", "\n", "X_test", "=", "X_test", "[", ":", ",", "[", "0", ",", "1", "]", ",", ":", "]", "\n", "", "elif", "input_setup", "==", "'all'", ":", "\n", "                ", "n_ch", "=", "5", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "\n", "", "model", "=", "build_TEMPONet", ".", "TEMPONet_learned", "(", "1", ",", "cf", ".", "input_shape", ",", "\n", "dil_ht", "=", "False", ",", "\n", "dil_list", "=", "dil_list", ",", "ofmap", "=", "ofmap", ",", "\n", "n_ch", "=", "n_ch", ")", "\n", "\n", "# save model and weights", "\n", "val_mae", "=", "'val_mean_absolute_error'", "\n", "mae", "=", "'mean_absolute_error'", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "cf", ".", "saving_path", "+", "'test_reg'", "+", "str", "(", "k", ")", "+", "'.h5'", ",", "monitor", "=", "val_mae", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "False", ",", "mode", "=", "'min'", ",", "period", "=", "1", ")", "\n", "#configure  model", "\n", "adam", "=", "Adam", "(", "lr", "=", "cf", ".", "lr", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'logcosh'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "mae", "]", ")", "\n", "\n", "\n", "X_train", ",", "y_train", "=", "shuffle", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "X_train", ".", "shape", ")", "\n", "print", "(", "X_validate", ".", "shape", ")", "\n", "print", "(", "X_test", ".", "shape", ")", "\n", "\n", "#import pdb; pdb.set_trace()", "\n", "\n", "# Training", "\n", "hist", "=", "model", ".", "fit", "(", "\n", "x", "=", "np", ".", "transpose", "(", "X_train", ".", "reshape", "(", "X_train", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "\n", "y", "=", "y_train", ",", "epochs", "=", "cf", ".", "epochs", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "\n", "validation_data", "=", "(", "np", ".", "transpose", "(", "X_validate", ".", "reshape", "(", "X_validate", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y_validate", ")", ",", "\n", "verbose", "=", "1", ",", "callbacks", "=", "[", "checkpoint", ",", "early_stop", "]", ")", "\n", "\n", "with", "open", "(", "'retrain_hist.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "hist", ".", "history", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "#evaluate", "\n", "", "predictions", "[", "k", "]", "=", "model", ".", "predict", "(", "\n", "np", ".", "transpose", "(", "X_test", ".", "reshape", "(", "X_test", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", ")", "\n", "MAE", "[", "k", "]", "=", "np", ".", "linalg", ".", "norm", "(", "y_test", "-", "predictions", "[", "k", "]", ",", "ord", "=", "1", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "MAE", ")", "\n", "\n", "if", "test_all_subj", ":", "\n", "                ", "train_subj", "=", "np", ".", "unique", "(", "groups", "[", "train_index", "]", ")", "\n", "val_subj", "=", "np", ".", "unique", "(", "groups", "[", "test_val_index", "]", "[", "validate_index", "]", ")", "\n", "test_subj", "=", "np", ".", "unique", "(", "groups", "[", "test_val_index", "]", "[", "test_index", "]", ")", "\n", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "train_subj", ":", "\n", "                    ", "train_data_X", "=", "X_train", "[", "groups", "[", "train_index", "]", "==", "i", "]", "\n", "train_data_y", "=", "y_train", "[", "groups", "[", "train_index", "]", "==", "i", "]", "\n", "predictions_curr", "=", "model", ".", "predict", "(", "\n", "np", ".", "transpose", "(", "\n", "train_data_X", ".", "reshape", "(", "train_data_X", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "\n", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", ")", "\n", ")", "\n", "MAE_curr", "=", "np", ".", "linalg", ".", "norm", "(", "train_data_y", "-", "predictions_curr", ",", "ord", "=", "1", ")", "/", "train_data_y", ".", "shape", "[", "0", "]", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Train_subj_'", "+", "str", "(", "i", ")", "]", "=", "dict", "(", ")", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Train_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_label'", "]", "=", "train_data_y", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Train_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_pred'", "]", "=", "predictions_curr", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Train_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_MAE'", "]", "=", "MAE_curr", "\n", "\n", "", "for", "i", "in", "val_subj", ":", "\n", "                    ", "val_data_X", "=", "X_validate", "[", "groups", "[", "test_val_index", "]", "[", "validate_index", "]", "==", "i", "]", "\n", "val_data_y", "=", "y_validate", "[", "groups", "[", "test_val_index", "]", "[", "validate_index", "]", "==", "i", "]", "\n", "predictions_curr", "=", "model", ".", "predict", "(", "\n", "np", ".", "transpose", "(", "\n", "val_data_X", ".", "reshape", "(", "val_data_X", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "\n", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", ")", "\n", ")", "\n", "MAE_curr", "=", "np", ".", "linalg", ".", "norm", "(", "val_data_y", "-", "predictions_curr", ",", "ord", "=", "1", ")", "/", "val_data_y", ".", "shape", "[", "0", "]", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Val_subj_'", "+", "str", "(", "i", ")", "]", "=", "dict", "(", ")", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Val_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_label'", "]", "=", "val_data_y", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Val_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_pred'", "]", "=", "predictions_curr", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Val_subj_'", "+", "str", "(", "i", ")", "]", "[", "'P'", "+", "str", "(", "i", ")", "+", "'_MAE'", "]", "=", "MAE_curr", "\n", "\n", "", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Test_subj_'", "+", "str", "(", "test_subj", ")", "]", "=", "dict", "(", ")", "\n", "predictions_curr", "=", "model", ".", "predict", "(", "\n", "np", ".", "transpose", "(", "\n", "X_test", ".", "reshape", "(", "X_test", ".", "shape", "[", "0", "]", ",", "n_ch", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "\n", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", ")", "\n", ")", "\n", "MAE_curr", "=", "np", ".", "linalg", ".", "norm", "(", "y_test", "-", "predictions_curr", ",", "ord", "=", "1", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Test_subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label'", "]", "=", "y_test", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Test_subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred'", "]", "=", "predictions_curr", "\n", "all_subjects_perf", "[", "'Subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'Test_subj_'", "+", "str", "(", "test_subj", ")", "]", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_MAE'", "]", "=", "MAE_curr", "\n", "\n", "print", "(", "all_subjects_perf", ")", "\n", "\n", "", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label'", "]", "=", "y_test", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred'", "]", "=", "predictions", "[", "k", "]", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_activity'", "]", "=", "activity_test", "\n", "\n", "", "", "if", "test_all_subj", ":", "\n", "        ", "with", "open", "(", "'all_subj_data.pickle'", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pickle", ".", "dump", "(", "all_subjects_perf", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# save predictions and real values", "\n", "", "", "with", "open", "(", "cf", ".", "saving_path", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "threshold", ")", "+", "\n", "'{}'", ".", "format", "(", "cf", ".", "warmup", ")", "+", "\n", "'_data.pickle'", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "model", ",", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.train_TEMPONet.fine_tune": [[405, 529], ["dict", "dict", "dict", "dict", "dict", "sklearn.model_selection.GroupKFold", "sklearn.model_selection.GroupKFold.get_n_splits", "RandomGroupkfold.RandomGroupKFold_split", "sklearn.model_selection.LeaveOneGroupOut", "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", "sklearn.model_selection.LeaveOneGroupOut.split", "open", "pickle.dump", "models.build_TEMPONet.TEMPONet_learned", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.optimizers.Adam", "tensorflow.keras.models.load_model.compile", "sklearn.utils.shuffle", "print", "print", "print", "tensorflow.keras.models.load_model.fit", "tensorflow.keras.models.load_model.predict", "print", "tensorflow.keras.models.load_model", "tensorflow.keras.optimizers.Adam", "range", "tensorflow.keras.models.load_model.compile", "tensorflow.keras.models.load_model.summary", "tensorflow.keras.models.load_model.fit", "tensorflow.keras.models.load_model.predict", "print", "numpy.transpose", "numpy.linalg.norm", "len", "numpy.transpose", "numpy.linalg.norm", "numpy.transpose", "X_test.reshape", "numpy.transpose", "X_fine_test.reshape", "str", "X_train.reshape", "numpy.transpose", "str", "X_fine_train.reshape", "X_validate.reshape", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.architecture_search.RandomGroupkfold.RandomGroupKFold_split", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.models.build_TEMPONet.TEMPONet_learned"], ["", "def", "fine_tune", "(", "groups", ",", "X", ",", "y", ",", "activity", ",", "checkpoint", ",", "early_stop", ",", "cf", ",", "ofmap", ",", "dil", ")", ":", "\n", "\n", "    ", "predictions", "=", "dict", "(", ")", "\n", "MAE", "=", "dict", "(", ")", "\n", "predictions_fine", "=", "dict", "(", ")", "\n", "MAE_fine", "=", "dict", "(", ")", "\n", "\n", "dataset", "=", "dict", "(", ")", "\n", "\n", "# organize data", "\n", "group_kfold", "=", "GroupKFold", "(", "n_splits", "=", "4", ")", "\n", "group_kfold", ".", "get_n_splits", "(", "X", ",", "y", ",", "groups", ")", "\n", "\n", "# retrain and cross-validate", "\n", "#result = rgkf.RandomGroupKFold_split(groups,4,cf.a)", "\n", "result", "=", "RandomGroupKFold_split", "(", "groups", ",", "4", ",", "cf", ".", "a", ")", "\n", "for", "train_index", ",", "test_val_index", "in", "result", ":", "\n", "        ", "X_train", ",", "X_val_test", "=", "X", "[", "train_index", "]", ",", "X", "[", "test_val_index", "]", "\n", "y_train", ",", "y_val_test", "=", "y", "[", "train_index", "]", ",", "y", "[", "test_val_index", "]", "\n", "activity_train", ",", "activity_val_test", "=", "activity", "[", "train_index", "]", ",", "activity", "[", "test_val_index", "]", "\n", "\n", "logo", "=", "LeaveOneGroupOut", "(", ")", "\n", "logo", ".", "get_n_splits", "(", "groups", "=", "groups", "[", "test_val_index", "]", ")", "# 'groups' is always required", "\n", "for", "validate_index", ",", "test_index", "in", "logo", ".", "split", "(", "X_val_test", ",", "y_val_test", ",", "groups", "[", "test_val_index", "]", ")", ":", "\n", "            ", "X_validate", ",", "X_test", "=", "X_val_test", "[", "validate_index", "]", ",", "X_val_test", "[", "test_index", "]", "\n", "y_validate", ",", "y_test", "=", "y_val_test", "[", "validate_index", "]", ",", "y_val_test", "[", "test_index", "]", "\n", "activity_validate", ",", "activity_test", "=", "activity_val_test", "[", "validate_index", "]", ",", "activity_val_test", "[", "test_index", "]", "\n", "groups_val", "=", "groups", "[", "test_val_index", "]", "\n", "k", "=", "groups_val", "[", "test_index", "]", "[", "0", "]", "\n", "\n", "# init", "\n", "try", ":", "\n", "               ", "del", "model", "\n", "", "except", ":", "\n", "               ", "pass", "\n", "\n", "", "dil_list", "=", "dil", "\n", "model", "=", "build_TEMPONet", ".", "TEMPONet_learned", "(", "1", ",", "cf", ".", "input_shape", ",", "\n", "dil_ht", "=", "False", ",", "\n", "dil_list", "=", "dil_list", ",", "ofmap", "=", "ofmap", ")", "\n", "\n", "# save model and weights", "\n", "val_mae", "=", "'val_mean_absolute_error'", "\n", "mae", "=", "'mean_absolute_error'", "\n", "checkpoint", "=", "ModelCheckpoint", "(", "cf", ".", "saving_path", "+", "'model'", "+", "str", "(", "k", ")", "+", "'.h5'", ",", "monitor", "=", "val_mae", ",", "verbose", "=", "1", ",", "save_best_only", "=", "True", ",", "save_weights_only", "=", "False", ",", "mode", "=", "'min'", ",", "period", "=", "1", ")", "\n", "#configure  model", "\n", "adam", "=", "Adam", "(", "lr", "=", "cf", ".", "lr", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'logcosh'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "mae", "]", ")", "\n", "\n", "\n", "X_train", ",", "y_train", "=", "shuffle", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "X_train", ".", "shape", ")", "\n", "print", "(", "X_validate", ".", "shape", ")", "\n", "print", "(", "X_test", ".", "shape", ")", "\n", "\n", "# Training", "\n", "hist", "=", "model", ".", "fit", "(", "x", "=", "np", ".", "transpose", "(", "X_train", ".", "reshape", "(", "X_train", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_train", ",", "epochs", "=", "cf", ".", "epochs", ",", "batch_size", "=", "cf", ".", "batch_size", ",", "validation_data", "=", "(", "np", ".", "transpose", "(", "X_validate", ".", "reshape", "(", "X_validate", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y_validate", ")", ",", "verbose", "=", "1", ",", "callbacks", "=", "[", "checkpoint", ",", "early_stop", "]", ")", "\n", "\n", "#evaluate", "\n", "predictions", "[", "k", "]", "=", "model", ".", "predict", "(", "np", ".", "transpose", "(", "X_test", ".", "reshape", "(", "X_test", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ")", "\n", "MAE", "[", "k", "]", "=", "np", ".", "linalg", ".", "norm", "(", "y_test", "-", "predictions", "[", "k", "]", ",", "ord", "=", "1", ")", "/", "y_test", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "'MAE Pre Fine Tuning: {}'", ".", "format", "(", "MAE", ")", ")", "\n", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label'", "]", "=", "y_test", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred'", "]", "=", "predictions", "[", "k", "]", "\n", "\n", "### fine tuning ###", "\n", "frac", "=", "X_test", ".", "shape", "[", "0", "]", "*", "25", "//", "100", "\n", "\n", "X_fine_train", "=", "X_test", "[", ":", "frac", "]", "\n", "y_fine_train", "=", "y_test", "[", ":", "frac", "]", "\n", "activity_fine_train", "=", "activity_test", "[", "frac", ":", "]", "\n", "\n", "X_fine_test", "=", "X_test", "[", "frac", ":", "]", "\n", "y_fine_test", "=", "y_test", "[", "frac", ":", "]", "\n", "activity_fine_test", "=", "activity_test", "[", "frac", ":", "]", "\n", "\n", "try", ":", "\n", "                ", "del", "model", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "", "model", "=", "load_model", "(", "cf", ".", "saving_path", "+", "'model'", "+", "str", "(", "k", ")", "+", "'.h5'", ")", "\n", "adam", "=", "Adam", "(", "lr", "=", "cf", ".", "lr", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "\n", "j", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "#if re.search('batch_normalization.+', layer.get_config()['name']):", "\n", "#layer.trainable = False", "\n", "                ", "if", "j", "<", "11", ":", "\n", "#print(model.layers[i].trainable)", "\n", "                    ", "model", ".", "layers", "[", "i", "]", ".", "trainable", "=", "False", "\n", "#print(model.layers[i].trainable)", "\n", "\n", "", "j", "+=", "1", "\n", "\n", "", "model", ".", "compile", "(", "loss", "=", "'logcosh'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'mean_absolute_error'", "]", ")", "\n", "\n", "model", ".", "summary", "(", ")", "\n", "\n", "hist", "=", "model", ".", "fit", "(", "x", "=", "np", ".", "transpose", "(", "X_fine_train", ".", "reshape", "(", "X_fine_train", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ",", "y", "=", "y_fine_train", ",", "epochs", "=", "100", ",", "batch_size", "=", "256", ",", "verbose", "=", "1", ")", "\n", "\n", "#evaluate", "\n", "predictions_fine", "[", "k", "]", "=", "model", ".", "predict", "(", "np", ".", "transpose", "(", "X_fine_test", ".", "reshape", "(", "X_fine_test", ".", "shape", "[", "0", "]", ",", "4", ",", "cf", ".", "input_shape", ",", "1", ")", ",", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", ")", "\n", "MAE_fine", "[", "k", "]", "=", "np", ".", "linalg", ".", "norm", "(", "y_fine_test", "-", "predictions_fine", "[", "k", "]", ",", "ord", "=", "1", ")", "/", "y_fine_test", ".", "shape", "[", "0", "]", "\n", "print", "(", "'MAE post fine tuning: {}'", ".", "format", "(", "MAE_fine", ")", ")", "\n", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_label_fine'", "]", "=", "y_fine_test", "\n", "dataset", "[", "'P'", "+", "str", "(", "k", ")", "+", "'_pred_fine'", "]", "=", "predictions_fine", "[", "k", "]", "\n", "\n", "# save predictions and real values", "\n", "", "", "with", "open", "(", "cf", ".", "saving_path", "+", "\n", "'{:.1e}'", ".", "format", "(", "cf", ".", "reg_strength", ")", "+", "\n", "'_'", "+", "\n", "'{}'", ".", "format", "(", "cf", ".", "warmup", ")", "+", "\n", "'_data_finetune.pickle'", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "dataset", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "model", ",", "MAE", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.__init__": [[33, 50], ["base.BaseTrainer.__init__", "int", "utils.MetricTracker", "utils.MetricTracker", "utils.MetricTracker", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "model_float", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "optimizer_float", ",", "arch_optimizer", ",", "complexity_decay", ",", "config", ",", "device", ",", "data_loader", ",", "data_dir", ",", "batch_size", ",", "finetuning", ",", "args_input", ",", "do_validation", "=", "True", ",", "lr_scheduler", "=", "None", ",", "len_epoch", "=", "None", ")", ":", "\n", "        ", "super", "(", "TEMPONetDaliaTrainer", ",", "self", ")", ".", "__init__", "(", "model", ",", "model_float", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "optimizer_float", ",", "arch_optimizer", ",", "finetuning", ",", "config", ",", "args_input", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "len_epoch", "=", "len_epoch", "\n", "self", ".", "do_validation", "=", "do_validation", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "cd", "=", "complexity_decay", "\n", "self", ".", "finetuning", "=", "finetuning", "\n", "self", ".", "log_step", "=", "int", "(", "np", ".", "sqrt", "(", "batch_size", ")", ")", "\n", "self", ".", "args_input", "=", "args_input", "\n", "self", ".", "train_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "valid_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "test_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.cross_val": [[51, 100], ["dict", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "range", "open", "pickle.dump", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer.state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float.state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer_float.state_dict", "print", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.load_state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float.load_state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer.load_state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer_float.load_state_dict", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.data_loader", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.data_loader", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.data_loader", "len", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_data_loader.dataset.get_test_subj", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test", "res[].cpu", "print", "print"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.get_test_subj", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test"], ["", "def", "cross_val", "(", "self", ",", "n_folds", ")", ":", "\n", "        ", "MAE", "=", "dict", "(", ")", "\n", "init_state_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "init_state_optimizer", "=", "copy", ".", "deepcopy", "(", "self", ".", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "init_state_model_float", "=", "copy", ".", "deepcopy", "(", "self", ".", "model_float", ".", "state_dict", "(", ")", ")", "\n", "init_state_optimizer_float", "=", "copy", ".", "deepcopy", "(", "self", ".", "optimizer_float", ".", "state_dict", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "n_folds", ")", ":", "\n", "            ", "print", "(", "'Iteration {}/{}'", ".", "format", "(", "i", "+", "1", ",", "n_folds", ")", ")", "\n", "# Reload initial model state", "\n", "self", ".", "model", ".", "load_state_dict", "(", "init_state_model", ")", "\n", "self", ".", "model_float", ".", "load_state_dict", "(", "init_state_model_float", ")", "\n", "\n", "# Reload initial optimizer state", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "init_state_optimizer", ")", "\n", "self", ".", "optimizer_float", ".", "load_state_dict", "(", "init_state_optimizer_float", ")", "\n", "\n", "# Build data loaders for the current fold", "\n", "self", ".", "train_data_loader", "=", "self", ".", "data_loader", "(", "\n", "data_dir", "=", "self", ".", "data_dir", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "kfold_it", "=", "i", ",", "\n", "set_", "=", "'train'", "\n", ")", "\n", "self", ".", "valid_data_loader", "=", "self", ".", "data_loader", "(", "\n", "data_dir", "=", "self", ".", "data_dir", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "kfold_it", "=", "i", ",", "\n", "set_", "=", "'validation'", "\n", ")", "\n", "self", ".", "test_data_loader", "=", "self", ".", "data_loader", "(", "\n", "data_dir", "=", "self", ".", "data_dir", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "kfold_it", "=", "i", ",", "\n", "set_", "=", "'test'", "\n", ")", "\n", "\n", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "train_data_loader", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n", "subj", "=", "self", ".", "test_data_loader", ".", "dataset", ".", "get_test_subj", "(", ")", "\n", "res", "=", "self", ".", "test", "(", ")", "\n", "MAE", "[", "subj", "]", "=", "res", "[", "'MAE'", "]", ".", "cpu", "(", ")", "\n", "print", "(", "\"Subj {} : {}\"", ".", "format", "(", "subj", ",", "MAE", "[", "subj", "]", ")", ")", "\n", "print", "(", "\"MAE : {}\"", ".", "format", "(", "MAE", ")", ")", "\n", "", "file_to_write", "=", "open", "(", "\"net_results/net_results_{}_net_{}_quantization_{}.pickle\"", ".", "format", "(", "self", ".", "args_input", ".", "sheet", ",", "self", ".", "args_input", ".", "net_number", ",", "self", ".", "args_input", ".", "quantization", ")", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "data_to_save", ",", "file_to_write", ")", "\n", "return", "MAE", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test": [[101, 120], ["TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.eval", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_metrics.reset", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_data_loader.dataset.get_test_subj", "numpy.asarray().flatten", "numpy.asarray().flatten", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_metrics.result", "torch.no_grad", "enumerate", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model", "target_list.append", "output_list.append", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.criterion", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_metrics.update", "numpy.asarray", "numpy.asarray", "batch[].cuda", "batch[].cuda", "target.cpu().numpy", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.cpu().numpy", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.item", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.test_metrics.update", "metr", "str", "str", "target.cpu", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.cpu"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.reset", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.get_test_subj", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.result", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "test_metrics", ".", "reset", "(", ")", "\n", "subj", "=", "self", ".", "test_data_loader", ".", "dataset", ".", "get_test_subj", "(", ")", "\n", "target_list", "=", "[", "]", "\n", "output_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "test_data_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "batch", "[", "'data'", "]", ".", "cuda", "(", "self", ".", "device", ")", ",", "batch", "[", "'target'", "]", ".", "cuda", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "target_list", ".", "append", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "output_list", ".", "append", "(", "output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "self", ".", "test_metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "metr", "in", "self", ".", "metric_ftns", ":", "\n", "                    ", "self", ".", "test_metrics", ".", "update", "(", "metr", ".", "__name__", ",", "metr", "(", "output", ",", "target", ")", ")", "\n", "", "", "", "data_to_save", "[", "'P'", "+", "str", "(", "subj", ")", "+", "'_label'", "]", "=", "np", ".", "asarray", "(", "target_list", ")", ".", "flatten", "(", ")", "\n", "data_to_save", "[", "'P'", "+", "str", "(", "subj", ")", "+", "'_pred'", "]", "=", "np", ".", "asarray", "(", "output_list", ")", ".", "flatten", "(", ")", "\n", "return", "self", ".", "test_metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_on_whole_dataset": [[121, 135], ["[].get", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.data_loader", "len", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_data_loader.split_validation"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.split_validation"], ["", "def", "train_on_whole_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "data_loader_args", "=", "self", ".", "config", "[", "'data_loader'", "]", "[", "'args'", "]", "\n", "self", ".", "validation_split", "=", "self", ".", "config", "[", "'data_loader'", "]", "[", "'args'", "]", ".", "get", "(", "'validation_split'", ",", "None", ")", "\n", "self", ".", "train_data_loader", "=", "self", ".", "data_loader", "(", "\n", "data_dir", "=", "self", ".", "data_loader_args", "[", "'data_dir'", "]", ",", "\n", "batch_size", "=", "self", ".", "data_loader_args", "[", "'batch_size'", "]", ",", "\n", "validation_split", "=", "self", ".", "validation_split", ",", "\n", "num_workers", "=", "self", ".", "data_loader_args", "[", "'num_workers'", "]", "\n", ")", "\n", "if", "self", ".", "validation_split", "is", "not", "None", ":", "\n", "            ", "self", ".", "valid_data_loader", "=", "self", ".", "train_data_loader", ".", "split_validation", "(", ")", "\n", "\n", "", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "train_data_loader", ")", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._train_epoch": [[136, 199], ["TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_metrics.reset", "enumerate", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_metrics.result", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float.train", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.train", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.criterion", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.backward", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.writer.set_step", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_metrics.update", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._valid_epoch", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.update", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.lr_scheduler.step", "batch[].cuda", "batch[].cuda", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.arch_optimizer.zero_grad", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer_float.zero_grad", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer.zero_grad", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model", "hasattr", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.arch_optimizer.step", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer_float.step", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.optimizer.step", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.item", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.train_metrics.update", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.logger.debug", "metr", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.module.complexity_loss", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.complexity_loss", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._progress", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.item", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.items"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.reset", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.result", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._valid_epoch", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._progress"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ",", "prec_float", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return : A log that contains average loss and metric in this epoch\n        \"\"\"", "\n", "if", "prec_float", "==", "'True'", ":", "\n", "            ", "self", ".", "model_float", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "train_data_loader", ")", ":", "\n", "            ", "data", ",", "target", "=", "batch", "[", "'data'", "]", ".", "cuda", "(", "self", ".", "device", ")", ",", "batch", "[", "'target'", "]", ".", "cuda", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "                ", "self", ".", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "prec_float", "==", "'True'", ":", "\n", "                ", "self", ".", "optimizer_float", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "prec_float", "==", "'True'", ":", "\n", "                ", "output", "=", "self", ".", "model_float", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "                ", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "                    ", "loss_complexity", "=", "self", ".", "cd", "*", "self", ".", "model", ".", "module", ".", "complexity_loss", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss_complexity", "=", "self", ".", "cd", "*", "self", ".", "model", ".", "complexity_loss", "(", ")", "\n", "", "loss", "+=", "loss_complexity", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "                ", "self", ".", "arch_optimizer", ".", "step", "(", ")", "\n", "", "if", "prec_float", "==", "'True'", ":", "\n", "                ", "self", ".", "optimizer_float", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "self", ".", "len_epoch", "+", "batch_idx", ")", "\n", "self", ".", "train_metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "metr", "in", "self", ".", "metric_ftns", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "metr", ".", "__name__", ",", "metr", "(", "output", ",", "target", ")", ")", "\n", "\n", "", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "'Train Epoch: {} {} Loss: {:.6f}'", ".", "format", "(", "epoch", ",", "self", ".", "_progress", "(", "batch_idx", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "#self.writer.add_image('input', make_grid(data.cpu(), nrow=8, normalize=True))", "\n", "\n", "\n", "", "if", "batch_idx", "==", "self", ".", "len_epoch", ":", "\n", "                ", "break", "\n", "", "", "log", "=", "self", ".", "train_metrics", ".", "result", "(", ")", "\n", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "self", ".", "_valid_epoch", "(", "epoch", ",", "prec_float", ")", "\n", "log", ".", "update", "(", "**", "{", "'val_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._valid_epoch": [[200, 232], ["TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.valid_metrics.reset", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.named_parameters", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.valid_metrics.result", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float.eval", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model.eval", "torch.no_grad", "enumerate", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.writer.add_histogram", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.criterion", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.writer.set_step", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.valid_metrics.update", "batch[].cuda", "batch[].cuda", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model_float", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.model", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.item", "TEMPONetDaliaTrainer.TEMPONetDaliaTrainer.valid_metrics.update", "metr", "len"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.reset", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.result", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update"], ["", "def", "_valid_epoch", "(", "self", ",", "epoch", ",", "prec_float", ")", ":", "\n", "        ", "\"\"\"\n        Validate after training an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return: A log that contains information about validation.\n        \"\"\"", "\n", "if", "prec_float", "==", "'True'", ":", "\n", "            ", "self", ".", "model_float", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "", "self", ".", "valid_metrics", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "batch", "[", "'data'", "]", ".", "cuda", "(", "self", ".", "device", ")", ",", "batch", "[", "'target'", "]", ".", "cuda", "(", "self", ".", "device", ")", "\n", "\n", "if", "prec_float", "==", "'True'", ":", "\n", "                    ", "output", "=", "self", ".", "model_float", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "valid_data_loader", ")", "+", "batch_idx", ",", "'valid'", ")", "\n", "self", ".", "valid_metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "metr", "in", "self", ".", "metric_ftns", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "metr", ".", "__name__", ",", "metr", "(", "output", ",", "target", ")", ")", "\n", "#self.writer.add_image('input', make_grid(data.cpu(), nrow=8, normalize=True))", "\n", "# Add histogram of model parameters to the tensorboard", "\n", "", "", "", "for", "name", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "name", ",", "p", ",", "bins", "=", "'auto'", ")", "\n", "", "return", "self", ".", "valid_metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.trainer.TEMPONetDaliaTrainer.TEMPONetDaliaTrainer._progress": [[233, 242], ["hasattr", "base.format"], "methods", ["None"], ["", "def", "_progress", "(", "self", ",", "batch_idx", ")", ":", "\n", "        ", "base", "=", "'[{}/{} ({:.0f}%)]'", "\n", "if", "hasattr", "(", "self", ".", "train_data_loader", ",", "'n_samples'", ")", ":", "\n", "            ", "current", "=", "batch_idx", "*", "self", ".", "train_data_loader", ".", "batch_size", "\n", "total", "=", "self", ".", "train_data_loader", ".", "n_samples", "\n", "", "else", ":", "\n", "            ", "current", "=", "batch_idx", "\n", "total", "=", "self", ".", "len_epoch", "\n", "", "return", "base", ".", "format", "(", "current", ",", "total", ",", "100.0", "*", "current", "/", "total", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.__init__": [[31, 67], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._update_config", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.write_json", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Class to parse configuration json file. \n        Handles hyper-parameters for training, inizialization of modules, checkpoint saving and logging module.\n        :param config: Dict containing configurations, hyper-parameters for training.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default.\n        \"\"\"", "\n", "# Load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "\n", "# Set save_dir where trained model and log will be saved", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "if", "run_id", "is", "None", ":", "# Use timestamp as default run_id", "\n", "            ", "run_id", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "run_id", "\n", "\n", "# Make directory for saving checkpoints and log.", "\n", "exist_ok", "=", "run_id", "==", "''", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "# Save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# Configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.from_args": [[69, 98], ["utils.read_json", "cls", "args.parse_args.parse_args.add_argument", "isinstance", "args.parse_args.parse_args.parse_args", "pathlib.Path", "pathlib.Path", "utils.read_json.update", "getattr", "utils.read_json", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.read_json", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.read_json", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "cfg_name", "=", "resume", ".", "parent", "/", "'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "resume", "=", "None", "\n", "cfg_name", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "", "config", "=", "read_json", "(", "cfg_name", ")", "\n", "if", "args", ".", "config", "and", "resume", ":", "\n", "# Update new config for fine-tuning", "\n", "            ", "config", ".", "update", "(", "read_json", "(", "args", ".", "config", ")", ")", "\n", "\n", "# Parse custom cli options into dictionary", "\n", "", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "return", "cls", "(", "config", ",", "resume", ",", "modification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.init_obj": [[99, 113], ["getattr"], "methods", ["None"], ["", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "#module_args = dict(self[name]['args'])", "\n", "#assert all([k not in module_args for k in kwargs]), 'Overwriting kwargs given in config file is not allowed'", "\n", "#module_args.update(kwargs)", "\n", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.init_ftn": [[114, 127], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and return the function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs).`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.__getitem__": [[128, 133], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Access items like ordinary dict.\n        \"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.get_logger": [[134, 140], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'Verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.config": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.save_dir": [[146, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.log_dir": [[150, 153], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._update_config": [[155, 163], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._get_opt_name": [[164, 169], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._set_by_path": [[170, 176], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"\n    Set a value in a nested object in tree by sequence of keys.\n    \"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config._get_by_path": [[177, 182], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"\n    Access a nested object in tree by sequence keys.\n    \"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.__init__": [[79, 83], ["pandas.DataFrame", "utils.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.reset"], ["matrix_list", "=", "list", "(", ")", "\n", "sum_list", "=", "list", "(", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "kernel_size", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.reset": [[84, 87], ["None"], "methods", ["None"], ["        ", "vector_list", "=", "list", "(", ")", "\n", "\n", "# first element and multiples of dil_fact_max are always not pruned", "\n", "if", "i", "%", "dil_fact_max", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update": [[88, 94], ["utils.MetricTracker.writer.add_scalar"], "methods", ["None"], ["            ", "vector_list", ".", "extend", "(", "[", "0", "]", "*", "n_max", ")", "\n", "matrix_list", ".", "append", "(", "vector_list", ")", "\n", "sum_list", ".", "append", "(", "1", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "for", "line", "in", "gamma_mul", "(", "dil_fact_max", ")", ":", "\n", "                ", "matrix_list", ".", "append", "(", "line", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.avg": [[95, 97], ["None"], "methods", ["None"], ["sum_list", ".", "append", "(", "0", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.result": [[98, 100], ["dict"], "methods", ["None"], ["# Truncate not necessary rows in matrix_list. ", "\n", "# i.e., from kernel_size to end", "\n", "# if len(matrix_list) == kernel_size, matrix_list[:-0] = [] !!! ", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.ensure_dir": [[29, 33], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["\n", "if", "tf", ".", "__version__", "==", "'1.14.0'", ":", "\n", "    ", "def", "binarize", "(", "x", ",", "th", ")", ":", "\n", "\n", "        ", "g", "=", "tf", ".", "get_default_graph", "(", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.read_json": [[34, 38], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["\n", "with", "ops", ".", "name_scope", "(", "\"Binarized\"", ")", "as", "name", ":", "\n", "            ", "with", "g", ".", "gradient_override_map", "(", "{", "\"Sign\"", ":", "\"Identity\"", ",", "\"Round\"", ":", "\"Identity\"", "}", ")", ":", "\n", "                ", "return", "tf", ".", "round", "(", "(", "tf", ".", "sign", "(", "x", "-", "th", ")", "+", "1", ")", "/", "2", ")", "\n", "", "", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.write_json": [[39, 43], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["    ", "@", "tf", ".", "custom_gradient", "\n", "def", "binarize", "(", "x", ",", "th", ")", ":", "\n", "        ", "bin_x", "=", "tf", ".", "round", "(", "(", "tf", ".", "sign", "(", "x", "-", "th", ")", "+", "1", ")", "/", "2", ")", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "return", "tf", ".", "identity", "(", "x", ")", "*", "dy", ",", "None", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.inf_loop": [[44, 50], ["itertools.repeat"], "function", ["None"], ["\n", "", "return", "bin_x", ",", "grad", "\n", "\n", "", "", "def", "gamma_mul", "(", "dil_fact", ",", "it", "=", "0", ",", "line", "=", "[", "]", ")", ":", "\n", "\n", "# entry point", "\n", "    ", "if", "it", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.prepare_device": [[51, 67], ["torch.cuda.device_count", "torch.device", "list", "print", "print", "range"], "function", ["None"], ["        ", "line", "=", "list", "(", ")", "\n", "line", ".", "extend", "(", "[", "[", "1", "]", "]", ")", "\n", "it", "+=", "1", "\n", "\n", "# exit point", "\n", "", "elif", "it", "==", "int", "(", "math", ".", "log", "(", "dil_fact", ",", "2", ")", ")", ":", "\n", "        ", "return", "line", "\n", "\n", "", "else", ":", "\n", "#it += 1 ", "\n", "        ", "for", "pos", "in", "range", "(", "len", "(", "line", ")", ")", ":", "\n", "            ", "line", "[", "pos", "]", ".", "append", "(", "0", ")", "\n", "\n", "", "line", ".", "extend", "(", "[", "[", "0", "]", "*", "(", "it", ")", "+", "[", "1", "]", "]", ")", "\n", "\n", "line", ".", "extend", "(", "copy", ".", "deepcopy", "(", "line", "[", ":", "(", "2", "**", "it", "-", "1", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils._single": [[68, 77], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["it", "+=", "1", "\n", "\n", "", "return", "gamma_mul", "(", "dil_fact", ",", "it", ",", "line", ")", "\n", "\n", "", "def", "prune_mul", "(", "kernel", ",", "gamma", ")", ":", "\n", "    ", "eps", "=", "1e-6", "\n", "kernel_size", "=", "kernel", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "n_max", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "kernel_size", "-", "eps", ",", "2", ")", ")", "\n", "dil_fact_max", "=", "2", "**", "n_max", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TimePPGfloat.__init__": [[48, 159], ["base.BaseModel.__init__", "isinstance", "math.ceil", "TimePPG_float.TempConvBlock", "math.ceil", "TimePPG_float.TempConvBlock", "math.ceil", "TimePPG_float.ConvBlock", "math.ceil", "TimePPG_float.TempConvBlock", "math.ceil", "TimePPG_float.TempConvBlock", "TimePPG_float.ConvBlock", "math.ceil", "TimePPG_float.TempConvBlock", "math.ceil", "TimePPG_float.TempConvBlock", "TimePPG_float.ConvBlock", "TimePPG_float.Regressor", "TimePPG_float.Regressor", "torch.Linear", "torch.Linear", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "channels", "=", "'Not Initialized'", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TimePPGfloat", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dil", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "self", ".", "rf", "=", "[", "\n", "5", ",", "5", ",", "5", ",", "\n", "9", ",", "9", ",", "\n", "17", ",", "17", "\n", "]", "\n", "if", "isinstance", "(", "channels", ",", "list", ")", ":", "\n", "            ", "self", ".", "ch", "=", "channels", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Missed configuration of channels for TimePPG'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TimePPGfloat.forward": [[161, 196], ["TimePPG_float.TimePPGfloat.cb0", "TimePPG_float.TimePPGfloat.cb1", "TimePPG_float.TimePPGfloat.cb2", "TimePPG_float.TimePPGfloat.flatten", "TimePPG_float.TimePPGfloat.regr0", "TimePPG_float.TimePPGfloat.regr1", "TimePPG_float.TimePPGfloat.out_neuron", "TimePPG_float.TimePPGfloat.tcb01", "TimePPG_float.TimePPGfloat.tcb11", "TimePPG_float.TimePPGfloat.tcb21", "TimePPG_float.TimePPGfloat.tcb00", "TimePPG_float.TimePPGfloat.tcb10", "TimePPG_float.TimePPGfloat.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "\n", "self", ".", "tcb01", "(", "\n", "self", ".", "tcb00", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "cb1", "(", "\n", "self", ".", "tcb11", "(", "\n", "self", ".", "tcb10", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "cb2", "(", "\n", "self", ".", "tcb21", "(", "\n", "self", ".", "tcb20", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "\n", "x", "\n", ")", "\n", "x", "=", "self", ".", "regr1", "(", "\n", "x", "\n", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "\n", "x", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TempConvBlock.__init__": [[214, 228], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ")", ":", "\n", "        ", "super", "(", "TempConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ch_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TempConvBlock.forward": [[230, 233], ["TimePPG_float.TempConvBlock.relu0", "TimePPG_float.TempConvBlock.bn0", "TimePPG_float.TempConvBlock.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.ConvBlock.__init__": [[250, 269], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.ConvBlock.forward": [[270, 273], ["TimePPG_float.ConvBlock.relu0", "TimePPG_float.ConvBlock.bn0", "TimePPG_float.ConvBlock.pool0", "TimePPG_float.ConvBlock.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "pool0", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.Regressor.__init__": [[286, 300], ["base.BaseModel.__init__", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "ft_in", ",", "\n", "out_features", "=", "ft_out", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.Regressor.forward": [[302, 305], ["TimePPG_float.Regressor.relu0", "TimePPG_float.Regressor.bn0", "TimePPG_float.Regressor.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "fc0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.Chomp1d.__init__": [[314, 317], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.Chomp1d.forward": [[318, 320], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TimePPGfloat_big": [[31, 33], ["TimePPG_float.TimePPGfloat"], "function", ["None"], ["def", "TimePPGfloat_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPGfloat", "(", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPGfloat_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TimePPGfloat_medium": [[33, 35], ["TimePPG_float.TimePPGfloat"], "function", ["None"], ["", "def", "TimePPGfloat_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPGfloat", "(", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPGfloat_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_float.TimePPGfloat_small": [[35, 37], ["TimePPG_float.TimePPGfloat"], "function", ["None"], ["", "def", "TimePPGfloat_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPGfloat", "(", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.TEMPONet.__init__": [[44, 156], ["base.BaseModel.__init__", "math.ceil", "TEMPONet_float.TempConvBlock", "math.ceil", "TEMPONet_float.TempConvBlock", "math.ceil", "TEMPONet_float.ConvBlock", "math.ceil", "TEMPONet_float.TempConvBlock", "math.ceil", "TEMPONet_float.TempConvBlock", "TEMPONet_float.ConvBlock", "math.ceil", "TEMPONet_float.TempConvBlock", "math.ceil", "TEMPONet_float.TempConvBlock", "TEMPONet_float.ConvBlock", "TEMPONet_float.Regressor", "TEMPONet_float.Regressor", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TEMPONet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dil", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "self", ".", "rf", "=", "[", "\n", "5", ",", "5", ",", "5", ",", "\n", "9", ",", "9", ",", "\n", "17", ",", "17", "\n", "]", "\n", "self", ".", "ch", "=", "[", "\n", "32", ",", "32", ",", "64", ",", "\n", "64", ",", "64", ",", "128", ",", "\n", "128", ",", "128", ",", "128", ",", "\n", "256", ",", "128", "\n", "]", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.TEMPONet.forward": [[158, 193], ["TEMPONet_float.TEMPONet.cb0", "TEMPONet_float.TEMPONet.cb1", "TEMPONet_float.TEMPONet.cb2", "TEMPONet_float.TEMPONet.flatten", "TEMPONet_float.TEMPONet.regr0", "TEMPONet_float.TEMPONet.regr1", "TEMPONet_float.TEMPONet.out_neuron", "TEMPONet_float.TEMPONet.tcb01", "TEMPONet_float.TEMPONet.tcb11", "TEMPONet_float.TEMPONet.tcb21", "TEMPONet_float.TEMPONet.tcb00", "TEMPONet_float.TEMPONet.tcb10", "TEMPONet_float.TEMPONet.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "\n", "self", ".", "tcb01", "(", "\n", "self", ".", "tcb00", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "cb1", "(", "\n", "self", ".", "tcb11", "(", "\n", "self", ".", "tcb10", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "x", "=", "self", ".", "cb2", "(", "\n", "self", ".", "tcb21", "(", "\n", "self", ".", "tcb20", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "\n", "x", "\n", ")", "\n", "x", "=", "self", ".", "regr1", "(", "\n", "x", "\n", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "\n", "x", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.TempConvBlock.__init__": [[211, 225], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ")", ":", "\n", "        ", "super", "(", "TempConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ch_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.TempConvBlock.forward": [[227, 230], ["TEMPONet_float.TempConvBlock.relu0", "TEMPONet_float.TempConvBlock.bn0", "TEMPONet_float.TempConvBlock.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.ConvBlock.__init__": [[247, 266], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.ConvBlock.forward": [[267, 270], ["TEMPONet_float.ConvBlock.relu0", "TEMPONet_float.ConvBlock.bn0", "TEMPONet_float.ConvBlock.pool0", "TEMPONet_float.ConvBlock.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "pool0", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.Regressor.__init__": [[283, 297], ["base.BaseModel.__init__", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "ft_in", ",", "\n", "out_features", "=", "ft_out", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.Regressor.forward": [[299, 302], ["TEMPONet_float.Regressor.relu0", "TEMPONet_float.Regressor.bn0", "TEMPONet_float.Regressor.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "fc0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.Chomp1d.__init__": [[311, 314], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.Chomp1d.forward": [[315, 317], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet_float.TempoNetfloat": [[31, 33], ["TEMPONet_float.TEMPONet"], "function", ["None"], ["def", "TempoNetfloat", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix.__init__": [[52, 187], ["base.BaseModel.__init__", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "TCN_variants.Regressor", "TCN_variants.Regressor", "models.quant_module_1d.QuantizedLinear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "dilations", ",", "channels", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TCN_network_quantized_mix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "dilations", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "self", ".", "ch", "=", "channels", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "0", "]", ",", "\n", "abits", "=", "abits", "[", "0", "]", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "1", "]", ",", "\n", "abits", "=", "abits", "[", "1", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", "[", "2", "]", ",", "\n", "abits", "=", "abits", "[", "2", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "3", "]", ",", "\n", "abits", "=", "abits", "[", "3", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "4", "]", ",", "\n", "abits", "=", "abits", "[", "4", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", "[", "5", "]", ",", "\n", "abits", "=", "abits", "[", "5", "]", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "6", "]", ",", "\n", "abits", "=", "abits", "[", "6", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "7", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "7", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "7", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "7", "]", ",", "\n", "abits", "=", "abits", "[", "7", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", "[", "8", "]", ",", "\n", "abits", "=", "abits", "[", "8", "]", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", "[", "9", "]", ",", "\n", "abits", "=", "abits", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", "[", "10", "]", ",", "\n", "abits", "=", "abits", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", "[", "11", "]", ",", "\n", "abits", "=", "abits", "[", "11", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix.forward": [[189, 200], ["TCN_variants.TCN_network_quantized_mix.cb0", "TCN_variants.TCN_network_quantized_mix.cb1", "TCN_variants.TCN_network_quantized_mix.cb2", "TCN_variants.TCN_network_quantized_mix.flatten", "TCN_variants.TCN_network_quantized_mix.regr0", "TCN_variants.TCN_network_quantized_mix.regr1", "TCN_variants.TCN_network_quantized_mix.out_neuron", "TCN_variants.TCN_network_quantized_mix.tcb01", "TCN_variants.TCN_network_quantized_mix.tcb11", "TCN_variants.TCN_network_quantized_mix.tcb21", "TCN_variants.TCN_network_quantized_mix.tcb00", "TCN_variants.TCN_network_quantized_mix.tcb10", "TCN_variants.TCN_network_quantized_mix.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized.__init__": [[211, 346], ["base.BaseModel.__init__", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "TCN_variants.Regressor", "TCN_variants.Regressor", "models.quant_module_1d.QuantizedLinear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "dilations", ",", "channels", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TCN_network_quantized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "dilations", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "self", ".", "ch", "=", "channels", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "7", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "7", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "7", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized.forward": [[348, 359], ["TCN_variants.TCN_network_quantized.cb0", "TCN_variants.TCN_network_quantized.cb1", "TCN_variants.TCN_network_quantized.cb2", "TCN_variants.TCN_network_quantized.flatten", "TCN_variants.TCN_network_quantized.regr0", "TCN_variants.TCN_network_quantized.regr1", "TCN_variants.TCN_network_quantized.out_neuron", "TCN_variants.TCN_network_quantized.tcb01", "TCN_variants.TCN_network_quantized.tcb11", "TCN_variants.TCN_network_quantized.tcb21", "TCN_variants.TCN_network_quantized.tcb00", "TCN_variants.TCN_network_quantized.tcb10", "TCN_variants.TCN_network_quantized.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_float.__init__": [[370, 470], ["base.BaseModel.__init__", "math.ceil", "TCN_variants.TempConvBlock_float", "math.ceil", "TCN_variants.TempConvBlock_float", "math.ceil", "TCN_variants.ConvBlock_float", "math.ceil", "TCN_variants.TempConvBlock_float", "math.ceil", "TCN_variants.TempConvBlock_float", "TCN_variants.ConvBlock_float", "math.ceil", "TCN_variants.TempConvBlock_float", "math.ceil", "TCN_variants.TempConvBlock_float", "TCN_variants.ConvBlock_float", "TCN_variants.Regressor_float", "TCN_variants.Regressor_float", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dilations", ",", "channels", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TCN_network_float", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dil", "=", "dilations", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "self", ".", "ch", "=", "channels", "\n", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "7", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "7", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "7", "]", "+", "1", ")", "//", "2", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock_float", "(", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor_float", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor_float", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_float.forward": [[472, 483], ["TCN_variants.TCN_network_float.cb0", "TCN_variants.TCN_network_float.cb1", "TCN_variants.TCN_network_float.cb2", "TCN_variants.TCN_network_float.flatten", "TCN_variants.TCN_network_float.regr0", "TCN_variants.TCN_network_float.regr1", "TCN_variants.TCN_network_float.out_neuron", "TCN_variants.TCN_network_float.tcb01", "TCN_variants.TCN_network_float.tcb11", "TCN_variants.TCN_network_float.tcb21", "TCN_variants.TCN_network_float.tcb00", "TCN_variants.TCN_network_float.tcb10", "TCN_variants.TCN_network_float.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TempConvBlock_float.__init__": [[501, 515], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ")", ":", "\n", "        ", "super", "(", "TempConvBlock_float", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ch_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TempConvBlock_float.forward": [[517, 520], ["TCN_variants.TempConvBlock_float.relu0", "TCN_variants.TempConvBlock_float.bn0", "TCN_variants.TempConvBlock_float.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.ConvBlock_float.__init__": [[537, 556], ["base.BaseModel.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock_float", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "ch_in", ",", "\n", "out_channels", "=", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", "padding", "=", "pad", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.ConvBlock_float.forward": [[557, 560], ["TCN_variants.ConvBlock_float.relu0", "TCN_variants.ConvBlock_float.bn0", "TCN_variants.ConvBlock_float.pool0", "TCN_variants.ConvBlock_float.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "pool0", "(", "self", ".", "conv0", "(", "x", ")", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Regressor_float.__init__": [[573, 587], ["base.BaseModel.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ")", ":", "\n", "        ", "super", "(", "Regressor_float", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "ft_in", ",", "\n", "out_features", "=", "ft_out", ",", "\n", "bias", "=", "False", "\n", ")", "\n", "\n", "self", ".", "relu0", "=", "nn", ".", "ReLU6", "(", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Regressor_float.forward": [[589, 592], ["TCN_variants.Regressor_float.relu0", "TCN_variants.Regressor_float.bn0", "TCN_variants.Regressor_float.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu0", "(", "self", ".", "bn0", "(", "self", ".", "fc0", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TempConvBlock.__init__": [[609, 627], ["base.BaseModel.__init__", "conv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TempConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TempConvBlock.forward": [[628, 631], ["TCN_variants.TempConvBlock.bn0", "TCN_variants.TempConvBlock.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.ConvBlock.__init__": [[646, 669], ["base.BaseModel.__init__", "conv", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.ConvBlock.forward": [[670, 679], ["TCN_variants.ConvBlock.bn0", "TCN_variants.ConvBlock.pool0", "TCN_variants.ConvBlock.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "pool0", "(", "\n", "self", ".", "conv0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Regressor.__init__": [[690, 704], ["base.BaseModel.__init__", "models.quant_module_1d.QuantizedLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ",", "wbits", ",", "abits", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "ft_in", ",", "\n", "outplane", "=", "ft_out", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Regressor.forward": [[706, 713], ["TCN_variants.Regressor.bn0", "TCN_variants.Regressor.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "fc0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Chomp1d.__init__": [[720, 723], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.Chomp1d.forward": [[724, 726], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix_search.__init__": [[737, 868], ["base.BaseModel.__init__", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "math.ceil", "TCN_variants.TempConvBlock", "TCN_variants.ConvBlock", "TCN_variants.Regressor", "TCN_variants.Regressor", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "dilations", ",", "channels", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TCN_network_quantized_mix_search", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "dilations", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "self", ".", "ch", "=", "channels", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "7", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "7", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "7", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix_search.forward": [[870, 881], ["TCN_variants.TCN_network_quantized_mix_search.cb0", "TCN_variants.TCN_network_quantized_mix_search.cb1", "TCN_variants.TCN_network_quantized_mix_search.cb2", "TCN_variants.TCN_network_quantized_mix_search.flatten", "TCN_variants.TCN_network_quantized_mix_search.regr0", "TCN_variants.TCN_network_quantized_mix_search.regr1", "TCN_variants.TCN_network_quantized_mix_search.out_neuron", "TCN_variants.TCN_network_quantized_mix_search.tcb01", "TCN_variants.TCN_network_quantized_mix_search.tcb11", "TCN_variants.TCN_network_quantized_mix_search.tcb21", "TCN_variants.TCN_network_quantized_mix_search.tcb00", "TCN_variants.TCN_network_quantized_mix_search.tcb10", "TCN_variants.TCN_network_quantized_mix_search.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix_search.complexity_loss": [[882, 892], ["TCN_variants.TCN_network_quantized_mix_search.modules", "size_product[].item", "isinstance", "m.complexity_loss"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss"], ["", "def", "complexity_loss", "(", "self", ")", ":", "\n", "        ", "size_product", "=", "[", "]", "\n", "loss", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "loss", "+=", "m", ".", "complexity_loss", "(", ")", "\n", "size_product", "+=", "[", "m", ".", "size_product", "]", "\n", "", "", "normalizer", "=", "size_product", "[", "0", "]", ".", "item", "(", ")", "\n", "loss", "/=", "normalizer", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network_quantized_mix_search.fetch_best_arch": [[893, 917], ["TCN_variants.TCN_network_quantized_mix_search.modules", "isinstance", "m.fetch_best_arch", "layer_arch.keys", "best_arch[].append"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch"], ["", "def", "fetch_best_arch", "(", "self", ")", ":", "\n", "        ", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", "=", "0", ",", "0", ",", "0", "\n", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "=", "0", ",", "0", ",", "0", "\n", "layer_idx", "=", "0", "\n", "best_arch", "=", "None", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "layer_arch", ",", "bitops", ",", "bita", ",", "bitw", ",", "mixbitops", ",", "mixbita", ",", "mixbitw", "=", "m", ".", "fetch_best_arch", "(", "layer_idx", ")", "\n", "if", "best_arch", "is", "None", ":", "\n", "                    ", "best_arch", "=", "layer_arch", "\n", "", "else", ":", "\n", "                    ", "for", "key", "in", "layer_arch", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "best_arch", ":", "\n", "                            ", "best_arch", "[", "key", "]", "=", "layer_arch", "[", "key", "]", "\n", "", "else", ":", "\n", "                            ", "best_arch", "[", "key", "]", ".", "append", "(", "layer_arch", "[", "key", "]", "[", "0", "]", ")", "\n", "", "", "", "sum_bitops", "+=", "bitops", "\n", "sum_bita", "+=", "bita", "\n", "sum_bitw", "+=", "bitw", "\n", "sum_mixbitops", "+=", "mixbitops", "\n", "sum_mixbita", "+=", "mixbita", "\n", "sum_mixbitw", "+=", "mixbitw", "\n", "layer_idx", "+=", "1", "\n", "", "", "return", "best_arch", ",", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", ",", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "\n", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TCN_variants.TCN_network": [[31, 42], ["TCN_variants.TCN_network_float", "pandas.read_excel", "TCN_variants.TCN_network_quantized_mix", "TCN_variants.TCN_network_quantized_mix_search", "TCN_variants.TCN_network_quantized"], "function", ["None"], ["def", "TCN_network", "(", "**", "kwargs", ")", ":", "\n", "    ", "if", "kwargs", "[", "'quantization'", "]", "==", "'False'", ":", "\n", "        ", "return", "TCN_network_float", "(", "dilations", "=", "kwargs", "[", "'dilations'", "]", ",", "channels", "=", "kwargs", "[", "'channels'", "]", ")", "\n", "", "elif", "kwargs", "[", "'quantization'", "]", "==", "'mix'", ":", "\n", "        ", "dfs", "=", "pd", ".", "read_excel", "(", "'ppg-mixed-precision.xlsx'", ",", "sheet_name", "=", "'mix-quantizations'", ")", "\n", "dataset", "=", "dfs", "[", "dfs", "[", "'Name'", "]", "==", "kwargs", "[", "'sheet_name'", "]", "]", "[", "dfs", "[", "'cd'", "]", "==", "kwargs", "[", "'cd'", "]", "]", "\n", "return", "TCN_network_quantized_mix", "(", "qm", ".", "QuantizedChanConv1d", ",", "wbits", "=", "dataset", ".", "values", "[", "0", "]", "[", "2", ":", "14", "]", ",", "abits", "=", "dataset", ".", "values", "[", "0", "]", "[", "14", ":", "26", "]", ",", "dilations", "=", "kwargs", "[", "'dilations'", "]", ",", "channels", "=", "kwargs", "[", "'channels'", "]", ",", "share_weight", "=", "True", ")", "\n", "", "elif", "kwargs", "[", "'quantization'", "]", "==", "'mix-search'", ":", "\n", "        ", "return", "TCN_network_quantized_mix_search", "(", "qm", ".", "MixActivChanConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "dilations", "=", "kwargs", "[", "'dilations'", "]", ",", "channels", "=", "kwargs", "[", "'channels'", "]", ",", "share_weight", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "return", "TCN_network_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "kwargs", "[", "'quantization'", "]", ",", "wbits", "=", "kwargs", "[", "'quantization'", "]", ",", "dilations", "=", "kwargs", "[", "'dilations'", "]", ",", "channels", "=", "kwargs", "[", "'channels'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_quantized_multiprec.__init__": [[311, 447], ["base.BaseModel.__init__", "isinstance", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "math.ceil", "TimePPG_variants.ConvBlock_multiprec", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "TimePPG_variants.ConvBlock_multiprec", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "math.ceil", "TimePPG_variants.TempConvBlock_multiprec", "TimePPG_variants.ConvBlock_multiprec", "TimePPG_variants.Regressor", "TimePPG_variants.Regressor", "models.quant_module_1d.QuantizedLinear", "print", "exit", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "channels", "=", "'Not Initialized'", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TimePPG_quantized_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "2", ",", "2", ",", "1", ",", "4", ",", "4", ",", "8", ",", "8", "]", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "if", "isinstance", "(", "channels", ",", "list", ")", ":", "\n", "            ", "self", ".", "ch", "=", "channels", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Missed configuration of channels for TimePPG'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "0", "]", ",", "\n", "abits", "=", "abits", "[", "0", "]", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "0", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "1", "]", ",", "\n", "abits", "=", "abits", "[", "1", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "1", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", "[", "2", "]", ",", "\n", "abits", "=", "abits", "[", "2", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "2", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "3", "]", ",", "\n", "abits", "=", "abits", "[", "3", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "3", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "4", "]", ",", "\n", "abits", "=", "abits", "[", "4", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "4", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", "[", "5", "]", ",", "\n", "abits", "=", "abits", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "5", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "6", "]", ",", "\n", "abits", "=", "abits", "[", "6", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "6", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "7", "]", ",", "\n", "abits", "=", "abits", "[", "7", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "7", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", "[", "8", "]", ",", "\n", "abits", "=", "abits", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "sum", "(", "self", ".", "ch", "[", "8", "]", ")", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", "[", "9", "]", ",", "\n", "abits", "=", "abits", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", "[", "10", "]", ",", "\n", "abits", "=", "abits", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", "[", "11", "]", ",", "\n", "abits", "=", "abits", "[", "11", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_quantized_multiprec.forward": [[449, 460], ["TimePPG_variants.TimePPG_quantized_multiprec.cb0", "TimePPG_variants.TimePPG_quantized_multiprec.cb1", "TimePPG_variants.TimePPG_quantized_multiprec.cb2", "TimePPG_variants.TimePPG_quantized_multiprec.flatten", "TimePPG_variants.TimePPG_quantized_multiprec.regr0", "TimePPG_variants.TimePPG_quantized_multiprec.regr1", "TimePPG_variants.TimePPG_quantized_multiprec.out_neuron", "TimePPG_variants.TimePPG_quantized_multiprec.tcb01", "TimePPG_variants.TimePPG_quantized_multiprec.tcb11", "TimePPG_variants.TimePPG_quantized_multiprec.tcb21", "TimePPG_variants.TimePPG_quantized_multiprec.tcb00", "TimePPG_variants.TimePPG_quantized_multiprec.tcb10", "TimePPG_variants.TimePPG_quantized_multiprec.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_quantized.__init__": [[472, 609], ["base.BaseModel.__init__", "isinstance", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.ConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "TimePPG_variants.ConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "TimePPG_variants.ConvBlock", "TimePPG_variants.Regressor", "TimePPG_variants.Regressor", "models.quant_module_1d.QuantizedLinear", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "channels", "=", "'Not Initialized'", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TimePPG_quantized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "2", ",", "2", ",", "1", ",", "4", ",", "4", ",", "8", ",", "8", "]", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "if", "isinstance", "(", "channels", ",", "list", ")", ":", "\n", "            ", "self", ".", "ch", "=", "channels", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Missed configuration of channels for TimePPG'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "0", "]", ",", "\n", "abits", "=", "abits", "[", "0", "]", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "1", "]", ",", "\n", "abits", "=", "abits", "[", "1", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", "[", "2", "]", ",", "\n", "abits", "=", "abits", "[", "2", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "3", "]", ",", "\n", "abits", "=", "abits", "[", "3", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "4", "]", ",", "\n", "abits", "=", "abits", "[", "4", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", "[", "5", "]", ",", "\n", "abits", "=", "abits", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "6", "]", ",", "\n", "abits", "=", "abits", "[", "6", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "7", "]", ",", "\n", "abits", "=", "abits", "[", "7", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", "[", "8", "]", ",", "\n", "abits", "=", "abits", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", "[", "9", "]", ",", "\n", "abits", "=", "abits", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", "[", "10", "]", ",", "\n", "abits", "=", "abits", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", "[", "11", "]", ",", "\n", "abits", "=", "abits", "[", "11", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_quantized.forward": [[611, 622], ["TimePPG_variants.TimePPG_quantized.cb0", "TimePPG_variants.TimePPG_quantized.cb1", "TimePPG_variants.TimePPG_quantized.cb2", "TimePPG_variants.TimePPG_quantized.flatten", "TimePPG_variants.TimePPG_quantized.regr0", "TimePPG_variants.TimePPG_quantized.regr1", "TimePPG_variants.TimePPG_quantized.out_neuron", "TimePPG_variants.TimePPG_quantized.tcb01", "TimePPG_variants.TimePPG_quantized.tcb11", "TimePPG_variants.TimePPG_quantized.tcb21", "TimePPG_variants.TimePPG_quantized.tcb00", "TimePPG_variants.TimePPG_quantized.tcb10", "TimePPG_variants.TimePPG_quantized.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG.__init__": [[633, 776], ["base.BaseModel.__init__", "isinstance", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.ConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "TimePPG_variants.ConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "math.ceil", "TimePPG_variants.TempConvBlock", "TimePPG_variants.ConvBlock", "TimePPG_variants.Regressor", "TimePPG_variants.Regressor", "torch.Linear", "torch.Linear", "torch.Linear", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "channels", "=", "'No initialized'", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TimePPG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "self", ".", "rf", "=", "[", "\n", "5", ",", "5", ",", "5", ",", "\n", "9", ",", "9", ",", "\n", "17", ",", "17", "\n", "]", "\n", "if", "isinstance", "(", "channels", ",", "list", ")", ":", "\n", "            ", "self", ".", "ch", "=", "channels", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Missed configuration of channels for TimePPG'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor ", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "# 2nd instance of regressor ", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG.forward": [[778, 789], ["TimePPG_variants.TimePPG.cb0", "TimePPG_variants.TimePPG.cb1", "TimePPG_variants.TimePPG.cb2", "TimePPG_variants.TimePPG.flatten", "TimePPG_variants.TimePPG.regr0", "TimePPG_variants.TimePPG.regr1", "TimePPG_variants.TimePPG.out_neuron", "TimePPG_variants.TimePPG.tcb01", "TimePPG_variants.TimePPG.tcb11", "TimePPG_variants.TimePPG.tcb21", "TimePPG_variants.TimePPG.tcb00", "TimePPG_variants.TimePPG.tcb10", "TimePPG_variants.TimePPG.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG.complexity_loss": [[790, 800], ["TimePPG_variants.TimePPG.modules", "size_product[].item", "isinstance", "m.complexity_loss"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss"], ["", "def", "complexity_loss", "(", "self", ")", ":", "\n", "        ", "size_product", "=", "[", "]", "\n", "loss", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "loss", "+=", "m", ".", "complexity_loss", "(", ")", "\n", "size_product", "+=", "[", "m", ".", "size_product", "]", "\n", "", "", "normalizer", "=", "size_product", "[", "0", "]", ".", "item", "(", ")", "\n", "loss", "/=", "normalizer", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG.fetch_best_arch": [[801, 825], ["TimePPG_variants.TimePPG.modules", "isinstance", "m.fetch_best_arch", "layer_arch.keys", "best_arch[].append"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch"], ["", "def", "fetch_best_arch", "(", "self", ")", ":", "\n", "        ", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", "=", "0", ",", "0", ",", "0", "\n", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "=", "0", ",", "0", ",", "0", "\n", "layer_idx", "=", "0", "\n", "best_arch", "=", "None", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "layer_arch", ",", "bitops", ",", "bita", ",", "bitw", ",", "mixbitops", ",", "mixbita", ",", "mixbitw", "=", "m", ".", "fetch_best_arch", "(", "layer_idx", ")", "\n", "if", "best_arch", "is", "None", ":", "\n", "                    ", "best_arch", "=", "layer_arch", "\n", "", "else", ":", "\n", "                    ", "for", "key", "in", "layer_arch", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "best_arch", ":", "\n", "                            ", "best_arch", "[", "key", "]", "=", "layer_arch", "[", "key", "]", "\n", "", "else", ":", "\n", "                            ", "best_arch", "[", "key", "]", ".", "append", "(", "layer_arch", "[", "key", "]", "[", "0", "]", ")", "\n", "", "", "", "sum_bitops", "+=", "bitops", "\n", "sum_bita", "+=", "bita", "\n", "sum_bitw", "+=", "bitw", "\n", "sum_mixbitops", "+=", "mixbitops", "\n", "sum_mixbita", "+=", "mixbita", "\n", "sum_mixbitw", "+=", "mixbitw", "\n", "layer_idx", "+=", "1", "\n", "", "", "return", "best_arch", ",", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", ",", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TempConvBlock_multiprec.__init__": [[843, 889], ["base.BaseModel.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "conv", "conv", "conv", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TempConvBlock_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ch_out", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "0", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "2", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "", "if", "ch_out", "[", "1", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn1", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "1", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "4", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "", "if", "ch_out", "[", "2", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn2", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "2", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "8", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "\n", "", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "sum", "(", "ch_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TempConvBlock_multiprec.forward": [[890, 907], ["TimePPG_variants.TempConvBlock_multiprec.bn0", "hasattr", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TimePPG_variants.TempConvBlock_multiprec.tcn0", "TimePPG_variants.TempConvBlock_multiprec.tcn1", "TimePPG_variants.TempConvBlock_multiprec.tcn2", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TimePPG_variants.TempConvBlock_multiprec.tcn0", "TimePPG_variants.TempConvBlock_multiprec.tcn1", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "TimePPG_variants.TempConvBlock_multiprec.tcn0", "TimePPG_variants.TempConvBlock_multiprec.tcn2", "TimePPG_variants.TempConvBlock_multiprec.tcn0", "hasattr", "TimePPG_variants.TempConvBlock_multiprec.tcn1", "TimePPG_variants.TempConvBlock_multiprec.tcn2", "TimePPG_variants.TempConvBlock_multiprec.tcn1", "hasattr", "TimePPG_variants.TempConvBlock_multiprec.tcn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn1'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn1", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn1'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn1", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn1'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn1", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn0", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn1'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn1", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TempConvBlock.__init__": [[923, 941], ["base.BaseModel.__init__", "conv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TempConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TempConvBlock.forward": [[942, 945], ["TimePPG_variants.TempConvBlock.bn0", "TimePPG_variants.TempConvBlock.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.ConvBlock_multiprec.__init__": [[962, 1015], ["base.BaseModel.__init__", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "conv", "conv", "conv", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ch_out", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "0", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "if", "ch_out", "[", "1", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv1", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "1", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "if", "ch_out", "[", "2", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv2", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "2", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "sum", "(", "ch_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.ConvBlock_multiprec.forward": [[1016, 1033], ["TimePPG_variants.ConvBlock_multiprec.bn0", "hasattr", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TimePPG_variants.ConvBlock_multiprec.pool0", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TimePPG_variants.ConvBlock_multiprec.conv0", "TimePPG_variants.ConvBlock_multiprec.conv1", "TimePPG_variants.ConvBlock_multiprec.conv2", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TimePPG_variants.ConvBlock_multiprec.conv0", "TimePPG_variants.ConvBlock_multiprec.conv1", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "TimePPG_variants.ConvBlock_multiprec.conv0", "TimePPG_variants.ConvBlock_multiprec.conv2", "TimePPG_variants.ConvBlock_multiprec.conv0", "hasattr", "TimePPG_variants.ConvBlock_multiprec.conv1", "TimePPG_variants.ConvBlock_multiprec.conv2", "TimePPG_variants.ConvBlock_multiprec.conv1", "hasattr", "TimePPG_variants.ConvBlock_multiprec.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv1'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv1'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv1", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv1'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv1'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn0", "(", "self", ".", "pool0", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.ConvBlock.__init__": [[1048, 1071], ["base.BaseModel.__init__", "conv", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.ConvBlock.forward": [[1072, 1081], ["TimePPG_variants.ConvBlock.bn0", "TimePPG_variants.ConvBlock.pool0", "TimePPG_variants.ConvBlock.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "pool0", "(", "\n", "self", ".", "conv0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.Regressor.__init__": [[1092, 1106], ["base.BaseModel.__init__", "models.quant_module_1d.QuantizedLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ",", "wbits", ",", "abits", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "ft_in", ",", "\n", "outplane", "=", "ft_out", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.Regressor.forward": [[1108, 1115], ["TimePPG_variants.Regressor.bn0", "TimePPG_variants.Regressor.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "fc0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.Chomp1d.__init__": [[1122, 1125], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.Chomp1d.forward": [[1126, 1128], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_multiprec_big": [[41, 64], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["def", "TimePPG_big_multiprec_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_big_248_multiprec3500.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "82", ")", "\n", "channels", ".", "append", "(", "61", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_multiprec_medium": [[64, 87], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_big_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_big_248_multiprec350.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "82", ")", "\n", "channels", ".", "append", "(", "61", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_multiprec_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_multiprec_small": [[87, 110], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_big_multiprec_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_big_248_multiprec35.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "82", ")", "\n", "channels", ".", "append", "(", "61", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_multiprec_big": [[111, 134], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_medium_multiprec_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_medium_248_multiprec3500.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "45", ")", "\n", "channels", ".", "append", "(", "80", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_multiprec_medium": [[134, 157], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_medium_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_medium_248_multiprec350.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "45", ")", "\n", "channels", ".", "append", "(", "80", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_multiprec_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_multiprec_small": [[157, 180], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_medium_multiprec_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_medium_248_multiprec35.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "45", ")", "\n", "channels", ".", "append", "(", "80", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_multiprec_big": [[181, 204], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_small_multiprec_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_small_248_multiprec3500.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "28", ")", "\n", "channels", ".", "append", "(", "77", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_multiprec_medium": [[204, 227], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_small_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_small_248_multiprec350.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "28", ")", "\n", "channels", ".", "append", "(", "77", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_multiprec_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_multiprec_small": [[227, 250], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TimePPG_variants.TimePPG_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TimePPG_small_multiprec_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTimePPG_small_248_multiprec35.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "28", ")", "\n", "channels", ".", "append", "(", "77", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TimePPG_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_big_248_layers": [[251, 253], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_big_248_layers", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MixActivChanConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "mixTimePPG_big_248_multiprec", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_big_248_multiprec": [[253, 255], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_big_248_multiprec", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MultiPrecActivConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_8", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_8": [[255, 257], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_8", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_4", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_4": [[257, 259], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "wbits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_2", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_2": [[259, 261], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "wbits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_big", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_big": [[261, 263], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_medium": [[263, 265], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_big_quantized_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_big_quantized_small": [[265, 267], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_big_quantized_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "4", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "32", ",", "32", ",", "63", ",", "64", ",", "64", ",", "121", ",", "122", ",", "104", ",", "76", ",", "82", ",", "61", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_medium_248_layers": [[268, 270], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_medium_248_layers", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MixActivChanConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "mixTimePPG_medium_248_multiprec", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_medium_248_multiprec": [[270, 272], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_medium_248_multiprec", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MultiPrecActivConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_8", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_8": [[272, 274], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_8", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_4", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_4": [[274, 276], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "wbits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_2", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_2": [[276, 278], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "wbits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_big", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_big": [[278, 280], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_medium": [[280, 282], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_medium_quantized_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_medium_quantized_small": [[282, 284], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_medium_quantized_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "4", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "26", ",", "17", ",", "42", ",", "63", ",", "41", ",", "26", ",", "30", ",", "27", ",", "16", ",", "45", ",", "80", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_small_248_layers": [[285, 287], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_small_248_layers", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MixActivChanConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "mixTimePPG_small_248_multiprec", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.mixTimePPG_small_248_multiprec": [[287, 289], ["TimePPG_variants.TimePPG"], "function", ["None"], ["", "def", "mixTimePPG_small_248_multiprec", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG", "(", "qm", ".", "MultiPrecActivConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_8", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_8": [[289, 291], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_8", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_4", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_4": [[291, 293], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "wbits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_2", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_2": [[293, 295], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "wbits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_big", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_big": [[295, 297], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_medium": [[297, 299], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TimePPG_small_quantized_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TimePPG_variants.TimePPG_small_quantized_small": [[299, 301], ["TimePPG_variants.TimePPG_quantized"], "function", ["None"], ["", "def", "TimePPG_small_quantized_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TimePPG_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "4", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "[", "2", ",", "3", ",", "2", ",", "13", ",", "2", ",", "2", ",", "31", ",", "4", ",", "9", ",", "28", ",", "77", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.nll_loss": [[25, 27], ["torch.nll_loss"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.nll_loss"], ["def", "nll_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "return", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.logcosh": [[28, 31], ["torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.Softplus", "torch.nn.Softplus", "torch.nn.Softplus"], "function", ["None"], ["", "def", "logcosh", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "x", "=", "output", "-", "target", "\n", "return", "torch", ".", "mean", "(", "x", "+", "torch", ".", "nn", ".", "Softplus", "(", ")", "(", "-", "2", "*", "x", ")", "-", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "2.", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.MAE": [[32, 34], ["torch.l1_loss"], "function", ["None"], ["", "def", "MAE", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "return", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.MSE": [[35, 37], ["torch.mse_loss"], "function", ["None"], ["", "def", "MSE", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.crossentropy_loss": [[38, 40], ["torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "crossentropy_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.bce_loss": [[41, 43], ["torch.BCELoss", "target.float"], "function", ["None"], ["", "def", "bce_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "return", "nn", ".", "BCELoss", "(", ")", "(", "output", ",", "target", ".", "float", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.trace_nll_loss": [[44, 51], ["target.squeeze.squeeze", "output.squeeze.squeeze", "output.squeeze.size", "torch.trace", "torch.trace", "torch.trace", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float().t", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log().float", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "trace_nll_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "target", "=", "target", ".", "squeeze", "(", ")", "\n", "output", "=", "output", ".", "squeeze", "(", ")", "\n", "return", "-", "torch", ".", "trace", "(", "\n", "torch", ".", "matmul", "(", "target", ",", "torch", ".", "log", "(", "output", "+", "1e-10", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", "+", "\n", "torch", ".", "matmul", "(", "(", "1", "-", "target", ")", ",", "torch", ".", "log", "(", "1", "-", "output", "+", "1e-10", ")", ".", "float", "(", ")", ".", "t", "(", ")", ")", "\n", ")", "/", "output", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.WordPTB_crossentropy_loss": [[52, 56], ["output[].contiguous().view", "target[].contiguous().view", "torch.CrossEntropyLoss", "output[].contiguous", "target[].contiguous"], "function", ["None"], ["", "def", "WordPTB_crossentropy_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "final_output", "=", "output", "[", ":", ",", "40", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "10000", ")", "\n", "final_target", "=", "target", "[", ":", ",", "40", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "final_output", ",", "final_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.loss.weighted_L1_loss": [[57, 62], ["target.float.float", "torch.l1_loss", "target.float.mean"], "function", ["None"], ["", "def", "weighted_L1_loss", "(", "output", ",", "target", ",", "*", "args", ")", ":", "\n", "    ", "num_batches", "=", "args", "[", "0", "]", "\n", "eps", "=", "(", ".001", "/", "num_batches", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "return", "(", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "*", "(", "target", "+", "target", ".", "mean", "(", ")", "+", "eps", ")", ")", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.accuracy": [[26, 33], ["torch.no_grad", "torch.no_grad", "torch.argmax", "torch.argmax", "torch.sum().item", "torch.sum().item", "len", "len", "torch.sum", "torch.sum"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "len", "(", "target", ")", "\n", "correct", "=", "0", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "target", ")", ".", "item", "(", ")", "\n", "", "return", "correct", "/", "len", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.MAE": [[34, 36], ["torch.l1_loss"], "function", ["None"], ["", "def", "MAE", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.WordPTB_perplexity": [[37, 42], ["output[].contiguous().view", "target[].contiguous().view", "math.exp", "torch.nn.CrossEntropyLoss", "output[].contiguous", "target[].contiguous"], "function", ["None"], ["", "def", "WordPTB_perplexity", "(", "output", ",", "target", ")", ":", "\n", "    ", "final_output", "=", "output", "[", ":", ",", "40", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "10000", ")", "\n", "final_target", "=", "target", "[", ":", ",", "40", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "CrossEntropyLoss", "(", ")", "(", "final_output", ",", "final_target", ")", "\n", "return", "math", ".", "exp", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.FRR": [[43, 52], ["torch.no_grad", "torch.no_grad"], "function", ["None"], ["", "def", "FRR", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "#true_negative = (output[target == 0] < .5).sum()", "\n", "        ", "true_positive", "=", "(", "output", "[", "target", "==", "1", "]", ">", ".5", ")", ".", "sum", "(", ")", "\n", "false_negative", "=", "(", "output", "[", "target", "==", "1", "]", "<", ".5", ")", ".", "sum", "(", ")", "\n", "#false_positive = (output[target == 0] > .5).sum()", "\n", "#pdb.set_trace()", "\n", "", "prova", "=", "false_negative", "/", "(", "true_positive", "+", "false_negative", ")", "\n", "return", "false_negative", "/", "(", "true_positive", "+", "false_negative", "+", "1e-10", ")", "\n", "#return false_negative / len(target)", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.FAR": [[54, 62], ["torch.no_grad", "torch.no_grad"], "function", ["None"], ["", "def", "FAR", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "true_negative", "=", "(", "output", "[", "target", "==", "0", "]", "<", ".5", ")", ".", "sum", "(", ")", "\n", "#true_positive = (output[target == 1] > .5).sum()", "\n", "#false_negative = (output[target == 1] < .5).sum()", "\n", "false_positive", "=", "(", "output", "[", "target", "==", "0", "]", ">", ".5", ")", ".", "sum", "(", ")", "\n", "#pdb.set_trace()", "\n", "", "return", "false_positive", "/", "(", "false_positive", "+", "true_negative", "+", "1e-10", ")", "\n", "#return false_positive / len(target)", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.metric.binary_accuracy": [[64, 71], ["torch.no_grad", "torch.no_grad", "len"], "function", ["None"], ["", "def", "binary_accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "true_negative", "=", "(", "output", "[", "target", "==", "0", "]", "<", ".5", ")", ".", "sum", "(", ")", "\n", "true_positive", "=", "(", "output", "[", "target", "==", "1", "]", ">", ".5", ")", ".", "sum", "(", ")", "\n", "#false_negative = (output[target == 1] < .5).sum()", "\n", "#false_positive = (output[target == 0] > .5).sum()", "\n", "", "return", "(", "true_positive", "+", "true_negative", ")", "/", "len", "(", "target", ")", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet_quantized_multiprec.__init__": [[134, 270], ["base.BaseModel.__init__", "isinstance", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "math.ceil", "TEMPONet.ConvBlock_multiprec", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "TEMPONet.ConvBlock_multiprec", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "math.ceil", "TEMPONet.TempConvBlock_multiprec", "TEMPONet.ConvBlock_multiprec", "TEMPONet.Regressor", "TEMPONet.Regressor", "models.quant_module_1d.QuantizedLinear", "print", "exit", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "channels", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TEMPONet_quantized_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "2", ",", "2", ",", "1", ",", "4", ",", "4", ",", "8", ",", "8", "]", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "if", "isinstance", "(", "channels", ",", "list", ")", ":", "\n", "            ", "self", ".", "ch", "=", "channels", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Missed configuration of channels for TimePPG'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "0", "]", ",", "\n", "abits", "=", "abits", "[", "0", "]", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "0", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "1", "]", ",", "\n", "abits", "=", "abits", "[", "1", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "1", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", "[", "2", "]", ",", "\n", "abits", "=", "abits", "[", "2", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "2", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "3", "]", ",", "\n", "abits", "=", "abits", "[", "3", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "3", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "4", "]", ",", "\n", "abits", "=", "abits", "[", "4", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "4", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", "[", "5", "]", ",", "\n", "abits", "=", "abits", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "5", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "6", "]", ",", "\n", "abits", "=", "abits", "[", "6", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "6", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "7", "]", ",", "\n", "abits", "=", "abits", "[", "7", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock_multiprec", "(", "conv", ",", "\n", "ch_in", "=", "sum", "(", "self", ".", "ch", "[", "7", "]", ")", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", "[", "8", "]", ",", "\n", "abits", "=", "abits", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "sum", "(", "self", ".", "ch", "[", "8", "]", ")", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", "[", "9", "]", ",", "\n", "abits", "=", "abits", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", "[", "10", "]", ",", "\n", "abits", "=", "abits", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", "[", "11", "]", ",", "\n", "abits", "=", "abits", "[", "11", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet_quantized_multiprec.forward": [[272, 283], ["TEMPONet.TEMPONet_quantized_multiprec.cb0", "TEMPONet.TEMPONet_quantized_multiprec.cb1", "TEMPONet.TEMPONet_quantized_multiprec.cb2", "TEMPONet.TEMPONet_quantized_multiprec.flatten", "TEMPONet.TEMPONet_quantized_multiprec.regr0", "TEMPONet.TEMPONet_quantized_multiprec.regr1", "TEMPONet.TEMPONet_quantized_multiprec.out_neuron", "TEMPONet.TEMPONet_quantized_multiprec.tcb01", "TEMPONet.TEMPONet_quantized_multiprec.tcb11", "TEMPONet.TEMPONet_quantized_multiprec.tcb21", "TEMPONet.TEMPONet_quantized_multiprec.tcb00", "TEMPONet.TEMPONet_quantized_multiprec.tcb10", "TEMPONet.TEMPONet_quantized_multiprec.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet_quantized.__init__": [[295, 428], ["base.BaseModel.__init__", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.ConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "TEMPONet.ConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "TEMPONet.ConvBlock", "TEMPONet.Regressor", "TEMPONet.Regressor", "models.quant_module_1d.QuantizedLinear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "share_weight", "=", "True", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TEMPONet_quantized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "2", ",", "2", ",", "1", ",", "4", ",", "4", ",", "8", ",", "8", "]", "\n", "self", ".", "rf", "=", "[", "5", ",", "5", ",", "5", ",", "9", ",", "9", ",", "17", ",", "17", "]", "\n", "self", ".", "ch", "=", "[", "32", ",", "32", ",", "64", ",", "64", ",", "64", ",", "128", ",", "128", ",", "128", ",", "128", ",", "256", ",", "128", "]", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "0", "]", ",", "\n", "abits", "=", "abits", "[", "0", "]", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "1", "]", ",", "\n", "abits", "=", "abits", "[", "1", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", "[", "2", "]", ",", "\n", "abits", "=", "abits", "[", "2", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "3", "]", ",", "\n", "abits", "=", "abits", "[", "3", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "4", "]", ",", "\n", "abits", "=", "abits", "[", "4", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", "[", "5", "]", ",", "\n", "abits", "=", "abits", "[", "5", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "6", "]", ",", "\n", "abits", "=", "abits", "[", "6", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", "[", "7", "]", ",", "\n", "abits", "=", "abits", "[", "7", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", "[", "8", "]", ",", "\n", "abits", "=", "abits", "[", "8", "]", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "wbits", "[", "9", "]", ",", "\n", "abits", "=", "abits", "[", "9", "]", "\n", ")", "\n", "\n", "# 2nd instance of regressor", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "wbits", "[", "10", "]", ",", "\n", "abits", "=", "abits", "[", "10", "]", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "outplane", "=", "1", ",", "\n", "wbits", "=", "wbits", "[", "11", "]", ",", "\n", "abits", "=", "abits", "[", "11", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet_quantized.forward": [[430, 441], ["TEMPONet.TEMPONet_quantized.cb0", "TEMPONet.TEMPONet_quantized.cb1", "TEMPONet.TEMPONet_quantized.cb2", "TEMPONet.TEMPONet_quantized.flatten", "TEMPONet.TEMPONet_quantized.regr0", "TEMPONet.TEMPONet_quantized.regr1", "TEMPONet.TEMPONet_quantized.out_neuron", "TEMPONet.TEMPONet_quantized.tcb01", "TEMPONet.TEMPONet_quantized.tcb11", "TEMPONet.TEMPONet_quantized.tcb21", "TEMPONet.TEMPONet_quantized.tcb00", "TEMPONet.TEMPONet_quantized.tcb10", "TEMPONet.TEMPONet_quantized.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.__init__": [[452, 596], ["base.BaseModel.__init__", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.ConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "TEMPONet.ConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "math.ceil", "TEMPONet.TempConvBlock", "TEMPONet.ConvBlock", "TEMPONet.Regressor", "TEMPONet.Regressor", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dataset_name", "=", "'PPG_Dalia'", ",", "dataset_args", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TEMPONet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_func", "=", "conv", "\n", "self", ".", "dil", "=", "[", "\n", "2", ",", "2", ",", "1", ",", "\n", "4", ",", "4", ",", "\n", "8", ",", "8", "\n", "]", "\n", "self", ".", "rf", "=", "[", "\n", "5", ",", "5", ",", "5", ",", "\n", "9", ",", "9", ",", "\n", "17", ",", "17", "\n", "]", "\n", "self", ".", "ch", "=", "[", "\n", "32", ",", "32", ",", "64", ",", "\n", "64", ",", "64", ",", "128", ",", "\n", "128", ",", "128", ",", "128", ",", "\n", "256", ",", "128", "\n", "]", "\n", "\n", "# 1st instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb00", "=", "ceil", "(", "self", ".", "rf", "[", "0", "]", "/", "self", ".", "dil", "[", "0", "]", ")", "\n", "self", ".", "tcb00", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "4", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "k_size", "=", "k_tcb00", ",", "\n", "dil", "=", "self", ".", "dil", "[", "0", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb00", "-", "1", ")", "*", "self", ".", "dil", "[", "0", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "True", "\n", ")", "\n", "k_tcb01", "=", "ceil", "(", "self", ".", "rf", "[", "1", "]", "/", "self", ".", "dil", "[", "1", "]", ")", "\n", "self", ".", "tcb01", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "0", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "k_size", "=", "k_tcb01", ",", "\n", "dil", "=", "self", ".", "dil", "[", "1", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb01", "-", "1", ")", "*", "self", ".", "dil", "[", "1", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_cb0", "=", "ceil", "(", "self", ".", "rf", "[", "2", "]", "/", "self", ".", "dil", "[", "2", "]", ")", "\n", "self", ".", "cb0", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "1", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "k_size", "=", "k_cb0", ",", "\n", "strd", "=", "1", ",", "\n", "pad", "=", "(", "(", "k_cb0", "-", "1", ")", "*", "self", ".", "dil", "[", "2", "]", "+", "1", ")", "//", "2", ",", "\n", "dilation", "=", "self", ".", "dil", "[", "2", "]", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 2nd instance of two TempConvBlocks and ConvBlock", "\n", "k_tcb10", "=", "ceil", "(", "self", ".", "rf", "[", "3", "]", "/", "self", ".", "dil", "[", "3", "]", ")", "\n", "self", ".", "tcb10", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "2", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "k_size", "=", "k_tcb10", ",", "\n", "dil", "=", "self", ".", "dil", "[", "3", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb10", "-", "1", ")", "*", "self", ".", "dil", "[", "3", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb11", "=", "ceil", "(", "self", ".", "rf", "[", "4", "]", "/", "self", ".", "dil", "[", "4", "]", ")", "\n", "self", ".", "tcb11", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "3", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "k_size", "=", "k_tcb11", ",", "\n", "dil", "=", "self", ".", "dil", "[", "4", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb11", "-", "1", ")", "*", "self", ".", "dil", "[", "4", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb1", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "4", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "2", ",", "\n", "pad", "=", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 3td instance of TempConvBlock and ConvBlock", "\n", "k_tcb20", "=", "ceil", "(", "self", ".", "rf", "[", "5", "]", "/", "self", ".", "dil", "[", "5", "]", ")", "\n", "self", ".", "tcb20", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "5", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "k_size", "=", "k_tcb20", ",", "\n", "dil", "=", "self", ".", "dil", "[", "5", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb20", "-", "1", ")", "*", "self", ".", "dil", "[", "5", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "k_tcb21", "=", "ceil", "(", "self", ".", "rf", "[", "6", "]", "/", "self", ".", "dil", "[", "6", "]", ")", "\n", "self", ".", "tcb21", "=", "TempConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "6", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "k_size", "=", "k_tcb21", ",", "\n", "dil", "=", "self", ".", "dil", "[", "6", "]", ",", "\n", "pad", "=", "(", "(", "k_tcb21", "-", "1", ")", "*", "self", ".", "dil", "[", "6", "]", "+", "1", ")", "//", "2", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "self", ".", "cb2", "=", "ConvBlock", "(", "conv", ",", "\n", "ch_in", "=", "self", ".", "ch", "[", "7", "]", ",", "\n", "ch_out", "=", "self", ".", "ch", "[", "8", "]", ",", "\n", "k_size", "=", "5", ",", "\n", "strd", "=", "4", ",", "\n", "pad", "=", "4", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", ",", "\n", "share_weight", "=", "share_weight", "\n", ")", "\n", "\n", "# 1st instance of regressor ", "\n", "self", ".", "regr0", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "8", "]", "*", "4", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "# 2nd instance of regressor ", "\n", "self", ".", "regr1", "=", "Regressor", "(", "\n", "ft_in", "=", "self", ".", "ch", "[", "9", "]", ",", "\n", "ft_out", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "wbits", "=", "8", ",", "\n", "abits", "=", "8", "\n", ")", "\n", "\n", "self", ".", "out_neuron", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "self", ".", "ch", "[", "10", "]", ",", "\n", "out_features", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.forward": [[598, 609], ["TEMPONet.TEMPONet.cb0", "TEMPONet.TEMPONet.cb1", "TEMPONet.TEMPONet.cb2", "TEMPONet.TEMPONet.flatten", "TEMPONet.TEMPONet.regr0", "TEMPONet.TEMPONet.regr1", "TEMPONet.TEMPONet.out_neuron", "TEMPONet.TEMPONet.tcb01", "TEMPONet.TEMPONet.tcb11", "TEMPONet.TEMPONet.tcb21", "TEMPONet.TEMPONet.tcb00", "TEMPONet.TEMPONet.tcb10", "TEMPONet.TEMPONet.tcb20"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cb0", "(", "self", ".", "tcb01", "(", "self", ".", "tcb00", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb1", "(", "self", ".", "tcb11", "(", "self", ".", "tcb10", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "cb2", "(", "self", ".", "tcb21", "(", "self", ".", "tcb20", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "flatten", "(", "1", ")", "\n", "x", "=", "self", ".", "regr0", "(", "x", ")", "\n", "x", "=", "self", ".", "regr1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "out_neuron", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss": [[610, 620], ["TEMPONet.TEMPONet.modules", "size_product[].item", "isinstance", "m.complexity_loss"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.complexity_loss"], ["", "def", "complexity_loss", "(", "self", ")", ":", "\n", "        ", "size_product", "=", "[", "]", "\n", "loss", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "loss", "+=", "m", ".", "complexity_loss", "(", ")", "\n", "size_product", "+=", "[", "m", ".", "size_product", "]", "\n", "", "", "normalizer", "=", "size_product", "[", "0", "]", ".", "item", "(", ")", "\n", "loss", "/=", "normalizer", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch": [[621, 645], ["TEMPONet.TEMPONet.modules", "isinstance", "m.fetch_best_arch", "layer_arch.keys", "best_arch[].append"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch"], ["", "def", "fetch_best_arch", "(", "self", ")", ":", "\n", "        ", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", "=", "0", ",", "0", ",", "0", "\n", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "=", "0", ",", "0", ",", "0", "\n", "layer_idx", "=", "0", "\n", "best_arch", "=", "None", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "self", ".", "conv_func", ")", ":", "\n", "                ", "layer_arch", ",", "bitops", ",", "bita", ",", "bitw", ",", "mixbitops", ",", "mixbita", ",", "mixbitw", "=", "m", ".", "fetch_best_arch", "(", "layer_idx", ")", "\n", "if", "best_arch", "is", "None", ":", "\n", "                    ", "best_arch", "=", "layer_arch", "\n", "", "else", ":", "\n", "                    ", "for", "key", "in", "layer_arch", ".", "keys", "(", ")", ":", "\n", "                        ", "if", "key", "not", "in", "best_arch", ":", "\n", "                            ", "best_arch", "[", "key", "]", "=", "layer_arch", "[", "key", "]", "\n", "", "else", ":", "\n", "                            ", "best_arch", "[", "key", "]", ".", "append", "(", "layer_arch", "[", "key", "]", "[", "0", "]", ")", "\n", "", "", "", "sum_bitops", "+=", "bitops", "\n", "sum_bita", "+=", "bita", "\n", "sum_bitw", "+=", "bitw", "\n", "sum_mixbitops", "+=", "mixbitops", "\n", "sum_mixbita", "+=", "mixbita", "\n", "sum_mixbitw", "+=", "mixbitw", "\n", "layer_idx", "+=", "1", "\n", "", "", "return", "best_arch", ",", "sum_bitops", ",", "sum_bita", ",", "sum_bitw", ",", "sum_mixbitops", ",", "sum_mixbita", ",", "sum_mixbitw", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempConvBlock.__init__": [[661, 679], ["base.BaseModel.__init__", "conv", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TempConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tcn0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempConvBlock.forward": [[680, 683], ["TEMPONet.TempConvBlock.bn0", "TEMPONet.TempConvBlock.tcn0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "self", ".", "tcn0", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.ConvBlock.__init__": [[698, 721], ["base.BaseModel.__init__", "conv", "torch.AvgPool1d", "torch.AvgPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "ch_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.ConvBlock.forward": [[722, 731], ["TEMPONet.ConvBlock.bn0", "TEMPONet.ConvBlock.pool0", "TEMPONet.ConvBlock.conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "pool0", "(", "\n", "self", ".", "conv0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.Regressor.__init__": [[742, 756], ["base.BaseModel.__init__", "models.quant_module_1d.QuantizedLinear", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "ft_in", ",", "ft_out", ",", "wbits", ",", "abits", ")", ":", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ft_in", "=", "ft_in", "\n", "self", ".", "ft_out", "=", "ft_out", "\n", "\n", "self", ".", "fc0", "=", "qm", ".", "QuantizedLinear", "(", "\n", "inplane", "=", "ft_in", ",", "\n", "outplane", "=", "ft_out", ",", "\n", "wbits", "=", "wbits", ",", "\n", "abits", "=", "abits", "\n", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "\n", "num_features", "=", "ft_out", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.Regressor.forward": [[758, 765], ["TEMPONet.Regressor.bn0", "TEMPONet.Regressor.fc0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn0", "(", "\n", "self", ".", "fc0", "(", "\n", "x", "\n", ")", "\n", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.Chomp1d.__init__": [[772, 775], ["base.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "chomp_size", ")", ":", "\n", "        ", "super", "(", "Chomp1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chomp_size", "=", "chomp_size", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.Chomp1d.forward": [[776, 778], ["x[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", "-", "self", ".", "chomp_size", "]", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempConvBlock_multiprec.__init__": [[796, 842], ["base.BaseModel.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "conv", "conv", "conv", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "dil", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "first_layer", "=", "False", ")", ":", "\n", "        ", "super", "(", "TempConvBlock_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ch_out", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "0", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "2", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "", "if", "ch_out", "[", "1", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn1", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "1", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "4", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "", "if", "ch_out", "[", "2", "]", "!=", "0", ":", "\n", "            ", "self", ".", "tcn2", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "2", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "dilation", "=", "dil", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "8", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "first_layer", "\n", ")", "\n", "\n", "", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "sum", "(", "ch_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempConvBlock_multiprec.forward": [[843, 860], ["TEMPONet.TempConvBlock_multiprec.bn0", "hasattr", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TEMPONet.TempConvBlock_multiprec.tcn0", "TEMPONet.TempConvBlock_multiprec.tcn1", "TEMPONet.TempConvBlock_multiprec.tcn2", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TEMPONet.TempConvBlock_multiprec.tcn0", "TEMPONet.TempConvBlock_multiprec.tcn1", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "TEMPONet.TempConvBlock_multiprec.tcn0", "TEMPONet.TempConvBlock_multiprec.tcn2", "TEMPONet.TempConvBlock_multiprec.tcn0", "hasattr", "TEMPONet.TempConvBlock_multiprec.tcn1", "TEMPONet.TempConvBlock_multiprec.tcn2", "TEMPONet.TempConvBlock_multiprec.tcn1", "hasattr", "TEMPONet.TempConvBlock_multiprec.tcn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn1'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn1", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn1'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn1", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn0", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn1'", ")", "and", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "tcn1", "(", "x", ")", ",", "self", ".", "tcn2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn0'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn0", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn1'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn1", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'tcn2'", ")", ":", "\n", "            ", "x", "=", "self", ".", "tcn2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.ConvBlock_multiprec.__init__": [[877, 930], ["base.BaseModel.__init__", "torch.AvgPool1d", "torch.AvgPool1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "conv", "conv", "conv", "sum"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "conv", ",", "ch_in", ",", "ch_out", ",", "k_size", ",", "strd", ",", "pad", ",", "wbits", ",", "abits", ",", "share_weight", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock_multiprec", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ch_out", "[", "0", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv0", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "0", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "if", "ch_out", "[", "1", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv1", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "1", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "if", "ch_out", "[", "2", "]", "!=", "0", ":", "\n", "            ", "self", ".", "conv2", "=", "conv", "(", "\n", "ch_in", ",", "\n", "ch_out", "[", "2", "]", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "stride", "=", "strd", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "pad", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "abits", "=", "abits", ",", "\n", "wbits", "=", "wbits", ",", "\n", "share_weight", "=", "share_weight", ",", "\n", "first_layer", "=", "False", "\n", ")", "\n", "", "self", ".", "pool0", "=", "nn", ".", "AvgPool1d", "(", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm1d", "(", "sum", "(", "ch_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.ConvBlock_multiprec.forward": [[931, 948], ["TEMPONet.ConvBlock_multiprec.bn0", "hasattr", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TEMPONet.ConvBlock_multiprec.pool0", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TEMPONet.ConvBlock_multiprec.conv0", "TEMPONet.ConvBlock_multiprec.conv1", "TEMPONet.ConvBlock_multiprec.conv2", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TEMPONet.ConvBlock_multiprec.conv0", "TEMPONet.ConvBlock_multiprec.conv1", "hasattr", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hasattr", "TEMPONet.ConvBlock_multiprec.conv0", "TEMPONet.ConvBlock_multiprec.conv2", "TEMPONet.ConvBlock_multiprec.conv0", "hasattr", "TEMPONet.ConvBlock_multiprec.conv1", "TEMPONet.ConvBlock_multiprec.conv2", "TEMPONet.ConvBlock_multiprec.conv1", "hasattr", "TEMPONet.ConvBlock_multiprec.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv1'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv1'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv1", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv0", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv1'", ")", "and", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "self", ".", "conv1", "(", "x", ")", ",", "self", ".", "conv2", "(", "x", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv0'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv0", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv1'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "'conv2'", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "bn0", "(", "self", ".", "pool0", "(", "x", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_multiprec_big": [[35, 58], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TEMPONet.TEMPONet_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["def", "TempoNet_multiprec_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTempoNet_layer_248_multiprec3500.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "256", ")", "\n", "channels", ".", "append", "(", "128", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TEMPONet_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_multiprec_medium": [[58, 81], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TEMPONet.TEMPONet_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TempoNet_multiprec_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTempoNet_layer_248_multiprec350.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "256", ")", "\n", "channels", ".", "append", "(", "128", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TEMPONet_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_multiprec_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_multiprec_small": [[81, 104], ["enumerate", "enumerate", "channels.append", "channels.append", "contents[].append", "contents[].append", "contents[].append", "TEMPONet.TEMPONet_quantized_multiprec", "open", "json.loads", "ch_layer.append", "ch_layer.append", "ch_layer.append", "channels.append", "j.read", "sum", "sum", "sum", "np.asarray", "np.asarray", "np.asarray"], "function", ["None"], ["", "def", "TempoNet_multiprec_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "json_file_path", "=", "'mix_archs/architecture_mixTempoNet_layer_248_multiprec35.json'", "\n", "with", "open", "(", "json_file_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "contents", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_activ'", "]", ")", ":", "\n", "        ", "if", "contents", "[", "'best_activ'", "]", "[", "i", "]", "==", "32", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "contents", "[", "'best_activ'", "]", "[", "i", "]", "=", "2", "**", "(", "val", "+", "1", ")", "\n", "", "", "import", "numpy", "as", "np", "\n", "channels", "=", "[", "]", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "contents", "[", "'best_weight'", "]", ")", ":", "\n", "        ", "ch_layer", "=", "[", "]", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "0", ")", ")", "# 2bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "1", ")", ")", "# 4bits", "\n", "ch_layer", ".", "append", "(", "sum", "(", "np", ".", "asarray", "(", "val", ")", "==", "2", ")", ")", "# 8bits", "\n", "channels", ".", "append", "(", "ch_layer", ")", "\n", "", "channels", ".", "append", "(", "256", ")", "\n", "channels", ".", "append", "(", "128", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "contents", "[", "'best_activ'", "]", ".", "append", "(", "8", ")", "\n", "return", "TEMPONet_quantized_multiprec", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "contents", "[", "'best_activ'", "]", ",", "wbits", "=", "[", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", ",", "32", "]", ",", "channels", "=", "channels", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.mixTempoNet_layer_248_layers": [[105, 107], ["TEMPONet.TEMPONet"], "function", ["None"], ["", "def", "mixTempoNet_layer_248_layers", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet", "(", "qm", ".", "MixActivChanConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "mixTempoNet_layer_248_multiprec", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.mixTempoNet_layer_248_multiprec": [[107, 109], ["TEMPONet.TEMPONet"], "function", ["None"], ["", "def", "mixTempoNet_layer_248_multiprec", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet", "(", "qm", ".", "MultiPrecActivConv1d", ",", "wbits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "abits", "=", "[", "2", ",", "4", ",", "8", "]", ",", "share_weight", "=", "True", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_16", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_16": [[109, 111], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_16", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", "]", ",", "wbits", "=", "[", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", ",", "16", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_8", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_8": [[111, 113], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_8", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_4", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_4": [[113, 115], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "wbits", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_2", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_2": [[115, 117], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "wbits", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_big", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_big": [[117, 119], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_big", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "8", ",", "4", ",", "8", ",", "8", ",", "8", ",", "8", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_medium", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_medium": [[119, 121], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_medium", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "8", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "**", "kwargs", ")", "\n", "", "def", "TempoNet_layer_quantized_small", "(", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TempoNet_layer_quantized_small": [[121, 123], ["TEMPONet.TEMPONet_quantized"], "function", ["None"], ["", "def", "TempoNet_layer_quantized_small", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "TEMPONet_quantized", "(", "qm", ".", "QuantizedChanConv1d", ",", "abits", "=", "[", "8", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "4", ",", "2", ",", "4", ",", "32", ",", "32", ",", "32", "]", ",", "wbits", "=", "[", "4", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "32", ",", "32", ",", "32", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataLoader.__init__": [[37, 46], ["DaliaDataLoader.DaliaDataset", "base.BaseDataLoader.__init__", "base.BaseDataLoader.__init__", "DaliaDataLoader.DaliaDataLoader.dataset.__len__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.__len__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "kfold_it", "=", "None", ",", "set_", "=", "'train'", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "dataset", "=", "DaliaDataset", "(", "data_dir", ",", "kfold_it", ",", "set_", ")", "\n", "\n", "if", "set_", "==", "'test'", ":", "\n", "# The test set does not need to be batched, thus the batch size is the whole dataset length", "\n", "            ", "super", "(", "DaliaDataLoader", ",", "self", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "self", ".", "dataset", ".", "__len__", "(", ")", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "DaliaDataLoader", ",", "self", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.__init__": [[55, 77], ["torch.utils.data.Dataset.__init__", "os.path.exists", "DaliaDataLoader.DaliaDataset._collect_data", "DaliaDataLoader.DaliaDataset._preprocess_data", "DaliaDataLoader.DaliaDataset._kfold_split", "open", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._collect_data", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._preprocess_data", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._kfold_split"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "kfold_it", "=", "None", ",", "set_", "=", "'train'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "DaliaDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "(", "data_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "data_dir", "+", "'slimmed_dalia.pkl'", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "self", ".", "_collect_data", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "_X", ",", "self", ".", "_y", ",", "self", ".", "_groups", "=", "self", ".", "_preprocess_data", "(", "self", ".", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "data_dir", "+", "'/slimmed_dalia.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "self", ".", "dataset", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "_groups", "=", "self", ".", "dataset", "[", "'groups'", "]", "\n", "self", ".", "_X", "=", "self", ".", "dataset", "[", "'X'", "]", "\n", "self", ".", "_y", "=", "self", ".", "dataset", "[", "'y'", "]", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "kfold_it", "=", "kfold_it", "\n", "self", ".", "set_", "=", "set_", "\n", "self", ".", "test_subj", "=", "0", "\n", "\n", "if", "kfold_it", "==", "None", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "y", "=", "self", ".", "_X", ",", "self", ".", "_y", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "y", "=", "self", ".", "_kfold_split", "(", "self", ".", "kfold_it", ",", "self", ".", "set_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.get_test_subj": [[78, 80], ["None"], "methods", ["None"], ["", "", "def", "get_test_subj", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "test_subj", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset.__getitem__": [[84, 97], ["torch.is_tensor", "idx.tolist.tolist.tolist", "DaliaDataLoader.DaliaDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "sample", "=", "{", "\n", "'data'", ":", "self", ".", "X", "[", "idx", "]", ",", "\n", "'target'", ":", "self", ".", "y", "[", "idx", "]", "\n", "}", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._collect_data": [[98, 117], ["random.seed", "dict", "list", "random.sample", "range", "len", "[].astype", "[].astype", "subject[].astype", "open", "pickle.load", "str", "str"], "methods", ["None"], ["", "def", "_collect_data", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "random", ".", "seed", "(", "42", ")", "\n", "\n", "dataset", "=", "dict", "(", ")", "\n", "num", "=", "list", "(", "range", "(", "1", ",", "15", "+", "1", ")", ")", "\n", "session_list", "=", "random", ".", "sample", "(", "num", ",", "len", "(", "num", ")", ")", "\n", "for", "subj", "in", "session_list", ":", "\n", "# data_dir = '/space/risso/PPG_Dalia/PPG_FieldStudy'", "\n", "            ", "with", "open", "(", "data_dir", "/", "(", "'S'", "+", "str", "(", "subj", ")", ")", "/", "(", "'S'", "+", "str", "(", "subj", ")", "+", "'.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "subject", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "ppg", "=", "subject", "[", "'signal'", "]", "[", "'wrist'", "]", "[", "'BVP'", "]", "[", ":", ":", "2", "]", ".", "astype", "(", "'float32'", ")", "\n", "acc", "=", "subject", "[", "'signal'", "]", "[", "'wrist'", "]", "[", "'ACC'", "]", ".", "astype", "(", "'float32'", ")", "\n", "target", "=", "subject", "[", "'label'", "]", ".", "astype", "(", "'float32'", ")", "\n", "dataset", "[", "subj", "]", "=", "{", "\n", "'ppg'", ":", "ppg", ",", "\n", "'acc'", ":", "acc", ",", "\n", "'target'", ":", "target", "\n", "}", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._preprocess_data": [[118, 174], ["list", "list", "list", "numpy.hstack", "numpy.vstack", "numpy.reshape", "numpy.concatenate", "numpy.moveaxis", "numpy.hstack.append", "list.append", "list.append", "numpy.vstack", "open", "pickle.dump", "numpy.full", "numpy.reshape", "skimage.util.shape.view_as_windows"], "methods", ["None"], ["", "def", "_preprocess_data", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "\"\"\"\n        Process data with a sliding window of size 'time_window' and overlap 'overlap'\n        \"\"\"", "\n", "fs", "=", "32", "\n", "time_window", "=", "8", "\n", "overlap", "=", "2", "\n", "\n", "groups", "=", "list", "(", ")", "\n", "signals", "=", "list", "(", ")", "\n", "targets", "=", "list", "(", ")", "\n", "\n", "for", "k", "in", "dataset", ":", "\n", "            ", "sig", "=", "np", ".", "concatenate", "(", "\n", "(", "dataset", "[", "k", "]", "[", "'ppg'", "]", ",", "dataset", "[", "k", "]", "[", "'acc'", "]", ")", ",", "\n", "axis", "=", "1", "\n", ")", "\n", "sig", "=", "np", ".", "moveaxis", "(", "\n", "view_as_windows", "(", "\n", "sig", ",", "\n", "(", "fs", "*", "time_window", ",", "4", ")", ",", "\n", "fs", "*", "overlap", "\n", ")", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "\n", "1", ",", "\n", "2", "\n", ")", "\n", "''' \n            # Normalization\n            scalers = {}\n            for i in range(sig.shape[1]):\n                scalers[i] = StandardScaler()\n                sig[:, i, :] = scalers[i].fit_transform(sig[:, i, :])\n            '''", "\n", "groups", ".", "append", "(", "np", ".", "full", "(", "sig", ".", "shape", "[", "0", "]", ",", "k", ")", ")", "\n", "signals", ".", "append", "(", "sig", ")", "\n", "targets", ".", "append", "(", "np", ".", "reshape", "(", "\n", "dataset", "[", "k", "]", "[", "'target'", "]", ",", "\n", "(", "dataset", "[", "k", "]", "[", "'target'", "]", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", ")", ")", "\n", "\n", "", "groups", "=", "np", ".", "hstack", "(", "groups", ")", "\n", "X", "=", "np", ".", "vstack", "(", "signals", ")", "\n", "y", "=", "np", ".", "reshape", "(", "\n", "np", ".", "vstack", "(", "targets", ")", ",", "\n", "(", "-", "1", ",", "1", ")", "\n", ")", "\n", "\n", "dataset", "=", "{", "\n", "'X'", ":", "X", ",", "\n", "'y'", ":", "y", ",", "\n", "'groups'", ":", "groups", "\n", "}", "\n", "with", "open", "(", "self", ".", "data_dir", "/", "'slimmed_dalia.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "dataset", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "return", "X", ",", "y", ",", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._kfold_split": [[175, 206], ["DaliaDataLoader.DaliaDataset._rndgroup_kfold", "sklearn.model_selection.LeaveOneGroupOut", "sklearn.model_selection.LeaveOneGroupOut.split"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._rndgroup_kfold"], ["", "def", "_kfold_split", "(", "self", ",", "kfold_it", ",", "set_", ")", ":", "\n", "        ", "\"\"\"\n        Return the training set for the actual fold of the cross-validation scheme\n        \"\"\"", "\n", "n", "=", "4", "\n", "subjects", "=", "15", "\n", "indices", ",", "_", "=", "self", ".", "_rndgroup_kfold", "(", "self", ".", "_groups", ",", "n", ")", "\n", "\n", "fold", "=", "kfold_it", "//", "n", "\n", "\n", "if", "set_", "==", "'train'", ":", "\n", "            ", "train_index", ",", "_", "=", "indices", "[", "fold", "]", "\n", "return", "self", ".", "_X", "[", "train_index", "]", ",", "self", ".", "_y", "[", "train_index", "]", "\n", "", "elif", "set_", "==", "'validation'", "or", "set_", "==", "'test'", ":", "\n", "            ", "_", ",", "test_val_index", "=", "indices", "[", "fold", "]", "\n", "logo", "=", "LeaveOneGroupOut", "(", ")", "\n", "j", "=", "0", "\n", "X_val_test", "=", "self", ".", "_X", "[", "test_val_index", "]", "\n", "y_val_test", "=", "self", ".", "_y", "[", "test_val_index", "]", "\n", "for", "validate_index", ",", "test_index", "in", "logo", ".", "split", "(", "X_val_test", ",", "y_val_test", ",", "self", ".", "_groups", "[", "test_val_index", "]", ")", ":", "\n", "\n", "                ", "self", ".", "test_subj", "=", "self", ".", "_groups", "[", "test_val_index", "]", "[", "test_index", "]", "[", "0", "]", "\n", "\n", "if", "j", "==", "kfold_it", "%", "n", ":", "\n", "                    ", "if", "set_", "==", "'validation'", ":", "\n", "                        ", "return", "X_val_test", "[", "validate_index", "]", ",", "y_val_test", "[", "validate_index", "]", "\n", "", "if", "set_", "==", "'test'", ":", "\n", "                        ", "return", "X_val_test", "[", "test_index", "]", ",", "y_val_test", "[", "test_index", "]", "\n", "", "", "j", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.data_loader.DaliaDataLoader.DaliaDataset._rndgroup_kfold": [[208, 229], ["pandas.Series", "numpy.arange", "numpy.unique", "numpy.random.RandomState().shuffle", "list", "dict", "numpy.array_split", "len", "pandas.Series.isin", "list.append", "numpy.random.RandomState"], "methods", ["None"], ["", "", "def", "_rndgroup_kfold", "(", "self", ",", "groups", ",", "n", ",", "seed", "=", "35", ")", ":", "\n", "        ", "\"\"\"\n        Random analogous of sklearn.model_selection.GroupKFold.split.\n\n        :return: list of (train, test) indices\n        \"\"\"", "\n", "groups", "=", "pd", ".", "Series", "(", "groups", ")", "\n", "ix", "=", "np", ".", "arange", "(", "len", "(", "groups", ")", ")", "\n", "unique", "=", "np", ".", "unique", "(", "groups", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "shuffle", "(", "unique", ")", "\n", "indices", "=", "list", "(", ")", "\n", "split_dict", "=", "dict", "(", ")", "\n", "i", "=", "0", "\n", "for", "split", "in", "np", ".", "array_split", "(", "unique", ",", "n", ")", ":", "\n", "            ", "split_dict", "[", "i", "]", "=", "split", "\n", "i", "+=", "1", "\n", "mask", "=", "groups", ".", "isin", "(", "split", ")", "\n", "train", ",", "test", "=", "ix", "[", "~", "mask", "]", ",", "ix", "[", "mask", "]", "\n", "indices", ".", "append", "(", "(", "train", ",", "test", ")", ")", "\n", "\n", "", "return", "indices", ",", "split_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.__init__": [[25, 55], ["datetime.datetime.datetime.now", "str", "logger.warning", "importlib.import_module().SummaryWriter", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enabled", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "self", ".", "selected_module", "=", "\"\"", "\n", "\n", "if", "enabled", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "\n", "# Retrieve visualization writer", "\n", "succeeded", "=", "False", "\n", "for", "module", "in", "[", "\"torch.utils.tensorboard\"", ",", "\"tensorboardX\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "module", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "succeeded", "=", "True", "\n", "break", "\n", "", "except", "ImportError", ":", "\n", "                    ", "succeeded", "=", "False", "\n", "", "self", ".", "selected_module", "=", "module", "\n", "\n", "", "if", "not", "succeeded", ":", "\n", "                ", "message", "=", "\"Warning: visualization (Tensorboard) is configured to use, but currently not installed on this machine. Please install TensorboardX with 'pip install tensorboardx', upgrade PyTorch to version >= 1.1 to use 'torch.utils.tensorboard' or turn off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "{", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", ",", "'add_graph'", "\n", "}", "\n", "self", ".", "tag_mode_exceptions", "=", "{", "'add_histogram'", ",", "'add_embedding'", "}", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.set_step": [[56, 65], ["datetime.datetime.datetime.now", "visualization.TensorboardWriter.add_scalar", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "timer", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ".", "total_seconds", "(", ")", ")", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.__getattr__": [[66, 90], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.visualization.TensorboardWriter.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode (train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object '{}' has no attribute '{}'\"", ".", "format", "(", "self", ".", "selected_module", ",", "name", ")", ")", "\n", "", "return", "attr", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.logger.logger.setup_logging": [[26, 42], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.__init__": [[30, 71], ["config.get_logger", "cfg_trainer.get", "logger.TensorboardWriter", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.precision_search.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "model_float", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "optimizer_float", ",", "arch_optimizer", ",", "finetuning", ",", "config", ",", "args_input", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "args", "=", "args_input", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model_float", "=", "model_float", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "metric_ftns", "=", "metric_ftns", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "optimizer_float", "=", "optimizer_float", "\n", "self", ".", "arch_optimizer", "=", "arch_optimizer", "\n", "self", ".", "finetuning", "=", "finetuning", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "if", "self", ".", "early_stop", "<=", "0", ":", "\n", "                ", "self", ".", "early_stop", "=", "inf", "\n", "\n", "", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboard'", "]", ")", "\n", "\n", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._train_epoch": [[72, 80], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ",", "prec_float", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer.train": [[81, 190], ["print", "range", "print", "range", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.model_float.named_parameters", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer.model.named_parameters", "print", "hasattr", "print", "print", "best_arch.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.info", "name_float.split", "base_trainer.BaseTrainer.model.module.fetch_best_arch", "base_trainer.BaseTrainer.model.fetch_best_arch", "print", "str", "open", "np.asarray().astype().tolist", "json.dump", "str", "base_trainer.BaseTrainer.logger.warning", "int", "array_weights.astype().tolist", "str", "base_trainer.BaseTrainer.logger.warning", "np.asarray().astype", "array_weights.astype", "np.asarray"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.utils.utils.MetricTracker.update", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.model.TEMPONet.TEMPONet.fetch_best_arch"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "if", "self", ".", "finetuning", "==", "'True'", ":", "\n", "            ", "print", "(", "\"Float Training\"", ")", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "                ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ",", "self", ".", "finetuning", ")", "\n", "\n", "# save logged informations into log dicts", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "# print logged information to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "'{:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                    ", "try", ":", "\n", "# check whether the model performance improved or not, according to specified metric (mnt_metric)", "\n", "                        ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "\n", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                        ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found.\"", "\n", "\"Model performance monitoring is disabled\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs.\"", "\n", "\"Training Stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "#for name_float, param_float, name, param in zip(self.model_float.named_parameters(), self.model.named_parameters()):", "\n", "", "", "state_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "for", "name_float", ",", "param_float", "in", "self", ".", "model_float", ".", "named_parameters", "(", ")", ":", "\n", "                ", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "name_float_s", "=", "name_float", ".", "split", "(", "'.'", ")", "\n", "if", "name", "==", "name_float", "or", "name", "==", "''", ".", "join", "(", "name_float_s", "[", ":", "-", "1", "]", ")", "+", "'.linear.'", "+", "name_float_s", "[", "-", "1", "]", "or", "name", "==", "''", ".", "join", "(", "name_float_s", "[", ":", "-", "1", "]", ")", "+", "'.quantized_weight.'", "+", "name_float_s", "[", "-", "1", "]", ":", "\n", "                        ", "state_dict", "[", "name", "]", "=", "param_float", "\n", "", "", "", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "", "not_improved_count", "=", "0", "\n", "print", "(", "\"Quantized Training\"", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ",", "'False'", ")", "\n", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "                ", "print", "(", "'========= architecture ========='", ")", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "                    ", "best_arch", ",", "bitops", ",", "bita", ",", "bitw", ",", "mixbitops", ",", "mixbita", ",", "mixbitw", "=", "self", ".", "model", ".", "module", ".", "fetch_best_arch", "(", ")", "\n", "", "else", ":", "\n", "                    ", "best_arch", ",", "bitops", ",", "bita", ",", "bitw", ",", "mixbitops", ",", "mixbita", ",", "mixbitw", "=", "self", ".", "model", ".", "fetch_best_arch", "(", ")", "\n", "", "print", "(", "'best model with bitops: {:.3f}M, bita: {:.3f}K, bitw: {:.3f}M'", ".", "format", "(", "\n", "bitops", ",", "bita", ",", "bitw", ")", ")", "\n", "print", "(", "'expected model with bitops: {:.3f}M, bita: {:.3f}K, bitw: {:.3f}M'", ".", "format", "(", "\n", "mixbitops", ",", "mixbita", ",", "mixbitw", ")", ")", "\n", "for", "key", ",", "value", "in", "best_arch", ".", "items", "(", ")", ":", "\n", "                    ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n", "# save logged informations into log dicts", "\n", "", "", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "\n", "# print logged information to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'{:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether the model performance improved or not, according to specified metric (mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found.\"", "\n", "\"Model performance monitoring is disabled\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "", "if", "improved", ":", "\n", "                ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                ", "not_improved_count", "+=", "1", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs.\"", "\n", "\"Training Stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "                    ", "import", "json", "\n", "complexity", "=", "str", "(", "int", "(", "self", ".", "args", ".", "complexity_decay", "*", "1000000", ")", ")", "\n", "a_file", "=", "open", "(", "\"mix_archs/architecture_\"", "+", "self", ".", "args", ".", "arch", "+", "complexity", "+", "\".json\"", ",", "\"w\"", ")", "\n", "best_arch", "[", "'best_weight'", "]", "=", "[", "array_weights", ".", "astype", "(", "'int'", ")", ".", "tolist", "(", ")", "for", "array_weights", "in", "best_arch", "[", "'best_weight'", "]", "]", "\n", "import", "numpy", "as", "np", "\n", "best_arch", "[", "'best_activ'", "]", "=", "np", ".", "asarray", "(", "best_arch", "[", "'best_activ'", "]", ")", ".", "astype", "(", "'int'", ")", ".", "tolist", "(", ")", "\n", "json", ".", "dump", "(", "best_arch", ",", "a_file", ")", "\n", "", "break", "\n", "\n", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", "or", "best", "==", "True", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._save_checkpoint": [[191, 225], ["str", "torch.save", "base_trainer.BaseTrainer.logger.info", "type", "str", "torch.save", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "base_trainer.BaseTrainer.arch_optimizer.state_dict", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict"], "methods", ["None"], ["", "", "", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "if", "self", ".", "arch_optimizer", "!=", "False", ":", "\n", "            ", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'arch_optimizer'", ":", "self", ".", "arch_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "", "else", ":", "\n", "            ", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "save_best", ":", "\n", "            ", "best_path", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: model_best.pth ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_trainer.BaseTrainer._resume_checkpoint": [[226, 247], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict", "base_trainer.BaseTrainer.arch_optimizer.load_state_dict"], "methods", ["None"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "self", ".", "arch_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'arch_optimizer'", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__": [[30, 47], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader._split_sampler": [[48, 75], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than the entire dataset\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_data_loader.BaseDataLoader.split_validation": [[76, 81], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_model.BaseModel.forward": [[28, 36], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n        \n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_model.BaseModel.__str__": [[37, 44], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.embeddedml-edagroup_q-ppg.base.base_model.BaseModel.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "\n"]]}