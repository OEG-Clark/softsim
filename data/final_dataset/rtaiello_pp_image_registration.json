{"home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_linear.run": [[26, 152], ["hydra.utils.log.info", "hydra.utils.log.info", "print", "hydra.utils.call", "hydra.utils.log.info", "list", "list", "list", "list", "list", "cfg.data.iterations.items", "hydra.utils.log.info", "os.makedirs", "numpy.save", "matplotlib.image.imsave", "hydra.utils.log.info", "hydra.utils.log.info", "wandb.init", "hydra.utils.log.info", "src.registers.abstract_register.RegisterData().down_sample", "hydra.utils.instantiate", "register.execute", "iterations.append", "times_party_1.append", "times_party_2.append", "megabytes_party_1.append", "megabytes_party_2.append", "hydra.utils.log.info", "numpy.load", "src.common.utils.mse", "hydra.utils.log.info", "src.common.utils.log_statistics", "src.common.utils.save_resources", "wandb.init.finish", "src.models.affine.Affine.scale", "len", "src.common.utils.get_name", "src.common.utils.get_group", "src.registers.abstract_register.RegisterData", "sum", "sum", "sum", "sum"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.down_sample", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.execute", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.mse", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.log_statistics", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.save_resources", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.scale", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_name", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_group"], ["def", "run", "(", "cfg", ":", "DictConfig", ")", "->", "None", ":", "\n", "    ", "template_path", ":", "str", "=", "cfg", ".", "data", ".", "template", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_linear.py - Loading template: {template_path}\"", ")", "\n", "\n", "image_path", ":", "str", "=", "cfg", ".", "data", ".", "moving", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_linear.py - Loading moving: {image_path}\"", ")", "\n", "print", "(", "cfg", ".", "data", ".", "preprocessing", ")", "\n", "image", ",", "template", "=", "hydra", ".", "utils", ".", "call", "(", "\n", "cfg", ".", "data", ".", "preprocessing", ",", "image_path", ",", "template_path", "\n", ")", "\n", "\n", "scale", ":", "float", "=", "cfg", ".", "data", ".", "scale", "\n", "\n", "template", "=", "template", "*", "scale", "\n", "image", "=", "image", "*", "scale", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_linear.py - Instantiating <{cfg.register._target_}>\"", ")", "\n", "logger", "=", "None", "\n", "if", "not", "cfg", ".", "logging", ".", "debug", ":", "\n", "        ", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_linear.py - Instantiating WANDB Logger\"", ")", "\n", "logger", "=", "wandb", ".", "init", "(", "\n", "**", "cfg", ".", "logging", ".", "wandb", ",", "\n", "project", "=", "\"affine\"", ",", "\n", "name", "=", "get_name", "(", "cfg", ")", ",", "\n", "group", "=", "get_group", "(", "cfg", ")", ",", "\n", ")", "\n", "", "p_hat", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "down_sampled_image", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "step", ":", "Optional", "[", "OptStep", "]", "=", "None", "\n", "\n", "iterations", ":", "List", "[", "int", "]", "=", "list", "(", ")", "\n", "times_party_1", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "times_party_2", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "megabytes_party_1", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "megabytes_party_2", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "\n", "for", "item", "in", "cfg", ".", "data", ".", "iterations", ".", "items", "(", ")", ":", "\n", "        ", "factor", "=", "item", "[", "0", "]", "\n", "cfg", ".", "register", ".", "max_iter", "=", "(", "\n", "item", "[", "1", "]", "[", "\"max_iter\"", "]", "if", "item", "[", "1", "]", "[", "\"max_iter\"", "]", "!=", "-", "1", "else", "cfg", ".", "register", ".", "max_iter", "\n", ")", "\n", "cfg", ".", "register", ".", "max_bad", "=", "(", "\n", "item", "[", "1", "]", "[", "\"max_bad\"", "]", "if", "item", "[", "1", "]", "[", "\"max_bad\"", "]", "!=", "-", "1", "else", "cfg", ".", "register", ".", "max_bad", "\n", ")", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_linear.py  - Running <{cfg.model._target_}> - Factor {factor}\"", "\n", ")", "\n", "\n", "if", "p_hat", "is", "not", "None", ":", "\n", "            ", "scale", "=", "down_sampled_image", ".", "coords", ".", "spacing", "/", "factor", "\n", "p_hat", "=", "Affine", ".", "scale", "(", "p_hat", ",", "scale", ")", "\n", "\n", "", "down_sampled_image", ":", "np", ".", "ndarray", "=", "template", "\n", "down_sampled_image", ":", "RegisterData", "=", "RegisterData", "(", "down_sampled_image", ")", ".", "down_sample", "(", "\n", "factor", "\n", ")", "\n", "\n", "register", ":", "AbstractRegister", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "cfg", ".", "register", ",", "\n", "image", "=", "image", ",", "\n", "template", "=", "template", ",", "\n", "model", "=", "cfg", ".", "model", ",", "\n", "metric", "=", "cfg", ".", "metric", ",", "\n", "sampler", "=", "cfg", ".", "sampler", ",", "\n", "joint_computation", "=", "cfg", ".", "joint_computation", ",", "\n", "logger", "=", "logger", ",", "\n", "down_sample_factor", "=", "factor", ",", "\n", "_recursive_", "=", "False", ",", "\n", ")", "\n", "\n", "(", "\n", "step", ",", "\n", "searches", ",", "\n", "current_time_party_1", ",", "\n", "current_time_party_2", ",", "\n", "current_megabytes_party_1", ",", "\n", "current_megabytes_party_2", ",", "\n", ")", "=", "register", ".", "execute", "(", "params", "=", "p_hat", ",", "verbose", "=", "cfg", ".", "logging", ".", "debug", ")", "\n", "iterations", ".", "append", "(", "len", "(", "searches", ")", ")", "\n", "times_party_1", ".", "append", "(", "current_time_party_1", ")", "\n", "times_party_2", ".", "append", "(", "current_time_party_2", ")", "\n", "megabytes_party_1", ".", "append", "(", "current_megabytes_party_1", ")", "\n", "megabytes_party_2", ".", "append", "(", "current_megabytes_party_2", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_linear.py  - Finished <{cfg.model._target_}> - Factor {factor}\"", "\n", ")", "\n", "p_hat", "=", "step", ".", "params", "\n", "", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_linear.py - Writing warped image: {cfg.data.dir}/warped_affine.png\"", "\n", ")", "\n", "os", ".", "makedirs", "(", "f\"{cfg.data.dir}/{cfg.joint_computation.name}/{cfg.register.name}\"", ",", "exist_ok", "=", "True", ")", "\n", "np", ".", "save", "(", "f\"{cfg.data.dir}/{cfg.joint_computation.name}/{cfg.register.name}/displacement.npy\"", ",", "step", ".", "displacement", ")", "\n", "imsave", "(", "\n", "f\"{cfg.data.dir}/{cfg.joint_computation.name}/{cfg.register.name}/warped_affine.png\"", ",", "\n", "step", ".", "warped_image", "/", "scale", ",", "\n", "cmap", "=", "\"gray\"", ",", "\n", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_linear.py  \\n\"", "\n", "f\"Total Time - Party 1 (s): {sum(times_party_1)}  - Total Time - Party 2 (s): {sum(times_party_2)}  \\n \"", "\n", "f\"Total Comm - Party 1 (MB): {sum(megabytes_party_1)}  - Total Comm - Party 2 (MB): {sum(megabytes_party_1)}\"", "\n", ")", "\n", "disp_error", "=", "0", "\n", "if", "cfg", ".", "joint_computation", ".", "name", "!=", "\"clear\"", ":", "\n", "        ", "y", "=", "np", ".", "load", "(", "f\"{cfg.data.dir}/clear/{cfg.register.name}/displacement.npy\"", ")", "\n", "y_hat", "=", "step", ".", "displacement", "\n", "disp_error", "=", "mse", "(", "displacement_clear", "=", "y", ",", "displacement_pp", "=", "y_hat", ",", "pixel_size", "=", "3.18", "*", "2.02", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"Displacement Error: {disp_error}\"", ")", "\n", "", "if", "not", "cfg", ".", "logging", ".", "debug", ":", "\n", "        ", "error", "=", "step", ".", "error", "\n", "log_statistics", "(", "\n", "logger", ",", "\n", "iterations", ",", "\n", "error", ",", "\n", "disp_error", ",", "\n", "megabytes_party_1", ",", "\n", "megabytes_party_2", ",", "\n", "times_party_1", ",", "\n", "times_party_2", ",", "\n", "\n", ")", "\n", "\n", "save_resources", "(", "cfg", ",", "step", ".", "displacement", ")", "\n", "\n", "logger", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_linear.main": [[154, 159], ["hydra.main", "range", "run_linear.run", "str"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.main", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.run"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "str", "(", "PROJECT_ROOT", "/", "\"conf\"", ")", ",", "config_name", "=", "\"default\"", ")", "\n", "def", "main", "(", "cfg", ":", "omegaconf", ".", "DictConfig", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "1", ")", ":", "\n", "        ", "cfg", ".", "core", ".", "name", "=", "f\"run_{i}\"", "\n", "run", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.run": [[24, 130], ["hydra.utils.log.info", "hydra.utils.log.info", "hydra.utils.call", "list", "list", "list", "list", "list", "cfg.data.iterations.items", "hydra.utils.log.info", "matplotlib.image.imsave", "hydra.utils.log.info", "wandb.init", "hydra.utils.log.info", "hydra.utils.instantiate", "register_cubic_spline.execute", "iterations.append", "times_party_1.append", "times_party_2.append", "megabytes_party_1.append", "megabytes_party_2.append", "hydra.utils.log.info", "scipy.rotate", "src.common.utils.log_statistics", "src.common.utils.save_resources", "wandb.finish", "len", "src.common.utils.get_name", "src.common.utils.get_group"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.execute", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.log_statistics", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.save_resources", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_name", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_group"], ["def", "run", "(", "cfg", ":", "DictConfig", ")", "->", "None", ":", "\n", "    ", "template_path", ":", "str", "=", "cfg", ".", "data", ".", "template", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_non_linear.py - Loading template: {template_path}\"", ")", "\n", "\n", "image_path", ":", "str", "=", "cfg", ".", "data", ".", "warped_affine", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.run_non_linear.py - Loading image: {image_path}\"", ")", "\n", "\n", "image", ",", "template", "=", "hydra", ".", "utils", ".", "call", "(", "\n", "cfg", ".", "data", ".", "preprocessing", ",", "image_path", ",", "template_path", "\n", ")", "\n", "\n", "scale", ":", "float", "=", "cfg", ".", "data", ".", "scale", "\n", "\n", "template", ":", "np", ".", "ndarray", "=", "template", "*", "scale", "\n", "image", ":", "np", ".", "ndarray", "=", "image", "*", "scale", "\n", "logger", "=", "None", "\n", "step", ":", "Optional", "[", "OptStep", "]", "=", "None", "\n", "\n", "if", "not", "cfg", ".", "logging", ".", "debug", ":", "\n", "        ", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"Instantiating WANDB Logger\"", ")", "\n", "logger", "=", "wandb", ".", "init", "(", "\n", "**", "cfg", ".", "logging", ".", "wandb", ",", "\n", "project", "=", "\"non_linear\"", ",", "\n", "name", "=", "get_name", "(", "cfg", ")", ",", "\n", "group", "=", "get_group", "(", "cfg", ")", ",", "\n", ")", "\n", "\n", "", "iterations", ":", "List", "[", "int", "]", "=", "list", "(", ")", "\n", "times_party_1", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "times_party_2", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "megabytes_party_1", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "megabytes_party_2", ":", "List", "[", "float", "]", "=", "list", "(", ")", "\n", "\n", "displacement", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", "\n", "\n", "for", "item", "in", "cfg", ".", "data", ".", "iterations", ".", "items", "(", ")", ":", "\n", "        ", "factor", ":", "float", "=", "item", "[", "0", "]", "\n", "cfg", ".", "register", ".", "max_iter", "=", "(", "\n", "item", "[", "1", "]", "[", "\"max_iter\"", "]", "if", "item", "[", "1", "]", "[", "\"max_iter\"", "]", "!=", "-", "1", "else", "cfg", ".", "register", ".", "max_iter", "\n", ")", "\n", "cfg", ".", "register", ".", "max_bad", "=", "(", "\n", "item", "[", "1", "]", "[", "\"max_bad\"", "]", "if", "item", "[", "1", "]", "[", "\"max_bad\"", "]", "!=", "-", "1", "else", "cfg", ".", "register", ".", "max_bad", "\n", ")", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_linear.py  - Running <{cfg.model._target_}> - Factor {factor}\"", "\n", ")", "\n", "\n", "register_cubic_spline", ":", "AbstractRegister", "=", "hydra", ".", "utils", ".", "instantiate", "(", "\n", "cfg", ".", "register", ",", "\n", "image", "=", "image", ",", "\n", "template", "=", "template", ",", "\n", "model", "=", "cfg", ".", "model", ",", "\n", "metric", "=", "cfg", ".", "metric", ",", "\n", "sampler", "=", "cfg", ".", "sampler", ",", "\n", "joint_computation", "=", "cfg", ".", "joint_computation", ",", "\n", "logger", "=", "logger", ",", "\n", "down_sample_factor", "=", "factor", ",", "\n", "_recursive_", "=", "False", ",", "\n", ")", "\n", "(", "\n", "step", ",", "\n", "searches", ",", "\n", "current_time_party_1", ",", "\n", "current_time_party_2", ",", "\n", "current_megabytes_party_1", ",", "\n", "current_megabytes_party_2", ",", "\n", ")", "=", "register_cubic_spline", ".", "execute", "(", "\n", "displacement", "=", "displacement", ",", "verbose", "=", "cfg", ".", "logging", ".", "debug", ",", "decreasing", "=", "True", "\n", ")", "\n", "iterations", ".", "append", "(", "len", "(", "searches", ")", ")", "\n", "\n", "times_party_1", ".", "append", "(", "current_time_party_1", ")", "\n", "times_party_2", ".", "append", "(", "current_time_party_2", ")", "\n", "megabytes_party_1", ".", "append", "(", "current_megabytes_party_1", ")", "\n", "megabytes_party_2", ".", "append", "(", "current_megabytes_party_2", ")", "\n", "\n", "displacement", ":", "np", ".", "ndarray", "=", "step", ".", "displacement", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_non_linear.py -  Finished <{cfg.model._target_}> Factor {factor}\"", "\n", ")", "\n", "", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.run_non_linear.py - Writing warped image: {cfg.data.dir}/warped_affine.png\"", "\n", ")", "\n", "\n", "imsave", "(", "\n", "f\"{cfg.data.dir}/warped_cubic_spline.png\"", ",", "\n", "nd", ".", "rotate", "(", "(", "step", ".", "warped_image", "/", "scale", ")", ",", "angle", "=", "90", ",", "reshape", "=", "False", ")", ",", "\n", "cmap", "=", "\"gray\"", ",", "\n", ")", "\n", "if", "not", "cfg", ".", "logging", ".", "debug", ":", "\n", "        ", "log_statistics", "(", "\n", "logger", "=", "logger", ",", "\n", "iterations", "=", "iterations", ",", "\n", "error", "=", "step", ".", "error", ",", "\n", "disp_error", "=", "displacement", ",", "\n", "megabytes_party_1", "=", "megabytes_party_1", ",", "\n", "megabytes_party_2", "=", "megabytes_party_2", ",", "\n", "times_party_1", "=", "times_party_1", ",", "\n", "times_party_2", "=", "times_party_2", ",", "\n", ")", "\n", "\n", "save_resources", "(", "cfg", "=", "cfg", ",", "displacement", "=", "step", ".", "displacement", ")", "\n", "\n", "wandb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.main": [[132, 137], ["hydra.main", "range", "run_non_linear.run", "str"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.main", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.src.run_non_linear.run"], ["", "", "@", "hydra", ".", "main", "(", "config_path", "=", "str", "(", "PROJECT_ROOT", "/", "\"conf\"", ")", ",", "config_name", "=", "\"default\"", ")", "\n", "def", "main", "(", "cfg", ":", "omegaconf", ".", "DictConfig", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "1", ")", ":", "\n", "        ", "cfg", ".", "core", ".", "name", "=", "f\"run_{i}\"", "\n", "run", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.__init__": [[7, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "self", ".", "_party_1_total_megabytes", ":", "float", "=", "0", "\n", "self", ".", "_party_2_total_megabytes", ":", "float", "=", "0", "\n", "self", ".", "_party_1_total_time", ":", "float", "=", "0", "\n", "self", ".", "_party_2_total_time", ":", "float", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.joint_mm_ssd": [[13, 16], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "joint_mm_ssd", "(", "self", ",", "s", ":", "np", ".", "ndarray", ",", "template", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.party_1_total_megabytes": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "party_1_total_megabytes", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_party_1_total_megabytes", "/", "2", "**", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.party_2_total_megabytes": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "party_2_total_megabytes", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_party_2_total_megabytes", "/", "2", "**", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.party_1_total_time": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "party_1_total_time", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_party_1_total_time", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.abstract_jc.AbstractJC.party_2_total_time": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "party_2_total_time", "(", "self", ")", "->", "float", ":", "\n", "        ", "return", "self", ".", "_party_2_total_time", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.clear.Clear.__init__": [[9, 11], ["src.joint_computations.abstract_jc.AbstractJC.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.clear.Clear.joint_mm_ssd": [[12, 19], ["time.time.time", "numpy.matmul", "time.time.time"], "methods", ["None"], ["", "def", "joint_mm_ssd", "(", "self", ",", "s", ":", "np", ".", "ndarray", ",", "template", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "start", ":", "float", "=", "time", "(", ")", "\n", "result", ":", "np", ".", "ndarray", "=", "np", ".", "matmul", "(", "s", ",", "template", ")", "\n", "end", ":", "float", "=", "time", "(", ")", "\n", "self", ".", "_party_1_total_time", "+=", "end", "-", "start", "\n", "self", ".", "_party_2_total_time", "=", "self", ".", "_party_1_total_time", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.clear.Clear.__str__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"clear\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ.__init__": [[16, 27], ["src.joint_computations.abstract_jc.AbstractJC.__init__", "syft.TorchHook", "syft.VirtualWorker", "syft.VirtualWorker", "range"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_parties", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "hook", "=", "sy", ".", "TorchHook", "(", "torch", ")", "\n", "self", ".", "parties", ":", "List", "[", "sy", ".", "VirtualWorker", "]", "=", "[", "\n", "sy", ".", "VirtualWorker", "(", "hook", "=", "hook", ",", "id", "=", "f\"party_{i}\"", ")", "for", "i", "in", "range", "(", "n_parties", ")", "\n", "]", "\n", "\n", "self", ".", "crypto_provider", "=", "sy", ".", "VirtualWorker", "(", "hook", "=", "hook", ",", "id", "=", "\"crypto_provider\"", ")", "\n", "self", ".", "parties", "[", "PARTY_1", "]", ".", "log_msgs", "=", "True", "\n", "self", ".", "parties", "[", "1", "]", ".", "log_msgs", "=", "True", "\n", "self", ".", "crypto_provider", ".", "log_msgs", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ.joint_mm_ssd": [[28, 66], ["list", "list", "list", "torch.tensor", "torch.tensor", "time.time.time", "torch.tensor.fix_prec().share", "torch.tensor.fix_prec().share", "result_enc_ptr.get().float_precision", "time.time.time", "spdz.SPDZ._count_bytes", "spdz.SPDZ._count_bytes", "spdz.SPDZ._count_bytes", "hydra.utils.log.info", "result_dec.numpy", "torch.tensor.fix_prec", "torch.tensor.fix_prec", "result_enc_ptr.get"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.tensor", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.tensor", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ._count_bytes", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ._count_bytes", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ._count_bytes"], ["", "def", "joint_mm_ssd", "(", "self", ",", "s", ":", "np", ".", "ndarray", ",", "template", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "parties", "[", "PARTY_1", "]", ".", "msg_history", "=", "list", "(", ")", "\n", "self", ".", "parties", "[", "PARTY_2", "]", ".", "msg_history", "=", "list", "(", ")", "\n", "self", ".", "crypto_provider", ".", "msg_history", "=", "list", "(", ")", "\n", "\n", "jacobian_t_torch", "=", "torch", ".", "tensor", "(", "s", ")", "\n", "template_torch", "=", "torch", ".", "tensor", "(", "template", ")", "\n", "start", "=", "time", "(", ")", "\n", "jacobian_t_ptr", "=", "jacobian_t_torch", ".", "fix_prec", "(", "precision_fractional", "=", "3", ")", ".", "share", "(", "\n", "self", ".", "parties", "[", "PARTY_1", "]", ",", "\n", "self", ".", "parties", "[", "PARTY_2", "]", ",", "\n", "crypto_provider", "=", "self", ".", "crypto_provider", ",", "\n", ")", "\n", "template_torch_ptr", "=", "template_torch", ".", "fix_prec", "(", "precision_fractional", "=", "3", ")", ".", "share", "(", "\n", "self", ".", "parties", "[", "PARTY_1", "]", ",", "\n", "self", ".", "parties", "[", "PARTY_2", "]", ",", "\n", "crypto_provider", "=", "self", ".", "crypto_provider", ",", "\n", ")", "\n", "\n", "result_enc_ptr", "=", "jacobian_t_ptr", "@", "template_torch_ptr", "\n", "result_dec", ":", "torch", ".", "Tensor", "=", "result_enc_ptr", ".", "get", "(", ")", ".", "float_precision", "(", ")", "\n", "end", "=", "time", "(", ")", "\n", "party_1_bytes", "=", "SPDZ", ".", "_count_bytes", "(", "self", ".", "parties", "[", "PARTY_1", "]", ")", "\n", "party_2_bytes", "=", "SPDZ", ".", "_count_bytes", "(", "self", ".", "parties", "[", "PARTY_2", "]", ")", "\n", "crypto_total_bytes", "=", "SPDZ", ".", "_count_bytes", "(", "self", ".", "crypto_provider", ")", "\n", "\n", "self", ".", "_party_1_total_megabytes", "+=", "party_1_bytes", "+", "crypto_total_bytes", "\n", "self", ".", "_party_2_total_megabytes", "+=", "party_2_bytes", "+", "crypto_total_bytes", "\n", "self", ".", "_party_1_total_time", "+=", "end", "-", "start", "\n", "self", ".", "_party_2_total_time", "=", "self", ".", "_party_1_total_time", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "\"src.joint_computations.spdz.SPDZ\\n\"", "\n", "f\"Time (s) {(end - start)} Comm Party 1 (MB): {(party_1_bytes + crypto_total_bytes) / 2 ** 20} - Comm Party 2 \"", "\n", "f\"(MB): {(party_2_bytes + crypto_total_bytes) / 2 ** 20} \"", ",", "\n", ")", "\n", "\n", "return", "result_dec", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.joint_computations.spdz.SPDZ._count_bytes": [[67, 80], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_count_bytes", "(", "worker", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Counts the number of bytes. As messages in PySyft seem to be bytes objects we can use the length to determine\n        the number of bytes per message:\n        https://en.wikiversity.org/wiki/Python_Concepts/Bytes_objects_and_Bytearrays#bytes_objects\n        :param worker: The worker.\n        :return: The total bytes for this worker.\n        \"\"\"", "\n", "total_bytes", "=", "0", "\n", "for", "msg", "in", "worker", ".", "msg_history", ":", "\n", "            ", "total_bytes", "+=", "len", "(", "msg", ")", "\n", "", "return", "total_bytes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1.__init__": [[11, 20], ["numpy.hsplit"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "s", ",", "n_split", ")", ":", "\n", "        ", "self", ".", "n", "=", "s", ".", "shape", "[", "0", "]", "\n", "self", ".", "m", "=", "s", ".", "shape", "[", "1", "]", "\n", "self", ".", "s", ":", "np", ".", "ndarray", "=", "s", "\n", "self", ".", "context", "=", "None", "\n", "self", ".", "s_split", ":", "Union", "[", "List", "[", "np", ".", "ndarray", "]", ",", "List", "[", "ts", ".", "CKKSVector", "]", "]", "=", "[", "\n", "t", "for", "t", "in", "np", ".", "hsplit", "(", "self", ".", "s", ",", "n_split", ")", "\n", "]", "\n", "self", ".", "n_split", "=", "n_split", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1.compute_res_enc_split": [[21, 29], ["party_1_v1.Party1v1._compute_res_enc_split_single", "party_1_v1.Party1v1._compute_res_enc_split_parallel"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1._compute_res_enc_split_single", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1._compute_res_enc_split_parallel"], ["", "def", "compute_res_enc_split", "(", "\n", "self", ",", "template_split_from_p2", ",", "n_threads", ",", "serialized_context_from_p2", "\n", ")", ":", "\n", "        ", "if", "n_threads", "==", "1", ":", "\n", "            ", "return", "self", ".", "_compute_res_enc_split_parallel", "(", "\n", "template_split_from_p2", ",", "serialized_context_from_p2", "\n", ")", "\n", "", "return", "self", ".", "_compute_res_enc_split_single", "(", "template_split_from_p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1._compute_res_enc_split_single": [[30, 42], ["sum", "range"], "methods", ["None"], ["", "def", "_compute_res_enc_split_single", "(", "\n", "self", ",", "template_split_from_p2", ":", "List", "[", "ts", ".", "CKKSVector", "]", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Compute the enc result of the multiplication\n        :param template_split_from_p2: list of enc split vectors template  from p2\n        :param n_split:\n        :return: result of the multiplication\n        \"\"\"", "\n", "\n", "return", "sum", "(", "\n", "[", "template_split_from_p2", "[", "i", "]", "@", "self", ".", "s_split", "[", "i", "]", ".", "T", "for", "i", "in", "range", "(", "self", ".", "n_split", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1._compute_res_enc_split_parallel": [[44, 79], ["tenseal.context_from", "multiprocessing.Manager().list", "range", "list", "sum", "multiprocessing.Process", "proc_array.append", "multiprocessing.Process.start", "multiprocessing.Process.join", "list.append", "multiprocessing.Manager", "tenseal.ckks_vector_from"], "methods", ["None"], ["", "def", "_compute_res_enc_split_parallel", "(", "\n", "self", ",", "template_split_from_p2", ",", "serialized_context_from_p2", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used to parallelize the matrix multiplication\n        Parameters\n        ----------\n        template_from_p2 : ts tensors list from P2\n\n        Returns\n        -------\n        Partial encrypted result\n        \"\"\"", "\n", "context_from_p2", "=", "ts", ".", "context_from", "(", "serialized_context_from_p2", ")", "\n", "\n", "proc_array", "=", "[", "]", "\n", "shared_list", "=", "Manager", "(", ")", ".", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_split", ")", ":", "\n", "            ", "p", "=", "Process", "(", "\n", "target", "=", "self", ".", "__ex_matrix_mult", ",", "\n", "args", "=", "(", "template_split_from_p2", "[", "i", "]", ",", "self", ".", "s_split", "[", "i", "]", ".", "T", ",", "shared_list", ")", ",", "\n", ")", "\n", "proc_array", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "proc_array", ":", "\n", "            ", "p", ".", "start", "(", ")", "\n", "\n", "", "for", "p", "in", "proc_array", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "", "part_res", "=", "list", "(", ")", "\n", "# Deserialization", "\n", "for", "ser_ts", "in", "shared_list", ":", "\n", "            ", "part_res", ".", "append", "(", "ts", ".", "ckks_vector_from", "(", "context", "=", "context_from_p2", ",", "data", "=", "ser_ts", ")", ")", "\n", "\n", "", "return", "sum", "(", "part_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1.__ex_matrix_mult": [[80, 97], ["shared_res.append", "res.serialize"], "methods", ["None"], ["", "def", "__ex_matrix_mult", "(", "self", ",", "array_enc", ",", "mat", ",", "shared_res", ")", ":", "\n", "        ", "\"\"\"\n        target method for parallelization\n        Parameters\n        ----------\n        array_enc : ts tensor\n        mat : cleartext matrix\n        shared_res : shared list for result\n\n        Returns\n        -------\n\n        \"\"\"", "\n", "\n", "res", "=", "array_enc", "@", "mat", "\n", "# The ts tensor needs to be serialized to be saved and passed between functions", "\n", "shared_res", ".", "append", "(", "res", ".", "serialize", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.__init__": [[14, 22], ["src.joint_computations.abstract_jc.AbstractJC.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_split_vectors", ":", "int", ",", "n_threads", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "dim_split_vectors", "=", "dim_split_vectors", "\n", "self", ".", "party_1", ":", "Optional", "[", "Party1v1", "]", "=", "None", "\n", "self", ".", "party_2", ":", "Optional", "[", "Party2v1", "]", "=", "None", "\n", "self", ".", "n_split", ":", "Optional", "[", "int", "]", "=", "None", "\n", "self", ".", "n_threads", ":", "int", "=", "n_threads", "\n", "self", ".", "first_iteration", ":", "bool", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.one_side_computation_protocol": [[23, 69], ["hydra.utils.log.info", "time.time.time", "ckks_v1.CKKSv1.party_2.get_template_split_to_p1", "time.time.time", "ckks_v1.CKKSv1.party_2.get_serialized_context", "time.time.time", "ckks_v1.CKKSv1.party_1.compute_res_enc_split", "time.time.time", "len", "hydra.utils.log.info", "time.time.time", "ckks_v1.CKKSv1.party_2.dec_partial_res_from_p1", "time.time.time", "hydra.utils.log.info", "ckks_v1.CKKSv1.reshape", "sum", "hydra.utils.log.info", "ckks_v1.CKKSv1.serialize", "len", "t.serialize", "len", "ckks_v1.CKKSv1.serialize"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.get_template_split_to_p1", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.get_serialized_context", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_1_v1.Party1v1.compute_res_enc_split", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.dec_partial_res_from_p1"], ["", "def", "one_side_computation_protocol", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        One side computation P1\n        \"\"\"", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.joint_computations.ckks.ckks_v1.py - Num Split:{self.n_split}\"", "\n", ")", "\n", "start", "=", "time", "(", ")", "\n", "template_split_from_p2_enc", "=", "self", ".", "party_2", ".", "get_template_split_to_p1", "(", ")", "\n", "end", "=", "time", "(", ")", "\n", "\n", "if", "self", ".", "first_iteration", ":", "\n", "            ", "self", ".", "first_iteration", "=", "False", "\n", "# Party 2 sends the template split to Party 1 on the first iteration", "\n", "\n", "template_enc_bytes", ":", "int", "=", "sum", "(", "\n", "[", "len", "(", "t", ".", "serialize", "(", ")", ")", "for", "t", "in", "template_split_from_p2_enc", "]", "\n", ")", "\n", "\n", "self", ".", "_party_2_total_megabytes", "+=", "template_enc_bytes", "\n", "self", ".", "_party_2_total_time", "+=", "end", "-", "start", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.joint_computations.ckks.ckks_v1.py - \"", "\n", "f\"Party2 Enc Time: {end - start} (s) - Comm. : {template_enc_bytes/2**20} (MB)\"", ")", "\n", "", "serialized_context_from_p2", "=", "self", ".", "party_2", ".", "get_serialized_context", "(", ")", "\n", "\n", "start", "=", "time", "(", ")", "\n", "result_one_side", "=", "self", ".", "party_1", ".", "compute_res_enc_split", "(", "\n", "template_split_from_p2", "=", "template_split_from_p2_enc", ",", "\n", "n_threads", "=", "self", ".", "n_threads", ",", "\n", "serialized_context_from_p2", "=", "serialized_context_from_p2", ",", "\n", ")", "\n", "end", "=", "time", "(", ")", "\n", "self", ".", "_party_1_total_time", "+=", "end", "-", "start", "\n", "self", ".", "_party_1_total_megabytes", "+=", "len", "(", "result_one_side", ".", "serialize", "(", ")", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.joint_computations.ckks.v1.ckks_v1.py - \"", "\n", "f\"Party 1 sent encrypted result to Party 2 - \"", "\n", "f\"Time: {end - start} (s) - Comm.: {len(result_one_side.serialize())/2**20} (MB)\"", ")", "\n", "start", "=", "time", "(", ")", "\n", "dec_result_one_side", "=", "self", ".", "party_2", ".", "dec_partial_res_from_p1", "(", "result_one_side", ")", "\n", "end", "=", "time", "(", ")", "\n", "self", ".", "_party_2_total_time", "+=", "end", "-", "start", "\n", "self", ".", "_party_2_total_megabytes", "+=", "dec_result_one_side", ".", "nbytes", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "f\"src.joint_computations.ckks.v1.ckks_v1.py - Party 2 decrypted result from Party 1 - \"", "\n", "f\"Time: {end - start} (s) - Comm.: {dec_result_one_side.nbytes/2**20} (MB)\"", ")", "\n", "\n", "return", "dec_result_one_side", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.joint_mm_ssd": [[70, 78], ["src.joint_computations.ckks.v1.party_1_v1.Party1v1", "src.joint_computations.ckks.v1.party_2_v1.Party2v1", "ckks_v1.CKKSv1.one_side_computation_protocol", "len"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.one_side_computation_protocol"], ["", "def", "joint_mm_ssd", "(", "self", ",", "s", ":", "np", ".", "ndarray", ",", "template", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "self", ".", "n_split", "=", "len", "(", "template", ")", "//", "self", ".", "dim_split_vectors", "\n", "self", ".", "party_1", "=", "Party1v1", "(", "s", "=", "s", ",", "n_split", "=", "self", ".", "n_split", ")", "\n", "self", ".", "party_2", "=", "Party2v1", "(", "\n", "template", "=", "template", ",", "n_split", "=", "self", ".", "n_split", ",", "n_threads", "=", "self", ".", "n_threads", "\n", ")", "\n", "\n", "return", "self", ".", "one_side_computation_protocol", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.__init__": [[8, 25], ["tenseal.context", "party_2_v1.Party2v1.context.generate_galois_keys", "numpy.hsplit", "party_2_v1.Party2v1.template.flatten"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "template", ",", "n_split", ",", "n_threads", ")", ":", "\n", "        ", "self", ".", "n", "=", "template", ".", "shape", "[", "0", "]", "\n", "self", ".", "template", "=", "template", "\n", "self", ".", "template_split", "=", "[", "t", "for", "t", "in", "np", ".", "hsplit", "(", "self", ".", "template", ".", "flatten", "(", ")", ",", "n_split", ")", "]", "\n", "self", ".", "n_split", "=", "n_split", "\n", "self", ".", "n_threads", "=", "n_threads", "\n", "\n", "self", ".", "context", "=", "ts", ".", "context", "(", "\n", "ts", ".", "SCHEME_TYPE", ".", "CKKS", ",", "\n", "poly_modulus_degree", "=", "4096", ",", "\n", "coeff_mod_bit_sizes", "=", "[", "30", ",", "24", ",", "24", ",", "30", "]", ",", "\n", "n_threads", "=", "n_threads", ",", "\n", "encryption_type", "=", "ts", ".", "ENCRYPTION_TYPE", ".", "SYMMETRIC", ",", "\n", ")", "\n", "precision", "=", "24", "\n", "self", ".", "context", ".", "global_scale", "=", "2", "**", "precision", "\n", "self", ".", "context", ".", "generate_galois_keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.get_serialized_context": [[26, 34], ["party_2_v1.Party2v1.context.serialize"], "methods", ["None"], ["", "def", "get_serialized_context", "(", "self", ")", ":", "\n", "        ", "_serialized_context", "=", "self", ".", "context", ".", "serialize", "(", "\n", "save_public_key", "=", "False", ",", "\n", "save_secret_key", "=", "False", ",", "\n", "save_galois_keys", "=", "False", ",", "\n", "save_relin_keys", "=", "False", ",", "\n", ")", "\n", "return", "_serialized_context", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.get_template_split_to_p1": [[35, 42], ["tenseal.ckks_vector", "t.flatten"], "methods", ["None"], ["", "def", "get_template_split_to_p1", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Split and encrypt J\n        Returns:\n            split & enc version of J\n        \"\"\"", "\n", "return", "[", "ts", ".", "ckks_vector", "(", "self", ".", "context", ",", "t", ".", "flatten", "(", ")", ")", "for", "t", "in", "self", ".", "template_split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.party_2_v1.Party2v1.dec_partial_res_from_p1": [[43, 56], ["res_from_p1.link_context", "numpy.array", "res_from_p1.decrypt"], "methods", ["None"], ["", "def", "dec_partial_res_from_p1", "(", "self", ",", "res_from_p1", ")", ":", "\n", "        ", "\"\"\"\n        Decrypted the result got from P1\n        Parameters\n        ----------\n        res_from_p1 : enc result from P1\n\n        Returns\n        -------\n        Cleartext result to P1\n        \"\"\"", "\n", "res_from_p1", ".", "link_context", "(", "self", ".", "context", ")", "\n", "return", "np", ".", "array", "(", "res_from_p1", ".", "decrypt", "(", ")", ")", ".", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.abstract_sampler.AbstractSampler.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coordinates", ":", "Coordinates2D", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initializes the sampler.\n        :param coordinates:\n        \"\"\"", "\n", "self", ".", "coordinates", "=", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.abstract_sampler.AbstractSampler.f": [[17, 35], ["abstract_sampler.AbstractSampler.sample", "ValueError", "i.reshape", "j.reshape", "numpy.vstack"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.abstract_sampler.AbstractSampler.sample"], ["", "def", "f", "(", "self", ",", "array", ":", "np", ".", "ndarray", ",", "warp", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        A sampling function, responsible for returning a sampled set of values\n        from the given array.\n        :param array: input array for sampling\n        :param warp: deformation coordinates\n        :return: sampled array metric\n        \"\"\"", "\n", "\n", "if", "self", ".", "coordinates", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Appropriately defined coordinates not provided.\"", ")", "\n", "\n", "", "i", ":", "np", ".", "ndarray", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", "+", "warp", "[", "0", "]", "\n", "j", ":", "np", ".", "ndarray", "=", "self", ".", "coordinates", ".", "tensor", "[", "1", "]", "+", "warp", "[", "1", "]", "\n", "\n", "packed_coords", "=", "(", "i", ".", "reshape", "(", "1", ",", "i", ".", "size", ")", ",", "j", ".", "reshape", "(", "1", ",", "j", ".", "size", ")", ")", "\n", "\n", "return", "self", ".", "sample", "(", "array", ",", "np", ".", "vstack", "(", "packed_coords", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.abstract_sampler.AbstractSampler.sample": [[36, 41], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "array", ":", "np", ".", "ndarray", ",", "coords", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        The sampling function - provided by the specialized samplers.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.spline.Spline.__init__": [[18, 20], ["src.samplers.abstract_sampler.AbstractSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["def", "__init__", "(", "self", ",", "coordinates", ")", ":", "\n", "        ", "AbstractSampler", ".", "__init__", "(", "self", ",", "coordinates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.spline.Spline.f": [[21, 43], ["scipy.map_coordinates().flatten", "ValueError", "scipy.map_coordinates"], "methods", ["None"], ["", "def", "f", "(", "self", ",", "array", ":", "np", ".", "ndarray", ",", "warp", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        A sampling function, responsible for returning a sampled set of values\n        from the given array.\n\n        Parameters\n        ----------\n        array: nd-array\n            Input array for sampling.\n        warp: nd-array\n            Deformation coordinates.\n\n        Returns\n        -------\n        sample: nd-array\n           Sampled array metric.\n        \"\"\"", "\n", "\n", "if", "self", ".", "coordinates", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Appropriately defined coordinates not provided.\"", ")", "\n", "\n", "", "return", "nd", ".", "map_coordinates", "(", "array", ",", "warp", ",", "order", "=", "2", ",", "mode", "=", "\"nearest\"", ")", ".", "flatten", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.__init__": [[19, 46], ["data.astype", "src.common.coordinates.Coordinates2D"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data", ":", "np", ".", "ndarray", ",", "\n", "coords", ":", "Optional", "[", "Coordinates2D", "]", "=", "None", ",", "\n", "features", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", "spacing", ":", "float", "=", "1.0", ",", "\n", "*", "args", ":", "list", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Container for registration metric.\n\n        :param data: the image registration image values\n        :param coords: the grid coordinates\n        :param features: a mapping of unique ids to registration features\n        :param spacing:\n        \"\"\"", "\n", "self", ".", "_data", "=", "data", ".", "astype", "(", "np", ".", "double", ")", "\n", "\n", "if", "not", "coords", ":", "\n", "            ", "self", ".", "_coords", "=", "Coordinates2D", "(", "\n", "[", "0", ",", "data", ".", "shape", "[", "0", "]", ",", "0", ",", "data", ".", "shape", "[", "1", "]", "]", ",", "spacing", "=", "spacing", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "_coords", "=", "coords", "\n", "\n", "", "self", ".", "features", "=", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.coords": [[47, 50], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "coords", "(", "self", ")", "->", "Coordinates2D", ":", "\n", "        ", "return", "self", ".", "_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.data": [[51, 54], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.down_sample": [[55, 71], ["scipy.zoom", "abstract_register.RegisterData"], "methods", ["None"], ["", "def", "down_sample", "(", "self", ",", "factor", ":", "float", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        Down samples the RegisterData by a user defined factor. The ndimage\n        zoom function is used to interpolate the image, with a scale defined\n        as 1/factor.\n\n        Spacing is used to infer the scale difference between images - defining\n        the size of a pixel in arbitrary units (atm).\n\n        :param factor: the scaling factor which is applied to image metric and coordinates\n        :return: the parameter update vector\n        \"\"\"", "\n", "\n", "resampled", "=", "nd", ".", "zoom", "(", "self", ".", "_data", ",", "1.0", "/", "factor", ")", "\n", "\n", "return", "RegisterData", "(", "resampled", ",", "spacing", "=", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth": [[72, 82], ["numpy.real", "numpy.fft.ifft2", "scipy.fourier_gaussian", "numpy.fft.fft2"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_smooth", "(", "image", ":", "np", ".", "ndarray", ",", "variance", ":", "float", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Gaussian smoothing using the fast-fourier-transform (FFT)\n        :param image: input image\n        :param variance: variance of the Gaussian kernel\n        :return: an image convolved with the Gaussian kernel\n        \"\"\"", "\n", "\n", "return", "np", ".", "real", "(", "np", ".", "fft", ".", "ifft2", "(", "nd", ".", "fourier_gaussian", "(", "np", ".", "fft", ".", "fft2", "(", "image", ")", ",", "variance", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.smooth": [[83, 91], ["abstract_register.RegisterData._smooth"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth"], ["", "def", "smooth", "(", "self", ",", "variance", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Smooth feature metric in place.\n        :param variance: variance of the Gaussian kernel\n        :return: see RegisterData.smooth\n        \"\"\"", "\n", "\n", "self", ".", "_data", "=", "RegisterData", ".", "_smooth", "(", "self", ".", "_data", ",", "variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.__init__": [[164, 220], ["abstract_register.RegisterData.down_sample", "abstract_register.RegisterData.down_sample", "hydra.utils.instantiate", "hydra.utils.instantiate", "hydra.utils.instantiate", "hydra.utils.instantiate", "abstract_register.RegisterData", "abstract_register.RegisterData"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.down_sample", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData.down_sample"], ["def", "__init__", "(", "\n", "self", ",", "\n", "image", ":", "np", ".", "ndarray", ",", "\n", "template", ":", "np", ".", "ndarray", ",", "\n", "model", ":", "AbstractModel", ",", "\n", "metric", ":", "AbstractMetric", ",", "\n", "sampler", ":", "AbstractSampler", ",", "\n", "joint_computation", ":", "AbstractJC", ",", "\n", "max_bad", ":", "int", "=", "5", ",", "\n", "max_iter", ":", "int", "=", "200", ",", "\n", "down_sample_factor", ":", "int", "=", "1.0", ",", "\n", "logger", "=", "None", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n         A registration class for estimating the deformation model parameters that\n        best solve:\n\n        | :math:`f( W(I;p), J )`\n        |\n        | where:\n        |    :math:`f`     : is a similarity metric.\n        |    :math:`W(x;p)`: is a deformation model (defined by the parameter set p).\n        |    :math:`I`     : is an input image (to be deformed).\n        |    :math:`J`     : is a template (which is a deformed version of the input).\n\n\n        Solved using a modified gradient descent algorithm.\n\n        [0] Levernberg-Marquardt algorithm,\n               http://en.wikipedia.org/wiki/Levenberg-Marquardt_algorithm\n        :param image: moving image\n        :param template: template image\n        :param model: a deformation model class\n        :param metric: a similarity metric class\n        :param sampler: a sampler (interpolator)\n        :param joint_computation: a joint computation class\n        :param max_bad: number of consecutive bad steps before stopping\n        :param max_iter: maximum number of iterations\n        :param down_sample_factor: down sampling factor\n        :param logger: a logger\n        \"\"\"", "\n", "\n", "self", ".", "image", ":", "RegisterData", "=", "RegisterData", "(", "image", ")", ".", "down_sample", "(", "down_sample_factor", ")", "\n", "self", ".", "template", ":", "RegisterData", "=", "RegisterData", "(", "template", ")", ".", "down_sample", "(", "\n", "down_sample_factor", "\n", ")", "\n", "\n", "self", ".", "model", "=", "hydra", ".", "utils", ".", "instantiate", "(", "model", ",", "coordinates", "=", "self", ".", "image", ".", "coords", ")", "\n", "self", ".", "sampler", "=", "hydra", ".", "utils", ".", "instantiate", "(", "sampler", ",", "coordinates", "=", "self", ".", "image", ".", "coords", ")", "\n", "self", ".", "metric", "=", "hydra", ".", "utils", ".", "instantiate", "(", "metric", ")", "\n", "self", ".", "joint_computation", "=", "hydra", ".", "utils", ".", "instantiate", "(", "joint_computation", ")", "\n", "self", ".", "max_bad", "=", "max_bad", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister._delta_params": [[221, 244], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_delta_params", "(", "\n", "self", ",", "\n", "jacobian", ":", "np", ".", "ndarray", ",", "\n", "grad_norm", ":", "np", ".", "ndarray", ",", "\n", "warped_image", ":", "np", ".", "ndarray", ",", "\n", "template_image", ":", "np", ".", "ndarray", ",", "\n", "error", ":", "float", ",", "\n", "alpha", ":", "float", ",", "\n", "params", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Computes the parameter update.\n\n        :param jacobian: the (d_error/d_params) the relationship between image differences and model parameters.\n        :param grad_norm: the gradient norm\n        :param warped_image: warped image\n        :param template_image: template image\n        :param error:\n        :param alpha: dampening factor\n        :param params: model parameters\n        :return: the parameter update vector\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister._dampening": [[247, 256], ["None"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "_dampening", "(", "alpha", ":", "float", ",", "decreasing", ":", "bool", ")", "->", "float", ":", "\n", "        ", "\"\"\"\n        Computes the adjusted dampening factor.\n        :param alpha: the current dampening factor\n        :param decreasing: conditional on the decreasing error function\n        :return: the adjusted dampening factor\n        \"\"\"", "\n", "return", "alpha", "/", "10.0", "if", "decreasing", "else", "alpha", "*", "10.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.execute": [[257, 407], ["numpy.zeros_like", "range", "ValueError", "abstract_register.AbstractRegister.model.estimate", "abstract_register.AbstractRegister.model.warp", "abstract_register.RegisterData._smooth", "abstract_register.AbstractRegister.metric.error", "abstract_register.OptStep", "searches.append", "abstract_register.AbstractRegister.metric.get_jacobian", "abstract_register.AbstractRegister._delta_params", "numpy.array", "abstract_register.AbstractRegister.sampler.f().reshape", "print", "abstract_register.AbstractRegister.logger.log", "len", "abstract_register.AbstractRegister._dampening", "numpy.dot", "hydra.utils.log.info", "best_step.params.copy.copy", "abstract_register.AbstractRegister.copy", "abstract_register.AbstractRegister.image.coords.tensor.copy", "abstract_register.AbstractRegister.copy", "abstract_register.AbstractRegister.model.transform", "abstract_register.RegisterData._smooth", "best_step.params.copy", "scipy.zoom", "scipy.zoom", "abstract_register.AbstractRegister.sampler.f", "numpy.abs().sum", "numpy.prod", "hydra.utils.log.info", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.estimate", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.warp", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.abstract_metric.AbstractMetric.error", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.abstract_metric.AbstractMetric.get_jacobian", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.gms_register.GMSRegister._delta_params", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister._dampening", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.transform", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.samplers.spline.Spline.f"], ["", "def", "execute", "(", "\n", "self", ",", "\n", "params", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "alpha", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "displacement", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", "decreasing", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "OptStep", ",", "List", "[", "OptStep", "]", ",", "float", ",", "float", ",", "float", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Executes the registration algorithm.\n\n        :param params: initial model parameters\n        :param alpha: initial dampening factor\n        :param displacement: initial displacement\n        :param verbose: verbose mode\n        :param decreasing: conditional on the decreasing error function\n        :return: the optimal step, the list of steps, the computation time of party 1 and 2, the bandwidth demanded\n        by party 1 and 2\n        \"\"\"", "\n", "\n", "if", "self", ".", "image", ".", "coords", ".", "spacing", "!=", "self", ".", "template", ".", "coords", ".", "spacing", ":", "\n", "            ", "raise", "ValueError", "(", "\"Coordinate systems differ.\"", ")", "\n", "\n", "# Initialize the models, metric and sampler.", "\n", "\n", "", "if", "displacement", "is", "not", "None", ":", "\n", "# Account for difference warp resolutions.", "\n", "            ", "scale", "=", "(", "\n", "(", "self", ".", "image", ".", "data", ".", "shape", "[", "0", "]", "*", "1.0", ")", "/", "displacement", ".", "shape", "[", "1", "]", ",", "\n", "(", "self", ".", "image", ".", "data", ".", "shape", "[", "1", "]", "*", "1.0", ")", "/", "displacement", ".", "shape", "[", "2", "]", ",", "\n", ")", "\n", "\n", "# Scale the displacement field and estimate the model parameters,", "\n", "# refer to test_CubicSpline_estimate", "\n", "scaled_displacement", "=", "(", "\n", "np", ".", "array", "(", "\n", "[", "nd", ".", "zoom", "(", "displacement", "[", "0", "]", ",", "scale", ")", ",", "nd", ".", "zoom", "(", "displacement", "[", "1", "]", ",", "scale", ")", "]", "\n", ")", "\n", "*", "scale", "[", "0", "]", "\n", ")", "\n", "\n", "# Estimate p, using the displacement field.", "\n", "params", "=", "self", ".", "model", ".", "estimate", "(", "-", "1.0", "*", "scaled_displacement", ")", "\n", "\n", "", "params", "=", "self", ".", "model", ".", "identity", "if", "params", "is", "None", "else", "params", "\n", "delta_p", "=", "np", ".", "zeros_like", "(", "params", ")", "\n", "\n", "# Dampening factor.", "\n", "alpha", "=", "alpha", "if", "alpha", "is", "not", "None", "else", "1e-4", "\n", "\n", "# Variables used to implement a back-tracking algorithm.", "\n", "searches", ":", "List", "[", "OptStep", "]", "=", "[", "]", "\n", "num_bad_steps", ":", "int", "=", "0", "\n", "best_step", ":", "Optional", "[", "OptStep", "]", "=", "None", "\n", "\n", "for", "iteration", "in", "range", "(", "0", ",", "self", ".", "max_iter", ")", ":", "\n", "\n", "            ", "warp", "=", "self", ".", "model", ".", "warp", "(", "params", ")", "\n", "# Sample the image using the inverse warp.", "\n", "\n", "warped_image", "=", "RegisterData", ".", "_smooth", "(", "\n", "self", ".", "sampler", ".", "f", "(", "self", ".", "image", ".", "data", ",", "warp", ")", ".", "reshape", "(", "self", ".", "image", ".", "data", ".", "shape", ")", ",", "\n", "0.5", ",", "\n", ")", "\n", "# warped_image = self.sampler.f(self.image.data, warp).reshape(self.image.data.shape)", "\n", "\n", "e", "=", "self", ".", "metric", ".", "error", "(", "warped_image", ",", "self", ".", "template", ".", "data", ")", "\n", "# Cache the optimization step.", "\n", "search_step", ":", "OptStep", "=", "OptStep", "(", "\n", "error", "=", "np", ".", "abs", "(", "e", ")", ".", "sum", "(", ")", "/", "np", ".", "prod", "(", "self", ".", "image", ".", "data", ".", "shape", ")", ",", "\n", "params", "=", "params", ".", "copy", "(", ")", ",", "\n", "delta_p", "=", "delta_p", ".", "copy", "(", ")", ",", "\n", "grid", "=", "self", ".", "image", ".", "coords", ".", "tensor", ".", "copy", "(", ")", ",", "\n", "warp", "=", "warp", ".", "copy", "(", ")", ",", "\n", "displacement", "=", "self", ".", "model", ".", "transform", "(", "params", ")", ",", "\n", "warped_image", "=", "warped_image", ".", "copy", "(", ")", ",", "\n", "template", "=", "self", ".", "template", ".", "data", ",", "\n", "image", "=", "self", ".", "image", ".", "data", ",", "\n", "decreasing", "=", "decreasing", ",", "\n", ")", "\n", "\n", "# Update the current best step.", "\n", "best_step", ":", "OptStep", "=", "search_step", "if", "best_step", "is", "None", "else", "best_step", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\n", "f\"\\n iteration  : {iteration} \\n parameters : {[param for param in search_step.params]} \\n error      : {search_step.error} \\n\"", "\n", ")", "\n", "", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "log", "(", "{", "\"error\"", ":", "search_step", ".", "error", "}", ")", "\n", "# Append the search step to the search.", "\n", "", "searches", ".", "append", "(", "search_step", ")", "\n", "\n", "if", "len", "(", "searches", ")", ">", "1", ":", "\n", "# Check if the search step is improving.", "\n", "                ", "search_step", ".", "decreasing", "=", "search_step", ".", "error", "<", "best_step", ".", "error", "\n", "\n", "alpha", "=", "self", ".", "_dampening", "(", "alpha", ",", "search_step", ".", "decreasing", ")", "\n", "\n", "if", "search_step", ".", "decreasing", ":", "\n", "\n", "                    ", "best_step", "=", "search_step", "\n", "", "else", ":", "\n", "                    ", "num_bad_steps", "+=", "1", "\n", "\n", "if", "num_bad_steps", ">", "self", ".", "max_bad", ":", "\n", "                        ", "if", "verbose", ":", "\n", "                            ", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.registers.abstract_register.py\\n\"", "\n", "\"Optimization break, maximum number \"", "\n", "\"of bad iterations exceeded.\"", "\n", ")", "\n", "", "break", "\n", "", "params", "=", "best_step", ".", "params", ".", "copy", "(", ")", "\n", "\n", "# Computes the derivative of the error with respect to model", "\n", "# parameters.", "\n", "\n", "", "", "jacobian", ",", "grad_norm", "=", "self", ".", "metric", ".", "get_jacobian", "(", "\n", "self", ".", "model", ",", "warped_image", ",", "params", "\n", ")", "\n", "\n", "# Compute the parameter update vector.", "\n", "delta_p", "=", "self", ".", "_delta_params", "(", "\n", "jacobian", "=", "jacobian", ",", "\n", "grad_norm", "=", "grad_norm", ",", "\n", "warped_image", "=", "warped_image", ",", "\n", "template_image", "=", "self", ".", "template", ".", "data", ",", "\n", "error", "=", "e", ",", "\n", "alpha", "=", "alpha", ",", "\n", "params", "=", "params", ",", "\n", ")", "\n", "\n", "# Evaluate stopping condition:", "\n", "if", "np", ".", "dot", "(", "delta_p", ".", "T", ",", "delta_p", ")", "<", "1e-4", ":", "\n", "                ", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "\"f src.register_abstract_register.py \\n\"", "\"Stopping condition\"", "\n", ")", "\n", "break", "\n", "\n", "# Update the estimated parameters.", "\n", "", "params", "+=", "delta_p", "\n", "\n", "", "return", "(", "\n", "best_step", ",", "\n", "searches", ",", "\n", "self", ".", "joint_computation", ".", "party_1_total_time", ",", "\n", "self", ".", "joint_computation", ".", "party_2_total_time", ",", "\n", "self", ".", "joint_computation", ".", "party_1_total_megabytes", ",", "\n", "self", ".", "joint_computation", ".", "party_2_total_megabytes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.next_power_of_2": [[409, 425], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "next_power_of_2", "(", "n", ")", ":", "\n", "        ", "\"\"\"\n        Returns the next power of 2 greater than or equal to n.\n        :param n: the number to be rounded up\n        :return: the next power of 2\n        \"\"\"", "\n", "\n", "n", "-=", "1", "\n", "n", "|=", "n", ">>", "1", "\n", "n", "|=", "n", ">>", "2", "\n", "n", "|=", "n", ">>", "4", "\n", "n", "|=", "n", ">>", "8", "\n", "n", "|=", "n", ">>", "16", "\n", "n", "+=", "1", "\n", "return", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.urs_register.URSRegister.__init__": [[10, 14], ["src.registers.abstract_register.AbstractRegister.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "percent_pixels", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "percent_pixels", "=", "percent_pixels", "\n", "self", ".", "num_iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.urs_register.URSRegister._delta_params": [[15, 53], ["numpy.random.default_rng", "src.registers.abstract_register.AbstractRegister.next_power_of_2", "hydra.utils.log.info", "numpy.random.default_rng.choice", "numpy.dot", "numpy.diag", "numpy.linalg.inv", "urs_register.URSRegister.joint_computation.joint_mm_ssd", "template_image.reshape", "warped_image.reshape", "numpy.diagonal", "len", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.next_power_of_2", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.joint_mm_ssd"], ["", "def", "_delta_params", "(", "\n", "self", ",", "\n", "jacobian", ":", "np", ".", "ndarray", ",", "\n", "grad_norm", ":", "np", ".", "ndarray", ",", "\n", "warped_image", ":", "np", ".", "ndarray", ",", "\n", "template_image", ":", "np", ".", "ndarray", ",", "\n", "error", ",", "\n", "alpha", ",", "\n", "params", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "\n", "        ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", "=", "self", ".", "num_iteration", ")", "\n", "self", ".", "num_iteration", "+=", "1", "\n", "\n", "num_pixels", "=", "AbstractRegister", ".", "next_power_of_2", "(", "\n", "(", "(", "len", "(", "template_image", ")", "//", "self", ".", "percent_pixels", ")", "*", "100", ")", "\n", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.registers.urs_register.py - percent of used pixels: {self.percent_pixels}\\n\"", "\n", "f\"- Original number of pixel: {np.prod(template_image.shape)}\\n\"", "\n", "f\"- Number of pixels after URS sampling: {num_pixels}\"", "\n", ")", "\n", "random_idx", "=", "rng", ".", "choice", "(", "jacobian", ".", "shape", "[", "0", "]", ",", "size", "=", "num_pixels", ",", "replace", "=", "False", ")", "\n", "jacobian", "=", "jacobian", "[", "random_idx", "]", "\n", "template_image", "=", "template_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "random_idx", "]", "\n", "warped_image", "=", "warped_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "random_idx", "]", "\n", "h", "=", "np", ".", "dot", "(", "jacobian", ".", "T", ",", "jacobian", ")", "\n", "\n", "h", "+=", "np", ".", "diag", "(", "alpha", "*", "np", ".", "diagonal", "(", "h", ")", ")", "\n", "h_inv", "=", "np", ".", "linalg", ".", "inv", "(", "h", ")", "\n", "\n", "private_computation", "=", "jacobian", ".", "T", "@", "warped_image", "\n", "joint_computation", "=", "self", ".", "joint_computation", ".", "joint_mm_ssd", "(", "\n", "s", "=", "jacobian", ".", "T", ",", "template", "=", "template_image", "\n", ")", "\n", "\n", "result", "=", "(", "h_inv", "@", "(", "private_computation", "-", "joint_computation", ")", ")", ".", "flatten", "(", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.base_register.BaseRegister.__init__": [[9, 17], ["src.registers.abstract_register.AbstractRegister.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "*", "args", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.base_register.BaseRegister._delta_params": [[19, 57], ["template_image.reshape.reshape.reshape", "warped_image.reshape.reshape.reshape", "numpy.dot", "numpy.diag", "numpy.linalg.inv", "base_register.BaseRegister.joint_computation.joint_mm_ssd", "numpy.diagonal"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.joint_mm_ssd"], ["", "def", "_delta_params", "(", "\n", "self", ",", "\n", "jacobian", ":", "np", ".", "ndarray", ",", "\n", "grad_norm", ":", "np", ".", "ndarray", ",", "\n", "warped_image", ":", "np", ".", "ndarray", ",", "\n", "template_image", ":", "np", ".", "ndarray", ",", "\n", "error", ":", "np", ".", "ndarray", ",", "\n", "alpha", ":", "float", ",", "\n", "params", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Compute the update of the parameters.\n        :param jacobian:\n        :param grad_norm:\n        :param warped_image:\n        :param template_image:\n        :param error:\n        :param alpha:\n        :param params:\n        :return:\n        \"\"\"", "\n", "\n", "template_image", "=", "template_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "warped_image", "=", "warped_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "h", ":", "np", ".", "ndarray", "=", "np", ".", "dot", "(", "jacobian", ".", "T", ",", "jacobian", ")", "\n", "\n", "h", "+=", "np", ".", "diag", "(", "alpha", "*", "np", ".", "diagonal", "(", "h", ")", ")", "\n", "\n", "h_inv", ":", "np", ".", "ndarray", "=", "np", ".", "linalg", ".", "inv", "(", "h", ")", "\n", "\n", "private_computation", ":", "np", ".", "ndarray", "=", "jacobian", ".", "T", "@", "warped_image", "\n", "joint_computation", ":", "np", ".", "ndarray", "=", "self", ".", "joint_computation", ".", "joint_mm_ssd", "(", "\n", "s", "=", "jacobian", ".", "T", ",", "template", "=", "template_image", "\n", ")", "\n", "result", ":", "np", ".", "ndarray", "=", "(", "\n", "h_inv", "@", "(", "private_computation", "-", "joint_computation", ")", "\n", ")", ".", "flatten", "(", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.gms_register.GMSRegister.__init__": [[15, 19], ["src.registers.abstract_register.AbstractRegister.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "percent_pixels", ":", "int", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "percent_pixels", "=", "percent_pixels", "\n", "self", ".", "num_iteration", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.gms_register.GMSRegister._delta_params": [[20, 64], ["numpy.random.default_rng", "numpy.random.default_rng", "src.registers.abstract_register.AbstractRegister.next_power_of_2", "hydra.utils.log.info", "numpy.random.default_rng.choice", "numpy.dot", "numpy.dot", "numpy.diag", "numpy.diag", "gms_register.GMSRegister.joint_computation.joint_mm_ssd", "numpy.linalg.inv", "numpy.linalg.inv", "sum", "template_image.reshape", "warped_image.reshape", "numpy.diagonal", "numpy.diagonal", "len", "numpy.prod", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.AbstractRegister.next_power_of_2", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.v1.ckks_v1.CKKSv1.joint_mm_ssd"], ["", "def", "_delta_params", "(", "\n", "self", ",", "\n", "jacobian", ":", "np", ".", "ndarray", ",", "\n", "grad_norm", ":", "np", ".", "ndarray", ",", "\n", "warped_image", ":", "np", ".", "ndarray", ",", "\n", "template_image", ":", "np", ".", "ndarray", ",", "\n", "error", ",", "\n", "alpha", ",", "\n", "params", "=", "None", ",", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", "=", "self", ".", "num_iteration", ")", "\n", "\n", "self", ".", "num_iteration", "+=", "1", "\n", "\n", "grad_norm_probabilities", "=", "grad_norm", "/", "sum", "(", "grad_norm", ")", "\n", "num_pixels", "=", "AbstractRegister", ".", "next_power_of_2", "(", "\n", "(", "(", "len", "(", "template_image", ")", "//", "self", ".", "percent_pixels", ")", "*", "100", ")", "\n", ")", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"src.registers.gms_register.py - percent of used pixels: {self.percent_pixels}\\n\"", "\n", "f\"- Original number of pixel: {np.prod(template_image.shape)}\\n\"", "\n", "f\"- Number of pixels after GMS sampling: {num_pixels}\"", "\n", ")", "\n", "random_idx", "=", "rng", ".", "choice", "(", "\n", "jacobian", ".", "shape", "[", "0", "]", ",", "size", "=", "num_pixels", ",", "p", "=", "grad_norm_probabilities", ",", "replace", "=", "False", "\n", ")", "\n", "\n", "jacobian", "=", "jacobian", "[", "random_idx", "]", "\n", "template_image", "=", "template_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "random_idx", "]", "\n", "warped_image", "=", "warped_image", ".", "reshape", "(", "-", "1", ",", "1", ")", "[", "random_idx", "]", "\n", "\n", "h", "=", "np", ".", "dot", "(", "jacobian", ".", "T", ",", "jacobian", ")", "\n", "\n", "h", "+=", "np", ".", "diag", "(", "alpha", "*", "np", ".", "diagonal", "(", "h", ")", ")", "\n", "joint_computation", "=", "self", ".", "joint_computation", ".", "joint_mm_ssd", "(", "\n", "s", "=", "jacobian", ".", "T", ",", "template", "=", "template_image", "\n", ")", "\n", "\n", "h_inv", "=", "np", ".", "linalg", ".", "inv", "(", "h", ")", "\n", "\n", "private_computation", "=", "jacobian", ".", "T", "@", "warped_image", "\n", "result", "=", "(", "h_inv", "@", "(", "private_computation", "-", "joint_computation", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.__init__": [[17, 24], ["src.models.abstract_model.AbstractModel.__init__", "cubic_spline.CubicSpline.__basis"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.__basis"], ["def", "__init__", "(", "self", ",", "coordinates", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the model.\n        :param coordinates:\n        \"\"\"", "\n", "AbstractModel", ".", "__init__", "(", "self", ",", "coordinates", ")", "\n", "self", ".", "__basis", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.identity": [[25, 32], ["numpy.zeros"], "methods", ["None"], ["", "@", "property", "\n", "def", "identity", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the identity warp field.\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "zeros", "(", "self", ".", "basis", ".", "shape", "[", "1", "]", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.number_parameters": [[33, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "number_parameters", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"Returns the number of parameters.\"\"\"", "\n", "return", "self", ".", "basis", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.__basis": [[38, 79], ["hydra.utils.log.info", "numpy.zeros", "numpy.zeros", "range", "range", "range", "scipy.bspline", "scipy.bspline.flatten", "scipy.bspline", "scipy.bspline.flatten", "range", "numpy.array", "basis.append"], "methods", ["None"], ["", "def", "__basis", "(", "self", ",", "order", "=", "3", ",", "divisions", "=", "5", ",", "spacing", ":", "Optional", "[", "int", "]", "=", "5", ")", ":", "\n", "\n", "        ", "\"\"\"\n        Computes the spline tensor product and stores the products, as basis\n        vectors.\n        Parameters\n        ----------\n        order: int\n            B-spline order, optional.\n        divisions: int, optional.\n            Number of spline knots.\n        \"\"\"", "\n", "\n", "shape", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "shape", "\n", "grid", "=", "self", ".", "coordinates", ".", "tensor", "\n", "spacing", "=", "shape", "[", "1", "]", "//", "divisions", "if", "spacing", "is", "None", "else", "spacing", "\n", "x_knots", "=", "shape", "[", "1", "]", "//", "spacing", "\n", "y_knots", "=", "shape", "[", "0", "]", "//", "spacing", "\n", "\n", "hydra", ".", "utils", ".", "log", ".", "info", "(", "\n", "f\"Shape of the image: {self.coordinates.tensor[0].shape} - Number of control points: x {x_knots} - y {y_knots} - Spacing x {spacing} - Spacing y {spacing}\"", "\n", ")", "\n", "\n", "qx", "=", "np", ".", "zeros", "(", "(", "grid", "[", "0", "]", ".", "size", ",", "x_knots", ")", ")", "\n", "qy", "=", "np", ".", "zeros", "(", "(", "grid", "[", "0", "]", ".", "size", ",", "y_knots", ")", ")", "\n", "\n", "for", "index", "in", "range", "(", "0", ",", "x_knots", ")", ":", "\n", "# Compute the basis vectors for the x-coordinate.", "\n", "            ", "bx", "=", "signal", ".", "bspline", "(", "grid", "[", "1", "]", "/", "spacing", "-", "index", ",", "order", ")", "\n", "qx", "[", ":", ",", "index", "]", "=", "bx", ".", "flatten", "(", ")", "\n", "\n", "", "for", "index", "in", "range", "(", "0", ",", "y_knots", ")", ":", "\n", "# Compute the basis vectors for the y-coordinate.", "\n", "            ", "by", "=", "signal", ".", "bspline", "(", "grid", "[", "0", "]", "/", "spacing", "-", "index", ",", "order", ")", "\n", "qy", "[", ":", ",", "index", "]", "=", "by", ".", "flatten", "(", ")", "\n", "\n", "", "basis", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "x_knots", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "0", ",", "y_knots", ")", ":", "\n", "                ", "basis", ".", "append", "(", "qx", "[", ":", ",", "j", "]", "*", "qy", "[", ":", ",", "k", "]", ")", "\n", "", "", "self", ".", "basis", "=", "np", ".", "array", "(", "basis", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.estimate": [[80, 91], ["numpy.linalg.pinv", "numpy.hstack", "numpy.dot", "numpy.dot", "warp[].flatten", "warp[].flatten"], "methods", ["None"], ["", "def", "estimate", "(", "self", ",", "warp", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Estimates the best fit parameters that define a warp field.\n        :param warp: deformation field\n        :return: model parameters\n        \"\"\"", "\n", "\n", "inv_b", "=", "np", ".", "linalg", ".", "pinv", "(", "self", ".", "basis", ")", "\n", "\n", "return", "np", ".", "hstack", "(", "\n", "(", "np", ".", "dot", "(", "inv_b", ",", "warp", "[", "1", "]", ".", "flatten", "(", ")", ")", ",", "np", ".", "dot", "(", "inv_b", ",", "warp", "[", "0", "]", ".", "flatten", "(", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.transform": [[93, 112], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot().reshape", "numpy.dot().reshape", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "p", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Applies an spline transformation to image coordinates.\n        :param p: model parameters\n        :return: deformation coordinates\n        \"\"\"", "\n", "\n", "px", "=", "np", ".", "array", "(", "p", "[", "0", ":", "self", ".", "number_parameters", "]", ")", "\n", "py", "=", "np", ".", "array", "(", "p", "[", "self", ".", "number_parameters", ":", ":", "]", ")", "\n", "\n", "shape", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "shape", "\n", "\n", "# FIXME: Inverse of a warp field needs to be derived and put in here,", "\n", "#        clearly a multiplication by -1 is not a good approach.", "\n", "\n", "return", "-", "1.0", "*", "np", ".", "array", "(", "\n", "[", "\n", "np", ".", "dot", "(", "self", ".", "basis", ",", "py", ")", ".", "reshape", "(", "shape", ")", ",", "\n", "np", ".", "dot", "(", "self", ".", "basis", ",", "px", ")", ".", "reshape", "(", "shape", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.cubic_spline.CubicSpline.jacobian": [[115, 130], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "jacobian", "(", "self", ",", "p", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Evaluates the Jacobian matrix of the model.\n        :param p: model parameters\n        :return: derivative of the model with respect to the parameters\n        \"\"\"", "\n", "\n", "dx", "=", "np", ".", "zeros", "(", "(", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "size", ",", "2", "*", "self", ".", "number_parameters", ")", ")", "\n", "\n", "dy", "=", "np", ".", "zeros", "(", "(", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "size", ",", "2", "*", "self", ".", "number_parameters", ")", ")", "\n", "\n", "dx", "[", ":", ",", "0", ":", "self", ".", "number_parameters", "]", "=", "self", ".", "basis", "\n", "dy", "[", ":", ",", "self", ".", "number_parameters", ":", ":", "]", "=", "self", ".", "basis", "\n", "\n", "return", "dx", ",", "dy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.__init__": [[14, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "coordinates", ":", "Coordinates2D", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Initializes the model.\n        :param coordinates:\n        \"\"\"", "\n", "self", ".", "coordinates", "=", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.fit": [[21, 30], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "p0", ":", "np", ".", "ndarray", ",", "p1", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Estimates the best fit parameters that define a warp field, which\n        deforms feature points p0 to p1.\n        :param p0: image features (points)\n        :param p1: template features (points)\n        :return: Model parameters\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.scale": [[31, 41], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scale", "(", "p", ":", "np", ".", "ndarray", ",", "factor", ":", "float", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Scales a transformation by a factor.\n        :param p: model parameters\n        :param factor: scaling factor\n        :return: scaled model parameters\n        \"\"\"", "\n", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.estimate": [[42, 50], ["None"], "methods", ["None"], ["", "def", "estimate", "(", "self", ",", "warp", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Estimates the best fit parameters that define a warp field.\n\n        :param warp: deformation field\n        :return: model parameters\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.warp": [[51, 62], ["abstract_model.AbstractModel.transform"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.transform"], ["", "def", "warp", "(", "self", ",", "parameters", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Computes the warp field given model parameters.\n        :param parameters: model parameters\n        :return: deformation field\n        \"\"\"", "\n", "\n", "displacement", "=", "self", ".", "transform", "(", "parameters", ")", "\n", "\n", "# Approximation of the inverse (samplers work on inverse warps).", "\n", "return", "self", ".", "coordinates", ".", "tensor", "+", "displacement", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.transform": [[63, 71], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "transform", "(", "self", ",", "parameters", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        A geometric transformation of coordinates.\n        :param parameters: model parameters\n        :return: deformation coordinates\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.abstract_model.AbstractModel.jacobian": [[72, 79], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "jacobian", "(", "self", ",", "p", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Evaluates the derivative of deformation model with respect to the\n        coordinates.\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.__init__": [[18, 20], ["src.models.abstract_model.AbstractModel.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["def", "__init__", "(", "self", ",", "coordinates", ":", "Coordinates2D", ")", "->", "None", ":", "\n", "        ", "AbstractModel", ".", "__init__", "(", "self", ",", "coordinates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.identity": [[21, 28], ["numpy.zeros"], "methods", ["None"], ["", "@", "property", "\n", "def", "identity", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the identity affine transformation.\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "zeros", "(", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.scale": [[29, 40], ["p.copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scale", "(", "p", ":", "np", ".", "ndarray", ",", "factor", ":", "float", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Scales an affine transformation by a factor.\n        :param p: model parameters\n        :param factor: scaling factor\n        :return: scaled model parameters\n        \"\"\"", "\n", "pHat", "=", "p", ".", "copy", "(", ")", "\n", "pHat", "[", "4", ":", "]", "*=", "factor", "\n", "return", "pHat", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.fit": [[41, 76], ["numpy.ones", "numpy.ones", "numpy.dot", "numpy.array", "numpy.sqrt().sum", "numpy.linalg.pinv", "len", "len", "numpy.dot", "numpy.sqrt"], "methods", ["None"], ["", "def", "fit", "(", "\n", "self", ",", "p0", ":", "np", ".", "ndarray", ",", "p1", ":", "np", ".", "ndarray", ",", "lmatrix", ":", "bool", "=", "False", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Estimates the best fit parameters that define a warp field, which\n        deforms feature points p0 to p1.\n        :param p0: image features (points)\n        :param p1: template features (points)\n        :param lmatrix:\n        :return: parmaters: model parameters, error: sum of RMS error between p1 and aligned p0\n        \"\"\"", "\n", "\n", "# Solve: H*X = Y", "\n", "# ---------------------", "\n", "#          H = Y*inv(X)", "\n", "\n", "X", "=", "np", ".", "ones", "(", "(", "3", ",", "len", "(", "p0", ")", ")", ")", "\n", "X", "[", "0", ":", "2", ",", ":", "]", "=", "p0", ".", "T", "\n", "\n", "Y", "=", "np", ".", "ones", "(", "(", "3", ",", "len", "(", "p0", ")", ")", ")", "\n", "Y", "[", "0", ":", "2", ",", ":", "]", "=", "p1", ".", "T", "\n", "\n", "H", "=", "np", ".", "dot", "(", "Y", ",", "np", ".", "linalg", ".", "pinv", "(", "X", ")", ")", "\n", "\n", "parameters", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "\n", "[", "H", "[", "0", ",", "0", "]", "-", "1.0", ",", "H", "[", "1", ",", "0", "]", ",", "H", "[", "0", ",", "1", "]", ",", "H", "[", "1", ",", "1", "]", "-", "1.0", ",", "H", "[", "0", ",", "2", "]", ",", "H", "[", "1", ",", "2", "]", "]", "\n", ")", "\n", "\n", "projP0", "=", "np", ".", "dot", "(", "H", ",", "X", ")", "[", "0", ":", "2", ",", ":", "]", ".", "T", "\n", "\n", "error", "=", "np", ".", "sqrt", "(", "\n", "(", "projP0", "[", ":", ",", "0", "]", "-", "p1", "[", ":", ",", "0", "]", ")", "**", "2", "+", "(", "projP0", "[", ":", ",", "1", "]", "-", "p1", "[", ":", ",", "1", "]", ")", "**", "2", "\n", ")", ".", "sum", "(", ")", "\n", "\n", "return", "parameters", ",", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.transform": [[77, 95], ["numpy.array", "numpy.array", "numpy.dot", "numpy.linalg.inv", "displacement[].reshape", "displacement[].reshape"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "p", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        An affine transformation of coordinates.\n        :param p: model parameters\n        :return: deformation coordinates\n        \"\"\"", "\n", "\n", "T", "=", "np", ".", "array", "(", "[", "[", "p", "[", "0", "]", "+", "1.0", ",", "p", "[", "2", "]", ",", "p", "[", "4", "]", "]", ",", "[", "p", "[", "1", "]", ",", "p", "[", "3", "]", "+", "1.0", ",", "p", "[", "5", "]", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "displacement", "=", "(", "\n", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "T", ")", ",", "self", ".", "coordinates", ".", "homogenous", ")", "\n", "-", "self", ".", "coordinates", ".", "homogenous", "\n", ")", "\n", "\n", "shape", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "shape", "\n", "\n", "return", "np", ".", "array", "(", "\n", "[", "displacement", "[", "1", "]", ".", "reshape", "(", "shape", ")", ",", "displacement", "[", "0", "]", ".", "reshape", "(", "shape", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.jacobian": [[97, 116], ["numpy.zeros", "numpy.zeros", "affine.Affine.coordinates.tensor[].flatten", "affine.Affine.coordinates.tensor[].flatten", "affine.Affine.coordinates.tensor[].flatten", "affine.Affine.coordinates.tensor[].flatten"], "methods", ["None"], ["", "def", "jacobian", "(", "self", ",", "p", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Evaluates the Jacobian of the affine transformation.\n        :param p: model parameters\n        :return: derivative of the affine transformation\n        \"\"\"", "\n", "\n", "dx", "=", "np", ".", "zeros", "(", "(", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "size", ",", "6", ")", ")", "\n", "dy", "=", "np", ".", "zeros", "(", "(", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "size", ",", "6", ")", ")", "\n", "\n", "dx", "[", ":", ",", "0", "]", "=", "self", ".", "coordinates", ".", "tensor", "[", "1", "]", ".", "flatten", "(", ")", "\n", "dx", "[", ":", ",", "2", "]", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "flatten", "(", ")", "\n", "dx", "[", ":", ",", "4", "]", "=", "1.0", "\n", "\n", "dy", "[", ":", ",", "1", "]", "=", "self", ".", "coordinates", ".", "tensor", "[", "1", "]", ".", "flatten", "(", ")", "\n", "dy", "[", ":", ",", "3", "]", "=", "self", ".", "coordinates", ".", "tensor", "[", "0", "]", ".", "flatten", "(", ")", "\n", "dy", "[", ":", ",", "5", "]", "=", "1.0", "\n", "\n", "return", "dx", ",", "dy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.ssd.SSD.__init__": [[12, 14], ["src.metrics.abstract_metric.AbstractMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__"], ["def", "__init__", "(", "self", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.ssd.SSD.get_jacobian": [[15, 49], ["numpy.gradient", "numpy.linalg.norm().flatten", "grad[].flatten", "grad[].flatten", "model.jacobian", "numpy.zeros_like", "range", "numpy.linalg.norm", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.models.affine.Affine.jacobian"], ["", "def", "get_jacobian", "(", "\n", "self", ",", "model", ":", "AbstractModel", ",", "warped_image", ":", "np", ".", "ndarray", ",", "p", "=", "None", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"\n        Computes the jacobian dP/dE.\n\n        Parameters\n        ----------\n        model: deformation model\n            A particular deformation model.\n        warped_image: nd-array\n            Input image after warping.\n        p : optional list\n            Current warp parameters\n\n        Returns\n        -------\n        jacobian: nd-array\n            A jacobain matrix. (m x n)\n                | where: m = number of image pixels,\n                |        p = number of parameters.\n        \"\"\"", "\n", "grad", "=", "np", ".", "gradient", "(", "warped_image", ")", "\n", "grad_norm", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "grad", ")", ",", "axis", "=", "0", ")", ".", "flatten", "(", ")", "\n", "\n", "dIx", "=", "grad", "[", "1", "]", ".", "flatten", "(", ")", "\n", "dIy", "=", "grad", "[", "0", "]", ".", "flatten", "(", ")", "\n", "\n", "dPx", ",", "dPy", "=", "model", ".", "jacobian", "(", "p", ")", "\n", "\n", "J", "=", "np", ".", "zeros_like", "(", "dPx", ")", "\n", "for", "index", "in", "range", "(", "0", ",", "dPx", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "J", "[", ":", ",", "index", "]", "=", "dPx", "[", ":", ",", "index", "]", "*", "dIx", "+", "dPy", "[", ":", ",", "index", "]", "*", "dIy", "\n", "", "return", "J", ",", "grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.ssd.SSD.error": [[50, 68], ["warped_image.flatten", "template_image.flatten"], "methods", ["None"], ["", "def", "error", "(", "self", ",", "warped_image", ":", "np", ".", "ndarray", ",", "template_image", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Evaluates the residual metric.\n\n        Parameters\n        ----------\n        warped_image: nd-array\n            Input image after warping.\n        template_image: nd-array\n            Template image.\n\n        Returns\n        -------\n        error: nd-array\n           Metric evaluated over all image coordinates.\n        \"\"\"", "\n", "result", ":", "np", ".", "ndarray", "=", "warped_image", ".", "flatten", "(", ")", "-", "template_image", ".", "flatten", "(", ")", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.abstract_metric.AbstractMetric.error": [[11, 30], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "error", "(", "self", ",", "warped_image", ":", "np", ".", "ndarray", ",", "template_image", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Evaluates the metric.\n\n        Parameters\n        ----------\n        warped_image: nd-array\n            Input image after warping.\n        template_image: nd-array\n            Template image.\n\n        Returns\n        -------\n        error: nd-array\n           Metric evaluated over all image coordinates.\n        \"\"\"", "\n", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.abstract_metric.AbstractMetric.get_jacobian": [[31, 53], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_jacobian", "(", "\n", "self", ",", "model", ":", "AbstractModel", ",", "warped_image", ":", "np", ".", "ndarray", ",", "p", "=", "None", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Computes the jacobian dP/dE.\n\n        Parameters\n        ----------\n        model: deformation model\n            A particular deformation model.\n        warped_image: nd-array\n            Input image after warping.\n        p : optional list\n            Current warp parameters\n\n        Returns\n        -------\n        jacobian: nd-array\n           A derivative of model parameters with respect to the metric.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.metrics.abstract_metric.AbstractMetric.__str__": [[54, 56], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Metric: {0} \\n {1}\"", ".", "format", "(", "self", ".", "METRIC", ",", "self", ".", "DESCRIPTION", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.__init__": [[7, 17], ["numpy.zeros", "coordinates.Coordinates2D.tensor[].flatten", "coordinates.Coordinates2D.tensor[].flatten"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "domain", ":", "List", "[", "int", "]", ",", "spacing", ":", "Optional", "[", "float", "]", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "spacing", ":", "float", "=", "1.0", "if", "not", "spacing", "else", "spacing", "\n", "self", ".", "domain", "=", "domain", "\n", "self", ".", "_tensor", ":", "np", ".", "ndarray", "=", "np", ".", "mgrid", "[", "0.0", ":", "domain", "[", "1", "]", ",", "0.0", ":", "domain", "[", "3", "]", "]", "\n", "\n", "self", ".", "_homogenous", ":", "np", ".", "ndarray", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "tensor", "[", "0", "]", ".", "size", ")", ")", "\n", "self", ".", "homogenous", "[", "0", "]", ":", "np", ".", "ndarray", "=", "self", ".", "tensor", "[", "1", "]", ".", "flatten", "(", ")", "\n", "self", ".", "homogenous", "[", "1", "]", ":", "np", ".", "ndarray", "=", "self", ".", "tensor", "[", "0", "]", ".", "flatten", "(", ")", "\n", "self", ".", "homogenous", "[", "2", "]", ":", "float", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.homogenous": [[18, 21], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "homogenous", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_homogenous", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.coordinates.Coordinates2D.tensor": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "tensor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.preprocessing.linear": [[9, 13], ["numpy.array", "numpy.array", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open"], "function", ["None"], ["def", "linear", "(", "image_path", ":", "str", ",", "template_path", ":", "str", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "template", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "template_path", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "image", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "return", "image", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.preprocessing.non_linear": [[15, 28], ["numpy.nan_to_num", "numpy.nan_to_num", "nibabel.load().get_fdata", "nibabel.load().get_fdata", "nibabel.load", "nibabel.load"], "function", ["None"], ["", "def", "non_linear", "(", "image_path", ":", "str", ",", "template_path", ":", "str", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"\n\n    :param image_path: path to the image\n    :param template_path:   path to the template\n    :return:\n    \"\"\"", "\n", "template", ":", "np", ".", "ndarray", "=", "np", ".", "nan_to_num", "(", "nib", ".", "load", "(", "template_path", ")", ".", "get_fdata", "(", ")", "[", ":", ",", ":", "]", ")", "\n", "template", "[", "template", "<", "1e-3", "]", "=", "0.0", "\n", "image", ":", "np", ".", "ndarray", "=", "np", ".", "nan_to_num", "(", "nib", ".", "load", "(", "image_path", ")", ".", "get_fdata", "(", ")", "[", ":", ",", ":", "]", ")", "\n", "image", "[", "image", "<", "1e-3", "]", "=", "0.0", "\n", "\n", "return", "image", ",", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.preprocessing.non_linear_supplementary": [[30, 36], ["numpy.array", "numpy.array", "src.registers.abstract_register.RegisterData._smooth", "src.registers.abstract_register.RegisterData._smooth", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth", "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.registers.abstract_register.RegisterData._smooth"], ["", "def", "non_linear_supplementary", "(", "image_path", ":", "str", ",", "template_path", ":", "str", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "template", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "template_path", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "image", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "template", "=", "RegisterData", ".", "_smooth", "(", "template", ",", "0.5", ")", "\n", "image", "=", "RegisterData", ".", "_smooth", "(", "image", ",", "0.5", ")", "\n", "return", "image", ",", "template", "\n", "", ""]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.resize": [[17, 41], ["image_pil.resize", "PIL.Image.new", "Image.new.paste", "Image.new.convert", "round", "round", "round", "round"], "function", ["home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.resize"], ["def", "resize", "(", "image_pil", ",", "width", ",", "height", ")", ":", "\n", "    ", "\"\"\"\n    Resize PIL image keeping ratio and using white background.\n\n    :param image_pil: the image to resize\n    :param width: the width of the new image\n    :param height: the height of the new image\n    :return: the resized image\n    \"\"\"", "\n", "ratio_w", "=", "width", "/", "image_pil", ".", "width", "\n", "ratio_h", "=", "height", "/", "image_pil", ".", "height", "\n", "if", "ratio_w", "<", "ratio_h", ":", "\n", "# It must be fixed by width", "\n", "        ", "resize_width", "=", "width", "\n", "resize_height", "=", "round", "(", "ratio_w", "*", "image_pil", ".", "height", ")", "\n", "", "else", ":", "\n", "# Fixed by height", "\n", "        ", "resize_width", "=", "round", "(", "ratio_h", "*", "image_pil", ".", "width", ")", "\n", "resize_height", "=", "height", "\n", "", "image_resize", "=", "image_pil", ".", "resize", "(", "(", "resize_width", ",", "resize_height", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "background", "=", "Image", ".", "new", "(", "\"RGBA\"", ",", "(", "width", ",", "height", ")", ",", "(", "255", ",", "255", ",", "255", ",", "255", ")", ")", "\n", "offset", "=", "(", "round", "(", "(", "width", "-", "resize_width", ")", "/", "2", ")", ",", "round", "(", "(", "height", "-", "resize_height", ")", "/", "2", ")", ")", "\n", "background", ".", "paste", "(", "image_resize", ",", "offset", ")", "\n", "return", "background", ".", "convert", "(", "\"L\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_name": [[43, 45], ["None"], "function", ["None"], ["", "def", "get_name", "(", "cfg", ":", "DictConfig", ")", "->", "str", ":", "\n", "    ", "return", "cfg", ".", "core", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_group": [[47, 50], ["None"], "function", ["None"], ["", "def", "get_group", "(", "cfg", ":", "DictConfig", ")", "->", "str", ":", "\n", "    ", "group_name", "=", "f\"{cfg.joint_computation.name}_{cfg.register.name}\"", "\n", "return", "group_name", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.save_resources": [[52, 63], ["omegaconf.OmegaConf.to_yaml", "open", "numpy.save", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "save_resources", "(", "cfg", ":", "omegaconf", ".", "DictConfig", ",", "displacement", ":", "np", ".", "ndarray", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Save the resources used by the experiment.\n    :param cfg:\n    :param displacement:\n    :return:\n    \"\"\"", "\n", "yaml_conf", ":", "str", "=", "OmegaConf", ".", "to_yaml", "(", "cfg", "=", "cfg", ")", "\n", "(", "Path", "(", "wandb", ".", "run", ".", "dir", ")", "/", "\"hparams.yaml\"", ")", ".", "write_text", "(", "yaml_conf", ")", "\n", "with", "open", "(", "(", "Path", "(", "wandb", ".", "run", ".", "dir", ")", "/", "\"displacement.npy\"", ")", ",", "\"wb\"", ")", "as", "handle", ":", "\n", "        ", "np", ".", "save", "(", "handle", ",", "displacement", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.mse": [[65, 73], ["numpy.sqrt", "numpy.sqrt", "numpy.mean"], "function", ["None"], ["", "", "def", "mse", "(", "displacement_clear", ",", "displacement_pp", ",", "pixel_size", "=", "3.18", "*", "2.02", ")", ":", "\n", "\n", "    ", "displacement_diff", "=", "displacement_clear", "-", "displacement_pp", "\n", "norm", "=", "np", ".", "sqrt", "(", "(", "displacement_diff", "[", "0", "]", ")", "**", "2", "+", "(", "displacement_diff", "[", "1", "]", ")", "**", "2", ")", "\n", "avg", "=", "np", ".", "mean", "(", "norm", ")", "*", "pixel_size", "\n", "error", "=", "np", ".", "sqrt", "(", "avg", ")", "\n", "#error *= pixel_size", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.log_statistics": [[74, 109], ["logger.log", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum", "sum"], "function", ["None"], ["", "def", "log_statistics", "(", "\n", "logger", ",", "\n", "iterations", ",", "\n", "error", ",", "\n", "disp_error", ",", "\n", "megabytes_party_1", ",", "\n", "megabytes_party_2", ",", "\n", "times_party_1", ",", "\n", "times_party_2", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Log the statistics of the experiment.\n    :param logger:\n    :param iterations:\n    :param error:\n    :param megabytes_party_1:\n    :param megabytes_party_2:\n    :param times_party_1:\n    :param times_party_2:\n    :return:\n    \"\"\"", "\n", "\n", "logger", ".", "log", "(", "\n", "{", "\n", "\"Time - Party 1 (s)\"", ":", "sum", "(", "times_party_1", ")", ",", "\n", "\"Time - Party 2 (s)\"", ":", "sum", "(", "times_party_2", ")", ",", "\n", "\"Comm - Party 1 (MB)\"", ":", "sum", "(", "megabytes_party_1", ")", ",", "\n", "\"Comm - Party 2 (MB)\"", ":", "sum", "(", "megabytes_party_2", ")", ",", "\n", "\"Intensity error (SSD)\"", ":", "error", ",", "\n", "\"Displacement error (RMSE) mm\"", ":", "disp_error", ",", "\n", "\"Num. Iterations\"", ":", "sum", "(", "iterations", ")", ",", "\n", "\"Time for one iteration - Party 1 (s)\"", ":", "sum", "(", "times_party_1", ")", "/", "sum", "(", "iterations", ")", ",", "\n", "\"Time for one iteration - Party 2 (s)\"", ":", "sum", "(", "times_party_2", ")", "/", "sum", "(", "iterations", ")", ",", "\n", "\"Comm for one iteration - Party 1 (MB)\"", ":", "sum", "(", "megabytes_party_1", ")", "/", "sum", "(", "iterations", ")", ",", "\n", "\"Comm for one iteration - Party 2 (MB)\"", ":", "sum", "(", "megabytes_party_2", ")", "/", "sum", "(", "iterations", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.get_env": [[113, 137], ["KeyError", "ValueError"], "function", ["None"], ["", "def", "get_env", "(", "env_name", ":", "str", ",", "default", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "str", ":", "\n", "    ", "\"\"\"\n    Safely read an environment variable.\n    Raises errors if it is not defined or it is empty.\n\n    :param env_name: the name of the environment variable\n    :param default: the default (optional) value for the environment variable\n\n    :return: the value of the environment variable\n    \"\"\"", "\n", "if", "env_name", "not", "in", "os", ".", "environ", ":", "\n", "        ", "if", "default", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "f\"{env_name} not defined and no default value is present!\"", ")", "\n", "", "return", "default", "\n", "\n", "", "env_value", ":", "str", "=", "os", ".", "environ", "[", "env_name", "]", "\n", "if", "not", "env_value", ":", "\n", "        ", "if", "default", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"{env_name} has yet to be configured and no default value is present!\"", "\n", ")", "\n", "", "return", "default", "\n", "\n", "", "return", "env_value", "\n", "\n"]], "home.repos.pwc.inspect_result.rtaiello_pp_image_registration.common.utils.load_envs": [[139, 150], ["dotenv.load_dotenv"], "function", ["None"], ["", "def", "load_envs", "(", "env_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Load all the environment variables defined in the `env_file`.\n    This is equivalent to `. env_file` in bash.\n\n    It is possible to define all the system specific variables in the `env_file`.\n\n    :param env_file: the file that defines the environment variables to use. If None\n                     it searches for a `.env` file in the project.\n    \"\"\"", "\n", "dotenv", ".", "load_dotenv", "(", "dotenv_path", "=", "env_file", ",", "override", "=", "True", ")", "\n", "\n"]]}