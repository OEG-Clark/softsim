{"home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.eval_adaptiveCS.data_loader": [[89, 119], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torchvision.datasets.CIFAR10", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "data_loader", "(", ")", ":", "\n", "    ", "kwopt", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "opt", ".", "cuda", "else", "{", "}", "\n", "if", "opt", ".", "dataset", "==", "'bsd500_patch'", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "opt", ".", "datapath", "+", "'val_64x64'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "test_dataset", "=", "datasets", ".", "MNIST", "(", "'./data'", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "\n", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwopt", ")", "\n", "\n", "return", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.eval_adaptiveCS.evaluation": [[121, 335], ["testloader.__iter__().__next__", "input.numpy.numpy", "numpy.load", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "lapgan.LAPGAN_Generator_level1", "lapgan.LAPGAN_Discriminator_level1", "lapgan.LAPGAN_Generator_level2", "lapgan.LAPGAN_Discriminator_level2", "lapgan.LAPGAN_Generator_level3", "lapgan.LAPGAN_Discriminator_level3", "lapgan.LAPGAN_Generator_level4", "lapgan.LAPGAN_Discriminator_level4", "lapgan.LAPGAN_Generator_level1.load_state_dict", "lapgan.LAPGAN_Generator_level2.load_state_dict", "lapgan.LAPGAN_Generator_level3.load_state_dict", "lapgan.LAPGAN_Generator_level4.load_state_dict", "enumerate", "print", "criterion_mse.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lapgan.LAPGAN_Generator_level1.eval", "lapgan.LAPGAN_Discriminator_level1.eval", "lapgan.LAPGAN_Generator_level2.eval", "lapgan.LAPGAN_Discriminator_level2.eval", "lapgan.LAPGAN_Generator_level3.eval", "lapgan.LAPGAN_Discriminator_level3.eval", "lapgan.LAPGAN_Generator_level4.eval", "lapgan.LAPGAN_Discriminator_level4.eval", "data.numpy", "range", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level1.", "lapgan.LAPGAN_Generator_level2.", "lapgan.LAPGAN_Generator_level3.", "lapgan.LAPGAN_Generator_level4.", "torch.autograd.Variable", "criterion_mse", "torchvision.save_image", "torchvision.save_image", "testloader.__iter__", "lapgan.LAPGAN_Generator_level1.cuda", "lapgan.LAPGAN_Discriminator_level1.cuda", "lapgan.LAPGAN_Generator_level2.cuda", "lapgan.LAPGAN_Discriminator_level2.cuda", "lapgan.LAPGAN_Generator_level3.cuda", "lapgan.LAPGAN_Discriminator_level3.cuda", "lapgan.LAPGAN_Generator_level4.cuda", "lapgan.LAPGAN_Discriminator_level4.cuda", "torch.FloatTensor.cuda", "lapnet1_gen.cuda", "lapnet2_gen.cuda", "lapnet3_gen.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "print", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "sensing_matrix1[].dot", "sensing_matrix2[].dot", "sensing_matrix3[].dot", "sensing_matrix4[].dot", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "len"], "function", ["None"], ["", "def", "evaluation", "(", "testloader", ")", ":", "\n", "# Initialize variables", "\n", "    ", "input", ",", "_", "=", "testloader", ".", "__iter__", "(", ")", ".", "__next__", "(", ")", "\n", "input", "=", "input", ".", "numpy", "(", ")", "\n", "sz_input", "=", "input", ".", "shape", "\n", "cr1", "=", "8", "*", "opt", ".", "cr", "\n", "cr2", "=", "4", "*", "opt", ".", "cr", "\n", "cr3", "=", "2", "*", "opt", ".", "cr", "\n", "cr4", "=", "opt", ".", "cr", "\n", "channels", "=", "sz_input", "[", "1", "]", "\n", "n", "=", "sz_input", "[", "2", "]", "**", "2", "\n", "m1", "=", "n", "/", "cr1", "\n", "m2", "=", "n", "/", "cr2", "\n", "m3", "=", "n", "/", "cr3", "\n", "m4", "=", "n", "/", "cr4", "\n", "img_size1", "=", "sz_input", "[", "3", "]", "/", "8", "\n", "img_size2", "=", "sz_input", "[", "3", "]", "/", "4", "\n", "img_size3", "=", "sz_input", "[", "3", "]", "/", "2", "\n", "img_size4", "=", "sz_input", "[", "3", "]", "\n", "\n", "sensing_matrix4", "=", "np", ".", "load", "(", "'sensing_matrix_cr'", "+", "str", "(", "opt", ".", "cr", ")", "+", "'.npy'", ")", "\n", "#sensing_matrix4 = randn(channels, m4, n)", "\n", "sensing_matrix3", "=", "sensing_matrix4", "[", ":", ",", ":", "m3", ",", ":", "]", "\n", "sensing_matrix2", "=", "sensing_matrix4", "[", ":", ",", ":", "m2", ",", ":", "]", "\n", "sensing_matrix1", "=", "sensing_matrix4", "[", ":", ",", ":", "m1", ",", ":", "]", "\n", "\n", "g1_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m1", ")", "\n", "g2_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m2", ")", "\n", "g3_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m3", ")", "\n", "g4_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m4", ")", "\n", "\n", "g1_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size1", ",", "img_size1", ")", "\n", "g2_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size2", ",", "img_size2", ")", "\n", "g3_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size3", ",", "img_size3", ")", "\n", "g4_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size4", ",", "img_size4", ")", "\n", "\n", "y2", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m2", ")", "\n", "y3", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m3", ")", "\n", "y4", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m4", ")", "\n", "\n", "# Instantiate models", "\n", "lapnet1_gen", "=", "lapgan", ".", "LAPGAN_Generator_level1", "(", "channels", ",", "channels", "*", "m1", ",", "opt", ".", "ngpu", ")", "\n", "lapnet1_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level1", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet2_gen", "=", "lapgan", ".", "LAPGAN_Generator_level2", "(", "channels", ",", "channels", "*", "m2", ",", "opt", ".", "ngpu", ")", "\n", "lapnet2_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level2", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet3_gen", "=", "lapgan", ".", "LAPGAN_Generator_level3", "(", "channels", ",", "channels", "*", "m3", ",", "opt", ".", "ngpu", ")", "\n", "lapnet3_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level3", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet4_gen", "=", "lapgan", ".", "LAPGAN_Generator_level4", "(", "channels", ",", "channels", "*", "m4", ",", "opt", ".", "ngpu", ")", "\n", "lapnet4_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level4", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "lapnet1_gen", ".", "cuda", "(", ")", ",", "lapnet1_disc", ".", "cuda", "(", ")", "\n", "lapnet2_gen", ".", "cuda", "(", ")", ",", "lapnet2_disc", ".", "cuda", "(", ")", "\n", "lapnet3_gen", ".", "cuda", "(", ")", ",", "lapnet3_disc", ".", "cuda", "(", ")", "\n", "lapnet4_gen", ".", "cuda", "(", ")", ",", "lapnet4_disc", ".", "cuda", "(", ")", "\n", "\n", "criterion_mse", ".", "cuda", "(", ")", "\n", "\n", "g1_input", ",", "g2_input", ",", "g3_input", ",", "g4_input", "=", "g1_input", ".", "cuda", "(", ")", ",", "g2_input", ".", "cuda", "(", ")", ",", "g3_input", ".", "cuda", "(", ")", ",", "g4_input", ".", "cuda", "(", ")", "\n", "g1_target", ",", "g2_target", ",", "g3_target", ",", "g4_target", "=", "g1_target", ".", "cuda", "(", ")", ",", "g2_target", ".", "cuda", "(", ")", ",", "g3_target", ".", "cuda", "(", ")", ",", "g4_target", ".", "cuda", "(", ")", "\n", "y2", ",", "y3", ",", "y4", "=", "y2", ".", "cuda", "(", ")", ",", "y3", ".", "cuda", "(", ")", ",", "y4", ".", "cuda", "(", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'bsd500_patch'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "7", "# 0.0264", "\n", "level2_iter", "=", "11", "# 0.0157", "\n", "level3_iter", "=", "12", "# 0.0090", "\n", "level4_iter", "=", "1", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "16", "# 0.0353 18  # 14", "\n", "level2_iter", "=", "16", "# 0.0230 16  # 27", "\n", "level3_iter", "=", "16", "# 0.0144 8  # 27", "\n", "level4_iter", "=", "21", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "6", "# 0.0450", "\n", "level2_iter", "=", "2", "# 0.0389", "\n", "level3_iter", "=", "1", "# 0.0318", "\n", "level4_iter", "=", "93", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "5", "# 0.0508", "\n", "level2_iter", "=", "0", "# 0.0420 5", "\n", "level3_iter", "=", "0", "# 0.0339 3", "\n", "\n", "", "", "", "if", "opt", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "94", "# 0.0074", "\n", "level2_iter", "=", "36", "# 0.0052", "\n", "level3_iter", "=", "88", "\n", "level4_iter", "=", "1", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "73", "# 0.0193", "\n", "level2_iter", "=", "31", "# 0.0111 16  # 27", "\n", "level3_iter", "=", "78", "# 0.0077 8  # 27", "\n", "level4_iter", "=", "96", "# 0.0034", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "57", "# 0.0499", "\n", "level2_iter", "=", "57", "# 0.0233", "\n", "level3_iter", "=", "95", "# 0.0122", "\n", "level4_iter", "=", "83", "# 0.0059", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "34", "# 0.0771", "\n", "level2_iter", "=", "66", "# 0.0378 5", "\n", "level3_iter", "=", "99", "# 0.0177 3", "\n", "level4_iter", "=", "88", "# 0.0056", "\n", "\n", "", "", "", "if", "opt", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "28", "# 0.0126", "\n", "level2_iter", "=", "81", "# 0.0039", "\n", "level3_iter", "=", "21", "# 0.0025", "\n", "level4_iter", "=", "26", "# 0.0008", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "24", "# 0.0242", "\n", "level2_iter", "=", "33", "# 0.0102", "\n", "level3_iter", "=", "58", "# 0.0045", "\n", "level4_iter", "=", "21", "# 0.0017", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "19", "# 0.0420", "\n", "level2_iter", "=", "30", "# 0.0221", "\n", "level3_iter", "=", "44", "# 0.0111", "\n", "level4_iter", "=", "21", "# 0.0043", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "16", "# 0.0532", "\n", "level2_iter", "=", "34", "# 0.0317", "\n", "level3_iter", "=", "84", "# 0.0174", "\n", "level4_iter", "=", "16", "# 0.0078", "\n", "", "", "elif", "'wy'", "in", "opt", ".", "model", "and", "'lfusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "18", "\n", "level2_iter", "=", "16", "\n", "level3_iter", "=", "22", "\n", "level4_iter", "=", "99", "\n", "", "", "elif", "'woy'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "18", "# 0.0251", "\n", "level2_iter", "=", "7", "# 0.0376", "\n", "level3_iter", "=", "5", "# 0.0374", "\n", "level4_iter", "=", "1", "# 0.0388", "\n", "\n", "", "", "", "stage1_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "level1_iter", ")", "\n", "stage2_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "level2_iter", ")", "\n", "stage3_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "level3_iter", ")", "\n", "stage4_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "level4_iter", ")", "\n", "\n", "lapnet1_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage1_path", ")", ")", "\n", "lapnet2_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage2_path", ")", ")", "\n", "lapnet3_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage3_path", ")", ")", "\n", "lapnet4_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage4_path", ")", ")", "\n", "\n", "lapnet1_gen", ".", "eval", "(", ")", ",", "lapnet1_disc", ".", "eval", "(", ")", "\n", "lapnet2_gen", ".", "eval", "(", ")", ",", "lapnet2_disc", ".", "eval", "(", ")", "\n", "lapnet3_gen", ".", "eval", "(", ")", ",", "lapnet3_disc", ".", "eval", "(", ")", "\n", "lapnet4_gen", ".", "eval", "(", ")", ",", "lapnet4_disc", ".", "eval", "(", ")", "\n", "\n", "errD_fake_mse_total", "=", "0", "\n", "\n", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "testloader", ",", "0", ")", ":", "\n", "        ", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "            ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 1x64x64", "\n", "g4_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", ")", "# 3x64x64", "\n", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y2", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix2", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y3", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix3", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y4", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix4", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ",", "volatile", "=", "True", ")", "\n", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "y3_var", "=", "Variable", "(", "y3", ")", "\n", "y4_var", "=", "Variable", "(", "y4", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "g3_input", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "\n", "g4_input", "=", "lapnet3_gen", "(", "g3_input", ",", "y3_var", ")", "\n", "g4_output", "=", "lapnet4_gen", "(", "g4_input", ",", "y4_var", ")", "\n", "g4_target_var", "=", "Variable", "(", "g4_target", ",", "volatile", "=", "True", ")", "\n", "\n", "errD_fake_mse", "=", "criterion_mse", "(", "g4_output", ",", "g4_target_var", ")", "\n", "\n", "errD_fake_mse_total", "+=", "errD_fake_mse", "\n", "if", "idx", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "'Test: [%d/%d] errG_mse: %.4f \\n,'", "%", "(", "idx", ",", "len", "(", "testloader", ")", ",", "errD_fake_mse", ".", "data", "[", "0", "]", ")", ")", "\n", "", "'''\n        g4_target_npy = g4_target_var.cpu().data.numpy().squeeze() * 0.5 + 0.5\n        g4_output_npy = g4_output.cpu().data.numpy().squeeze() * 0.5 + 0.5\n        if opt.dataset != 'mnist':\n            g4_target_npy = np.transpose(g4_target_npy, (1, 2, 0))\n            g4_output_npy = np.transpose(g4_output_npy, (1, 2, 0))\n\n        \n        g4_target_npy = g4_target_var.cpu().data.numpy().squeeze()\n        g4_target_npy = np.transpose(g4_target_npy, (1, 2, 0))\n        g4_output_npy = g4_output.cpu().data.numpy().squeeze()\n        g4_output_npy = np.transpose(g4_output_npy, (1, 2, 0))\n        '''", "\n", "#sio.imsave('%s/%s/cr%s/%s/test/orig_%d.bmp' % (opt.outf, opt.dataset, opt.cr, opt.model, idx), g4_target_npy)", "\n", "#sio.imsave('%s/%s/cr%s/%s/test/recon_%d.bmp' % (opt.outf, opt.dataset, opt.cr, opt.model, idx), g4_output_npy)", "\n", "\n", "\n", "vutils", ".", "save_image", "(", "g4_target_var", ".", "data", ",", "'%s/%s/cr%s/%s/test/orig_%d.bmp'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "idx", ")", ",", "padding", "=", "0", ")", "\n", "vutils", ".", "save_image", "(", "g4_output", ".", "data", ",", "'%s/%s/cr%s/%s/test/recon_%d.bmp'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "idx", ")", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "", "print", "(", "'Test: average errG_mse: %.4f,'", "%", "(", "errD_fake_mse_total", ".", "data", "[", "0", "]", "/", "len", "(", "testloader", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.eval_adaptiveCS.main": [[337, 340], ["eval_adaptiveCS.data_loader", "eval_adaptiveCS.evaluation"], "function", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.data_loader", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.eval_adaptiveCS.evaluation"], ["", "def", "main", "(", ")", ":", "\n", "    ", "test_loader", "=", "data_loader", "(", ")", "\n", "evaluation", "(", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init_normal": [[95, 105], ["classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init_xavier": [[107, 117], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init_kaiming": [[119, 129], ["classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.kaiming_normal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init_orthogonal": [[131, 141], ["print", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.uniform", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "print", "(", "classname", ")", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "uniform", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init": [[143, 155], ["print", "net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "weights_init", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "    ", "print", "(", "'initialization method [%s]'", "%", "init_type", ")", "\n", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.data_loader": [[157, 237], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.LSUN", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "data_loader", "(", ")", ":", "\n", "    ", "kwopt", "=", "{", "'num_workers'", ":", "2", ",", "'pin_memory'", ":", "True", "}", "if", "opt", ".", "cuda", "else", "{", "}", "\n", "\n", "if", "opt", ".", "dataset", "==", "'lsun'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "LSUN", "(", "db_path", "=", "opt", ".", "datapath", "+", "'train/'", ",", "classes", "=", "[", "'bedroom_train'", "]", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "MNIST", "(", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "val_dataset", "=", "datasets", ".", "MNIST", "(", "'./data'", ",", "train", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'bsd500'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "'/home/user/kaixu/myGitHub/datasets/BSDS500/train-aug/'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "'/home/user/kaixu/myGitHub/datasets/SISR/val/'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'bsd500_patch'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "opt", ".", "datapath", "+", "'train_64x64'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "opt", ".", "datapath", "+", "'val_64x64'", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "opt", ".", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "]", ")", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwopt", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "opt", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwopt", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.val": [[239, 303], ["enumerate", "print", "torchvision.save_image", "torchvision.save_image", "data.numpy", "range", "torch.autograd.Variable", "criterion_mse", "data.size", "range", "lapnet1_gen", "torch.autograd.Variable", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "lapnet1_gen", "lapnet2_gen", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sensing_matrix1[].dot", "sensing_matrix2[].dot", "sensing_matrix3[].dot", "sensing_matrix4[].dot", "torch.autograd.Variable", "torch.autograd.Variable", "lapnet1_gen", "lapnet2_gen", "lapnet3_gen", "torch.autograd.Variable", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "lapnet1_gen", "lapnet2_gen", "lapnet3_gen", "lapnet4_gen", "torch.autograd.Variable", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "val", "(", "epoch", ",", "stage", ",", "channels", ",", "valloader", ",", "sensing_matrix1", ",", "sensing_matrix2", ",", "sensing_matrix3", ",", "sensing_matrix4", ",", "\n", "target", ",", "g1_input", ",", "lapnet1_gen", ",", "lapnet2_gen", ",", "lapnet3_gen", ",", "lapnet4_gen", ",", "criterion_mse", ",", "y2", ",", "y3", ",", "y4", ")", ":", "\n", "    ", "errD_fake_mse_total", "=", "0", "\n", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "valloader", ",", "0", ")", ":", "\n", "        ", "if", "data", ".", "size", "(", "0", ")", "!=", "opt", ".", "batch_size", ":", "\n", "            ", "continue", "\n", "\n", "", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "            ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 1x64x64", "\n", "\n", "if", "stage", "==", "1", ":", "\n", "                ", "target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", "[", ":", ",", ":", ":", "8", ",", ":", ":", "8", "]", ")", "\n", "", "elif", "stage", "==", "2", ":", "\n", "                ", "target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", "[", ":", ",", ":", ":", "4", ",", ":", ":", "4", "]", ")", "# 3x16x16", "\n", "", "elif", "stage", "==", "3", ":", "\n", "                ", "target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ")", "# 3x32x32", "\n", "", "elif", "stage", "==", "4", ":", "\n", "                ", "target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", ")", "# 3x64x64", "\n", "", "elif", "stage", "==", "5", ":", "\n", "                ", "target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", ")", "# 3x64x64", "\n", "\n", "", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y2", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix2", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y3", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix3", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y4", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix4", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ",", "volatile", "=", "True", ")", "\n", "if", "stage", "==", "1", ":", "\n", "            ", "output", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "target_var", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", "\n", "", "elif", "stage", "==", "2", ":", "\n", "            ", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "output", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "\n", "target_var", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", "\n", "", "elif", "stage", "==", "3", ":", "\n", "            ", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "y3_var", "=", "Variable", "(", "y3", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "g3_input", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "\n", "output", "=", "lapnet3_gen", "(", "g3_input", ",", "y3_var", ")", "\n", "target_var", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", "\n", "", "elif", "stage", "==", "4", ":", "\n", "            ", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "y3_var", "=", "Variable", "(", "y3", ")", "\n", "y4_var", "=", "Variable", "(", "y4", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "g3_input", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "\n", "g4_input", "=", "lapnet3_gen", "(", "g3_input", ",", "y3_var", ")", "\n", "output", "=", "lapnet4_gen", "(", "g4_input", ",", "y4_var", ")", "\n", "target_var", "=", "Variable", "(", "target", ",", "volatile", "=", "True", ")", "\n", "\n", "", "errD_fake_mse", "=", "criterion_mse", "(", "output", ",", "target_var", ")", "\n", "errD_fake_mse_total", "+=", "errD_fake_mse", "\n", "if", "idx", "%", "20", "==", "0", ":", "\n", "            ", "print", "(", "'Test: [%d][%d/%d] errG_mse: %.4f \\n,'", "%", "(", "epoch", ",", "idx", ",", "len", "(", "valloader", ")", ",", "errD_fake_mse", ".", "data", "[", "0", "]", ")", ")", "\n", "\n", "", "", "print", "(", "'Test: [%d] average errG_mse: %.4f,'", "%", "(", "epoch", ",", "errD_fake_mse_total", ".", "data", "[", "0", "]", "/", "len", "(", "valloader", ")", ")", ")", "\n", "vutils", ".", "save_image", "(", "target_var", ".", "data", ",", "'%s/%s/cr%s/%s/stage%s/image/test_epoch_%03d_real.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "opt", ".", "stage", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "vutils", ".", "save_image", "(", "output", ".", "data", ",", "'%s/%s/cr%s/%s/stage%s/image/test_epoch_%03d_fake.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "opt", ".", "stage", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train": [[305, 1106], ["trainloader.__iter__().__next__", "input.numpy.numpy", "os.path.exists", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "lapgan.LAPGAN_Generator_level1", "lapgan.LAPGAN_Discriminator_level1", "lapgan.LAPGAN_Generator_level2", "lapgan.LAPGAN_Discriminator_level2", "lapgan.LAPGAN_Generator_level3", "lapgan.LAPGAN_Discriminator_level3", "lapgan.LAPGAN_Generator_level4", "lapgan.LAPGAN_Discriminator_level4", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.MSELoss", "torch.BCELoss", "range", "numpy.load", "numpy.random.randn", "numpy.save", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "main_adaptiveCS.weights_init", "print", "print", "print", "print", "print", "print", "print", "print", "lapgan.LAPGAN_Generator_level1.parameters", "lapgan.LAPGAN_Discriminator_level1.parameters", "lapgan.LAPGAN_Generator_level2.parameters", "lapgan.LAPGAN_Discriminator_level2.parameters", "lapgan.LAPGAN_Generator_level3.parameters", "lapgan.LAPGAN_Discriminator_level3.parameters", "lapgan.LAPGAN_Generator_level4.parameters", "lapgan.LAPGAN_Discriminator_level4.parameters", "label.cuda.cuda", "lapgan.LAPGAN_Generator_level1.load_state_dict", "print", "trainloader.__iter__", "lapgan.LAPGAN_Generator_level1.cuda", "lapgan.LAPGAN_Discriminator_level1.cuda", "lapgan.LAPGAN_Generator_level2.cuda", "lapgan.LAPGAN_Discriminator_level2.cuda", "lapgan.LAPGAN_Generator_level3.cuda", "lapgan.LAPGAN_Discriminator_level3.cuda", "lapgan.LAPGAN_Generator_level4.cuda", "lapgan.LAPGAN_Discriminator_level4.cuda", "nn.MSELoss.cuda", "nn.BCELoss.cuda", "torch.FloatTensor.cuda", "lapnet1_gen.cuda", "lapnet2_gen.cuda", "lapnet3_gen.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.FloatTensor.cuda", "torch.load", "torch.load", "torch.load", "torch.load", "lapgan.LAPGAN_Generator_level1.load_state_dict", "lapgan.LAPGAN_Generator_level2.load_state_dict", "print", "print", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.save_image", "torchvision.save_image", "main_adaptiveCS.val", "print", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.save_image", "torchvision.save_image", "main_adaptiveCS.val", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.save_image", "torchvision.save_image", "main_adaptiveCS.val", "enumerate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.save_image", "torchvision.save_image", "main_adaptiveCS.val", "str", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lapgan.LAPGAN_Generator_level1.load_state_dict", "lapgan.LAPGAN_Generator_level2.load_state_dict", "lapgan.LAPGAN_Generator_level3.load_state_dict", "print", "print", "print", "data.numpy", "range", "torch.autograd.Variable", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level1.zero_grad", "lapgan.LAPGAN_Discriminator_level1.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "lapnet1_disc.data.mean", "lapgan.LAPGAN_Generator_level1.", "lapgan.LAPGAN_Discriminator_level1.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "optim.Adam.step", "lapgan.LAPGAN_Generator_level1.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level1.", "nn.BCELoss.", "nn.MSELoss.", "errD_g1.backward", "optim.Adam.step", "lapnet1_disc.data.mean", "lapgan.LAPGAN_Generator_level1.state_dict", "lapgan.LAPGAN_Discriminator_level1.state_dict", "lapgan.LAPGAN_Generator_level1.eval", "lapgan.LAPGAN_Discriminator_level1.eval", "data.numpy", "range", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level1.", "lapgan.LAPGAN_Discriminator_level2.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level2.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "lapnet2_disc.data.mean", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level2.", "lapgan.LAPGAN_Discriminator_level2.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "optim.Adam.step", "lapgan.LAPGAN_Generator_level2.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level2.", "nn.BCELoss.", "nn.MSELoss.", "errD_g2.backward", "optim.Adam.step", "lapnet2_disc.data.mean", "lapgan.LAPGAN_Generator_level2.state_dict", "lapgan.LAPGAN_Discriminator_level2.state_dict", "lapgan.LAPGAN_Generator_level2.eval", "lapgan.LAPGAN_Discriminator_level2.eval", "data.numpy", "range", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level1.", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level2.", "lapgan.LAPGAN_Discriminator_level3.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level3.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "lapnet3_disc.data.mean", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level3.", "lapgan.LAPGAN_Discriminator_level3.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "optim.Adam.step", "lapgan.LAPGAN_Generator_level3.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level3.", "nn.BCELoss.", "nn.MSELoss.", "errD_g3.backward", "optim.Adam.step", "lapnet3_disc.data.mean", "lapgan.LAPGAN_Generator_level3.state_dict", "lapgan.LAPGAN_Discriminator_level3.state_dict", "lapgan.LAPGAN_Generator_level3.eval", "lapgan.LAPGAN_Discriminator_level3.eval", "data.numpy", "range", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level1.", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level2.", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level3.", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level4.zero_grad", "lapgan.LAPGAN_Discriminator_level4.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "lapnet4_disc.data.mean", "torch.autograd.Variable", "lapgan.LAPGAN_Generator_level4.", "lapgan.LAPGAN_Discriminator_level4.", "torch.autograd.Variable", "nn.BCELoss.", "criterion_bce.backward", "optim.Adam.step", "lapgan.LAPGAN_Generator_level4.zero_grad", "torch.autograd.Variable", "lapgan.LAPGAN_Discriminator_level4.", "nn.BCELoss.", "nn.MSELoss.", "errD_g4.backward", "optim.Adam.step", "lapnet4_disc.data.mean", "lapgan.LAPGAN_Generator_level4.state_dict", "lapgan.LAPGAN_Discriminator_level4.state_dict", "lapgan.LAPGAN_Generator_level4.eval", "lapgan.LAPGAN_Discriminator_level4.eval", "str", "str", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lapgan.LAPGAN_Generator_level1.load_state_dict", "lapgan.LAPGAN_Generator_level2.load_state_dict", "lapgan.LAPGAN_Generator_level3.load_state_dict", "lapgan.LAPGAN_Generator_level4.load_state_dict", "print", "print", "print", "print", "data.size", "lapgan.LAPGAN_Generator_level1.train", "lapgan.LAPGAN_Discriminator_level1.train", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "label.cuda.fill_", "lapnet1_gen.detach", "label.cuda.fill_", "label.cuda.fill_", "print", "str", "data.size", "lapgan.LAPGAN_Generator_level2.train", "lapgan.LAPGAN_Discriminator_level2.train", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "label.cuda.fill_", "lapnet2_gen.detach", "label.cuda.fill_", "label.cuda.fill_", "torch.autograd.Variable", "nn.MSELoss.", "print", "data.size", "lapgan.LAPGAN_Generator_level3.train", "lapgan.LAPGAN_Discriminator_level3.train", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "label.cuda.fill_", "lapnet3_gen.detach", "label.cuda.fill_", "label.cuda.fill_", "torch.autograd.Variable", "torch.autograd.Variable", "nn.MSELoss.", "nn.MSELoss.", "print", "data.size", "lapgan.LAPGAN_Generator_level4.train", "lapgan.LAPGAN_Discriminator_level4.train", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "label.cuda.fill_", "lapnet4_gen.detach", "label.cuda.fill_", "label.cuda.fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "nn.MSELoss.", "nn.MSELoss.", "nn.MSELoss.", "print", "str", "str", "str", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "str", "str", "str", "sensing_matrix1[].dot", "sensing_matrix1[].dot", "sensing_matrix2[].dot", "sensing_matrix1[].dot", "sensing_matrix2[].dot", "sensing_matrix3[].dot", "sensing_matrix1[].dot", "sensing_matrix2[].dot", "sensing_matrix3[].dot", "sensing_matrix4[].dot", "data_array[].flatten", "len", "data_array[].flatten", "data_array[].flatten", "len", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "len", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "data_array[].flatten", "len"], "function", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.weights_init", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.val", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.val", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.val", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.val", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train"], ["", "def", "train", "(", "epochs", ",", "trainloader", ",", "valloader", ")", ":", "\n", "# Initialize variables", "\n", "    ", "input", ",", "_", "=", "trainloader", ".", "__iter__", "(", ")", ".", "__next__", "(", ")", "\n", "input", "=", "input", ".", "numpy", "(", ")", "\n", "sz_input", "=", "input", ".", "shape", "\n", "cr1", "=", "8", "*", "opt", ".", "cr", "\n", "cr2", "=", "4", "*", "opt", ".", "cr", "\n", "cr3", "=", "2", "*", "opt", ".", "cr", "\n", "cr4", "=", "opt", ".", "cr", "\n", "channels", "=", "sz_input", "[", "1", "]", "\n", "n", "=", "sz_input", "[", "2", "]", "**", "2", "\n", "'''\n    m1 = int(math.ceil(float(n) / cr1))\n    m2 = int(math.ceil(float(n) / cr2))\n    m3 = int(math.ceil(float(n) / cr3))\n    m4 = int(math.ceil(float(n) / cr4))\n    '''", "\n", "m1", "=", "n", "/", "cr1", "\n", "m2", "=", "n", "/", "cr2", "\n", "m3", "=", "n", "/", "cr3", "\n", "m4", "=", "n", "/", "cr4", "\n", "img_size1", "=", "sz_input", "[", "3", "]", "/", "8", "\n", "img_size2", "=", "sz_input", "[", "3", "]", "/", "4", "\n", "img_size3", "=", "sz_input", "[", "3", "]", "/", "2", "\n", "img_size4", "=", "sz_input", "[", "3", "]", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "'sensing_matrix_cr%d.npy'", "%", "(", "opt", ".", "cr", ")", ")", ":", "\n", "        ", "sensing_matrix4", "=", "np", ".", "load", "(", "'sensing_matrix_cr%d.npy'", "%", "(", "opt", ".", "cr", ")", ")", "\n", "", "else", ":", "\n", "        ", "sensing_matrix4", "=", "randn", "(", "channels", ",", "m4", ",", "n", ")", "\n", "#sensing_matrix4 = np.zeros(sensing_matrix4_unnorm.shape)", "\n", "#for chan in range(channels):", "\n", "#    M = sensing_matrix4_unnorm[chan, :, :]", "\n", "#    M = np.transpose(linalg.orth(np.transpose(M)))", "\n", "#    sensing_matrix4[chan, :, :] = M", "\n", "np", ".", "save", "(", "'sensing_matrix_cr%d.npy'", "%", "(", "opt", ".", "cr", ")", ",", "sensing_matrix4", ")", "\n", "\n", "", "sensing_matrix3", "=", "sensing_matrix4", "[", ":", ",", ":", "m3", ",", ":", "]", "\n", "sensing_matrix2", "=", "sensing_matrix4", "[", ":", ",", ":", "m2", ",", ":", "]", "\n", "sensing_matrix1", "=", "sensing_matrix4", "[", ":", ",", ":", "m1", ",", ":", "]", "\n", "\n", "g1_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m1", ")", "\n", "g2_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m2", ")", "\n", "g3_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m3", ")", "\n", "g4_input", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m4", ")", "\n", "\n", "g1_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size1", ",", "img_size1", ")", "\n", "g2_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size2", ",", "img_size2", ")", "\n", "g3_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size3", ",", "img_size3", ")", "\n", "g4_target", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "img_size4", ",", "img_size4", ")", "\n", "\n", "y2", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m2", ")", "\n", "y3", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m3", ")", "\n", "y4", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ",", "channels", ",", "m4", ")", "\n", "\n", "label", "=", "torch", ".", "FloatTensor", "(", "opt", ".", "batch_size", ")", "\n", "\n", "fake_label", "=", "0.1", "\n", "real_label", "=", "0.9", "\n", "\n", "# Instantiate models", "\n", "lapnet1_gen", "=", "lapgan", ".", "LAPGAN_Generator_level1", "(", "channels", ",", "channels", "*", "m1", ",", "opt", ".", "ngpu", ")", "\n", "lapnet1_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level1", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet2_gen", "=", "lapgan", ".", "LAPGAN_Generator_level2", "(", "channels", ",", "channels", "*", "m2", ",", "opt", ".", "ngpu", ")", "\n", "lapnet2_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level2", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet3_gen", "=", "lapgan", ".", "LAPGAN_Generator_level3", "(", "channels", ",", "channels", "*", "m3", ",", "opt", ".", "ngpu", ")", "\n", "lapnet3_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level3", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "lapnet4_gen", "=", "lapgan", ".", "LAPGAN_Generator_level4", "(", "channels", ",", "channels", "*", "m4", ",", "opt", ".", "ngpu", ")", "\n", "lapnet4_disc", "=", "lapgan", ".", "LAPGAN_Discriminator_level4", "(", "channels", ",", "opt", ".", "ngpu", ")", "\n", "\n", "# Weight initialization", "\n", "weights_init", "(", "lapnet1_gen", ",", "init_type", "=", "'normal'", ")", ",", "weights_init", "(", "lapnet1_disc", ",", "init_type", "=", "'normal'", ")", "\n", "weights_init", "(", "lapnet2_gen", ",", "init_type", "=", "'normal'", ")", ",", "weights_init", "(", "lapnet2_disc", ",", "init_type", "=", "'normal'", ")", "\n", "weights_init", "(", "lapnet3_gen", ",", "init_type", "=", "'normal'", ")", ",", "weights_init", "(", "lapnet3_disc", ",", "init_type", "=", "'normal'", ")", "\n", "weights_init", "(", "lapnet4_gen", ",", "init_type", "=", "'normal'", ")", ",", "weights_init", "(", "lapnet4_disc", ",", "init_type", "=", "'normal'", ")", "\n", "\n", "print", "(", "lapnet1_gen", ")", ",", "print", "(", "lapnet1_disc", ")", "\n", "print", "(", "lapnet2_gen", ")", ",", "print", "(", "lapnet2_disc", ")", "\n", "print", "(", "lapnet3_gen", ")", ",", "print", "(", "lapnet3_disc", ")", "\n", "print", "(", "lapnet4_gen", ")", ",", "print", "(", "lapnet4_disc", ")", "\n", "\n", "optimizer_lapnet1_gen", "=", "optim", ".", "Adam", "(", "lapnet1_gen", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_lapnet1_disc", "=", "optim", ".", "Adam", "(", "lapnet1_disc", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "optimizer_lapnet2_gen", "=", "optim", ".", "Adam", "(", "lapnet2_gen", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_lapnet2_disc", "=", "optim", ".", "Adam", "(", "lapnet2_disc", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "optimizer_lapnet3_gen", "=", "optim", ".", "Adam", "(", "lapnet3_gen", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_lapnet3_disc", "=", "optim", ".", "Adam", "(", "lapnet3_disc", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "optimizer_lapnet4_gen", "=", "optim", ".", "Adam", "(", "lapnet4_gen", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "optimizer_lapnet4_disc", "=", "optim", ".", "Adam", "(", "lapnet4_disc", ".", "parameters", "(", ")", ",", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "criterion_mse", "=", "nn", ".", "MSELoss", "(", ")", "\n", "criterion_bce", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "lapnet1_gen", ".", "cuda", "(", ")", ",", "lapnet1_disc", ".", "cuda", "(", ")", "\n", "lapnet2_gen", ".", "cuda", "(", ")", ",", "lapnet2_disc", ".", "cuda", "(", ")", "\n", "lapnet3_gen", ".", "cuda", "(", ")", ",", "lapnet3_disc", ".", "cuda", "(", ")", "\n", "lapnet4_gen", ".", "cuda", "(", ")", ",", "lapnet4_disc", ".", "cuda", "(", ")", "\n", "\n", "criterion_mse", ".", "cuda", "(", ")", ",", "criterion_bce", ".", "cuda", "(", ")", "\n", "\n", "g1_input", ",", "g2_input", ",", "g3_input", ",", "g4_input", "=", "g1_input", ".", "cuda", "(", ")", ",", "g2_input", ".", "cuda", "(", ")", ",", "g3_input", ".", "cuda", "(", ")", ",", "g4_input", ".", "cuda", "(", ")", "\n", "g1_target", ",", "g2_target", ",", "g3_target", ",", "g4_target", "=", "g1_target", ".", "cuda", "(", ")", ",", "g2_target", ".", "cuda", "(", ")", ",", "g3_target", ".", "cuda", "(", ")", ",", "g4_target", ".", "cuda", "(", ")", "\n", "y2", ",", "y3", ",", "y4", "=", "y2", ".", "cuda", "(", ")", ",", "y3", ".", "cuda", "(", ")", ",", "y4", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "\n", "", "if", "opt", ".", "dataset", "==", "'bsd500_patch'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "7", "# 0.0264", "\n", "level2_iter", "=", "11", "# 0.0157", "\n", "level3_iter", "=", "12", "# 0.0090", "\n", "level4_iter", "=", "1", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "16", "# 0.0353 18  # 14", "\n", "level2_iter", "=", "16", "# 0.0230 16  # 27", "\n", "level3_iter", "=", "16", "# 0.0144 8  # 27", "\n", "level4_iter", "=", "21", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "6", "# 0.0450", "\n", "level2_iter", "=", "2", "# 0.0389 9", "\n", "level3_iter", "=", "1", "# 0.0318", "\n", "level4_iter", "=", "93", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "5", "# 0.0508", "\n", "level2_iter", "=", "0", "# 0.0420 5", "\n", "level3_iter", "=", "0", "# 0.0339 3", "\n", "\n", "", "", "", "if", "opt", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "94", "# 0.0074", "\n", "level2_iter", "=", "36", "# 0.0052", "\n", "level3_iter", "=", "88", "\n", "level4_iter", "=", "1", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "73", "# 0.0193", "\n", "level2_iter", "=", "31", "# 0.0111 16  # 27", "\n", "level3_iter", "=", "78", "# 0.0077 8  # 27", "\n", "level4_iter", "=", "96", "# 0.0034", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "57", "# 0.0499", "\n", "level2_iter", "=", "57", "# 0.0233", "\n", "level3_iter", "=", "95", "# 0.0122", "\n", "level4_iter", "=", "83", "# 0.0059", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "34", "# 0.0771", "\n", "level2_iter", "=", "66", "# 0.0378 5", "\n", "level3_iter", "=", "99", "# 0.0177 3", "\n", "level4_iter", "=", "88", "# 0.0056", "\n", "\n", "", "", "", "if", "opt", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "if", "'wy'", "in", "opt", ".", "model", "and", "'ifusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "5", ":", "\n", "                ", "level1_iter", "=", "28", "# 0.0126", "\n", "level2_iter", "=", "81", "# 0.0039", "\n", "level3_iter", "=", "21", "# 0.0025", "\n", "level4_iter", "=", "26", "# 0.0008", "\n", "", "elif", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "24", "# 0.0242", "\n", "level2_iter", "=", "33", "# 0.0102", "\n", "level3_iter", "=", "58", "# 0.0045", "\n", "level4_iter", "=", "21", "# 0.0017", "\n", "", "elif", "opt", ".", "cr", "==", "20", ":", "\n", "                ", "level1_iter", "=", "19", "# 0.0420", "\n", "level2_iter", "=", "30", "# 0.0221", "\n", "level3_iter", "=", "44", "# 0.0111", "\n", "level4_iter", "=", "21", "# 0.0043", "\n", "", "elif", "opt", ".", "cr", "==", "30", ":", "\n", "                ", "level1_iter", "=", "16", "# 0.0532", "\n", "level2_iter", "=", "34", "# 0.0317", "\n", "level3_iter", "=", "84", "# 0.0174", "\n", "level4_iter", "=", "16", "# 0.0078", "\n", "", "", "elif", "'wy'", "in", "opt", ".", "model", "and", "'lfusion'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "18", "\n", "level2_iter", "=", "16", "\n", "level3_iter", "=", "22", "\n", "level4_iter", "=", "99", "\n", "", "", "elif", "'woy'", "in", "opt", ".", "model", ":", "\n", "            ", "if", "opt", ".", "cr", "==", "10", ":", "\n", "                ", "level1_iter", "=", "18", "\n", "level2_iter", "=", "7", "\n", "level3_iter", "=", "5", "\n", "level4_iter", "=", "1", "\n", "\n", "\n", "", "", "", "stage1_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "level1_iter", ")", "\n", "stage2_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "level2_iter", ")", "\n", "stage3_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "level3_iter", ")", "\n", "stage4_path", "=", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "%", "(", "\n", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "level4_iter", ")", "\n", "\n", "# if opt.stage == 1:", "\n", "#  if os.path.isfile(stage1_path):", "\n", "#    lapnet1_gen.load_state_dict(stage1_path)", "\n", "\n", "if", "opt", ".", "stage", "==", "2", ":", "\n", "        ", "lapnet1_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage1_path", ")", ")", "\n", "print", "(", "'loading level1 iteration'", "+", "str", "(", "level1_iter", ")", ")", "\n", "", "elif", "opt", ".", "stage", "==", "3", ":", "\n", "        ", "lapnet1_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage1_path", ")", ")", "\n", "lapnet2_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage2_path", ")", ")", "\n", "print", "(", "'loading level1 iteration'", "+", "str", "(", "level1_iter", ")", ")", "\n", "print", "(", "'loading level2 iteration'", "+", "str", "(", "level2_iter", ")", ")", "\n", "", "elif", "opt", ".", "stage", "==", "4", ":", "\n", "        ", "lapnet1_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage1_path", ")", ")", "\n", "lapnet2_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage2_path", ")", ")", "\n", "lapnet3_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage3_path", ")", ")", "\n", "print", "(", "'loading level1 iteration'", "+", "str", "(", "level1_iter", ")", ")", "\n", "print", "(", "'loading level2 iteration'", "+", "str", "(", "level2_iter", ")", ")", "\n", "print", "(", "'loading level3 iteration'", "+", "str", "(", "level3_iter", ")", ")", "\n", "", "elif", "opt", ".", "stage", "==", "5", ":", "\n", "        ", "lapnet1_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage1_path", ")", ")", "\n", "lapnet2_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage2_path", ")", ")", "\n", "lapnet3_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage3_path", ")", ")", "\n", "lapnet4_gen", ".", "load_state_dict", "(", "torch", ".", "load", "(", "stage4_path", ")", ")", "\n", "print", "(", "'loading level1 iteration'", "+", "str", "(", "level1_iter", ")", ")", "\n", "print", "(", "'loading level2 iteration'", "+", "str", "(", "level2_iter", ")", ")", "\n", "print", "(", "'loading level3 iteration'", "+", "str", "(", "level3_iter", ")", ")", "\n", "print", "(", "'loading level4 iteration'", "+", "str", "(", "level4_iter", ")", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "'''\n        if epoch < 2 :\n            opt.w_loss = 0.1\n        elif epoch  < 4:\n            opt.w_loss = 0.01\n        else:\n            opt.w_loss = 0.001\n        '''", "\n", "\n", "# training level 1", "\n", "if", "opt", ".", "stage", "==", "1", "or", "opt", ".", "stage", "==", "5", ":", "\n", "            ", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "                ", "if", "data", ".", "size", "(", "0", ")", "!=", "opt", ".", "batch_size", ":", "\n", "                    ", "continue", "\n", "\n", "", "lapnet1_gen", ".", "train", "(", ")", ",", "lapnet1_disc", ".", "train", "(", ")", "\n", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "                    ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 3x64x64", "\n", "# g3_target_temp = g4_target_temp[:, ::2, ::2]  # 3x32x32", "\n", "# g2_target_temp = g3_target_temp[:, ::2, ::2]  # 3x16x16", "\n", "g1_target_temp", "=", "g4_target_temp", "[", ":", ",", ":", ":", "8", ",", ":", ":", "8", "]", "# 3x8x8", "\n", "g1_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g1_target_temp", ")", "\n", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                        ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ")", "\n", "g1_target_var", "=", "Variable", "(", "g1_target", ")", "\n", "\n", "# Train disc1 with true images", "\n", "lapnet1_disc", ".", "zero_grad", "(", ")", "\n", "d1_output", "=", "lapnet1_disc", "(", "g1_target_var", ")", "\n", "d1_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "errD_d1_real_bce", "=", "criterion_bce", "(", "d1_output", ",", "d1_label_var", ")", "\n", "errD_d1_real_bce", ".", "backward", "(", ")", "\n", "d1_real_mean", "=", "d1_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "# Train disc1 with fake images", "\n", "g1_output", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "d1_output", "=", "lapnet1_disc", "(", "g1_output", ".", "detach", "(", ")", ")", "\n", "d1_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "fake_label", ")", ")", "\n", "errD_d1_fake_bce", "=", "criterion_bce", "(", "d1_output", ",", "d1_label_var", ")", "\n", "errD_d1_fake_bce", ".", "backward", "(", ")", "\n", "optimizer_lapnet1_disc", ".", "step", "(", ")", "\n", "\n", "# Train gen1 with fake images", "\n", "lapnet1_gen", ".", "zero_grad", "(", ")", "\n", "d1_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "d1_output", "=", "lapnet1_disc", "(", "g1_output", ")", "\n", "errD_g1_fake_bce", "=", "criterion_bce", "(", "d1_output", ",", "d1_label_var", ")", "\n", "errD_g1_fake_mse", "=", "criterion_mse", "(", "g1_output", ",", "g1_target_var", ")", "\n", "errD_g1", "=", "opt", ".", "w_loss", "*", "errD_g1_fake_bce", "+", "(", "1", "-", "opt", ".", "w_loss", ")", "*", "errD_g1_fake_mse", "\n", "errD_g1", ".", "backward", "(", ")", "\n", "optimizer_lapnet1_gen", ".", "step", "(", ")", "\n", "d1_fake_mean", "=", "d1_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "log_interval", "==", "0", ":", "\n", "                    ", "print", "(", "'Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'", "\n", "'D(x): %.4f, D(G(z)): %.4f'", "%", "(", "\n", "1", ",", "epoch", ",", "epochs", ",", "idx", ",", "len", "(", "trainloader", ")", ",", "\n", "errD_d1_real_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_d1_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g1_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g1_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "d1_real_mean", ",", "\n", "d1_fake_mean", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "lapnet1_gen", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "lapnet1_disc", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/disc_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "epoch", ")", ")", "\n", "\n", "vutils", ".", "save_image", "(", "g1_target_var", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_real.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "vutils", ".", "save_image", "(", "g1_output", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_fake.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "1", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "lapnet1_gen", ".", "eval", "(", ")", ",", "lapnet1_disc", ".", "eval", "(", ")", "\n", "val", "(", "epoch", ",", "1", ",", "channels", ",", "valloader", ",", "sensing_matrix1", ",", "sensing_matrix2", ",", "sensing_matrix3", ",", "\n", "sensing_matrix4", ",", "g1_target", ",", "g1_input", ",", "lapnet1_gen", ",", "lapnet2_gen", ",", "lapnet3_gen", ",", "lapnet4_gen", ",", "\n", "criterion_mse", ",", "y2", ",", "y3", ",", "y4", ")", "\n", "\n", "# training level 2", "\n", "# load weight of level 1", "\n", "", "if", "opt", ".", "stage", "==", "2", "or", "opt", ".", "stage", "==", "5", ":", "\n", "            ", "print", "(", "'loading level1 iteration'", "+", "str", "(", "level1_iter", ")", ")", "\n", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "                ", "if", "data", ".", "size", "(", "0", ")", "!=", "opt", ".", "batch_size", ":", "\n", "                    ", "continue", "\n", "\n", "", "lapnet2_gen", ".", "train", "(", ")", ",", "lapnet2_disc", ".", "train", "(", ")", "\n", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "                    ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 3x64x64", "\n", "g3_target_temp", "=", "g4_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 3x32x32", "\n", "g2_target_temp", "=", "g3_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 3x16x16", "\n", "g1_target_temp", "=", "g2_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 3x8x8", "\n", "\n", "g2_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g2_target_temp", ")", "\n", "g1_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g1_target_temp", ")", "\n", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                        ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y2", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix2", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ")", "\n", "# g2_input = lapnet1_gen(g1_input_var.detach())", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "\n", "# Train disc2 with true images", "\n", "lapnet2_disc", ".", "zero_grad", "(", ")", "\n", "g2_target_var", "=", "Variable", "(", "g2_target", ")", "\n", "d2_output", "=", "lapnet2_disc", "(", "g2_target_var", ")", "\n", "d2_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "errD_d2_real_bce", "=", "criterion_bce", "(", "d2_output", ",", "d2_label_var", ")", "\n", "errD_d2_real_bce", ".", "backward", "(", ")", "\n", "d2_real_mean", "=", "d2_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "# Train disc2 with fake images", "\n", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "g2_output", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "\n", "d2_output", "=", "lapnet2_disc", "(", "g2_output", ".", "detach", "(", ")", ")", "\n", "d2_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "fake_label", ")", ")", "\n", "errD_d2_fake_bce", "=", "criterion_bce", "(", "d2_output", ",", "d2_label_var", ")", "\n", "errD_d2_fake_bce", ".", "backward", "(", ")", "\n", "optimizer_lapnet2_disc", ".", "step", "(", ")", "\n", "\n", "# Train gen2 with fake images, disc2 is not updated", "\n", "lapnet2_gen", ".", "zero_grad", "(", ")", "\n", "d2_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "d2_output", "=", "lapnet2_disc", "(", "g2_output", ")", "\n", "errD_g2_fake_bce", "=", "criterion_bce", "(", "d2_output", ",", "d2_label_var", ")", "\n", "errD_g2_fake_mse", "=", "criterion_mse", "(", "g2_output", ",", "g2_target_var", ")", "\n", "errD_g2", "=", "opt", ".", "w_loss", "*", "errD_g2_fake_bce", "+", "(", "1", "-", "opt", ".", "w_loss", ")", "*", "errD_g2_fake_mse", "\n", "errD_g2", ".", "backward", "(", ")", "\n", "\n", "# optimizer_lapnet1_gen.step()", "\n", "optimizer_lapnet2_gen", ".", "step", "(", ")", "\n", "d2_fake_mean", "=", "d2_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "log_interval", "==", "0", ":", "\n", "                    ", "g1_target_var", "=", "Variable", "(", "g1_target", ")", "\n", "errD_g1_fake_mse", "=", "criterion_mse", "(", "g2_input", ",", "g1_target_var", ")", "\n", "\n", "print", "(", "'Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'", "\n", "'errG1_mse: %.4f, D(x): %.4f, D(G(z)): %.4f'", "%", "(", "\n", "2", ",", "epoch", ",", "epochs", ",", "idx", ",", "len", "(", "trainloader", ")", ",", "\n", "errD_d2_real_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_d2_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g2_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g2_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g1_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "d2_real_mean", ",", "\n", "d2_fake_mean", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "lapnet2_gen", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "lapnet2_disc", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/disc_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "epoch", ")", ")", "\n", "\n", "vutils", ".", "save_image", "(", "g2_target_var", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_real.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "vutils", ".", "save_image", "(", "g2_output", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_fake.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "2", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "lapnet2_gen", ".", "eval", "(", ")", ",", "lapnet2_disc", ".", "eval", "(", ")", "\n", "val", "(", "epoch", ",", "2", ",", "channels", ",", "valloader", ",", "sensing_matrix1", ",", "sensing_matrix2", ",", "sensing_matrix3", ",", "\n", "sensing_matrix4", ",", "g2_target", ",", "g1_input", ",", "lapnet1_gen", ",", "lapnet2_gen", ",", "lapnet3_gen", ",", "lapnet4_gen", ",", "\n", "criterion_mse", ",", "y2", ",", "y3", ",", "y4", ")", "\n", "\n", "\n", "# training level 3", "\n", "", "if", "opt", ".", "stage", "==", "3", "or", "opt", ".", "stage", "==", "5", ":", "\n", "            ", "'''\n            if epoch == 0 and opt.transfer == True:\n              print('transfer weidhts from level1')\n              lapnet3_gen.conv1 = copy.deepcopy(lapnet2_gen.conv1)\n              lapnet3_gen.conv2 = copy.deepcopy(lapnet2_gen.conv2)\n              lapnet3_gen.upsamp1 = copy.deepcopy(lapnet2_gen.upsamp1)\n              lapnet3_gen.upsamp2 = copy.deepcopy(lapnet2_gen.upsamp2)\n              lapnet3_gen.resblk1 = copy.deepcopy(lapnet2_gen.resblk1)\n      \n              lapnet3_disc.main[0] = copy.deepcopy(lapnet2_disc.main[0])\n              lapnet3_disc.main[2] = copy.deepcopy(lapnet2_disc.main[2])\n              lapnet3_disc.main[4] = copy.deepcopy(lapnet2_disc.main[4])\n              lapnet3_disc.main[6] = copy.deepcopy(lapnet2_disc.main[5])\n              lapnet3_disc.main[8] = copy.deepcopy(lapnet2_disc.main[8])\n            '''", "\n", "\n", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "                ", "if", "data", ".", "size", "(", "0", ")", "!=", "opt", ".", "batch_size", ":", "\n", "                    ", "continue", "\n", "\n", "", "lapnet3_gen", ".", "train", "(", ")", ",", "lapnet3_disc", ".", "train", "(", ")", "\n", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "                    ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 1x64x64", "\n", "g3_target_temp", "=", "g4_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 1x32x32", "\n", "g2_target_temp", "=", "g3_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 3x16x16", "\n", "g1_target_temp", "=", "g2_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 3x8x8", "\n", "\n", "g3_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g3_target_temp", ")", "\n", "g2_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g2_target_temp", ")", "\n", "g1_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g1_target_temp", ")", "\n", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                        ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y2", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix2", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y3", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix3", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "# 1x8x8", "\n", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "g3_input", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "# 1x16x16", "\n", "\n", "# Train disc3 with true images", "\n", "lapnet3_disc", ".", "zero_grad", "(", ")", "\n", "g3_target_var", "=", "Variable", "(", "g3_target", ")", "\n", "d3_output", "=", "lapnet3_disc", "(", "g3_target_var", ")", "\n", "d3_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "errD_d3_real_bce", "=", "criterion_bce", "(", "d3_output", ",", "d3_label_var", ")", "\n", "errD_d3_real_bce", ".", "backward", "(", ")", "\n", "d3_real_mean", "=", "d3_output", ".", "data", ".", "mean", "(", ")", "\n", "# Train disc3 with fake images", "\n", "y3_var", "=", "Variable", "(", "y3", ")", "\n", "g3_output", "=", "lapnet3_gen", "(", "g3_input", ",", "y3_var", ")", "\n", "d3_output", "=", "lapnet3_disc", "(", "g3_output", ".", "detach", "(", ")", ")", "\n", "d3_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "fake_label", ")", ")", "\n", "errD_d3_fake_bce", "=", "criterion_bce", "(", "d3_output", ",", "d3_label_var", ")", "\n", "errD_d3_fake_bce", ".", "backward", "(", ")", "\n", "optimizer_lapnet3_disc", ".", "step", "(", ")", "\n", "# Train gen3 with fake images, disc3 is not updated", "\n", "lapnet3_gen", ".", "zero_grad", "(", ")", "\n", "d3_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "d3_output", "=", "lapnet3_disc", "(", "g3_output", ")", "\n", "errD_g3_fake_bce", "=", "criterion_bce", "(", "d3_output", ",", "d3_label_var", ")", "\n", "errD_g3_fake_mse", "=", "criterion_mse", "(", "g3_output", ",", "g3_target_var", ")", "\n", "errD_g3", "=", "opt", ".", "w_loss", "*", "errD_g3_fake_bce", "+", "(", "1", "-", "opt", ".", "w_loss", ")", "*", "errD_g3_fake_mse", "\n", "errD_g3", ".", "backward", "(", ")", "\n", "optimizer_lapnet3_gen", ".", "step", "(", ")", "\n", "d3_fake_mean", "=", "d3_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "log_interval", "==", "0", ":", "\n", "                    ", "g1_target_var", "=", "Variable", "(", "g1_target", ")", "\n", "g2_target_var", "=", "Variable", "(", "g2_target", ")", "\n", "errD_g1_fake_mse", "=", "criterion_mse", "(", "g2_input", ",", "g1_target_var", ")", "\n", "errD_g2_fake_mse", "=", "criterion_mse", "(", "g3_input", ",", "g2_target_var", ")", "\n", "\n", "print", "(", "'Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'", "\n", "'errG2_mse: %.4f, errG1_mse: %.4f, D(x): %.4f, D(G(z)): %.4f'", "%", "(", "\n", "3", ",", "epoch", ",", "epochs", ",", "idx", ",", "len", "(", "trainloader", ")", ",", "\n", "errD_d3_real_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_d3_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g3_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g3_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g2_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g1_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "d3_real_mean", ",", "\n", "d3_fake_mean", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "lapnet3_gen", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "lapnet3_disc", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/disc_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "epoch", ")", ")", "\n", "\n", "vutils", ".", "save_image", "(", "g3_target_var", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_real.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "vutils", ".", "save_image", "(", "g3_output", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_fake.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "3", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "lapnet3_gen", ".", "eval", "(", ")", ",", "lapnet3_disc", ".", "eval", "(", ")", "\n", "val", "(", "epoch", ",", "3", ",", "channels", ",", "valloader", ",", "sensing_matrix1", ",", "sensing_matrix2", ",", "sensing_matrix3", ",", "\n", "sensing_matrix4", ",", "g3_target", ",", "g1_input", ",", "lapnet1_gen", ",", "lapnet2_gen", ",", "lapnet3_gen", ",", "lapnet4_gen", ",", "\n", "criterion_mse", ",", "y2", ",", "y3", ",", "y4", ")", "\n", "\n", "# training level 4", "\n", "", "if", "opt", ".", "stage", "==", "4", "or", "opt", ".", "stage", "==", "5", ":", "\n", "            ", "for", "idx", ",", "(", "data", ",", "_", ")", "in", "enumerate", "(", "trainloader", ",", "0", ")", ":", "\n", "                ", "if", "data", ".", "size", "(", "0", ")", "!=", "opt", ".", "batch_size", ":", "\n", "                    ", "continue", "\n", "\n", "", "lapnet4_gen", ".", "train", "(", ")", ",", "lapnet4_disc", ".", "train", "(", ")", "\n", "data_array", "=", "data", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "                    ", "g4_target_temp", "=", "data_array", "[", "i", "]", "# 1x64x64", "\n", "g3_target_temp", "=", "g4_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 1x32x32", "\n", "g2_target_temp", "=", "g3_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 1x16x16", "\n", "g1_target_temp", "=", "g2_target_temp", "[", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "# 1x8x8", "\n", "\n", "g4_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g4_target_temp", ")", "\n", "g3_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g3_target_temp", ")", "\n", "g2_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g2_target_temp", ")", "\n", "g1_target", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "g1_target_temp", ")", "\n", "\n", "for", "j", "in", "range", "(", "channels", ")", ":", "\n", "                        ", "g1_input", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix1", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y2", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix2", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y3", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix3", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "y4", "[", "i", ",", "j", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "sensing_matrix4", "[", "j", ",", ":", ",", ":", "]", ".", "dot", "(", "data_array", "[", "i", ",", "j", "]", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "", "", "g1_input_var", "=", "Variable", "(", "g1_input", ")", "\n", "g2_input", "=", "lapnet1_gen", "(", "g1_input_var", ")", "# 1x8x8", "\n", "y2_var", "=", "Variable", "(", "y2", ")", "\n", "g3_input", "=", "lapnet2_gen", "(", "g2_input", ",", "y2_var", ")", "# 1x16x16", "\n", "y3_var", "=", "Variable", "(", "y3", ")", "\n", "g4_input", "=", "lapnet3_gen", "(", "g3_input", ",", "y3_var", ")", "# 1x32x32", "\n", "\n", "# Train disc4 with true images", "\n", "g4_target_var", "=", "Variable", "(", "g4_target", ")", "\n", "lapnet4_disc", ".", "zero_grad", "(", ")", "\n", "d4_output", "=", "lapnet4_disc", "(", "g4_target_var", ")", "\n", "d4_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "errD_d4_real_bce", "=", "criterion_bce", "(", "d4_output", ",", "d4_label_var", ")", "\n", "errD_d4_real_bce", ".", "backward", "(", ")", "\n", "d4_real_mean", "=", "d4_output", ".", "data", ".", "mean", "(", ")", "\n", "# Train disc4 with fake images", "\n", "y4_var", "=", "Variable", "(", "y4", ")", "\n", "g4_output", "=", "lapnet4_gen", "(", "g4_input", ",", "y4_var", ")", "\n", "d4_output", "=", "lapnet4_disc", "(", "g4_output", ".", "detach", "(", ")", ")", "\n", "d4_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "fake_label", ")", ")", "\n", "errD_d4_fake_bce", "=", "criterion_bce", "(", "d4_output", ",", "d4_label_var", ")", "\n", "errD_d4_fake_bce", ".", "backward", "(", ")", "\n", "optimizer_lapnet4_disc", ".", "step", "(", ")", "\n", "# Train gen4 with fake images, disc4 is not updated", "\n", "lapnet4_gen", ".", "zero_grad", "(", ")", "\n", "d4_label_var", "=", "Variable", "(", "label", ".", "fill_", "(", "real_label", ")", ")", "\n", "d4_output", "=", "lapnet4_disc", "(", "g4_output", ")", "\n", "errD_g4_fake_bce", "=", "criterion_bce", "(", "d4_output", ",", "d4_label_var", ")", "\n", "errD_g4_fake_mse", "=", "criterion_mse", "(", "g4_output", ",", "g4_target_var", ")", "\n", "errD_g4", "=", "opt", ".", "w_loss", "*", "errD_g4_fake_bce", "+", "(", "1", "-", "opt", ".", "w_loss", ")", "*", "errD_g4_fake_mse", "\n", "errD_g4", ".", "backward", "(", ")", "\n", "optimizer_lapnet4_gen", ".", "step", "(", ")", "\n", "d4_fake_mean", "=", "d4_output", ".", "data", ".", "mean", "(", ")", "\n", "\n", "if", "idx", "%", "opt", ".", "log_interval", "==", "0", ":", "\n", "                    ", "g1_target_var", "=", "Variable", "(", "g1_target", ")", "\n", "g2_target_var", "=", "Variable", "(", "g2_target", ")", "\n", "g3_target_var", "=", "Variable", "(", "g3_target", ")", "\n", "\n", "errD_g1_fake_mse", "=", "criterion_mse", "(", "g2_input", ",", "g1_target_var", ")", "\n", "errD_g2_fake_mse", "=", "criterion_mse", "(", "g3_input", ",", "g2_target_var", ")", "\n", "errD_g3_fake_mse", "=", "criterion_mse", "(", "g4_input", ",", "g3_target_var", ")", "\n", "\n", "print", "(", "'Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'", "\n", "'errG3_mse: %.4f, errG2_mse: %.4f, errG1_mse: %.4f, D(x): %.4f, D(G(z)): %.4f'", "%", "(", "\n", "4", ",", "epoch", ",", "epochs", ",", "idx", ",", "len", "(", "trainloader", ")", ",", "\n", "errD_d4_real_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_d4_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g4_fake_bce", ".", "data", "[", "0", "]", ",", "\n", "errD_g4_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g3_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g2_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "errD_g1_fake_mse", ".", "data", "[", "0", "]", ",", "\n", "d4_real_mean", ",", "\n", "d4_fake_mean", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "lapnet4_gen", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/gen_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "lapnet4_disc", ".", "state_dict", "(", ")", ",", "'%s/%s/cr%s/%s/stage%s/model/disc_epoch_%d.pth'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "epoch", ")", ")", "\n", "\n", "vutils", ".", "save_image", "(", "g4_target_var", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_real.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "vutils", ".", "save_image", "(", "g4_output", ".", "data", ",", "\n", "'%s/%s/cr%s/%s/stage%s/image/epoch_%03d_fake.png'", "\n", "%", "(", "opt", ".", "outf", ",", "opt", ".", "dataset", ",", "opt", ".", "cr", ",", "opt", ".", "model", ",", "4", ",", "epoch", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "lapnet4_gen", ".", "eval", "(", ")", ",", "lapnet4_disc", ".", "eval", "(", ")", "\n", "val", "(", "epoch", ",", "4", ",", "channels", ",", "valloader", ",", "sensing_matrix1", ",", "sensing_matrix2", ",", "sensing_matrix3", ",", "\n", "sensing_matrix4", ",", "g4_target", ",", "g1_input", ",", "lapnet1_gen", ",", "lapnet2_gen", ",", "lapnet3_gen", ",", "lapnet4_gen", ",", "\n", "criterion_mse", ",", "y2", ",", "y3", ",", "y4", ")", "\n", "\n", "# training the whole model from all the sub-models", "\n", "", "'''\n        for idx, (data, _) in enumerate(trainloader, 0):\n            if data.size(0) != opt.batch_size:\n                continue\n    \n            data_array = data.numpy()\n            for i in range(opt.batch_size):\n                g4_target_temp = data_array[i]  # 1x64x64\n                g3_target_temp = g4_target_temp[:, ::2, ::2]  # 1x32x32\n                g2_target_temp = g3_target_temp[:, ::2, ::2]  # 1x16x16\n                g1_target_temp = g2_target_temp[:, ::2, ::2]  # 1x8x8\n    \n                g4_target[i] = torch.from_numpy(g4_target_temp)\n                g3_target[i] = torch.from_numpy(g3_target_temp)\n                g2_target[i] = torch.from_numpy(g2_target_temp)\n                g1_target[i] = torch.from_numpy(g1_target_temp)\n    \n                for j in range(channels):\n                    g1_input[i, j, :] = torch.from_numpy(sensing_matrix1.dot(data_array[i, j].flatten()))\n                    y2[i, j, :] = torch.from_numpy(sensing_matrix2.dot(data_array[i, j].flatten()))\n                    y3[i, j, :] = torch.from_numpy(sensing_matrix3.dot(data_array[i, j].flatten()))\n                    y4[i, j, :] = torch.from_numpy(sensing_matrix4.dot(data_array[i, j].flatten()))\n    \n            # Train lapnet_disc with true images\n            lapnet1_disc.zero_grad(), lapnet2_disc.zero_grad()\n            lapnet3_disc.zero_grad(), lapnet4_disc.zero_grad()\n    \n            g1_target_var, g2_target_var, g3_target_var, g4_target_var = Variable(g1_target), \\\n                                                                         Variable(g2_target), \\\n                                                                         Variable(g3_target), \\\n                                                                         Variable(g4_target)\n    \n            d1_output, d2_output, d3_output, d4_output = lapnet1_disc(g1_target_var),\\\n                                                         lapnet2_disc(g2_target_var),\\\n                                                         lapnet3_disc(g3_target_var),\\\n                                                         lapnet4_disc(g4_target_var)\n    \n            d1_label_var, d2_label_var, d3_label_var, d4_label_var = Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label))\n    \n            errD_d1_real_bce, errD_d2_real_bce, errD_d3_real_bce, errD_d4_real_bce = criterion_bce(d1_output, d1_label_var), \\\n                                                                                     criterion_bce(d2_output, d2_label_var), \\\n                                                                                     criterion_bce(d3_output, d3_label_var), \\\n                                                                                     criterion_bce(d4_output, d4_label_var)\n            errD_d4_real_bce.backward()\n            errD_d3_real_bce.backward()\n            errD_d2_real_bce.backward()\n            errD_d1_real_bce.backward()\n    \n            d1_real_mean, d2_real_mean, d3_real_mean, d4_real_mean = d1_output.data.mean(), \\\n                                                                     d2_output.data.mean(), \\\n                                                                     d4_output.data.mean(), \\\n                                                                     d4_output.data.mean()\n    \n            # Train lapnet_disc with fake images\n            g1_input_var = Variable(g1_input)\n            g2_input = lapnet1_gen(g1_input_var)  # 1x8x8\n            y2_var = Variable(y2)\n            g3_input = lapnet2_gen(g2_input, y2_var)  # 1x16x16\n            y3_var = Variable(y3)\n            g4_input = lapnet3_gen(g3_input, y3_var)  # 1x32x32\n            y4_var = Variable(y4)\n            g4_output = lapnet4_gen(g4_input, y4_var)\n    \n            # do not update gen1, gen2, gen3, gen4\n            d1_output, d2_output, d3_output, d4_output = lapnet1_disc(g2_input.detach()), \\\n                                                         lapnet2_disc(g3_input.detach()), \\\n                                                         lapnet3_disc(g4_input.detach()), \\\n                                                         lapnet4_disc(g4_output.detach())\n    \n            d1_label_var, d2_label_var, d3_label_var, d4_label_var = Variable(label.fill_(fake_label)), \\\n                                                                     Variable(label.fill_(fake_label)), \\\n                                                                     Variable(label.fill_(fake_label)), \\\n                                                                     Variable(label.fill_(fake_label)),\n    \n            errD_d1_fake_bce, errD_d2_fake_bce,errD_d3_fake_bce, errD_d4_fake_bce = criterion_bce(d1_output, d1_label_var), \\\n                                                                                    criterion_bce(d2_output, d2_label_var), \\\n                                                                                    criterion_bce(d3_output, d3_label_var), \\\n                                                                                    criterion_bce(d4_output, d4_label_var)\n            errD_d4_fake_bce.backward(), optimizer_lapnet4_disc.step()\n            errD_d3_fake_bce.backward(), optimizer_lapnet3_disc.step()\n            errD_d2_fake_bce.backward(), optimizer_lapnet2_disc.step()\n            errD_d1_fake_bce.backward(), optimizer_lapnet1_disc.step()\n    \n            # Train lapnet_gen with fake images, lapgen_disc is not updated\n            lapnet1_gen.zero_grad(), lapnet2_gen.zero_grad()\n            lapnet3_gen.zero_grad(), lapnet4_gen.zero_grad()\n    \n            d1_label_var, d2_label_var, d3_label_var, d4_label_var = Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label)), \\\n                                                                     Variable(label.fill_(real_label))\n    \n            d1_output, d2_output, d3_output, d4_output = lapnet1_disc(g2_input), \\\n                                                         lapnet2_disc(g3_input), \\\n                                                         lapnet3_disc(g4_input), \\\n                                                         lapnet4_disc(g4_output)\n    \n            errD_g1_fake_bce, errD_g2_fake_bce, errD_g3_fake_bce, errD_g4_fake_bce = criterion_bce(d1_output, d1_label_var), \\\n                                                                                     criterion_bce(d2_output, d2_label_var), \\\n                                                                                     criterion_bce(d3_output, d3_label_var), \\\n                                                                                     criterion_bce(d4_output, d4_label_var)\n    \n            errD_g1_fake_mse, errD_g2_fake_mse, errD_g3_fake_mse, errD_g4_fake_mse = criterion_mse(g2_input, g1_target_var), \\\n                                                                                     criterion_mse(g3_input, g2_target_var), \\\n                                                                                     criterion_mse(g4_input, g3_target_var), \\\n                                                                                     criterion_mse(g4_output, g4_target_var)\n    \n            errD_g4 = opt.w_loss * errD_g4_fake_bce + (1 - opt.w_loss) * errD_g4_fake_mse\n    \n            errD_g4.backward()\n    \n            optimizer_lapnet4_gen.step()\n            optimizer_lapnet3_gen.step()\n            optimizer_lapnet2_gen.step()\n            optimizer_lapnet1_gen.step()\n    \n            d1_fake_mean, d2_fake_mean, d3_fake_mean, d4_fake_mean = d1_output.data.mean(), \\\n                                                                     d2_output.data.mean(), \\\n                                                                     d3_output.data.mean(), \\\n                                                                     d4_output.data.mean()\n    \n            if idx % opt.log_interval == 0:\n                print('Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'\n                      'D(x): %.4f, D(G(z)): %.4f' % (\n                          5, epoch, epochs, idx, len(trainloader),\n                          errD_d4_real_bce.data[0],\n                          errD_d4_fake_bce.data[0],\n                          errD_g4_fake_bce.data[0],\n                          errD_g4_fake_mse.data[0],\n                          d4_real_mean,\n                          d4_fake_mean))\n                print('Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'\n                      'D(x): %.4f, D(G(z)): %.4f' % (\n                          3, epoch, epochs, idx, len(trainloader),\n                          errD_d3_real_bce.data[0],\n                          errD_d3_fake_bce.data[0],\n                          errD_g3_fake_bce.data[0],\n                          errD_g3_fake_mse.data[0],\n                          d3_real_mean,\n                          d3_fake_mean))\n                print('Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'\n                      'D(x): %.4f, D(G(z)): %.4f' % (\n                          2, epoch, epochs, idx, len(trainloader),\n                          errD_d2_real_bce.data[0],\n                          errD_d2_fake_bce.data[0],\n                          errD_g2_fake_bce.data[0],\n                          errD_g2_fake_mse.data[0],\n                          d2_real_mean,\n                          d2_fake_mean))\n                print('Level %d [%d/%d][%d/%d] errD_real: %.4f, errD_fake: %.4f, errG_bce: %.4f errG_mse: %.4f,'\n                      'D(x): %.4f, D(G(z)): %.4f \\n' % (\n                          1, epoch, epochs, idx, len(trainloader),\n                          errD_d1_real_bce.data[0],\n                          errD_d1_fake_bce.data[0],\n                          errD_g1_fake_bce.data[0],\n                          errD_g1_fake_mse.data[0],\n                          d1_real_mean,\n                          d1_fake_mean))\n    \n        val(epoch, 5, channels, valloader, sensing_matrix1, sensing_matrix2, sensing_matrix3,\n            sensing_matrix4, g4_target, g1_input, lapnet1_gen, lapnet2_gen, lapnet3_gen, lapnet4_gen,\n            criterion_mse, y2, y3, y4)\n    \n        torch.save(lapnet4_gen.state_dict(),\n                   '%s/%s/%s/model/lapnet4_gen_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet4_disc.state_dict(),\n                   '%s/%s/%s/model/lapnet4_disc_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet3_gen.state_dict(),\n                   '%s/%s/%s/model/lapnet3_gen_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet3_disc.state_dict(),\n                   '%s/%s/%s/model/lapnet3_disc_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet2_gen.state_dict(),\n                   '%s/%s/%s/model/lapnet2_gen_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet2_disc.state_dict(),\n                   '%s/%s/%s/model/lapnet2_disc_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet1_gen.state_dict(),\n                   '%s/%s/%s/model/lapnet1_gen_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n        torch.save(lapnet1_disc.state_dict(),\n                   '%s/%s/%s/model/lapnet1_disc_epoch_%d.pth' % (opt.outf, opt.dataset, opt.model, epoch))\n    \n        vutils.save_image(g4_target_var.data,\n                          '%s/%s/%s/image/l%d_real_samples_epoch_%03d.png' % (opt.outf, opt.dataset, opt.model, 5, epoch),\n                          normalize=True)\n        vutils.save_image(g4_output.data,\n                          '%s/%s/%s/image/l%d_fake_samples_epoch_%03d.png' % (opt.outf, opt.dataset, opt.model, 5, epoch),\n                          normalize=True)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main": [[1108, 1111], ["main_adaptiveCS.data_loader", "main_adaptiveCS.train"], "function", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.data_loader", "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.train"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "train_loader", ",", "val_loader", "=", "data_loader", "(", ")", "\n", "train", "(", "opt", ".", "epochs", ",", "train_loader", ",", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.ResBlock.__init__": [[4, 15], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(nFeat),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "#nn.BatchNorm2d(nFeat)", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.ResBlock.forward": [[17, 23], ["lapgan_adaptiveCS_resnet.ResBlock.main", "lapgan_adaptiveCS_resnet.ResBlock.relu"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "res", "=", "self", ".", "main", "(", "x", ")", "\n", "self", ".", "res", "+=", "x", "\n", "self", ".", "res", "=", "self", ".", "relu", "(", "self", ".", "res", ")", "\n", "\n", "return", "self", ".", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.ResBlock_wBN.__init__": [[25, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nFeat", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "ResBlock_wBN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nFeat", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nFeat", ")", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.ResBlock_wBN.forward": [[37, 42], ["lapgan_adaptiveCS_resnet.ResBlock_wBN.main", "lapgan_adaptiveCS_resnet.ResBlock_wBN.relu"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "res", "=", "self", ".", "main", "(", "x", ")", "\n", "self", ".", "res", "+=", "x", "\n", "self", ".", "res", "=", "self", ".", "relu", "(", "self", ".", "res", ")", "\n", "return", "self", ".", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.__init__": [[44, 67], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "lapgan_adaptiveCS_resnet.ResBlock", "range"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "leny", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Generator_level1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "base", "=", "64", "\n", "self", ".", "fs", "=", "8", "\n", "self", ".", "nResBlock", "=", "2", "\n", "self", ".", "leny", "=", "leny", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "self", ".", "leny", ",", "self", ".", "base", "*", "self", ".", "fs", "**", "2", ")", "# 64x8x8", "\n", "self", ".", "bn_linear1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "base", "*", "self", ".", "fs", "**", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# 64x8x8", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "#self.conv2 = nn.Conv2d(self.base, self.base, kernel_size=3, padding=1, stride=2, bias=False)  # 64x4x4", "\n", "\n", "modules", "=", "[", "ResBlock", "(", "self", ".", "base", ",", "3", ")", "for", "_", "in", "range", "(", "self", ".", "nResBlock", ")", "]", "\n", "self", ".", "resblk1", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# 3x8x8", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.forward": [[68, 78], ["input.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.resblk1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.conv2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.tanh", "input.size", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.linear1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level1.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "output", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "-", "1", ",", "self", ".", "base", ",", "self", ".", "fs", ",", "self", ".", "fs", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "resblk1", "(", "self", ".", "output", ")", "\n", "self", ".", "output", "=", "self", ".", "conv2", "(", "self", ".", "output", ")", "\n", "self", ".", "output", "=", "self", ".", "tanh", "(", "self", ".", "output", ")", "\n", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level1.__init__": [[80, 103], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Discriminator_level1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "32", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "fs", "=", "8", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 32x8x8", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 32x4x4", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 64x4x4", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level1.forward": [[105, 112], ["lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level1.view().squeeze", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level1.main", "range", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level1.view"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.__init__": [[115, 147], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "lapgan_adaptiveCS_resnet.ResBlock", "range"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "leny", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Generator_level2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "64", "\n", "self", ".", "leny", "=", "leny", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "fs", "=", "8", "\n", "self", ".", "nResBlock", "=", "3", "\n", "\n", "self", ".", "upsamp1", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "# 3x16x16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# 64x8x8", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "# 64x4x4", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "(", "(", "self", ".", "fs", "/", "2", ")", "**", "2", ")", ",", "self", ".", "leny", ")", "\n", "self", ".", "bn_linear1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "leny", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "self", ".", "leny", "*", "2", ",", "self", ".", "base", "*", "(", "self", ".", "fs", "**", "2", ")", ")", "# _1 channel _2 base", "\n", "self", ".", "bn_linear2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "base", "*", "(", "self", ".", "fs", "**", "2", ")", ")", "\n", "\n", "self", ".", "upsamp2", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "# 64x16x16", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "modules", "=", "[", "ResBlock", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "self", ".", "nResBlock", ")", "]", "\n", "self", ".", "resblk1", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.forward": [[148, 167], ["lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.upsamp1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.resblk1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.conv5", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.tanh", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.conv1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.conv2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.output.size", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.linear1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.linear2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level2.upsamp2", "y.view", "y.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", ")", ":", "\n", "        ", "self", ".", "output_up", "=", "self", ".", "upsamp1", "(", "input", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "self", ".", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "torch", ".", "cat", "(", "(", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "self", ".", "output", ")", ",", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "-", "1", ",", "self", ".", "base", ",", "self", ".", "fs", ",", "self", ".", "fs", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "upsamp2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "resblk1", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "conv5", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "output", "+", "self", ".", "output_up", "\n", "self", ".", "output", "=", "self", ".", "tanh", "(", "self", ".", "output", ")", "\n", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level2.__init__": [[170, 200], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Discriminator_level2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "32", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 32x16x16", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 32x8x8", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 64x8x8", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 64x4x4", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "4", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 128x4x4", "\n", "#nn.BatchNorm2d(4 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "base", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level2.forward": [[202, 209], ["lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level2.view().squeeze", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level2.main", "range", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level2.view"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.__init__": [[211, 244], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "lapgan_adaptiveCS_resnet.ResBlock", "range"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "leny", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Generator_level3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "64", "\n", "self", ".", "leny", "=", "leny", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "fs", "=", "16", "\n", "self", ".", "nResBlock", "=", "3", "\n", "\n", "self", ".", "upsamp1", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", "# 3x16x16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# 64x16x16", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "# 64x8x8", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "(", "(", "self", ".", "fs", "/", "2", ")", "**", "2", ")", ",", "self", ".", "leny", ")", "\n", "self", ".", "bn_linear1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "leny", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "self", ".", "leny", "*", "2", ",", "self", ".", "channels", "*", "(", "self", ".", "fs", "**", "2", ")", ")", "\n", "self", ".", "bn_linear2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "channels", "*", "(", "self", ".", "fs", "**", "2", ")", ")", "\n", "\n", "self", ".", "upsamp2", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", "# 64x16x16", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "modules", "=", "[", "ResBlock", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "self", ".", "nResBlock", ")", "]", "\n", "self", ".", "resblk1", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.forward": [[245, 264], ["lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.upsamp1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.resblk1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.conv3", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.tanh", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.conv1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.conv2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.output.size", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.linear1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.linear2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level3.upsamp2", "y.view", "y.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", ")", ":", "\n", "        ", "self", ".", "output_up", "=", "self", ".", "upsamp1", "(", "input", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "self", ".", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "torch", ".", "cat", "(", "(", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "self", ".", "output", ")", ",", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "-", "1", ",", "self", ".", "channels", ",", "self", ".", "fs", ",", "self", ".", "fs", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "upsamp2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "resblk1", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "conv3", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "output", "+", "self", ".", "output_up", "\n", "self", ".", "output", "=", "self", ".", "tanh", "(", "self", ".", "output", ")", "\n", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level3.__init__": [[267, 304], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Discriminator_level3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "32", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 32x32x32", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 32x16x16", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 64x16x16", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 64x8x8", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "4", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 128x8x8", "\n", "#nn.BatchNorm2d(4 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "base", ",", "4", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 128x4x4", "\n", "#nn.BatchNorm2d(4 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "base", ",", "8", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 256x4x4", "\n", "#nn.BatchNorm2d(8 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", "*", "self", ".", "base", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level3.forward": [[306, 313], ["lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level3.view().squeeze", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level3.main", "range", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level3.view"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.__init__": [[317, 349], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "lapgan_adaptiveCS_resnet.ResBlock", "range"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "leny", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Generator_level4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "64", "\n", "self", ".", "leny", "=", "leny", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "fs", "=", "32", "\n", "self", ".", "nResBlock", "=", "3", "\n", "\n", "self", ".", "upsamp1", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", "# 3x16x16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# 64x8x8", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "# 64x4x4", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "self", ".", "base", "*", "(", "(", "self", ".", "fs", "/", "2", ")", "**", "2", ")", ",", "self", ".", "leny", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "self", ".", "leny", "*", "2", ",", "self", ".", "channels", "*", "(", "self", ".", "fs", "**", "2", ")", ")", "\n", "\n", "self", ".", "upsamp2", "=", "nn", ".", "ConvTranspose2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "4", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "\n", "bias", "=", "False", ")", "# 64x16x16", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "base", ")", "\n", "\n", "modules", "=", "[", "ResBlock", "(", "self", ".", "base", ")", "for", "_", "in", "range", "(", "self", ".", "nResBlock", ")", "]", "\n", "self", ".", "resblk1", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.forward": [[351, 370], ["lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.upsamp1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.output.view", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.relu", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.resblk1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.conv3", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.tanh", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.conv1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.conv2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.output.size", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.linear1", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.linear2", "lapgan_adaptiveCS_resnet.LAPGAN_Generator_level4.upsamp2", "y.view", "y.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "y", ")", ":", "\n", "        ", "self", ".", "output_up", "=", "self", ".", "upsamp1", "(", "input", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "input", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "self", ".", "output", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear1", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "torch", ".", "cat", "(", "(", "y", ".", "view", "(", "y", ".", "size", "(", "0", ")", ",", "-", "1", ")", ",", "self", ".", "output", ")", ",", "1", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "linear2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "output", ".", "view", "(", "-", "1", ",", "self", ".", "channels", ",", "self", ".", "fs", ",", "self", ".", "fs", ")", "\n", "self", ".", "output", "=", "self", ".", "relu", "(", "self", ".", "upsamp2", "(", "self", ".", "output", ")", ")", "\n", "self", ".", "output", "=", "self", ".", "resblk1", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "conv3", "(", "self", ".", "output", ")", "\n", "\n", "self", ".", "output", "=", "self", ".", "output", "+", "self", ".", "output_up", "\n", "self", ".", "output", "=", "self", ".", "tanh", "(", "self", ".", "output", ")", "\n", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__": [[373, 419], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "ngpu", ")", ":", "\n", "        ", "super", "(", "LAPGAN_Discriminator_level4", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "base", "=", "32", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 32x64x64", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 32x32x32", "\n", "#nn.BatchNorm2d(self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 64x32x32", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "2", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 64x16x16", "\n", "#nn.BatchNorm2d(2 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "base", ",", "4", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 128x16x16", "\n", "#nn.BatchNorm2d(4 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "base", ",", "4", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 128x8x8", "\n", "#nn.BatchNorm2d(4 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "4", "*", "self", ".", "base", ",", "8", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 256x8x8", "\n", "#nn.BatchNorm2d(8 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", "*", "self", ".", "base", ",", "8", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", ",", "# 256x4x4", "\n", "#nn.BatchNorm2d(8 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "8", "*", "self", ".", "base", ",", "16", "*", "self", ".", "base", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "# 512x4x4", "\n", "#nn.BatchNorm2d(16 * self.base),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "16", "*", "self", ".", "base", ",", "1", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.forward": [[421, 428], ["lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.view().squeeze", "isinstance", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.main", "range", "lapgan_adaptiveCS_resnet.LAPGAN_Discriminator_level4.view"], "methods", ["home.repos.pwc.inspect_result.PSCLab-ASU_LAPRAN-PyTorch.None.main_adaptiveCS.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "isinstance", "(", "input", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]]}