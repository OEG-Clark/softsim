{"home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.get_russian_pos_set": [[195, 202], ["set", "morph.parse"], "function", ["None"], ["def", "get_russian_pos_set", "(", "russian_word", ")", ":", "\n", "    ", "\"\"\"\n\n    :param russian_word:\n    :return: a set of possible parts of speech for a russian word\n    \"\"\"", "\n", "return", "set", "(", "[", "p", ".", "tag", ".", "POS", "for", "p", "in", "morph", ".", "parse", "(", "russian_word", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_proper_noun_translation": [[204, 212], ["translation.startswith", "translation[].isupper"], "function", ["None"], ["", "def", "is_proper_noun_translation", "(", "translation", ")", ":", "\n", "    ", "\"\"\"\n\n    :param translation:\n    :return: True iff the translation can be treated as a proper noun\n    \"\"\"", "\n", "return", "(", "translation", "!=", "'NEG'", "and", "translation", "[", "0", "]", ".", "isupper", "(", ")", ")", "or", "(", "translation", ".", "startswith", "(", "'\u0440\u0435\u043a\u0430.'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_interjection_translation": [[214, 216], ["None"], "function", ["None"], ["", "def", "is_interjection_translation", "(", "translation", ")", ":", "\n", "    ", "return", "translation", "in", "RUSSIAN_INTERJECTIONS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adjective_translation": [[218, 227], ["language_utils.is_adverb_gloss"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adverb_gloss"], ["", "def", "is_adjective_translation", "(", "possible_pos_set", ",", "normalized_glosses", ")", ":", "\n", "#it can be an adverb derived from an adjective", "\n", "    ", "for", "gloss", "in", "normalized_glosses", ":", "\n", "        ", "if", "is_adverb_gloss", "(", "gloss", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "normalized_glosses", "[", "0", "]", "in", "RUSSIAN_GLOSS_ADJECTIVES", "or", "'ADJF'", "in", "possible_pos_set", "or", "'PRTF'", "in", "possible_pos_set", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_numeric_translation": [[229, 231], ["None"], "function", ["None"], ["", "def", "is_numeric_translation", "(", "translation", ")", ":", "\n", "    ", "return", "translation", "in", "RUSSIAN_NUMS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_pronoun_translation": [[233, 235], ["None"], "function", ["None"], ["", "def", "is_pronoun_translation", "(", "fon", ",", "translation", ")", ":", "\n", "    ", "return", "fon", "not", "in", "DUMMIES", "and", "translation", "in", "RUSSIAN_PRONOUNS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_c_conjunction_translation": [[237, 239], ["None"], "function", ["None"], ["", "def", "is_c_conjunction_translation", "(", "translation", ")", ":", "\n", "    ", "return", "translation", "in", "RUSSIAN_CCONJ", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_s_conjunction_translation": [[241, 243], ["None"], "function", ["None"], ["", "def", "is_s_conjunction_translation", "(", "translation", ")", ":", "\n", "    ", "return", "translation", "in", "RUSSIAN_SCONJ", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adverb_translation": [[245, 249], ["None"], "function", ["None"], ["", "def", "is_adverb_translation", "(", "translation", ",", "possible_pos_set", ")", ":", "\n", "    ", "return", "(", "translation", "in", "RUSSIAN_ADVERBS", ")", "or", "'ADVB'", "in", "possible_pos_set", "or", "'COMP'", "in", "possible_pos_set", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_determiner_translation": [[251, 257], ["len"], "function", ["None"], ["", "def", "is_determiner_translation", "(", "translation", ",", "normalized_glosses", ")", ":", "\n", "    ", "if", "translation", "in", "RUSSIAN_DETERMINERS", ":", "\n", "        ", "return", "True", "\n", "", "return", "translation", "in", "RUSSIAN_PRONOUNS", "and", "len", "(", "normalized_glosses", ")", ">", "1", "and", "normalized_glosses", "[", "1", "]", "==", "'PROPR'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_slip": [[259, 261], ["None"], "function", ["None"], ["", "def", "is_slip", "(", "gloss", ")", ":", "\n", "    ", "return", "'SLIP'", "in", "gloss", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_verb_gloss": [[263, 265], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_verb_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "gloss", "in", "GLOSSES_VERBAL", "or", "has_prefix", "(", "gloss", ",", "GLOSSES_VERBAL_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adjective_gloss": [[267, 269], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_adjective_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "has_prefix", "(", "gloss", ",", "GLOSSES_ADJ_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adverb_gloss": [[271, 273], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_adverb_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "has_prefix", "(", "gloss", ",", "GLOSSES_ADV_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_noun_gloss": [[275, 277], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_noun_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "has_prefix", "(", "gloss", ",", "GLOSSES_NOUN_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_proper_noun_gloss": [[279, 281], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_proper_noun_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "has_prefix", "(", "gloss", ",", "GLOSSES_PROPER_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_noun_negation": [[283, 286], ["None"], "function", ["None"], ["", "def", "is_noun_negation", "(", "first_fon", ",", "first_gloss", ")", ":", "\n", "    ", "return", "first_gloss", "==", "'NEG'", "and", "first_fon", "in", "NEGATIVE_ROOTS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_special_verbal_form": [[287, 289], ["None"], "function", ["None"], ["", "def", "is_special_verbal_form", "(", "first_gloss", ")", ":", "\n", "    ", "return", "first_gloss", "in", "RUSSIAN_SPECIAL_VERBS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_slip_unknown": [[291, 293], ["language_utils.contains", "gloss.strip().strip", "gloss.strip"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.contains"], ["", "def", "is_slip_unknown", "(", "gloss", ")", ":", "\n", "    ", "return", "contains", "(", "gloss", ".", "strip", "(", "'<'", ")", ".", "strip", "(", "'['", ")", ",", "GLOSSES_SLIP", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_personal_pronoun": [[294, 296], ["language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_personal_pronoun", "(", "gloss", ")", ":", "\n", "    ", "return", "has_prefix", "(", "gloss", ",", "PRONOUN_GLOSSES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_special_noun_stem": [[297, 300], ["gloss.endswith", "gloss.endswith"], "function", ["None"], ["", "def", "is_special_noun_stem", "(", "gloss", ")", ":", "\n", "    ", "return", "gloss", ".", "endswith", "(", "'.PL'", ")", "or", "gloss", ".", "endswith", "(", "'.PLSTEM'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix": [[302, 307], ["gloss.startswith"], "function", ["None"], ["", "def", "has_prefix", "(", "gloss", ",", "PREFIX_LIST", ")", ":", "\n", "    ", "for", "gloss_prefix", "in", "PREFIX_LIST", ":", "\n", "        ", "if", "gloss", ".", "startswith", "(", "gloss_prefix", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.contains": [[308, 313], ["None"], "function", ["None"], ["", "def", "contains", "(", "gloss", ",", "PART_LIST", ")", ":", "\n", "    ", "for", "gloss_part", "in", "PART_LIST", ":", "\n", "        ", "if", "gloss_part", "in", "gloss", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_cyrillic": [[316, 318], ["re.findall"], "function", ["None"], ["", "def", "is_cyrillic", "(", "token", ")", ":", "\n", "    ", "return", "re", ".", "findall", "(", "r'[\u0401\u0451\u0410-\u042f\u0430-\u044f]'", ",", "token", ")", "!=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_cyrillic_only": [[320, 322], ["re.match"], "function", ["None"], ["", "def", "is_cyrillic_only", "(", "token", ")", ":", "\n", "    ", "return", "re", ".", "match", "(", "r'[\u0401\u0451\u0410-\u042f\u0430-\u044f\\(\\)\\.\\[\\],/\\s]+$'", ",", "token", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.normalize_gloss": [[324, 349], ["re.sub.strip", "re.sub", "language_utils.is_cyrillic_only", "re.sub.upper", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub.split"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_cyrillic_only"], ["", "def", "normalize_gloss", "(", "gloss", ")", ":", "\n", "    ", "\"\"\"\n\n    :param gloss:\n    :return: gloss with bad characters stripped off,\n    and replaced with their unified representation\n    \"\"\"", "\n", "gloss", "=", "gloss", ".", "strip", "(", "'[]'", ")", "\n", "gloss", "=", "re", ".", "sub", "(", "'\\.RUS$'", ",", "''", ",", "gloss", ")", "\n", "if", "is_cyrillic_only", "(", "gloss", ")", ":", "\n", "        ", "return", "gloss", "\n", "\n", "", "gloss", "=", "gloss", ".", "upper", "(", ")", "\n", "gloss", "=", "gloss", ".", "replace", "(", "'[SLIP]'", ",", "'.SLIP'", ")", "\n", "gloss", "=", "re", ".", "sub", "(", "'\\(([\u0401\u0451\u0410-\u042f\u0430-\u044f]+).+?\\)'", ",", "''", ",", "gloss", ")", "\n", "gloss", "=", "re", ".", "sub", "(", "'\\[([\u0401\u0451\u0410-\u042f\u0430-\u044f]+).+?\\]'", ",", "''", ",", "gloss", ")", "\n", "gloss", "=", "re", ".", "sub", "(", "'[\\[\\]\\-=\\\\\\]'", ",", "''", ",", "gloss", ")", "\n", "gloss", "=", "re", ".", "sub", "(", "'{(\\*)+}'", ",", "''", ",", "gloss", ")", "\n", "gloss", "=", "gloss", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "\n", "\n", "\n", "if", "gloss", "in", "GLOSSES_TO_REPLACE", ":", "\n", "        ", "return", "GLOSSES_TO_REPLACE", "[", "gloss", "]", "\n", "", "return", "gloss", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.normalize_tokens": [[351, 384], ["range", "len", "language_utils.normalize_token", "language_utils.normalize_gloss", "tokens.append", "tokens.append", "current_glosses.append", "current_morphemes.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_gloss"], ["", "def", "normalize_tokens", "(", "morph_data_token", ")", ":", "\n", "    ", "starting_index", "=", "0", "\n", "tokens", "=", "[", "]", "\n", "current_multiword", "=", "''", "\n", "current_token", "=", "''", "\n", "current_glosses", "=", "[", "]", "\n", "current_morphemes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "morph_data_token", "[", "'analysis'", "]", ")", ")", ":", "\n", "        ", "normalized_fon", "=", "normalize_token", "(", "morph_data_token", "[", "'analysis'", "]", "[", "i", "]", "[", "'fon'", "]", ")", "\n", "normalized_gloss", "=", "normalize_gloss", "(", "morph_data_token", "[", "'analysis'", "]", "[", "i", "]", "[", "'gloss'", "]", ")", "\n", "if", "normalized_gloss", "==", "'FOC'", "and", "current_token", "!=", "''", ":", "\n", "            ", "current_multiword", "=", "current_token", "\n", "tokens", ".", "append", "(", "{", "'normalized_token'", ":", "current_token", ",", "\n", "'normalized_glosses'", ":", "current_glosses", ",", "\n", "'normalized_morphemes'", ":", "current_morphemes", ",", "\n", "'starting_index'", ":", "starting_index", "}", ")", "\n", "current_token", "=", "normalized_fon", "\n", "current_glosses", "=", "[", "normalized_gloss", "]", "\n", "current_morphemes", "=", "[", "normalized_fon", "]", "\n", "starting_index", "=", "i", "\n", "", "else", ":", "\n", "            ", "current_token", "+=", "normalized_fon", "\n", "current_glosses", ".", "append", "(", "normalized_gloss", ")", "\n", "current_morphemes", ".", "append", "(", "normalized_fon", ")", "\n", "\n", "", "if", "current_multiword", "!=", "''", ":", "\n", "            ", "current_multiword", "+=", "normalized_fon", "\n", "", "", "if", "current_token", "!=", "''", ":", "\n", "        ", "tokens", ".", "append", "(", "{", "'normalized_token'", ":", "current_token", ",", "\n", "'normalized_glosses'", ":", "current_glosses", ",", "\n", "'normalized_morphemes'", ":", "current_morphemes", ",", "\n", "'starting_index'", ":", "starting_index", "}", ")", "\n", "", "return", "current_multiword", ",", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.normalize_token": [[385, 390], ["make_replacements.lower", "language_utils.make_replacements", "language_utils.make_replacements"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.make_replacements", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.make_replacements"], ["", "def", "normalize_token", "(", "token", ")", ":", "\n", "    ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "make_replacements", "(", "token", ",", "FON_REPLACEMENTS", ")", "\n", "token", "=", "make_replacements", "(", "token", ",", "FON_REPLACEMENTS_STAGE_2", ")", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.make_replacements": [[392, 396], ["replacement_dict.items", "re.sub"], "function", ["None"], ["", "def", "make_replacements", "(", "token", ",", "replacement_dict", ")", ":", "\n", "    ", "for", "replacement_pair", "in", "replacement_dict", ".", "items", "(", ")", ":", "\n", "        ", "token", "=", "re", ".", "sub", "(", "replacement_pair", "[", "0", "]", ",", "replacement_pair", "[", "1", "]", ",", "token", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_derivative": [[398, 402], ["language_utils.normalize_gloss", "language_utils.has_prefix"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.has_prefix"], ["", "def", "is_derivative", "(", "gloss", ")", ":", "\n", "    ", "normalized_gloss", "=", "normalize_gloss", "(", "gloss", ")", "\n", "return", "normalized_gloss", "in", "DERIVATIVE_GLOSSES", "or", "has_prefix", "(", "normalized_gloss", ",", "DERIVATIVE_GLOSS_PREFIXES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_code_switching": [[403, 409], ["language_utils.is_similar", "len", "glosses[].lower"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_similar"], ["", "def", "is_code_switching", "(", "normalized_token", ",", "glosses", ")", ":", "\n", "    ", "if", "len", "(", "glosses", ")", ">", "1", ":", "\n", "        ", "return", "False", "\n", "", "if", "glosses", "[", "0", "]", ".", "lower", "(", ")", "in", "RUSSIAN_LOANWORDS", ":", "\n", "        ", "return", "False", "\n", "", "return", "is_similar", "(", "normalized_token", ",", "glosses", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_similar": [[410, 417], ["Levenshtein.distance", "language_utils.transliterate", "len"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.transliterate"], ["", "def", "is_similar", "(", "fon", ",", "gloss", ")", ":", "\n", "    ", "\"\"\"\n    returns True if fon is the transciption of the word specified by gloss\n    :param fon:\n    :param gloss:\n    \"\"\"", "\n", "return", "distance", "(", "transliterate", "(", "fon", ")", ",", "gloss", ")", "<", "(", "len", "(", "fon", ")", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.transliterate": [[419, 421], ["fon.translate"], "function", ["None"], ["", "def", "transliterate", "(", "fon", ")", ":", "\n", "    ", "return", "fon", ".", "translate", "(", "EVENKI_RUS_TAB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.main": [[422, 424], ["print", "language_utils.normalize_gloss"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_gloss"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "normalize_gloss", "(", "\"[\u0432\u044b\u0440\u0430\u0441\u0442\u0438.\u0440\u043e\u0434\u0438\u0442\u044c\u0441\u044f]\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.get_wordforms": [[23, 59], ["open", "line.strip.strip", "line[].isnumeric", "line.strip.split", "ud_converter.is_multiword", "ud_converter.is_to_ignore", "lemma.replace().isnumeric", "ud_converter.is_typo", "wordforms.append", "id.split", "int", "int", "int", "lemma.replace"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_multiword", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_to_ignore", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_typo"], ["def", "get_wordforms", "(", "corpus_filename", ")", ":", "\n", "    ", "wordforms", "=", "[", "]", "\n", "current_id_to_ignore_min", "=", "None", "\n", "current_id_to_ignore_max", "=", "None", "\n", "with", "open", "(", "corpus_filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "                ", "current_id_to_ignore_min", "=", "None", "\n", "current_id_to_ignore_max", "=", "None", "\n", "", "elif", "line", "[", "0", "]", ".", "isnumeric", "(", ")", ":", "\n", "                ", "line_parts", "=", "line", ".", "split", "(", "SEPARATOR", ")", "\n", "id", "=", "line_parts", "[", "0", "]", "\n", "word", "=", "line_parts", "[", "1", "]", "\n", "lemma", "=", "line_parts", "[", "2", "]", "\n", "pos", "=", "line_parts", "[", "3", "]", "\n", "features", "=", "line_parts", "[", "5", "]", "\n", "#we are ignoring multiword expressions", "\n", "# because I am not sure which POS they should have", "\n", "if", "is_multiword", "(", "id", ")", ":", "\n", "                    ", "id_parts", "=", "id", ".", "split", "(", "'-'", ")", "\n", "current_id_to_ignore_min", "=", "int", "(", "id_parts", "[", "0", "]", ")", "\n", "current_id_to_ignore_max", "=", "int", "(", "id_parts", "[", "1", "]", ")", "\n", "continue", "\n", "", "if", "current_id_to_ignore_min", "and", "current_id_to_ignore_max", "and", "current_id_to_ignore_min", "<=", "int", "(", "id", ")", "<=", "current_id_to_ignore_max", ":", "\n", "                    ", "continue", "\n", "", "if", "is_to_ignore", "(", "pos", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "lemma", ".", "replace", "(", "'.'", ",", "''", ")", ".", "isnumeric", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "is_typo", "(", "features", ")", ":", "\n", "                    ", "continue", "\n", "", "wordforms", ".", "append", "(", "{", "'word'", ":", "word", ",", "'lemma'", ":", "lemma", ",", "\n", "'pos'", ":", "pos", ",", "'features'", ":", "features", "}", ")", "\n", "", "", "", "return", "wordforms", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.read_features_from_filename": [[61, 70], ["dict", "open", "line.strip().split", "len", "print", "line.strip"], "function", ["None"], ["", "def", "read_features_from_filename", "(", "filename", ")", ":", "\n", "    ", "features", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "features_parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "features_parts", ")", "<", "2", ":", "\n", "                ", "print", "(", "features_parts", ")", "\n", "", "features", "[", "features_parts", "[", "0", "]", "]", "=", "features_parts", "[", "1", "]", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_to_ignore": [[73, 75], ["None"], "function", ["None"], ["", "def", "is_to_ignore", "(", "pos", ")", ":", "\n", "    ", "return", "pos", "in", "IGNORABLE_POS", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_multiword": [[76, 78], ["None"], "function", ["None"], ["", "def", "is_multiword", "(", "id", ")", ":", "\n", "    ", "return", "'-'", "in", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_typo": [[79, 81], ["None"], "function", ["None"], ["", "def", "is_typo", "(", "features", ")", ":", "\n", "    ", "return", "'Typo=Yes'", "in", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_wordforms": [[83, 106], ["ud_converter.convert_pos", "set", "wordform[].split", "ud_converter.is_feature_bad_for_pos", "features_dict.get", "features_dict.get.startswith", "print", "features_dict.get.startswith", "features_dict.get.split", "ud_converter.process_special_feature", "wordform[].add"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_pos", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_feature_bad_for_pos", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.process_special_feature"], ["", "def", "convert_wordforms", "(", "wordforms", ",", "features_dict", ")", ":", "\n", "    ", "for", "wordform", "in", "wordforms", ":", "\n", "        ", "wordform", "[", "'pos_unimorph'", "]", "=", "convert_pos", "(", "wordform", ")", "\n", "wordform", "[", "'features_unimorph'", "]", "=", "set", "(", ")", "\n", "features", "=", "wordform", "[", "'features'", "]", ".", "split", "(", "'|'", ")", "\n", "for", "feature", "in", "features", ":", "\n", "            ", "if", "feature", "==", "'Mood=Cnd'", ":", "\n", "                ", "if", "'VerbForm=Conv'", "not", "in", "features", ":", "\n", "                    ", "print", "(", "wordform", ")", "\n", "\n", "", "", "", "for", "feature", "in", "features", ":", "\n", "            ", "if", "is_feature_bad_for_pos", "(", "wordform", "[", "'pos'", "]", ",", "feature", ")", ":", "\n", "                ", "continue", "\n", "", "feature_unimorph", "=", "features_dict", ".", "get", "(", "feature", ")", "\n", "if", "feature_unimorph", "is", "None", "or", "feature_unimorph", "==", "''", "or", "feature_unimorph", "==", "'_'", ":", "\n", "#print(feature)", "\n", "                ", "continue", "\n", "", "elif", "feature_unimorph", ".", "startswith", "(", "'POS='", ")", ":", "\n", "                ", "wordform", "[", "'pos_unimorph'", "]", "=", "feature_unimorph", ".", "split", "(", "'POS='", ")", "[", "-", "1", "]", "\n", "", "elif", "feature_unimorph", ".", "startswith", "(", "'CMD='", ")", ":", "\n", "                ", "process_special_feature", "(", "wordform", ",", "feature", ")", "\n", "", "else", ":", "\n", "                ", "wordform", "[", "'features_unimorph'", "]", ".", "add", "(", "feature_unimorph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.process_special_feature": [[108, 112], ["ud_converter.process_possesive", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.process_possesive"], ["", "", "", "", "def", "process_special_feature", "(", "wordform", ",", "feature", ")", ":", "\n", "    ", "if", "feature", "==", "'Poss=Yes'", ":", "\n", "        ", "wordform", "[", "'features_unimorph'", "]", "=", "process_possesive", "(", "wordform", ")", "\n", "print", "(", "\"!!!!\"", ",", "wordform", ")", "\n", "#TODO", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.process_possesive": [[114, 128], ["wordform[].split", "set", "set.add", "feature.split"], "function", ["None"], ["", "", "def", "process_possesive", "(", "wordform", ")", ":", "\n", "    ", "features", "=", "wordform", "[", "'features'", "]", ".", "split", "(", "'|'", ")", "\n", "feature_dict", "=", "{", "}", "\n", "for", "feature", "in", "features", ":", "\n", "        ", "feature_parts", "=", "feature", ".", "split", "(", "'='", ")", "\n", "feature_dict", "[", "feature_parts", "[", "0", "]", "]", "=", "feature_parts", "[", "1", "]", "\n", "", "possessiveness_features", "=", "set", "(", ")", "\n", "possessiveness", "=", "'PSS'", "+", "feature_dict", "[", "'Person'", "]", "\n", "if", "feature_dict", "[", "'Number'", "]", "==", "'Sing'", ":", "\n", "        ", "possessiveness", "+=", "'S'", "\n", "", "else", ":", "\n", "        ", "possessiveness", "+=", "'P'", "\n", "", "possessiveness_features", ".", "add", "(", "possessiveness", ")", "\n", "return", "possessiveness_features", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.is_feature_bad_for_pos": [[131, 137], ["feature.startswith", "feature.startswith"], "function", ["None"], ["", "def", "is_feature_bad_for_pos", "(", "pos", ",", "feature", ")", ":", "\n", "    ", "if", "pos", "==", "'ADP'", "and", "feature", ".", "startswith", "(", "'Case='", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "pos", "==", "'AUX'", "and", "feature", ".", "startswith", "(", "'Polarity='", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_pos": [[138, 140], ["None"], "function", ["None"], ["", "def", "convert_pos", "(", "wordform", ")", ":", "\n", "    ", "return", "UNIMORPH_POS", "[", "wordform", "[", "'pos'", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.get_unimorph_features": [[141, 147], ["ud_converter.add_obligatory_markers"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.add_obligatory_markers"], ["", "def", "get_unimorph_features", "(", "wordform", ")", ":", "\n", "    ", "features", "=", "wordform", "[", "'pos_unimorph'", "]", "\n", "for", "feature_unimorph", "in", "wordform", "[", "'features_unimorph'", "]", ":", "\n", "        ", "features", "+=", "';'", "+", "feature_unimorph", "\n", "", "features", "=", "add_obligatory_markers", "(", "features", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.add_obligatory_markers": [[148, 152], ["None"], "function", ["None"], ["", "def", "add_obligatory_markers", "(", "features", ")", ":", "\n", "    ", "if", "features", "==", "'N'", ":", "\n", "        ", "return", "'N;NOM'", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.write_wordforms_to_file": [[153, 166], ["ud_converter.convert_wordforms", "set", "sorted", "open", "set.add", "fout.write", "ud_converter.get_unimorph_features"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_wordforms", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.get_unimorph_features"], ["", "def", "write_wordforms_to_file", "(", "wordforms", ",", "features", ",", "output_filename", ")", ":", "\n", "    ", "convert_wordforms", "(", "wordforms", ",", "features", ")", "\n", "wordforms_already_written", "=", "set", "(", ")", "\n", "sorted_wordforms", "=", "sorted", "(", "wordforms", ",", "key", "=", "lambda", "x", ":", "x", "[", "'lemma'", "]", ")", "\n", "with", "open", "(", "output_filename", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout", ":", "\n", "        ", "for", "sorted_wordform", "in", "sorted_wordforms", ":", "\n", "            ", "wordform_line", "=", "sorted_wordform", "[", "'lemma'", "]", "+", "'\\t'", "+", "sorted_wordform", "[", "'word'", "]", "+", "'\\t'", "+", "get_unimorph_features", "(", "sorted_wordform", ")", "\n", "if", "wordform_line", "in", "wordforms_already_written", ":", "\n", "                ", "continue", "\n", "", "wordforms_already_written", ".", "add", "(", "wordform_line", ")", "\n", "fout", ".", "write", "(", "wordform_line", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_corpus": [[167, 171], ["ud_converter.get_wordforms", "ud_converter.read_features_from_filename", "ud_converter.write_wordforms_to_file"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.get_wordforms", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.read_features_from_filename", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.write_wordforms_to_file"], ["", "", "", "def", "convert_corpus", "(", "corpus_filename", ",", "features_filename", ",", "output_filename", ")", ":", "\n", "    ", "wordforms", "=", "get_wordforms", "(", "corpus_filename", ")", "\n", "features", "=", "read_features_from_filename", "(", "features_filename", ")", "\n", "write_wordforms_to_file", "(", "wordforms", ",", "features", ",", "output_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.main": [[173, 182], ["ud_converter.convert_corpus", "print", "len", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.ud_converter.convert_corpus"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", ":", "\n", "        ", "print", "(", "\"usage: ud_converter.py <filename_corpus> <filename_features> <filename_output>\"", ")", "\n", "return", "\n", "", "corpus_filename", "=", "sys", ".", "argv", "[", "1", "]", "\n", "features_filename", "=", "sys", ".", "argv", "[", "2", "]", "\n", "output_filename", "=", "sys", ".", "argv", "[", "3", "]", "\n", "convert_corpus", "(", "corpus_filename", ",", "features_filename", ",", "output_filename", ")", "\n", "print", "(", "'success'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.is_esm": [[9, 11], ["filename.endswith"], "function", ["None"], ["def", "is_esm", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "EXMARALDA_BASIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_text_data": [[12, 34], ["esm_utils.get_root", "esm_utils.get_sentence_borders", "esm_utils.get_tier_data", "esm_utils.get_tier_data", "esm_utils.get_tier_data", "dict", "esm_utils.get_tokens_by_sentence", "text_data.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_root", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_sentence_borders", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_tokens_by_sentence"], ["", "def", "get_text_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    :param filename: EAF filename\n    :return: a dictionary containing sentences, their translations and the interlinearization data\n    \"\"\"", "\n", "root", "=", "get_root", "(", "filename", ")", "\n", "sentence_borders", "=", "get_sentence_borders", "(", "root", ")", "\n", "words_split_morphemes", "=", "get_tier_data", "(", "root", ",", "'mb'", ")", "\n", "glosses", "=", "get_tier_data", "(", "root", ",", "'gr'", ")", "\n", "parts_of_speech", "=", "get_tier_data", "(", "root", ",", "'ps'", ")", "\n", "text_data", "=", "[", "]", "\n", "for", "sentence_border", "in", "sentence_borders", ":", "\n", "        ", "sentence_start", "=", "sentence_border", "[", "'time'", "]", "[", "0", "]", "\n", "sentence_end", "=", "sentence_border", "[", "'time'", "]", "[", "1", "]", "\n", "text_data_sentence", "=", "dict", "(", ")", "\n", "text_data_sentence", "[", "'sentence'", "]", "=", "sentence_border", "[", "'sentence'", "]", "\n", "text_data_sentence", "[", "'translation'", "]", "=", "sentence_border", "[", "'translation'", "]", "\n", "text_data_sentence", "[", "'morphology'", "]", "=", "get_tokens_by_sentence", "(", "words_split_morphemes", ",", "glosses", ",", "\n", "parts_of_speech", ",", "\n", "sentence_start", ",", "sentence_end", ")", "\n", "text_data", ".", "append", "(", "text_data_sentence", ")", "\n", "", "return", "text_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tokens_by_sentence": [[35, 55], ["range", "dict", "morph_data.append"], "function", ["None"], ["", "def", "get_tokens_by_sentence", "(", "words_split_morphemes", ",", "\n", "glosses", ",", "\n", "parts_of_speech", ",", "\n", "sentence_start", ",", "sentence_end", ")", ":", "\n", "    ", "morph_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sentence_start", ",", "sentence_end", ")", ":", "\n", "        ", "morph_data_word", "=", "dict", "(", ")", "\n", "#a russian word has no analysis", "\n", "if", "i", "in", "words_split_morphemes", ":", "\n", "            ", "morph_data_word", "[", "'token'", "]", "=", "words_split_morphemes", "[", "i", "]", "\n", "if", "not", "i", "in", "glosses", ":", "\n", "                ", "morph_data_word", "[", "'analysis'", "]", "=", "''", "\n", "", "else", ":", "\n", "                ", "morph_data_word", "[", "'analysis'", "]", "=", "glosses", "[", "i", "]", "\n", "", "if", "not", "i", "in", "parts_of_speech", ":", "\n", "                ", "morph_data_word", "[", "'pos'", "]", "=", "'UNKN'", "\n", "", "else", ":", "\n", "                ", "morph_data_word", "[", "'pos'", "]", "=", "parts_of_speech", "[", "i", "]", "\n", "", "morph_data", ".", "append", "(", "morph_data_word", ")", "\n", "", "", "return", "morph_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_sentence_borders": [[56, 73], ["esm_utils.get_tier", "esm_utils.get_tier", "event.text.startswith", "events.append", "esm_utils.get_event_number", "esm_utils.get_event_number"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_event_number", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_event_number"], ["", "def", "get_sentence_borders", "(", "root", ")", ":", "\n", "    ", "events", "=", "[", "]", "\n", "sentence_tier", "=", "get_tier", "(", "root", ",", "'ts'", ")", "\n", "translation_tier", "=", "get_tier", "(", "root", ",", "'fr'", ")", "\n", "index", "=", "0", "\n", "for", "event", "in", "sentence_tier", ":", "\n", "        ", "if", "event", ".", "text", ".", "startswith", "(", "'((NOISE))'", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "event_time", "=", "(", "get_event_number", "(", "event", ".", "attrib", "[", "'start'", "]", ")", ",", "\n", "get_event_number", "(", "event", ".", "attrib", "[", "'end'", "]", ")", ")", "\n", "event", "=", "{", "'time'", ":", "event_time", ",", "\n", "'sentence'", ":", "event", ".", "text", ",", "\n", "'translation'", ":", "translation_tier", "[", "index", "]", ".", "text", "}", "\n", "events", ".", "append", "(", "event", ")", "\n", "index", "+=", "1", "\n", "", "return", "events", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier_data": [[74, 81], ["esm_utils.get_tier", "dict", "esm_utils.get_event_number"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_event_number"], ["", "def", "get_tier_data", "(", "root", ",", "tier_name", ")", ":", "\n", "    ", "tier", "=", "get_tier", "(", "root", ",", "tier_name", ")", "\n", "tier_data", "=", "dict", "(", ")", "\n", "for", "event", "in", "tier", ":", "\n", "        ", "event_number", "=", "get_event_number", "(", "event", ".", "attrib", "[", "'start'", "]", ")", "\n", "tier_data", "[", "event_number", "]", "=", "event", ".", "text", "\n", "", "return", "tier_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_root": [[82, 85], ["xml.parse", "ET.parse.getroot"], "function", ["None"], ["", "def", "get_root", "(", "filename", ")", ":", "\n", "    ", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "return", "tree", ".", "getroot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_tier": [[86, 88], ["root.find"], "function", ["None"], ["", "def", "get_tier", "(", "root", ",", "tier_name", ")", ":", "\n", "    ", "return", "root", ".", "find", "(", "TIER_PATH", "%", "tier_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.get_event_number": [[89, 91], ["int", "event_code.split"], "function", ["None"], ["", "def", "get_event_number", "(", "event_code", ")", ":", "\n", "    ", "return", "int", "(", "event_code", ".", "split", "(", "'T'", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.convert_folder_conll": [[118, 149], ["print", "open", "open", "os.walk", "os.path.join", "converters.esm_utils.is_esm", "print", "esm_converter.convert_file_conll", "len", "os.path.join", "print", "traceback.print_exc", "bad_files.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.is_esm", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_conll"], ["def", "convert_folder_conll", "(", "folder_name", ",", "output_filename_train", ",", "output_filename_test", ",", "\n", "filenames_restriction", ",", "\n", "filenames_filter", "=", "None", ")", ":", "\n", "    ", "file_num", "=", "0", "\n", "bad_files", "=", "[", "]", "\n", "num_tokens", "=", "0", "\n", "num_sentences", "=", "0", "\n", "with", "open", "(", "output_filename_train", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_train", ":", "\n", "        ", "with", "open", "(", "output_filename_test", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_test", ":", "\n", "            ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "folder_name", ")", ":", "\n", "                ", "for", "base_filename", "in", "files", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "base_filename", ")", "\n", "if", "esm_utils", ".", "is_esm", "(", "filename", ")", "and", "(", "len", "(", "filenames_restriction", ")", "==", "0", "or", "filename", "in", "filenames_restriction", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "print", "(", "\"=======\"", ",", "filename", ",", "\"==============\"", ")", "\n", "\n", "file_num_tokens", ",", "file_num_sentences", "=", "convert_file_conll", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "filename", ")", ",", "\n", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", "\n", "file_num", "+=", "1", "\n", "num_tokens", "+=", "file_num_tokens", "\n", "num_sentences", "+=", "file_num_sentences", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                            ", "print", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "bad_files", ".", "append", "(", "(", "filename", ",", "e", ")", ")", "\n", "break", "\n", "", "", "", "", "", "", "print", "(", "\"%s files converted\"", "%", "file_num", ")", "\n", "return", "bad_files", ",", "num_tokens", ",", "num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.convert_file_conll": [[154, 182], ["converters.esm_utils.get_text_data", "enumerate", "Exception", "os.path.basename", "fout.write", "esm_converter.write_comment_data", "esm_converter.write_all_tokens_data", "random.random"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_text_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_comment_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data"], ["def", "convert_file_conll", "(", "filename", ",", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", ":", "\n", "    ", "total_num_sentences", "=", "0", "\n", "num_tokens", "=", "0", "\n", "text_data", "=", "esm_utils", ".", "get_text_data", "(", "filename", ")", "\n", "if", "not", "text_data", ":", "\n", "        ", "raise", "Exception", "(", "\"Empty filename: %s\"", "%", "filename", ")", "\n", "\n", "\n", "", "for", "sentence_num", ",", "text_data_sentence", "in", "enumerate", "(", "text_data", ")", ":", "\n", "        ", "base_filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "base_filename", "in", "filenames_filter", "and", "sentence_num", "in", "filenames_filter", "[", "base_filename", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "random", ".", "random", "(", ")", ">", "RANDOM_THRESHOLD", ":", "\n", "            ", "fout", "=", "fout_train", "\n", "", "else", ":", "\n", "            ", "fout", "=", "fout_test", "\n", "", "\"\"\"if base_filename in filenames_filter and sentence_num in filenames_filter[base_filename]:\n            fout = fout_train\n        else:\n            fout = fout_test\"\"\"", "\n", "fout", ".", "write", "(", "CONLL_NEW_LINE", ")", "\n", "total_num_sentences", "+=", "1", "\n", "write_comment_data", "(", "filename", ",", "sentence_num", ",", "text_data_sentence", ",", "fout", ")", "\n", "num_sentence_tokens", "=", "write_all_tokens_data", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", "\n", "num_tokens", "+=", "num_sentence_tokens", "\n", "", "return", "num_tokens", ",", "total_num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.write_comment_data": [[186, 192], ["fout.write", "text_data_sentence[].replace", "text_data_sentence[].replace", "fout.write", "os.path.basename"], "function", ["None"], ["def", "write_comment_data", "(", "filename", ",", "sentence_num", ",", "text_data_sentence", ",", "fout", ")", ":", "\n", "    ", "fout", ".", "write", "(", "\"#%s:%s\\n\"", "%", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ",", "sentence_num", ")", ")", "\n", "sentence_text", "=", "text_data_sentence", "[", "'sentence'", "]", ".", "replace", "(", "\"\\n\"", ",", "\"#\"", ")", "\n", "sentence_translation", "=", "text_data_sentence", "[", "'translation'", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\\n#\"", ")", "\n", "fout", ".", "write", "(", "\"#%s;%s\\n\"", "%", "(", "sentence_text", ",", "\n", "sentence_translation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.write_all_tokens_data": [[196, 202], ["len", "esm_converter.write_token_data"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data"], ["def", "write_all_tokens_data", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", ":", "\n", "    ", "morph_data", "=", "text_data_sentence", "[", "'morphology'", "]", "\n", "token_id", "=", "0", "\n", "for", "morph_data_token", "in", "morph_data", ":", "\n", "        ", "token_id", "=", "write_token_data", "(", "token_id", ",", "morph_data_token", ",", "filename", ",", "fout", ")", "\n", "", "return", "len", "(", "morph_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.write_token_data": [[204, 210], ["esm_converter.normalize_token", "converters.evenki_lals_converter.write_single_token_data", "str"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_single_token_data"], ["", "def", "write_token_data", "(", "token_id", ",", "morph_data_token", ",", "filename", ",", "fout", ")", ":", "\n", "    ", "token_data", "=", "normalize_token", "(", "morph_data_token", ")", "\n", "write_single_token_data", "(", "str", "(", "token_id", ")", ",", "token_data", ",", "\n", "filename", ",", "fout", ")", "\n", "token_id", "+=", "1", "\n", "return", "token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token": [[214, 228], ["esm_converter.normalize_wordform", "esm_converter.normalize_morphemes", "esm_converter.normalize_glosses", "esm_converter.get_lemma", "esm_converter.normalize_pos", "esm_converter.normalize_features", "esm_converter.get_features"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_wordform", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_morphemes", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_glosses", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_lemma", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_pos", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_features"], ["", "def", "normalize_token", "(", "morph_data_token", ",", "is_split_by_dot", "=", "True", ")", ":", "\n", "    ", "normalized_token", "=", "normalize_wordform", "(", "morph_data_token", "[", "'token'", "]", ")", "\n", "normalized_morphemes", "=", "normalize_morphemes", "(", "morph_data_token", "[", "'token'", "]", ")", "\n", "normalized_glosses", "=", "normalize_glosses", "(", "morph_data_token", "[", "'analysis'", "]", ",", "is_split_by_dot", ")", "\n", "normalized_lemma", "=", "get_lemma", "(", "normalized_morphemes", ",", "normalized_glosses", ")", "\n", "normalized_pos", "=", "normalize_pos", "(", "morph_data_token", "[", "'pos'", "]", ")", "\n", "normalized_features", "=", "normalize_features", "(", "get_features", "(", "morph_data_token", ",", "normalized_pos", ",", "normalized_glosses", ")", ")", "\n", "\n", "return", "{", "'normalized_token'", ":", "normalized_token", ",", "\n", "'normalized_glosses'", ":", "normalized_glosses", ",", "\n", "'normalized_morphemes'", ":", "normalized_morphemes", ",", "\n", "'normalized_lemma'", ":", "normalized_lemma", ",", "\n", "'normalized_pos'", ":", "normalized_pos", ",", "\n", "'normalized_features'", ":", "normalized_features", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_wordform": [[231, 233], ["token.replace"], "function", ["None"], ["", "def", "normalize_wordform", "(", "token", ")", ":", "\n", "    ", "return", "token", ".", "replace", "(", "'-'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.get_lemma": [[235, 243], ["range", "len", "esm_converter.is_derivative"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.is_derivative"], ["", "def", "get_lemma", "(", "morphemes", ",", "glosses", ")", ":", "\n", "    ", "lemma", "=", "morphemes", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "morphemes", ")", ")", ":", "\n", "        ", "morpheme", "=", "morphemes", "[", "i", "]", "\n", "gloss", "=", "glosses", "[", "i", "]", "\n", "if", "is_derivative", "(", "gloss", ")", ":", "\n", "            ", "lemma", "+=", "morpheme", "\n", "", "", "return", "lemma", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_morphemes": [[245, 247], ["morphemes.split"], "function", ["None"], ["", "def", "normalize_morphemes", "(", "morphemes", ")", ":", "\n", "    ", "return", "morphemes", ".", "split", "(", "'-'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_glosses": [[248, 258], ["glosses.split", "gloss_part.split", "gloss_parts_normalized.append", "gloss_parts_normalized.append"], "function", ["None"], ["", "def", "normalize_glosses", "(", "glosses", ",", "is_split_by_dots", "=", "True", ")", ":", "\n", "    ", "gloss_parts", "=", "glosses", ".", "split", "(", "'-'", ")", "\n", "gloss_parts_normalized", "=", "[", "]", "\n", "for", "gloss_part", "in", "gloss_parts", ":", "\n", "        ", "if", "is_split_by_dots", ":", "\n", "            ", "for", "gloss_part_minor", "in", "gloss_part", ".", "split", "(", "'.'", ")", ":", "\n", "                ", "gloss_parts_normalized", ".", "append", "(", "gloss_part_minor", ")", "\n", "", "", "else", ":", "\n", "            ", "gloss_parts_normalized", ".", "append", "(", "gloss_part", ")", "\n", "", "", "return", "gloss_parts_normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_pos": [[260, 263], ["POSES.add"], "function", ["None"], ["", "def", "normalize_pos", "(", "pos", ")", ":", "\n", "    ", "POSES", ".", "add", "(", "pos", ")", "\n", "return", "POS_CONVERSION", "[", "pos", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.get_features": [[265, 295], ["converters.evenki_lals_converter.add_default_features", "list", "converters.evenki_lals_converter.read_feature_table", "normalized_gloss.strip().strip().strip.endswith", "normalized_gloss.strip().strip().strip.strip().strip().strip", "set", "gloss_arr.append", "gloss_arr.append", "gloss_arr.append", "normalized_gloss.strip().strip().strip.strip().strip", "BAD_GLOSSES.add", "normalized_gloss.strip().strip().strip.split", "normalized_gloss.strip().strip().strip.strip"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_feature_table"], ["", "def", "get_features", "(", "morph_data_token", ",", "normalized_pos", ",", "normalized_glosses", ")", ":", "\n", "    ", "global", "BAD_GLOSSES", "\n", "global", "FEATURE_TABLE", "\n", "if", "FEATURE_TABLE", "is", "None", ":", "\n", "        ", "FEATURE_TABLE", "=", "read_feature_table", "(", "FEATURE_FILENAME", ")", "\n", "", "feature_list", "=", "[", "]", "\n", "gloss_arr", "=", "[", "]", "\n", "for", "normalized_gloss", "in", "normalized_glosses", ":", "\n", "        ", "if", "normalized_gloss", ".", "endswith", "(", "'.PL'", ")", ":", "\n", "            ", "gloss_arr", ".", "append", "(", "'PL'", ")", "\n", "gloss_arr", ".", "append", "(", "normalized_gloss", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "gloss_arr", ".", "append", "(", "normalized_gloss", ")", "\n", "\n", "", "", "for", "normalized_gloss", "in", "gloss_arr", ":", "\n", "        ", "normalized_gloss", "=", "normalized_gloss", ".", "strip", "(", "'['", ")", ".", "strip", "(", "']'", ")", ".", "strip", "(", ")", "\n", "feature_key", "=", "normalized_pos", "+", "\"#\"", "+", "normalized_gloss", "\n", "if", "feature_key", "in", "FEATURE_TABLE", ":", "\n", "            ", "feature_list", "+=", "FEATURE_TABLE", "[", "feature_key", "]", "\n", "", "else", ":", "\n", "            ", "feature_key_all", "=", "\"ALL#\"", "+", "normalized_gloss", "\n", "if", "feature_key_all", "in", "FEATURE_TABLE", ":", "\n", "                ", "feature_list", "+=", "FEATURE_TABLE", "[", "feature_key_all", "]", "\n", "", "else", ":", "\n", "                ", "BAD_GLOSSES", ".", "add", "(", "normalized_gloss", ")", "\n", "\n", "", "", "", "feature_list", "=", "add_default_features", "(", "feature_list", ",", "normalized_pos", ")", "\n", "\"\"\"feature_list = modify_features(feature_list, normalized_pos, morph_data_token['analysis'][0]['fon'])\"\"\"", "\n", "feature_list", "=", "list", "(", "set", "(", "feature_list", ")", ")", "\n", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_features": [[297, 305], ["sorted", "feature_string.strip"], "function", ["None"], ["", "def", "normalize_features", "(", "features", ")", ":", "\n", "    ", "features_sorted", "=", "sorted", "(", "features", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "+", "'#'", "+", "x", "[", "1", "]", ")", "\n", "feature_string", "=", "\"\"", "\n", "for", "feature", "in", "features_sorted", ":", "\n", "        ", "if", "feature", "[", "0", "]", "==", "\"-\"", ":", "\n", "            ", "continue", "\n", "", "feature_string", "+=", "\"|\"", "+", "feature", "[", "0", "]", "+", "\"=\"", "+", "feature", "[", "1", "]", "\n", "", "return", "feature_string", ".", "strip", "(", "\"|\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.is_derivative": [[307, 309], ["None"], "function", ["None"], ["", "def", "is_derivative", "(", "gloss", ")", ":", "\n", "    ", "return", "gloss", "in", "DERIVATIVE_GLOSSES", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.convert_folder_morpheme": [[311, 342], ["print", "open", "open", "os.walk", "os.path.join", "converters.esm_utils.is_esm", "print", "esm_converter.convert_file_morpheme", "len", "os.path.join", "print", "traceback.print_exc", "bad_files.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_utils.is_esm", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_morpheme"], ["", "def", "convert_folder_morpheme", "(", "folder_name", ",", "output_filename_train", ",", "output_filename_test", ",", "\n", "filenames_restriction", ",", "\n", "filenames_filter", "=", "None", ")", ":", "\n", "    ", "file_num", "=", "0", "\n", "bad_files", "=", "[", "]", "\n", "num_tokens", "=", "0", "\n", "num_sentences", "=", "0", "\n", "with", "open", "(", "output_filename_train", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_train", ":", "\n", "        ", "with", "open", "(", "output_filename_test", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_test", ":", "\n", "            ", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "folder_name", ")", ":", "\n", "                ", "for", "base_filename", "in", "files", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "base_filename", ")", "\n", "if", "esm_utils", ".", "is_esm", "(", "filename", ")", "and", "(", "len", "(", "filenames_restriction", ")", "==", "0", "or", "filename", "in", "filenames_restriction", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "print", "(", "\"=======\"", ",", "filename", ",", "\"==============\"", ")", "\n", "\n", "file_num_tokens", ",", "file_num_sentences", "=", "convert_file_morpheme", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "filename", ")", ",", "\n", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", "\n", "file_num", "+=", "1", "\n", "num_tokens", "+=", "file_num_tokens", "\n", "num_sentences", "+=", "file_num_sentences", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                            ", "print", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "bad_files", ".", "append", "(", "(", "filename", ",", "e", ")", ")", "\n", "break", "\n", "", "", "", "", "", "", "print", "(", "\"%s files converted\"", "%", "file_num", ")", "\n", "return", "bad_files", ",", "num_tokens", ",", "num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.convert_file_morpheme": [[343, 368], ["converters.esm_utils.get_text_data", "enumerate", "Exception", "os.path.basename", "fout.write", "esm_converter.write_all_tokens_data_morpheme"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_text_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data_morpheme"], ["", "def", "convert_file_morpheme", "(", "filename", ",", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", ":", "\n", "    ", "total_num_sentences", "=", "0", "\n", "num_tokens", "=", "0", "\n", "text_data", "=", "esm_utils", ".", "get_text_data", "(", "filename", ")", "\n", "if", "not", "text_data", ":", "\n", "        ", "raise", "Exception", "(", "\"Empty filename: %s\"", "%", "filename", ")", "\n", "\n", "\n", "", "for", "sentence_num", ",", "text_data_sentence", "in", "enumerate", "(", "text_data", ")", ":", "\n", "        ", "base_filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "base_filename", "in", "filenames_filter", "and", "sentence_num", "in", "filenames_filter", "[", "base_filename", "]", ":", "\n", "            ", "fout", "=", "fout_train", "\n", "", "else", ":", "\n", "            ", "fout", "=", "fout_test", "\n", "", "\"\"\"if random.random() > RANDOM_THRESHOLD:\n            fout = fout_train\n        else:\n            fout = fout_test\"\"\"", "\n", "\n", "fout", ".", "write", "(", "CONLL_NEW_LINE", ")", "\n", "total_num_sentences", "+=", "1", "\n", "num_sentence_tokens", "=", "write_all_tokens_data_morpheme", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", "\n", "num_tokens", "+=", "num_sentence_tokens", "\n", "", "return", "num_tokens", ",", "total_num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.write_all_tokens_data_morpheme": [[369, 374], ["len", "esm_converter.write_token_data_morpheme"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data_morpheme"], ["", "def", "write_all_tokens_data_morpheme", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", ":", "\n", "    ", "morph_data", "=", "text_data_sentence", "[", "'morphology'", "]", "\n", "for", "morph_data_token", "in", "morph_data", ":", "\n", "        ", "write_token_data_morpheme", "(", "morph_data_token", ",", "filename", ",", "fout", ")", "\n", "", "return", "len", "(", "morph_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.write_token_data_morpheme": [[375, 391], ["esm_converter.normalize_token", "range", "fout.write", "len", "part_analysis.strip"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token"], ["", "def", "write_token_data_morpheme", "(", "morph_data_token", ",", "filename", ",", "fout", ")", ":", "\n", "    ", "token_data", "=", "normalize_token", "(", "morph_data_token", ",", "False", ")", "\n", "part_word", "=", "''", "\n", "part_analysis", "=", "''", "\n", "part_word", "+=", "token_data", "[", "'normalized_token'", "]", "\n", "normalized_morpheme", "=", "token_data", "[", "'normalized_morphemes'", "]", "[", "0", "]", "\n", "\n", "part_analysis", "+=", "normalized_morpheme", "+", "' '", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "token_data", "[", "'normalized_glosses'", "]", ")", ")", ":", "\n", "        ", "normalized_morpheme", "=", "token_data", "[", "'normalized_morphemes'", "]", "[", "i", "]", "\n", "if", "normalized_morpheme", "==", "''", ":", "\n", "            ", "continue", "\n", "", "normalized_gloss", "=", "token_data", "[", "'normalized_glosses'", "]", "[", "i", "]", "\n", "\n", "part_analysis", "+=", "normalized_morpheme", "+", "'_'", "+", "normalized_gloss", "+", "' '", "\n", "", "fout", ".", "write", "(", "part_word", "+", "'\\t'", "+", "part_analysis", ".", "strip", "(", ")", "+", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_tokens": [[393, 395], ["esm_converter.normalize_token"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token"], ["", "def", "normalize_tokens", "(", "morph_data_token", ")", ":", "\n", "    ", "return", "[", "normalize_token", "(", "token", ")", "for", "token", "in", "morph_data_token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.main": [[396, 412], ["converters.evenki_lals_converter.read_file_sentence_ids", "esm_converter.convert_folder_morpheme", "print", "len", "print", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_file_sentence_ids", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_folder_morpheme"], ["", "def", "main", "(", ")", ":", "\n", "    ", "file_sentence_dict", "=", "read_file_sentence_ids", "(", "\"D://Projects//morphology_scripts//converters//train_selk.txt\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", ":", "\n", "        ", "print", "(", "\"usage: esm_converter.py <folder> <train_file> <test_file>\"", ")", "\n", "return", "\n", "", "bad_files", ",", "num_tokens", ",", "num_sentences", "=", "convert_folder_morpheme", "(", "\n", "sys", ".", "argv", "[", "1", "]", ",", "\n", "sys", ".", "argv", "[", "2", "]", ",", "\n", "sys", ".", "argv", "[", "3", "]", ",", "\n", "[", "]", ",", "\n", "file_sentence_dict", "\n", ")", "\n", "\n", "for", "filename", ",", "e", "in", "bad_files", ":", "\n", "        ", "print", "(", "\"%s:%s\"", "%", "(", "filename", ",", "e", ")", ")", "\n", "", "print", "(", "\"Total tokens: %s. Total sentences: %s\"", "%", "(", "num_tokens", ",", "num_sentences", ")", ")", "\n", "#print(sorted(list(BAD_GLOSSES)))", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_folder_conll": [[57, 85], ["print", "open", "open", "os.listdir", "eaf_utils.is_eaf", "print", "evenki_lals_converter.convert_file_conll", "len", "os.path.join", "print", "traceback.print_exc", "bad_files.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.is_eaf", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_conll"], ["def", "convert_folder_conll", "(", "folder_name", ",", "output_filename_train", ",", "output_filename_test", ",", "\n", "filenames_restriction", ",", "\n", "filenames_filter", "=", "None", ")", ":", "\n", "    ", "file_num", "=", "0", "\n", "bad_files", "=", "[", "]", "\n", "num_tokens", "=", "0", "\n", "num_sentences", "=", "0", "\n", "with", "open", "(", "output_filename_train", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_train", ":", "\n", "        ", "with", "open", "(", "output_filename_test", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_test", ":", "\n", "            ", "for", "filename", "in", "os", ".", "listdir", "(", "folder_name", ")", ":", "\n", "                ", "if", "eaf_utils", ".", "is_eaf", "(", "filename", ")", "and", "(", "len", "(", "filenames_restriction", ")", "==", "0", "or", "filename", "in", "filenames_restriction", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "print", "(", "\"=======\"", ",", "filename", ",", "\"==============\"", ")", "\n", "\n", "file_num_tokens", ",", "file_num_sentences", "=", "convert_file_conll", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "filename", ")", ",", "\n", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", "\n", "file_num", "+=", "1", "\n", "num_tokens", "+=", "file_num_tokens", "\n", "num_sentences", "+=", "file_num_sentences", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "bad_files", ".", "append", "(", "(", "filename", ",", "e", ")", ")", "\n", "", "", "", "", "", "print", "(", "\"%s files converted\"", "%", "file_num", ")", "\n", "return", "bad_files", ",", "num_tokens", ",", "num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_conll": [[90, 120], ["eaf_utils.get_text_data", "enumerate", "Exception", "os.path.basename", "fout.write", "evenki_lals_converter.write_comment_data", "evenki_lals_converter.write_all_tokens_data", "evenki_lals_converter.has_cyrillic", "random.random"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_text_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_comment_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.has_cyrillic"], ["def", "convert_file_conll", "(", "filename", ",", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", ":", "\n", "    ", "total_num_sentences", "=", "0", "\n", "num_tokens", "=", "0", "\n", "text_data", "=", "eaf_utils", ".", "get_text_data", "(", "filename", ",", "EVENKI_LANGUAGE_CODE", ")", "\n", "if", "not", "text_data", ":", "\n", "        ", "raise", "Exception", "(", "\"Empty filename: %s\"", "%", "filename", ")", "\n", "\n", "\n", "", "for", "sentence_num", ",", "text_data_sentence", "in", "enumerate", "(", "text_data", ")", ":", "\n", "        ", "if", "not", "text_data_sentence", "[", "'morphology'", "]", "or", "has_cyrillic", "(", "text_data_sentence", "[", "'morphology'", "]", ")", ":", "\n", "            ", "continue", "\n", "", "base_filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "base_filename", "in", "filenames_filter", "and", "sentence_num", "in", "filenames_filter", "[", "base_filename", "]", ":", "\n", "            ", "continue", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.35", ":", "\n", "            ", "fout", "=", "fout_train", "\n", "", "else", ":", "\n", "            ", "fout", "=", "fout_test", "\n", "", "\"\"\"if base_filename in filenames_filter and sentence_num in filenames_filter[base_filename]:\n            fout = fout_train\n        else:\n            fout = fout_test\"\"\"", "\n", "fout", ".", "write", "(", "CONLL_NEW_LINE", ")", "\n", "total_num_sentences", "+=", "1", "\n", "write_comment_data", "(", "filename", ",", "sentence_num", ",", "text_data_sentence", ",", "fout", ")", "\n", "num_sentence_tokens", "=", "write_all_tokens_data", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", "\n", "num_tokens", "+=", "num_sentence_tokens", "\n", "", "return", "num_tokens", ",", "total_num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_folder_morpheme": [[121, 149], ["print", "open", "open", "os.listdir", "eaf_utils.is_eaf", "print", "evenki_lals_converter.convert_file_morpheme", "len", "os.path.join", "print", "traceback.print_exc", "bad_files.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.is_eaf", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_morpheme"], ["", "def", "convert_folder_morpheme", "(", "folder_name", ",", "output_filename_train", ",", "output_filename_test", ",", "\n", "filenames_restriction", ",", "\n", "filenames_filter", "=", "None", ")", ":", "\n", "    ", "file_num", "=", "0", "\n", "bad_files", "=", "[", "]", "\n", "num_tokens", "=", "0", "\n", "num_sentences", "=", "0", "\n", "with", "open", "(", "output_filename_train", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_train", ":", "\n", "        ", "with", "open", "(", "output_filename_test", ",", "'w'", ",", "encoding", "=", "'utf-8'", ",", "newline", "=", "''", ")", "as", "fout_test", ":", "\n", "            ", "for", "filename", "in", "os", ".", "listdir", "(", "folder_name", ")", ":", "\n", "                ", "if", "eaf_utils", ".", "is_eaf", "(", "filename", ")", "and", "(", "len", "(", "filenames_restriction", ")", "==", "0", "or", "filename", "in", "filenames_restriction", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "print", "(", "\"=======\"", ",", "filename", ",", "\"==============\"", ")", "\n", "\n", "file_num_tokens", ",", "file_num_sentences", "=", "convert_file_morpheme", "(", "os", ".", "path", ".", "join", "(", "folder_name", ",", "filename", ")", ",", "\n", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", "\n", "file_num", "+=", "1", "\n", "num_tokens", "+=", "file_num_tokens", "\n", "num_sentences", "+=", "file_num_sentences", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "bad_files", ".", "append", "(", "(", "filename", ",", "e", ")", ")", "\n", "", "", "", "", "", "print", "(", "\"%s files converted\"", "%", "file_num", ")", "\n", "return", "bad_files", ",", "num_tokens", ",", "num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_file_morpheme": [[151, 179], ["eaf_utils.get_text_data", "enumerate", "Exception", "os.path.basename", "fout.write", "evenki_lals_converter.write_all_tokens_data_morpheme", "evenki_lals_converter.has_cyrillic"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_text_data", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data_morpheme", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.has_cyrillic"], ["", "def", "convert_file_morpheme", "(", "filename", ",", "filenames_filter", ",", "\n", "fout_train", ",", "fout_test", ")", ":", "\n", "    ", "total_num_sentences", "=", "0", "\n", "num_tokens", "=", "0", "\n", "text_data", "=", "eaf_utils", ".", "get_text_data", "(", "filename", ",", "EVENKI_LANGUAGE_CODE", ")", "\n", "if", "not", "text_data", ":", "\n", "        ", "raise", "Exception", "(", "\"Empty filename: %s\"", "%", "filename", ")", "\n", "\n", "\n", "", "for", "sentence_num", ",", "text_data_sentence", "in", "enumerate", "(", "text_data", ")", ":", "\n", "        ", "if", "not", "text_data_sentence", "[", "'morphology'", "]", "or", "has_cyrillic", "(", "text_data_sentence", "[", "'morphology'", "]", ")", ":", "\n", "            ", "continue", "\n", "", "base_filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "if", "base_filename", "in", "filenames_filter", "and", "sentence_num", "in", "filenames_filter", "[", "base_filename", "]", ":", "\n", "            ", "fout", "=", "fout_train", "\n", "", "else", ":", "\n", "            ", "fout", "=", "fout_test", "\n", "", "\"\"\"if random.random() > 0.1:\n            fout = fout_train\n        else:\n            fout = fout_test\"\"\"", "\n", "\n", "fout", ".", "write", "(", "CONLL_NEW_LINE", ")", "\n", "total_num_sentences", "+=", "1", "\n", "num_sentence_tokens", "=", "write_all_tokens_data_morpheme", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", "\n", "num_tokens", "+=", "num_sentence_tokens", "\n", "", "return", "num_tokens", ",", "total_num_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data_morpheme": [[180, 185], ["len", "evenki_lals_converter.write_token_data_morpheme"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data_morpheme"], ["", "def", "write_all_tokens_data_morpheme", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", ":", "\n", "    ", "morph_data", "=", "text_data_sentence", "[", "'morphology'", "]", "\n", "for", "morph_data_token", "in", "morph_data", ":", "\n", "        ", "write_token_data_morpheme", "(", "morph_data_token", ",", "filename", ",", "fout", ")", "\n", "", "return", "len", "(", "morph_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data_morpheme": [[186, 208], ["evenki_lals_converter.normalize_tokens", "fout.write", "range", "len", "GLOSSES[].add", "part_analysis.strip"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_tokens"], ["", "def", "write_token_data_morpheme", "(", "morph_data_token", ",", "filename", ",", "fout", ")", ":", "\n", "    ", "tokens_data", "=", "normalize_tokens", "(", "morph_data_token", ")", "\n", "part_word", "=", "''", "\n", "part_analysis", "=", "''", "\n", "for", "token_data", "in", "tokens_data", ":", "\n", "        ", "if", "token_data", "[", "'is_multiword'", "]", ":", "\n", "            ", "continue", "\n", "", "part_word", "+=", "token_data", "[", "'normalized_token'", "]", "\n", "normalized_morpheme", "=", "token_data", "[", "'normalized_morphemes'", "]", "[", "0", "]", "\n", "\n", "part_analysis", "+=", "normalized_morpheme", "+", "' '", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "token_data", "[", "'normalized_glosses'", "]", ")", ")", ":", "\n", "            ", "normalized_morpheme", "=", "token_data", "[", "'normalized_morphemes'", "]", "[", "i", "]", "\n", "if", "normalized_morpheme", "==", "''", ":", "\n", "                ", "continue", "\n", "", "normalized_gloss", "=", "token_data", "[", "'normalized_glosses'", "]", "[", "i", "]", "\n", "if", "normalized_gloss", "in", "GLOSSES", ":", "\n", "                ", "GLOSSES", "[", "normalized_gloss", "]", ".", "add", "(", "filename", ")", "\n", "", "else", ":", "\n", "                ", "GLOSSES", "[", "normalized_gloss", "]", "=", "{", "filename", "}", "\n", "", "part_analysis", "+=", "normalized_morpheme", "+", "'_'", "+", "normalized_gloss", "+", "' '", "\n", "", "", "fout", ".", "write", "(", "part_word", "+", "'\\t'", "+", "part_analysis", ".", "strip", "(", ")", "+", "'\\r\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_comment_data": [[213, 219], ["fout.write", "text_data_sentence[].replace", "text_data_sentence[].replace", "fout.write", "os.path.basename"], "function", ["None"], ["def", "write_comment_data", "(", "filename", ",", "sentence_num", ",", "text_data_sentence", ",", "fout", ")", ":", "\n", "    ", "fout", ".", "write", "(", "\"#%s:%s\\n\"", "%", "(", "os", ".", "path", ".", "basename", "(", "filename", ")", ",", "sentence_num", ")", ")", "\n", "sentence_text", "=", "text_data_sentence", "[", "'sentence'", "]", ".", "replace", "(", "\"\\n\"", ",", "\"#\"", ")", "\n", "sentence_translation", "=", "text_data_sentence", "[", "'translation'", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\\n#\"", ")", "\n", "fout", ".", "write", "(", "\"#%s;%s\\n\"", "%", "(", "sentence_text", ",", "\n", "sentence_translation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_all_tokens_data": [[223, 229], ["len", "evenki_lals_converter.write_token_data"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data"], ["def", "write_all_tokens_data", "(", "text_data_sentence", ",", "fout", ",", "filename", ")", ":", "\n", "    ", "morph_data", "=", "text_data_sentence", "[", "'morphology'", "]", "\n", "token_id", "=", "0", "\n", "for", "morph_data_token", "in", "morph_data", ":", "\n", "        ", "token_id", "=", "write_token_data", "(", "token_id", ",", "morph_data_token", ",", "filename", ",", "fout", ")", "\n", "", "return", "len", "(", "morph_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_token_data": [[231, 242], ["evenki_lals_converter.normalize_tokens", "len", "evenki_lals_converter.generate_number", "evenki_lals_converter.write_single_token_data"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_tokens", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.generate_number", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_single_token_data"], ["", "def", "write_token_data", "(", "token_id", ",", "morph_data_token", ",", "filename", ",", "fout", ")", ":", "\n", "    ", "tokens_data", "=", "normalize_tokens", "(", "morph_data_token", ")", "\n", "num_tokens", "=", "len", "(", "tokens_data", ")", "\n", "for", "token_data", "in", "tokens_data", ":", "\n", "        ", "token_number", "=", "generate_number", "(", "token_id", ",", "token_data", "[", "'is_multiword'", "]", ",", "num_tokens", ")", "\n", "\n", "write_single_token_data", "(", "token_number", ",", "token_data", ",", "\n", "filename", ",", "fout", ")", "\n", "if", "not", "token_data", "[", "'is_multiword'", "]", ":", "\n", "            ", "token_id", "+=", "1", "\n", "", "", "return", "token_id", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.generate_number": [[244, 249], ["str", "str", "str"], "function", ["None"], ["", "def", "generate_number", "(", "token_id", ",", "is_multiword", ",", "num_tokens", ")", ":", "\n", "    ", "starting_num", "=", "token_id", "+", "1", "\n", "if", "is_multiword", ":", "\n", "        ", "return", "str", "(", "starting_num", ")", "+", "\"-\"", "+", "str", "(", "starting_num", "+", "num_tokens", "-", "2", ")", "\n", "", "return", "str", "(", "starting_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.write_single_token_data": [[250, 305], ["fout.write", "len", "os.path.basename", "FON_SET.add", "GLOSSES[].add"], "function", ["None"], ["", "def", "write_single_token_data", "(", "token_number", ",", "tokens_data", ",", "\n", "filename", ",", "fout", ")", ":", "\n", "    ", "normalized_glosses", "=", "tokens_data", "[", "'normalized_glosses'", "]", "\n", "normalized_token", "=", "tokens_data", "[", "'normalized_token'", "]", "\n", "normalized_lemma", "=", "tokens_data", "[", "'normalized_lemma'", "]", "\n", "normalized_pos", "=", "tokens_data", "[", "'normalized_pos'", "]", "\n", "normalized_features", "=", "tokens_data", "[", "'normalized_features'", "]", "\n", "\n", "if", "len", "(", "normalized_glosses", ")", ">", "1", ":", "\n", "        ", "base_filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "for", "normalized_gloss", "in", "normalized_glosses", "[", "1", ":", "]", ":", "\n", "            ", "if", "normalized_gloss", "in", "GLOSSES", ":", "\n", "                ", "GLOSSES", "[", "normalized_gloss", "]", ".", "add", "(", "base_filename", ")", "\n", "", "else", ":", "\n", "                ", "GLOSSES", "[", "normalized_gloss", "]", "=", "{", "base_filename", "}", "\n", "\n", "\n", "#ID", "\n", "", "", "", "output_line", "=", "token_number", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#FORM", "\n", "output_line", "+=", "normalized_token", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "\n", "for", "symbol", "in", "normalized_token", ":", "\n", "        ", "FON_SET", ".", "add", "(", "symbol", ")", "\n", "\n", "#LEMMA", "\n", "", "output_line", "+=", "normalized_lemma", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#UPOS", "\n", "output_line", "+=", "normalized_pos", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#XPOS", "\n", "output_line", "+=", "CONLL_NO_VALUE", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#FEATS", "\n", "if", "normalized_features", "==", "''", ":", "\n", "        ", "normalized_features", "=", "CONLL_NO_VALUE", "\n", "", "output_line", "+=", "normalized_features", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#HEAD", "\n", "output_line", "+=", "CONLL_NO_VALUE", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#DEPREL", "\n", "output_line", "+=", "CONLL_NO_VALUE", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#DEPS", "\n", "output_line", "+=", "CONLL_NO_VALUE", "\n", "output_line", "+=", "CONLL_DELIMITER", "\n", "#MISC", "\n", "output_line", "+=", "CONLL_NO_VALUE", "\n", "\n", "\n", "fout", ".", "write", "(", "output_line", "+", "CONLL_NEW_LINE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_tokens": [[307, 341], ["language_utils.normalize_tokens", "tokens_data.append", "evenki_lals_converter.get_lemma", "evenki_lals_converter.processPOS", "evenki_lals_converter.normalize_features", "tokens_data.append", "evenki_lals_converter.get_features"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_tokens", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_lemma", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.processPOS", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_features"], ["", "def", "normalize_tokens", "(", "morph_data_token", ")", ":", "\n", "    ", "tokens_data", "=", "[", "]", "\n", "multiword", ",", "normalized_tokens", "=", "language_utils", ".", "normalize_tokens", "(", "morph_data_token", ")", "\n", "if", "multiword", "!=", "''", ":", "\n", "        ", "tokens_data", ".", "append", "(", "{", "'normalized_token'", ":", "multiword", ",", "\n", "'normalized_glosses'", ":", "[", "]", ",", "\n", "'normalized_lemma'", ":", "CONLL_NO_VALUE", ",", "\n", "'normalized_pos'", ":", "CONLL_NO_VALUE", ",", "\n", "'normalized_features'", ":", "CONLL_NO_VALUE", ",", "\n", "'normalized_morphemes'", ":", "CONLL_NO_VALUE", ",", "\n", "'is_multiword'", ":", "True", "}", ")", "\n", "\n", "", "for", "normalized_token_glosses", "in", "normalized_tokens", ":", "\n", "        ", "starting_index", "=", "normalized_token_glosses", "[", "'starting_index'", "]", "\n", "normalized_token", "=", "normalized_token_glosses", "[", "'normalized_token'", "]", "\n", "normalized_glosses", "=", "normalized_token_glosses", "[", "'normalized_glosses'", "]", "\n", "normalized_morphemes", "=", "normalized_token_glosses", "[", "'normalized_morphemes'", "]", "\n", "\n", "normalized_lemma", "=", "get_lemma", "(", "starting_index", ",", "morph_data_token", ",", "normalized_glosses", ")", "\n", "\n", "\n", "normalized_pos", "=", "processPOS", "(", "morph_data_token", "[", "'pos'", "]", ",", "\n", "morph_data_token", "[", "'analysis'", "]", "[", "starting_index", "]", "[", "'fon'", "]", ",", "\n", "normalized_token", ",", "\n", "normalized_glosses", ")", "\n", "normalized_features", "=", "normalize_features", "(", "get_features", "(", "morph_data_token", ",", "normalized_pos", ",", "normalized_glosses", ")", ")", "\n", "tokens_data", ".", "append", "(", "{", "'normalized_token'", ":", "normalized_token", ",", "\n", "'normalized_glosses'", ":", "normalized_glosses", ",", "\n", "'normalized_morphemes'", ":", "normalized_morphemes", ",", "\n", "'normalized_lemma'", ":", "normalized_lemma", ",", "\n", "'normalized_pos'", ":", "normalized_pos", ",", "\n", "'normalized_features'", ":", "normalized_features", ",", "\n", "'is_multiword'", ":", "False", "}", ")", "\n", "", "return", "tokens_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_lemma": [[343, 354], ["range", "language_utils.normalize_token", "len", "language_utils.is_derivative", "analysis[].strip"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.normalize_token", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.esm_converter.is_derivative"], ["", "def", "get_lemma", "(", "starting_index", ",", "morph_data_token", ",", "normalized_glosses", ")", ":", "\n", "    ", "lemma", "=", "morph_data_token", "[", "'analysis'", "]", "[", "starting_index", "]", "[", "'fon'", "]", "\n", "for", "i", "in", "range", "(", "starting_index", "+", "1", ",", "len", "(", "normalized_glosses", ")", ")", ":", "\n", "        ", "analysis", "=", "morph_data_token", "[", "'analysis'", "]", "[", "i", "]", "\n", "gloss_normalized", "=", "normalized_glosses", "[", "i", "]", "\n", "if", "language_utils", ".", "is_derivative", "(", "gloss_normalized", ")", ":", "\n", "            ", "lemma", "+=", "analysis", "[", "'fon'", "]", ".", "strip", "(", "'-'", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "language_utils", ".", "normalize_token", "(", "lemma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.get_features": [[356, 385], ["evenki_lals_converter.add_default_features", "evenki_lals_converter.modify_features", "list", "evenki_lals_converter.read_feature_table", "language_utils.is_slip_unknown", "normalized_gloss.endswith", "set", "normalized_gloss.startswith", "normalized_gloss.endswith", "language_utils.is_cyrillic", "print", "str"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.modify_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_feature_table", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_slip_unknown", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_cyrillic"], ["", "def", "get_features", "(", "morph_data_token", ",", "normalized_pos", ",", "normalized_glosses", ")", ":", "\n", "    ", "global", "FEATURE_TABLE", "\n", "if", "FEATURE_TABLE", "is", "None", ":", "\n", "        ", "FEATURE_TABLE", "=", "read_feature_table", "(", "FEATURE_FILENAME", ")", "\n", "", "feature_list", "=", "[", "]", "\n", "for", "normalized_gloss", "in", "normalized_glosses", ":", "\n", "        ", "if", "language_utils", ".", "is_slip_unknown", "(", "normalized_gloss", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "normalized_gloss", ".", "startswith", "(", "'?'", ")", "or", "normalized_gloss", ".", "endswith", "(", "'?'", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "language_utils", ".", "is_cyrillic", "(", "normalized_gloss", ")", "or", "normalized_gloss", "==", "''", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "normalized_gloss", ".", "endswith", "(", "'.PL'", ")", ":", "\n", "            ", "normalized_gloss", "=", "'PL'", "\n", "", "feature_key", "=", "normalized_pos", "+", "\"#\"", "+", "normalized_gloss", "\n", "if", "feature_key", "in", "FEATURE_TABLE", ":", "\n", "            ", "feature_list", "+=", "FEATURE_TABLE", "[", "feature_key", "]", "\n", "", "else", ":", "\n", "            ", "feature_key_all", "=", "\"ALL#\"", "+", "normalized_gloss", "\n", "if", "feature_key_all", "in", "FEATURE_TABLE", ":", "\n", "                ", "feature_list", "+=", "FEATURE_TABLE", "[", "feature_key_all", "]", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"BAD:====\"", "+", "feature_key", "+", "\":\"", "+", "str", "(", "morph_data_token", ")", ")", "\n", "", "", "", "feature_list", "=", "add_default_features", "(", "feature_list", ",", "normalized_pos", ")", "\n", "feature_list", "=", "modify_features", "(", "feature_list", ",", "normalized_pos", ",", "morph_data_token", "[", "'analysis'", "]", "[", "0", "]", "[", "'fon'", "]", ")", "\n", "feature_list", "=", "list", "(", "set", "(", "feature_list", ")", ")", "\n", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.modify_features": [[387, 421], ["feature_list.remove", "evenki_lals_converter.is_imperfective_feature", "feature_list.remove", "feature_list.remove", "feature_list.append", "evenki_lals_converter.is_non_futurum_feature", "evenki_lals_converter.is_non_singular_feature", "feature_list.remove", "feature_list.append", "feature_list.remove", "feature_list.append", "evenki_lals_converter.is_singular_feature"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_imperfective_feature", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_futurum_feature", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_singular_feature", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_singular_feature"], ["", "def", "modify_features", "(", "feature_list", ",", "normalized_pos", ",", "stem", ")", ":", "\n", "\n", "\n", "\n", "    ", "is_imperfective", "=", "False", "\n", "is_non_futurum", "=", "False", "\n", "is_singular", "=", "False", "\n", "is_plural", "=", "False", "\n", "for", "feature_key", ",", "feature_value", "in", "feature_list", ":", "\n", "        ", "if", "normalized_pos", "==", "CONLL_VERB", "and", "is_imperfective_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_imperfective", "=", "True", "\n", "", "elif", "normalized_pos", "==", "CONLL_VERB", "and", "is_non_futurum_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_non_futurum", "=", "True", "\n", "", "elif", "is_non_singular_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_plural", "=", "True", "\n", "", "elif", "is_singular_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_singular", "=", "True", "\n", "\n", "", "", "if", "is_non_futurum", ":", "\n", "        ", "if", "is_imperfective", ":", "\n", "            ", "feature_list", ".", "remove", "(", "(", "'Tense'", ",", "'Nfut'", ")", ")", "\n", "feature_list", ".", "remove", "(", "(", "'Aspect'", ",", "'Imp'", ")", ")", "\n", "feature_list", ".", "append", "(", "(", "'Tense'", ",", "'Prs'", ")", ")", "\n", "", "elif", "stem", "==", "'bi'", ":", "\n", "            ", "feature_list", ".", "remove", "(", "(", "'Tense'", ",", "'Nfut'", ")", ")", "\n", "feature_list", ".", "append", "(", "(", "'Tense'", ",", "'Prs'", ")", ")", "\n", "", "else", ":", "\n", "            ", "feature_list", ".", "remove", "(", "(", "'Tense'", ",", "'Nfut'", ")", ")", "\n", "feature_list", ".", "append", "(", "(", "'Tense'", ",", "'Past'", ")", ")", "\n", "\n", "", "", "if", "is_plural", "and", "is_singular", ":", "\n", "        ", "feature_list", ".", "remove", "(", "(", "'Number'", ",", "'Sing'", ")", ")", "\n", "\n", "", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features": [[423, 429], ["evenki_lals_converter.add_default_features_nominal", "evenki_lals_converter.add_default_features_verbal"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features_nominal", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features_verbal"], ["", "def", "add_default_features", "(", "feature_list", ",", "normalized_pos", ")", ":", "\n", "    ", "if", "normalized_pos", "in", "[", "CONLL_NOUN", ",", "CONLL_PROPER", ",", "CONLL_PRON", "]", ":", "\n", "        ", "return", "add_default_features_nominal", "(", "feature_list", ")", "\n", "", "if", "normalized_pos", "in", "[", "CONLL_VERB", "]", ":", "\n", "        ", "return", "add_default_features_verbal", "(", "feature_list", ")", "\n", "", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features_nominal": [[430, 443], ["feature_list.append", "feature_list.append", "evenki_lals_converter.is_non_nominative_case_feature", "evenki_lals_converter.is_non_singular_feature"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_nominative_case_feature", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_singular_feature"], ["", "def", "add_default_features_nominal", "(", "feature_list", ")", ":", "\n", "    ", "is_singular", "=", "True", "\n", "is_nominative", "=", "True", "\n", "for", "feature_key", ",", "feature_value", "in", "feature_list", ":", "\n", "        ", "if", "is_nominative", "and", "is_non_nominative_case_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_nominative", "=", "False", "\n", "", "if", "is_singular", "and", "is_non_singular_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_singular", "=", "False", "\n", "", "", "if", "is_singular", ":", "\n", "        ", "feature_list", ".", "append", "(", "(", "'Number'", ",", "'Sing'", ")", ")", "\n", "", "if", "is_nominative", ":", "\n", "        ", "feature_list", ".", "append", "(", "(", "'Case'", ",", "'Nom'", ")", ")", "\n", "", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.add_default_features_verbal": [[444, 456], ["feature_list.append", "feature_list.append", "evenki_lals_converter.is_non_indicative_feature", "evenki_lals_converter.is_non_finite_feature"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_indicative_feature", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_finite_feature"], ["", "def", "add_default_features_verbal", "(", "feature_list", ")", ":", "\n", "    ", "is_indicative", "=", "True", "\n", "is_finite", "=", "True", "\n", "for", "feature_key", ",", "feature_value", "in", "feature_list", ":", "\n", "        ", "if", "is_indicative", "and", "is_non_indicative_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_indicative", "=", "False", "\n", "", "if", "is_finite", "and", "is_non_finite_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "            ", "is_finite", "=", "False", "\n", "", "", "if", "is_indicative", "and", "is_finite", ":", "\n", "        ", "feature_list", ".", "append", "(", "(", "'Mood'", ",", "'Ind'", ")", ")", "\n", "feature_list", ".", "append", "(", "(", "'VerbForm'", ",", "'Fin'", ")", ")", "\n", "", "return", "feature_list", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_nominative_case_feature": [[457, 459], ["None"], "function", ["None"], ["", "def", "is_non_nominative_case_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Case'", "and", "feature_value", "!=", "'Nom'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_singular_feature": [[460, 462], ["None"], "function", ["None"], ["", "def", "is_non_singular_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Number'", "and", "feature_value", "!=", "'Sing'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_singular_feature": [[463, 465], ["None"], "function", ["None"], ["", "def", "is_singular_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Number'", "and", "feature_value", "==", "'Sing'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_indicative_feature": [[466, 468], ["None"], "function", ["None"], ["", "def", "is_non_indicative_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Mood'", "and", "feature_value", "!=", "'Ind'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_finite_feature": [[469, 471], ["None"], "function", ["None"], ["", "def", "is_non_finite_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'VerbForm'", "and", "feature_value", "!=", "'Fin'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_imperfective_feature": [[472, 474], ["None"], "function", ["None"], ["", "def", "is_imperfective_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Aspect'", "and", "feature_value", "==", "'Imp'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.is_non_futurum_feature": [[475, 477], ["None"], "function", ["None"], ["", "def", "is_non_futurum_feature", "(", "feature_key", ",", "feature_value", ")", ":", "\n", "    ", "return", "feature_key", "==", "'Tense'", "and", "feature_value", "==", "'Nfut'", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.processPOS": [[478, 482], ["evenki_lals_converter.guessPOS", "evenki_lals_converter.encodePOS"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.guessPOS", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.encodePOS"], ["", "def", "processPOS", "(", "pos", ",", "normalized_token", ",", "first_fon", ",", "normalized_glosses", ")", ":", "\n", "    ", "if", "pos", ":", "\n", "        ", "return", "encodePOS", "(", "pos", ")", "\n", "", "return", "guessPOS", "(", "normalized_token", ",", "first_fon", ",", "normalized_glosses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.guessPOS": [[483, 548], ["evenki_lals_converter.normalize_gloss", "language_utils.is_slip_unknown", "language_utils.is_noun_negation", "language_utils.is_special_verbal_form", "language_utils.is_personal_pronoun", "language_utils.is_special_noun_stem", "language_utils.get_russian_pos_set", "language_utils.is_interjection_translation", "language_utils.is_proper_noun_translation", "language_utils.is_c_conjunction_translation", "language_utils.is_s_conjunction_translation", "language_utils.is_determiner_translation", "language_utils.is_pronoun_translation", "language_utils.is_code_switching", "language_utils.is_adjective_translation", "language_utils.is_adverb_translation", "language_utils.is_numeric_translation", "normalize_gloss.strip", "CODE_SWITCHING.add", "language_utils.is_verb_gloss", "len", "range", "len", "len", "language_utils.is_slip", "language_utils.is_verb_gloss", "language_utils.is_adjective_gloss", "language_utils.is_adverb_gloss", "language_utils.is_noun_gloss"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_slip_unknown", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_noun_negation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_special_verbal_form", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_personal_pronoun", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_special_noun_stem", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.get_russian_pos_set", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_interjection_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_proper_noun_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_c_conjunction_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_s_conjunction_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_determiner_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_pronoun_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_code_switching", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adjective_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adverb_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_numeric_translation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_verb_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_slip", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_verb_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adjective_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_adverb_gloss", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_noun_gloss"], ["", "def", "guessPOS", "(", "normalized_token", ",", "first_fon", ",", "normalized_glosses", ")", ":", "\n", "    ", "first_gloss", "=", "normalize_gloss", "(", "normalized_glosses", "[", "0", "]", ")", "\n", "\n", "if", "first_gloss", "==", "'FOC'", ":", "\n", "        ", "return", "CONLL_PARTICLE", "\n", "", "if", "first_gloss", ".", "strip", "(", ")", "==", "''", ":", "\n", "        ", "return", "CONLL_OTHER", "\n", "", "if", "language_utils", ".", "is_slip_unknown", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_OTHER", "\n", "", "if", "language_utils", ".", "is_noun_negation", "(", "first_fon", ",", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_VERB", "\n", "", "if", "language_utils", ".", "is_special_verbal_form", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_VERB", "\n", "", "if", "language_utils", ".", "is_personal_pronoun", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_PRON", "\n", "", "if", "language_utils", ".", "is_special_noun_stem", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_NOUN", "\n", "\n", "", "possible_pos_set", "=", "language_utils", ".", "get_russian_pos_set", "(", "first_gloss", ")", "\n", "if", "language_utils", ".", "is_interjection_translation", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_INTJ", "\n", "", "if", "language_utils", ".", "is_proper_noun_translation", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_PROPER", "\n", "", "if", "language_utils", ".", "is_c_conjunction_translation", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_CCONJ", "\n", "", "if", "language_utils", ".", "is_s_conjunction_translation", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_SCONJ", "\n", "\n", "\n", "", "if", "language_utils", ".", "is_determiner_translation", "(", "first_gloss", ",", "normalized_glosses", ")", ":", "\n", "        ", "return", "CONLL_DET", "\n", "", "if", "language_utils", ".", "is_pronoun_translation", "(", "first_fon", ",", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_PRON", "\n", "", "if", "language_utils", ".", "is_code_switching", "(", "normalized_token", ",", "normalized_glosses", ")", ":", "\n", "        ", "CODE_SWITCHING", ".", "add", "(", "normalized_token", ")", "\n", "return", "CONLL_OTHER", "\n", "\n", "\n", "# there cannot be a verb without any morphemes", "\n", "# so a single-stem verb must be a SLIP", "\n", "", "if", "language_utils", ".", "is_verb_gloss", "(", "first_gloss", ")", "and", "len", "(", "normalized_glosses", ")", "==", "1", ":", "\n", "        ", "return", "CONLL_OTHER", "\n", "\n", "", "if", "len", "(", "normalized_glosses", ")", ">", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "1", ",", "len", "(", "normalized_glosses", ")", ")", ":", "\n", "            ", "gloss", "=", "normalized_glosses", "[", "i", "]", "\n", "if", "language_utils", ".", "is_slip", "(", "gloss", ")", ":", "\n", "                ", "return", "CONLL_OTHER", "\n", "", "if", "language_utils", ".", "is_verb_gloss", "(", "gloss", ")", ":", "\n", "                ", "return", "CONLL_VERB", "\n", "", "if", "language_utils", ".", "is_adjective_gloss", "(", "gloss", ")", ":", "\n", "                ", "return", "CONLL_ADJ", "\n", "", "if", "language_utils", ".", "is_adverb_gloss", "(", "gloss", ")", ":", "\n", "                ", "return", "CONLL_ADV", "\n", "", "if", "language_utils", ".", "is_noun_gloss", "(", "gloss", ")", ":", "\n", "                ", "return", "CONLL_NOUN", "\n", "", "", "", "if", "language_utils", ".", "is_adjective_translation", "(", "possible_pos_set", ",", "normalized_glosses", ")", ":", "\n", "        ", "return", "CONLL_ADJ", "\n", "\n", "", "if", "language_utils", ".", "is_adverb_translation", "(", "first_gloss", ",", "possible_pos_set", ")", ":", "\n", "        ", "return", "CONLL_ADV", "\n", "", "if", "language_utils", ".", "is_numeric_translation", "(", "first_gloss", ")", ":", "\n", "        ", "return", "CONLL_NUM", "\n", "\n", "", "return", "CONLL_NOUN", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.encodePOS": [[550, 554], ["Exception"], "function", ["None"], ["", "def", "encodePOS", "(", "inner_POS", ")", ":", "\n", "    ", "if", "inner_POS", "in", "POS_CONVERSION", ":", "\n", "        ", "return", "POS_CONVERSION", "[", "inner_POS", "]", "\n", "", "raise", "Exception", "(", "\"no such pos:\"", "+", "inner_POS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.has_cyrillic": [[555, 560], ["language_utils.is_cyrillic"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.language_utils.is_cyrillic"], ["", "def", "has_cyrillic", "(", "morph_data", ")", ":", "\n", "    ", "for", "morph_data_token", "in", "morph_data", ":", "\n", "        ", "if", "language_utils", ".", "is_cyrillic", "(", "morph_data_token", "[", "'token'", "]", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_gloss": [[563, 565], ["[].split", "gloss.strip().split", "gloss.strip"], "function", ["None"], ["", "def", "normalize_gloss", "(", "gloss", ")", ":", "\n", "    ", "return", "gloss", ".", "strip", "(", "'-'", ")", ".", "split", "(", "'{'", ")", "[", "0", "]", ".", "split", "(", "'['", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.normalize_features": [[566, 574], ["sorted", "feature_string.strip"], "function", ["None"], ["", "def", "normalize_features", "(", "features", ")", ":", "\n", "    ", "features_sorted", "=", "sorted", "(", "features", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "+", "'#'", "+", "x", "[", "1", "]", ")", "\n", "feature_string", "=", "\"\"", "\n", "for", "feature", "in", "features_sorted", ":", "\n", "        ", "if", "feature", "[", "0", "]", "==", "\"-\"", ":", "\n", "            ", "continue", "\n", "", "feature_string", "+=", "\"|\"", "+", "feature", "[", "0", "]", "+", "\"=\"", "+", "feature", "[", "1", "]", "\n", "", "return", "feature_string", ".", "strip", "(", "\"|\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_feature_table": [[576, 595], ["dict", "os.path.exists", "Exception", "open", "print", "line.strip().split", "line_parts[].strip().split", "line_parts[].strip", "feature_part.split", "line.strip", "line_parts[].strip", "line_parts[].strip", "len", "feature_list.append", "feature_list.append"], "function", ["None"], ["", "def", "read_feature_table", "(", "filename", ")", ":", "\n", "    ", "feature_table", "=", "dict", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\"File %s cannot be found\"", "%", "filename", ")", "\n", "", "with", "open", "(", "filename", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "print", "(", "line", ")", "\n", "line_parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "feature_key", "=", "line_parts", "[", "0", "]", ".", "strip", "(", ")", "+", "\"#\"", "+", "line_parts", "[", "1", "]", ".", "strip", "(", ")", "\n", "feature_parts", "=", "line_parts", "[", "2", "]", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ")", "\n", "feature_list", "=", "[", "]", "\n", "for", "feature_part", "in", "feature_parts", ":", "\n", "                ", "feature_part_split", "=", "feature_part", ".", "split", "(", "\"=\"", ")", "\n", "if", "len", "(", "feature_part_split", ")", "<", "2", ":", "\n", "                    ", "feature_list", ".", "append", "(", "(", "\"-\"", ",", "\"-\"", ")", ")", "\n", "", "else", ":", "\n", "                    ", "feature_list", ".", "append", "(", "(", "feature_part_split", "[", "0", "]", ",", "feature_part_split", "[", "1", "]", ")", ")", "\n", "feature_table", "[", "feature_key", "]", "=", "feature_list", "\n", "", "", "", "", "return", "feature_table", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_file_sentence_ids": [[596, 613], ["dict", "open", "line.strip().split", "file_sentence[].strip", "int", "line.startswith", "line.startswith", "line.startswith", "len", "file_sentence_dict[].append", "line.strip"], "function", ["None"], ["", "def", "read_file_sentence_ids", "(", "filename", ")", ":", "\n", "    ", "file_sentence_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "if", "(", "line", ".", "startswith", "(", "\"#19\"", ")", "or", "line", ".", "startswith", "(", "\"#20\"", ")", "or", "line", ".", "startswith", "(", "\"#Arch\"", ")", ")", "or", "\".exb\"", "in", "line", ":", "\n", "                ", "file_sentence", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "\n", "if", "len", "(", "file_sentence", ")", "<", "2", ":", "\n", "                    ", "continue", "\n", "", "if", "file_sentence", "[", "1", "]", "==", "''", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "file_sentence", "[", "0", "]", ".", "strip", "(", "\"#\"", ")", "\n", "sentence_num", "=", "int", "(", "file_sentence", "[", "1", "]", ")", "\n", "if", "filename", "in", "file_sentence_dict", ":", "\n", "                    ", "file_sentence_dict", "[", "filename", "]", ".", "append", "(", "sentence_num", ")", "\n", "", "else", ":", "\n", "                    ", "file_sentence_dict", "[", "filename", "]", "=", "[", "sentence_num", "]", "\n", "", "", "", "", "return", "file_sentence_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.main": [[616, 638], ["evenki_lals_converter.read_file_sentence_ids", "evenki_lals_converter.convert_folder_morpheme", "print", "print", "print", "sorted", "print", "list", "print", "sorted", "sorted", "GLOSSES.keys", "list", "list", "sorted", "list"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.read_file_sentence_ids", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.evenki_lals_converter.convert_folder_morpheme"], ["", "def", "main", "(", ")", ":", "\n", "    ", "file_sentence_dict", "=", "read_file_sentence_ids", "(", "\"D:\\Projects\\morphology_scripts\\data\\\\train.txt\"", ")", "\n", "\n", "bad_files", ",", "num_tokens", ",", "num_sentences", "=", "convert_folder_morpheme", "(", "\n", "\"D:/ForElan/ForSIL_CORPUS/evenki_texts_corpus_05112018\"", ",", "\n", "\"D:/Projects/morphology_scripts/data/train_morph2.txt\"", ",", "\n", "\"D:/Projects/morphology_scripts/data/test_morph2.txt\"", ",", "\n", "[", "]", ",", "\n", "file_sentence_dict", "\n", ")", "\n", "\n", "for", "filename", ",", "e", "in", "bad_files", ":", "\n", "        ", "print", "(", "\"%s:%s\"", "%", "(", "filename", ",", "e", ")", ")", "\n", "\n", "", "print", "(", "\"Total tokens: %s. Total sentences: %s\"", "%", "(", "num_tokens", ",", "num_sentences", ")", ")", "\n", "\n", "print", "(", "'\\r\\n'", ".", "join", "(", "sorted", "(", "list", "(", "FON_SET", ")", ")", ")", ")", "\n", "print", "(", "'\\r\\n'", ".", "join", "(", "sorted", "(", "list", "(", "CODE_SWITCHING", ")", ")", ")", ")", "\n", "sorted_glosses", "=", "sorted", "(", "list", "(", "GLOSSES", ".", "keys", "(", ")", ")", ")", "\n", "for", "gloss", "in", "sorted_glosses", ":", "\n", "        ", "filename_set", "=", "GLOSSES", "[", "gloss", "]", "\n", "print", "(", "gloss", ",", "'\\t'", ",", "';'", ".", "join", "(", "sorted", "(", "list", "(", "filename_set", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_text_data": [[24, 46], ["eaf_utils.get_root", "eaf_utils.get_sentences", "dict", "eaf_utils.get_annotation_value_from_element", "eaf_utils.get_translation_by_sentence", "eaf_utils.get_tokens_by_sentence", "text_data.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_root", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_sentences", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_translation_by_sentence", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_tokens_by_sentence"], ["def", "get_text_data", "(", "filename", ",", "language_code", ")", ":", "\n", "    ", "\"\"\"\n\n    :param filename: EAF filename\n    :param language_code: the code with corresponds with the main tier in the XML document\n    :return: a dictionary containing sentences, their translations and the interlinearization data\n    \"\"\"", "\n", "root", "=", "get_root", "(", "filename", ")", "\n", "tier_nums_sentences", "=", "get_sentences", "(", "root", ",", "language_code", ")", "\n", "text_data", "=", "[", "]", "\n", "for", "tier_num", ",", "sentences", "in", "tier_nums_sentences", ":", "\n", "        ", "for", "sentence", "in", "sentences", ":", "\n", "            ", "text_data_sentence", "=", "dict", "(", ")", "\n", "text_data_sentence", "[", "'sentence'", "]", "=", "get_annotation_value_from_element", "(", "sentence", ")", "\n", "translation", "=", "get_translation_by_sentence", "(", "root", ",", "sentence", ",", "tier_num", ")", "\n", "if", "translation", "is", "None", ":", "\n", "                ", "continue", "\n", "", "text_data_sentence", "[", "'translation'", "]", "=", "translation", "\n", "text_data_sentence", "[", "'morphology'", "]", "=", "get_tokens_by_sentence", "(", "root", ",", "sentence", ",", "tier_num", ",", "\n", "translation", ",", "filename", ")", "\n", "text_data", ".", "append", "(", "text_data_sentence", ")", "\n", "", "", "return", "text_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_sentences": [[48, 58], ["root.findall", "root.findall", "root.findall"], "function", ["None"], ["", "def", "get_sentences", "(", "root", ",", "language_code", ")", ":", "\n", "    ", "language_xpath_with_code", "=", "LANGUAGE_XPATH", "%", "language_code", "\n", "sentences", "=", "root", ".", "findall", "(", "language_xpath_with_code", ")", "\n", "if", "sentences", ":", "\n", "        ", "return", "[", "(", "''", ",", "sentences", ")", "]", "\n", "# extra logic for dialogues", "\n", "", "language_xpath_with_code1", "=", "LANGUAGE_XPATH", "%", "(", "language_code", "+", "'1'", ")", "\n", "language_xpath_with_code2", "=", "LANGUAGE_XPATH", "%", "(", "language_code", "+", "'2'", ")", "\n", "return", "[", "(", "'1'", ",", "root", ".", "findall", "(", "language_xpath_with_code1", ")", ")", ",", "\n", "(", "'2'", ",", "root", ".", "findall", "(", "language_xpath_with_code2", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_tokens_by_sentence": [[60, 73], ["eaf_utils.get_element_id", "eaf_utils.get_fon_words_by_id", "dict", "eaf_utils.get_annotation_value_from_element", "eaf_utils.get_analysis", "eaf_utils.determinePOS", "morph_data.append"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_fon_words_by_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_analysis", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.determinePOS"], ["", "def", "get_tokens_by_sentence", "(", "root", ",", "sentence", ",", "tier_num", ",", "translation", ",", "filename", ")", ":", "\n", "    ", "sentence_id", "=", "get_element_id", "(", "sentence", ")", "\n", "fon_words", "=", "get_fon_words_by_id", "(", "root", ",", "sentence_id", ",", "tier_num", ")", "\n", "morph_data", "=", "[", "]", "\n", "for", "fon_word", "in", "fon_words", ":", "\n", "        ", "morph_data_word", "=", "dict", "(", ")", "\n", "token", "=", "get_annotation_value_from_element", "(", "fon_word", ",", "translation", ")", "\n", "morph_data_word", "[", "'token'", "]", "=", "token", "\n", "morph_data_word", "[", "'analysis'", "]", "=", "get_analysis", "(", "root", ",", "fon_word", ",", "tier_num", ",", "token", ",", "translation", ")", "\n", "morph_data_word", "[", "'pos'", "]", "=", "determinePOS", "(", "root", ",", "fon_word", ",", "tier_num", ",", "\n", "morph_data_word", "[", "'analysis'", "]", ",", "filename", ")", "\n", "morph_data", ".", "append", "(", "morph_data_word", ")", "\n", "", "return", "morph_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_translation_by_sentence": [[75, 80], ["eaf_utils.get_element_id", "eaf_utils.get_annotation_value_from_element", "root.find"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element"], ["", "def", "get_translation_by_sentence", "(", "root", ",", "sentence", ",", "tier_num", ")", ":", "\n", "    ", "sentence_id", "=", "get_element_id", "(", "sentence", ")", "\n", "return", "get_annotation_value_from_element", "(", "root", ".", "find", "(", "RUS_XPATH", "%", "tier_num", "+", "\"[@\"", "+", "\n", "ANNOTATION_REF_ATTRIBUTE", "+", "\n", "\"='\"", "+", "sentence_id", "+", "\"']\"", ")", ",", "is_ignore", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_analysis": [[82, 110], ["eaf_utils.get_element_id", "eaf_utils.get_fons_by_id", "len", "Exception", "eaf_utils.get_element_id", "eaf_utils.get_gloss_by_id", "eaf_utils.get_annotation_value_from_element", "eaf_utils.get_annotation_value_from_element", "analysis.append", "Exception", "Exception", "Exception"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_fons_by_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_gloss_by_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element"], ["", "def", "get_analysis", "(", "root", ",", "fon_word", ",", "tier_num", ",", "fon_token", ",", "translation", ")", ":", "\n", "    ", "fon_word_id", "=", "get_element_id", "(", "fon_word", ")", "\n", "fons", "=", "get_fons_by_id", "(", "root", ",", "fon_word_id", ",", "tier_num", ")", "\n", "analysis", "=", "[", "]", "\n", "if", "len", "(", "fons", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'No fon elements for fonWord with id %s (%s), sentence: %s'", "%", "(", "fon_word_id", ",", "fon_token", ",", "translation", ")", ")", "\n", "\n", "", "for", "fon", "in", "fons", ":", "\n", "        ", "fon_id", "=", "get_element_id", "(", "fon", ")", "\n", "gloss", "=", "get_gloss_by_id", "(", "root", ",", "fon_id", ",", "tier_num", ")", "\n", "\n", "fon_value", "=", "get_annotation_value_from_element", "(", "fon", ",", "translation", ")", "\n", "if", "fon_value", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'No fon element for fonWord %s with id: %s, sentence: %s'", "%", "(", "fon_word_id", ",", "fon_token", ",", "translation", ")", ")", "\n", "\n", "", "if", "gloss", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'No gloss element for fonWord %s with id: %s, sentence: %s'", "%", "(", "fon_word_id", ",", "fon_token", ",", "translation", ")", ")", "\n", "\n", "", "glossValue", "=", "get_annotation_value_from_element", "(", "gloss", ",", "translation", ")", "\n", "if", "glossValue", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'No gloss element for fonWord %s with id: %s, sentence: %s'", "%", "(", "fon_word_id", ",", "fon_token", ",", "translation", ")", ")", "\n", "\n", "", "analysis", ".", "append", "(", "{", "'fon'", ":", "fon_value", ",", "'gloss'", ":", "glossValue", "}", ")", "\n", "", "return", "analysis", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.determinePOS": [[112, 118], ["eaf_utils.get_element_id", "eaf_utils.get_pos_by_id", "eaf_utils.get_annotation_value_from_element"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_pos_by_id", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element"], ["", "def", "determinePOS", "(", "root", ",", "fon_word", ",", "tier_num", ",", "analysis", ",", "filename", ")", ":", "\n", "    ", "fon_word_id", "=", "get_element_id", "(", "fon_word", ")", "\n", "pos_element", "=", "get_pos_by_id", "(", "root", ",", "fon_word_id", ",", "tier_num", ")", "\n", "if", "pos_element", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "get_annotation_value_from_element", "(", "pos_element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_root": [[120, 123], ["xml.parse", "ET.parse.getroot"], "function", ["None"], ["", "def", "get_root", "(", "filename", ")", ":", "\n", "    ", "tree", "=", "ET", ".", "parse", "(", "filename", ")", "\n", "return", "tree", ".", "getroot", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_annotation_value_from_element": [[125, 135], ["Exception", "element.find", "element_text.strip"], "function", ["None"], ["", "def", "get_annotation_value_from_element", "(", "element", ",", "translation", "=", "None", ",", "is_ignore", "=", "False", ")", ":", "\n", "    ", "element_text", "=", "element", ".", "find", "(", "'.'", "+", "ANNOTATION_VALUE_XPATH", ")", ".", "text", "\n", "if", "element_text", ":", "\n", "        ", "return", "element_text", ".", "strip", "(", ")", "\n", "", "if", "is_ignore", ":", "\n", "        ", "return", "None", "\n", "", "error_text", "=", "'Empty element found: %s'", "%", "element", ".", "attrib", "\n", "if", "translation", "is", "not", "None", ":", "\n", "        ", "error_text", "+=", "' for sentence %s'", "%", "translation", "\n", "", "raise", "Exception", "(", "error_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_element_id": [[137, 139], ["None"], "function", ["None"], ["", "def", "get_element_id", "(", "element", ")", ":", "\n", "    ", "return", "element", ".", "attrib", "[", "ANNOTATION_ID_ATTRIBUTE", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_fon_words_by_id": [[141, 145], ["root.findall"], "function", ["None"], ["", "def", "get_fon_words_by_id", "(", "root", ",", "annotation_id", ",", "tier_num", ")", ":", "\n", "    ", "return", "root", ".", "findall", "(", "FONWORD_XPATH", "%", "tier_num", "+", "\"[@\"", "+", "\n", "ANNOTATION_REF_ATTRIBUTE", "+", "\n", "\"='\"", "+", "annotation_id", "+", "\"']\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_fons_by_id": [[147, 151], ["root.findall"], "function", ["None"], ["", "def", "get_fons_by_id", "(", "root", ",", "annotation_id", ",", "tier_num", ")", ":", "\n", "    ", "return", "root", ".", "findall", "(", "FON_XPATH", "%", "tier_num", "+", "\"[@\"", "+", "\n", "ANNOTATION_REF_ATTRIBUTE", "+", "\n", "\"='\"", "+", "annotation_id", "+", "\"']\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_pos_by_id": [[153, 157], ["root.find"], "function", ["None"], ["", "def", "get_pos_by_id", "(", "root", ",", "annotation_id", ",", "tier_num", ")", ":", "\n", "    ", "return", "root", ".", "find", "(", "POS_XPATH", "%", "tier_num", "+", "\"[@\"", "+", "\n", "ANNOTATION_REF_ATTRIBUTE", "+", "\n", "\"='\"", "+", "annotation_id", "+", "\"']\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.get_gloss_by_id": [[159, 163], ["root.find"], "function", ["None"], ["", "def", "get_gloss_by_id", "(", "root", ",", "annotation_id", ",", "tier_num", ")", ":", "\n", "    ", "return", "root", ".", "find", "(", "GLOSS_XPATH", "%", "tier_num", "+", "\"[@\"", "+", "\n", "ANNOTATION_REF_ATTRIBUTE", "+", "\n", "\"='\"", "+", "annotation_id", "+", "\"']\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.converters.eaf_utils.is_eaf": [[165, 167], ["filename.endswith"], "function", ["None"], ["", "def", "is_eaf", "(", "filename", ")", ":", "\n", "    ", "return", "filename", ".", "endswith", "(", "EAF_EXTENSION", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.stats_processor.check_conll_file": [[8, 36], ["dict", "set", "open", "enumerate", "line.strip.strip", "line.strip.strip().split", "line.strip.startswith", "len", "bad_line_nums.append", "print", "set.add", "set.add", "line.strip.strip"], "function", ["None"], ["def", "check_conll_file", "(", "filename", ")", ":", "\n", "    ", "bad_line_nums", "=", "[", "]", "\n", "lemmas_freq", "=", "dict", "(", ")", "\n", "unique_letters", "=", "set", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "fin", ":", "\n", "        ", "for", "index", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\"#\"", ")", "or", "line", "==", "''", ":", "\n", "                ", "continue", "\n", "", "line_parts", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "line_parts", ")", "<", "3", ":", "\n", "                ", "bad_line_nums", ".", "append", "(", "index", "+", "1", ")", "\n", "continue", "\n", "\n", "", "word_form", "=", "line_parts", "[", "1", "]", "\n", "word_lemma", "=", "line_parts", "[", "2", "]", "\n", "if", "word_lemma", "==", "'_'", ":", "\n", "                ", "print", "(", "line", ")", "\n", "\n", "", "for", "word_char", "in", "word_form", ":", "\n", "                ", "unique_letters", ".", "add", "(", "word_char", ")", "\n", "", "for", "word_char", "in", "word_lemma", ":", "\n", "                ", "unique_letters", ".", "add", "(", "word_char", ")", "\n", "", "if", "word_lemma", "in", "lemmas_freq", ":", "\n", "                ", "lemmas_freq", "[", "word_lemma", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "lemmas_freq", "[", "word_lemma", "]", "=", "1", "\n", "", "", "", "return", "lemmas_freq", ",", "unique_letters", ",", "bad_line_nums", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.stats_processor.count_corpus_stats": [[39, 55], ["stats_processor.check_conll_file", "sorted", "sorted", "print", "lemmas_freq.items", "list", "open", "fout.write", "fout.write", "fout.write", "operator.itemgetter", "fout.write", "fout.write", "fout.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.stats_processor.check_conll_file"], ["", "def", "count_corpus_stats", "(", "filename", ")", ":", "\n", "    ", "filename_result", "=", "filename", "+", "'_analysis.txt'", "\n", "lemmas_freq", ",", "unique_letters", ",", "bad_line_nums", "=", "check_conll_file", "(", "filename", ")", "\n", "lemmas_freq_sorted", "=", "sorted", "(", "lemmas_freq", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", "\n", "unique_letters_sorted", "=", "sorted", "(", "list", "(", "unique_letters", ")", ")", "\n", "with", "open", "(", "filename_result", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "\"==============Unique letters:===============\\n\"", ")", "\n", "for", "unique_letter", "in", "unique_letters_sorted", ":", "\n", "            ", "fout", ".", "write", "(", "unique_letter", "+", "'\\n'", ")", "\n", "", "fout", ".", "write", "(", "\"==============Lemma frequency:===============\\n\"", ")", "\n", "for", "lemma", ",", "count", "in", "lemmas_freq_sorted", ":", "\n", "            ", "fout", ".", "write", "(", "lemma", "+", "':'", "+", "str", "(", "count", ")", "+", "'\\n'", ")", "\n", "", "fout", ".", "write", "(", "\"===============Bad line numbers:==============\\n\"", ")", "\n", "for", "bad_line_num", "in", "bad_line_nums", ":", "\n", "            ", "fout", ".", "write", "(", "str", "(", "bad_line_num", ")", "+", "'\\n'", ")", "\n", "", "", "print", "(", "'wrote analysis results to %s'", "%", "filename_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.stats_processor.main": [[57, 62], ["stats_processor.count_corpus_stats", "len", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.stats_processor.count_corpus_stats"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "<", "2", ":", "\n", "        ", "print", "(", "\"usage: stats_processor.py filename\"", ")", "\n", "return", "\n", "", "count_corpus_stats", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.input_files": [[11, 21], ["files[].update", "os.path.splitext", "open", "file.read", "os.path.basename"], "function", ["None"], ["def", "input_files", "(", "path_dict", ")", ":", "# opens and reads input files", "\n", "    ", "files", "=", "{", "'standard'", ":", "{", "}", ",", "\n", "'test'", ":", "{", "}", "}", "\n", "for", "key", "in", "path_dict", ":", "\n", "        ", "f_path", "=", "path_dict", "[", "key", "]", "\n", "f_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "f_path", ")", ")", "[", "0", "]", "\n", "with", "open", "(", "f_path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "# os.path -- make the path universal", "\n", "            ", "f_text", "=", "file", ".", "read", "(", ")", "\n", "", "files", "[", "key", "]", ".", "update", "(", "{", "'path'", ":", "f_path", ",", "'name'", ":", "f_name", ",", "'text'", ":", "f_text", "}", ")", "\n", "", "return", "files", "# returns a dictionary of files and corresponding paths, names, and texts", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.initialize_evaluation": [[23, 30], ["None"], "function", ["None"], ["", "def", "initialize_evaluation", "(", ")", ":", "# creates evaluation with zero values", "\n", "    ", "evaluation", "=", "{", "'Hits'", ":", "0", ",", "\n", "'Deletions'", ":", "0", ",", "\n", "'Insertions'", ":", "0", ",", "\n", "'CorrectMorphemes'", ":", "0", ",", "\n", "'CorrectTags'", ":", "0", "}", "\n", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.list_boundaries_and_tags": [[32, 47], ["set", "el.split", "morphemes.append", "len", "line_data[].add", "len", "str"], "function", ["None"], ["", "def", "list_boundaries_and_tags", "(", "line_list", ")", ":", "# separates tags from morphemes in a given segmentation list", "\n", "    ", "morphemes", "=", "[", "]", "\n", "line_data", "=", "{", "'boundaries'", ":", "set", "(", ")", ",", "\n", "'tag_dict'", ":", "{", "}", "}", "\n", "for", "el", "in", "line_list", ":", "\n", "        ", "segment", "=", "el", ".", "split", "(", "'_'", ")", "\n", "morphemes", ".", "append", "(", "segment", "[", "0", "]", ")", "\n", "cursor", "=", "len", "(", "''", ".", "join", "(", "morphemes", ")", ")", "\n", "line_data", "[", "'boundaries'", "]", ".", "add", "(", "cursor", ")", "\n", "if", "len", "(", "segment", ")", "==", "2", ":", "\n", "            ", "tag", "=", "segment", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "tag", "=", "''", "\n", "", "line_data", "[", "'tag_dict'", "]", "[", "segment", "[", "0", "]", "+", "'_'", "+", "str", "(", "cursor", ")", "]", "=", "tag", "\n", "", "return", "line_data", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.compare_boundaries": [[49, 55], ["len", "len", "len", "s_bound.intersection", "s_bound.difference", "f_bound.difference"], "function", ["None"], ["", "def", "compare_boundaries", "(", "f_bound", ",", "s_bound", ")", ":", "# compares two given sets of boundaries", "\n", "    ", "loc_eval", "=", "{", "'Hits'", ":", "0", ",", "'Deletions'", ":", "0", ",", "'Insertions'", ":", "0", "}", "\n", "loc_eval", "[", "'Hits'", "]", "=", "len", "(", "s_bound", ".", "intersection", "(", "f_bound", ")", ")", "\n", "loc_eval", "[", "'Deletions'", "]", "=", "len", "(", "s_bound", ".", "difference", "(", "f_bound", ")", ")", "\n", "loc_eval", "[", "'Insertions'", "]", "=", "len", "(", "f_bound", ".", "difference", "(", "s_bound", ")", ")", "\n", "return", "loc_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.check_morphs_and_tags": [[57, 74], ["None"], "function", ["None"], ["", "def", "check_morphs_and_tags", "(", "f_tag_dict", ",", "s_tag_dict", ")", ":", "# compares morphemes and tags given two dicts", "\n", "    ", "global", "totally_correct_wordforms", "\n", "global", "all_wordforms", "\n", "\n", "all_wordforms", "+=", "1", "\n", "loc_eval", "=", "{", "'CorrectMorphemes'", ":", "0", ",", "'CorrectTags'", ":", "0", "}", "\n", "is_all_correct", "=", "True", "\n", "for", "key", "in", "s_tag_dict", ":", "# there must be a morpheme tag", "\n", "        ", "if", "key", "in", "f_tag_dict", ":", "# there is a morpheme tag", "\n", "            ", "loc_eval", "[", "'CorrectMorphemes'", "]", "+=", "1", "# that must be a correctly split morpheme", "\n", "if", "s_tag_dict", "[", "key", "]", "==", "f_tag_dict", "[", "key", "]", ":", "# tags are equal", "\n", "                ", "loc_eval", "[", "'CorrectTags'", "]", "+=", "1", "# tag is correct", "\n", "", "", "else", ":", "\n", "            ", "is_all_correct", "=", "False", "\n", "", "", "if", "is_all_correct", ":", "\n", "        ", "totally_correct_wordforms", "+=", "1", "\n", "", "return", "loc_eval", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.compare": [[76, 89], ["evaluation_morph.list_boundaries_and_tags", "evaluation_morph.list_boundaries_and_tags", "evaluation_morph.compare_boundaries", "evaluation_morph.check_morphs_and_tags", "check_morphs_and_tags.update"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.list_boundaries_and_tags", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.list_boundaries_and_tags", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.compare_boundaries", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.check_morphs_and_tags"], ["", "def", "compare", "(", "f_line_list", ",", "s_line_list", ",", "evaluation", ")", ":", "# compares to lines", "\n", "    ", "f_data", "=", "list_boundaries_and_tags", "(", "f_line_list", ")", "\n", "f_bound", "=", "f_data", "[", "'boundaries'", "]", "\n", "f_tags", "=", "f_data", "[", "'tag_dict'", "]", "\n", "s_data", "=", "list_boundaries_and_tags", "(", "s_line_list", ")", "\n", "s_bound", "=", "s_data", "[", "'boundaries'", "]", "\n", "s_tags", "=", "s_data", "[", "'tag_dict'", "]", "\n", "b_eval", "=", "compare_boundaries", "(", "f_bound", ",", "s_bound", ")", "\n", "loc_eval", "=", "check_morphs_and_tags", "(", "f_tags", ",", "s_tags", ")", "\n", "loc_eval", ".", "update", "(", "b_eval", ")", "\n", "for", "key", "in", "evaluation", ":", "\n", "        ", "evaluation", "[", "key", "]", "+=", "loc_eval", "[", "key", "]", "\n", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.evaluate": [[90, 121], ["open.strip", "open.split", "standard.strip.strip", "standard.strip.split", "len", "len", "open", "range", "open.close", "open", "open.write", "s_lines[].strip", "f_lines[].strip", "open.write", "open.write", "s_lines[].strip.split", "f_lines[].strip.split", "open.write", "ev_dict.update", "evaluation_morph.compare", "f_list[].split", "s_list[].split"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.compare"], ["", "def", "evaluate", "(", "file", ",", "standard", ",", "ev_dict", ")", ":", "# evaluates two given texts", "\n", "    ", "file", "=", "file", ".", "strip", "(", ")", "\n", "f_lines", "=", "file", ".", "split", "(", "'\\n'", ")", "\n", "standard", "=", "standard", ".", "strip", "(", ")", "\n", "s_lines", "=", "standard", ".", "split", "(", "'\\n'", ")", "\n", "s_length", "=", "len", "(", "s_lines", ")", "\n", "if", "len", "(", "f_lines", ")", "!=", "s_length", ":", "# check that the files have the same number of lines", "\n", "        ", "with", "open", "(", "'log.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "'Error: wrong number of lines'", ")", "\n", "", "return", "ev_dict", "\n", "", "else", ":", "\n", "        ", "file", "=", "open", "(", "'log.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "i", "in", "range", "(", "s_length", ")", ":", "\n", "            ", "s_line", "=", "s_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "f_line", "=", "f_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "if", "not", "s_line", ":", "# check that either lines are both non-empty or both empty", "\n", "                ", "if", "not", "f_line", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "file", ".", "write", "(", "f'Error: bad line {i+1}\\n'", ")", "\n", "", "", "elif", "not", "f_line", ":", "\n", "                ", "file", ".", "write", "(", "f'Error: bad line {i+1}\\n'", ")", "\n", "", "else", ":", "\n", "                ", "s_list", "=", "s_line", ".", "split", "(", "'\\t'", ")", "# list with the word as 0 element and taged morphemes as 1 element", "\n", "f_list", "=", "f_line", ".", "split", "(", "'\\t'", ")", "\n", "if", "s_list", "[", "0", "]", "!=", "f_list", "[", "0", "]", ":", "\n", "                    ", "file", ".", "write", "(", "f'Error: bad line {i+1}\\n'", ")", "\n", "", "else", ":", "\n", "                    ", "ev_dict", ".", "update", "(", "compare", "(", "f_list", "[", "1", "]", ".", "split", "(", ")", ",", "s_list", "[", "1", "]", ".", "split", "(", ")", ",", "ev_dict", ")", ")", "# compare segmentation lists (without words)", "\n", "", "", "", "file", ".", "close", "(", ")", "\n", "return", "ev_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.write_results": [[122, 154], ["print", "print", "print", "print", "collections.OrderedDict", "collections.OrderedDict", "open", "file.write", "float", "str"], "function", ["None"], ["", "", "def", "write_results", "(", "evaluation", ")", ":", "\n", "    ", "H", "=", "evaluation", "[", "'Hits'", "]", "\n", "D", "=", "evaluation", "[", "'Deletions'", "]", "\n", "I", "=", "evaluation", "[", "'Insertions'", "]", "\n", "print", "(", "f'H = {H}'", ")", "\n", "print", "(", "f'D = {D}'", ")", "\n", "print", "(", "f'I = {I}'", ")", "\n", "print", "(", "f'CorrectTags = {evaluation[\"CorrectTags\"]}'", ")", "\n", "if", "H", "or", "(", "D", "and", "I", ")", ":", "\n", "        ", "Precision", "=", "H", "/", "(", "H", "+", "I", ")", "\n", "Recall", "=", "H", "/", "(", "H", "+", "D", ")", "\n", "results", "=", "OrderedDict", "(", "{", "'Precision'", ":", "Precision", ",", "\n", "'Recall'", ":", "Recall", ",", "\n", "'F-measure'", ":", "(", "2", "*", "Precision", "*", "Recall", ")", "/", "(", "Precision", "+", "Recall", ")", ",", "\n", "'CorrectMorphemes'", ":", "evaluation", "[", "'CorrectMorphemes'", "]", ",", "\n", "'CorrectTags'", ":", "evaluation", "[", "'CorrectTags'", "]", ",", "\n", "'AllWordforms'", ":", "all_wordforms", ",", "\n", "'TotallyCorrect'", ":", "totally_correct_wordforms", ",", "\n", "'ShareCorrect'", ":", "float", "(", "totally_correct_wordforms", ")", "/", "all_wordforms", "}", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "OrderedDict", "(", "{", "'Precision'", ":", "0", ",", "\n", "'Recall'", ":", "0", ",", "\n", "'F-measure'", ":", "0", ",", "\n", "'CorrectMorphemes'", ":", "0", ",", "\n", "'CorrectTags'", ":", "0", ",", "\n", "'AllWordforms'", ":", "all_wordforms", ",", "\n", "'TotallyCorrect'", ":", "totally_correct_wordforms", ",", "\n", "'ShareCorrect'", ":", "0", "}", ")", "\n", "\n", "", "with", "open", "(", "'results.txt'", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "key", "in", "results", ":", "\n", "            ", "file", ".", "write", "(", "key", "+", "' = '", "+", "str", "(", "results", "[", "key", "]", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.main": [[155, 164], ["evaluation_morph.initialize_evaluation", "evaluation_morph.input_files", "evaluation_morph.write_results", "evaluation_morph.evaluate", "input", "input"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.initialize_evaluation", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.input_files", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.write_results", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_morph.evaluate"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "paths", "=", "{", "'standard'", ":", "argv", "[", "1", "]", ",", "'test'", ":", "argv", "[", "2", "]", "}", "\n", "", "except", "IndexError", ":", "\n", "        ", "paths", "=", "{", "'standard'", ":", "input", "(", "'print standard file path: '", ")", ",", "\n", "'test'", ":", "input", "(", "'print test file path: '", ")", "}", "\n", "", "evaluation", "=", "initialize_evaluation", "(", ")", "\n", "files", "=", "input_files", "(", "paths", ")", "\n", "write_results", "(", "evaluate", "(", "files", "[", "'test'", "]", "[", "'text'", "]", ",", "files", "[", "'standard'", "]", "[", "'text'", "]", ",", "evaluation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.corpora_validation.validate": [[13, 68], ["errors.append", "open", "open", "f.write", "line.split", "errors.append", "int", "len", "re.match", "corpora_validation.validate.new_error"], "function", ["None"], ["def", "validate", "(", "filename_in", ",", "filename_out", ")", ":", "\n", "\n", "    ", "is_new_sentence", "=", "True", "\n", "common_result", "=", "True", "\n", "line_number", "=", "0", "\n", "errors", "=", "[", "]", "\n", "\n", "def", "new_error", "(", "line_number", ",", "col_name", ",", "field_value", ",", "message", ")", ":", "\n", "        ", "global", "common_result", "\n", "common_result", "=", "False", "\n", "errors", ".", "append", "(", "'{}; invalid field: {}: {}: {}'", ".", "format", "(", "line_number", ",", "col_name", ",", "field_value", ",", "message", ")", ")", "\n", "\n", "", "with", "open", "(", "filename_in", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line_number", "+=", "1", "\n", "if", "line", "[", "0", "]", "==", "'#'", ":", "\n", "                ", "continue", "\n", "", "elif", "line", "==", "'\\n'", ":", "\n", "                ", "is_new_sentence", "=", "True", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "not", "len", "(", "fields", ")", "==", "10", ":", "\n", "                    ", "errors", ".", "append", "(", "str", "(", "line_number", ")", "+", "'; wrong number of fields'", ")", "\n", "common_result", "=", "False", "\n", "", "else", ":", "\n", "                    ", "if", "not", "match", "(", "r'((\\d+)|((\\d+)-\\d+)|((\\d+).\\d+))'", ",", "fields", "[", "ID", "]", ")", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'ID'", ",", "fields", "[", "ID", "]", ",", "'wrong format'", ")", "\n", "", "if", "(", "is_new_sentence", "==", "True", "and", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "!=", "1", ")", "or", "(", "is_new_sentence", "==", "False", "and", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "!=", "prev_id", "+", "1", "and", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "!=", "prev_id", ")", "or", "(", "len", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", ")", ">", "1", "and", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "<=", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ")", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'ID'", ",", "fields", "[", "ID", "]", ",", "'incorrect value'", ")", "\n", "", "if", "fields", "[", "FORM", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'FORM'", ",", "fields", "[", "FORM", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "LEMMA", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'LEMMA'", ",", "fields", "[", "LEMMA", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "UPOS", "]", "!=", "'_'", "and", "fields", "[", "UPOS", "]", "not", "in", "POS", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'UPOS'", ",", "fields", "[", "UPOS", "]", ",", "'wrong format'", ")", "\n", "", "if", "fields", "[", "XPOS", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'XPOS'", ",", "fields", "[", "XPOS", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "FEATS", "]", "!=", "'_'", "and", "not", "match", "(", "r'(([A-Z0-9][A-Z0-9a-z]*=[A-Z0-9][a-zA-Z0-9]*)(\\u007c([A-Z0-9][A-Z0-9a-z]*=[A-Z0-9][a-zA-Z0-9]*))*(#(([A-Z0-9][A-Z0-9a-z]*=[A-Z0-9][a-zA-Z0-9]*)(\\u007c([A-Z0-9][A-Z0-9a-z]*=[A-Z0-9][a-zA-Z0-9]*))*)))*'", ",", "fields", "[", "FEATS", "]", ")", ":", "\n", "#or (match(r'\\w+=\\w+\\u007c\\w+=\\w+#\\w+=\\w+\\u007c\\w+=\\w+', fields[FEATS]) and (fields[FEATS].split('#')[0].split('|')[0].split('=')[0] != fields[FEATS].split('#')[1].split('|')[0].split('=')[0] or fields[FEATS].split('#')[0].split('|')[1].split('=')[0] != fields[FEATS].split('#')[1].split('|')[1].split('=')[0]))):", "\n", "                        ", "new_error", "(", "line_number", ",", "'FEATS'", ",", "fields", "[", "FEATS", "]", ",", "'wrong format'", ")", "\n", "", "if", "fields", "[", "HEAD", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'HEAD'", ",", "fields", "[", "HEAD", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "DEPREL", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'DEPREL'", ",", "fields", "[", "DEPREL", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "DEPS", "]", "==", "''", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'DEPS'", ",", "fields", "[", "DEPS", "]", ",", "'empty'", ")", "\n", "", "if", "fields", "[", "MISC", "]", "in", "(", "''", ",", "'\\n'", ")", ":", "\n", "                        ", "new_error", "(", "line_number", ",", "'MISC'", ",", "fields", "[", "MISC", "]", ",", "'empty'", ")", "\n", "\n", "", "prev_id", "=", "int", "(", "fields", "[", "ID", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "\n", "is_new_sentence", "=", "False", "\n", "\n", "", "", "", "", "with", "open", "(", "filename_out", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n'", ".", "join", "(", "errors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.corpora_validation.main": [[70, 77], ["corpora_validation.validate", "len", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.corpora_validation.validate"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "<", "2", ":", "\n", "        ", "print", "(", "\"usage: corpora_validation.py filename\"", ")", "\n", "return", "\n", "", "filename", "=", "sys", ".", "argv", "[", "1", "]", "\n", "filename_out", "=", "filename", "+", "'_errors.txt'", "\n", "validate", "(", "filename", ",", "filename_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.evaluate_ud": [[12, 29], ["evaluation_ud.compare_files_ud", "print", "open", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write", "fout.write"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.compare_files_ud"], ["def", "evaluate_ud", "(", "filename_standard", ",", "filename_test", ",", "is_to_check_prev_num", "=", "False", ",", "\n", "is_to_use_original_sentences", "=", "False", ")", ":", "\n", "    ", "result", "=", "compare_files_ud", "(", "filename_standard", ",", "filename_test", ",", "is_to_check_prev_num", ",", "is_to_use_original_sentences", ")", "\n", "filename_result", "=", "filename_test", "+", "'_result_ud.txt'", "\n", "with", "open", "(", "filename_result", ",", "'w'", ",", "encoding", "=", "'utf'", ",", "newline", "=", "''", ")", "as", "fout", ":", "\n", "        ", "if", "'fatal'", "in", "result", ":", "\n", "            ", "fout", ".", "write", "(", "result", "[", "'fatal'", "]", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "fout", ".", "write", "(", "'Share of words with correct pos: %s\\n'", "%", "result", "[", "'words_correct_pos'", "]", ")", "\n", "fout", ".", "write", "(", "'Share of words with correct lemma: %s\\n'", "%", "result", "[", "'words_correct_lemma'", "]", ")", "\n", "fout", ".", "write", "(", "'Share of sentences with correct pos: %s\\n'", "%", "result", "[", "'sentences_correct_pos'", "]", ")", "\n", "fout", ".", "write", "(", "'Share of sentences with correct lemma: %s\\n'", "%", "result", "[", "'sentences_correct_lemma'", "]", ")", "\n", "fout", ".", "write", "(", "'Feature precision: %s\\n'", "%", "result", "[", "'precision'", "]", ")", "\n", "fout", ".", "write", "(", "'Feature recall: %s\\n'", "%", "result", "[", "'recall'", "]", ")", "\n", "fout", ".", "write", "(", "'Feature F2: %s\\n'", "%", "result", "[", "'f2'", "]", ")", "\n", "fout", ".", "write", "(", "'Errors: '", "+", "','", ".", "join", "(", "result", "[", "'errors'", "]", ")", "+", "'\\n'", ")", "\n", "", "", "print", "(", "'written results to %s'", "%", "filename_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.compare_files_ud": [[30, 220], ["evaluation_ud.read_lines", "evaluation_ud.read_lines", "dict", "len", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "len", "print", "len", "test_lines[].strip", "standard_lines[].strip", "standard_lines[].strip.startswith", "test_lines[].strip.startswith", "test_lines[].strip.split", "standard_lines[].strip.split", "float", "float", "len", "test_lines[].strip.strip", "[].split", "current_standard_line_number.split", "int", "int", "print", "len", "errors.append", "standard_lines[].strip.split", "evaluation_ud.is_lemma_equal", "evaluation_ud.is_pos_equal", "evaluation_ud.compare_features", "int", "int", "int", "evaluation_ud.is_lemma_equal", "evaluation_ud.is_pos_equal", "standard_lines[].strip.split"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.read_lines", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.read_lines", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_lemma_equal", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_pos_equal", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.compare_features", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_lemma_equal", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_pos_equal"], ["", "def", "compare_files_ud", "(", "filename_standard", ",", "filename_test", ",", "is_to_check_prev_num", ",", "is_to_use_original_sentences", ")", ":", "\n", "    ", "standard_lines", "=", "read_lines", "(", "filename_standard", ")", "\n", "test_lines", "=", "read_lines", "(", "filename_test", ")", "\n", "i", "=", "0", "\n", "j", "=", "0", "\n", "errors", "=", "[", "]", "\n", "num_words_correct_pos", "=", "0", "\n", "num_sentences_correct_pos", "=", "0", "\n", "num_words_correct_lemma", "=", "0", "\n", "num_sentences_correct_lemma", "=", "0", "\n", "is_sentence_pos_correct", "=", "False", "\n", "is_sentence_lemma_correct", "=", "False", "\n", "\n", "num_retr_relevant", "=", "0", "\n", "num_retr", "=", "0", "\n", "num_relevant", "=", "0", "\n", "\n", "total_words", "=", "0", "\n", "total_sentences", "=", "0", "\n", "\n", "result", "=", "dict", "(", ")", "\n", "\n", "from_num", "=", "-", "1", "\n", "to_num", "=", "-", "1", "\n", "prev_test_line_number", "=", "''", "\n", "\n", "alternative_lemma", "=", "None", "\n", "alternative_pos", "=", "None", "\n", "while", "i", "<", "len", "(", "standard_lines", ")", ":", "\n", "        ", "if", "j", ">=", "len", "(", "test_lines", ")", ":", "\n", "            ", "print", "(", "\"ERROR: test file not fully used\"", ")", "\n", "break", "\n", "", "while", "j", "<", "len", "(", "test_lines", ")", ":", "\n", "\n", "\n", "\n", "            ", "current_test_line", "=", "test_lines", "[", "j", "]", ".", "strip", "(", ")", "\n", "if", "i", ">=", "len", "(", "standard_lines", ")", ":", "\n", "                ", "break", "\n", "", "current_standard_line", "=", "standard_lines", "[", "i", "]", ".", "strip", "(", ")", "\n", "\n", "\n", "\n", "if", "current_standard_line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                ", "i", "+=", "1", "\n", "continue", "\n", "", "if", "current_test_line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                ", "j", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "current_test_line", ".", "strip", "(", ")", "==", "\"_\t_\t_\t_\"", ":", "\n", "                ", "current_test_line", "=", "''", "\n", "prev_test_line_number", "=", "''", "\n", "\n", "#new sentence border", "\n", "", "if", "current_test_line", "==", "''", "and", "current_standard_line", "==", "''", ":", "\n", "                ", "i", "+=", "1", "\n", "j", "+=", "1", "\n", "continue", "\n", "", "if", "current_test_line", "==", "''", ":", "\n", "                ", "j", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "current_standard_line", "==", "''", ":", "\n", "                ", "i", "+=", "1", "\n", "continue", "\n", "\n", "\n", "", "if", "'@'", "in", "current_standard_line", ":", "\n", "                ", "alternative_lemma_pos", "=", "current_standard_line", ".", "split", "(", "'@'", ")", "[", "-", "1", "]", ".", "split", "(", "'\\t'", ")", "\n", "current_standard_line", "=", "current_standard_line", ".", "split", "(", "'@'", ")", "[", "0", "]", "\n", "alternative_lemma", "=", "alternative_lemma_pos", "[", "0", "]", "\n", "alternative_pos", "=", "alternative_lemma_pos", "[", "1", "]", "\n", "\n", "", "current_test_line_parts", "=", "current_test_line", ".", "split", "(", "'\\t'", ")", "\n", "current_standard_line_parts", "=", "current_standard_line", ".", "split", "(", "'\\t'", ")", "\n", "\n", "\n", "current_test_line_number", "=", "current_test_line_parts", "[", "0", "]", "\n", "current_standard_line_number", "=", "current_standard_line_parts", "[", "0", "]", "\n", "\n", "if", "'-'", "in", "current_standard_line_number", "and", "'-'", "in", "current_test_line_number", ":", "\n", "                ", "j", "+=", "1", "\n", "i", "+=", "1", "\n", "continue", "\n", "#TODO!", "\n", "", "if", "'-'", "in", "current_standard_line_number", ":", "\n", "                ", "num_parts", "=", "current_standard_line_number", ".", "split", "(", "\"-\"", ")", "\n", "from_num", "=", "int", "(", "num_parts", "[", "0", "]", ")", "\n", "to_num", "=", "int", "(", "num_parts", "[", "1", "]", ")", "\n", "", "elif", "int", "(", "current_standard_line_number", ")", ">=", "from_num", "and", "int", "(", "current_standard_line_number", ")", "<=", "to_num", ":", "\n", "                ", "i", "+=", "1", "\n", "if", "int", "(", "current_standard_line_number", ")", "==", "to_num", ":", "\n", "                    ", "from_num", "=", "-", "1", "\n", "to_num", "=", "-", "1", "\n", "", "continue", "\n", "\n", "", "if", "is_to_check_prev_num", "and", "(", "current_test_line_number", "==", "prev_test_line_number", ")", ":", "\n", "                ", "j", "+=", "1", "\n", "continue", "\n", "\n", "\n", "", "if", "current_test_line_number", "==", "'1'", "and", "(", "(", "not", "is_to_check_prev_num", ")", "or", "(", "prev_test_line_number", "!=", "'1'", ")", ")", ":", "\n", "                ", "if", "is_sentence_lemma_correct", ":", "\n", "                    ", "num_sentences_correct_lemma", "+=", "1", "\n", "", "if", "is_sentence_pos_correct", ":", "\n", "                    ", "num_sentences_correct_pos", "+=", "1", "\n", "", "total_sentences", "+=", "1", "\n", "is_sentence_lemma_correct", "=", "True", "\n", "is_sentence_pos_correct", "=", "True", "\n", "alternative_lemma", "=", "None", "\n", "alternative_pos", "=", "None", "\n", "\n", "", "if", "is_to_use_original_sentences", "and", "current_standard_line_number", "==", "'1'", ":", "\n", "                ", "if", "is_sentence_lemma_correct", ":", "\n", "                    ", "num_sentences_correct_lemma", "+=", "1", "\n", "", "if", "is_sentence_pos_correct", ":", "\n", "                    ", "num_sentences_correct_pos", "+=", "1", "\n", "", "total_sentences", "+=", "1", "\n", "is_sentence_lemma_correct", "=", "True", "\n", "is_sentence_pos_correct", "=", "True", "\n", "alternative_lemma", "=", "None", "\n", "alternative_pos", "=", "None", "\n", "\n", "", "prev_test_line_number", "=", "current_test_line_number", "\n", "\n", "total_words", "+=", "1", "\n", "\n", "current_test_line_wordform", "=", "current_test_line_parts", "[", "1", "]", "\n", "current_standard_line_wordform", "=", "current_standard_line_parts", "[", "1", "]", "\n", "\n", "\n", "if", "(", "current_standard_line_wordform", "!=", "current_test_line_wordform", ")", ":", "\n", "                ", "print", "(", "current_standard_line_wordform", ",", "current_test_line_wordform", ")", "\n", "\n", "\n", "", "current_test_line_lemma", "=", "current_test_line_parts", "[", "2", "]", "\n", "current_standard_line_lemma", "=", "current_standard_line_parts", "[", "2", "]", "\n", "current_test_line_pos", "=", "current_test_line_parts", "[", "3", "]", "\n", "current_standard_line_pos", "=", "current_standard_line_parts", "[", "3", "]", "\n", "current_standard_line_features", "=", "current_standard_line_parts", "[", "5", "]", "\n", "\n", "if", "len", "(", "current_test_line_parts", ")", ">", "5", ":", "\n", "                ", "current_test_line_features", "=", "current_test_line_parts", "[", "5", "]", "\n", "", "else", ":", "\n", "                ", "current_test_line_features", "=", "[", "]", "\n", "\n", "\n", "", "if", "current_test_line_wordform", "!=", "current_standard_line_wordform", ":", "\n", "\n", "                ", "errors", ".", "append", "(", "'Error: bad line #%s: expected different wordform'", "%", "j", ")", "\n", "", "else", ":", "\n", "#comparing lemma", "\n", "                ", "if", "is_lemma_equal", "(", "current_standard_line_lemma", ",", "current_test_line_lemma", ")", "or", "(", "alternative_lemma", "is", "not", "None", "and", "\n", "is_lemma_equal", "(", "alternative_lemma", ",", "current_test_line_lemma", ")", ")", ":", "\n", "                    ", "num_words_correct_lemma", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "is_sentence_lemma_correct", "=", "False", "\n", "#comparing pos", "\n", "", "if", "is_pos_equal", "(", "current_standard_line_pos", ",", "current_test_line_pos", ")", "or", "(", "alternative_pos", "is", "not", "None", "and", "is_pos_equal", "(", "alternative_pos", ",", "current_test_line_pos", ")", ")", ":", "\n", "                    ", "num_words_correct_pos", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "is_sentence_pos_correct", "=", "False", "\n", "#comparing features", "\n", "", "if", "current_test_line_features", ":", "\n", "                    ", "current_num_retr_relevant", ",", "current_num_retr", ",", "current_num_relevant", "=", "compare_features", "(", "current_test_line_features", ",", "current_standard_line_features", ")", "\n", "num_retr_relevant", "+=", "current_num_retr_relevant", "\n", "num_retr", "+=", "current_num_retr", "\n", "num_relevant", "+=", "current_num_relevant", "\n", "", "", "i", "+=", "1", "\n", "j", "+=", "1", "\n", "", "", "result", "[", "'errors'", "]", "=", "errors", "\n", "result", "[", "'words_correct_pos'", "]", "=", "float", "(", "num_words_correct_pos", ")", "/", "float", "(", "total_words", ")", "\n", "result", "[", "'sentences_correct_pos'", "]", "=", "float", "(", "num_sentences_correct_pos", ")", "/", "float", "(", "total_sentences", ")", "\n", "result", "[", "'words_correct_lemma'", "]", "=", "float", "(", "num_words_correct_lemma", ")", "/", "float", "(", "total_words", ")", "\n", "result", "[", "'sentences_correct_lemma'", "]", "=", "float", "(", "num_sentences_correct_lemma", ")", "/", "float", "(", "total_sentences", ")", "\n", "if", "num_retr", "==", "0", ":", "\n", "        ", "precision", "=", "0", "\n", "", "else", ":", "\n", "        ", "precision", "=", "float", "(", "num_retr_relevant", ")", "/", "float", "(", "num_retr", ")", "\n", "", "recall", "=", "float", "(", "num_retr_relevant", ")", "/", "float", "(", "num_relevant", ")", "\n", "f2", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "result", "[", "'precision'", "]", "=", "precision", "\n", "result", "[", "'recall'", "]", "=", "recall", "\n", "result", "[", "'f2'", "]", "=", "f2", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_pos_equal": [[222, 234], ["None"], "function", ["None"], ["", "def", "is_pos_equal", "(", "pos_standard", ",", "pos_test", ")", ":", "\n", "    ", "if", "pos_standard", "==", "'_'", ":", "\n", "        ", "return", "True", "\n", "", "if", "pos_standard", "==", "'X'", ":", "\n", "        ", "return", "True", "\n", "", "if", "pos_standard", "==", "pos_test", ":", "\n", "        ", "return", "True", "\n", "", "if", "pos_standard", "==", "'NOUN'", "and", "pos_test", "==", "'PROPN'", ":", "\n", "        ", "return", "True", "\n", "", "if", "pos_test", "==", "'NOUN'", "and", "pos_standard", "==", "'PROPN'", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.is_lemma_equal": [[235, 239], ["lemma_standard.lower", "lemma_test.lower"], "function", ["None"], ["", "def", "is_lemma_equal", "(", "lemma_standard", ",", "lemma_test", ")", ":", "\n", "    ", "if", "lemma_standard", "==", "'UNKN'", ":", "\n", "        ", "return", "True", "\n", "", "return", "lemma_standard", ".", "lower", "(", ")", "==", "lemma_test", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.compare_features": [[240, 247], ["set", "set", "len", "len", "len", "features_standard.split", "features_test.split", "set.intersection"], "function", ["None"], ["", "def", "compare_features", "(", "features_standard", ",", "features_test", ")", ":", "\n", "    ", "features_standard_set", "=", "set", "(", "features_standard", ".", "split", "(", "'|'", ")", ")", "\n", "features_test_set", "=", "set", "(", "features_test", ".", "split", "(", "'|'", ")", ")", "\n", "num_retr_relevant", "=", "len", "(", "features_standard_set", ".", "intersection", "(", "features_test_set", ")", ")", "\n", "num_retr", "=", "len", "(", "features_test_set", ")", "\n", "num_relevant", "=", "len", "(", "features_standard_set", ")", "\n", "return", "num_retr_relevant", ",", "num_retr", ",", "num_relevant", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.read_lines": [[249, 261], ["open", "line.strip", "lines.append", "line.strip"], "function", ["None"], ["", "def", "read_lines", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n\n    :param filename: filename of a utf-8 encoded file\n    :return: an array of non-empty lines with whitespace stripped\n    \"\"\"", "\n", "lines", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", "!=", "''", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.main": [[263, 273], ["evaluation_ud.evaluate_ud", "len", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_ud.evaluate_ud"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", ":", "\n", "        ", "print", "(", "'usage: evaluation_ud.py <gold.standard.filename> <predict.filename> <is_check_prev_num>'", ")", "\n", "return", "\n", "", "filename_standard", "=", "sys", ".", "argv", "[", "1", "]", "\n", "filename_predict", "=", "sys", ".", "argv", "[", "2", "]", "\n", "is_check_prev_num", "=", "(", "sys", ".", "argv", "[", "3", "]", "==", "'1'", ")", "\n", "\n", "\n", "evaluate_ud", "(", "filename_standard", ",", "filename_predict", ",", "is_check_prev_num", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.evaluate_syn": [[11, 22], ["evaluation_syn.compare_files_syn", "print", "open", "fout.write"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.compare_files_syn"], ["def", "evaluate_syn", "(", "filename_standard", ",", "filename_test", ")", ":", "\n", "    ", "\"\"\"\n    compares two files and writes the comparison result into a third one\n    :param filename_standard: full path to the gold standard file (utf-8)\n    :param filename_test: full path to the file being tested (utf-8)\n    \"\"\"", "\n", "result", "=", "compare_files_syn", "(", "filename_standard", ",", "filename_test", ")", "\n", "filename_result", "=", "filename_test", "+", "'_result_syn.txt'", "\n", "with", "open", "(", "filename_result", ",", "'w'", ",", "encoding", "=", "'utf'", ",", "newline", "=", "''", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "result", "+", "'\\n'", ")", "\n", "", "print", "(", "'written results to %s'", "%", "filename_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.compare_files_syn": [[24, 51], ["evaluation_syn.read_lines", "evaluation_syn.read_lines", "len", "zip", "len", "line_standard.split", "float", "Levenshtein.distance", "len", "min"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.read_lines", "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.read_lines"], ["", "def", "compare_files_syn", "(", "filename_standard", ",", "filename_test", ")", ":", "\n", "    ", "standard_lines", "=", "read_lines", "(", "filename_standard", ")", "\n", "test_lines", "=", "read_lines", "(", "filename_test", ")", "\n", "total_number", "=", "len", "(", "standard_lines", ")", "\n", "if", "total_number", "!=", "len", "(", "test_lines", ")", ":", "\n", "        ", "return", "'Error: wrong number of lines: received %s, expected %s'", "%", "(", "len", "(", "test_lines", ")", ",", "total_number", ")", "\n", "", "num_totally_equal", "=", "0", "\n", "levenshtein_dist_sum", "=", "0", "\n", "for", "line_standard", ",", "line_test", "in", "zip", "(", "standard_lines", ",", "test_lines", ")", ":", "\n", "# there may be several answers separated by a delimiter, and we choose the closest one", "\n", "        ", "line_test_variants", "=", "line_standard", ".", "split", "(", "VARIANT_DELIMITER", ")", "\n", "closest_distance", "=", "None", "\n", "for", "variant", "in", "line_test_variants", ":", "\n", "            ", "if", "variant", "==", "line_test", ":", "\n", "                ", "num_totally_equal", "+=", "1", "\n", "closest_distance", "=", "0", "\n", "break", "\n", "", "current_distance", "=", "distance", "(", "variant", ",", "line_test", ")", "\n", "if", "closest_distance", ":", "\n", "                ", "closest_distance", "=", "min", "(", "closest_distance", ",", "current_distance", ")", "\n", "", "else", ":", "\n", "                ", "closest_distance", "=", "current_distance", "\n", "\n", "", "", "levenshtein_dist_sum", "+=", "closest_distance", "\n", "", "levenshtein_dist_average", "=", "levenshtein_dist_sum", "/", "float", "(", "total_number", ")", "\n", "return", "'Totally correct: %s out of %s; '", "'Average Levenshtein distance: %s'", "%", "(", "num_totally_equal", ",", "total_number", ",", "levenshtein_dist_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.read_lines": [[53, 65], ["open", "line.strip", "lines.append", "line.strip"], "function", ["None"], ["", "def", "read_lines", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n\n    :param filename: filename of a utf-8 encoded file\n    :return: an array of non-empty lines with whitespace stripped\n    \"\"\"", "\n", "lines", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", "!=", "''", ":", "\n", "                ", "lines", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.main": [[67, 74], ["evaluation_syn.evaluate_syn", "len", "print"], "function", ["home.repos.pwc.inspect_result.lowresource-lang-eval_morphology_scripts.evaluation.evaluation_syn.evaluate_syn"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "len", "(", "sys", ".", "argv", ")", "<", "3", ":", "\n", "        ", "print", "(", "'usage: evaluation_syn.py <gold.standard.filename> <predict.filename>'", ")", "\n", "return", "\n", "", "filename_standard", "=", "sys", ".", "argv", "[", "1", "]", "\n", "filename_predict", "=", "sys", ".", "argv", "[", "2", "]", "\n", "evaluate_syn", "(", "filename_standard", ",", "filename_predict", ")", "\n", "\n"]]}