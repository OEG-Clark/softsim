{"home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.readcard.loadcardnum": [[5, 23], ["print", "open", "open.readlines", "open.close", "open", "range", "open.write", "open.close", "len", "str", "l.append", "len", "lines[].strip"], "function", ["None"], ["def", "loadcardnum", "(", ")", ":", "\n", "    ", "print", "(", "\"load card...\"", ")", "\n", "\n", "file", "=", "open", "(", "sys", ".", "argv", "[", "2", "]", "+", "\".txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "file", ".", "close", "(", ")", "\n", "file", "=", "open", "(", "\"nlnum.txt\"", ",", "\"w\"", ")", "\n", "count", "=", "0", "\n", "l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "        ", "if", "i", "%", "8", "==", "5", ":", "\n", "#if lines[i].strip() == \"0\":", "\n", "            ", "if", "len", "(", "lines", "[", "i", "]", ".", "strip", "(", ")", ")", "==", "0", ":", "#i >= 8 and lines[i - 8].strip() != lines[i].strip():", "\n", "                ", "count", "+=", "1", "\n", "", "l", ".", "append", "(", "count", ")", "\n", "", "", "file", ".", "write", "(", "str", "(", "l", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "count", "\n", "#global card_number", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.setting.readrule": [[1, 6], ["open", "open.readlines", "open.close", "len"], "function", ["None"], ["def", "readrule", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "\"Rule.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "len", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.load_vocabulary": [[70, 82], ["os.path.exists", "os.path.exists", "open", "open.readline", "eval", "print", "open", "open.readline", "eval"], "function", ["None"], ["def", "load_vocabulary", "(", ")", ":", "\n", "    ", "global", "vocabulary", "\n", "global", "tree_vocabulary", "\n", "if", "os", ".", "path", ".", "exists", "(", "\"vocabulary.txt\"", ")", ":", "\n", "        ", "f", "=", "open", "(", "\"vocabulary.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readline", "(", ")", "\n", "vocabulary", "=", "eval", "(", "lines", ")", "\n", "print", "(", "vocabulary", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "\"tree_vocabulary.txt\"", ")", ":", "\n", "        ", "f", "=", "open", "(", "\"tree_vocabulary.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readline", "(", ")", "\n", "tree_vocabulary", "=", "eval", "(", "lines", ")", "\n", "", "", "def", "sentence2vec", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.sentence2vec": [[82, 94], ["sentence.split", "len", "outputvoc.append", "res.append", "res.append"], "function", ["None"], ["", "", "def", "sentence2vec", "(", "sentence", ")", ":", "\n", "    ", "words", "=", "sentence", ".", "split", "(", ")", "\n", "res", "=", "[", "]", "\n", "for", "x", "in", "words", ":", "\n", "        ", "if", "x", "not", "in", "vocabulary", ":", "\n", "            ", "vocabulary", "[", "x", "]", "=", "len", "(", "vocabulary", ")", "\n", "outputvoc", ".", "append", "(", "x", ")", "\n", "#    print (x)", "\n", "res", ".", "append", "(", "vocabulary", "[", "x", "]", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "vocabulary", "[", "x", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec": [[95, 112], ["sentence.split", "len", "res.append", "outputtreevoc.append", "res.append"], "function", ["None"], ["", "def", "tree2vec", "(", "sentence", ")", ":", "\n", "    ", "words", "=", "sentence", ".", "split", "(", ")", "\n", "res", "=", "[", "]", "\n", "#if len(sentence) < 3:", "\n", "#print(sentence + \"1\")", "\n", "#sys.exit(0)", "\n", "if", "sentence", "==", "\"\"", "or", "sentence", "==", "\" \"", ":", "\n", "#        print(\"empty_line\")", "\n", "        ", "return", "res", "\n", "", "for", "x", "in", "words", ":", "\n", "        ", "if", "x", "not", "in", "tree_vocabulary", ":", "\n", "            ", "tree_vocabulary", "[", "x", "]", "=", "len", "(", "tree_vocabulary", ")", "\n", "res", ".", "append", "(", "tree_vocabulary", "[", "x", "]", ")", "\n", "outputtreevoc", ".", "append", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "res", ".", "append", "(", "tree_vocabulary", "[", "x", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.load_data": [[114, 250], ["open", "open.readlines", "range", "open", "open.readlines", "range", "open", "open.readlines", "range", "open", "open.readlines", "range", "int", "nl_train.append", "nl.append", "tree.append", "node.append", "parent_node.append", "str().split", "rule_list.append", "func_list.append", "parent_list.append", "int", "nl_test.append", "resolve_data.sentence2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "int", "nl_test.append", "resolve_data.sentence2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "int", "nl_test.append", "t_nl.append", "t_tree.append", "t_node.append", "t_parent_node.append", "str().split", "t_rule_list.append", "t_func_list.append", "t_parent_list.append", "len", "print", "nl_line.split", "resolve_data.sentence2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "label.append", "ress.append", "resolve_data.tree2vec", "resolve_data.tree2vec", "len", "print", "nl_line.split", "len", "print", "nl_line.split", "len", "print", "nl_line.split", "resolve_data.sentence2vec", "resolve_data.tree2vec", "t_label.append", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "resolve_data.tree2vec", "len", "nl_line.split", "int", "print", "str", "int", "len", "nl_line.split", "len", "nl_line.split", "len", "nl_line.split", "int", "print", "str", "ress.append", "int"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.sentence2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.sentence2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.sentence2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.sentence2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.tree2vec"], ["", "def", "load_data", "(", ")", ":", "\n", "    ", "global", "vocabulary", "\n", "global", "tree_vocabulary", "\n", "f", "=", "open", "(", "\"train.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "lines", ")", "/", "8", ")", ")", ":", "\n", "        ", "nl_line", "=", "lines", "[", "8", "*", "i", "]", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "nl_line", ".", "split", "(", ")", ")", ">=", "150", ":", "\n", "            ", "print", "(", "nl_line", ")", "\n", "continue", "\n", "", "nl_train", ".", "append", "(", "nl_line", ".", "split", "(", ")", ")", "\n", "tree_line", "=", "lines", "[", "8", "*", "i", "+", "1", "]", "[", ":", "-", "1", "]", "\n", "label_line", "=", "lines", "[", "8", "*", "i", "+", "6", "]", "[", ":", "-", "1", "]", "\n", "rule_list_line", "=", "lines", "[", "8", "*", "i", "+", "5", "]", "[", ":", "-", "1", "]", "\n", "node_line", "=", "lines", "[", "8", "*", "i", "+", "2", "]", "[", ":", "-", "1", "]", "\n", "parent_node_line", "=", "lines", "[", "8", "*", "i", "+", "3", "]", "[", ":", "-", "1", "]", "\n", "#deep_line = lines[8 * i + 4][:-1]", "\n", "func_line", "=", "lines", "[", "8", "*", "i", "+", "7", "]", "[", ":", "-", "1", "]", "\n", "parent_list_line", "=", "lines", "[", "8", "*", "i", "+", "4", "]", "[", ":", "-", "1", "]", "\n", "#print(nl_line, tree_line, label_line)", "\n", "nl", ".", "append", "(", "sentence2vec", "(", "nl_line", ")", ")", "\n", "tree", ".", "append", "(", "tree2vec", "(", "tree_line", ")", ")", "\n", "node", ".", "append", "(", "tree2vec", "(", "node_line", ")", ")", "\n", "parent_node", ".", "append", "(", "tree2vec", "(", "parent_node_line", ")", ")", "\n", "try", ":", "\n", "            ", "label", ".", "append", "(", "int", "(", "label_line", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"error\"", ",", "nl_line", ",", "tree_line", ",", "label_line", ")", "\n", "", "rl", "=", "str", "(", "rule_list_line", ")", ".", "split", "(", ")", "\n", "ress", "=", "[", "]", "\n", "for", "r", "in", "rl", ":", "\n", "            ", "ress", ".", "append", "(", "int", "(", "r", ")", ")", "\n", "", "rule_list", ".", "append", "(", "ress", ")", "\n", "func_list", ".", "append", "(", "tree2vec", "(", "func_line", ")", ")", "\n", "#deep.append(int(deep_line))", "\n", "parent_list", ".", "append", "(", "tree2vec", "(", "parent_list_line", ")", ")", "\n", "#if func_line in tree_vocabulary:", "\n", "#    func.append(tree_vocabulary[func_line])", "\n", "#else:", "\n", "#    func.append(0)", "\n", "# if node_line in tree_vocabulary:", "\n", "#     node.append(tree_vocabulary[node_line])", "\n", "# else:", "\n", "#     node.append(0)", "\n", "# if parent_node_line in tree_vocabulary:", "\n", "#     parent_node.append(tree_vocabulary[parent_node_line])", "\n", "# else:", "\n", "#     parent_node.append(0)", "\n", "\n", "", "f", "=", "open", "(", "\"dev.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "lines", ")", "/", "8", ")", ")", ":", "\n", "        ", "nl_line", "=", "lines", "[", "8", "*", "i", "]", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "nl_line", ".", "split", "(", ")", ")", ">=", "150", ":", "\n", "            ", "print", "(", "nl_line", ")", "\n", "return", "\n", "", "nl_test", ".", "append", "(", "nl_line", ".", "split", "(", ")", ")", "\n", "tree_line", "=", "lines", "[", "8", "*", "i", "+", "1", "]", "[", ":", "-", "1", "]", "\n", "label_line", "=", "lines", "[", "8", "*", "i", "+", "6", "]", "[", ":", "-", "1", "]", "\n", "rule_list_line", "=", "lines", "[", "8", "*", "i", "+", "5", "]", "[", ":", "-", "1", "]", "\n", "node_line", "=", "lines", "[", "8", "*", "i", "+", "2", "]", "[", ":", "-", "1", "]", "\n", "parent_node_line", "=", "lines", "[", "8", "*", "i", "+", "3", "]", "[", ":", "-", "1", "]", "\n", "# deep_line = lines[8 * i + 4][:-1]", "\n", "func_line", "=", "lines", "[", "8", "*", "i", "+", "7", "]", "[", ":", "-", "1", "]", "\n", "parent_list_line", "=", "lines", "[", "8", "*", "i", "+", "4", "]", "[", ":", "-", "1", "]", "\n", "#print(nl_line, tree_line, label_line)", "\n", "sentence2vec", "(", "nl_line", ")", "\n", "tree2vec", "(", "tree_line", ")", "\n", "tree2vec", "(", "node_line", ")", "\n", "tree2vec", "(", "parent_node_line", ")", "\n", "tree2vec", "(", "func_line", ")", "\n", "tree2vec", "(", "parent_list_line", ")", "\n", "\n", "\n", "", "f", "=", "open", "(", "\"test.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "lines", ")", "/", "8", ")", ")", ":", "\n", "        ", "nl_line", "=", "lines", "[", "8", "*", "i", "]", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "nl_line", ".", "split", "(", ")", ")", ">=", "150", ":", "\n", "            ", "print", "(", "nl_line", ")", "\n", "return", "\n", "", "nl_test", ".", "append", "(", "nl_line", ".", "split", "(", ")", ")", "\n", "tree_line", "=", "lines", "[", "8", "*", "i", "+", "1", "]", "[", ":", "-", "1", "]", "\n", "label_line", "=", "lines", "[", "8", "*", "i", "+", "6", "]", "[", ":", "-", "1", "]", "\n", "rule_list_line", "=", "lines", "[", "8", "*", "i", "+", "5", "]", "[", ":", "-", "1", "]", "\n", "node_line", "=", "lines", "[", "8", "*", "i", "+", "2", "]", "[", ":", "-", "1", "]", "\n", "parent_node_line", "=", "lines", "[", "8", "*", "i", "+", "3", "]", "[", ":", "-", "1", "]", "\n", "# deep_line = lines[8 * i + 4][:-1]", "\n", "func_line", "=", "lines", "[", "8", "*", "i", "+", "7", "]", "[", ":", "-", "1", "]", "\n", "parent_list_line", "=", "lines", "[", "8", "*", "i", "+", "4", "]", "[", ":", "-", "1", "]", "\n", "#print(nl_line, tree_line, label_line)", "\n", "sentence2vec", "(", "nl_line", ")", "\n", "tree2vec", "(", "tree_line", ")", "\n", "tree2vec", "(", "node_line", ")", "\n", "tree2vec", "(", "parent_node_line", ")", "\n", "tree2vec", "(", "func_line", ")", "\n", "tree2vec", "(", "parent_list_line", ")", "\n", "\n", "\n", "", "f", "=", "open", "(", "sys", ".", "argv", "[", "2", "]", "+", "\".txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "lines", ")", "/", "8", ")", ")", ":", "\n", "        ", "nl_line", "=", "lines", "[", "8", "*", "i", "]", "[", ":", "-", "1", "]", "\n", "if", "len", "(", "nl_line", ".", "split", "(", ")", ")", ">=", "150", ":", "\n", "            ", "print", "(", "nl_line", ")", "\n", "return", "\n", "", "nl_test", ".", "append", "(", "nl_line", ".", "split", "(", ")", ")", "\n", "tree_line", "=", "lines", "[", "8", "*", "i", "+", "1", "]", "[", ":", "-", "1", "]", "\n", "label_line", "=", "lines", "[", "8", "*", "i", "+", "6", "]", "[", ":", "-", "1", "]", "\n", "rule_list_line", "=", "lines", "[", "8", "*", "i", "+", "5", "]", "[", ":", "-", "1", "]", "\n", "node_line", "=", "lines", "[", "8", "*", "i", "+", "2", "]", "[", ":", "-", "1", "]", "\n", "parent_node_line", "=", "lines", "[", "8", "*", "i", "+", "3", "]", "[", ":", "-", "1", "]", "\n", "# deep_line = lines[8 * i + 4][:-1]", "\n", "func_line", "=", "lines", "[", "8", "*", "i", "+", "7", "]", "[", ":", "-", "1", "]", "\n", "parent_list_line", "=", "lines", "[", "8", "*", "i", "+", "4", "]", "[", ":", "-", "1", "]", "\n", "#print(nl_line, tree_line, label_line)", "\n", "t_nl", ".", "append", "(", "sentence2vec", "(", "nl_line", ")", ")", "\n", "t_tree", ".", "append", "(", "tree2vec", "(", "tree_line", ")", ")", "\n", "try", ":", "\n", "            ", "t_label", ".", "append", "(", "int", "(", "label_line", ")", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "nl_line", ",", "tree_line", ",", "label_line", ")", "\n", "", "t_node", ".", "append", "(", "tree2vec", "(", "node_line", ")", ")", "\n", "t_parent_node", ".", "append", "(", "tree2vec", "(", "parent_node_line", ")", ")", "\n", "rl", "=", "str", "(", "rule_list_line", ")", ".", "split", "(", ")", "\n", "ress", "=", "[", "]", "\n", "for", "r", "in", "rl", ":", "\n", "            ", "try", ":", "\n", "                ", "ress", ".", "append", "(", "int", "(", "r", ")", ")", "\n", "", "except", ":", "\n", "#         print(nl_line, tree_line, label_line)", "\n", "                ", "break", "\n", "", "", "t_rule_list", ".", "append", "(", "ress", ")", "\n", "t_func_list", ".", "append", "(", "tree2vec", "(", "func_line", ")", ")", "\n", "#t_deep.append(int(deep_line))", "\n", "t_parent_list", ".", "append", "(", "tree2vec", "(", "parent_list_line", ")", ")", "\n", "#if func_line in tree_vocabulary:", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.data2numpy": [[263, 381], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "range", "range", "len", "range", "len", "range", "len", "range", "len", "range", "len", "len", "range", "len", "range", "len", "range", "len", "range", "len", "range", "len", "len", "range", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "print"], "function", ["None"], ["", "", "def", "data2numpy", "(", ")", ":", "\n", "    ", "global", "train_nl", "\n", "global", "train_tree", "\n", "global", "train_label", "\n", "global", "train_node", "\n", "global", "train_parent", "\n", "global", "train_parentlist", "\n", "global", "train_rulelist", "\n", "global", "train_funclist", "\n", "global", "train_copy", "\n", "global", "test_nl", "\n", "global", "test_tree", "\n", "global", "test_label", "\n", "global", "test_node", "\n", "global", "test_parent", "\n", "global", "test_parentlist", "\n", "global", "test_rulelist", "\n", "global", "test_funclist", "\n", "global", "test_copy", "\n", "nl_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "nl_len", "]", ")", "\n", "tree_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "tree_len", "]", ")", "\n", "label_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "classnum", "]", ")", "\n", "node_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "tree_len", "]", ")", "\n", "parent_node_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "tree_len", "]", ")", "\n", "parent_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "parent_len", "]", ")", "\n", "rule_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "rulelist_len", "]", ")", "\n", "func_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "nl", ")", ",", "10", "]", ")", "\n", "#copy_set = np.zeros([len(nl), len(Rule), nl_len])", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "nl", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "nl", "[", "i", "]", ")", ")", ":", "\n", "#print(nl[i])", "\n", "            ", "nl_set", "[", "i", ",", "j", "]", "=", "nl", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "tree", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "tree", "[", "i", "]", ")", ")", ":", "\n", "            ", "if", "j", "==", "tree_len", ":", "\n", "                ", "print", "(", "i", ")", "\n", "", "tree_set", "[", "i", ",", "j", "]", "=", "tree", "[", "i", "]", "[", "j", "]", "\n", "node_set", "[", "i", ",", "j", "]", "=", "node", "[", "i", "]", "[", "j", "]", "\n", "parent_node_set", "[", "i", ",", "j", "]", "=", "parent_node", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "parent_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "parent_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "parent_list_set", "[", "i", ",", "j", "]", "=", "parent_list", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "func_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "func_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "func_list_set", "[", "i", ",", "j", "]", "=", "func_list", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", ":", "\n", "        ", "label_set", "[", "i", ",", "label", "[", "i", "]", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "len", "(", "rule_list", ")", ")", ":", "\n", "#print (rule_list[i])", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "rule_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "rule_list_set", "[", "i", ",", "j", "]", "=", "rule_list", "[", "i", "]", "[", "j", "]", "\n", "#for i in range(len(nl)):", "\n", "#print (rule_list[i])", "\n", "#    for j in range(len(Rule)):", "\n", "#        for k in range(nl_len):", "\n", "#            if k >= len(nl_train[i]):", "\n", "#                break", "\n", "#            if Rule[j] == nl_train[i][k]:", "\n", "#                copy_set[i, j, k] = 1", "\n", "\n", "", "", "train_nl", "=", "nl_set", "\n", "train_tree", "=", "tree_set", "\n", "train_label", "=", "label_set", "\n", "train_node", "=", "node_set", "\n", "train_parent", "=", "parent_node_set", "\n", "train_parentlist", "=", "parent_list_set", "\n", "train_rulelist", "=", "rule_list_set", "\n", "train_funclist", "=", "func_list_set", "\n", "#train_copy = copy_set", "\n", "\n", "\n", "test_nl_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "nl_len", "]", ")", "\n", "test_tree_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "tree_len", "]", ")", "\n", "test_label_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "classnum", "]", ")", "\n", "test_node_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "tree_len", "]", ")", "\n", "test_parent_node_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "tree_len", "]", ")", "\n", "test_parent_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "parent_len", "]", ")", "\n", "test_rule_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "rulelist_len", "]", ")", "#62758622", "\n", "test_func_list_set", "=", "np", ".", "zeros", "(", "[", "len", "(", "t_nl", ")", ",", "10", "]", ")", "\n", "#test_copy_set = np.zeros([len(t_nl), len(Rule), nl_len])", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "t_nl", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "t_nl", "[", "i", "]", ")", ")", ":", "\n", "            ", "test_nl_set", "[", "i", ",", "j", "]", "=", "t_nl", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "t_tree", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "t_tree", "[", "i", "]", ")", ")", ":", "\n", "            ", "test_tree_set", "[", "i", ",", "j", "]", "=", "t_tree", "[", "i", "]", "[", "j", "]", "\n", "test_node_set", "[", "i", ",", "j", "]", "=", "t_node", "[", "i", "]", "[", "j", "]", "\n", "test_parent_node_set", "[", "i", ",", "j", "]", "=", "t_parent_node", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "t_parent_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "t_parent_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "test_parent_list_set", "[", "i", ",", "j", "]", "=", "t_parent_list", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "t_func_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "t_func_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "test_func_list_set", "[", "i", ",", "j", "]", "=", "t_func_list", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "t_label", ")", ")", ":", "\n", "        ", "test_label_set", "[", "i", ",", "t_label", "[", "i", "]", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "len", "(", "t_rule_list", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "t_rule_list", "[", "i", "]", ")", ")", ":", "\n", "            ", "test_rule_list_set", "[", "i", ",", "j", "]", "=", "t_rule_list", "[", "i", "]", "[", "j", "]", "\n", "#for i in range(len(t_nl)):", "\n", "#print (rule_list[i])", "\n", "#    for j in range(len(Rule)):", "\n", "#        for k in range(nl_len):", "\n", "#            if k >= len(nl_test[i]):", "\n", "#                break", "\n", "#            if Rule[j] == nl_test[i][k]:", "\n", "#                test_copy_set[i, j, k] = 1", "\n", "\n", "", "", "test_nl", "=", "test_nl_set", "\n", "test_tree", "=", "test_tree_set", "\n", "test_label", "=", "test_label_set", "\n", "test_node", "=", "test_node_set", "\n", "test_parent", "=", "test_parent_node_set", "\n", "test_parentlist", "=", "test_parent_list_set", "\n", "test_rulelist", "=", "test_rule_list_set", "\n", "test_funclist", "=", "test_func_list_set", "\n", "#test_copy = test_copy_set", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_train_batch": [[383, 428], ["int", "numpy.random.permutation", "range", "range", "batch0.append", "batch1.append", "batch2.append", "batch3.append", "batch4.append", "batch5.append", "batch6.append", "batch7.append", "int", "int"], "function", ["None"], ["", "def", "get_train_batch", "(", "batch_size", ")", ":", "\n", "    ", "global", "train_nl", "\n", "global", "train_tree", "\n", "global", "train_label", "\n", "global", "train_node", "\n", "global", "train_parent", "\n", "global", "train_parentlist", "\n", "global", "train_rulelist", "\n", "global", "train_funclist", "\n", "global", "train_copy", "\n", "batch_num", "=", "int", "(", "int", "(", "train_nl", ".", "shape", "[", "0", "]", ")", "/", "batch_size", ")", "\n", "num_lst", "=", "np", ".", "random", ".", "permutation", "(", "range", "(", "int", "(", "train_nl", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "batch0", "=", "[", "]", "\n", "batch1", "=", "[", "]", "\n", "batch2", "=", "[", "]", "\n", "batch3", "=", "[", "]", "\n", "batch4", "=", "[", "]", "\n", "batch5", "=", "[", "]", "\n", "batch6", "=", "[", "]", "\n", "batch7", "=", "[", "]", "\n", "batch8", "=", "[", "]", "\n", "batch_0", "=", "train_nl", "[", "num_lst", "]", "\n", "batch_1", "=", "train_tree", "[", "num_lst", "]", "\n", "batch_2", "=", "train_node", "[", "num_lst", "]", "\n", "batch_3", "=", "train_parent", "[", "num_lst", "]", "\n", "batch_4", "=", "train_label", "[", "num_lst", "]", "\n", "batch_5", "=", "train_parentlist", "[", "num_lst", "]", "\n", "batch_6", "=", "train_rulelist", "[", "num_lst", "]", "\n", "batch_7", "=", "train_funclist", "[", "num_lst", "]", "\n", "#batch_8 = train_copy[num_lst]", "\n", "for", "i", "in", "range", "(", "batch_num", ")", ":", "\n", "        ", "batch0", ".", "append", "(", "batch_0", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch1", ".", "append", "(", "batch_1", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch2", ".", "append", "(", "batch_2", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch3", ".", "append", "(", "batch_3", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch4", ".", "append", "(", "batch_4", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch5", ".", "append", "(", "batch_5", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch6", ".", "append", "(", "batch_6", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch7", ".", "append", "(", "batch_7", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "#   batch8.append(batch_8[batch_size * i:batch_size * i + batch_size, :])", "\n", "\n", "", "'''batch0.append(batch_0[batch_size * batch_num:, :])\n    batch1.append(batch_1[batch_size * batch_num:, :])\n    batch2.append(batch_2[batch_size * batch_num:, :])'''", "\n", "return", "batch0", ",", "batch1", ",", "batch2", ",", "batch3", ",", "batch4", ",", "batch5", ",", "batch6", ",", "batch7", "#, batch8", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_test_batch": [[429, 431], ["None"], "function", ["None"], ["", "def", "get_test_batch", "(", ")", ":", "\n", "    ", "return", "test_nl", ",", "test_tree", ",", "test_node", ",", "test_parent", ",", "test_label", ",", "test_parentlist", ",", "test_rulelist", ",", "test_funclist", "#, test_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_valid_batch": [[432, 464], ["int", "range", "batch0.append", "batch1.append", "batch2.append", "batch3.append", "batch4.append", "batch5.append", "batch6.append", "batch7.append", "batch0.append", "batch1.append", "batch2.append", "batch3.append", "batch4.append", "batch5.append", "batch6.append", "batch7.append"], "function", ["None"], ["", "def", "get_valid_batch", "(", ")", ":", "\n", "    ", "batch0", "=", "[", "]", "\n", "batch1", "=", "[", "]", "\n", "batch2", "=", "[", "]", "\n", "batch3", "=", "[", "]", "\n", "batch4", "=", "[", "]", "\n", "batch5", "=", "[", "]", "\n", "batch6", "=", "[", "]", "\n", "batch7", "=", "[", "]", "\n", "batch8", "=", "[", "]", "\n", "batch_size", "=", "500", "\n", "bound", "=", "int", "(", "test_nl", ".", "shape", "[", "0", "]", "/", "batch_size", ")", "\n", "for", "i", "in", "range", "(", "bound", ")", ":", "\n", "        ", "batch0", ".", "append", "(", "test_nl", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch1", ".", "append", "(", "test_tree", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch2", ".", "append", "(", "test_node", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch3", ".", "append", "(", "test_parent", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch4", ".", "append", "(", "test_label", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch5", ".", "append", "(", "test_parentlist", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch6", ".", "append", "(", "test_rulelist", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "batch7", ".", "append", "(", "test_funclist", "[", "batch_size", "*", "i", ":", "batch_size", "*", "i", "+", "batch_size", ",", ":", "]", ")", "\n", "#    batch8.append(test_copy[batch_size * i:batch_size * i + batch_size, :])", "\n", "", "batch0", ".", "append", "(", "test_nl", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch1", ".", "append", "(", "test_tree", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch2", ".", "append", "(", "test_node", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch3", ".", "append", "(", "test_parent", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch4", ".", "append", "(", "test_label", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch5", ".", "append", "(", "test_parentlist", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch6", ".", "append", "(", "test_rulelist", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "batch7", ".", "append", "(", "test_funclist", "[", "batch_size", "*", "bound", ":", ",", ":", "]", ")", "\n", "#batch8.append(test_copy[batch_size * bound:, :])", "\n", "return", "batch0", ",", "batch1", ",", "batch2", ",", "batch3", ",", "batch4", ",", "batch5", ",", "batch6", ",", "batch7", "#, batch8", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.resolve_data": [[465, 498], ["setting.readrule", "outputvoc.append", "outputtreevoc.append", "resolve_data.load_data", "resolve_data.data2numpy", "os.path.exists", "open", "open.write", "open.close", "os.path.exists", "open", "open.write", "open.close", "str", "str"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.setting.readrule", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.load_data", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.data2numpy"], ["", "def", "resolve_data", "(", ")", ":", "\n", "    ", "global", "classnum", "\n", "classnum", "=", "readrule", "(", ")", "\n", "global", "vocabulary", "\n", "global", "tree_vocabulary", "\n", "vocabulary", "[", "\"Unknown\"", "]", "=", "0", "\n", "outputvoc", ".", "append", "(", "\"Unknown\"", ")", "\n", "tree_vocabulary", "[", "\"Unknown\"", "]", "=", "0", "\n", "outputtreevoc", ".", "append", "(", "\"Unknown\"", ")", "\n", "#load_vocabulary()", "\n", "load_data", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sys", ".", "argv", "[", "3", "]", "+", "\"/vocabulary.txt\"", ")", ":", "\n", "        ", "f", "=", "open", "(", "sys", ".", "argv", "[", "3", "]", "+", "\"/vocabulary.txt\"", ",", "\"w\"", ")", "\n", "#vocabulary_s = sorted(vocabulary.items(), key = lambda v:v[1])", "\n", "#print (len(vocabulary))", "\n", "#print (len(outputvoc))", "\n", "#print (vocabulary)", "\n", "#for x in outputvoc:", "\n", "#f.write(x)", "\n", "#f.write(\"\\n\")", "\n", "f", ".", "write", "(", "str", "(", "vocabulary", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "sys", ".", "argv", "[", "3", "]", "+", "\"/tree_vocabulary.txt\"", ")", ":", "\n", "        ", "f", "=", "open", "(", "sys", ".", "argv", "[", "3", "]", "+", "\"/tree_vocabulary.txt\"", ",", "\"w\"", ")", "\n", "#tree_vocabulary_s = sorted(tree_vocabulary.items(), key = lambda v:v[1])", "\n", "#for x in outputtreevoc:", "\n", "#f.write(x)", "\n", "#f.write(\"\\n\")", "\n", "f", ".", "write", "(", "str", "(", "tree_vocabulary", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "#print(vocabulary)", "\n", "#print(tree_vocabulary)", "\n", "", "data2numpy", "(", ")", "\n", "#get_train_batch(50)", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.weight_variable": [[7, 12], ["tensorflow.truncated_normal", "tensorflow.Variable", "tensorflow.add_to_collection", "layers.l2_regularizer"], "methods", ["None"], ["    ", "def", "weight_variable", "(", "self", ",", "shape", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "0.1", ")", "\n", "weight", "=", "tf", ".", "Variable", "(", "initial", ")", "\n", "tf", ".", "add_to_collection", "(", "\"losses\"", ",", "layers", ".", "l2_regularizer", "(", "0.00005", ")", "(", "weight", ")", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.bias_variable": [[13, 16], ["tensorflow.constant", "tensorflow.Variable"], "methods", ["None"], ["", "def", "bias_variable", "(", "self", ",", "shape", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "shape", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.max_height_pooling": [[18, 25], ["int", "int", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.reshape", "tensorflow.expand_dims.get_shape", "tensorflow.expand_dims.get_shape"], "methods", ["None"], ["", "def", "max_height_pooling", "(", "self", ",", "input", ")", ":", "\n", "        ", "height", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "-", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "input", ",", "ksize", "=", "[", "1", ",", "height", ",", "1", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "width", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.max_width_pooling": [[26, 33], ["int", "int", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.reshape", "tensorflow.expand_dims.get_shape", "tensorflow.expand_dims.get_shape"], "methods", ["None"], ["", "def", "max_width_pooling", "(", "self", ",", "input", ")", ":", "\n", "        ", "height", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "-", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "input", ",", "ksize", "=", "[", "1", ",", "1", ",", "width", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "height", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.my_conv": [[34, 43], ["int", "int", "code_generate_model.code_gen_model.Conv1d", "code_generate_model.code_gen_model.Relu", "range", "code_generate_model.code_gen_model.MulCnn", "input_t.get_shape", "input_t.get_shape"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.MulCnn"], ["", "def", "my_conv", "(", "self", ",", "input_t", ",", "stage", ")", ":", "\n", "        ", "height", "=", "int", "(", "input_t", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input_t", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "Conv1d", "(", "input_t", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "            ", "x", "=", "self", ".", "MulCnn", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.MulCnn": [[44, 53], ["code_generate_model.code_gen_model.Conv1d", "code_generate_model.code_gen_model.Relu", "code_generate_model.code_gen_model.Conv1d", "tensorflow.add_n", "code_generate_model.code_gen_model.Relu"], "methods", ["None"], ["", "def", "MulCnn", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv1d", "(", "input_tensor", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "x", "=", "self", ".", "Conv1d", "(", "x", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "tf", ".", "add_n", "(", "[", "x", ",", "input_tensor", "]", ")", "#x = x + input_tensor", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.max_Attention": [[54, 66], ["int", "int", "code_generate_model.code_gen_model.weight_variable", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.reduce_max", "tensorflow.reduce_max"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable"], ["", "def", "max_Attention", "(", "self", ",", "state", ",", "max_pool", ")", ":", "\n", "        ", "state_height", "=", "int", "(", "state", ".", "shape", "[", "2", "]", ")", "\n", "pool_height", "=", "int", "(", "max_pool", ".", "shape", "[", "1", "]", ")", "\n", "attention_matrix", "=", "self", ".", "weight_variable", "(", "shape", "=", "[", "state_height", ",", "pool_height", "]", ")", "\n", "tmp_matrix", "=", "tf", ".", "einsum", "(", "\"ijk,kl->ijl\"", ",", "state", ",", "attention_matrix", ")", "\n", "w_pool", "=", "tf", ".", "expand_dims", "(", "max_pool", ",", "-", "1", ")", "\n", "tmp_matrix", "=", "tf", ".", "matmul", "(", "tmp_matrix", ",", "w_pool", ")", "\n", "weight_vec", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reduce_max", "(", "tmp_matrix", ",", "reduction_indices", "=", "[", "2", "]", ")", ")", "\n", "weight_vec", "=", "tf", ".", "expand_dims", "(", "weight_vec", ",", "-", "1", ")", "\n", "Out", "=", "tf", ".", "matmul", "(", "state", ",", "weight_vec", ",", "transpose_a", "=", "True", ")", "\n", "out", "=", "tf", ".", "reduce_max", "(", "Out", ",", "reduction_indices", "=", "[", "2", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.code_generate_model.code_gen_model.__init__": [[67, 171], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.stack", "tensorflow.layers.conv2d", "tensorflow.reduce_max", "code_generate_model.code_gen_model.Relu", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "int", "code_generate_model.code_gen_model.weight_variable", "code_generate_model.code_gen_model.bias_variable", "tensorflow.nn.tanh", "tensorflow.nn.dropout", "code_generate_model.code_gen_model.weight_variable", "code_generate_model.code_gen_model.bias_variable", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "int", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.bias_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.bias_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv"], ["", "def", "__init__", "(", "self", ",", "classnum", ",", "embedding_size", ",", "conv_layernum", ",", "conv_layersize", ",", "rnn_layernum", ",", "\n", "batch_size", ",", "NL_vocabu_size", ",", "Tree_vocabu_size", ",", "NL_len", ",", "Tree_len", ",", "parent_len", ",", "learning_rate", ",", "keep_prob", ")", ":", "\n", "        ", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "vocabu_size", "=", "NL_vocabu_size", "\n", "self", ".", "NL_len", "=", "NL_len", "\n", "self", ".", "Tree_len", "=", "Tree_len", "\n", "self", ".", "conv_layernum", "=", "conv_layernum", "\n", "self", ".", "conv_layersize", "=", "conv_layersize", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "BatchNormalization", "=", "tf", ".", "layers", ".", "batch_normalization", "\n", "self", ".", "Relu", "=", "tf", ".", "nn", ".", "relu", "\n", "self", ".", "Conv1d", "=", "tf", ".", "layers", ".", "conv1d", "\n", "#self.keep_prob = keep_prob", "\n", "self", ".", "rnn_layernum", "=", "rnn_layernum", "\n", "self", ".", "layernum", "=", "3", "\n", "self", ".", "layerparentlist", "=", "3", "\n", "self", ".", "class_num", "=", "classnum", "\n", "self", ".", "n_stages", "=", "5", "\n", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "self", ".", "input_NL", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "NL_len", "]", ")", "\n", "self", ".", "input_Tree", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputY", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "class_num", "]", ")", "\n", "self", ".", "inputP", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputN", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputparentlist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "parent_len", "]", ")", "\n", "self", ".", "inputrulelist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "rulelist_len", "]", ")", "\n", "self", ".", "inputunderfunclist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "1", "]", ")", "\n", "self", ".", "copy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "classnum", ",", "NL_len", "]", ")", "\n", "self", ".", "embedding", "=", "tf", ".", "get_variable", "(", "\"embedding\"", ",", "[", "NL_vocabu_size", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Tree_embedding", "=", "tf", ".", "get_variable", "(", "\"Tree_embedding\"", ",", "[", "Tree_vocabu_size", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Rule_embedding", "=", "tf", ".", "get_variable", "(", "\"Rule_embedding\"", ",", "[", "classnum", "+", "10", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "em_NL", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding", ",", "self", ".", "input_NL", ")", "\n", "em_Tree", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "input_Tree", ")", "\n", "em_Node", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputN", ")", "\n", "em_Parent_Node", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputP", ")", "\n", "em_Parent_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputparentlist", ")", "\n", "em_Rule_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Rule_embedding", ",", "self", ".", "inputrulelist", ")", "\n", "em_Func_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputunderfunclist", ")", "\n", "# em_Tree = tf.concat([em_Tree, em_Node], 1)", "\n", "# em_Tree = tf.concat([em_Tree, em_Parent_Node], 1)", "\n", "# em_Tree = tf.concat([em_Tree, self.inputDeep], 1)", "\n", "#weight = matrixMargin(0.02, weight) ", "\n", "em_stack", "=", "tf", ".", "stack", "(", "[", "em_Tree", ",", "em_Node", ",", "em_Parent_Node", "]", ",", "-", "2", ")", "\n", "#print(em_stack.shape)", "\n", "em_conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "em_stack", ",", "embedding_size", ",", "[", "1", ",", "3", "]", ")", "\n", "#print(em_conv.shape)", "\n", "em_Tree", "=", "tf", ".", "reduce_max", "(", "em_conv", ",", "reduction_indices", "=", "[", "-", "2", "]", ")", "\n", "em_Tree", "=", "self", ".", "Relu", "(", "em_Tree", ")", "\n", "#print(em_Tree.shape)", "\n", "with", "tf", ".", "variable_scope", "(", "\"Q_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "nl_conv", "=", "self", ".", "my_conv", "(", "em_NL", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"A_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "tree_conv", "=", "self", ".", "my_conv", "(", "em_Tree", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"PL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "R_conv", "=", "self", ".", "my_conv", "(", "em_Parent_List", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"FL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "F_conv", "=", "em_Func_List", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"RL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "RL_conv", "=", "self", ".", "my_conv", "(", "em_Rule_List", ",", "10", ")", "\n", "\n", "# max_pool", "\n", "", "nl_pool", "=", "self", ".", "max_height_pooling", "(", "nl_conv", ")", "\n", "tree_pool", "=", "self", ".", "max_height_pooling", "(", "tree_conv", ")", "\n", "pl_pool", "=", "self", ".", "max_height_pooling", "(", "R_conv", ")", "\n", "rl_pool", "=", "self", ".", "max_height_pooling", "(", "RL_conv", ")", "\n", "fl_pool", "=", "self", ".", "max_height_pooling", "(", "F_conv", ")", "\n", "#attention", "\n", "nl_output", "=", "self", ".", "max_Attention", "(", "nl_conv", ",", "fl_pool", ")", "\n", "tree_output", "=", "self", ".", "max_Attention", "(", "tree_conv", ",", "fl_pool", ")", "\n", "root_output", "=", "self", ".", "max_Attention", "(", "R_conv", ",", "nl_pool", ")", "\n", "api_output", "=", "self", ".", "max_Attention", "(", "RL_conv", ",", "nl_pool", ")", "\n", "func_output", "=", "fl_pool", "\n", "# connect", "\n", "#print(\"nl\", nl_output.shape)", "\n", "#self.attention_weight(nl_output, tree_output)", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "nl_output", ",", "tree_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "root_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "api_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "func_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "nl_pool", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "tree_pool", "]", ",", "1", ")", "\n", "#All_q_a = tf.concat([All_q_a, self_nl], 1)", "\n", "#All_q_a = tf.concat([All_q_a, nl_one_pool], 1)", "\n", "\n", "self", ".", "fc_layernum", "=", "int", "(", "All_q_a", ".", "shape", "[", "1", "]", ")", "\n", "W_fc", "=", "self", ".", "weight_variable", "(", "[", "int", "(", "All_q_a", ".", "shape", "[", "1", "]", ")", ",", "self", ".", "fc_layernum", "]", ")", "\n", "b_fc", "=", "self", ".", "bias_variable", "(", "[", "self", ".", "fc_layernum", "]", ")", "\n", "h_fc", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "All_q_a", ",", "W_fc", ")", "+", "b_fc", ")", "\n", "# dropout", "\n", "h_fc_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "h_fc", ",", "keep_prob", ")", "\n", "W_fc2", "=", "self", ".", "weight_variable", "(", "[", "self", ".", "fc_layernum", ",", "self", ".", "class_num", "]", ")", "\n", "b_fc2", "=", "self", ".", "bias_variable", "(", "[", "self", ".", "class_num", "]", ")", "\n", "self", ".", "y_result", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "matmul", "(", "h_fc_drop", ",", "W_fc2", ")", "+", "b_fc2", ")", "\n", "self", ".", "max_res", "=", "tf", ".", "argmax", "(", "self", ".", "y_result", ",", "1", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "y_result", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "inputY", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "self", ".", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "-", "tf", ".", "reduce_sum", "(", "self", ".", "inputY", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "y_result", ",", "1e-10", ",", "1.0", ")", ")", ",", "reduction_indices", "=", "[", "1", "]", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"losses\"", ",", "self", ".", "cross_entropy", ")", "\n", "self", ".", "loss", "=", "self", ".", "cross_entropy", "#tf.add_n(tf.get_collection(\"losses\"))", "\n", "self", ".", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "#c = code_gen_model(128, 128, 128, 3, 50, 100, 8000, 80000, 150, 800, 8000, 1e-4, 0.5)", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.get_card": [[26, 38], ["enumerate", "len", "open", "open.read", "eval", "len"], "function", ["None"], ["def", "get_card", "(", "lst", ")", ":", "\n", "    ", "global", "cardnum", "\n", "if", "len", "(", "cardnum", ")", "==", "0", ":", "\n", "        ", "f", "=", "open", "(", "\"nlnum.txt\"", ",", "\"r\"", ")", "\n", "st", "=", "f", ".", "read", "(", ")", "\n", "cardnum", "=", "eval", "(", "st", ")", "\n", "", "dic", "=", "{", "}", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "lst", ")", ":", "\n", "        ", "if", "x", "==", "False", ":", "\n", "          ", "if", "cardnum", "[", "i", "]", "not", "in", "dic", ":", "\n", "            ", "dic", "[", "cardnum", "[", "i", "]", "]", "=", "1", "\n", "", "", "", "return", "card_number", "-", "len", "(", "dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.create_model": [[39, 47], ["os.path.exists", "os.path.exists", "tensorflow.train.Saver", "tf.train.Saver.restore", "print", "session.run", "print", "tensorflow.train.latest_checkpoint", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run"], ["", "def", "create_model", "(", "session", ")", ":", "\n", "    ", "if", "(", "os", ".", "path", ".", "exists", "(", "\"./\"", "+", "sys", ".", "argv", "[", "3", "]", "+", "\"/checkpoint\"", ")", ")", ":", "\n", "        ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "session", ",", "tf", ".", "train", ".", "latest_checkpoint", "(", "\"./\"", "+", "sys", ".", "argv", "[", "3", "]", ")", ")", "\n", "print", "(", "\"load the model\"", ")", "\n", "", "else", ":", "\n", "        ", "session", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "print", "(", "\"create a new model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.save_model": [[49, 52], ["tensorflow.train.Saver", "tf.train.Saver.save"], "function", ["None"], ["", "", "def", "save_model", "(", "session", ",", "number", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "save", "(", "session", ",", "sys", ".", "argv", "[", "3", "]", "+", "\"/model.cpkt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.test": [[54, 92], ["code_generate_model.code_gen_model", "resolve_data.get_valid_batch", "tensorflow.ConfigProto", "open", "open", "tensorflow.Session", "run.create_model", "range", "len", "sess.run", "open.write", "open.write", "open.write", "open.write", "str", "str"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_valid_batch", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run"], ["", "def", "test", "(", ")", ":", "\n", "    ", "Code_gen_model", "=", "code_gen_model", "(", "classnum", ",", "embedding_size", ",", "conv_layernum", ",", "2", ",", "50", ",", "\n", "batch_size", ",", "NL_vocabu_size", ",", "Tree_vocabu_size", ",", "NL_len", ",", "Tree_len", ",", "parent_len", ",", "learning_rate", ",", "0.5", ")", "\n", "valid_batch", "=", "get_valid_batch", "(", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "device_count", "=", "{", "\"GPU\"", ":", "0", "}", ")", "\n", "f1", "=", "open", "(", "\"outp.txt\"", ",", "\"w\"", ")", "\n", "f2", "=", "open", "(", "\"numout.txt\"", ",", "\"w\"", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "      ", "create_model", "(", "sess", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "valid_batch", "[", "0", "]", ")", ")", ":", "\n", "          ", "\"\"\"ac1 = Code_gen_model.correct_prediction.eval(session=sess,\n                                        feed_dict={Code_gen_model.input_NL: valid_batch[0][k],\n                                                   Code_gen_model.input_Tree: valid_batch[1][k],\n                                                   Code_gen_model.inputY: valid_batch[4][k],\n                                                   Code_gen_model.inputN: valid_batch[2][k],\n                                                   Code_gen_model.inputP: valid_batch[3][k],\n                                                   Code_gen_model.inputparentlist: valid_batch[5][k],\n                                                   Code_gen_model.inputrulelist:valid_batch[6][k],\n                                                   Code_gen_model.inputunderfunclist:valid_batch[7][k][:,:1],\t\n                                                   Code_gen_model.keep_prob: 1.0,\n                                                   Code_gen_model.is_train: False\n                                                   })\"\"\"", "\n", "ac1", ",", "numout", "=", "sess", ".", "run", "(", "[", "Code_gen_model", ".", "correct_prediction", ",", "Code_gen_model", ".", "max_res", "]", ",", "\n", "feed_dict", "=", "{", "Code_gen_model", ".", "input_NL", ":", "valid_batch", "[", "0", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "input_Tree", ":", "valid_batch", "[", "1", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputY", ":", "valid_batch", "[", "4", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputN", ":", "valid_batch", "[", "2", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputP", ":", "valid_batch", "[", "3", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputparentlist", ":", "valid_batch", "[", "5", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputrulelist", ":", "valid_batch", "[", "6", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputunderfunclist", ":", "valid_batch", "[", "7", "]", "[", "k", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "1.0", ",", "\n", "Code_gen_model", ".", "is_train", ":", "False", "\n", "}", ")", "\n", "f1", ".", "write", "(", "str", "(", "ac1", ")", ")", "\n", "f1", ".", "write", "(", "\"\\n\"", ")", "\n", "f2", ".", "write", "(", "str", "(", "numout", ")", ")", "\n", "f2", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.run": [[94, 186], ["code_generate_model.code_gen_model", "resolve_data.get_valid_batch", "tensorflow.ConfigProto", "open", "open.close", "print", "tensorflow.Session", "run.create_model", "range", "resolve_data.get_train_batch", "range", "len", "code_generate_model.code_gen_model.optim.run", "print", "range", "len", "run.get_card", "open.write", "open.flush", "print", "len", "sess.run", "res.extend", "run.save_model", "print", "loss1.tolist", "str", "str", "str", "str", "str", "run.save_model", "print", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_valid_batch", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_train_batch", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.get_card", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.save_model", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.save_model"], ["", "", "", "def", "run", "(", ")", ":", "\n", "    ", "Code_gen_model", "=", "code_gen_model", "(", "classnum", ",", "embedding_size", ",", "conv_layernum", ",", "2", ",", "50", ",", "\n", "batch_size", ",", "NL_vocabu_size", ",", "Tree_vocabu_size", ",", "NL_len", ",", "Tree_len", ",", "parent_len", ",", "learning_rate", ",", "0.5", ")", "\n", "valid_batch", "=", "get_valid_batch", "(", ")", "\n", "best_accuracy", "=", "0.965", "\n", "best_card", "=", "-", "1", "\n", "#print(NL_vocabu_size, Tree_vocabu_size)", "\n", "#config = tf.ConfigProto(device_count={\"GPU\": 0})", "\n", "#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.9)", "\n", "#config = tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "f", "=", "open", "(", "\"out.txt\"", ",", "\"w\"", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "create_model", "(", "sess", ")", "\n", "for", "i", "in", "range", "(", "train_times", ")", ":", "\n", "            ", "batch", "=", "get_train_batch", "(", "batch_size", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "batch", "[", "0", "]", ")", ")", ":", "\n", "                ", "if", "j", "%", "400", "==", "0", ":", "\n", "                    ", "print", "(", "\"train \"", "+", "str", "(", "i", ")", "+", "\" echos \"", "+", "str", "(", "j", ")", "+", "\" times\"", ")", "\n", "", "if", "j", "%", "500", "==", "0", ":", "\n", "                    ", "ac", "=", "0", "\n", "res", "=", "[", "]", "\n", "sumac", "=", "0", "\n", "length", "=", "0", "\n", "for", "k", "in", "range", "(", "len", "(", "valid_batch", "[", "0", "]", ")", ")", ":", "\n", "                        ", "'''ac1 = Code_gen_model.accuracy.eval(session=sess,\n                                                      feed_dict={Code_gen_model.input_NL: valid_batch[0][k],\n                                                                 Code_gen_model.input_Tree: valid_batch[1][k],\n                                                                 Code_gen_model.inputY: valid_batch[4][k],\n                                                                 Code_gen_model.inputN: valid_batch[2][k],\n                                                                 Code_gen_model.inputP: valid_batch[3][k],\n                                                                 Code_gen_model.inputparentlist: valid_batch[5][k],\n                                                                 Code_gen_model.inputrulelist:valid_batch[6][k],\n                                                                 Code_gen_model.inputunderfunclist:valid_batch[7][k][:,:1],\t\n                                                                 Code_gen_model.keep_prob: 1.0,\n                                                                 Code_gen_model.is_train: False\n                                                                 })\n                        sumac += ac1 * (len(valid_batch[0][k]))\n                        length += len(valid_batch[0][k])'''", "\n", "ac1", ",", "loss1", "=", "sess", ".", "run", "(", "[", "Code_gen_model", ".", "accuracy", ",", "Code_gen_model", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "{", "Code_gen_model", ".", "input_NL", ":", "valid_batch", "[", "0", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "input_Tree", ":", "valid_batch", "[", "1", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputY", ":", "valid_batch", "[", "4", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputN", ":", "valid_batch", "[", "2", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputP", ":", "valid_batch", "[", "3", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputparentlist", ":", "valid_batch", "[", "5", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputrulelist", ":", "valid_batch", "[", "6", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputunderfunclist", ":", "valid_batch", "[", "7", "]", "[", "k", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "1.0", ",", "\n", "Code_gen_model", ".", "is_train", ":", "False", "\n", "}", ")", "\n", "res", ".", "extend", "(", "loss1", ".", "tolist", "(", ")", ")", "\n", "ac", "+=", "ac1", ";", "\n", "#ac = sumac / length", "\n", "", "ac", "/=", "len", "(", "valid_batch", "[", "0", "]", ")", "\n", "card", "=", "get_card", "(", "res", ")", "\n", "#loss = 0.0", "\n", "strs", "=", "str", "(", "ac", ")", "+", "\" \"", "+", "str", "(", "card", ")", "+", "\"\\n\"", "\n", "f", ".", "write", "(", "strs", ")", "\n", "f", ".", "flush", "(", ")", "\n", "print", "(", "\"current accuracy \"", "+", "\n", "str", "(", "ac", ")", "+", "\" card is \"", "+", "str", "(", "card", ")", ")", "\n", "if", "card", ">", "best_card", ":", "\n", "                        ", "best_card", "=", "card", "\n", "best_accuracy", "=", "ac", "\n", "save_model", "(", "sess", ",", "1", ")", "\n", "print", "(", "\"find the better accuracy \"", "+", "\n", "str", "(", "best_accuracy", ")", "+", "\"in echos \"", "+", "str", "(", "i", ")", ")", "\n", "", "elif", "card", "==", "best_card", ":", "\n", "                        ", "if", "(", "ac", ">", "best_accuracy", ")", ":", "\n", "                            ", "best_card", "=", "card", "\n", "best_accuracy", "=", "ac", "\n", "save_model", "(", "sess", ",", "1", ")", "\n", "print", "(", "\"find the better accuracy \"", "+", "\n", "str", "(", "best_accuracy", ")", "+", "\"in echos \"", "+", "str", "(", "i", ")", ")", "\n", "", "", "", "Code_gen_model", ".", "optim", ".", "run", "(", "session", "=", "sess", ",", "feed_dict", "=", "{", "Code_gen_model", ".", "input_NL", ":", "batch", "[", "0", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "input_Tree", ":", "batch", "[", "1", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputY", ":", "batch", "[", "4", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputN", ":", "batch", "[", "2", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputP", ":", "batch", "[", "3", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputparentlist", ":", "batch", "[", "5", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputrulelist", ":", "batch", "[", "6", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputunderfunclist", ":", "batch", "[", "7", "]", "[", "j", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "0.5", ",", "\n", "Code_gen_model", ".", "is_train", ":", "True", "\n", "}", ")", "\n", "# print(eval(tmpy, \"data/q_a_test\"))", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "print", "(", "\"training finish\"", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.main": [[188, 212], ["numpy.set_printoptions", "print", "os.system", "os.system", "readcard.loadcardnum", "readrule", "print", "print", "resolve_data.resolve_data", "len", "len", "print", "run.run", "run.test", "print"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.readcard.loadcardnum", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.setting.readrule", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.resolve_data", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.run.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "NL_vocabu_size", "\n", "global", "Tree_vocabu_size", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "nan", ")", "\n", "# ReadRule()", "\n", "if", "sys", ".", "argv", "[", "1", "]", "==", "\"train\"", ":", "\n", "        ", "print", "(", "\"detar data\"", ")", "\n", "os", ".", "system", "(", "\"tar -zxvf data_\"", "+", "sys", ".", "argv", "[", "3", "]", "+", "\".tar.gz\"", ")", "\n", "global", "classnum", "\n", "global", "card_number", "\n", "card_number", "=", "loadcardnum", "(", ")", "\n", "#os.system(\"python3 readcard.py train \" + sys.argv[2])", "\n", "classnum", "=", "readrule", "(", ")", "\n", "print", "(", "\"eval set: \"", "+", "sys", ".", "argv", "[", "2", "]", ")", "\n", "print", "(", "\"loading data ......\"", ")", "\n", "resolve_data", "(", ")", "\n", "NL_vocabu_size", "=", "len", "(", "vocabulary", ")", "\n", "Tree_vocabu_size", "=", "len", "(", "tree_vocabulary", ")", "\n", "print", "(", "\"finish!\"", ")", "\n", "run", "(", ")", "\n", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"test\"", ":", "\n", "        ", "test", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"error\"", ")", "\n", "# predict()", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.setting.readrule": [[1, 6], ["open", "open.readlines", "open.close", "len"], "function", ["None"], ["def", "readrule", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "\"Rule.txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "return", "len", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable": [[6, 11], ["tensorflow.truncated_normal", "tensorflow.Variable", "tensorflow.add_to_collection", "layers.l2_regularizer"], "methods", ["None"], ["class", "code_gen_model", ":", "\n", "    ", "def", "weight_variable", "(", "self", ",", "shape", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "truncated_normal", "(", "shape", ",", "stddev", "=", "0.1", ")", "\n", "weight", "=", "tf", ".", "Variable", "(", "initial", ")", "\n", "tf", ".", "add_to_collection", "(", "\"losses\"", ",", "layers", ".", "l2_regularizer", "(", "0.00005", ")", "(", "weight", ")", ")", "\n", "return", "weight", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.bias_variable": [[12, 15], ["tensorflow.constant", "tensorflow.Variable"], "methods", ["None"], ["\n", "", "def", "bias_variable", "(", "self", ",", "shape", ")", ":", "\n", "        ", "initial", "=", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "shape", ")", "\n", "return", "tf", ".", "Variable", "(", "initial", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling": [[17, 24], ["int", "int", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.reshape", "tensorflow.expand_dims.get_shape", "tensorflow.expand_dims.get_shape"], "methods", ["None"], ["\n", "", "def", "max_height_pooling", "(", "self", ",", "input", ")", ":", "\n", "        ", "height", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "-", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "input", ",", "ksize", "=", "[", "1", ",", "height", ",", "1", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "width", "]", ")", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_width_pooling": [[25, 32], ["int", "int", "tensorflow.expand_dims", "tensorflow.nn.max_pool", "tensorflow.reshape", "tensorflow.expand_dims.get_shape", "tensorflow.expand_dims.get_shape"], "methods", ["None"], ["\n", "", "def", "max_width_pooling", "(", "self", ",", "input", ")", ":", "\n", "        ", "height", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "input", "=", "tf", ".", "expand_dims", "(", "input", ",", "-", "1", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "input", ",", "ksize", "=", "[", "1", ",", "1", ",", "width", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "height", "]", ")", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv": [[33, 42], ["int", "int", "code_generate_model.code_gen_model.Conv1d", "code_generate_model.code_gen_model.Relu", "range", "code_generate_model.code_gen_model.MulCnn", "input_t.get_shape", "input_t.get_shape"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.MulCnn"], ["\n", "", "def", "my_conv", "(", "self", ",", "input_t", ",", "stage", ")", ":", "\n", "        ", "height", "=", "int", "(", "input_t", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "width", "=", "int", "(", "input_t", ".", "get_shape", "(", ")", "[", "2", "]", ")", "\n", "x", "=", "self", ".", "Conv1d", "(", "input_t", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "stage", ")", ":", "\n", "            ", "x", "=", "self", ".", "MulCnn", "(", "x", ")", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.MulCnn": [[43, 52], ["code_generate_model.code_gen_model.Conv1d", "code_generate_model.code_gen_model.Relu", "code_generate_model.code_gen_model.Conv1d", "tensorflow.add_n", "code_generate_model.code_gen_model.Relu"], "methods", ["None"], ["\n", "", "def", "MulCnn", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "Conv1d", "(", "input_tensor", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "x", "=", "self", ".", "Conv1d", "(", "x", ",", "self", ".", "conv_layernum", ",", "self", ".", "conv_layersize", ",", "padding", "=", "'same'", ")", "\n", "#x = self.BatchNormalization(x, axis=-1, training=self.is_train)", "\n", "x", "=", "tf", ".", "add_n", "(", "[", "x", ",", "input_tensor", "]", ")", "#x = x + input_tensor", "\n", "x", "=", "self", ".", "Relu", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention": [[53, 65], ["int", "int", "code_generate_model.code_gen_model.weight_variable", "tensorflow.einsum", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.reduce_max", "tensorflow.reduce_max"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable"], ["\n", "", "def", "max_Attention", "(", "self", ",", "state", ",", "max_pool", ")", ":", "\n", "        ", "state_height", "=", "int", "(", "state", ".", "shape", "[", "2", "]", ")", "\n", "pool_height", "=", "int", "(", "max_pool", ".", "shape", "[", "1", "]", ")", "\n", "attention_matrix", "=", "self", ".", "weight_variable", "(", "shape", "=", "[", "state_height", ",", "pool_height", "]", ")", "\n", "tmp_matrix", "=", "tf", ".", "einsum", "(", "\"ijk,kl->ijl\"", ",", "state", ",", "attention_matrix", ")", "\n", "w_pool", "=", "tf", ".", "expand_dims", "(", "max_pool", ",", "-", "1", ")", "\n", "tmp_matrix", "=", "tf", ".", "matmul", "(", "tmp_matrix", ",", "w_pool", ")", "\n", "weight_vec", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reduce_max", "(", "tmp_matrix", ",", "reduction_indices", "=", "[", "2", "]", ")", ")", "\n", "weight_vec", "=", "tf", ".", "expand_dims", "(", "weight_vec", ",", "-", "1", ")", "\n", "Out", "=", "tf", ".", "matmul", "(", "state", ",", "weight_vec", ",", "transpose_a", "=", "True", ")", "\n", "out", "=", "tf", ".", "reduce_max", "(", "Out", ",", "reduction_indices", "=", "[", "2", "]", ")", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.__init__": [[66, 170], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.stack", "tensorflow.layers.conv2d", "tensorflow.reduce_max", "code_generate_model.code_gen_model.Relu", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_height_pooling", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "code_generate_model.code_gen_model.max_Attention", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "int", "code_generate_model.code_gen_model.weight_variable", "code_generate_model.code_gen_model.bias_variable", "tensorflow.nn.tanh", "tensorflow.nn.dropout", "code_generate_model.code_gen_model.weight_variable", "code_generate_model.code_gen_model.bias_variable", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.add_to_collection", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.variable_scope", "tensorflow.variable_scope", "code_generate_model.code_gen_model.my_conv", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "int", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_height_pooling", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.max_Attention", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.bias_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.weight_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.bias_variable", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.code_generate_model.code_gen_model.my_conv"], ["\n", "", "def", "__init__", "(", "self", ",", "classnum", ",", "embedding_size", ",", "conv_layernum", ",", "conv_layersize", ",", "rnn_layernum", ",", "\n", "batch_size", ",", "NL_vocabu_size", ",", "Tree_vocabu_size", ",", "NL_len", ",", "Tree_len", ",", "parent_len", ",", "learning_rate", ",", "keep_prob", ")", ":", "\n", "        ", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "vocabu_size", "=", "NL_vocabu_size", "\n", "self", ".", "NL_len", "=", "NL_len", "\n", "self", ".", "Tree_len", "=", "Tree_len", "\n", "self", ".", "conv_layernum", "=", "conv_layernum", "\n", "self", ".", "conv_layersize", "=", "conv_layersize", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "BatchNormalization", "=", "tf", ".", "layers", ".", "batch_normalization", "\n", "self", ".", "Relu", "=", "tf", ".", "nn", ".", "relu", "\n", "self", ".", "Conv1d", "=", "tf", ".", "layers", ".", "conv1d", "\n", "#self.keep_prob = keep_prob", "\n", "self", ".", "rnn_layernum", "=", "rnn_layernum", "\n", "self", ".", "layernum", "=", "3", "\n", "self", ".", "layerparentlist", "=", "3", "\n", "self", ".", "class_num", "=", "classnum", "\n", "self", ".", "n_stages", "=", "5", "\n", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "is_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ")", "\n", "self", ".", "input_NL", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "NL_len", "]", ")", "\n", "self", ".", "input_Tree", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputY", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "class_num", "]", ")", "\n", "self", ".", "inputP", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputN", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "Tree_len", "]", ")", "\n", "self", ".", "inputparentlist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "parent_len", "]", ")", "\n", "self", ".", "inputrulelist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "rulelist_len", "]", ")", "\n", "self", ".", "inputunderfunclist", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "1", "]", ")", "\n", "self", ".", "copy", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "classnum", ",", "NL_len", "]", ")", "\n", "self", ".", "embedding", "=", "tf", ".", "get_variable", "(", "\"embedding\"", ",", "[", "NL_vocabu_size", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Tree_embedding", "=", "tf", ".", "get_variable", "(", "\"Tree_embedding\"", ",", "[", "Tree_vocabu_size", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Rule_embedding", "=", "tf", ".", "get_variable", "(", "\"Rule_embedding\"", ",", "[", "classnum", "+", "10", ",", "embedding_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "em_NL", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "embedding", ",", "self", ".", "input_NL", ")", "\n", "em_Tree", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "input_Tree", ")", "\n", "em_Node", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputN", ")", "\n", "em_Parent_Node", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputP", ")", "\n", "em_Parent_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputparentlist", ")", "\n", "em_Rule_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Rule_embedding", ",", "self", ".", "inputrulelist", ")", "\n", "em_Func_List", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "Tree_embedding", ",", "self", ".", "inputunderfunclist", ")", "\n", "# em_Tree = tf.concat([em_Tree, em_Node], 1)", "\n", "# em_Tree = tf.concat([em_Tree, em_Parent_Node], 1)", "\n", "# em_Tree = tf.concat([em_Tree, self.inputDeep], 1)", "\n", "#weight = matrixMargin(0.02, weight) ", "\n", "em_stack", "=", "tf", ".", "stack", "(", "[", "em_Tree", ",", "em_Node", ",", "em_Parent_Node", "]", ",", "-", "2", ")", "\n", "#print(em_stack.shape)", "\n", "em_conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "em_stack", ",", "embedding_size", ",", "[", "1", ",", "3", "]", ")", "\n", "#print(em_conv.shape)", "\n", "em_Tree", "=", "tf", ".", "reduce_max", "(", "em_conv", ",", "reduction_indices", "=", "[", "-", "2", "]", ")", "\n", "em_Tree", "=", "self", ".", "Relu", "(", "em_Tree", ")", "\n", "#print(em_Tree.shape)", "\n", "with", "tf", ".", "variable_scope", "(", "\"Q_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "nl_conv", "=", "self", ".", "my_conv", "(", "em_NL", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"A_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "tree_conv", "=", "self", ".", "my_conv", "(", "em_Tree", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"PL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "R_conv", "=", "self", ".", "my_conv", "(", "em_Parent_List", ",", "10", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"FL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "F_conv", "=", "em_Func_List", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"RL_conv\"", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "RL_conv", "=", "self", ".", "my_conv", "(", "em_Rule_List", ",", "10", ")", "\n", "\n", "# max_pool", "\n", "", "nl_pool", "=", "self", ".", "max_height_pooling", "(", "nl_conv", ")", "\n", "tree_pool", "=", "self", ".", "max_height_pooling", "(", "tree_conv", ")", "\n", "pl_pool", "=", "self", ".", "max_height_pooling", "(", "R_conv", ")", "\n", "rl_pool", "=", "self", ".", "max_height_pooling", "(", "RL_conv", ")", "\n", "fl_pool", "=", "self", ".", "max_height_pooling", "(", "F_conv", ")", "\n", "#attention", "\n", "nl_output", "=", "self", ".", "max_Attention", "(", "nl_conv", ",", "fl_pool", ")", "\n", "tree_output", "=", "self", ".", "max_Attention", "(", "tree_conv", ",", "fl_pool", ")", "\n", "root_output", "=", "self", ".", "max_Attention", "(", "R_conv", ",", "nl_pool", ")", "\n", "api_output", "=", "self", ".", "max_Attention", "(", "RL_conv", ",", "nl_pool", ")", "\n", "func_output", "=", "fl_pool", "\n", "# connect", "\n", "#print(\"nl\", nl_output.shape)", "\n", "#self.attention_weight(nl_output, tree_output)", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "nl_output", ",", "tree_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "root_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "api_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "func_output", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "nl_pool", "]", ",", "1", ")", "\n", "All_q_a", "=", "tf", ".", "concat", "(", "[", "All_q_a", ",", "tree_pool", "]", ",", "1", ")", "\n", "#All_q_a = tf.concat([All_q_a, self_nl], 1)", "\n", "#All_q_a = tf.concat([All_q_a, nl_one_pool], 1)", "\n", "\n", "self", ".", "fc_layernum", "=", "int", "(", "All_q_a", ".", "shape", "[", "1", "]", ")", "\n", "W_fc", "=", "self", ".", "weight_variable", "(", "[", "int", "(", "All_q_a", ".", "shape", "[", "1", "]", ")", ",", "self", ".", "fc_layernum", "]", ")", "\n", "b_fc", "=", "self", ".", "bias_variable", "(", "[", "self", ".", "fc_layernum", "]", ")", "\n", "h_fc", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "All_q_a", ",", "W_fc", ")", "+", "b_fc", ")", "\n", "# dropout", "\n", "h_fc_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "h_fc", ",", "keep_prob", ")", "\n", "W_fc2", "=", "self", ".", "weight_variable", "(", "[", "self", ".", "fc_layernum", ",", "self", ".", "class_num", "]", ")", "\n", "b_fc2", "=", "self", ".", "bias_variable", "(", "[", "self", ".", "class_num", "]", ")", "\n", "self", ".", "y_result", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "matmul", "(", "h_fc_drop", ",", "W_fc2", ")", "+", "b_fc2", ")", "\n", "self", ".", "max_res", "=", "tf", ".", "argmax", "(", "self", ".", "y_result", ",", "1", ")", "\n", "self", ".", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "self", ".", "y_result", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "inputY", ",", "1", ")", ")", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "self", ".", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "self", ".", "cross_entropy", "=", "tf", ".", "reduce_mean", "(", "\n", "-", "tf", ".", "reduce_sum", "(", "self", ".", "inputY", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "y_result", ",", "1e-10", ",", "1.0", ")", ")", ",", "reduction_indices", "=", "[", "1", "]", ")", ")", "\n", "tf", ".", "add_to_collection", "(", "\"losses\"", ",", "self", ".", "cross_entropy", ")", "\n", "self", ".", "loss", "=", "self", ".", "cross_entropy", "#tf.add_n(tf.get_collection(\"losses\"))", "\n", "self", ".", "optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "self", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.line2word.__init__": [[84, 91], ["None"], "methods", ["None"], ["Code_gen_model", ".", "inputunderfunclist", ":", "valid_batch", "[", "7", "]", "[", "k", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "1.0", ",", "\n", "Code_gen_model", ".", "is_train", ":", "False", "\n", "}", ")", "\n", "f1", ".", "write", "(", "str", "(", "ac1", ")", ")", "\n", "f1", ".", "write", "(", "\"\\n\"", ")", "\n", "f2", ".", "write", "(", "str", "(", "numout", ")", ")", "\n", "f2", ".", "write", "(", "\"\\n\"", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Javaoutput.__init__": [[417, 435], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Javaoutput.prin": [[436, 438], ["print"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Javaoutput.__lt__": [[439, 441], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.readbacklist": [[92, 107], ["open", "open.readlines", "open.close", "[].replace().split", "len", "numberstack.append", "run.line2word", "list2wordlist.append", "str", "[].replace", "str"], "function", ["None"], ["\n", "\n", "", "", "", "def", "run", "(", ")", ":", "\n", "    ", "Code_gen_model", "=", "code_gen_model", "(", "classnum", ",", "embedding_size", ",", "conv_layernum", ",", "2", ",", "50", ",", "\n", "batch_size", ",", "NL_vocabu_size", ",", "Tree_vocabu_size", ",", "NL_len", ",", "Tree_len", ",", "parent_len", ",", "learning_rate", ",", "0.5", ")", "\n", "valid_batch", "=", "get_valid_batch", "(", ")", "\n", "best_accuracy", "=", "0.965", "\n", "best_card", "=", "-", "1", "\n", "#print(NL_vocabu_size, Tree_vocabu_size)", "\n", "#config = tf.ConfigProto(device_count={\"GPU\": 0})", "\n", "#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.9)", "\n", "#config = tf.ConfigProto(allow_soft_placement=True, gpu_options=gpu_options)", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "f", "=", "open", "(", "\"out.txt\"", ",", "\"w\"", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.line2word_var": [[108, 138], ["None"], "function", ["None"], ["with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "        ", "create_model", "(", "sess", ")", "\n", "for", "i", "in", "range", "(", "train_times", ")", ":", "\n", "            ", "batch", "=", "get_train_batch", "(", "batch_size", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "batch", "[", "0", "]", ")", ")", ":", "\n", "                ", "if", "j", "%", "400", "==", "0", ":", "\n", "                    ", "print", "(", "\"train \"", "+", "str", "(", "i", ")", "+", "\" echos \"", "+", "str", "(", "j", ")", "+", "\" times\"", ")", "\n", "", "if", "j", "%", "500", "==", "0", ":", "\n", "                    ", "ac", "=", "0", "\n", "res", "=", "[", "]", "\n", "sumac", "=", "0", "\n", "length", "=", "0", "\n", "for", "k", "in", "range", "(", "len", "(", "valid_batch", "[", "0", "]", ")", ")", ":", "\n", "                        ", "'''ac1 = Code_gen_model.accuracy.eval(session=sess,\n                                                      feed_dict={Code_gen_model.input_NL: valid_batch[0][k],\n                                                                 Code_gen_model.input_Tree: valid_batch[1][k],\n                                                                 Code_gen_model.inputY: valid_batch[4][k],\n                                                                 Code_gen_model.inputN: valid_batch[2][k],\n                                                                 Code_gen_model.inputP: valid_batch[3][k],\n                                                                 Code_gen_model.inputparentlist: valid_batch[5][k],\n                                                                 Code_gen_model.inputrulelist:valid_batch[6][k],\n                                                                 Code_gen_model.inputunderfunclist:valid_batch[7][k][:,:1],\t\n                                                                 Code_gen_model.keep_prob: 1.0,\n                                                                 Code_gen_model.is_train: False\n                                                                 })\n                        sumac += ac1 * (len(valid_batch[0][k]))\n                        length += len(valid_batch[0][k])'''", "\n", "ac1", ",", "loss1", "=", "sess", ".", "run", "(", "[", "Code_gen_model", ".", "accuracy", ",", "Code_gen_model", ".", "correct_prediction", "]", ",", "\n", "feed_dict", "=", "{", "Code_gen_model", ".", "input_NL", ":", "valid_batch", "[", "0", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "input_Tree", ":", "valid_batch", "[", "1", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputY", ":", "valid_batch", "[", "4", "]", "[", "k", "]", ",", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getnumberstack": [[139, 145], ["JavaOut.numberstack.pop", "JavaOut.numberstack.append", "len"], "function", ["None"], ["Code_gen_model", ".", "inputN", ":", "valid_batch", "[", "2", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputP", ":", "valid_batch", "[", "3", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputparentlist", ":", "valid_batch", "[", "5", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputrulelist", ":", "valid_batch", "[", "6", "]", "[", "k", "]", ",", "\n", "Code_gen_model", ".", "inputunderfunclist", ":", "valid_batch", "[", "7", "]", "[", "k", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "1.0", ",", "\n", "Code_gen_model", ".", "is_train", ":", "False", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model_func": [[147, 152], ["os.path.exists", "tensorflow.train.Saver", "tf.train.Saver.restore", "print", "tensorflow.train.latest_checkpoint"], "function", ["None"], ["res", ".", "extend", "(", "loss1", ".", "tolist", "(", ")", ")", "\n", "ac", "+=", "ac1", ";", "\n", "#ac = sumac / length", "\n", "", "ac", "/=", "len", "(", "valid_batch", "[", "0", "]", ")", "\n", "card", "=", "get_card", "(", "res", ")", "\n", "#loss = 0.0", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model_var": [[153, 161], ["os.path.exists", "tensorflow.train.Saver", "tf.train.Saver.restore", "print", "session.run", "print", "tensorflow.train.latest_checkpoint", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run"], ["strs", "=", "str", "(", "ac", ")", "+", "\" \"", "+", "str", "(", "card", ")", "+", "\"\\n\"", "\n", "f", ".", "write", "(", "strs", ")", "\n", "f", ".", "flush", "(", ")", "\n", "print", "(", "\"current accuracy \"", "+", "\n", "str", "(", "ac", ")", "+", "\" card is \"", "+", "str", "(", "card", ")", ")", "\n", "if", "card", ">", "best_card", ":", "\n", "                        ", "best_card", "=", "card", "\n", "best_accuracy", "=", "ac", "\n", "save_model", "(", "sess", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model": [[162, 170], ["os.path.exists", "tensorflow.train.Saver", "tf.train.Saver.restore", "print", "session.run", "print", "tensorflow.train.latest_checkpoint", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run"], ["print", "(", "\"find the better accuracy \"", "+", "\n", "str", "(", "best_accuracy", ")", "+", "\"in echos \"", "+", "str", "(", "i", ")", ")", "\n", "", "elif", "card", "==", "best_card", ":", "\n", "                        ", "if", "(", "ac", ">", "best_accuracy", ")", ":", "\n", "                            ", "best_card", "=", "card", "\n", "best_accuracy", "=", "ac", "\n", "save_model", "(", "sess", ",", "1", ")", "\n", "print", "(", "\"find the better accuracy \"", "+", "\n", "str", "(", "best_accuracy", ")", "+", "\"in echos \"", "+", "str", "(", "i", ")", ")", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.save_model": [[172, 175], ["tensorflow.train.Saver", "tf.train.Saver.save", "str"], "function", ["None"], ["Code_gen_model", ".", "input_Tree", ":", "batch", "[", "1", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputY", ":", "batch", "[", "4", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputN", ":", "batch", "[", "2", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputP", ":", "batch", "[", "3", "]", "[", "j", "]", ",", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run": [[177, 248], ["code_generate_model.code_gen_model", "get_valid_batch", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "open", "open.close", "print", "tensorflow.Session", "run.create_model", "range", "get_train_batch", "range", "code_generate_model.code_gen_model.optim.run", "len", "print", "code_generate_model.code_gen_model.accuracy.eval", "code_generate_model.code_gen_model.loss.eval", "open.write", "print", "run.save_model", "print", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_valid_batch", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.model.resolve_data.get_train_batch", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.run", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.save_model"], ["Code_gen_model", ".", "inputrulelist", ":", "batch", "[", "6", "]", "[", "j", "]", ",", "\n", "Code_gen_model", ".", "inputunderfunclist", ":", "batch", "[", "7", "]", "[", "j", "]", "[", ":", ",", ":", "1", "]", ",", "\n", "Code_gen_model", ".", "keep_prob", ":", "0.5", ",", "\n", "Code_gen_model", ".", "is_train", ":", "True", "\n", "}", ")", "\n", "# print(eval(tmpy, \"data/q_a_test\"))", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "print", "(", "\"training finish\"", ")", "\n", "return", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "NL_vocabu_size", "\n", "global", "Tree_vocabu_size", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "np", ".", "nan", ")", "\n", "# ReadRule()", "\n", "if", "sys", ".", "argv", "[", "1", "]", "==", "\"train\"", ":", "\n", "        ", "print", "(", "\"detar data\"", ")", "\n", "os", ".", "system", "(", "\"tar -zxvf data_\"", "+", "sys", ".", "argv", "[", "3", "]", "+", "\".tar.gz\"", ")", "\n", "global", "classnum", "\n", "global", "card_number", "\n", "card_number", "=", "loadcardnum", "(", ")", "\n", "#os.system(\"python3 readcard.py train \" + sys.argv[2])", "\n", "classnum", "=", "readrule", "(", ")", "\n", "print", "(", "\"eval set: \"", "+", "sys", ".", "argv", "[", "2", "]", ")", "\n", "print", "(", "\"loading data ......\"", ")", "\n", "resolve_data", "(", ")", "\n", "NL_vocabu_size", "=", "len", "(", "vocabulary", ")", "\n", "Tree_vocabu_size", "=", "len", "(", "tree_vocabulary", ")", "\n", "print", "(", "\"finish!\"", ")", "\n", "run", "(", ")", "\n", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"test\"", ":", "\n", "        ", "test", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"error\"", ")", "\n", "# predict()", "\n", "\n", "\n", "", "", "main", "(", ")", "\n", ""]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc": [[251, 269], ["open", "open.readline", "eval", "open.close", "open", "open.readline", "eval"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc_func": [[271, 283], ["open", "open.readline", "eval", "open", "open.readline", "eval"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc_var": [[287, 299], ["open", "open.readline", "eval", "open", "open.readline", "eval"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix_func": [[303, 312], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix_var": [[313, 322], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix": [[323, 332], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func": [[333, 340], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var": [[341, 348], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func2": [[349, 358], ["numpy.zeros", "range", "min", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var2": [[359, 368], ["numpy.zeros", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix": [[369, 376], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix2": [[377, 386], ["numpy.zeros", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix": [[387, 395], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix_var": [[397, 405], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix_func": [[407, 415], ["numpy.zeros", "NL.split", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getJavaOut": [[443, 456], ["open", "open.readlines", "open.close", "run.Javaoutput", "len", "run.Javaoutput", "len", "run.Javaoutput", "len", "run.Javaoutput"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getnode_gen": [[458, 498], ["str().split", "range", "str().split", "str().split", "str().split", "range", "ret.append", "ret.append", "ret.append", "len", "len", "len", "str", "str", "str", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getlistDeep_all": [[499, 510], ["ne.append", "ne.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.cov": [[511, 525], ["tree.split", "run.getlistDeep_all", "range", "ans.replace", "len"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getlistDeep_all"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.back": [[526, 531], ["ret.append", "run.cov"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.cov"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction": [[532, 588], ["run.NL2matrix", "run.getnode_gen", "run.back", "print", "run.Tree2matrix", "run.Root2matrix", "run.Tree2matrix", "run.Tree2matrix", "copy.deepcopy", "run.addfeature", "run.Tree2matrix2", "numpy.zeros", "range", "Code_gen_model.y_result.eval", "len", "numpy.zeros", "len", "numpy.zeros", "len", "numpy.zeros", "FuncList.append", "len", "treeset[].split", "run.addfeature"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getnode_gen", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.back", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfeature", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix2", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfeature"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction_var": [[589, 621], ["run.NL2matrix_var", "back.append", "back.append", "back.append", "run.back", "run.Tree2matrix_var", "run.Root2matrix_var", "numpy.zeros", "range", "run.Tree2matrix_var", "run.Tree2matrix_var", "run.addfeature", "run.Tree2matrix_var2", "Code_gen_model.y_result.eval", "len", "FuncList.append", "code_generate_model.code_gen_model"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.back", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfeature", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_var2"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction_func": [[625, 660], ["run.NL2matrix_func", "back.append", "back.append", "back.append", "run.back", "run.Tree2matrix_func", "run.Root2matrix_func", "numpy.zeros", "range", "run.Tree2matrix_func", "run.Tree2matrix_func", "run.addfeature", "run.Tree2matrix_func2", "Code_gen_model.y_result.eval", "len", "FuncList.append", "code_generate_model.code_gen_model"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.back", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfeature", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix_func2"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadRule": [[670, 681], ["open", "open.readlines", "[].split", "Rule.append", "gen.append", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadGenRule": [[685, 691], ["open", "open.readlines", "Func.append", "str().replace", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadVarRule": [[692, 698], ["open", "open.readlines", "Var.append", "str().replace", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.WriteJavaIn": [[701, 712], ["open", "open.write", "open.write", "open.write", "open.write", "open.close", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.isfunc": [[714, 732], ["str().split", "range", "len", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfunc": [[734, 755], ["str().split", "range", "len", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.findfather": [[758, 775], ["str().split", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfuncdef": [[776, 799], ["str().split", "range", "len", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfeature": [[802, 818], ["str().split", "range", "len", "run.findfather", "str", "JavaOut.FuncDict.keys", "flist.append"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.findfather"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.BeamSearch": [[834, 1106], ["run.getJavaOut", "copy.deepcopy", "copy.deepcopy", "queue.PriorityQueue", "print", "print", "queue.PriorityQueue", "run.getAction", "range", "sorted", "range", "Q.PriorityQueue.get", "Beam.append", "run.NL2matrix", "run.Tree2matrix", "run.Root2matrix", "numpy.zeros", "numpy.zeros", "range", "open", "open.close", "str", "Q.PriorityQueue.put", "int", "len", "int", "run.WriteJavaIn", "run.getJavaOut", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "Q.PriorityQueue.empty", "len", "len", "numpy.zeros", "open.write", "open.write", "open.write", "open.write", "sorted.append", "max", "os.system", "print", "str().split", "range", "str", "len", "Q.PriorityQueue.put", "str", "str", "str().replace", "run.isfunc", "len", "getJavaOut.RuleList.append", "Q.PriorityQueue.put", "run.getAction_func", "range", "run.getAction_var", "range", "str", "int", "run.getJavaOut", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "getJavaOut.RuleList.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "str().replace", "run.addfunc", "str().replace", "str().replace", "Q.PriorityQueue.put", "int", "run.getJavaOut", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "getJavaOut.RuleList.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "str().replace", "run.addfuncdef", "str().replace", "str().replace", "Q.PriorityQueue.put", "len", "getJavaOut.FuncList.append", "run.getnumberstack", "run.line2word_var", "len", "str", "str", "str", "str", "str", "str", "getJavaOut.VarList.append", "getJavaOut.VarList.append"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getJavaOut", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.NL2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Tree2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.Root2matrix", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.WriteJavaIn", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getJavaOut", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.isfunc", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getAction_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getJavaOut", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfunc", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.getJavaOut", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.addfuncdef", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.getnumberstack", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.line2word_var"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.predict": [[1108, 1188], ["run.loadvoc", "run.loadvoc_func", "run.loadvoc_var", "run.ReadRule", "run.ReadGenRule", "run.ReadVarRule", "tensorflow.Graph", "tensorflow.Graph", "tensorflow.Graph", "len", "len", "len", "len", "len", "len", "print", "tensorflow.ConfigProto", "tf.Graph.as_default", "code_generate_model.code_gen_model", "tf.Graph.as_default", "code_generate_model.code_gen_model", "tf.Graph.as_default", "code_generate_model.code_gen_model", "tensorflow.Session", "run.create_model", "tensorflow.Session", "run.create_model_func", "tensorflow.Session", "run.create_model_var", "print", "range", "open", "print", "open.close", "open", "print", "open.close", "run.readbacklist", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "run.BeamSearch", "print", "os.path.exists", "open.readline", "os.path.exists", "open.readline", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.loadvoc_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadRule", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadGenRule", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.ReadVarRule", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model_func", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.create_model_var", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.readbacklist", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.BeamSearch"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.main": [[1190, 1197], ["os.system", "os.system", "print", "run.predict"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.predict.run.predict"], []], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.tree2code.outputt": [[7, 13], ["range"], "function", ["None"], ["def", "outputt", "(", "number", ")", ":", "\n", "    ", "st", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "# print(\"\\t\",end=\"\")", "\n", "        ", "st", "+=", "\"\\t\"", "\n", "", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.nltkbleu.outputt": [[9, 15], ["range"], "function", ["None"], ["def", "outputt", "(", "number", ")", ":", "\n", "    ", "st", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "# print(\"\\t\",end=\"\")", "\n", "        ", "st", "+=", "\"\\t\"", "\n", "", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.findtheson": [[4, 19], ["output.append"], "function", ["None"], ["def", "findtheson", "(", "node", ")", ":", "\n", "    ", "output", "=", "[", "]", "\n", "count", "=", "0", "\n", "site", "=", "0", "\n", "for", "i", "in", "node", "[", "1", ":", "]", ":", "\n", "        ", "site", "+=", "1", "\n", "if", "i", "==", "\"^\"", ":", "\n", "            ", "count", "-=", "1", "\n", "", "else", ":", "\n", "            ", "count", "+=", "1", "\n", "", "if", "count", "<", "0", ":", "\n", "            ", "break", "\n", "", "elif", "count", "==", "1", "and", "i", "!=", "\"^\"", ":", "\n", "            ", "output", ".", "append", "(", "site", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.ast2code": [[20, 206], ["ast2code.findtheson", "len", "range", "ans.replace.replace", "ast2code.ast2code", "len", "ans.replace.replace().replace().replace", "len", "ast2code.ast2code", "ast2code.ast2code", "ans.replace.replace().replace", "len", "ans.replace.replace", "len"], "function", ["home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.findtheson", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.ast2code", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.ast2code", "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.ast2code"], ["", "def", "ast2code", "(", "ast", ",", "d", ",", "fa", ")", ":", "\n", "# print(d)", "\n", "    ", "son", "=", "findtheson", "(", "ast", ")", "\n", "#for s in son:", "\n", "#    print (\"son of \" + ast[0] + \" : \" + ast[s])", "\n", "start", "=", "\"\"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "ans", "=", "\"\"", "\n", "\n", "if", "ast", "[", "0", "]", "==", "\"ClassDef\"", ":", "\n", "# print(d)", "\n", "        ", "start", "=", "\"class \"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"bases\"", ":", "\n", "        ", "start", "=", "\"(\"", "\n", "mid", "=", "\", \"", "\n", "end", "=", "\" ) : \"", "\n", "if", "fa", "==", "\"If\"", ":", "\n", "            ", "start", "=", "\" \"", "\n", "end", "=", "\" : \"", "\n", "\n", "", "", "elif", "ast", "[", "0", "]", "==", "\"FunctionDef\"", ":", "\n", "\n", "        ", "start", "=", "\"def \"", "\n", "mid", "=", "\" :\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"args\"", "or", "ast", "[", "0", "]", "==", "\"keywords\"", ":", "\n", "        ", "start", "=", "\"(\"", "\n", "mid", "=", "\", \"", "\n", "end", "=", "\")\"", "\n", "if", "fa", "==", "\"Lambda\"", "and", "len", "(", "son", ")", "<=", "1", ":", "\n", "            ", "start", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "", "elif", "ast", "[", "0", "]", "==", "\"body\"", ":", "\n", "# print(d)", "\n", "        ", "start", "=", "\"\"", "\n", "mid", "=", "\"\\n\"", "+", "d", "*", "'    '", "\n", "end", "=", "\"\\n\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"If\"", ":", "\n", "        ", "start", "=", "\"if \"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"For\"", ":", "\n", "        ", "start", "=", "\"for \"", "\n", "mid", "=", "\" \"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"iter\"", ":", "\n", "        ", "start", "=", "\"in \"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\":\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"While\"", ":", "\n", "        ", "start", "=", "\"while \"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"AugAssign\"", ":", "\n", "        ", "mid", "=", "\"= \"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"test\"", ":", "\n", "        ", "start", "=", "\"(\"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"):\"", "\n", "if", "fa", "==", "\"If\"", ":", "\n", "            ", "start", "=", "\" \"", "\n", "end", "=", "\" : \"", "\n", "\n", "", "", "elif", "ast", "[", "0", "]", "==", "\"attr\"", ":", "\n", "        ", "start", "=", "\".\"", "\n", "mid", "=", "\"\"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"keyword\"", ":", "\n", "        ", "start", "=", "\"\"", "\n", "mid", "=", "\" = \"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Return\"", ":", "\n", "        ", "start", "=", "\"return \"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"orelse\"", "and", "len", "(", "son", ")", ">", "0", ":", "\n", "        ", "start", "=", "\"\\n\"", "+", "d", "*", "'    '", "+", "\"else : \"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"List\"", ":", "\n", "        ", "start", "=", "\"[\"", "\n", "mid", "=", "\", \"", "\n", "end", "=", "\"]\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"slice\"", ":", "\n", "        ", "start", "=", "\"[\"", "\n", "end", "=", "\"]\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"elts\"", ":", "\n", "        ", "start", "=", "\"\"", "\n", "mid", "=", "\", \"", "\n", "end", "=", "\"\"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"asname\"", ":", "\n", "        ", "start", "=", "\" as \"", "\n", "if", "ast", "[", "son", "[", "0", "]", "]", ":", "\n", "            ", "return", "\"\"", "\n", "\n", "", "", "elif", "ast", "[", "0", "]", "==", "\"ImportFrom\"", ":", "\n", "        ", "start", "=", "\"from \"", "\n", "mid", "=", "\" import \"", "\n", "end", "=", "\"\"", "\n", "son", "=", "son", "[", ":", "-", "1", "]", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Assign\"", ":", "\n", "        ", "start", "=", "\"\\n\"", "+", "d", "*", "'    '", "\n", "mid", "=", "\" = \"", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Lambda\"", ":", "\n", "        ", "start", "=", "\" lambda  \"", "\n", "mid", "=", "\" : \"", "\n", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"values\"", "and", "(", "fa", "==", "\"or\"", "or", "fa", "==", "\"and\"", ")", ":", "\n", "        ", "mid", "=", "\" \"", "+", "fa", "+", "\" \"", "\n", "\n", "", "nd", "=", "d", "\n", "if", "ast", "[", "0", "]", "==", "\"body\"", ":", "\n", "        ", "nd", "=", "d", "+", "1", "\n", "\n", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"BoolOp\"", ":", "\n", "        ", "ast", "[", "0", "]", "=", "ast2code", "(", "ast", "[", "son", "[", "0", "]", ":", "]", ",", "nd", ",", "ast", "[", "0", "]", ")", "\n", "\n", "", "if", "len", "(", "son", ")", "==", "0", ":", "\n", "        ", "if", "ast", "[", "0", "]", "==", "\"keywords\"", "or", "ast", "[", "0", "]", "==", "\"args\"", ":", "\n", "            ", "return", "\"()\"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"orelse\"", ":", "\n", "            ", "return", "\"\"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Add\"", ":", "\n", "            ", "return", "\" +\"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Lt\"", ":", "\n", "            ", "return", "\" < \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"LtE\"", ":", "\n", "            ", "return", "\" <= \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"And\"", ":", "\n", "            ", "return", "\"and\"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Or\"", ":", "\n", "            ", "return", "\"or\"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Gt\"", ":", "\n", "            ", "return", "\" > \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"GtE\"", ":", "\n", "            ", "return", "\" >= \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Eq\"", ":", "\n", "            ", "return", "\" == \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Is\"", ":", "\n", "            ", "return", "\" is \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"Not\"", ":", "\n", "            ", "return", "\" not \"", "\n", "", "elif", "ast", "[", "0", "]", "==", "\"IsNot\"", ":", "\n", "            ", "return", "\" is not \"", "\n", "", "return", "ast", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "son", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", "and", "(", "ast", "[", "0", "]", "==", "\"and\"", "or", "ast", "[", "0", "]", "==", "\"or\"", ")", ":", "\n", "                ", "continue", "\n", "", "if", "i", ">", "0", ":", "\n", "                ", "if", "ast", "[", "0", "]", "==", "\"AugAssign\"", "and", "i", "==", "1", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "ans", "+=", "mid", "\n", "", "", "if", "(", "ast", "[", "0", "]", "==", "\"keywords\"", "or", "ast", "[", "0", "]", "==", "\"body\"", ")", "and", "i", "==", "0", ":", "\n", "                ", "ans", "+=", "mid", "\n", "", "if", "i", "+", "1", ">=", "len", "(", "son", ")", ":", "\n", "                ", "ans", "+=", "ast2code", "(", "ast", "[", "son", "[", "i", "]", ":", "]", ",", "nd", ",", "ast", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "ans", "+=", "ast2code", "(", "ast", "[", "son", "[", "i", "]", ":", "son", "[", "i", "+", "1", "]", "]", ",", "nd", ",", "ast", "[", "0", "]", ")", "\n", "\n", "", "", "", "if", "fa", "==", "\"Str\"", ":", "\n", "        ", "start", "+=", "\"\\\"\"", "\n", "end", "=", "\"\\\"\"", "+", "end", "\n", "ans", "=", "ans", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", "\n", "#ans = ans.replace(\" p)\",\" player)\")", "\n", "", "return", "start", "+", "ans", ".", "replace", "(", "\")(\"", ",", "\"\"", ")", ".", "replace", "(", "\":(\"", ",", "\"(\"", ")", ".", "replace", "(", "\"(,\"", ",", "\"(\"", ")", "+", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.ast2code.tokenize_for_bleu_eval": [[209, 218], ["re.sub", "re.sub", "code.replace.replace", "code.replace.replace", "code.replace.split"], "function", ["None"], ["def", "tokenize_for_bleu_eval", "(", "code", ")", ":", "\n", "    ", "code", "=", "re", ".", "sub", "(", "r'([^A-Za-z0-9_])'", ",", "r' \\1 '", ",", "code", ")", "\n", "#code = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', code)", "\n", "code", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "code", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\"'", ",", "'`'", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\\''", ",", "'`'", ")", "\n", "tokens", "=", "[", "t", "for", "t", "in", "code", ".", "split", "(", "' '", ")", "if", "t", "]", "\n", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.line2word.__init__": [[2, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "f", ",", "gf", ",", "ggf", ",", "nl", ",", "ori", ")", ":", "\n", "        ", "self", ".", "f", "=", "f", "\n", "self", ".", "gf", "=", "gf", "\n", "self", ".", "ggf", "=", "ggf", "\n", "self", ".", "nl", "=", "nl", "\n", "self", ".", "ori", "=", "ori", "\n", "self", ".", "used", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.readbacklist": [[14, 29], ["open", "open.readlines", "open.close", "[].replace().split", "len", "numberstack.append", "gener.line2word", "list2wordlist.append", "str", "[].replace", "str"], "function", ["None"], ["def", "readbacklist", "(", "Nl_num", ")", ":", "\n", "    ", "global", "numberstack", "\n", "global", "list2wordlist", "\n", "numberstack", "=", "[", "]", "\n", "f", "=", "open", "(", "\"../test_output_our_ast_back_past/\"", "+", "str", "(", "Nl_num", ")", "+", "\".txt\"", ",", "\"r\"", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "list2wordlist", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "st", "=", "str", "(", "line", ")", "[", ":", "-", "1", "]", ".", "replace", "(", "\"_fu_nc_na_me\"", ",", "\"\"", ")", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "st", ")", "==", "1", ":", "\n", "            ", "numberstack", ".", "append", "(", "st", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "word", "=", "line2word", "(", "st", "[", "0", "]", ",", "st", "[", "1", "]", ",", "st", "[", "2", "]", ",", "st", "[", "3", "]", ",", "st", "[", "4", "]", ")", "\n", "list2wordlist", ".", "append", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.line2word_var": [[31, 61], ["None"], "function", ["None"], ["", "", "", "def", "line2word_var", "(", "line", ",", "father", ",", "list2word", ")", ":", "\n", "    ", "for", "l", "in", "list2word", ":", "\n", "        ", "if", "l", ".", "nl", "==", "line", ":", "\n", "            ", "if", "l", ".", "f", "==", "father", "and", "l", ".", "used", "==", "False", ":", "\n", "                ", "l", ".", "used", "=", "True", "\n", "return", "l", ".", "ori", "\n", "\n", "", "", "", "for", "l", "in", "list2word", ":", "\n", "        ", "if", "l", ".", "nl", "==", "line", ":", "\n", "            ", "if", "l", ".", "used", "==", "False", ":", "\n", "                ", "l", ".", "used", "=", "True", "\n", "return", "l", ".", "ori", "\n", "\n", "", "", "", "for", "l", "in", "list2word", ":", "\n", "        ", "if", "l", ".", "nl", "==", "line", ":", "\n", "            ", "l", ".", "used", "=", "False", "\n", "\n", "", "", "for", "l", "in", "list2word", ":", "\n", "        ", "if", "l", ".", "nl", "==", "line", ":", "\n", "            ", "if", "l", ".", "f", "==", "father", "and", "l", ".", "used", "==", "False", ":", "\n", "                ", "l", ".", "used", "=", "True", "\n", "return", "l", ".", "ori", "\n", "\n", "", "", "", "for", "l", "in", "list2word", ":", "\n", "        ", "if", "l", ".", "nl", "==", "line", ":", "\n", "            ", "if", "l", ".", "used", "==", "False", ":", "\n", "                ", "l", ".", "used", "=", "True", "\n", "return", "l", ".", "ori", "\n", "\n", "", "", "", "return", "\"-12345\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.gener.getnumberstack": [[63, 70], ["numberstack.pop", "numberstack.append", "len"], "function", ["None"], ["", "def", "getnumberstack", "(", "numberstack", ")", ":", "\n", "    ", "if", "len", "(", "numberstack", ")", "==", "0", ":", "\n", "        ", "return", "\"-12345\"", "\n", "\n", "", "now", "=", "numberstack", ".", "pop", "(", "0", ")", "\n", "numberstack", ".", "append", "(", "now", ")", "\n", "return", "now", "\n", "\n"]], "home.repos.pwc.inspect_result.zysszy_GrammarCNN.test_bleu.d2code.outputt": [[7, 13], ["range"], "function", ["None"], ["def", "outputt", "(", "number", ")", ":", "\n", "    ", "st", "=", "\"\"", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "# print(\"\\t\",end=\"\")", "\n", "        ", "st", "+=", "\"\\t\"", "\n", "", "return", "st", "\n", "\n"]]}