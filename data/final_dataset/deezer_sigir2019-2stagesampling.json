{"home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.echonest._filter_data": [[16, 33], ["[].tolist", "data[].isin", "data[].groupby().count().reset_index().rename().query", "data[].groupby().count().reset_index().rename", "data[].groupby().count().reset_index", "data[].groupby().count", "data[].groupby"], "function", ["None"], ["def", "_filter_data", "(", "data", ",", "key", ",", "min_inter", ")", ":", "\n", "    ", "\"\"\"\n    Filter out data by minimum number of items or users\n    :param data: input dataframe\n    :param key: user_id | item_id\n    :param min_inter:\n    :return: filtered data\n    \"\"\"", "\n", "notkey", "=", "'user_ID'", "if", "key", "==", "'song_ID'", "else", "'song_ID'", "\n", "min_inter_data", "=", "data", "[", "[", "'user_ID'", ",", "'song_ID'", "]", "]", ".", "groupby", "(", "key", ")", ".", "count", "(", ")", ".", "reset_index", "(", ")", ".", "rename", "(", "columns", "=", "{", "notkey", ":", "'count'", "}", ")", ".", "query", "(", "'count >= %i'", "%", "min_inter", ")", "[", "key", "]", ".", "tolist", "(", ")", "\n", "min_inter_data", "=", "{", "rid", ":", "1", "for", "rid", "in", "min_inter_data", "}", "\n", "data", "=", "data", "[", "data", "[", "key", "]", ".", "isin", "(", "min_inter_data", ")", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.echonest._build_interactions": [[35, 61], ["logger.debug", "echonest._filter_data", "_filter_data.user_ID.unique", "_filter_data.song_ID.unique", "_filter_data.user_ID.apply", "_filter_data.song_ID.apply", "scipy.dok_matrix", "enumerate", "enumerate", "len", "len", "_filter_data.user_id_map.tolist", "_filter_data.item_id_map.tolist"], "function", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.echonest._filter_data"], ["", "def", "_build_interactions", "(", "data", ",", "min_interactions", ")", ":", "\n", "    ", "\"\"\"\n    Build interaction matrix\n    :param data:\n    :param min_interactions:\n    :return:\n    \"\"\"", "\n", "logger", ".", "debug", "(", "'Filter users has less than {} '", "\n", "'interactions'", ".", "format", "(", "min_interactions", ")", ")", "\n", "data", "=", "_filter_data", "(", "data", ",", "'user_ID'", ",", "min_interactions", ")", "\n", "\n", "# create mappings", "\n", "user_ids", "=", "data", ".", "user_ID", ".", "unique", "(", ")", "\n", "item_ids", "=", "data", ".", "song_ID", ".", "unique", "(", ")", "\n", "user_id_map", "=", "{", "uid", ":", "idx", "for", "idx", ",", "uid", "in", "enumerate", "(", "user_ids", ")", "}", "\n", "item_id_map", "=", "{", "iid", ":", "idx", "for", "idx", ",", "iid", "in", "enumerate", "(", "item_ids", ")", "}", "\n", "\n", "data", ".", "loc", "[", ":", ",", "'user_id_map'", "]", "=", "data", ".", "user_ID", ".", "apply", "(", "lambda", "x", ":", "user_id_map", "[", "x", "]", ")", "\n", "data", ".", "loc", "[", ":", ",", "'item_id_map'", "]", "=", "data", ".", "song_ID", ".", "apply", "(", "lambda", "x", ":", "item_id_map", "[", "x", "]", ")", "\n", "\n", "# convert to sparse and save", "\n", "interaction_mat", "=", "sp", ".", "dok_matrix", "(", "(", "len", "(", "user_ids", ")", ",", "len", "(", "item_ids", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "interaction_mat", "[", "data", ".", "user_id_map", ".", "tolist", "(", ")", ",", "data", ".", "item_id_map", ".", "tolist", "(", ")", "]", "=", "1", "\n", "\n", "return", "interaction_mat", ",", "user_ids", ",", "item_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.echonest.fetch_echonest": [[63, 111], ["os.path.join", "os.path.join", "os.path.join", "logger.debug", "logger.debug", "logger.debug", "logger.debug", "pandas.read_csv", "echonest._build_interactions", "scipy.save_npz", "numpy.savez", "scipy.load_npz", "numpy.load", "os.path.exists", "os.path.exists", "sp.load_npz.tocsr", "len", "len", "sp.load_npz.count_nonzero", "float", "len", "len", "sp.load_npz.count_nonzero"], "function", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.echonest._build_interactions"], ["", "def", "fetch_echonest", "(", "data_home", ",", "min_playcount", "=", "5", ",", "min_interactions", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Fetch echonest dataset\n    :param data_home:\n    :param min_playcount:\n    :param min_interactions:\n    :return:\n    \"\"\"", "\n", "echo_data_path", "=", "os", ".", "path", ".", "join", "(", "data_home", ",", "'train_triplets.txt'", ")", "\n", "echo_interactions_path", "=", "os", ".", "path", ".", "join", "(", "\n", "data_home", ",", "\n", "'interactions_pltcnt{}_minint{}.npz'", ".", "format", "(", "\n", "min_playcount", ",", "min_interactions", ")", ")", "\n", "echo_user_item_ids_path", "=", "os", ".", "path", ".", "join", "(", "\n", "data_home", ",", "\n", "'user_item_ids_pltcnt{}_minint{}.npz'", ".", "format", "(", "\n", "min_playcount", ",", "min_interactions", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "echo_interactions_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "echo_user_item_ids_path", ")", ":", "\n", "# read raw data", "\n", "        ", "data", "=", "pd", ".", "read_csv", "(", "echo_data_path", ",", "\n", "sep", "=", "'\\t'", ",", "\n", "names", "=", "[", "'user_ID'", ",", "'song_ID'", ",", "'play_count'", "]", ")", "\n", "# filter out only tracks with playcount more than min_playcount", "\n", "data", "=", "data", "[", "data", ".", "play_count", ">=", "min_playcount", "]", "\n", "interactions", ",", "user_ids", ",", "item_ids", "=", "_build_interactions", "(", "data", ",", "\n", "min_interactions", ")", "\n", "\n", "sp", ".", "save_npz", "(", "echo_interactions_path", ",", "interactions", ".", "tocsr", "(", ")", ")", "\n", "np", ".", "savez", "(", "echo_user_item_ids_path", ",", "user_ids", "=", "user_ids", ",", "item_ids", "=", "item_ids", ")", "\n", "", "else", ":", "\n", "        ", "interactions", "=", "sp", ".", "load_npz", "(", "echo_interactions_path", ")", "\n", "user_item_ids", "=", "np", ".", "load", "(", "echo_user_item_ids_path", ")", "\n", "user_ids", "=", "user_item_ids", "[", "'user_ids'", "]", "\n", "item_ids", "=", "user_item_ids", "[", "'item_ids'", "]", "\n", "\n", "", "logger", ".", "debug", "(", "'Number of users: {}'", ".", "format", "(", "len", "(", "user_ids", ")", ")", ")", "\n", "logger", ".", "debug", "(", "'Number of items: {}'", ".", "format", "(", "len", "(", "item_ids", ")", ")", ")", "\n", "logger", ".", "debug", "(", "\n", "'Number of interactions: {}'", ".", "format", "(", "interactions", ".", "count_nonzero", "(", ")", ")", ")", "\n", "logger", ".", "debug", "(", "'Mapping interactions density: {}'", ".", "format", "(", "\n", "float", "(", "interactions", ".", "count_nonzero", "(", ")", ")", "*", "100", "/", "(", "\n", "len", "(", "user_ids", ")", "*", "len", "(", "item_ids", ")", ")", ")", ")", "\n", "return", "{", "\n", "'interactions'", ":", "interactions", ",", "\n", "'user_ids'", ":", "user_ids", ",", "\n", "'item_ids'", ":", "item_ids", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.datasets.__init__.split_data": [[10, 63], ["numpy.random.seed", "scipy.dok_matrix", "scipy.dok_matrix", "scipy.dok_matrix", "logger.info", "collections.defaultdict", "tqdm.tqdm", "logger.info", "numpy.asarray", "user_item_dict[].add", "numpy.arange", "list", "sp.dok_matrix.tocsr", "sp.dok_matrix.tocsr", "sp.dok_matrix.tocsr", "interactions.nonzero", "len", "sum", "numpy.random.shuffle", "int", "int", "sp.dok_matrix.count_nonzero", "sp.dok_matrix.count_nonzero", "sp.dok_matrix.count_nonzero", "sum", "sum", "len", "len"], "function", ["None"], ["def", "split_data", "(", "interactions", ",", "split_ratio", "=", "(", "3", ",", "1", ",", "1", ")", ",", "random_seed", "=", "42", ")", ":", "\n", "    ", "\"\"\"\n    Split interactions data into train/validation/test set.\n\n    Parameters\n    ----------\n    interactions: sp.dok_matrix\n        The total interactions matrix in sparse format\n    split_ratio: tuple\n        The ratio for each set\n    random_seed: int\n        The random seed\n\n    Returns\n    -------\n        A tuple of (train, valid, test) sets.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "train_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "valid_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "test_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "\n", "logger", ".", "info", "(", "'Get user item positive interactions dict'", ")", "\n", "user_item_pairs", "=", "np", ".", "asarray", "(", "interactions", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "user_item_dict", "=", "defaultdict", "(", "set", ")", "\n", "for", "uid", ",", "iid", "in", "user_item_pairs", ":", "\n", "        ", "user_item_dict", "[", "uid", "]", ".", "add", "(", "iid", ")", "\n", "\n", "", "description", "=", "'Split data into train/valid/test'", "\n", "for", "uid", "in", "tqdm", "(", "np", ".", "arange", "(", "interactions", ".", "shape", "[", "0", "]", ")", ",", "desc", "=", "description", ")", ":", "\n", "        ", "items", "=", "list", "(", "user_item_dict", "[", "uid", "]", ")", "\n", "if", "len", "(", "items", ")", ">=", "sum", "(", "split_ratio", ")", ":", "\n", "# shuffle items first", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "items", ")", "\n", "\n", "# split", "\n", "train_count", "=", "int", "(", "len", "(", "items", ")", "*", "split_ratio", "[", "0", "]", "/", "sum", "(", "split_ratio", ")", ")", "\n", "valid_count", "=", "int", "(", "len", "(", "items", ")", "*", "split_ratio", "[", "1", "]", "/", "sum", "(", "split_ratio", ")", ")", "\n", "\n", "for", "i", "in", "items", "[", "0", ":", "train_count", "]", ":", "\n", "                ", "train_interactions", "[", "uid", ",", "i", "]", "=", "1", "\n", "", "for", "i", "in", "items", "[", "train_count", ":", "train_count", "+", "valid_count", "]", ":", "\n", "                ", "valid_interactions", "[", "uid", ",", "i", "]", "=", "1", "\n", "", "for", "i", "in", "items", "[", "train_count", "+", "valid_count", ":", "]", ":", "\n", "                ", "test_interactions", "[", "uid", ",", "i", "]", "=", "1", "\n", "\n", "", "", "", "logger", ".", "info", "(", "\"{}/{}/{} train/valid/test samples\"", ".", "format", "(", "\n", "train_interactions", ".", "count_nonzero", "(", ")", ",", "\n", "valid_interactions", ".", "count_nonzero", "(", ")", ",", "\n", "test_interactions", ".", "count_nonzero", "(", ")", ")", ")", "\n", "return", "train_interactions", ".", "tocsr", "(", ")", ",", "valid_interactions", ".", "tocsr", "(", ")", ",", "test_interactions", ".", "tocsr", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.experiments.exp_echonest.update_params_from_parser": [[74, 107], ["json.loads().items", "parser.parse_args", "parser.parse_args.__dict__.items", "parser.add_argument", "json.loads", "hasattr", "sampler_params[].items", "params.to_json", "type", "params.set_hparam", "params.add_hparam", "hasattr", "print", "print", "params.set_hparam", "print", "print", "params.add_hparam"], "function", ["None"], ["def", "update_params_from_parser", "(", "params", ",", "parser", ")", ":", "\n", "    ", "\"\"\"\n    Update tensorflow's hparams object using values from\n    python's ArgumentParser.\n\n    Parameters\n    ----------\n    params: tf.contrib.training.python.training.hparam.HParams\n        tensorflow's hparams\n    parser: argparse.ArgumentParser\n        python argparse\n    \"\"\"", "\n", "for", "param_name", ",", "param_value", "in", "json", ".", "loads", "(", "params", ".", "to_json", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"-%s\"", "%", "param_name", ",", "help", "=", "param_name", ",", "\n", "type", "=", "type", "(", "param_value", ")", ",", "default", "=", "param_value", ")", "\n", "", "pargs", "=", "parser", ".", "parse_args", "(", ")", "\n", "for", "k", ",", "v", "in", "pargs", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "!=", "'sampler'", ":", "\n", "            ", "if", "hasattr", "(", "params", ",", "k", ")", ":", "\n", "                ", "params", ".", "set_hparam", "(", "k", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "params", ".", "add_hparam", "(", "k", ",", "v", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "sampler_k", ",", "sampler_v", "in", "sampler_params", "[", "v", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "params", ",", "sampler_k", ")", ":", "\n", "                    ", "print", "(", "sampler_k", ")", "\n", "print", "(", "sampler_v", ")", "\n", "params", ".", "set_hparam", "(", "sampler_k", ",", "sampler_v", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "sampler_k", ")", "\n", "print", "(", "sampler_v", ")", "\n", "params", ".", "add_hparam", "(", "sampler_k", ",", "sampler_v", ")", "\n", "", "", "", "", "return", "params", ",", "pargs", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.experiments.exp_echonest.train_model": [[109, 145], ["scipy.lil_matrix", "tensorflow.reset_default_graph", "tensorflow.Session", "models.triplet.Triplet", "models.triplet.Triplet.build_graph", "samplers.SamplerFactory.generate_sampler", "models.triplet.Triplet.fit", "SamplerFactory.generate_sampler.close"], "function", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.build_graph", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.__init__.SamplerFactory.generate_sampler", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.fit", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.close"], ["", "def", "train_model", "(", "params", ",", "train_interactions", ",", "valid_interactions", ",", "eval_users", ")", ":", "\n", "    ", "\"\"\"\n    Train model\n    :param params:\n    :param train_interactions:\n    :param valid_interactions:\n    :return:\n    \"\"\"", "\n", "train_interactions", "=", "sp", ".", "lil_matrix", "(", "train_interactions", ")", "\n", "\n", "# create a tensorflow session and train model", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "Triplet", "(", "sess", "=", "sess", ",", "params", "=", "params", ")", "\n", "model", ".", "build_graph", "(", ")", "\n", "\n", "extra_sampler_args", "=", "{", "}", "\n", "if", "params", ".", "sampler", "!=", "'uniform'", ":", "\n", "            ", "extra_sampler_args", "[", "'max_count'", "]", "=", "params", ".", "max_count", "\n", "", "if", "params", ".", "sampler", "==", "'spreadout'", ":", "\n", "            ", "extra_sampler_args", "[", "'model'", "]", "=", "model", "\n", "extra_sampler_args", "[", "'embedding_dim'", "]", "=", "params", ".", "embedding_dim", "\n", "extra_sampler_args", "[", "'n_try'", "]", "=", "params", ".", "n_try", "\n", "extra_sampler_args", "[", "'num_neg_candidates'", "]", "=", "params", ".", "num_neg_candidates", "\n", "\n", "", "sampler", "=", "SamplerFactory", ".", "generate_sampler", "(", "\n", "sampler_name", "=", "params", ".", "sampler", ",", "\n", "interactions", "=", "train_interactions", ",", "\n", "n_negatives", "=", "params", ".", "n_negatives", ",", "\n", "batch_size", "=", "params", ".", "batch_size", ",", "\n", "n_workers", "=", "5", ",", "\n", "**", "extra_sampler_args", ")", "\n", "# training the model", "\n", "model", ".", "fit", "(", "sampler", ",", "train_interactions", ",", "valid_interactions", ",", "eval_users", ",", "\n", "metrics", "=", "[", "'ndcg'", ",", "'map'", "]", ",", "k", "=", "50", ")", "\n", "sampler", ".", "close", "(", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.experiments.exp_echonest.get_item_popularity": [[147, 156], ["scipy.lil_matrix", "collections.defaultdict", "enumerate"], "function", ["None"], ["", "def", "get_item_popularity", "(", "interactions", ",", "max_count", "=", "None", ")", ":", "\n", "    ", "interactions", "=", "sp", ".", "lil_matrix", "(", "interactions", ")", "\n", "popularity_dict", "=", "defaultdict", "(", "int", ")", "\n", "for", "uid", ",", "iids", "in", "enumerate", "(", "interactions", ".", "rows", ")", ":", "\n", "        ", "for", "iid", "in", "iids", ":", "\n", "            ", "popularity_dict", "[", "iid", "]", "+=", "1", "\n", "if", "max_count", "is", "not", "None", "and", "popularity_dict", "[", "iid", "]", ">", "max_count", ":", "\n", "                ", "popularity_dict", "[", "iid", "]", "=", "max_count", "\n", "", "", "", "return", "popularity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.experiments.exp_echonest.get_median_rank_recommended_items": [[158, 184], ["scipy.lil_matrix", "max", "tensorflow.reset_default_graph", "numpy.mean", "set", "tensorflow.Session", "models.triplet.Triplet", "logger.info", "toolz.partition_all", "logger.info", "numpy.median", "len", "item_ranks.append", "models.triplet.Triplet.get_recommended_items"], "function", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.get_recommended_items"], ["", "def", "get_median_rank_recommended_items", "(", "train_interactions", ",", "\n", "eval_users", ",", "\n", "item_popularities", ",", "\n", "n_users_in_chunk", ")", ":", "\n", "    ", "train_interactions", "=", "sp", ".", "lil_matrix", "(", "train_interactions", ")", "\n", "max_train_interaction_count", "=", "max", "(", "len", "(", "row", ")", "for", "row", "in", "train_interactions", ".", "rows", ")", "\n", "train_user_items", "=", "{", "u", ":", "set", "(", "train_interactions", ".", "rows", "[", "u", "]", ")", "\n", "for", "u", "in", "eval_users", "if", "train_interactions", ".", "rows", "[", "u", "]", "}", "\n", "\n", "recommended_items", "=", "[", "]", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "model", "=", "Triplet", "(", "sess", "=", "sess", ",", "params", "=", "params", ")", "\n", "logger", ".", "info", "(", "'Get recommended items for users in evaluation'", ")", "\n", "for", "user_chunk", "in", "toolz", ".", "partition_all", "(", "n_users_in_chunk", ",", "eval_users", ")", ":", "\n", "            ", "recommended_items", "=", "recommended_items", "+", "model", ".", "get_recommended_items", "(", "\n", "user_chunk", ",", "train_user_items", ",", "\n", "max_train_interaction_count", ",", "\n", "k", "=", "50", ")", "\n", "", "logger", ".", "info", "(", "'Get rank for recommended items'", ")", "\n", "item_ranks", "=", "[", "]", "\n", "for", "iids", "in", "recommended_items", ":", "\n", "            ", "item_ranks", ".", "append", "(", "[", "item_popularities", "[", "iid", "]", "for", "iid", "in", "iids", "]", ")", "\n", "", "median_ranks", "=", "np", ".", "median", "(", "item_ranks", ",", "axis", "=", "1", ")", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "return", "np", ".", "mean", "(", "median_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.uniform_sampler.UniformSampler._candidate_neg_ids": [[12, 19], ["numpy.arange"], "methods", ["None"], ["def", "_candidate_neg_ids", "(", "self", ",", "pos_ids", ")", ":", "\n", "        ", "\"\"\"\n        Candidate for negative ids\n        :param pos_ids: batch positive ids\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "arange", "(", "self", ".", "interactions", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.uniform_sampler.UniformSampler._negative_sampling": [[20, 30], ["numpy.random.choice", "zip", "range", "enumerate", "len", "len", "numpy.random.choice"], "methods", ["None"], ["", "def", "_negative_sampling", "(", "self", ",", "user_ids", ",", "pos_ids", ",", "neg_ids", ")", ":", "\n", "        ", "neg_samples", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ",", "\n", "size", "=", "(", "len", "(", "pos_ids", ")", ",", "self", ".", "n_negatives", ")", ")", "\n", "\n", "for", "i", ",", "uid", ",", "negatives", "in", "zip", "(", "range", "(", "len", "(", "user_ids", ")", ")", ",", "\n", "user_ids", ",", "neg_samples", ")", ":", "\n", "            ", "for", "j", ",", "neg", "in", "enumerate", "(", "negatives", ")", ":", "\n", "                ", "while", "neg", "in", "self", ".", "user_items", "[", "uid", "]", ":", "\n", "                    ", "neg_samples", "[", "i", ",", "j", "]", "=", "neg", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ")", "\n", "", "", "", "return", "neg_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._get_popularity": [[21, 34], ["logger.debug", "collections.defaultdict", "enumerate", "popularity_dict[].add", "len", "collections.defaultdict.items", "len"], "methods", ["None"], ["@", "classmethod", "\n", "def", "_get_popularity", "(", "cls", ",", "interactions", ",", "max_count", "=", "None", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'Get Item Popularity'", ")", "\n", "popularity_dict", "=", "defaultdict", "(", "set", ")", "\n", "for", "uid", ",", "iids", "in", "enumerate", "(", "interactions", ".", "rows", ")", ":", "\n", "            ", "for", "iid", "in", "iids", ":", "\n", "                ", "popularity_dict", "[", "iid", "]", ".", "add", "(", "uid", ")", "\n", "\n", "", "", "popularity_dict", "=", "{", "\n", "key", ":", "max_count", "if", "max_count", "is", "not", "None", "and", "0", "<", "max_count", "<", "len", "(", "val", ")", "\n", "else", "len", "(", "val", ")", "for", "key", ",", "val", "in", "popularity_dict", ".", "items", "(", ")", "\n", "}", "\n", "return", "popularity_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.__init__": [[35, 77], ["multiprocessing.Queue", "range", "sampler.Sampler.__dict__.update", "set", "sampler.Sampler._get_popularity", "numpy.sum", "numpy.zeros", "range", "sampler.Sampler.processors.append", "sampler.Sampler.processors[].start", "enumerate", "logger.debug", "list", "multiprocessing.Process", "numpy.power", "sampler.Sampler.item_counts.values", "sampler.Sampler.item_counts.items", "float"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._get_popularity"], ["", "def", "__init__", "(", "self", ",", "name", ",", "interactions", ",", "n_negatives", "=", "-", "1", ",", "\n", "batch_size", "=", "None", ",", "n_workers", "=", "5", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "interactions", "=", "interactions", "\n", "self", ".", "n_negatives", "=", "n_negatives", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "neg_alpha", "=", "1.0", "\n", "self", ".", "result_queue", "=", "Queue", "(", "maxsize", "=", "n_workers", "*", "2", ")", "\n", "self", ".", "processors", "=", "[", "]", "\n", "if", "kwargs", "is", "not", "None", ":", "\n", "            ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n", "# user positive item dictionary, use to check", "\n", "# if an item is a positive one", "\n", "", "self", ".", "user_items", "=", "{", "uid", ":", "set", "(", "iids", ")", "for", "uid", ",", "iids", "in", "enumerate", "(", "\n", "self", ".", "interactions", ".", "rows", ")", "}", "\n", "\n", "# get item popularities", "\n", "if", "'pop'", "in", "self", ".", "name", "or", "'spreadout'", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "item_counts", "=", "self", ".", "_get_popularity", "(", "interactions", ",", "\n", "max_count", "=", "self", ".", "max_count", ")", "\n", "\n", "if", "self", ".", "neg_alpha", "!=", "1.0", ":", "\n", "                ", "logger", ".", "debug", "(", "'NEG ALPHA: {}'", ".", "format", "(", "self", ".", "neg_alpha", ")", ")", "\n", "self", ".", "item_counts", "=", "{", "iid", ":", "np", ".", "power", "(", "freq", ",", "self", ".", "neg_alpha", ")", "\n", "for", "iid", ",", "freq", "in", "self", ".", "item_counts", ".", "items", "(", ")", "}", "\n", "\n", "", "total_count", "=", "np", ".", "sum", "(", "list", "(", "self", ".", "item_counts", ".", "values", "(", ")", ")", ")", "\n", "\n", "self", ".", "item_popularities", "=", "np", ".", "zeros", "(", "interactions", ".", "shape", "[", "1", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "iid", "in", "range", "(", "interactions", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "iid", "in", "self", ".", "item_counts", ":", "\n", "                    ", "self", ".", "item_popularities", "[", "iid", "]", "=", "float", "(", "\n", "self", ".", "item_counts", "[", "iid", "]", ")", "/", "total_count", "\n", "", "else", ":", "\n", "                    ", "self", ".", "item_popularities", "[", "iid", "]", "=", "0.0", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "n_workers", ")", ":", "\n", "            ", "self", ".", "processors", ".", "append", "(", "Process", "(", "target", "=", "self", ".", "sampling", ",", "\n", "args", "=", "(", "self", ".", "result_queue", ",", "i", "+", "1", ")", ")", ")", "\n", "self", ".", "processors", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.next_batch": [[78, 84], ["sampler.Sampler.result_queue.get"], "methods", ["None"], ["", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get next batch training samples\n        :return: None\n        \"\"\"", "\n", "return", "self", ".", "result_queue", ".", "get", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.close": [[85, 93], ["p.terminate", "p.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Close the sampler\n        :return: None\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "processors", ":", "\n", "            ", "p", ".", "terminate", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.sampling": [[94, 117], ["numpy.random.RandomState", "int", "numpy.asarray", "numpy.random.RandomState.shuffle", "range", "sampler.Sampler.interactions.nonzero", "len", "sampler.Sampler._batch_sampling", "result_queue.put"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._batch_sampling"], ["", "", "def", "sampling", "(", "self", ",", "result_queue", ",", "random_seed", ")", ":", "\n", "        ", "\"\"\"\n        Sampling a batch of training samples and put it into result_queue\n        :param result_queue:\n        :param random_seed:\n        :return: batch (user, pos_item, neg_items)\n        \"\"\"", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "\n", "# positive user item pairs", "\n", "user_positive_item_pairs", "=", "np", ".", "asarray", "(", "self", ".", "interactions", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "\n", "# number of batch per iteration", "\n", "n_batches_per_epoch", "=", "int", "(", "\n", "len", "(", "user_positive_item_pairs", ")", "/", "self", ".", "batch_size", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "rng", ".", "shuffle", "(", "user_positive_item_pairs", ")", "\n", "# for each batch", "\n", "for", "batch_index", "in", "range", "(", "n_batches_per_epoch", ")", ":", "\n", "                ", "batch_samples", "=", "self", ".", "_batch_sampling", "(", "user_positive_item_pairs", ",", "\n", "batch_index", ")", "\n", "result_queue", ".", "put", "(", "batch_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._batch_sampling": [[118, 138], ["numpy.array", "numpy.array", "sampler.Sampler._candidate_neg_ids", "sampler.Sampler._negative_sampling"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._candidate_neg_ids", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._negative_sampling"], ["", "", "", "def", "_batch_sampling", "(", "self", ",", "user_positive_item_pairs", ",", "batch_index", ")", ":", "\n", "        ", "batch_user_anchor_items_pairs", "=", "user_positive_item_pairs", "[", "\n", "batch_index", "*", "self", ".", "batch_size", ":", "\n", "(", "batch_index", "+", "1", ")", "*", "self", ".", "batch_size", ",", ":", "]", "\n", "\n", "# generate batch users", "\n", "batch_user_ids", "=", "np", ".", "array", "(", "\n", "[", "uid", "for", "uid", ",", "_", "in", "batch_user_anchor_items_pairs", "]", ")", "\n", "\n", "# generate batch positives", "\n", "batch_pos_ids", "=", "np", ".", "array", "(", "\n", "[", "iid", "for", "_", ",", "iid", "in", "batch_user_anchor_items_pairs", "]", ")", "\n", "\n", "# preselect n_negative_candidates items due to large number of items", "\n", "candidate_neg_ids", "=", "self", ".", "_candidate_neg_ids", "(", "batch_pos_ids", ")", "\n", "\n", "# generate batch negatives", "\n", "batch_neg_ids", "=", "self", ".", "_negative_sampling", "(", "batch_user_ids", ",", "batch_pos_ids", ",", "\n", "candidate_neg_ids", ")", "\n", "return", "batch_user_ids", ",", "batch_pos_ids", ",", "batch_neg_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._candidate_neg_ids": [[139, 147], ["NotImplementedError"], "methods", ["None"], ["", "def", "_candidate_neg_ids", "(", "self", ",", "pos_ids", ")", ":", "\n", "        ", "\"\"\"\n        Candidate for negative ids\n        :param pos_ids: batch positive ids\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'_candidate_neg_ids method should be implemented in child class'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler._negative_sampling": [[148, 158], ["NotImplementedError"], "methods", ["None"], ["", "def", "_negative_sampling", "(", "self", ",", "user_ids", ",", "pos_ids", ",", "neg_ids", ")", ":", "\n", "        ", "\"\"\"\n        Negative sampling\n        :param user_ids:\n        :param pos_ids:\n        :param neg_ids:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'_negative_sampling method should be implemented in child class'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.__init__.SamplerFactory.generate_sampler": [[14, 35], ["KeyError"], "methods", ["None"], ["\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "train_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "valid_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "test_interactions", "=", "sp", ".", "dok_matrix", "(", "interactions", ".", "shape", ")", "\n", "\n", "logger", ".", "info", "(", "'Get user item positive interactions dict'", ")", "\n", "user_item_pairs", "=", "np", ".", "asarray", "(", "interactions", ".", "nonzero", "(", ")", ")", ".", "T", "\n", "user_item_dict", "=", "defaultdict", "(", "set", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.popular_sampler.PopularSampler._candidate_neg_ids": [[14, 21], ["numpy.arange"], "methods", ["None"], ["def", "_candidate_neg_ids", "(", "self", ",", "pos_ids", ")", ":", "\n", "        ", "\"\"\"\n        Candidate for negative ids\n        :param pos_ids: batch positive ids\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "arange", "(", "self", ".", "interactions", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.popular_sampler.PopularSampler._negative_sampling": [[22, 34], ["numpy.random.choice", "zip", "range", "enumerate", "len", "len", "numpy.random.choice"], "methods", ["None"], ["", "def", "_negative_sampling", "(", "self", ",", "user_ids", ",", "pos_ids", ",", "neg_ids", ")", ":", "\n", "        ", "neg_samples", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ",", "\n", "size", "=", "(", "len", "(", "pos_ids", ")", ",", "self", ".", "n_negatives", ")", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "item_popularities", ")", "\n", "for", "i", ",", "uid", ",", "negatives", "in", "zip", "(", "range", "(", "len", "(", "user_ids", ")", ")", ",", "\n", "user_ids", ",", "neg_samples", ")", ":", "\n", "            ", "for", "j", ",", "neg", "in", "enumerate", "(", "negatives", ")", ":", "\n", "                ", "while", "neg", "in", "self", ".", "user_items", "[", "uid", "]", ":", "\n", "                    ", "neg_samples", "[", "i", ",", "j", "]", "=", "neg", "=", "np", ".", "random", ".", "choice", "(", "\n", "neg_ids", ",", "p", "=", "self", ".", "item_popularities", ")", "\n", "", "", "", "return", "neg_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._candidate_neg_ids": [[18, 28], ["numpy.random.choice", "range"], "methods", ["None"], ["def", "_candidate_neg_ids", "(", "self", ",", "pos_ids", ")", ":", "\n", "        ", "\"\"\"\n        Candidate for negative ids\n        :param pos_ids: batch positive ids\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "interactions", ".", "shape", "[", "1", "]", ")", ",", "\n", "size", "=", "self", ".", "num_neg_candidates", ",", "\n", "replace", "=", "False", ",", "\n", "p", "=", "self", ".", "item_popularities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._negative_sampling": [[29, 63], ["numpy.zeros", "numpy.linalg.multi_dot", "enumerate", "spreadout_sampler.SpreadoutSampler._calculate_weights", "numpy.sum", "enumerate", "numpy.random.choice", "numpy.random.choice", "len", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._calculate_weights"], ["", "def", "_negative_sampling", "(", "self", ",", "user_ids", ",", "pos_ids", ",", "neg_ids", ")", ":", "\n", "        ", "neg_samples", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "pos_ids", ")", ",", "self", ".", "n_negatives", ")", ")", "\n", "pos_item_embeddings", "=", "self", ".", "model", ".", "dense_item_embeddings", "[", "pos_ids", "]", "\n", "neg_item_embeddings", "=", "self", ".", "model", ".", "dense_item_embeddings", "[", "neg_ids", "]", "\n", "\n", "item_spreadout_distances", "=", "np", ".", "linalg", ".", "multi_dot", "(", "[", "pos_item_embeddings", ",", "\n", "neg_item_embeddings", ".", "T", "]", ")", "\n", "\n", "for", "i", ",", "uid", ",", "in", "enumerate", "(", "user_ids", ")", ":", "\n", "            ", "weights", "=", "self", ".", "_calculate_weights", "(", "item_spreadout_distances", "[", "i", "]", ")", "\n", "weights_sum", "=", "np", ".", "sum", "(", "weights", ")", "\n", "if", "weights_sum", ">", "0", ":", "\n", "                ", "weights", "=", "weights", "/", "weights_sum", "\n", "\n", "", "if", "weights_sum", ">", "0", ":", "\n", "                ", "neg_samples", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ",", "\n", "size", "=", "self", ".", "n_negatives", ",", "\n", "p", "=", "weights", ",", "\n", "replace", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "neg_samples", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ",", "\n", "size", "=", "self", ".", "n_negatives", ",", "\n", "replace", "=", "False", ")", "\n", "\n", "", "for", "j", ",", "neg", "in", "enumerate", "(", "neg_samples", "[", "i", "]", ")", ":", "\n", "                ", "current_try", "=", "0", "\n", "while", "neg", "in", "self", ".", "user_items", "[", "uid", "]", "and", "current_try", "<", "self", ".", "n_try", ":", "\n", "                    ", "if", "weights_sum", ">", "0", ":", "\n", "                        ", "neg_samples", "[", "i", ",", "j", "]", "=", "neg", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ",", "\n", "p", "=", "weights", ")", "\n", "", "else", ":", "\n", "                        ", "neg_samples", "[", "i", ",", "j", "]", "=", "neg", "=", "np", ".", "random", ".", "choice", "(", "neg_ids", ")", "\n", "", "current_try", "+=", "1", "\n", "", "", "", "return", "neg_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.spreadout_sampler.SpreadoutSampler._calculate_weights": [[64, 77], ["numpy.exp", "numpy.sum", "numpy.log", "numpy.log", "numpy.isnan", "float", "numpy.square"], "methods", ["None"], ["", "def", "_calculate_weights", "(", "self", ",", "spreadout_distance", ")", ":", "\n", "        ", "mask", "=", "spreadout_distance", ">", "0", "\n", "log_weights", "=", "(", "1.0", "-", "(", "float", "(", "self", ".", "embedding_dim", ")", "-", "1", ")", "/", "2", ")", "*", "np", ".", "log", "(", "\n", "1.0", "-", "np", ".", "square", "(", "spreadout_distance", ")", "+", "1e-8", ")", "+", "np", ".", "log", "(", "\n", "BETA_VOLUMN_CONST", ")", "\n", "weights", "=", "np", ".", "exp", "(", "log_weights", ")", "\n", "weights", "[", "np", ".", "isnan", "(", "weights", ")", "]", "=", "0.", "\n", "weights", "[", "~", "mask", "]", "=", "0.", "\n", "weights_sum", "=", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "if", "weights_sum", ">", "0", ":", "\n", "            ", "weights", "=", "weights", "/", "weights_sum", "\n", "", "return", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet.__init__": [[32, 50], ["models.model.Model.__init__", "getattr", "getattr", "getattr", "getattr", "getattr", "numpy.random.normal().astype", "sklearn.preprocessing.normalize", "numpy.random.normal().astype", "sklearn.preprocessing.normalize", "numpy.random.normal", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "sess", ",", "params", ")", ":", "\n", "        ", "super", "(", "Triplet", ",", "self", ")", ".", "__init__", "(", "sess", ",", "params", ")", "\n", "self", ".", "spreadout_weight", "=", "getattr", "(", "params", ",", "'spreadout_weight'", ",", "1.0", ")", "\n", "self", ".", "clip_norm", "=", "getattr", "(", "params", ",", "'clip_norm'", ",", "1.0", ")", "\n", "self", ".", "activate_l2_norm", "=", "getattr", "(", "params", ",", "'activate_l2_norm'", ",", "False", ")", "\n", "self", ".", "margin", "=", "getattr", "(", "params", ",", "'margin'", ",", "1.0", ")", "\n", "self", ".", "n_negatives", "=", "getattr", "(", "params", ",", "'n_negatives'", ",", "1", ")", "\n", "self", ".", "dense_user_embeddings", "=", "np", ".", "random", ".", "normal", "(", "\n", "0.0", ",", "self", ".", "initialized_std", ",", "\n", "size", "=", "[", "self", ".", "n_users", ",", "self", ".", "embedding_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "dense_user_embeddings", "=", "normalize", "(", "self", ".", "dense_user_embeddings", ",", "\n", "axis", "=", "1", ",", "norm", "=", "'l2'", ")", "\n", "\n", "self", ".", "dense_item_embeddings", "=", "np", ".", "random", ".", "normal", "(", "\n", "0.0", ",", "self", ".", "initialized_std", ",", "\n", "size", "=", "[", "self", ".", "n_items", ",", "self", ".", "embedding_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "dense_item_embeddings", "=", "normalize", "(", "self", ".", "dense_item_embeddings", ",", "\n", "axis", "=", "1", ",", "norm", "=", "'l2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._create_placeholders": [[51, 62], ["logger.debug", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_create_placeholders", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet placeholders'", ")", "\n", "self", ".", "anchor_ids", "=", "tf", ".", "placeholder", "(", "name", "=", "'anchor_ids'", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "pos_ids", "=", "tf", ".", "placeholder", "(", "name", "=", "'pos_ids'", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "neg_ids", "=", "tf", ".", "placeholder", "(", "name", "=", "'neg_ids'", ",", "dtype", "=", "tf", ".", "int32", ",", "\n", "shape", "=", "[", "None", ",", "self", ".", "n_negatives", "]", ")", "\n", "\n", "# list of users for validation", "\n", "self", ".", "eval_ids", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._create_variables": [[63, 85], ["logger.debug", "tensorflow.get_variable", "tensorflow.get_variable", "logger.debug", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize"], "methods", ["None"], ["", "def", "_create_variables", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet variables'", ")", "\n", "# user embeddings", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'user_embedding_matrix'", ",", "\n", "initializer", "=", "self", ".", "dense_user_embeddings", ",", "\n", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "\n", "# item embeddings", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "'item_embedding_matrix'", ",", "\n", "initializer", "=", "self", ".", "dense_item_embeddings", ",", "\n", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "\n", "if", "self", ".", "activate_l2_norm", ":", "\n", "            ", "logger", ".", "debug", "(", "'----> Active L2 normalization'", ")", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "user_embeddings", ",", "\n", "axis", "=", "1", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "item_embeddings", ",", "\n", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._pos_distances": [[86, 93], ["logger.debug", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.squared_difference"], "methods", ["None"], ["", "", "def", "_pos_distances", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet positive distances'", ")", "\n", "distances", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "squared_difference", "(", "self", ".", "anchors", ",", "self", ".", "positives", ")", ",", "\n", "axis", "=", "1", ",", "\n", "name", "=", "'pos_distances'", ")", "\n", "return", "tf", ".", "maximum", "(", "distances", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._neg_distances": [[94, 103], ["logger.debug", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.squared_difference"], "methods", ["None"], ["", "def", "_neg_distances", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet negative distances'", ")", "\n", "expanded_anchors", "=", "tf", ".", "expand_dims", "(", "self", ".", "anchors", ",", "-", "1", ",", "\n", "name", "=", "'expanded_anchors'", ")", "\n", "distances", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "squared_difference", "(", "expanded_anchors", ",", "self", ".", "negatives", ")", ",", "\n", "axis", "=", "1", ",", "\n", "name", "=", "'neg_distances'", ")", "\n", "return", "tf", ".", "maximum", "(", "distances", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._create_loss": [[104, 110], ["logger.debug", "triplet.Triplet._embedding_loss", "triplet.Triplet._spread_out_loss"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._embedding_loss", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._spread_out_loss"], ["", "def", "_create_loss", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet loss'", ")", "\n", "self", ".", "loss", "=", "self", ".", "_embedding_loss", "(", ")", "\n", "if", "self", ".", "enable_spreadout_loss", ":", "\n", "            ", "self", ".", "spreadout_loss", "=", "self", ".", "_spread_out_loss", "(", ")", "\n", "self", ".", "loss", "+=", "self", ".", "spreadout_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._embedding_loss": [[111, 141], ["logger.debug", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.transpose", "triplet.Triplet._pos_distances", "triplet.Triplet._neg_distances", "tensorflow.reduce_min", "tensorflow.maximum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._pos_distances", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._neg_distances"], ["", "", "def", "_embedding_loss", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define embedding loss'", ")", "\n", "# anchor user embedding: shape=(N, K)", "\n", "self", ".", "anchors", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "\n", "self", ".", "anchor_ids", ",", "\n", "name", "=", "'batch_anchor_embeddings'", ")", "\n", "# positive item embedding: shape=(N, K)", "\n", "self", ".", "positives", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "\n", "self", ".", "item_embeddings", ",", "\n", "self", ".", "pos_ids", ",", "\n", "name", "=", "'batch_positive_embeddings'", ")", "\n", "# negative item embedding: shape=(N, K, W)", "\n", "negatives", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_ids", ")", "\n", "\n", "self", ".", "negatives", "=", "tf", ".", "transpose", "(", "negatives", ",", "(", "0", ",", "2", ",", "1", ")", ",", "\n", "name", "=", "'batch_negative_embeddings'", ")", "\n", "# positive distances", "\n", "self", ".", "pos_distances", "=", "self", ".", "_pos_distances", "(", ")", "\n", "\n", "# negative distances", "\n", "self", ".", "neg_distances", "=", "self", ".", "_neg_distances", "(", ")", "\n", "\n", "# get only the closest negative distance to the anchor", "\n", "min_neg_distances", "=", "tf", ".", "reduce_min", "(", "self", ".", "neg_distances", ",", "axis", "=", "1", ",", "\n", "name", "=", "'min_neg_distances'", ")", "\n", "\n", "loss", "=", "tf", ".", "maximum", "(", "self", ".", "pos_distances", "-", "min_neg_distances", "+", "self", ".", "margin", ",", "\n", "0.0", ",", "name", "=", "\"pair_loss\"", ")", "\n", "\n", "return", "tf", ".", "reduce_sum", "(", "loss", ",", "name", "=", "'embedding_loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._spread_out_loss": [[142, 159], ["logger.debug", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "triplet.Triplet._spread_out_weights", "triplet.Triplet._spread_out_weights"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._spread_out_weights", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._spread_out_weights"], ["", "def", "_spread_out_loss", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet spreadout loss'", ")", "\n", "expanded_anchors", "=", "tf", ".", "expand_dims", "(", "self", ".", "anchors", ",", "-", "1", ",", "\n", "name", "=", "'expanded_spreadout_anchors'", ")", "\n", "\n", "non_match_anchor_dot", "=", "tf", ".", "matmul", "(", "expanded_anchors", ",", "\n", "self", ".", "negatives", ",", "\n", "transpose_a", "=", "True", ")", "\n", "\n", "expanded_positives", "=", "tf", ".", "expand_dims", "(", "self", ".", "positives", ",", "-", "1", ",", "\n", "name", "=", "'expanded_spreadout_positives'", ")", "\n", "non_match_positive_dot", "=", "tf", ".", "matmul", "(", "expanded_positives", ",", "\n", "self", ".", "negatives", ",", "\n", "transpose_a", "=", "True", ")", "\n", "\n", "return", "self", ".", "_spread_out_weights", "(", "non_match_anchor_dot", ")", "+", "self", ".", "_spread_out_weights", "(", "non_match_positive_dot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._spread_out_weights": [[160, 171], ["tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.maximum", "tensorflow.reshape", "tensorflow.square", "tensorflow.shape", "tensorflow.square", "tensorflow.maximum"], "methods", ["None"], ["", "def", "_spread_out_weights", "(", "self", ",", "non_match_dot", ")", ":", "\n", "        ", "non_match_dot", "=", "tf", ".", "reduce_max", "(", "tf", ".", "reshape", "(", "\n", "non_match_dot", ",", "shape", "=", "[", "-", "1", ",", "self", ".", "n_negatives", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "m1", "=", "tf", ".", "reduce_sum", "(", "non_match_dot", ")", "\n", "m2", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "non_match_dot", ")", ")", "\n", "n_samples", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "self", ".", "anchor_ids", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "maximum", "(", "\n", "(", "tf", ".", "square", "(", "m1", ")", "+", "tf", ".", "maximum", "(", "0.0", ",", "m2", "-", "n_samples", "/", "\n", "self", ".", "embedding_dim", ")", ")", "*", "\n", "self", ".", "spreadout_weight", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._create_train_ops": [[172, 175], ["logger.debug", "triplet.Triplet._optimizer_ops"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._optimizer_ops"], ["", "def", "_create_train_ops", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet train ops'", ")", "\n", "self", ".", "train_ops", "=", "self", ".", "_optimizer_ops", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._clip_by_norm_ops": [[176, 181], ["tensorflow.assign", "tensorflow.assign", "tensorflow.clip_by_norm", "tensorflow.clip_by_norm"], "methods", ["None"], ["", "def", "_clip_by_norm_ops", "(", "self", ")", ":", "\n", "        ", "return", "[", "tf", ".", "assign", "(", "self", ".", "user_embeddings", ",", "tf", ".", "clip_by_norm", "(", "\n", "self", ".", "user_embeddings", ",", "self", ".", "clip_norm", ",", "axes", "=", "[", "1", "]", ")", ")", ",", "\n", "tf", ".", "assign", "(", "self", ".", "item_embeddings", ",", "tf", ".", "clip_by_norm", "(", "\n", "self", ".", "item_embeddings", ",", "self", ".", "clip_norm", ",", "axes", "=", "[", "1", "]", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._optimizer_ops": [[182, 191], ["logger.debug", "KeyError"], "methods", ["None"], ["", "def", "_optimizer_ops", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet Optimizer ops'", ")", "\n", "try", ":", "\n", "            ", "ops", "=", "[", "_SUPPORTED_OPTIMIZERS", "[", "self", ".", "optimizer", "]", "(", "\n", "self", ".", "learning_rate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "KeyError", "(", "'Current Triplet implementation does not support '", "\n", "'optimizer: {}'", ".", "format", "(", "self", ".", "optimizer", ")", ")", "\n", "", "return", "ops", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._create_score_items": [[192, 203], ["logger.debug", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.squared_difference"], "methods", ["None"], ["", "def", "_create_score_items", "(", "self", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'--> Define Triplet ranking scores'", ")", "\n", "# get users need to score", "\n", "users", "=", "tf", ".", "expand_dims", "(", "self", ".", "anchors", ",", "1", ")", "\n", "\n", "# reshape items to (1, M, K)", "\n", "items", "=", "tf", ".", "expand_dims", "(", "self", ".", "item_embeddings", ",", "0", ")", "\n", "\n", "# scores = minus distance (N, M)", "\n", "self", ".", "scores", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "squared_difference", "(", "users", ",", "items", ")", ",", "\n", "axis", "=", "2", ",", "name", "=", "'scores'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.triplet.Triplet._update_embeddings": [[204, 207], ["triplet.Triplet.sess.run"], "methods", ["None"], ["", "def", "_update_embeddings", "(", "self", ")", ":", "\n", "        ", "self", ".", "dense_user_embeddings", ",", "self", ".", "dense_item_embeddings", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.__init__": [[28, 53], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sess", ",", "params", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "learning_rate", "=", "getattr", "(", "params", ",", "'learning_rate'", ",", "0.001", ")", "\n", "self", ".", "embedding_dim", "=", "getattr", "(", "params", ",", "'embedding_dim'", ",", "32", ")", "\n", "self", ".", "model_dir", "=", "getattr", "(", "params", ",", "'model_dir'", ")", "\n", "self", ".", "n_users", "=", "getattr", "(", "params", ",", "'n_users'", ")", "\n", "self", ".", "n_items", "=", "getattr", "(", "params", ",", "'n_items'", ")", "\n", "self", ".", "initialized_std", "=", "getattr", "(", "params", ",", "'initialized_std'", ",", "0.01", ")", "\n", "self", ".", "n_epochs", "=", "getattr", "(", "params", ",", "'n_epochs'", ",", "20", ")", "\n", "self", ".", "eval_every_n_batches", "=", "getattr", "(", "params", ",", "'eval_every_n_batches'", ",", "100", ")", "\n", "self", ".", "update_embeddings_every_n_batches", "=", "getattr", "(", "\n", "params", ",", "'update_embeddings_every_n_batches'", ",", "100", ")", "\n", "self", ".", "max_to_keep", "=", "getattr", "(", "params", ",", "'max_to_keep'", ",", "3", ")", "\n", "self", ".", "enable_spreadout_loss", "=", "getattr", "(", "\n", "params", ",", "'enable_spreadout_loss'", ",", "False", ")", "\n", "\n", "self", ".", "n_users_in_validation", "=", "getattr", "(", "\n", "params", ",", "'n_users_in_validation'", ",", "1000", ")", "\n", "self", ".", "n_users_in_test", "=", "getattr", "(", "params", ",", "'n_users_in_test'", ",", "-", "1", ")", "\n", "self", ".", "n_users_in_chunk", "=", "getattr", "(", "params", ",", "'n_users_in_chunk'", ",", "100", ")", "\n", "\n", "# optimizer", "\n", "self", ".", "optimizer", "=", "getattr", "(", "params", ",", "'optimizer'", ",", "'adam'", ")", "\n", "self", ".", "checkpoint", "=", "None", "\n", "self", ".", "scores", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.build_graph": [[54, 61], ["model.Model._create_placeholders", "model.Model._create_variables", "model.Model._create_loss", "model.Model._create_train_ops", "model.Model._create_score_items", "model.Model.sess.run", "tensorflow.global_variables_initializer"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_placeholders", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_variables", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_loss", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_train_ops", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_score_items"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_placeholders", "(", ")", "\n", "self", ".", "_create_variables", "(", ")", "\n", "self", ".", "_create_loss", "(", ")", "\n", "self", ".", "_create_train_ops", "(", ")", "\n", "self", ".", "_create_score_items", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.fit": [[62, 179], ["tensorflow.train.Saver", "math.ceil", "max", "numpy.zeros", "os.path.isfile", "logger.info", "len", "os.remove", "open", "f.write", "range", "len", "range", "train_interactions.count_nonzero", "tqdm.tqdm.tqdm", "logger.info", "numpy.empty", "numpy.empty", "toolz.partition_all", "numpy.mean", "numpy.mean", "model.Model._write_stats", "logger.info", "range", "sampler.next_batch", "losses.append", "numpy.mean", "evaluators.EvaluatorFactory.create_evaluator", "model.Model._topk_items", "numpy.append", "numpy.append", "numpy.mean", "tensorflow.train.Saver.save", "model.Model.sess.run", "spreadout_losses.append", "model.Model.sess.run", "model.Model._update_embeddings", "numpy.mean", "model.Model._get_eval_scores", "model.Model._get_eval_scores", "model.Model.__class__.__name__.lower", "len", "len"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._write_stats", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.samplers.sampler.Sampler.next_batch", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.__init__.EvaluatorFactory.create_evaluator", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._topk_items", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._update_embeddings", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._get_eval_scores", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._get_eval_scores"], ["", "def", "fit", "(", "self", ",", "sampler", ",", "train_interactions", ",", "valid_interactions", ",", "eval_users", ",", "\n", "metrics", ",", "k", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        Training the model\n        :param sampler:\n        :param train_interactions:\n        :param valid_interactions:\n        :param eval_users:\n        :param metrics:\n        :param k:\n        :return:\n        \"\"\"", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "self", ".", "max_to_keep", ")", "\n", "\n", "n_evals_per_epoch", "=", "math", ".", "ceil", "(", "\n", "train_interactions", ".", "count_nonzero", "(", ")", "*", "1.0", "/", "\n", "(", "self", ".", "eval_every_n_batches", "*", "sampler", ".", "batch_size", ")", ")", "\n", "\n", "max_train_interaction_count", "=", "max", "(", "len", "(", "row", ")", "\n", "for", "row", "in", "train_interactions", ".", "rows", ")", "\n", "best_valid_scores", "=", "np", ".", "zeros", "(", "len", "(", "metrics", ")", ")", "\n", "best_ep", "=", "-", "1", "\n", "\n", "metrics_path", "=", "'{}/metrics.csv'", ".", "format", "(", "self", ".", "model_dir", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "metrics_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "metrics_path", ")", "\n", "\n", "", "with", "open", "(", "metrics_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "metrics_header", "=", "','", ".", "join", "(", "[", "'train_{}_{},val_{}_{}'", ".", "format", "(", "\n", "metric", ",", "k", ",", "metric", ",", "k", ")", "for", "metric", "in", "metrics", "]", ")", "\n", "f", ".", "write", "(", "'epoch,train_loss,{}\\n'", ".", "format", "(", "metrics_header", ")", ")", "\n", "\n", "for", "ep", "in", "range", "(", "1", ",", "self", ".", "n_epochs", "+", "1", ")", ":", "\n", "                ", "for", "it", "in", "range", "(", "n_evals_per_epoch", ")", ":", "\n", "                    ", "losses", "=", "[", "]", "\n", "spreadout_losses", "=", "[", "]", "\n", "\n", "for", "b_idx", "in", "tqdm", "(", "range", "(", "self", ".", "eval_every_n_batches", ")", ",", "\n", "desc", "=", "\"Optimizing {}/{}...\"", ".", "format", "(", "it", "+", "1", ",", "\n", "ep", ")", ")", ":", "\n", "                        ", "batch_samples", "=", "sampler", ".", "next_batch", "(", ")", "\n", "feed_dict", "=", "{", "\n", "self", ".", "anchor_ids", ":", "batch_samples", "[", "0", "]", ",", "\n", "self", ".", "pos_ids", ":", "batch_samples", "[", "1", "]", ",", "\n", "self", ".", "neg_ids", ":", "batch_samples", "[", "2", "]", "\n", "}", "\n", "\n", "if", "self", ".", "enable_spreadout_loss", ":", "\n", "                            ", "_", ",", "spreadout_loss", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "\n", "(", "self", ".", "train_ops", ",", "self", ".", "spreadout_loss", ",", "self", ".", "loss", ")", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "spreadout_losses", ".", "append", "(", "spreadout_loss", ")", "\n", "", "else", ":", "\n", "                            ", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "train_ops", ",", "self", ".", "loss", ")", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "if", "self", ".", "update_embeddings_every_n_batches", ">", "0", "and", "b_idx", ">", "0", "and", "b_idx", "%", "self", ".", "update_embeddings_every_n_batches", "==", "0", ":", "\n", "                            ", "self", ".", "_update_embeddings", "(", ")", "\n", "", "", "log_info", "=", "'\\nTraining loss: {}'", ".", "format", "(", "np", ".", "mean", "(", "losses", ")", ")", "\n", "if", "self", ".", "enable_spreadout_loss", ":", "\n", "                        ", "log_info", "=", "'{}, spreadout_loss: {}'", ".", "format", "(", "\n", "log_info", ",", "np", ".", "mean", "(", "spreadout_losses", ")", ")", "\n", "", "logger", ".", "info", "(", "log_info", ")", "\n", "\n", "# create evaluator on validation set", "\n", "evaluators", "=", "[", "EvaluatorFactory", ".", "create_evaluator", "(", "\n", "train_interactions", ",", "valid_interactions", ",", "metric", ")", "\n", "for", "metric", "in", "metrics", "]", "\n", "\n", "# compute recall on train & validate set", "\n", "train_eval_scores", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "len", "(", "evaluators", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "valid_eval_scores", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "len", "(", "evaluators", ")", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "user_chunk", "in", "toolz", ".", "partition_all", "(", "self", ".", "n_users_in_chunk", ",", "\n", "eval_users", ")", ":", "\n", "# get topk items (more than k so that we can excluded", "\n", "# items already in train)", "\n", "                        ", "reco_items", "=", "self", ".", "_topk_items", "(", "\n", "user_chunk", ",", "k", "=", "k", "+", "max_train_interaction_count", ")", "\n", "train_eval_scores", "=", "np", ".", "append", "(", "train_eval_scores", ",", "\n", "self", ".", "_get_eval_scores", "(", "\n", "reco_items", ",", "\n", "evaluators", ",", "k", ",", "\n", "on_train", "=", "True", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "valid_eval_scores", "=", "np", ".", "append", "(", "valid_eval_scores", ",", "\n", "self", ".", "_get_eval_scores", "(", "\n", "reco_items", ",", "\n", "evaluators", ",", "k", ")", ",", "\n", "axis", "=", "0", ")", "\n", "\n", "", "current_train_scores", "=", "np", ".", "mean", "(", "train_eval_scores", ",", "axis", "=", "0", ")", "\n", "current_valid_scores", "=", "np", ".", "mean", "(", "valid_eval_scores", ",", "axis", "=", "0", ")", "\n", "loss", "=", "0.0", "if", "not", "losses", "else", "np", ".", "mean", "(", "losses", ")", "\n", "\n", "self", ".", "_write_stats", "(", "f", ",", "ep", ",", "loss", ",", "current_train_scores", ",", "\n", "current_valid_scores", ")", "\n", "\n", "logger", ".", "info", "(", "'\\n{} on (sampled) validation set at '", "\n", "'iter/epoch #{}/{}: {}'", ".", "format", "(", "\n", "'|'", ".", "join", "(", "metrics", ")", ",", "it", "+", "1", ",", "ep", ",", "current_valid_scores", ")", ")", "\n", "\n", "# save best recall model", "\n", "if", "current_valid_scores", "[", "0", "]", ">", "best_valid_scores", "[", "0", "]", ":", "\n", "# save new model", "\n", "                        ", "best_valid_scores", "=", "current_valid_scores", "\n", "best_ep", "=", "ep", "\n", "save_path", "=", "'{}/{}_{}-epoch_{}'", ".", "format", "(", "\n", "self", ".", "model_dir", ",", "metrics", "[", "0", "]", ",", "\n", "self", ".", "__class__", ".", "__name__", ".", "lower", "(", ")", ",", "ep", ")", "\n", "saver", ".", "save", "(", "self", ".", "sess", ",", "save_path", "=", "save_path", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "'Best {} validation score: {}, on epoch {}'", ".", "format", "(", "\n", "metrics", "[", "0", "]", ",", "best_valid_scores", ",", "best_ep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.get_recommended_items": [[180, 195], ["model.Model._topk_items", "model.Model.items", "model.Model._load_from_checkpoint", "results.append", "top.append", "len"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._topk_items", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._load_from_checkpoint"], ["", "def", "get_recommended_items", "(", "self", ",", "user_ids", ",", "train_user_items", ",", "\n", "max_train_interaction_count", ",", "k", "=", "50", ")", ":", "\n", "# load model", "\n", "        ", "if", "self", ".", "checkpoint", "is", "None", ":", "\n", "            ", "self", ".", "_load_from_checkpoint", "(", ")", "\n", "", "recommended_items", "=", "self", ".", "_topk_items", "(", "user_ids", ",", "\n", "k", "=", "k", "+", "max_train_interaction_count", ")", "\n", "results", "=", "[", "]", "\n", "for", "uid", ",", "pred_iids", "in", "recommended_items", ".", "items", "(", ")", ":", "\n", "            ", "top", "=", "[", "]", "\n", "for", "iid", "in", "pred_iids", ":", "\n", "                ", "if", "iid", "not", "in", "train_user_items", "[", "uid", "]", "and", "len", "(", "top", ")", "<", "k", ":", "\n", "                    ", "top", ".", "append", "(", "iid", ")", "\n", "", "", "results", ".", "append", "(", "top", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_placeholders": [[196, 199], ["tensorflow.placeholder"], "methods", ["None"], ["", "def", "_create_placeholders", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_training", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "None", ",", "\n", "name", "=", "'is_training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_variables": [[200, 202], ["NotImplementedError"], "methods", ["None"], ["", "def", "_create_variables", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'_create_variables() method should be '", "\n", "'implemented in concrete model'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_loss": [[204, 206], ["NotImplementedError"], "methods", ["None"], ["", "def", "_create_loss", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'_create_loss() method should be '", "\n", "'implemented in concrete model'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_train_ops": [[208, 210], ["NotImplementedError"], "methods", ["None"], ["", "def", "_create_train_ops", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'_create_train_ops() method should be '", "\n", "'implemented in concrete model'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._create_score_items": [[212, 214], ["NotImplementedError"], "methods", ["None"], ["", "def", "_create_score_items", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'score_items method should be '", "\n", "'implemented in concrete model'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._load_from_checkpoint": [[216, 226], ["tensorflow.train.get_checkpoint_state", "logger.info", "model.Model.build_graph", "tensorflow.train.Saver", "tensorflow.train.Saver.restore"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model.build_graph"], ["", "def", "_load_from_checkpoint", "(", "self", ")", ":", "\n", "# restore the model if it already exists", "\n", "        ", "self", ".", "checkpoint", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "self", ".", "model_dir", ")", "\n", "\n", "if", "self", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "'Load {} model from {}'", ".", "format", "(", "self", ".", "__class__", ",", "\n", "self", ".", "model_dir", ")", ")", "\n", "self", ".", "build_graph", "(", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "self", ".", "max_to_keep", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "self", ".", "checkpoint", ".", "model_checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._topk_items": [[227, 244], ["model.Model.sess.run", "dict", "tensorflow.nn.top_k", "zip"], "methods", ["None"], ["", "", "def", "_topk_items", "(", "self", ",", "user_ids", ",", "k", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        Get top k items for the list of users.\n\n        Parameters\n        ----------\n        user_ids: list\n            List of user ids\n        k: int\n            The number of items on the top of user preferences.\n        Returns\n        -------\n            Top k items for each user.\n        \"\"\"", "\n", "_", ",", "topk", "=", "self", ".", "sess", ".", "run", "(", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "scores", ",", "k", ")", ",", "\n", "feed_dict", "=", "{", "self", ".", "anchor_ids", ":", "user_ids", "}", ")", "\n", "return", "dict", "(", "zip", "(", "user_ids", ",", "topk", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._get_eval_scores": [[245, 260], ["numpy.zeros", "enumerate", "evaluator.eval", "len", "len"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.eval"], ["", "@", "classmethod", "\n", "def", "_get_eval_scores", "(", "cls", ",", "reco_items", ",", "evaluators", ",", "k", ",", "on_train", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Get eval scores\n        :param reco_items:\n        :param evaluators:\n        :param k:\n        :param on_train:\n        :return:\n        \"\"\"", "\n", "scores", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "reco_items", ")", ",", "len", "(", "evaluators", ")", ")", ")", "\n", "for", "i", ",", "evaluator", "in", "enumerate", "(", "evaluators", ")", ":", "\n", "            ", "scores", "[", ":", ",", "i", "]", "=", "evaluator", ".", "eval", "(", "reco_items", ",", "k", ",", "on_train", "=", "on_train", ")", "\n", "\n", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._write_stats": [[261, 269], ["f.write", "f.flush", "zip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_write_stats", "(", "cls", ",", "f", ",", "ep", ",", "loss", ",", "current_train_scores", ",", "\n", "current_valid_scores", ")", ":", "\n", "        ", "metric_scores", "=", "[", "'{},{}'", ".", "format", "(", "train_score", ",", "val_score", ")", "\n", "for", "train_score", ",", "val_score", "in", "\n", "zip", "(", "current_train_scores", ",", "current_valid_scores", ")", "]", "\n", "f", ".", "write", "(", "'{},{},{}\\n'", ".", "format", "(", "ep", ",", "loss", ",", "','", ".", "join", "(", "metric_scores", ")", ")", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.models.model.Model._update_embeddings": [[270, 276], ["NotImplementedError"], "methods", ["None"], ["", "def", "_update_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Update embeddings\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'get_embeddings method should be implemented '", "\n", "'in concrete model'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.map.MAPEvaluator.__init__": [[13, 15], ["evaluators.evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.__init__"], ["def", "__init__", "(", "self", ",", "train_interactions", ",", "test_interactions", ")", ":", "\n", "        ", "super", "(", "MAPEvaluator", ",", "self", ")", ".", "__init__", "(", "train_interactions", ",", "test_interactions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.map.MAPEvaluator.user_ap_at_k": [[16, 32], ["enumerate", "len", "min", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "user_ap_at_k", "(", "cls", ",", "label_iids", ",", "pred_iids", ",", "k", ")", ":", "\n", "        ", "if", "len", "(", "pred_iids", ")", ">", "k", ":", "\n", "            ", "pred_iids", "=", "pred_iids", "[", ":", "k", "]", "\n", "", "score", "=", "0.0", "\n", "num_hits", "=", "0.0", "\n", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "pred_iids", ")", ":", "\n", "            ", "if", "p", "in", "label_iids", "and", "p", "not", "in", "pred_iids", "[", ":", "i", "]", ":", "\n", "                ", "num_hits", "+=", "1.0", "\n", "score", "+=", "num_hits", "/", "(", "i", "+", "1.0", ")", "\n", "\n", "", "", "if", "not", "label_iids", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "return", "score", "/", "min", "(", "len", "(", "label_iids", ")", ",", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.map.MAPEvaluator.eval": [[33, 57], ["reco_items.items", "numpy.array", "map.MAPEvaluator.train_user_items.get", "map.MAPEvaluator.test_user_items.get", "map.MAPEvaluator.user_ap_at_k", "final_ap.append", "set", "set", "enumerate", "top.append", "len"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.map.MAPEvaluator.user_ap_at_k"], ["", "def", "eval", "(", "self", ",", "reco_items", ",", "k", "=", "50", ",", "on_train", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute the Top-K MAP\n        :param reco_items:\n        :param k:\n        :param on_train:\n        :return: map@k\n        \"\"\"", "\n", "# calculate the map", "\n", "final_ap", "=", "[", "]", "\n", "for", "user_id", ",", "pred_iids", "in", "reco_items", ".", "items", "(", ")", ":", "\n", "            ", "train_set", "=", "self", ".", "train_user_items", ".", "get", "(", "user_id", ",", "set", "(", ")", ")", "\n", "test_set", "=", "self", ".", "test_user_items", ".", "get", "(", "user_id", ",", "set", "(", ")", ")", "\n", "ref_set", "=", "train_set", "if", "on_train", "else", "test_set", "\n", "if", "on_train", ":", "\n", "                ", "top", "=", "[", "iid", "for", "i", ",", "iid", "in", "enumerate", "(", "pred_iids", ")", "if", "i", "<", "k", "]", "\n", "", "else", ":", "\n", "                ", "top", "=", "[", "]", "\n", "for", "iid", "in", "pred_iids", ":", "\n", "                    ", "if", "iid", "not", "in", "train_set", "and", "len", "(", "top", ")", "<", "k", ":", "\n", "                        ", "top", ".", "append", "(", "iid", ")", "\n", "", "", "", "user_ap", "=", "self", ".", "user_ap_at_k", "(", "ref_set", ",", "top", ",", "k", ")", "\n", "final_ap", ".", "append", "(", "user_ap", ")", "\n", "", "return", "np", ".", "array", "(", "final_ap", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.__init__.EvaluatorFactory.create_evaluator": [[10, 20], ["evaluators.ndcg.NDCGEvaluator", "evaluators.map.MAPEvaluator", "ValueError"], "methods", ["None"], ["def", "split_data", "(", "interactions", ",", "split_ratio", "=", "(", "3", ",", "1", ",", "1", ")", ",", "random_seed", "=", "42", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.evaluator.Evaluator.__init__": [[20, 34], ["scipy.lil_matrix", "scipy.lil_matrix", "set", "set", "range", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train_interactions", ",", "test_interactions", ")", ":", "\n", "        ", "self", ".", "train_interactions", "=", "sp", ".", "lil_matrix", "(", "train_interactions", ")", "\n", "self", ".", "test_interactions", "=", "sp", ".", "lil_matrix", "(", "test_interactions", ")", "\n", "\n", "# number of users", "\n", "n_users", "=", "train_interactions", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "train_user_items", "=", "{", "\n", "u", ":", "set", "(", "self", ".", "train_interactions", ".", "rows", "[", "u", "]", ")", "\n", "for", "u", "in", "range", "(", "n_users", ")", "if", "self", ".", "train_interactions", ".", "rows", "[", "u", "]", "}", "\n", "\n", "self", ".", "test_user_items", "=", "{", "\n", "u", ":", "set", "(", "self", ".", "test_interactions", ".", "rows", "[", "u", "]", ")", "\n", "for", "u", "in", "range", "(", "n_users", ")", "if", "self", ".", "test_interactions", ".", "rows", "[", "u", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.evaluator.Evaluator.eval": [[35, 37], ["NotImplementedError"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "reco_items", ",", "k", "=", "50", ",", "on_train", "=", "False", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'eval method should be implemented '", "\n", "'in concrete evaluator'", ")", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.dcg_at_k": [[14, 20], ["numpy.asfarray", "numpy.sum", "numpy.log2", "numpy.arange"], "methods", ["None"], ["@", "classmethod", "\n", "def", "dcg_at_k", "(", "cls", ",", "r", ",", "k", ")", ":", "\n", "        ", "r", "=", "np", ".", "asfarray", "(", "r", ")", "[", ":", "k", "]", "\n", "if", "r", ".", "size", ":", "\n", "            ", "return", "np", ".", "sum", "(", "r", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "r", ".", "size", "+", "2", ")", ")", ")", "\n", "", "return", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.__init__": [[21, 23], ["evaluators.evaluator.Evaluator.__init__"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.__init__"], ["", "def", "__init__", "(", "self", ",", "train_interactions", ",", "test_interactions", ")", ":", "\n", "        ", "super", "(", "NDCGEvaluator", ",", "self", ")", ".", "__init__", "(", "train_interactions", ",", "test_interactions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.eval": [[24, 55], ["reco_items.items", "ndcg.NDCGEvaluator.train_user_items.get", "ndcg.NDCGEvaluator.test_user_items.get", "numpy.array", "ndcg.append", "set", "set", "numpy.array.append", "len", "numpy.ones", "numpy.pad", "numpy.ones", "ndcg.NDCGEvaluator.dcg_at_k", "ndcg.NDCGEvaluator.dcg_at_k", "len", "len"], "methods", ["home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.dcg_at_k", "home.repos.pwc.inspect_result.deezer_sigir2019-2stagesampling.evaluators.ndcg.NDCGEvaluator.dcg_at_k"], ["", "def", "eval", "(", "self", ",", "reco_items", ",", "k", "=", "50", ",", "on_train", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Compute the Top-K nDCG for a particular user given the predicted scores to items.\n        :param reco_items:\n        :param k:\n        :param on_train:\n        :return: ndcg@k\n        \"\"\"", "\n", "ndcg", "=", "[", "]", "\n", "for", "user_id", ",", "tops", "in", "reco_items", ".", "items", "(", ")", ":", "\n", "            ", "train_set", "=", "self", ".", "train_user_items", ".", "get", "(", "user_id", ",", "set", "(", ")", ")", "\n", "test_set", "=", "self", ".", "test_user_items", ".", "get", "(", "user_id", ",", "set", "(", ")", ")", "\n", "ref_set", "=", "train_set", "if", "on_train", "else", "test_set", "\n", "top_n_items", "=", "0", "\n", "user_hits", "=", "[", "]", "\n", "for", "i", "in", "tops", ":", "\n", "# ignore item in the training set", "\n", "                ", "if", "not", "on_train", "and", "i", "in", "train_set", ":", "\n", "                    ", "continue", "\n", "", "pred", "=", "1", "if", "i", "in", "ref_set", "else", "0", "\n", "user_hits", ".", "append", "(", "pred", ")", "\n", "top_n_items", "+=", "1", "\n", "if", "top_n_items", "==", "k", ":", "\n", "                    ", "break", "\n", "", "", "user_hits", "=", "np", ".", "array", "(", "user_hits", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "len", "(", "ref_set", ")", ">=", "k", ":", "\n", "                ", "ideal_rels", "=", "np", ".", "ones", "(", "k", ")", "\n", "", "else", ":", "\n", "                ", "ideal_rels", "=", "np", ".", "pad", "(", "np", ".", "ones", "(", "len", "(", "ref_set", ")", ")", ",", "(", "0", ",", "k", "-", "len", "(", "ref_set", ")", ")", ",", "'constant'", ")", "\n", "", "ndcg", ".", "append", "(", "self", ".", "dcg_at_k", "(", "user_hits", ",", "k", ")", "/", "self", ".", "dcg_at_k", "(", "ideal_rels", ",", "k", ")", ")", "\n", "", "return", "ndcg", "\n", "", "", ""]]}