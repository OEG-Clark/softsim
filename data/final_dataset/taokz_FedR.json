{"home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.__init__": [[11, 18], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model_name", ")", ":", "\n", "        ", "super", "(", "KGEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "args", ".", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.forward": [[20, 75], ["torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "entity_embedding.unsqueeze", "tail_part.size", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "tail_part.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample", ",", "relation_embedding", ",", "entity_embedding", ",", "neg", "=", "True", ")", ":", "\n", "        ", "if", "not", "neg", ":", "\n", "            ", "head", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "head_part", ",", "tail_part", "=", "sample", "\n", "batch_size", "=", "head_part", ".", "shape", "[", "0", "]", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "tail_part", "==", "None", ":", "\n", "                ", "tail", "=", "entity_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "negative_sample_size", "=", "tail_part", ".", "size", "(", "1", ")", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "", "", "model_func", "=", "{", "\n", "'TransE'", ":", "self", ".", "TransE", ",", "\n", "'DistMult'", ":", "self", ".", "DistMult", ",", "\n", "'ComplEx'", ":", "self", ".", "ComplEx", ",", "\n", "'RotatE'", ":", "self", ".", "RotatE", ",", "\n", "}", "\n", "\n", "score", "=", "model_func", "[", "self", ".", "model_name", "]", "(", "head", ",", "relation", ",", "tail", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.TransE": [[76, 80], ["kge_model.KGEModel.gamma.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "TransE", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "score", "=", "(", "head", "+", "relation", ")", "-", "tail", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "torch", ".", "norm", "(", "score", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.DistMult": [[81, 85], ["score.sum.sum.sum"], "methods", ["None"], ["", "def", "DistMult", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "score", "=", "(", "head", "*", "relation", ")", "*", "tail", "\n", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.ComplEx": [[86, 97], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "score.sum.sum.sum"], "methods", ["None"], ["", "def", "ComplEx", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_relation", ",", "im_relation", "=", "torch", ".", "chunk", "(", "relation", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "score", "=", "re_score", "*", "re_tail", "+", "im_score", "*", "im_tail", "\n", "\n", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.kge_model.KGEModel.RotatE": [[98, 121], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "score.norm.norm.norm", "kge_model.KGEModel.gamma.item", "score.norm.norm.sum", "kge_model.KGEModel.embedding_range.item"], "methods", ["None"], ["", "def", "RotatE", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "pi", "=", "3.14159265358979323846", "\n", "\n", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "#Make phases of relations uniformly distributed in [-pi, pi]", "\n", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "\n", "re_relation", "=", "torch", ".", "cos", "(", "phase_relation", ")", "\n", "im_relation", "=", "torch", ".", "sin", "(", "phase_relation", ")", "\n", "\n", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "re_score", "=", "re_score", "-", "re_tail", "\n", "im_score", "=", "im_score", "-", "im_tail", "\n", "\n", "score", "=", "torch", ".", "stack", "(", "[", "re_score", ",", "im_score", "]", ",", "dim", "=", "0", ")", "\n", "score", "=", "score", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.__init__": [[17, 89], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "kge_model.KGEModel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "get_task_dataset_entire", "dataloader.get_task_dataset", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset_entire", "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "data", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "\n", "\n", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset_entire", "(", "data", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "\n", "", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "# embedding", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "if", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "# dataloader", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "# model", "\n", "", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "self", ".", "entity_embedding", "}", ",", "\n", "{", "'params'", ":", "self", ".", "relation_embedding", "}", "]", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.before_test_load": [[91, 96], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join"], "methods", ["None"], ["", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "\n", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "relation_embedding", "=", "state", "[", "'rel_emb'", "]", "\n", "self", ".", "entity_embedding", "=", "state", "[", "'ent_emb'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.write_training_loss": [[97, 99], ["main.KGERunner.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.write_evaluation_result": [[100, 105], ["main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.save_checkpoint": [[106, 116], ["os.listdir", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.isfile", "os.remove", "filename.split", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'rel_emb'", ":", "self", ".", "relation_embedding", ",", "\n", "'ent_emb'", ":", "self", ".", "entity_embedding", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", "\n", "# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.save_model": [[117, 120], ["os.rename", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.train": [[121, 197], ["range", "logging.info", "logging.info", "main.KGERunner.save_model", "logging.info", "main.KGERunner.before_test_load", "main.KGERunner.kge_model.train", "main.KGERunner.evaluate_multi", "main.KGERunner.evaluate", "positive_sample.to.to.to", "negative_sample.to.to.to", "subsampling_weight.to.to.to", "main.KGERunner.kge_model", "main.KGERunner.kge_model", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "main.KGERunner.optimizer.zero_grad", "loss.backward", "main.KGERunner.optimizer.step", "losses.append", "logging.info", "main.KGERunner.write_training_loss", "main.KGERunner.write_evaluation_result", "logging.info", "torch.logsigmoid().squeeze.mean", "main.KGERunner.mean", "loss.item", "np.mean", "main.KGERunner.evaluate_multi", "main.KGERunner.evaluate", "logging.info", "main.KGERunner.save_checkpoint", "logging.info", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "np.mean", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate_multi", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate_multi", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "max_epoch", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "self", ".", "kge_model", ".", "train", "(", ")", "\n", "for", "batch", "in", "self", ".", "train_dataloader", ":", "\n", "\n", "                ", "positive_sample", ",", "negative_sample", ",", "subsampling_weight", "=", "batch", "\n", "\n", "positive_sample", "=", "positive_sample", ".", "to", "(", "args", ".", "gpu", ")", "\n", "negative_sample", "=", "negative_sample", ".", "to", "(", "args", ".", "gpu", ")", "\n", "subsampling_weight", "=", "subsampling_weight", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n", "negative_score", "=", "self", ".", "kge_model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "\n", "self", ".", "relation_embedding", ",", "\n", "self", ".", "entity_embedding", ")", "\n", "\n", "# In self-adversarial sampling, we do not apply back-propagation on the sampling weight", "\n", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "positive_score", "=", "self", ".", "kge_model", "(", "positive_sample", ",", "\n", "self", ".", "relation_embedding", ",", "self", ".", "entity_embedding", ",", "neg", "=", "False", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "positive_sample_loss", "=", "-", "positive_score", ".", "mean", "(", ")", "\n", "negative_sample_loss", "=", "-", "negative_score", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "args", ".", "log_per_epoch", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'epoch: {} | loss: {:.4f}'", ".", "format", "(", "epoch", ",", "np", ".", "mean", "(", "losses", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "losses", ")", ",", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "args", ".", "check_per_epoch", "==", "0", ":", "\n", "                ", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "                    ", "eval_res", "=", "self", ".", "evaluate_multi", "(", ")", "\n", "", "else", ":", "\n", "                    ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "epoch", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "epoch", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "epoch", ")", ")", "\n", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n", "self", ".", "save_model", "(", "best_epoch", ")", "\n", "\n", "logging", ".", "info", "(", "'eval on test set'", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "if", "args", ".", "run_mode", "==", "'multi_client_train'", ":", "\n", "            ", "eval_res", "=", "self", ".", "evaluate_multi", "(", "eval_split", "=", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "eval_res", "=", "self", ".", "evaluate", "(", "eval_split", "=", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.KGERunner.evaluate": [[257, 316], ["ddict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ddict.items", "logging.info", "os.path.join", "pickle.dump", "main.KGERunner.kge_model", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "pred_list.append", "rank_list.append", "ranks.float.float.float", "enumerate", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.join", "open", "triplets.to", "labels.to", "labels.byte", "results_list.append", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.where.size", "torch.where.size", "torch.where.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "tri.tolist", "ranks[].item", "str", "str"], "methods", ["None"], ["", "", "def", "evaluate", "(", "self", ",", "eval_split", "=", "'valid'", ")", ":", "\n", "        ", "results", "=", "ddict", "(", "float", ")", "\n", "\n", "if", "eval_split", "==", "'test'", ":", "\n", "            ", "dataloader", "=", "self", ".", "test_dataloader", "\n", "", "elif", "eval_split", "==", "'valid'", ":", "\n", "            ", "dataloader", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "pred_list", "=", "[", "]", "\n", "rank_list", "=", "[", "]", "\n", "results_list", "=", "[", "]", "\n", "for", "batch", "in", "dataloader", ":", "\n", "            ", "triplets", ",", "labels", "=", "batch", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "self", ".", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n", "self", ".", "relation_embedding", ",", "\n", "self", ".", "entity_embedding", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "self", ".", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "pred_argsort", "=", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "pred_argsort", ",", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "pred_list", ".", "append", "(", "pred_argsort", "[", ":", ",", ":", "10", "]", ")", "\n", "rank_list", ".", "append", "(", "ranks", ")", "\n", "\n", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "\n", "for", "idx", ",", "tri", "in", "enumerate", "(", "triplets", ")", ":", "\n", "                ", "results_list", ".", "append", "(", "[", "tri", ".", "tolist", "(", ")", ",", "ranks", "[", "idx", "]", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "state_dir", ",", "\n", "args", ".", "name", "+", "'_'", "+", "str", "(", "args", ".", "one_client_idx", ")", "+", "'.pred'", ")", ")", "\n", "torch", ".", "save", "(", "torch", ".", "cat", "(", "rank_list", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "state_dir", ",", "\n", "args", ".", "name", "+", "'_'", "+", "str", "(", "args", ".", "one_client_idx", ")", "+", "'.rank'", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "results", "[", "k", "]", "/=", "results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "results", "[", "'mrr'", "]", ",", "results", "[", "'hits@1'", "]", ",", "\n", "results", "[", "'hits@3'", "]", ",", "results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "test_rst_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "name", "+", "'.test.rst'", ")", "\n", "pickle", ".", "dump", "(", "results_list", ",", "open", "(", "test_rst_file", ",", "'wb'", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.test_pretrain": [[318, 389], ["len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "kge_model.KGEModel", "ddict", "enumerate", "ddict.items", "logging.info", "ddict", "torch.load", "torch.load", "torch.load", "state[].detach", "state[].detach", "dataloader.get_task_dataset", "torch.utils.data.DataLoader", "ddict", "ddict.items", "logging.info", "kge_model.KGEModel.", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "ranks.float.float", "torch.numel", "torch.numel", "torch.numel", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "triplets.to", "labels.to", "labels.byte", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.where.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.argsort", "torch.argsort", "torch.argsort"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset"], ["", "", "def", "test_pretrain", "(", "args", ",", "all_data", ")", ":", "\n", "    ", "data_len", "=", "len", "(", "all_data", ")", "\n", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "kge_model", "=", "KGEModel", "(", "args", ",", "model_name", "=", "args", ".", "model", ")", "\n", "\n", "results", "=", "ddict", "(", "float", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "all_data", ")", ":", "\n", "        ", "one_results", "=", "ddict", "(", "float", ")", "\n", "state", "=", "torch", ".", "load", "(", "'../LTLE/fed_state/fb15k237_fed10_client_{}.best'", ".", "format", "(", "i", ")", ",", "map_location", "=", "args", ".", "gpu", ")", "\n", "rel_embed", "=", "state", "[", "'rel_emb'", "]", ".", "detach", "(", ")", "\n", "ent_embed", "=", "state", "[", "'ent_emb'", "]", ".", "detach", "(", ")", "\n", "\n", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "test_dataloader_tail", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "# num_workers=max(1, args.num_cpu),", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "client_res", "=", "ddict", "(", "float", ")", "\n", "for", "batch", "in", "test_dataloader_tail", ":", "\n", "            ", "triplets", ",", "labels", ",", "mode", "=", "batch", "\n", "# triplets, labels, mode = next(test_dataloader_list[i].__iter__())", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n", "rel_embed", ",", "\n", "ent_embed", ",", "\n", "mode", "=", "mode", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", ",", "\n", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "one_results", "[", "'count'", "]", "+=", "count", "\n", "one_results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "one_results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "one_results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "one_results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "one_results", "[", "k", "]", "=", "v", "/", "one_results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "one_results", "[", "'mrr'", "]", ",", "one_results", "[", "'hits@1'", "]", ",", "\n", "one_results", "[", "'hits@3'", "]", ",", "one_results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "!=", "'count'", ":", "\n", "            ", "results", "[", "k", "]", "=", "v", "/", "results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "results", "[", "'mrr'", "]", ",", "results", "[", "'hits@1'", "]", ",", "\n", "results", "[", "'hits@3'", "]", ",", "results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.init_dir": [[391, 403], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "init_dir", "(", "args", ")", ":", "\n", "# state", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "state_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "state_dir", ")", "\n", "\n", "# tensorboard log", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "tb_log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "tb_log_dir", ")", "\n", "\n", "# logging", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.main.init_logger": [[405, 421], ["os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger"], "function", ["None"], ["", "", "def", "init_logger", "(", "args", ")", ":", "\n", "    ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "name", "+", "'.log'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s | %(message)s'", ",", "\n", "datefmt", "=", "\"%Y-%m-%d %H:%M:%S\"", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "filename", "=", "log_file", ",", "\n", "filemode", "=", "'a+'", "\n", ")", "\n", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s | %(message)s'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TrainDataset.__init__": [[10, 21], ["len", "collections.defaultdict", "dataloader.TrainDataset.hr2t[].add", "numpy.array", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "nentity", ",", "negative_sample_size", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "negative_sample_size", "=", "negative_sample_size", "\n", "\n", "self", ".", "hr2t", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n", "", "for", "h", ",", "r", "in", "self", ".", "hr2t", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", "=", "np", ".", "array", "(", "list", "(", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TrainDataset.__len__": [[22, 24], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TrainDataset.__getitem__": [[25, 49], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.random.randint", "numpy.in1d", "negative_sample_list.append", "numpy.concatenate"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "positive_sample", "=", "self", ".", "triples", "[", "idx", "]", "\n", "head", ",", "relation", ",", "tail", "=", "positive_sample", "\n", "\n", "negative_sample_list", "=", "[", "]", "\n", "negative_sample_size", "=", "0", "\n", "\n", "while", "negative_sample_size", "<", "self", ".", "negative_sample_size", ":", "\n", "            ", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nentity", ",", "size", "=", "self", ".", "negative_sample_size", "*", "2", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "self", ".", "hr2t", "[", "(", "head", ",", "relation", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "negative_sample", "=", "negative_sample", "[", "mask", "]", "\n", "negative_sample_list", ".", "append", "(", "negative_sample", ")", "\n", "negative_sample_size", "+=", "negative_sample", ".", "size", "\n", "\n", "", "negative_sample", "=", "np", ".", "concatenate", "(", "negative_sample_list", ")", "[", ":", "self", ".", "negative_sample_size", "]", "\n", "negative_sample", "=", "torch", ".", "from_numpy", "(", "negative_sample", ")", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "positive_sample", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TrainDataset.collate_fn": [[50, 56], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "sample_idx", "=", "torch", ".", "tensor", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ")", "\n", "return", "positive_sample", ",", "negative_sample", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TestDataset.__init__": [[59, 70], ["len", "collections.defaultdict", "dataloader.TestDataset.hr2t_all[].add"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "triples", ",", "all_true_triples", ",", "nentity", ",", "rel_mask", "=", "None", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triple_set", "=", "all_true_triples", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "nentity", "=", "nentity", "\n", "\n", "self", ".", "rel_mask", "=", "rel_mask", "\n", "\n", "self", ".", "hr2t_all", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "all_true_triples", ":", "\n", "            ", "self", ".", "hr2t_all", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TestDataset.__len__": [[71, 73], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TestDataset.collate_fn": [[74, 79], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "triple", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "trp_label", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "return", "triple", ",", "trp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TestDataset.__getitem__": [[80, 87], ["dataloader.TestDataset.get_label", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.get_label"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "head", ",", "relation", ",", "tail", "=", "self", ".", "triples", "[", "idx", "]", "\n", "label", "=", "self", ".", "hr2t_all", "[", "(", "head", ",", "relation", ")", "]", "\n", "trp_label", "=", "self", ".", "get_label", "(", "label", ")", "\n", "triple", "=", "torch", ".", "LongTensor", "(", "(", "head", ",", "relation", ",", "tail", ")", ")", "\n", "\n", "return", "triple", ",", "trp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.TestDataset.get_label": [[88, 95], ["numpy.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "get_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "y", "=", "np", ".", "zeros", "(", "[", "self", ".", "nentity", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "e2", "in", "label", ":", "\n", "            ", "y", "[", "e2", "]", "=", "1.0", "\n", "\n", "", "return", "torch", ".", "FloatTensor", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.get_task_dataset": [[97, 119], ["len", "len", "numpy.concatenate", "dataloader.TrainDataset", "dataloader.TestDataset", "dataloader.TestDataset", "numpy.unique", "numpy.unique", "numpy.stack", "numpy.stack", "numpy.stack", "[].reshape"], "function", ["None"], ["", "", "def", "get_task_dataset", "(", "data", ",", "args", ")", ":", "\n", "    ", "nentity", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "nrelation", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ")", ")", "\n", "\n", "train_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "valid_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "test_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "all_triples", "=", "np", ".", "concatenate", "(", "[", "train_triples", ",", "valid_triples", ",", "test_triples", "]", ")", "\n", "train_dataset", "=", "TrainDataset", "(", "train_triples", ",", "nentity", ",", "args", ".", "num_neg", ")", "\n", "valid_dataset", "=", "TestDataset", "(", "valid_triples", ",", "all_triples", ",", "nentity", ")", "\n", "test_dataset", "=", "TestDataset", "(", "test_triples", ",", "all_triples", ",", "nentity", ")", "\n", "\n", "return", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.dataloader.get_all_clients": [[121, 204], ["numpy.array", "len", "tqdm.tqdm", "torch.stack().to", "torch.stack().to", "numpy.union1d().reshape", "len", "numpy.setdiff1d", "numpy.concatenate", "dataloader.TrainDataset", "dataloader.TestDataset", "dataloader.TestDataset", "torch.utils.data.DataLoader", "train_dataloader_list.append", "torch.utils.data.DataLoader", "valid_dataloader_list.append", "torch.utils.data.DataLoader", "test_dataloader_list.append", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "ent_embed_list.append", "torch.zeros", "torch.zeros", "[].reshape", "rel_freq_list.append", "numpy.unique", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.arange", "numpy.unique", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.stack", "torch.stack", "numpy.union1d", "[].reshape", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "get_all_clients", "(", "all_data", ",", "args", ")", ":", "\n", "    ", "all_rel", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "for", "data", "in", "all_data", ":", "\n", "        ", "all_rel", "=", "np", ".", "union1d", "(", "all_rel", ",", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "nrelation", "=", "len", "(", "all_rel", ")", "# all relations of training set in all clients", "\n", "\n", "train_dataloader_list", "=", "[", "]", "\n", "test_dataloader_list", "=", "[", "]", "\n", "valid_dataloader_list", "=", "[", "]", "\n", "\n", "ent_embed_list", "=", "[", "]", "\n", "\n", "rel_freq_list", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "all_data", ")", ":", "# in a client", "\n", "        ", "nentity", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", ")", ")", "# entities of training in a client", "\n", "\n", "train_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "valid_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_type_ori'", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "test_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_type_ori'", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "client_mask_rel", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "nrelation", ")", ",", "\n", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "assume_unique", "=", "True", ")", "\n", "\n", "all_triples", "=", "np", ".", "concatenate", "(", "[", "train_triples", ",", "valid_triples", ",", "test_triples", "]", ")", "# in a client", "\n", "train_dataset", "=", "TrainDataset", "(", "train_triples", ",", "nentity", ",", "args", ".", "num_neg", ")", "\n", "valid_dataset", "=", "TestDataset", "(", "valid_triples", ",", "all_triples", ",", "nentity", ",", "client_mask_rel", ")", "\n", "test_dataset", "=", "TestDataset", "(", "test_triples", ",", "all_triples", ",", "nentity", ",", "client_mask_rel", ")", "\n", "\n", "# dataloader", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "train_dataloader_list", ".", "append", "(", "train_dataloader", ")", "\n", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "valid_dataloader_list", ".", "append", "(", "valid_dataloader", ")", "\n", "\n", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "test_dataloader_list", ".", "append", "(", "test_dataloader", ")", "\n", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "\n", "'''use n of entity in train or all (train, valid, test)?'''", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "ent_embed", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "ent_embed_list", ".", "append", "(", "ent_embed", ")", "\n", "\n", "rel_freq", "=", "torch", ".", "zeros", "(", "nrelation", ")", "\n", "for", "r", "in", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ".", "reshape", "(", "-", "1", ")", ":", "\n", "            ", "rel_freq", "[", "r", "]", "+=", "1", "\n", "", "rel_freq_list", ".", "append", "(", "rel_freq", ")", "\n", "\n", "", "rel_freq_mat", "=", "torch", ".", "stack", "(", "rel_freq_list", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n", "return", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "rel_freq_mat", ",", "ent_embed_list", ",", "nrelation", "\n", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Server.__init__": [[12, 25], ["torch.Tensor", "nn.init.uniform_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nrelation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "rel_embed", "=", "torch", ".", "zeros", "(", "nrelation", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "rel_embed", "=", "torch", ".", "zeros", "(", "nrelation", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "rel_embed", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Server.send_emb": [[26, 28], ["copy.deepcopy"], "methods", ["None"], ["", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "rel_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Server.aggregation": [[29, 44], ["torch.sum", "enumerate", "torch.zeros().to.requires_grad_", "torch.zeros().to", "torch.zeros().to", "client.rel_embed.clone().detach", "torch.isnan", "rel_w[].reshape", "torch.zeros", "torch.zeros", "client.rel_embed.clone"], "methods", ["None"], ["", "def", "aggregation", "(", "self", ",", "clients", ",", "rel_update_weights", ")", ":", "\n", "        ", "agg_rel_mask", "=", "rel_update_weights", "\n", "agg_rel_mask", "[", "rel_update_weights", "!=", "0", "]", "=", "1", "\n", "\n", "rel_w_sum", "=", "torch", ".", "sum", "(", "agg_rel_mask", ",", "dim", "=", "0", ")", "\n", "rel_w", "=", "agg_rel_mask", "/", "rel_w_sum", "\n", "rel_w", "[", "torch", ".", "isnan", "(", "rel_w", ")", "]", "=", "0", "\n", "if", "self", ".", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "update_rel_embed", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "self", ".", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "update_rel_embed", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "self", ".", "args", ".", "hidden_dim", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "", "for", "i", ",", "client", "in", "enumerate", "(", "clients", ")", ":", "\n", "            ", "local_rel_embed", "=", "client", ".", "rel_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "update_rel_embed", "+=", "local_rel_embed", "*", "rel_w", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "rel_embed", "=", "update_rel_embed", ".", "requires_grad_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Client.__init__": [[47, 62], ["kge_model.KGEModel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "client_id", ",", "data", ",", "train_dataloader", ",", "\n", "valid_dataloader", ",", "test_dataloader", ",", "ent_embed", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "valid_dataloader", "=", "valid_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "ent_embed", "=", "ent_embed", "\n", "self", ".", "client_id", "=", "client_id", "\n", "\n", "self", ".", "score_local", "=", "[", "]", "\n", "self", ".", "score_global", "=", "[", "]", "\n", "\n", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "self", ".", "rel_embed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Client.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_dataloader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Client.client_update": [[66, 101], ["torch.optim.Adam", "range", "np.mean", "positive_sample.to.to.to", "negative_sample.to.to.to", "fedr.Client.kge_model", "fedr.Client.kge_model", "torch.logsigmoid().squeeze", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "losses.append", "torch.logsigmoid().squeeze.mean", "fedr.Client.mean", "loss.item", "torch.logsigmoid", "torch.softmax().detach", "torch.logsigmoid", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward"], ["", "def", "client_update", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "self", ".", "rel_embed", "}", ",", "\n", "{", "'params'", ":", "self", ".", "ent_embed", "}", "]", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "local_epoch", ")", ":", "\n", "            ", "for", "batch", "in", "self", ".", "train_dataloader", ":", "\n", "                ", "positive_sample", ",", "negative_sample", ",", "sample_idx", "=", "batch", "\n", "\n", "positive_sample", "=", "positive_sample", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "negative_sample", "=", "negative_sample", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "negative_score", "=", "self", ".", "kge_model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ")", "\n", "\n", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "self", ".", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "positive_score", "=", "self", ".", "kge_model", "(", "positive_sample", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ",", "neg", "=", "False", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "positive_sample_loss", "=", "-", "positive_score", ".", "mean", "(", ")", "\n", "negative_sample_loss", "=", "-", "negative_score", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.Client.client_eval": [[102, 138], ["ddict", "ddict.items", "fedr.Client.kge_model", "torch.arange", "torch.where", "ranks.float.float.float", "torch.numel", "torch.sum().item", "torch.sum().item", "triplets.to", "labels.to", "labels.byte", "torch.numel", "torch.where.size", "torch.argsort", "torch.sum", "torch.sum", "torch.ones_like", "torch.argsort"], "methods", ["None"], ["", "def", "client_eval", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "if", "istest", ":", "\n", "            ", "dataloader", "=", "self", ".", "test_dataloader", "\n", "", "else", ":", "\n", "            ", "dataloader", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "results", "=", "ddict", "(", "float", ")", "\n", "for", "batch", "in", "dataloader", ":", "\n", "            ", "triplets", ",", "labels", "=", "batch", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "self", ".", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "self", ".", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", ",", "\n", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "results", "[", "k", "]", "/=", "results", "[", "'count'", "]", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.__init__": [[141, 163], ["dataloader.get_all_clients", "len", "fedr.Server", "sum", "sum", "fedr.Client", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "all_data", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "self", ".", "rel_freq_mat", ",", "ent_embed_list", ",", "nrelation", "=", "get_all_clients", "(", "all_data", ",", "args", ")", "\n", "\n", "self", ".", "args", ".", "nrelation", "=", "nrelation", "# question", "\n", "\n", "# client", "\n", "self", ".", "num_clients", "=", "len", "(", "train_dataloader_list", ")", "\n", "self", ".", "clients", "=", "[", "\n", "Client", "(", "args", ",", "i", ",", "all_data", "[", "i", "]", ",", "train_dataloader_list", "[", "i", "]", ",", "valid_dataloader_list", "[", "i", "]", ",", "\n", "test_dataloader_list", "[", "i", "]", ",", "ent_embed_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_clients", ")", "\n", "]", "\n", "\n", "self", ".", "server", "=", "Server", "(", "args", ",", "nrelation", ")", "\n", "\n", "self", ".", "total_test_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "test_dataloader", ".", "dataset", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "test_eval_weights", "=", "[", "len", "(", "client", ".", "test_dataloader", ".", "dataset", ")", "/", "self", ".", "total_test_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n", "self", ".", "total_valid_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "valid_dataloader", ".", "dataset", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "valid_eval_weights", "=", "[", "len", "(", "client", ".", "valid_dataloader", ".", "dataset", ")", "/", "self", ".", "total_valid_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.write_training_loss": [[164, 166], ["fedr.FedR.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.write_evaluation_result": [[167, 172], ["fedr.FedR.args.writer.add_scalar", "fedr.FedR.args.writer.add_scalar", "fedr.FedR.args.writer.add_scalar", "fedr.FedR.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.save_checkpoint": [[173, 183], ["os.listdir", "torch.save", "os.path.join", "os.path.isfile", "os.remove", "filename.split", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'rel_embed'", ":", "self", ".", "server", ".", "rel_embed", ",", "\n", "'ent_embed'", ":", "[", "client", ".", "ent_embed", "for", "client", "in", "self", ".", "clients", "]", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", "\n", "# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.save_model": [[184, 187], ["os.rename", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.send_emb": [[188, 191], ["enumerate", "fedr.FedR.server.send_emb"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb"], ["", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "rel_embed", "=", "self", ".", "server", ".", "send_emb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.train": [[192, 252], ["range", "logging.info", "logging.info", "fedr.FedR.save_model", "fedr.FedR.before_test_load", "fedr.FedR.evaluate", "max", "np.random.choice", "fedr.FedR.send_emb", "iter", "fedr.FedR.server.aggregation", "logging.info", "fedr.FedR.write_training_loss", "loss_plot_result.append", "round", "fedr.FedR.clients[].client_update", "np.mean", "np.mean", "fedr.FedR.evaluate", "fedr.FedR.write_evaluation_result", "mrr_plot_result.append", "logging.info", "np.mean", "logging.info", "fedr.FedR.save_checkpoint", "logging.info", "open", "pickle.dump", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.aggregation", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "mrr_plot_result", "=", "[", "]", "\n", "loss_plot_result", "=", "[", "]", "\n", "\n", "for", "num_round", "in", "range", "(", "self", ".", "args", ".", "max_round", ")", ":", "\n", "            ", "n_sample", "=", "max", "(", "round", "(", "self", ".", "args", ".", "fraction", "*", "self", ".", "num_clients", ")", ",", "1", ")", "\n", "sample_set", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_clients", ",", "n_sample", ",", "replace", "=", "False", ")", "\n", "\n", "self", ".", "send_emb", "(", ")", "\n", "round_loss", "=", "0", "\n", "for", "k", "in", "iter", "(", "sample_set", ")", ":", "\n", "                ", "client_loss", "=", "self", ".", "clients", "[", "k", "]", ".", "client_update", "(", ")", "\n", "round_loss", "+=", "client_loss", "\n", "", "round_loss", "/=", "n_sample", "\n", "self", ".", "server", ".", "aggregation", "(", "self", ".", "clients", ",", "self", ".", "rel_freq_mat", ")", "\n", "\n", "logging", ".", "info", "(", "'round: {} | loss: {:.4f}'", ".", "format", "(", "num_round", ",", "np", ".", "mean", "(", "round_loss", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "round_loss", ")", ",", "num_round", ")", "\n", "\n", "loss_plot_result", ".", "append", "(", "np", ".", "mean", "(", "round_loss", ")", ")", "\n", "\n", "if", "num_round", "%", "self", ".", "args", ".", "check_per_round", "==", "0", "and", "num_round", "!=", "0", ":", "\n", "                ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "num_round", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "num_round", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "num_round", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "mrr_plot_result", ".", "append", "(", "eval_res", "[", "'mrr'", "]", ")", "\n", "\n", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "num_round", ")", ")", "\n", "\n", "loss_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_loss.pkl'", "\n", "with", "open", "(", "loss_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "loss_plot_result", ",", "fp", ")", "\n", "\n", "", "mrr_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_mrr.pkl'", "\n", "with", "open", "(", "mrr_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "mrr_plot_result", ",", "fp", ")", "\n", "\n", "", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n", "self", ".", "save_model", "(", "best_epoch", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "self", ".", "evaluate", "(", "istest", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.before_test_load": [[253, 258], ["torch.load", "enumerate", "os.path.join"], "methods", ["None"], ["", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "server", ".", "rel_embed", "=", "state", "[", "'rel_embed'", "]", "\n", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "ent_embed", "=", "state", "[", "'ent_embed'", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.None.fedr.FedR.evaluate": [[259, 281], ["fedr.FedR.send_emb", "ddict", "enumerate", "logging.info", "client.client_eval", "logging.info", "client.client_eval.items"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["", "", "def", "evaluate", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "self", ".", "send_emb", "(", ")", "\n", "result", "=", "ddict", "(", "int", ")", "\n", "if", "istest", ":", "\n", "            ", "weights", "=", "self", ".", "test_eval_weights", "\n", "", "else", ":", "\n", "            ", "weights", "=", "self", ".", "valid_eval_weights", "\n", "", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client_res", "=", "client", ".", "client_eval", "(", "istest", ")", "\n", "\n", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "client_res", "[", "'mrr'", "]", ",", "client_res", "[", "'hits@1'", "]", ",", "\n", "client_res", "[", "'hits@3'", "]", ",", "client_res", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "client_res", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "k", "]", "+=", "v", "*", "weights", "[", "idx", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "result", "[", "'mrr'", "]", ",", "result", "[", "'hits@1'", "]", ",", "\n", "result", "[", "'hits@3'", "]", ",", "result", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.__init__": [[21, 34], ["models.NoGE_GCN_QuatE().to", "models.NoGE_GCN_QuatE"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "client_id", ",", "data", ",", "train_dataloader", ",", "\n", "valid_dataloader", ",", "test_dataloader", ",", "ent_embed", ",", "train_adj", ",", "nrelation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "# all triples", "\n", "self", ".", "ent_embed", "=", "ent_embed", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "valid_dataloader", "=", "valid_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "client_id", "=", "client_id", "\n", "self", ".", "train_adj", "=", "train_adj", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "self", ".", "kge_model", "=", "NoGE_GCN_QuatE", "(", "args", ".", "emb_dim", ",", "args", ".", "hid_dim", ",", "train_adj", ",", "ent_embed", ".", "shape", "[", "0", "]", ",", "nrelation", ",", "self", ".", "args", ".", "num_layers", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.__len__": [[37, 39], ["len"], "methods", ["None"], ["\n", "", "def", "client_update", "(", "self", ")", ":", "\n", "        ", "train_data_idxs", "=", "self", ".", "get_data_idxs", "(", "self", ".", "train_dataloader", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.client_update": [[40, 84], ["NoGE.Client.get_data_idxs", "torch.optim.Adam", "torch.LongTensor().to", "NoGE.Client.get_er_vocab", "list", "range", "NoGE.Client.kge_model.parameters", "NoGE.Client.keys", "NoGE.Client.kge_model.train", "time.time", "numpy.random.shuffle", "range", "time.time", "train_time.append", "torch.LongTensor", "len", "NoGE.Client.get_batch", "torch.optim.Adam.zero_grad", "torch.tensor().to", "torch.tensor().to", "NoGE.Client.kge_model.forward", "NoGE.Client.kge_model.loss", "NoGE.Client.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "losses.append", "logging.info", "NoGE.Client.kge_model.parameters", "NoGE.Client.item", "NoGE.Client.client_eval", "torch.tensor", "torch.tensor", "numpy.mean", "numpy.mean", "range", "targets.size"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_er_vocab", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.forward", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["adj", "=", "self", ".", "train_adj", "\n", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "kge_model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "lst_indexes", "=", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "nrelation", "+", "self", ".", "ent_embed", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "er_vocab", "=", "self", ".", "get_er_vocab", "(", "train_data_idxs", ")", "\n", "er_vocab_pairs", "=", "list", "(", "er_vocab", ".", "keys", "(", ")", ")", "\n", "\n", "max_valid", "=", "0.0", "\n", "for", "it", "in", "range", "(", "1", ",", "self", ".", "args", ".", "num_iterations", "+", "1", ")", ":", "\n", "            ", "self", ".", "kge_model", ".", "train", "(", ")", "\n", "train_time", "=", "[", "]", "\n", "losses", "=", "[", "]", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "er_vocab_pairs", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "er_vocab_pairs", ")", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "data_batch", ",", "targets", "=", "self", ".", "get_batch", "(", "er_vocab", ",", "er_vocab_pairs", ",", "j", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "e1_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "0", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "r_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "1", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "predictions", "=", "self", ".", "kge_model", ".", "forward", "(", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", "\n", "if", "self", ".", "args", ".", "label_smoothing", ":", "\n", "                    ", "targets", "=", "(", "(", "1.0", "-", "self", ".", "args", ".", "label_smoothing", ")", "*", "targets", ")", "+", "(", "1.0", "/", "targets", ".", "size", "(", "1", ")", ")", "\n", "", "loss", "=", "self", ".", "kge_model", ".", "loss", "(", "predictions", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "kge_model", ".", "parameters", "(", ")", ",", "0.5", ")", "# prevent the exploding gradient problem", "\n", "opt", ".", "step", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "train_time", ".", "append", "(", "end", "-", "start", ")", "\n", "if", "it", "%", "100", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"Epoch: {}, --> Loss: {:.4f}, --> Time: {:.8f}\"", ".", "format", "(", "it", ",", "np", ".", "mean", "(", "losses", ")", ",", "np", ".", "mean", "(", "train_time", ")", ")", ")", "\n", "\n", "# evaluation", "\n", "", "if", "it", ">", "self", ".", "args", ".", "eval_after", "and", "it", "%", "self", ".", "args", ".", "eval_step", "==", "0", ":", "\n", "                ", "tmp_mrr", "=", "self", ".", "client_eval", "(", "istest", "=", "False", ")", "[", "'mrr'", "]", "\n", "if", "max_valid", "<", "tmp_mrr", ":", "\n", "                    ", "max_valid", "=", "tmp_mrr", "\n", "best_epoch", "=", "it", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n", "\n", "#return np.mean(train_time)", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.get_data_idxs": [[89, 92], ["range", "len"], "methods", ["None"], ["return", "data_idxs", "\n", "\n", "", "def", "get_er_vocab", "(", "self", ",", "data", ")", ":", "\n", "        ", "er_vocab", "=", "ddict", "(", "list", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.get_er_vocab": [[93, 98], ["collections.defaultdict", "er_vocab[].append"], "methods", ["None"], ["for", "triple", "in", "data", ":", "\n", "            ", "er_vocab", "[", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", ")", "]", ".", "append", "(", "triple", "[", "2", "]", ")", "\n", "", "return", "er_vocab", "\n", "\n", "", "def", "get_batch", "(", "self", ",", "er_vocab", ",", "er_vocab_pairs", ",", "idx", ")", ":", "\n", "        ", "batch", "=", "er_vocab_pairs", "[", "idx", ":", "idx", "+", "self", ".", "args", ".", "batch_size", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.get_batch": [[99, 106], ["numpy.zeros", "enumerate", "torch.FloatTensor", "numpy.array", "torch.FloatTensor.to", "len"], "methods", ["None"], ["targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", "self", ".", "nentity", ")", ")", "\n", "for", "idx", ",", "pair", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "targets", "[", "idx", ",", "er_vocab", "[", "pair", "]", "]", "=", "1.", "\n", "", "targets", "=", "torch", ".", "FloatTensor", "(", "targets", ")", "\n", "return", "np", ".", "array", "(", "batch", ")", ",", "targets", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "", "def", "client_eval", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "if", "istest", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.Client.client_eval": [[107, 158], ["torch.LongTensor().to", "collections.defaultdict", "NoGE.Client.kge_model.eval", "numpy.mean", "torch.no_grad", "range", "NoGE.Client.get_data_idxs", "NoGE.Client.get_er_vocab", "range", "numpy.mean", "torch.LongTensor", "hits.append", "NoGE.Client.get_data_idxs", "len", "NoGE.Client.get_batch", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "NoGE.Client.kge_model.forward().detach", "range", "torch.sort", "sort_idxs.cpu().numpy.cpu().numpy.cpu().numpy", "range", "numpy.array", "predictions[].item", "ranks.append", "range", "torch.tensor", "torch.tensor", "torch.tensor", "NoGE.Client.kge_model.forward", "sort_idxs.cpu().numpy.cpu().numpy.cpu", "range", "numpy.where", "hits[].append", "hits[].append", "e2_idx[].item"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_er_vocab", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.forward"], ["            ", "data", "=", "self", ".", "test_dataloader", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "lst_indexes", "=", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "nrelation", "+", "self", ".", "ent_embed", ".", "shape", "[", "0", "]", ")", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "results", "=", "ddict", "(", "float", ")", "\n", "\n", "self", ".", "kge_model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "hits", "=", "[", "]", "\n", "ranks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "hits", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "test_data_idxs", "=", "self", ".", "get_data_idxs", "(", "data", ")", "\n", "er_vocab", "=", "self", ".", "get_er_vocab", "(", "self", ".", "get_data_idxs", "(", "self", ".", "data", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "test_data_idxs", ")", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "data_batch", ",", "_", "=", "self", ".", "get_batch", "(", "er_vocab", ",", "test_data_idxs", ",", "i", ")", "\n", "e1_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "0", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "r_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "1", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "e2_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "2", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "predictions", "=", "self", ".", "kge_model", ".", "forward", "(", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", ".", "detach", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "filt", "=", "er_vocab", "[", "(", "data_batch", "[", "j", "]", "[", "0", "]", ",", "data_batch", "[", "j", "]", "[", "1", "]", ")", "]", "\n", "target_value", "=", "predictions", "[", "j", ",", "e2_idx", "[", "j", "]", "]", ".", "item", "(", ")", "\n", "predictions", "[", "j", ",", "filt", "]", "=", "0.0", "\n", "predictions", "[", "j", ",", "e2_idx", "[", "j", "]", "]", "=", "target_value", "\n", "\n", "", "sort_values", ",", "sort_idxs", "=", "torch", ".", "sort", "(", "predictions", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "sort_idxs", "=", "sort_idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "j", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "rank", "=", "np", ".", "where", "(", "sort_idxs", "[", "j", "]", "==", "e2_idx", "[", "j", "]", ".", "item", "(", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "ranks", ".", "append", "(", "rank", "+", "1", ")", "\n", "for", "hits_level", "in", "range", "(", "10", ")", ":", "\n", "                        ", "if", "rank", "<=", "hits_level", ":", "\n", "                            ", "hits", "[", "hits_level", "]", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                            ", "hits", "[", "hits_level", "]", ".", "append", "(", "0.0", ")", "\n", "\n", "", "", "", "", "", "results", "[", "'mrr'", "]", "=", "np", ".", "mean", "(", "1.", "/", "np", ".", "array", "(", "ranks", ")", ")", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "            ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "=", "np", ".", "mean", "(", "hits", "[", "k", "-", "1", "]", ")", "#* 100", "\n", "\n", "", "return", "results", "\n", "\n", "", "", "class", "NoGE", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "all_data", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.NoGE.__init__": [[160, 173], ["dataloader.get_all_clients", "len", "NoGE.Client", "range"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients"], ["\n", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "all_dataloader_list", ",", "self", ".", "rel_freq_mat", ",", "ent_embed_list", ",", "train_adj_list", ",", "nrelation", "=", "get_all_clients", "(", "all_data", ",", "args", ")", "\n", "\n", "self", ".", "args", ".", "nentity", "=", "nentity", "\n", "\n", "# client", "\n", "self", ".", "num_clients", "=", "len", "(", "train_dataloader_list", ")", "\n", "self", ".", "clients", "=", "[", "\n", "Client", "(", "args", ",", "i", ",", "all_dataloader_list", "[", "i", "]", ",", "train_dataloader_list", "[", "i", "]", ",", "valid_dataloader_list", "[", "i", "]", ",", "\n", "test_dataloader_list", "[", "i", "]", ",", "ent_embed_list", "[", "i", "]", ",", "train_adj_list", "[", "i", "]", ",", "nrelation", ")", "for", "i", "in", "range", "(", "self", ".", "num_clients", ")", "\n", "]", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.NoGE.NoGE.train": [[175, 198], ["range", "logging.info", "NoGE.NoGE.clients[].client_update", "NoGE.NoGE.clients[].client_eval", "logging.info", "result_mrr.append", "result_h1.append", "result_h3.append", "result_h10.append", "sum", "len", "sum", "len", "sum", "len", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["        ", "result_mrr", "=", "[", "]", "\n", "result_h1", "=", "[", "]", "\n", "result_h3", "=", "[", "]", "\n", "result_h10", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "args", ".", "num_client", ")", ":", "\n", "            ", "self", ".", "clients", "[", "k", "]", ".", "client_update", "(", ")", "\n", "client_res", "=", "self", ".", "clients", "[", "k", "]", ".", "client_eval", "(", "istest", "=", "True", ")", "\n", "\n", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "client_res", "[", "'mrr'", "]", ",", "client_res", "[", "'hits@1'", "]", ",", "\n", "client_res", "[", "'hits@3'", "]", ",", "client_res", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "result_mrr", ".", "append", "(", "client_res", "[", "'mrr'", "]", ")", "\n", "result_h1", ".", "append", "(", "client_res", "[", "'hits@1'", "]", ")", "\n", "result_h3", ".", "append", "(", "client_res", "[", "'hits@3'", "]", ")", "\n", "result_h10", ".", "append", "(", "client_res", "[", "'hits@10'", "]", ")", "\n", "\n", "", "logging", ".", "info", "(", "'avg mrr: {:.4f}, avg hits@1: {:.4f}, avg hits@3: {:.4f}, avg hits@10: {:.4f}'", ".", "format", "(", "\n", "sum", "(", "result_mrr", ")", "/", "len", "(", "result_mrr", ")", ",", "sum", "(", "result_h1", ")", "/", "len", "(", "result_h1", ")", ",", "\n", "sum", "(", "result_h3", ")", "/", "len", "(", "result_h3", ")", ",", "sum", "(", "result_h10", ")", "/", "len", "(", "result_h10", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.NoGE_GCN_QuatE.__init__": [[16, 36], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "torch.nn.BCELoss", "models.NoGE_GCN_QuatE.lst_gcn.append", "models.NoGE_GCN_QuatE.lst_gcn.append", "gnn_layers.GraphConvolution", "gnn_layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "hid_dim", ",", "adj", ",", "n_entities", ",", "n_relations", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "NoGE_GCN_QuatE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "n_entities", "=", "n_entities", "\n", "self", ".", "n_relations", "=", "n_relations", "\n", "\n", "self", ".", "embeddings", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "n_entities", "+", "self", ".", "n_relations", ",", "emb_dim", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "embeddings", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "lst_gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "if", "_layer", "==", "0", ":", "\n", "                ", "self", ".", "lst_gcn", ".", "append", "(", "GraphConvolution", "(", "emb_dim", ",", "hid_dim", ",", "act", "=", "torch", ".", "tanh", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lst_gcn", ".", "append", "(", "GraphConvolution", "(", "hid_dim", ",", "hid_dim", ",", "act", "=", "torch", ".", "tanh", ")", ")", "\n", "\n", "", "", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hid_dim", ")", "\n", "self", ".", "hidden_dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.NoGE_GCN_QuatE.forward": [[37, 50], ["models.NoGE_GCN_QuatE.embeddings", "range", "models.normalization", "models.vec_vec_wise_multiplication", "models.NoGE_GCN_QuatE.hidden_dropout2", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "X[].t"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.normalization", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.vec_vec_wise_multiplication"], ["", "def", "forward", "(", "self", ",", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", ":", "\n", "        ", "X", "=", "self", ".", "embeddings", "(", "lst_indexes", ")", "\n", "#print(1, self.adj.get_device())", "\n", "for", "_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "X", "=", "self", ".", "lst_gcn", "[", "_layer", "]", "(", "X", ",", "self", ".", "adj", ")", "\n", "# change", "\n", "# h = X[e1_idx]", "\n", "# r = X[r_idx + self.n_entities]", "\n", "", "h", "=", "X", "[", "e1_idx", "+", "self", ".", "n_relations", "]", "\n", "r", "=", "X", "[", "r_idx", "]", "\n", "normalized_r", "=", "normalization", "(", "r", ")", "\n", "hr", "=", "vec_vec_wise_multiplication", "(", "h", ",", "normalized_r", ")", "# following the 1-N scoring strategy", "\n", "hr", "=", "self", ".", "hidden_dropout2", "(", "hr", ")", "\n", "#change", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.normalization": [[52, 58], ["quaternion.reshape.reshape", "quaternion.reshape.reshape", "quaternion.reshape.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["hrt", "=", "torch", ".", "mm", "(", "hr", ",", "X", "[", "self", ".", "n_relations", ":", "]", ".", "t", "(", ")", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "hrt", ")", "\n", "return", "pred", "\n", "\n", "# Quaternion operations", "\n", "", "", "def", "normalization", "(", "quaternion", ",", "split_dim", "=", "1", ")", ":", "# vectorized quaternion bs x 4dim", "\n", "    ", "size", "=", "quaternion", ".", "size", "(", "split_dim", ")", "//", "4", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.make_wise_quaternion": [[59, 69], ["torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "quaternion.unsqueeze.unsqueeze", "quaternion.unsqueeze.size", "quaternion.unsqueeze.size"], "function", ["None"], ["quaternion", "=", "quaternion", ".", "reshape", "(", "-", "1", ",", "4", ",", "size", ")", "# bs x 4 x dim", "\n", "quaternion", "=", "quaternion", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "quaternion", "**", "2", ",", "1", ",", "True", ")", ")", "# quaternion / norm", "\n", "quaternion", "=", "quaternion", ".", "reshape", "(", "-", "1", ",", "4", "*", "size", ")", "\n", "return", "quaternion", "\n", "\n", "", "def", "make_wise_quaternion", "(", "quaternion", ")", ":", "# for vector * vector quaternion element-wise multiplication", "\n", "    ", "if", "len", "(", "quaternion", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "quaternion", "=", "quaternion", ".", "unsqueeze", "(", "0", ")", "\n", "", "size", "=", "quaternion", ".", "size", "(", "1", ")", "//", "4", "\n", "r", ",", "i", ",", "j", ",", "k", "=", "torch", ".", "split", "(", "quaternion", ",", "size", ",", "dim", "=", "1", ")", "\n", "r2", "=", "torch", ".", "cat", "(", "[", "r", ",", "-", "i", ",", "-", "j", ",", "-", "k", "]", ",", "dim", "=", "1", ")", "# 0, 1, 2, 3 --> bs x 4dim", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.get_quaternion_wise_mul": [[70, 75], ["torch.sum.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum.size"], "function", ["None"], ["i2", "=", "torch", ".", "cat", "(", "[", "i", ",", "r", ",", "-", "k", ",", "j", "]", ",", "dim", "=", "1", ")", "# 1, 0, 3, 2", "\n", "j2", "=", "torch", ".", "cat", "(", "[", "j", ",", "k", ",", "r", ",", "-", "i", "]", ",", "dim", "=", "1", ")", "# 2, 3, 0, 1", "\n", "k2", "=", "torch", ".", "cat", "(", "[", "k", ",", "-", "j", ",", "i", ",", "r", "]", ",", "dim", "=", "1", ")", "# 3, 2, 1, 0", "\n", "return", "r2", ",", "i2", ",", "j2", ",", "k2", "\n", "\n", "", "def", "get_quaternion_wise_mul", "(", "quaternion", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.vec_vec_wise_multiplication": [[76, 85], ["models.make_wise_quaternion", "models.get_quaternion_wise_mul", "models.get_quaternion_wise_mul", "models.get_quaternion_wise_mul", "models.get_quaternion_wise_mul", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.make_wise_quaternion", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.get_quaternion_wise_mul", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.get_quaternion_wise_mul", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.get_quaternion_wise_mul", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.models.get_quaternion_wise_mul"], ["    ", "size", "=", "quaternion", ".", "size", "(", "1", ")", "//", "4", "\n", "quaternion", "=", "quaternion", ".", "view", "(", "-", "1", ",", "4", ",", "size", ")", "\n", "quaternion", "=", "torch", ".", "sum", "(", "quaternion", ",", "1", ")", "\n", "return", "quaternion", "\n", "\n", "", "def", "vec_vec_wise_multiplication", "(", "q", ",", "p", ")", ":", "# vector * vector", "\n", "    ", "q_r", ",", "q_i", ",", "q_j", ",", "q_k", "=", "make_wise_quaternion", "(", "q", ")", "# bs x 4dim", "\n", "\n", "qp_r", "=", "get_quaternion_wise_mul", "(", "q_r", "*", "p", ")", "# qrpr\u2212qipi\u2212qjpj\u2212qkpk", "\n", "qp_i", "=", "get_quaternion_wise_mul", "(", "q_i", "*", "p", ")", "# qipr+qrpi\u2212qkpj+qjpk", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.QGNN_layer.__init__": [[36, 46], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gnn_layers.QGNN_layer.reset_parameters", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "act", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "QGNN_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "act", "=", "act", "\n", "#", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "in_features", "//", "4", ",", "self", ".", "out_features", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.QGNN_layer.reset_parameters": [[47, 50], ["math.sqrt", "gnn_layers.QGNN_layer.weight.data.uniform_", "gnn_layers.QGNN_layer.weight.size", "gnn_layers.QGNN_layer.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "self", ".", "weight", ".", "size", "(", "0", ")", "+", "self", ".", "weight", ".", "size", "(", "1", ")", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.QGNN_layer.forward": [[51, 57], ["gnn_layers.make_quaternion_mul", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "gnn_layers.QGNN_layer.bn", "gnn_layers.QGNN_layer.act"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.make_quaternion_mul"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "hamilton", "=", "make_quaternion_mul", "(", "self", ".", "weight", ")", "\n", "support", "=", "torch", ".", "mm", "(", "input", ",", "hamilton", ")", "# Hamilton product, quaternion multiplication! Concatenate 4 components of the quaternion input for a faster implementation.", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.DQGNN_layer.__init__": [[61, 72], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gnn_layers.DQGNN_layer.reset_parameters", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "act", "=", "torch", ".", "tanh", ")", ":", "\n", "        ", "super", "(", "DQGNN_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "act", "=", "act", "\n", "#", "\n", "self", ".", "A", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "in_features", "//", "8", ",", "self", ".", "out_features", "//", "2", ")", ")", "# (A, B) = A + eB, e^2 = 0", "\n", "self", ".", "B", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "in_features", "//", "8", ",", "self", ".", "out_features", "//", "2", ")", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.DQGNN_layer.reset_parameters": [[73, 77], ["math.sqrt", "gnn_layers.DQGNN_layer.A.data.uniform_", "gnn_layers.DQGNN_layer.B.data.uniform_", "gnn_layers.DQGNN_layer.A.size", "gnn_layers.DQGNN_layer.A.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "math", ".", "sqrt", "(", "6.0", "/", "(", "self", ".", "A", ".", "size", "(", "0", ")", "+", "self", ".", "A", ".", "size", "(", "1", ")", ")", ")", "\n", "self", ".", "A", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "B", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.DQGNN_layer.forward": [[78, 83], ["gnn_layers.dual_quaternion_mul", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "gnn_layers.DQGNN_layer.bn", "gnn_layers.DQGNN_layer.act"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.dual_quaternion_mul"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "dual_quaternion_mul", "(", "self", ".", "A", ",", "self", ".", "B", ",", "input", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "return", "self", ".", "act", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.__init__": [[86, 99], ["super().__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gnn_layers.GraphConvolution.reset_parameters", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "gnn_layers.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "act", "=", "torch", ".", "relu", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "bn", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.reset_parameters": [[100, 105], ["gnn_layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "gnn_layers.GraphConvolution.bias.data.uniform_", "gnn_layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.GraphConvolution.forward": [[106, 114], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "gnn_layers.GraphConvolution.bn", "gnn_layers.GraphConvolution.act"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "#.cuda()", "\n", "#print(support.get_device(), adj.get_device())", "\n", "#print(adj.shape, support.shape)", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "bias", "\n", "", "output", "=", "self", ".", "bn", "(", "output", ")", "\n", "return", "self", ".", "act", "(", "output", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.make_quaternion_mul": [[9, 21], ["torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "kernel.size", "kernel.size", "torch.cat.size"], "function", ["None"], ["def", "make_quaternion_mul", "(", "kernel", ")", ":", "\n", "    ", "\"\"\"\" The constructed 'hamilton' W is a modified version of the quaternion representation,\n    thus doing tf.matmul(Input,W) is equivalent to W * Inputs. * denotes the Hamilton product.\"\"\"", "\n", "dim", "=", "kernel", ".", "size", "(", "1", ")", "//", "4", "\n", "r", ",", "i", ",", "j", ",", "k", "=", "torch", ".", "split", "(", "kernel", ",", "[", "dim", ",", "dim", ",", "dim", ",", "dim", "]", ",", "dim", "=", "1", ")", "\n", "r2", "=", "torch", ".", "cat", "(", "[", "r", ",", "-", "i", ",", "-", "j", ",", "-", "k", "]", ",", "dim", "=", "0", ")", "# 0, 1, 2, 3", "\n", "i2", "=", "torch", ".", "cat", "(", "[", "i", ",", "r", ",", "-", "k", ",", "j", "]", ",", "dim", "=", "0", ")", "# 1, 0, 3, 2", "\n", "j2", "=", "torch", ".", "cat", "(", "[", "j", ",", "k", ",", "r", ",", "-", "i", "]", ",", "dim", "=", "0", ")", "# 2, 3, 0, 1", "\n", "k2", "=", "torch", ".", "cat", "(", "[", "k", ",", "-", "j", ",", "i", ",", "r", "]", ",", "dim", "=", "0", ")", "# 3, 2, 1, 0", "\n", "hamilton", "=", "torch", ".", "cat", "(", "[", "r2", ",", "i2", ",", "j2", ",", "k2", "]", ",", "dim", "=", "1", ")", "# Concatenate 4 quaternion components for a faster implementation.", "\n", "assert", "kernel", ".", "size", "(", "1", ")", "==", "hamilton", ".", "size", "(", "1", ")", "\n", "return", "hamilton", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.dual_quaternion_mul": [[22, 33], ["torch.split", "torch.split", "torch.split", "gnn_layers.make_quaternion_mul", "gnn_layers.make_quaternion_mul", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "input.size"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.make_quaternion_mul", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.gnn_layers.make_quaternion_mul"], ["", "def", "dual_quaternion_mul", "(", "A", ",", "B", ",", "input", ")", ":", "\n", "    ", "'''(A, B) * (C, D) = (A * C, A * D + B * C)'''", "\n", "dim", "=", "input", ".", "size", "(", "1", ")", "//", "2", "\n", "C", ",", "D", "=", "torch", ".", "split", "(", "input", ",", "[", "dim", ",", "dim", "]", ",", "dim", "=", "1", ")", "\n", "A_hamilton", "=", "make_quaternion_mul", "(", "A", ")", "\n", "B_hamilton", "=", "make_quaternion_mul", "(", "B", ")", "\n", "AC", "=", "torch", ".", "mm", "(", "C", ",", "A_hamilton", ")", "\n", "AD", "=", "torch", ".", "mm", "(", "D", ",", "A_hamilton", ")", "\n", "BC", "=", "torch", ".", "mm", "(", "C", ",", "B_hamilton", ")", "\n", "AD_plus_BC", "=", "AD", "+", "BC", "\n", "return", "torch", ".", "cat", "(", "[", "AC", ",", "AD_plus_BC", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.main.parse_args": [[23, 67], ["argparse.ArgumentParser", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.parse_args"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.main.parse_args"], ["", "else", ":", "\n", "            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "\n", "", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "# embedding", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "if", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "# dataloader", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.main.init_dir": [[68, 80], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.main.init_logger": [[82, 98], ["os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger"], "function", ["None"], ["\n", "# model", "\n", "", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "self", ".", "entity_embedding", "}", ",", "\n", "{", "'params'", ":", "self", ".", "relation_embedding", "}", "]", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "\n", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "relation_embedding", "=", "state", "[", "'rel_emb'", "]", "\n", "self", ".", "entity_embedding", "=", "state", "[", "'ent_emb'", "]", "\n", "\n", "", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Server.__init__": [[22, 26], ["torch.Tensor().to", "torch.Tensor", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nrelation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "relation_embeddings", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "nrelation", ",", "args", ".", "emb_dim", ")", ")", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Server.send_emb": [[27, 37], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy"], "methods", ["None"], ["", "def", "send_emb", "(", "self", ",", "init", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "isSecure", "==", "1", ":", "\n", "            ", "if", "init", "==", "0", ":", "\n", "                ", "server_rel_emb", "=", "copy", ".", "deepcopy", "(", "self", ".", "relation_embeddings", ")", "\n", "", "elif", "init", "==", "1", ":", "\n", "                ", "server_rel_emb", "=", "copy", ".", "deepcopy", "(", "self", ".", "relation_embeddings", ")", "\n", "server_rel_emb", "=", "server_rel_emb", "/", "(", "10", "**", "self", ".", "args", ".", "quantization_bit", ")", "\n", "", "", "else", ":", "\n", "            ", "server_rel_emb", "=", "copy", ".", "deepcopy", "(", "self", ".", "relation_embeddings", ")", "\n", "", "return", "server_rel_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Server.aggregation": [[38, 63], ["torch.sum", "torch.Tensor().to", "enumerate", "functools.reduce", "client.ent_embed.clone().detach", "torch.isnan", "torch.Tensor", "numpy.nonzero().cpu().detach().numpy", "ent_w[].reshape", "numpy.zeros", "range", "client.ent_embed.clone", "numpy.nonzero().cpu().detach", "numpy.nonzero().cpu", "numpy.nonzero"], "methods", ["None"], ["", "def", "aggregation", "(", "self", ",", "clients", ",", "rel_update_weights", ")", ":", "\n", "        ", "agg_rel_mask", "=", "rel_update_weights", "\n", "agg_rel_mask", "[", "rel_update_weights", "!=", "0", "]", "=", "1", "\n", "\n", "rel_w_sum", "=", "torch", ".", "sum", "(", "agg_rel_mask", ",", "dim", "=", "0", ")", "\n", "rel_w", "=", "agg_rel_mask", "/", "rel_w_sum", "\n", "rel_w", "[", "torch", ".", "isnan", "(", "rel_w", ")", "]", "=", "0", "\n", "\n", "update_rel_embed", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "self", ".", "nrelation", ",", "self", ".", "args", ".", "emb_dim", ")", ")", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "# PSI", "\n", "if", "self", ".", "args", ".", "isSecure", "==", "2", ":", "\n", "            ", "mask_index", "=", "[", "np", ".", "nonzero", "(", "rel_w", "[", "i", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_client", ")", "]", "\n", "mask_psi_ind", "=", "reduce", "(", "np", ".", "intersect1d", ",", "mask_index", ")", "\n", "\n", "", "for", "i", ",", "client", "in", "enumerate", "(", "clients", ")", ":", "\n", "            ", "local_rel_embed", "=", "client", ".", "rel_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "self", ".", "args", ".", "isSecure", "==", "1", ":", "\n", "                ", "local_rel_embed", "=", "(", "local_rel_embed", "*", "(", "10", "**", "self", ".", "args", ".", "quantization_bit", ")", ")", ".", "long", "(", ")", ".", "float", "(", ")", "\n", "", "update_rel_embed", "+=", "local_rel_embed", "*", "rel_w", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "isSecure", "==", "2", ":", "\n", "            ", "self", ".", "relation_embeddings", "[", "mask_psi_ind", "]", "=", "update_rel_embed", "[", "mask_psi_ind", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_embeddings", "=", "update_rel_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.__init__": [[65, 79], ["models.NoGE_GCN_QuatE().to", "models.NoGE_GCN_QuatE"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "client_id", ",", "data", ",", "train_dataloader", ",", "\n", "valid_dataloader", ",", "test_dataloader", ",", "ent_embed", ",", "train_adj", ",", "nrelation", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "# all triples", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "valid_dataloader", "=", "valid_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "ent_embed", "=", "ent_embed", "\n", "self", ".", "client_id", "=", "client_id", "\n", "self", ".", "train_adj", "=", "train_adj", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "self", ".", "kge_model", "=", "NoGE_GCN_QuatE", "(", "args", ".", "emb_dim", ",", "args", ".", "hid_dim", ",", "train_adj", ",", "ent_embed", ".", "shape", "[", "0", "]", ",", "nrelation", ",", "self", ".", "args", ".", "num_layers", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "self", ".", "rel_embed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.__len__": [[80, 82], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.client_update": [[83, 116], ["fedNoGE.Client.get_data_idxs", "torch.optim.Adam", "torch.LongTensor().to", "fedNoGE.Client.get_er_vocab", "list", "range", "copy.deepcopy", "copy.deepcopy", "numpy.mean", "fedNoGE.Client.kge_model.parameters", "fedNoGE.Client.keys", "fedNoGE.Client.kge_model.train", "numpy.random.shuffle", "range", "torch.LongTensor", "len", "fedNoGE.Client.get_batch", "torch.optim.Adam.zero_grad", "torch.tensor().to", "torch.tensor().to", "fedNoGE.Client.kge_model.forward", "fedNoGE.Client.kge_model.loss", "fedNoGE.Client.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "losses.append", "fedNoGE.Client.kge_model.parameters", "fedNoGE.Client.item", "torch.tensor", "torch.tensor", "range", "targets.size"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_er_vocab", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.forward", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward"], ["", "def", "client_update", "(", "self", ")", ":", "\n", "        ", "train_data_idxs", "=", "self", ".", "get_data_idxs", "(", "self", ".", "train_dataloader", ")", "\n", "adj", "=", "self", ".", "train_adj", "\n", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "kge_model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "learning_rate", ")", "\n", "\n", "lst_indexes", "=", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "ent_embed", ".", "shape", "[", "0", "]", "+", "self", ".", "nrelation", ")", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "er_vocab", "=", "self", ".", "get_er_vocab", "(", "train_data_idxs", ")", "\n", "er_vocab_pairs", "=", "list", "(", "er_vocab", ".", "keys", "(", ")", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "it", "in", "range", "(", "1", ",", "self", ".", "args", ".", "local_epoch", "+", "1", ")", ":", "\n", "            ", "self", ".", "kge_model", ".", "train", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "er_vocab_pairs", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "len", "(", "er_vocab_pairs", ")", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "data_batch", ",", "targets", "=", "self", ".", "get_batch", "(", "er_vocab", ",", "er_vocab_pairs", ",", "j", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "e1_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "0", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "r_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "1", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "predictions", "=", "self", ".", "kge_model", ".", "forward", "(", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", "\n", "if", "self", ".", "args", ".", "label_smoothing", ":", "\n", "                    ", "targets", "=", "(", "(", "1.0", "-", "self", ".", "args", ".", "label_smoothing", ")", "*", "targets", ")", "+", "(", "1.0", "/", "targets", ".", "size", "(", "1", ")", ")", "\n", "", "loss", "=", "self", ".", "kge_model", ".", "loss", "(", "predictions", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "kge_model", ".", "parameters", "(", ")", ",", "0.5", ")", "# prevent the exploding gradient problem", "\n", "opt", ".", "step", "(", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# self.ent_embed = copy.deepcopy(self.kge_model.embeddings.weight.data[:self.ent_embed.shape[0]])", "\n", "# self.rel_embed = copy.deepcopy(self.kge_model.embeddings.weight.data[self.ent_embed.shape[0]:])", "\n", "", "", "self", ".", "rel_embed", "=", "copy", ".", "deepcopy", "(", "self", ".", "kge_model", ".", "embeddings", ".", "weight", ".", "data", "[", ":", "self", ".", "nrelation", "]", ")", "\n", "self", ".", "ent_embed", "=", "copy", ".", "deepcopy", "(", "self", ".", "kge_model", ".", "embeddings", ".", "weight", ".", "data", "[", "self", ".", "nrelation", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs": [[117, 120], ["range", "len"], "methods", ["None"], ["return", "np", ".", "mean", "(", "losses", ")", "\n", "\n", "", "def", "get_data_idxs", "(", "self", ",", "data", ")", ":", "\n", "        ", "data_idxs", "=", "[", "(", "data", "[", "i", "]", "[", "0", "]", ",", "data", "[", "i", "]", "[", "1", "]", ",", "data", "[", "i", "]", "[", "2", "]", ")", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_er_vocab": [[121, 126], ["collections.defaultdict", "er_vocab[].append"], "methods", ["None"], ["return", "data_idxs", "\n", "\n", "", "def", "get_er_vocab", "(", "self", ",", "data", ")", ":", "\n", "        ", "er_vocab", "=", "ddict", "(", "list", ")", "\n", "for", "triple", "in", "data", ":", "\n", "            ", "er_vocab", "[", "(", "triple", "[", "0", "]", ",", "triple", "[", "1", "]", ")", "]", ".", "append", "(", "triple", "[", "2", "]", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_batch": [[127, 134], ["numpy.zeros", "enumerate", "torch.FloatTensor", "numpy.array", "torch.FloatTensor.to", "len"], "methods", ["None"], ["", "return", "er_vocab", "\n", "\n", "", "def", "get_batch", "(", "self", ",", "er_vocab", ",", "er_vocab_pairs", ",", "idx", ")", ":", "\n", "        ", "batch", "=", "er_vocab_pairs", "[", "idx", ":", "idx", "+", "self", ".", "args", ".", "batch_size", "]", "\n", "targets", "=", "np", ".", "zeros", "(", "(", "len", "(", "batch", ")", ",", "self", ".", "ent_embed", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "idx", ",", "pair", "in", "enumerate", "(", "batch", ")", ":", "\n", "            ", "targets", "[", "idx", ",", "er_vocab", "[", "pair", "]", "]", "=", "1.", "\n", "", "targets", "=", "torch", ".", "FloatTensor", "(", "targets", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.client_eval": [[135, 188], ["torch.LongTensor().to", "collections.defaultdict", "fedNoGE.Client.kge_model.eval", "numpy.mean", "torch.no_grad", "range", "fedNoGE.Client.get_data_idxs", "fedNoGE.Client.get_er_vocab", "range", "numpy.mean", "torch.LongTensor", "hits.append", "fedNoGE.Client.get_data_idxs", "len", "fedNoGE.Client.get_batch", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "fedNoGE.Client.kge_model.forward().detach", "range", "torch.sort", "sort_idxs.cpu().numpy.cpu().numpy.cpu().numpy", "range", "numpy.array", "predictions[].item", "ranks.append", "range", "torch.tensor", "torch.tensor", "torch.tensor", "fedNoGE.Client.kge_model.forward", "sort_idxs.cpu().numpy.cpu().numpy.cpu", "range", "numpy.where", "hits[].append", "hits[].append", "e2_idx[].item"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_er_vocab", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_data_idxs", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.Client.get_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.forward"], ["return", "np", ".", "array", "(", "batch", ")", ",", "targets", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "", "def", "client_eval", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "if", "istest", ":", "\n", "            ", "data", "=", "self", ".", "test_dataloader", "\n", "", "else", ":", "\n", "            ", "data", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "lst_indexes", "=", "torch", ".", "LongTensor", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "ent_embed", ".", "shape", "[", "0", "]", "+", "self", ".", "nrelation", ")", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "results", "=", "ddict", "(", "float", ")", "\n", "\n", "self", ".", "kge_model", ".", "eval", "(", ")", "\n", "# self.kge_model.embeddings.weight.data[:self.ent_embed.shape[0]] = self.ent_embed", "\n", "# self.kge_model.embeddings.weight.data[self.ent_embed.shape[0]:] = self.rel_embed", "\n", "self", ".", "kge_model", ".", "embeddings", ".", "weight", ".", "data", "[", "self", ".", "nrelation", ":", "]", "=", "self", ".", "ent_embed", "\n", "self", ".", "kge_model", ".", "embeddings", ".", "weight", ".", "data", "[", ":", "self", ".", "nrelation", "]", "=", "self", ".", "rel_embed", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "hits", "=", "[", "]", "\n", "ranks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "hits", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "test_data_idxs", "=", "self", ".", "get_data_idxs", "(", "data", ")", "\n", "er_vocab", "=", "self", ".", "get_er_vocab", "(", "self", ".", "get_data_idxs", "(", "self", ".", "data", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "test_data_idxs", ")", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "data_batch", ",", "_", "=", "self", ".", "get_batch", "(", "er_vocab", ",", "test_data_idxs", ",", "i", ")", "\n", "e1_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "0", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "r_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "1", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "e2_idx", "=", "torch", ".", "tensor", "(", "data_batch", "[", ":", ",", "2", "]", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "predictions", "=", "self", ".", "kge_model", ".", "forward", "(", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", ".", "detach", "(", ")", "\n", "\n", "for", "j", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "filt", "=", "er_vocab", "[", "(", "data_batch", "[", "j", "]", "[", "0", "]", ",", "data_batch", "[", "j", "]", "[", "1", "]", ")", "]", "\n", "target_value", "=", "predictions", "[", "j", ",", "e2_idx", "[", "j", "]", "]", ".", "item", "(", ")", "\n", "predictions", "[", "j", ",", "filt", "]", "=", "0.0", "\n", "predictions", "[", "j", ",", "e2_idx", "[", "j", "]", "]", "=", "target_value", "\n", "\n", "", "sort_values", ",", "sort_idxs", "=", "torch", ".", "sort", "(", "predictions", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "sort_idxs", "=", "sort_idxs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "j", "in", "range", "(", "data_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "rank", "=", "np", ".", "where", "(", "sort_idxs", "[", "j", "]", "==", "e2_idx", "[", "j", "]", ".", "item", "(", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "ranks", ".", "append", "(", "rank", "+", "1", ")", "\n", "for", "hits_level", "in", "range", "(", "10", ")", ":", "\n", "                        ", "if", "rank", "<=", "hits_level", ":", "\n", "                            ", "hits", "[", "hits_level", "]", ".", "append", "(", "1.0", ")", "\n", "", "else", ":", "\n", "                            ", "hits", "[", "hits_level", "]", ".", "append", "(", "0.0", ")", "\n", "\n", "", "", "", "", "", "results", "[", "'mrr'", "]", "=", "np", ".", "mean", "(", "1.", "/", "np", ".", "array", "(", "ranks", ")", ")", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.__init__": [[191, 213], ["dataloader.get_all_clients", "len", "fedNoGE.Server", "sum", "sum", "fedNoGE.Client", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients"], ["", "return", "results", "\n", "\n", "\n", "", "", "class", "fedNoGE", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ",", "all_data", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "all_dataloader_list", ",", "self", ".", "rel_freq_mat", ",", "ent_embed_list", ",", "train_adj_list", ",", "nrelation", "=", "get_all_clients", "(", "all_data", ",", "args", ")", "\n", "\n", "self", ".", "args", ".", "nrelation", "=", "nrelation", "\n", "\n", "# client", "\n", "self", ".", "num_clients", "=", "len", "(", "train_dataloader_list", ")", "\n", "self", ".", "clients", "=", "[", "\n", "Client", "(", "args", ",", "i", ",", "all_dataloader_list", "[", "i", "]", ",", "train_dataloader_list", "[", "i", "]", ",", "valid_dataloader_list", "[", "i", "]", ",", "\n", "test_dataloader_list", "[", "i", "]", ",", "ent_embed_list", "[", "i", "]", ",", "train_adj_list", "[", "i", "]", ",", "nrelation", ")", "for", "i", "in", "range", "(", "self", ".", "num_clients", ")", "\n", "]", "\n", "\n", "self", ".", "server", "=", "Server", "(", "args", ",", "nrelation", ")", "\n", "\n", "self", ".", "total_test_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "test_dataloader", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "test_eval_weights", "=", "[", "len", "(", "client", ".", "test_dataloader", ")", "/", "self", ".", "total_test_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.write_training_loss": [[214, 216], ["fedNoGE.fedNoGE.args.writer.add_scalar"], "methods", ["None"], ["\n", "self", ".", "total_valid_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "valid_dataloader", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "valid_eval_weights", "=", "[", "len", "(", "client", ".", "valid_dataloader", ")", "/", "self", ".", "total_valid_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.write_evaluation_result": [[217, 222], ["fedNoGE.fedNoGE.args.writer.add_scalar", "fedNoGE.fedNoGE.args.writer.add_scalar", "fedNoGE.fedNoGE.args.writer.add_scalar", "fedNoGE.fedNoGE.args.writer.add_scalar"], "methods", ["None"], ["\n", "", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n", "", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.save_checkpoint": [[223, 233], ["os.listdir", "torch.save", "os.path.join", "os.path.isfile", "os.remove", "filename.split", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n", "", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'rel_embed'", ":", "self", ".", "server", ".", "relation_embeddings", ",", "\n", "'ent_embed'", ":", "[", "client", ".", "ent_embed", "for", "client", "in", "self", ".", "clients", "]", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.save_model": [[234, 237], ["os.rename", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.send_emb": [[238, 241], ["enumerate", "fedNoGE.fedNoGE.server.send_emb"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb"], ["", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.train": [[242, 305], ["range", "logging.info", "logging.info", "fedNoGE.fedNoGE.save_model", "fedNoGE.fedNoGE.before_test_load", "fedNoGE.fedNoGE.evaluate", "max", "numpy.random.choice", "iter", "fedNoGE.fedNoGE.server.aggregation", "logging.info", "fedNoGE.fedNoGE.write_training_loss", "loss_plot_result.append", "round", "fedNoGE.fedNoGE.send_emb", "fedNoGE.fedNoGE.send_emb", "fedNoGE.fedNoGE.clients[].client_update", "numpy.mean", "numpy.mean", "fedNoGE.fedNoGE.evaluate", "fedNoGE.fedNoGE.write_evaluation_result", "mrr_plot_result.append", "logging.info", "numpy.mean", "logging.info", "fedNoGE.fedNoGE.save_checkpoint", "logging.info", "open", "pickle.dump", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.aggregation", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["", "def", "send_emb", "(", "self", ",", "init", ")", ":", "\n", "        ", "for", "k", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "rel_embed", "=", "self", ".", "server", ".", "send_emb", "(", "init", ")", "\n", "\n", "", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "mrr_plot_result", "=", "[", "]", "\n", "loss_plot_result", "=", "[", "]", "\n", "\n", "for", "num_round", "in", "range", "(", "self", ".", "args", ".", "max_round", ")", ":", "\n", "            ", "n_sample", "=", "max", "(", "round", "(", "self", ".", "args", ".", "fraction", "*", "self", ".", "num_clients", ")", ",", "1", ")", "\n", "sample_set", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_clients", ",", "n_sample", ",", "replace", "=", "False", ")", "\n", "\n", "if", "num_round", "==", "0", ":", "\n", "                ", "self", ".", "send_emb", "(", "init", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "send_emb", "(", "init", "=", "1", ")", "\n", "\n", "", "round_loss", "=", "0", "\n", "for", "k", "in", "iter", "(", "sample_set", ")", ":", "\n", "                ", "client_loss", "=", "self", ".", "clients", "[", "k", "]", ".", "client_update", "(", ")", "\n", "round_loss", "+=", "client_loss", "\n", "", "round_loss", "/=", "n_sample", "\n", "self", ".", "server", ".", "aggregation", "(", "self", ".", "clients", ",", "self", ".", "rel_freq_mat", ")", "\n", "\n", "logging", ".", "info", "(", "'round: {} | loss: {:.4f}'", ".", "format", "(", "num_round", ",", "np", ".", "mean", "(", "round_loss", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "round_loss", ")", ",", "num_round", ")", "\n", "\n", "loss_plot_result", ".", "append", "(", "np", ".", "mean", "(", "round_loss", ")", ")", "\n", "\n", "if", "num_round", "%", "self", ".", "args", ".", "check_per_round", "==", "0", "and", "num_round", "!=", "0", ":", "\n", "                ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "num_round", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "num_round", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "num_round", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "mrr_plot_result", ".", "append", "(", "eval_res", "[", "'mrr'", "]", ")", "\n", "\n", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "num_round", ")", ")", "\n", "\n", "loss_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_loss.pkl'", "\n", "with", "open", "(", "loss_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "loss_plot_result", ",", "fp", ")", "\n", "\n", "", "mrr_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_mrr.pkl'", "\n", "with", "open", "(", "mrr_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "mrr_plot_result", ",", "fp", ")", "\n", "", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.before_test_load": [[306, 311], ["torch.load", "enumerate", "os.path.join"], "methods", ["None"], ["self", ".", "save_model", "(", "best_epoch", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "self", ".", "evaluate", "(", "istest", "=", "True", ")", "\n", "\n", "", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.fedNoGE.fedNoGE.evaluate": [[312, 334], ["fedNoGE.fedNoGE.send_emb", "collections.defaultdict", "enumerate", "logging.info", "client.client_eval", "logging.info", "client.client_eval.items"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["self", ".", "server", ".", "relation_embeddings", "=", "state", "[", "'rel_embed'", "]", "\n", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "ent_embed", "=", "state", "[", "'ent_embed'", "]", "[", "idx", "]", "\n", "\n", "", "", "def", "evaluate", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "self", ".", "send_emb", "(", "init", "=", "1", ")", "\n", "result", "=", "ddict", "(", "int", ")", "\n", "if", "istest", ":", "\n", "            ", "weights", "=", "self", ".", "test_eval_weights", "\n", "", "else", ":", "\n", "            ", "weights", "=", "self", ".", "valid_eval_weights", "\n", "", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client_res", "=", "client", ".", "client_eval", "(", "istest", ")", "\n", "\n", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "client_res", "[", "'mrr'", "]", ",", "client_res", "[", "'hits@1'", "]", ",", "\n", "client_res", "[", "'hits@3'", "]", ",", "client_res", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "client_res", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "k", "]", "+=", "v", "*", "weights", "[", "idx", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "result", "[", "'mrr'", "]", ",", "result", "[", "'hits@1'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.dataloader.get_all_clients": [[8, 69], ["numpy.array", "len", "tqdm.tqdm", "torch.stack().to", "torch.stack().to", "numpy.union1d", "len", "numpy.setdiff1d", "numpy.concatenate", "utils_NoGE.compute_weighted_adj_matrix().to", "train_dataloader_list.append", "valid_dataloader_list.append", "test_dataloader_list.append", "all_dataloader_list.append", "train_adj_list.append", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "rel_embed_list.append", "torch.zeros", "torch.zeros", "[].reshape", "ent_freq_list.append", "[].reshape", "numpy.unique", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.arange", "numpy.unique", "train_triples.tolist", "valid_triples.tolist", "test_triples.tolist", "np.concatenate.tolist", "torch.stack", "torch.stack", "[].reshape", "utils_NoGE.compute_weighted_adj_matrix", "train_triples.tolist"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.compute_weighted_adj_matrix"], ["\n", "class", "TrainDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "triples", ",", "nentity", ",", "negative_sample_size", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "negative_sample_size", "=", "negative_sample_size", "\n", "\n", "self", ".", "hr2t", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n", "", "for", "h", ",", "r", "in", "self", ".", "hr2t", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", "=", "np", ".", "array", "(", "list", "(", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ")", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "positive_sample", "=", "self", ".", "triples", "[", "idx", "]", "\n", "head", ",", "relation", ",", "tail", "=", "positive_sample", "\n", "\n", "negative_sample_list", "=", "[", "]", "\n", "negative_sample_size", "=", "0", "\n", "\n", "while", "negative_sample_size", "<", "self", ".", "negative_sample_size", ":", "\n", "            ", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nentity", ",", "size", "=", "self", ".", "negative_sample_size", "*", "2", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "self", ".", "hr2t", "[", "(", "head", ",", "relation", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "negative_sample", "=", "negative_sample", "[", "mask", "]", "\n", "negative_sample_list", ".", "append", "(", "negative_sample", ")", "\n", "negative_sample_size", "+=", "negative_sample", ".", "size", "\n", "\n", "", "negative_sample", "=", "np", ".", "concatenate", "(", "negative_sample_list", ")", "[", ":", "self", ".", "negative_sample_size", "]", "\n", "negative_sample", "=", "torch", ".", "from_numpy", "(", "negative_sample", ")", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "positive_sample", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "idx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "sample_idx", "=", "torch", ".", "tensor", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ")", "\n", "return", "positive_sample", ",", "negative_sample", ",", "sample_idx", "\n", "\n", "\n", "", "", "class", "TestDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "triples", ",", "all_true_triples", ",", "nentity", ",", "rel_mask", "=", "None", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triple_set", "=", "all_true_triples", "\n", "self", ".", "triples", "=", "triples", "\n", "self", ".", "nentity", "=", "nentity", "\n", "\n", "self", ".", "rel_mask", "=", "rel_mask", "\n", "\n", "self", ".", "hr2t_all", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "all_true_triples", ":", "\n", "            ", "self", ".", "hr2t_all", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.normalize_sparse": [[17, 25], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["def", "normalize_sparse", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.sparse_mx_to_torch_sparse_tensor": [[26, 34], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.compute_weighted_adj_matrix": [[36, 101], ["collections.Counter", "collections.Counter.items", "scipy.sparse.csr_matrix", "sparse.csr_matrix.sum", "numpy.array().flatten", "collections.Counter.items", "scipy.sparse.csr_matrix", "utils_NoGE.normalize_sparse", "utils_NoGE.sparse_mx_to_torch_sparse_tensor", "enumerate", "row_indxs.append", "col_indxs.append", "dat_values.append", "sum", "row_indxs.append", "col_indxs.append", "weighted_edges.append", "scipy.sparse.eye", "max", "min", "collections.Counter.values", "numpy.array", "sparse.csr_matrix.sum", "len", "range"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.normalize_sparse", "home.repos.pwc.inspect_result.taokz_FedR.NoGE.utils_NoGE.sparse_mx_to_torch_sparse_tensor"], ["", "def", "compute_weighted_adj_matrix", "(", "data", ",", "num_relations", ")", ":", "#change: num_entities", "\n", "\n", "# Skipgrams", "\n", "    ", "back_window", "=", "2", "\n", "front_window", "=", "2", "\n", "skipgram_counts", "=", "Counter", "(", ")", "\n", "\n", "for", "tokens", "in", "data", ":", "\n", "        ", "tokens", "[", "0", "]", "+=", "num_relations", "\n", "tokens", "[", "2", "]", "+=", "num_relations", "#change: tokens[1] += num_entities", "\n", "for", "ii_word", ",", "word", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "ii_context_min", "=", "max", "(", "0", ",", "ii_word", "-", "back_window", ")", "\n", "ii_context_max", "=", "min", "(", "len", "(", "tokens", ")", "-", "1", ",", "ii_word", "+", "front_window", ")", "\n", "ii_contexts", "=", "[", "\n", "ii", "for", "ii", "in", "range", "(", "ii_context_min", ",", "ii_context_max", "+", "1", ")", "\n", "if", "ii", "!=", "ii_word", "]", "\n", "for", "ii_context", "in", "ii_contexts", ":", "\n", "                ", "skipgram", "=", "(", "tokens", "[", "ii_word", "]", ",", "tokens", "[", "ii_context", "]", ")", "\n", "skipgram_counts", "[", "skipgram", "]", "+=", "1", "\n", "\n", "# Word-Word Count Matrix", "\n", "", "", "", "row_indxs", "=", "[", "]", "\n", "col_indxs", "=", "[", "]", "\n", "dat_values", "=", "[", "]", "\n", "for", "(", "tok1", ",", "tok2", ")", ",", "sg_count", "in", "skipgram_counts", ".", "items", "(", ")", ":", "\n", "        ", "row_indxs", ".", "append", "(", "tok1", ")", "\n", "col_indxs", ".", "append", "(", "tok2", ")", "\n", "dat_values", ".", "append", "(", "sg_count", ")", "\n", "", "wwcnt_mat", "=", "sparse", ".", "csr_matrix", "(", "(", "dat_values", ",", "(", "row_indxs", ",", "col_indxs", ")", ")", ")", "\n", "num_skipgrams", "=", "wwcnt_mat", ".", "sum", "(", ")", "\n", "assert", "(", "sum", "(", "skipgram_counts", ".", "values", "(", ")", ")", "==", "num_skipgrams", ")", "\n", "\n", "# for creating sparse matrices", "\n", "row_indxs", "=", "[", "]", "\n", "col_indxs", "=", "[", "]", "\n", "weighted_edges", "=", "[", "]", "\n", "# reusable quantities", "\n", "sum_over_contexts", "=", "np", ".", "array", "(", "wwcnt_mat", ".", "sum", "(", "axis", "=", "1", ")", ")", ".", "flatten", "(", ")", "\n", "# computing weights for edges", "\n", "for", "(", "tok_word", ",", "tok_context", ")", ",", "sg_count", "in", "skipgram_counts", ".", "items", "(", ")", ":", "\n", "        ", "nwc", "=", "sg_count", "\n", "Pwc", "=", "nwc", "/", "num_skipgrams", "\n", "nw", "=", "sum_over_contexts", "[", "tok_word", "]", "\n", "Pw", "=", "nw", "/", "num_skipgrams", "\n", "#", "\n", "edge_val", "=", "Pwc", "/", "Pw", "# for entity-entity edges", "\n", "if", "tok_word", "<", "num_relations", "or", "tok_context", "<", "num_relations", ":", "# for relation-entity edges #change: tok_word > num_entities or tok_context > num_entities", "\n", "            ", "edge_val", "=", "Pwc", "\n", "", "row_indxs", ".", "append", "(", "tok_word", ")", "\n", "col_indxs", ".", "append", "(", "tok_context", ")", "\n", "weighted_edges", ".", "append", "(", "edge_val", ")", "\n", "", "edge_mat", "=", "sparse", ".", "csr_matrix", "(", "(", "weighted_edges", ",", "(", "row_indxs", ",", "col_indxs", ")", ")", ")", "\n", "# adding self-loop", "\n", "adj", "=", "edge_mat", "+", "sparse", ".", "eye", "(", "edge_mat", ".", "shape", "[", "0", "]", ",", "format", "=", "\"csr\"", ")", "\n", "# print(adj)", "\n", "adj", "=", "normalize_sparse", "(", "adj", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "return", "adj", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.__init__": [[11, 18], ["torch.Module.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model_name", ")", ":", "\n", "        ", "super", "(", "KGEModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "[", "args", ".", "gamma", "]", ")", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.forward": [[20, 75], ["torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "torch.index_select().unsqueeze", "entity_embedding.unsqueeze", "tail_part.size", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select().view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "tail_part.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample", ",", "relation_embedding", ",", "entity_embedding", ",", "neg", "=", "True", ")", ":", "\n", "        ", "if", "not", "neg", ":", "\n", "            ", "head", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "sample", "[", ":", ",", "2", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "head_part", ",", "tail_part", "=", "sample", "\n", "batch_size", "=", "head_part", ".", "shape", "[", "0", "]", "\n", "\n", "head", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "0", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "relation", "=", "torch", ".", "index_select", "(", "\n", "relation_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "head_part", "[", ":", ",", "1", "]", "\n", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "tail_part", "==", "None", ":", "\n", "                ", "tail", "=", "entity_embedding", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "negative_sample_size", "=", "tail_part", ".", "size", "(", "1", ")", "\n", "tail", "=", "torch", ".", "index_select", "(", "\n", "entity_embedding", ",", "\n", "dim", "=", "0", ",", "\n", "index", "=", "tail_part", ".", "view", "(", "-", "1", ")", "\n", ")", ".", "view", "(", "batch_size", ",", "negative_sample_size", ",", "-", "1", ")", "\n", "\n", "", "", "model_func", "=", "{", "\n", "'TransE'", ":", "self", ".", "TransE", ",", "\n", "'DistMult'", ":", "self", ".", "DistMult", ",", "\n", "'ComplEx'", ":", "self", ".", "ComplEx", ",", "\n", "'RotatE'", ":", "self", ".", "RotatE", ",", "\n", "}", "\n", "\n", "score", "=", "model_func", "[", "self", ".", "model_name", "]", "(", "head", ",", "relation", ",", "tail", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.TransE": [[76, 80], ["kge_model.KGEModel.gamma.item", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "TransE", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "score", "=", "(", "head", "+", "relation", ")", "-", "tail", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "torch", ".", "norm", "(", "score", ",", "p", "=", "1", ",", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.DistMult": [[81, 85], ["score.sum.sum.sum"], "methods", ["None"], ["", "def", "DistMult", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "score", "=", "(", "head", "*", "relation", ")", "*", "tail", "\n", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.ComplEx": [[86, 97], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "score.sum.sum.sum"], "methods", ["None"], ["", "def", "ComplEx", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_relation", ",", "im_relation", "=", "torch", ".", "chunk", "(", "relation", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "score", "=", "re_score", "*", "re_tail", "+", "im_score", "*", "im_tail", "\n", "\n", "score", "=", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.kge_model.KGEModel.RotatE": [[98, 121], ["torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "score.norm.norm.norm", "kge_model.KGEModel.gamma.item", "score.norm.norm.sum", "kge_model.KGEModel.embedding_range.item"], "methods", ["None"], ["", "def", "RotatE", "(", "self", ",", "head", ",", "relation", ",", "tail", ")", ":", "\n", "        ", "pi", "=", "3.14159265358979323846", "\n", "\n", "re_head", ",", "im_head", "=", "torch", ".", "chunk", "(", "head", ",", "2", ",", "dim", "=", "2", ")", "\n", "re_tail", ",", "im_tail", "=", "torch", ".", "chunk", "(", "tail", ",", "2", ",", "dim", "=", "2", ")", "\n", "\n", "#Make phases of relations uniformly distributed in [-pi, pi]", "\n", "\n", "phase_relation", "=", "relation", "/", "(", "self", ".", "embedding_range", ".", "item", "(", ")", "/", "pi", ")", "\n", "\n", "re_relation", "=", "torch", ".", "cos", "(", "phase_relation", ")", "\n", "im_relation", "=", "torch", ".", "sin", "(", "phase_relation", ")", "\n", "\n", "re_score", "=", "re_head", "*", "re_relation", "-", "im_head", "*", "im_relation", "\n", "im_score", "=", "re_head", "*", "im_relation", "+", "im_head", "*", "re_relation", "\n", "re_score", "=", "re_score", "-", "re_tail", "\n", "im_score", "=", "im_score", "-", "im_tail", "\n", "\n", "score", "=", "torch", ".", "stack", "(", "[", "re_score", ",", "im_score", "]", ",", "dim", "=", "0", ")", "\n", "score", "=", "score", ".", "norm", "(", "dim", "=", "0", ")", "\n", "\n", "score", "=", "self", ".", "gamma", ".", "item", "(", ")", "-", "score", ".", "sum", "(", "dim", "=", "2", ")", "\n", "return", "score", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.__init__": [[22, 94], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "kge_model.KGEModel", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "dataloader.get_task_dataset_entire", "dataloader.get_task_dataset", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.Tensor.item", "torch.Tensor.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset_entire", "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset"], ["            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset_entire", "(", "data", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "\n", "", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "# embedding", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "if", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "# dataloader", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "# model", "\n", "", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "self", ".", "entity_embedding", "}", ",", "\n", "{", "'params'", ":", "self", ".", "relation_embedding", "}", "]", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "\n", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "relation_embedding", "=", "state", "[", "'rel_emb'", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.before_test_load": [[96, 101], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.join"], "methods", ["None"], ["\n", "", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n", "", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.write_training_loss": [[126, 128], ["main.KGERunner.args.writer.add_scalar"], "methods", ["None"], ["for", "epoch", "in", "range", "(", "self", ".", "args", ".", "max_epoch", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "self", ".", "kge_model", ".", "train", "(", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.write_evaluation_result": [[129, 134], ["main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar", "main.KGERunner.args.writer.add_scalar"], "methods", ["None"], ["for", "batch", "in", "self", ".", "train_dataloader", ":", "\n", "\n", "                ", "positive_sample", ",", "negative_sample", ",", "subsampling_weight", "=", "batch", "\n", "\n", "positive_sample", "=", "positive_sample", ".", "to", "(", "args", ".", "gpu", ")", "\n", "negative_sample", "=", "negative_sample", ".", "to", "(", "args", ".", "gpu", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.save_checkpoint": [[135, 145], ["os.listdir", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.isfile", "os.remove", "filename.split", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["subsampling_weight", "=", "subsampling_weight", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n", "negative_score", "=", "self", ".", "kge_model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "\n", "self", ".", "relation_embedding", ",", "\n", "self", ".", "entity_embedding", ")", "\n", "\n", "# In self-adversarial sampling, we do not apply back-propagation on the sampling weight", "\n", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "positive_score", "=", "self", ".", "kge_model", "(", "positive_sample", ",", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.save_model": [[146, 149], ["os.rename", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["self", ".", "relation_embedding", ",", "self", ".", "entity_embedding", ",", "neg", "=", "False", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.train": [[150, 226], ["range", "logging.info", "logging.info", "main.KGERunner.save_model", "logging.info", "main.KGERunner.before_test_load", "main.KGERunner.kge_model.train", "main.KGERunner.evaluate_multi", "main.KGERunner.evaluate", "positive_sample.to.to.to", "negative_sample.to.to.to", "subsampling_weight.to.to.to", "main.KGERunner.kge_model", "main.KGERunner.kge_model", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "main.KGERunner.optimizer.zero_grad", "loss.backward", "main.KGERunner.optimizer.step", "losses.append", "logging.info", "main.KGERunner.write_training_loss", "main.KGERunner.write_evaluation_result", "logging.info", "torch.logsigmoid().squeeze.mean", "main.KGERunner.mean", "loss.item", "np.mean", "main.KGERunner.evaluate_multi", "main.KGERunner.evaluate", "logging.info", "main.KGERunner.save_checkpoint", "logging.info", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "np.mean", "torch.softmax().detach", "torch.softmax().detach", "torch.softmax().detach", "torch.logsigmoid", "torch.logsigmoid", "torch.logsigmoid", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate_multi", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate_multi", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["positive_sample_loss", "=", "-", "positive_score", ".", "mean", "(", ")", "\n", "negative_sample_loss", "=", "-", "negative_score", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "args", ".", "log_per_epoch", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'epoch: {} | loss: {:.4f}'", ".", "format", "(", "epoch", ",", "np", ".", "mean", "(", "losses", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "losses", ")", ",", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "self", ".", "args", ".", "check_per_epoch", "==", "0", ":", "\n", "                ", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "                    ", "eval_res", "=", "self", ".", "evaluate_multi", "(", ")", "\n", "", "else", ":", "\n", "                    ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "epoch", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "epoch", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "epoch", ")", ")", "\n", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n", "self", ".", "save_model", "(", "best_epoch", ")", "\n", "\n", "logging", ".", "info", "(", "'eval on test set'", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "if", "args", ".", "run_mode", "==", "'multi_client_train'", ":", "\n", "            ", "eval_res", "=", "self", ".", "evaluate_multi", "(", "eval_split", "=", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "eval_res", "=", "self", ".", "evaluate", "(", "eval_split", "=", "'test'", ")", "\n", "\n", "# def evaluate_multi(self, eval_split='valid'):", "\n", "\n", "#     if eval_split == 'test':", "\n", "#         dataloader = self.test_dataloader", "\n", "#     elif eval_split == 'valid':", "\n", "#         dataloader = self.valid_dataloader", "\n", "\n", "#     client_ranks = ddict(list)", "\n", "#     all_ranks = []", "\n", "#     for batch in dataloader:", "\n", "\n", "#         triplets, labels, triple_idx = batch", "\n", "#         triplets, labels = triplets.to(args.gpu), labels.to(args.gpu)", "\n", "#         head_idx, rel_idx, tail_idx = triplets[:, 0], triplets[:, 1], triplets[:, 2]", "\n", "#         pred = self.kge_model((triplets, None),", "\n", "#                                self.relation_embedding,", "\n", "#                                self.entity_embedding)", "\n", "#         b_range = torch.arange(pred.size()[0], device=self.args.gpu)", "\n", "#         target_pred = pred[b_range, rel_idx]", "\n", "#         pred = torch.where(labels.byte(), -torch.ones_like(pred) * 10000000, pred)", "\n", "#         pred[b_range, rel_idx] = target_pred", "\n", "\n", "#         ranks = 1 + torch.argsort(torch.argsort(pred, dim=1, descending=True),", "\n", "#                                   dim=1, descending=False)[b_range, rel_idx]", "\n", "\n", "#         ranks = ranks.float()", "\n", "\n", "#         for i in range(args.num_multi):", "\n", "#             client_ranks[i].extend(ranks[triple_idx == i].tolist())", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate_multi": [[227, 285], ["ddict", "range", "ddict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "logging.info", "main.KGERunner.kge_model", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.tensor.float", "torch.tensor.float", "torch.tensor.float", "range", "all_ranks.extend", "ddict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "logging.info", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "triplets.to", "labels.to", "labels.byte", "client_ranks[].extend", "torch.tensor.tolist", "torch.tensor.tolist", "torch.tensor.tolist", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.where.size", "torch.where.size", "torch.where.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "ranks[].tolist", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["\n", "#         all_ranks.extend(ranks.tolist())", "\n", "\n", "#     for i in range(args.num_multi):", "\n", "#         results = ddict(float)", "\n", "#         ranks = torch.tensor(client_ranks[i])", "\n", "#         count = torch.numel(ranks)", "\n", "#         results['count'] = count", "\n", "#         results['mr'] = torch.sum(ranks).item() / count", "\n", "#         results['mrr'] = torch.sum(1.0 / ranks).item() / count", "\n", "#         for k in [1, 3, 10]:", "\n", "#             results['hits@{}'.format(k)] = torch.numel(ranks[ranks <= k]) / count", "\n", "#         logging.info('mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'.format(", "\n", "#             results['mrr'], results['hits@1'],", "\n", "#             results['hits@3'], results['hits@10']))", "\n", "\n", "#     results = ddict(float)", "\n", "#     ranks = torch.tensor(all_ranks)", "\n", "#     count = torch.numel(ranks)", "\n", "#     results['count'] = count", "\n", "#     results['mr'] = torch.sum(ranks).item() / count", "\n", "#     results['mrr'] = torch.sum(1.0 / ranks).item() / count", "\n", "#     for k in [1, 3, 10]:", "\n", "#         results['hits@{}'.format(k)] = torch.numel(ranks[ranks <= k]) / count", "\n", "#     logging.info('mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'.format(", "\n", "#         results['mrr'], results['hits@1'],", "\n", "#         results['hits@3'], results['hits@10']))", "\n", "\n", "#     return results", "\n", "\n", "", "", "def", "evaluate", "(", "self", ",", "eval_split", "=", "'valid'", ")", ":", "\n", "        ", "results", "=", "ddict", "(", "float", ")", "\n", "\n", "if", "eval_split", "==", "'test'", ":", "\n", "            ", "dataloader", "=", "self", ".", "test_dataloader", "\n", "", "elif", "eval_split", "==", "'valid'", ":", "\n", "            ", "dataloader", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "pred_list", "=", "[", "]", "\n", "rank_list", "=", "[", "]", "\n", "results_list", "=", "[", "]", "\n", "for", "batch", "in", "dataloader", ":", "\n", "            ", "triplets", ",", "labels", "=", "batch", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "self", ".", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n", "self", ".", "relation_embedding", ",", "\n", "self", ".", "entity_embedding", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "self", ".", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "pred_argsort", "=", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "pred_argsort", ",", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "pred_list", ".", "append", "(", "pred_argsort", "[", ":", ",", ":", "10", "]", ")", "\n", "rank_list", ".", "append", "(", "ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.KGERunner.evaluate": [[286, 345], ["ddict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ddict.items", "logging.info", "os.path.join", "pickle.dump", "main.KGERunner.kge_model", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "pred_list.append", "rank_list.append", "ranks.float.float.float", "enumerate", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.join", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "os.path.join", "open", "triplets.to", "labels.to", "labels.byte", "results_list.append", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.where.size", "torch.where.size", "torch.where.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "tri.tolist", "ranks[].item", "str", "str"], "methods", ["None"], ["ranks", "=", "ranks", ".", "float", "(", ")", "\n", "\n", "for", "idx", ",", "tri", "in", "enumerate", "(", "triplets", ")", ":", "\n", "                ", "results_list", ".", "append", "(", "[", "tri", ".", "tolist", "(", ")", ",", "ranks", "[", "idx", "]", ".", "item", "(", ")", "]", ")", "\n", "\n", "", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "torch", ".", "cat", "(", "pred_list", ",", "dim", "=", "0", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "state_dir", ",", "\n", "args", ".", "name", "+", "'_'", "+", "str", "(", "args", ".", "one_client_idx", ")", "+", "'.pred'", ")", ")", "\n", "torch", ".", "save", "(", "torch", ".", "cat", "(", "rank_list", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "state_dir", ",", "\n", "args", ".", "name", "+", "'_'", "+", "str", "(", "args", ".", "one_client_idx", ")", "+", "'.rank'", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "results", "[", "k", "]", "/=", "results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "results", "[", "'mrr'", "]", ",", "results", "[", "'hits@1'", "]", ",", "\n", "results", "[", "'hits@3'", "]", ",", "results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "test_rst_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "name", "+", "'.test.rst'", ")", "\n", "pickle", ".", "dump", "(", "results_list", ",", "open", "(", "test_rst_file", ",", "'wb'", ")", ")", "\n", "\n", "return", "results", "\n", "\n", "\n", "", "", "def", "test_pretrain", "(", "args", ",", "all_data", ")", ":", "\n", "    ", "data_len", "=", "len", "(", "all_data", ")", "\n", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "kge_model", "=", "KGEModel", "(", "args", ",", "model_name", "=", "args", ".", "model", ")", "\n", "\n", "results", "=", "ddict", "(", "float", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "all_data", ")", ":", "\n", "        ", "one_results", "=", "ddict", "(", "float", ")", "\n", "state", "=", "torch", ".", "load", "(", "'../LTLE/fed_state/fb15k237_fed10_client_{}.best'", ".", "format", "(", "i", ")", ",", "map_location", "=", "args", ".", "gpu", ")", "\n", "rel_embed", "=", "state", "[", "'rel_emb'", "]", ".", "detach", "(", ")", "\n", "ent_embed", "=", "state", "[", "'ent_emb'", "]", ".", "detach", "(", ")", "\n", "\n", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "test_dataloader_tail", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "# num_workers=max(1, args.num_cpu),", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "client_res", "=", "ddict", "(", "float", ")", "\n", "for", "batch", "in", "test_dataloader_tail", ":", "\n", "            ", "triplets", ",", "labels", ",", "mode", "=", "batch", "\n", "# triplets, labels, mode = next(test_dataloader_list[i].__iter__())", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.test_pretrain": [[347, 426], ["len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "kge_model.KGEModel", "ddict", "enumerate", "ddict.items", "logging.info", "ddict", "torch.load", "torch.load", "torch.load", "state[].detach", "state[].detach", "dataloader.get_task_dataset", "torch.utils.data.DataLoader", "ddict", "ddict.items", "logging.info", "kge_model.KGEModel.", "torch.arange", "torch.arange", "torch.arange", "torch.where", "torch.where", "torch.where", "ranks.float.float", "torch.numel", "torch.numel", "torch.numel", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "triplets.to", "labels.to", "labels.byte", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.where.size", "torch.argsort", "torch.argsort", "torch.argsort", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.argsort", "torch.argsort", "torch.argsort"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset"], ["ent_embed", ",", "\n", "mode", "=", "mode", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", ",", "\n", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "one_results", "[", "'count'", "]", "+=", "count", "\n", "one_results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "one_results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "one_results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "one_results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "one_results", "[", "k", "]", "=", "v", "/", "one_results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "one_results", "[", "'mrr'", "]", ",", "one_results", "[", "'hits@1'", "]", ",", "\n", "one_results", "[", "'hits@3'", "]", ",", "one_results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "!=", "'count'", ":", "\n", "            ", "results", "[", "k", "]", "=", "v", "/", "results", "[", "'count'", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "results", "[", "'mrr'", "]", ",", "results", "[", "'hits@1'", "]", ",", "\n", "results", "[", "'hits@3'", "]", ",", "results", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "return", "results", "\n", "\n", "\n", "", "def", "init_dir", "(", "args", ")", ":", "\n", "# state", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "state_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "state_dir", ")", "\n", "\n", "# tensorboard log", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "tb_log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "tb_log_dir", ")", "\n", "\n", "# logging", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n", "\n", "", "", "def", "init_logger", "(", "args", ")", ":", "\n", "    ", "log_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "args", ".", "name", "+", "'.log'", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s | %(message)s'", ",", "\n", "datefmt", "=", "\"%Y-%m-%d %H:%M:%S\"", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "filename", "=", "log_file", ",", "\n", "filemode", "=", "'a+'", "\n", ")", "\n", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s | %(message)s'", ")", "\n", "console", ".", "setFormatter", "(", "formatter", ")", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "console", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'Fed_data/WN18RR-Fed3.pkl'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "default", "=", "'wn18rr_fed3_fed_TransE'", ",", "type", "=", "str", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.init_dir": [[428, 440], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--log_dir'", ",", "'-log_dir'", ",", "default", "=", "'./log'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--tb_log_dir'", ",", "'-tb_log_dir'", ",", "default", "=", "'./tb_log'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--run_mode'", ",", "default", "=", "'FedE'", ",", "choices", "=", "[", "'FedE'", ",", "'Single'", ",", "'test_pretrain'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num_multi'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'TransE'", ",", "choices", "=", "[", "'TransE'", ",", "'RotatE'", ",", "'DistMult'", ",", "'ComplEx'", "]", ")", "\n", "\n", "# one task hyperparam", "\n", "parser", ".", "add_argument", "(", "'--one_client_idx'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--log_per_epoch'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--check_per_epoch'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.main.init_logger": [[442, 458], ["os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "512", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--num_neg'", ",", "default", "=", "256", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.001", ",", "type", "=", "int", ")", "\n", "\n", "# for FedE", "\n", "parser", ".", "add_argument", "(", "'--num_client'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--max_round'", ",", "default", "=", "10000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--local_epoch'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--fraction'", ",", "default", "=", "1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--log_per_round'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--check_per_round'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--early_stop_patience'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "default", "=", "10.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "2.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Server.__init__": [[12, 25], ["torch.Tensor", "nn.init.uniform_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nentity", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "ent_embed", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "self", ".", "nentity", "=", "nentity", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Server.send_emb": [[26, 28], ["copy.deepcopy"], "methods", ["None"], ["", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "ent_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Server.aggregation": [[29, 44], ["torch.sum", "enumerate", "torch.zeros().to.requires_grad_", "torch.zeros().to", "torch.zeros().to", "client.ent_embed.clone().detach", "torch.isnan", "ent_w[].reshape", "torch.zeros", "torch.zeros", "client.ent_embed.clone"], "methods", ["None"], ["", "def", "aggregation", "(", "self", ",", "clients", ",", "ent_update_weights", ")", ":", "\n", "        ", "agg_ent_mask", "=", "ent_update_weights", "\n", "agg_ent_mask", "[", "ent_update_weights", "!=", "0", "]", "=", "1", "\n", "\n", "ent_w_sum", "=", "torch", ".", "sum", "(", "agg_ent_mask", ",", "dim", "=", "0", ")", "\n", "ent_w", "=", "agg_ent_mask", "/", "ent_w_sum", "\n", "ent_w", "[", "torch", ".", "isnan", "(", "ent_w", ")", "]", "=", "0", "\n", "if", "self", ".", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "update_ent_embed", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "self", ".", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "            ", "update_ent_embed", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "self", ".", "args", ".", "hidden_dim", ")", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "", "for", "i", ",", "client", "in", "enumerate", "(", "clients", ")", ":", "\n", "            ", "local_ent_embed", "=", "client", ".", "ent_embed", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "update_ent_embed", "+=", "local_ent_embed", "*", "ent_w", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "ent_embed", "=", "update_ent_embed", ".", "requires_grad_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Client.__init__": [[47, 62], ["kge_model.KGEModel"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "client_id", ",", "data", ",", "train_dataloader", ",", "\n", "valid_dataloader", ",", "test_dataloader", ",", "rel_embed", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "valid_dataloader", "=", "valid_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "rel_embed", "=", "rel_embed", "\n", "self", ".", "client_id", "=", "client_id", "\n", "\n", "self", ".", "score_local", "=", "[", "]", "\n", "self", ".", "score_global", "=", "[", "]", "\n", "\n", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "self", ".", "ent_embed", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Client.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "train_dataloader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Client.client_update": [[66, 101], ["torch.optim.Adam", "range", "np.mean", "positive_sample.to.to.to", "negative_sample.to.to.to", "fede.Client.kge_model", "fede.Client.kge_model", "torch.logsigmoid().squeeze", "torch.optim.Adam.zero_grad", "loss.backward", "torch.optim.Adam.step", "losses.append", "torch.logsigmoid().squeeze.mean", "fede.Client.mean", "loss.item", "torch.logsigmoid", "torch.softmax().detach", "torch.logsigmoid", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward"], ["", "def", "client_update", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "[", "{", "'params'", ":", "self", ".", "rel_embed", "}", ",", "\n", "{", "'params'", ":", "self", ".", "ent_embed", "}", "]", ",", "lr", "=", "self", ".", "args", ".", "lr", ")", "\n", "\n", "losses", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "local_epoch", ")", ":", "\n", "            ", "for", "batch", "in", "self", ".", "train_dataloader", ":", "\n", "                ", "positive_sample", ",", "negative_sample", ",", "sample_idx", "=", "batch", "\n", "\n", "positive_sample", "=", "positive_sample", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "negative_sample", "=", "negative_sample", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "\n", "negative_score", "=", "self", ".", "kge_model", "(", "(", "positive_sample", ",", "negative_sample", ")", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ")", "\n", "\n", "negative_score", "=", "(", "F", ".", "softmax", "(", "negative_score", "*", "self", ".", "args", ".", "adversarial_temperature", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", "\n", "*", "F", ".", "logsigmoid", "(", "-", "negative_score", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "positive_score", "=", "self", ".", "kge_model", "(", "positive_sample", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ",", "neg", "=", "False", ")", "\n", "\n", "positive_score", "=", "F", ".", "logsigmoid", "(", "positive_score", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "positive_sample_loss", "=", "-", "positive_score", ".", "mean", "(", ")", "\n", "negative_sample_loss", "=", "-", "negative_score", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "(", "positive_sample_loss", "+", "negative_sample_loss", ")", "/", "2", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "losses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.Client.client_eval": [[102, 138], ["ddict", "ddict.items", "fede.Client.kge_model", "torch.arange", "torch.where", "ranks.float.float.float", "torch.numel", "torch.sum().item", "torch.sum().item", "triplets.to", "labels.to", "labels.byte", "torch.numel", "torch.where.size", "torch.argsort", "torch.sum", "torch.sum", "torch.ones_like", "torch.argsort"], "methods", ["None"], ["", "def", "client_eval", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "if", "istest", ":", "\n", "            ", "dataloader", "=", "self", ".", "test_dataloader", "\n", "", "else", ":", "\n", "            ", "dataloader", "=", "self", ".", "valid_dataloader", "\n", "\n", "", "results", "=", "ddict", "(", "float", ")", "\n", "for", "batch", "in", "dataloader", ":", "\n", "            ", "triplets", ",", "labels", "=", "batch", "\n", "triplets", ",", "labels", "=", "triplets", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", ",", "labels", ".", "to", "(", "self", ".", "args", ".", "gpu", ")", "\n", "head_idx", ",", "rel_idx", ",", "tail_idx", "=", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", "\n", "pred", "=", "self", ".", "kge_model", "(", "(", "triplets", ",", "None", ")", ",", "\n", "self", ".", "rel_embed", ",", "self", ".", "ent_embed", ")", "\n", "b_range", "=", "torch", ".", "arange", "(", "pred", ".", "size", "(", ")", "[", "0", "]", ",", "device", "=", "self", ".", "args", ".", "gpu", ")", "\n", "target_pred", "=", "pred", "[", "b_range", ",", "tail_idx", "]", "\n", "pred", "=", "torch", ".", "where", "(", "labels", ".", "byte", "(", ")", ",", "-", "torch", ".", "ones_like", "(", "pred", ")", "*", "10000000", ",", "pred", ")", "\n", "pred", "[", "b_range", ",", "tail_idx", "]", "=", "target_pred", "\n", "\n", "ranks", "=", "1", "+", "torch", ".", "argsort", "(", "torch", ".", "argsort", "(", "pred", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", ",", "\n", "dim", "=", "1", ",", "descending", "=", "False", ")", "[", "b_range", ",", "tail_idx", "]", "\n", "\n", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "count", "=", "torch", ".", "numel", "(", "ranks", ")", "\n", "\n", "results", "[", "'count'", "]", "+=", "count", "\n", "results", "[", "'mr'", "]", "+=", "torch", ".", "sum", "(", "ranks", ")", ".", "item", "(", ")", "\n", "results", "[", "'mrr'", "]", "+=", "torch", ".", "sum", "(", "1.0", "/", "ranks", ")", ".", "item", "(", ")", "\n", "\n", "for", "k", "in", "[", "1", ",", "3", ",", "10", "]", ":", "\n", "                ", "results", "[", "'hits@{}'", ".", "format", "(", "k", ")", "]", "+=", "torch", ".", "numel", "(", "ranks", "[", "ranks", "<=", "k", "]", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "!=", "'count'", ":", "\n", "                ", "results", "[", "k", "]", "/=", "results", "[", "'count'", "]", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.__init__": [[141, 163], ["dataloader.get_all_clients", "len", "fede.Server", "sum", "sum", "fede.Client", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "all_data", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "self", ".", "ent_freq_mat", ",", "rel_embed_list", ",", "nentity", "=", "get_all_clients", "(", "all_data", ",", "args", ")", "\n", "\n", "self", ".", "args", ".", "nentity", "=", "nentity", "\n", "\n", "# client", "\n", "self", ".", "num_clients", "=", "len", "(", "train_dataloader_list", ")", "\n", "self", ".", "clients", "=", "[", "\n", "Client", "(", "args", ",", "i", ",", "all_data", "[", "i", "]", ",", "train_dataloader_list", "[", "i", "]", ",", "valid_dataloader_list", "[", "i", "]", ",", "\n", "test_dataloader_list", "[", "i", "]", ",", "rel_embed_list", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "num_clients", ")", "\n", "]", "\n", "\n", "self", ".", "server", "=", "Server", "(", "args", ",", "nentity", ")", "\n", "\n", "self", ".", "total_test_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "test_dataloader", ".", "dataset", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "test_eval_weights", "=", "[", "len", "(", "client", ".", "test_dataloader", ".", "dataset", ")", "/", "self", ".", "total_test_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n", "self", ".", "total_valid_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "valid_dataloader", ".", "dataset", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "valid_eval_weights", "=", "[", "len", "(", "client", ".", "valid_dataloader", ".", "dataset", ")", "/", "self", ".", "total_valid_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.write_training_loss": [[164, 166], ["fede.FedE.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.write_evaluation_result": [[167, 172], ["fede.FedE.args.writer.add_scalar", "fede.FedE.args.writer.add_scalar", "fede.FedE.args.writer.add_scalar", "fede.FedE.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.save_checkpoint": [[173, 183], ["os.listdir", "torch.save", "os.path.join", "os.path.isfile", "os.remove", "filename.split", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'ent_embed'", ":", "self", ".", "server", ".", "ent_embed", ",", "\n", "'rel_embed'", ":", "[", "client", ".", "rel_embed", "for", "client", "in", "self", ".", "clients", "]", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", "\n", "# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.save_model": [[184, 187], ["os.rename", "os.path.join", "os.path.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.send_emb": [[188, 191], ["enumerate", "fede.FedE.server.send_emb"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb"], ["", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "ent_embed", "=", "self", ".", "server", ".", "send_emb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.train": [[192, 252], ["range", "logging.info", "logging.info", "fede.FedE.save_model", "fede.FedE.before_test_load", "fede.FedE.evaluate", "max", "np.random.choice", "fede.FedE.send_emb", "iter", "fede.FedE.server.aggregation", "logging.info", "fede.FedE.write_training_loss", "loss_plot_result.append", "round", "fede.FedE.clients[].client_update", "np.mean", "np.mean", "fede.FedE.evaluate", "fede.FedE.write_evaluation_result", "mrr_plot_result.append", "logging.info", "np.mean", "logging.info", "fede.FedE.save_checkpoint", "logging.info", "open", "pickle.dump", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.aggregation", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "mrr_plot_result", "=", "[", "]", "\n", "loss_plot_result", "=", "[", "]", "\n", "\n", "for", "num_round", "in", "range", "(", "self", ".", "args", ".", "max_round", ")", ":", "\n", "            ", "n_sample", "=", "max", "(", "round", "(", "self", ".", "args", ".", "fraction", "*", "self", ".", "num_clients", ")", ",", "1", ")", "\n", "sample_set", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_clients", ",", "n_sample", ",", "replace", "=", "False", ")", "\n", "\n", "self", ".", "send_emb", "(", ")", "\n", "round_loss", "=", "0", "\n", "for", "k", "in", "iter", "(", "sample_set", ")", ":", "\n", "                ", "client_loss", "=", "self", ".", "clients", "[", "k", "]", ".", "client_update", "(", ")", "\n", "round_loss", "+=", "client_loss", "\n", "", "round_loss", "/=", "n_sample", "\n", "self", ".", "server", ".", "aggregation", "(", "self", ".", "clients", ",", "self", ".", "ent_freq_mat", ")", "\n", "\n", "logging", ".", "info", "(", "'round: {} | loss: {:.4f}'", ".", "format", "(", "num_round", ",", "np", ".", "mean", "(", "round_loss", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "round_loss", ")", ",", "num_round", ")", "\n", "\n", "loss_plot_result", ".", "append", "(", "np", ".", "mean", "(", "round_loss", ")", ")", "\n", "\n", "if", "num_round", "%", "self", ".", "args", ".", "check_per_round", "==", "0", "and", "num_round", "!=", "0", ":", "\n", "                ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "num_round", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "num_round", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "num_round", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "mrr_plot_result", ".", "append", "(", "eval_res", "[", "'mrr'", "]", ")", "\n", "\n", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "num_round", ")", ")", "\n", "\n", "loss_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_loss.pkl'", "\n", "with", "open", "(", "loss_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "loss_plot_result", ",", "fp", ")", "\n", "\n", "", "mrr_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_mrr.pkl'", "\n", "with", "open", "(", "mrr_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "mrr_plot_result", ",", "fp", ")", "\n", "\n", "", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n", "self", ".", "save_model", "(", "best_epoch", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "self", ".", "evaluate", "(", "istest", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.before_test_load": [[253, 258], ["torch.load", "enumerate", "os.path.join"], "methods", ["None"], ["", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "server", ".", "ent_embed", "=", "state", "[", "'ent_embed'", "]", "\n", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "rel_embed", "=", "state", "[", "'rel_embed'", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.fede.FedE.evaluate": [[259, 281], ["fede.FedE.send_emb", "ddict", "enumerate", "logging.info", "client.client_eval", "logging.info", "client.client_eval.items"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["", "", "def", "evaluate", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "self", ".", "send_emb", "(", ")", "\n", "result", "=", "ddict", "(", "int", ")", "\n", "if", "istest", ":", "\n", "            ", "weights", "=", "self", ".", "test_eval_weights", "\n", "", "else", ":", "\n", "            ", "weights", "=", "self", ".", "valid_eval_weights", "\n", "", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client_res", "=", "client", ".", "client_eval", "(", "istest", ")", "\n", "\n", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "client_res", "[", "'mrr'", "]", ",", "client_res", "[", "'hits@1'", "]", ",", "\n", "client_res", "[", "'hits@3'", "]", ",", "client_res", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "client_res", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "k", "]", "+=", "v", "*", "weights", "[", "idx", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "result", "[", "'mrr'", "]", ",", "result", "[", "'hits@1'", "]", ",", "\n", "result", "[", "'hits@3'", "]", ",", "result", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TrainDataset.__init__": [[14, 27], ["len", "collections.defaultdict", "dataloader.TrainDataset.hr2t[].add", "numpy.array", "list"], "methods", ["None"], ["self", ".", "negative_sample_size", "=", "negative_sample_size", "\n", "\n", "self", ".", "hr2t", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "triples", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n", "", "for", "h", ",", "r", "in", "self", ".", "hr2t", ":", "\n", "            ", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", "=", "np", ".", "array", "(", "list", "(", "self", ".", "hr2t", "[", "(", "h", ",", "r", ")", "]", ")", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "positive_sample", "=", "self", ".", "triples", "[", "idx", "]", "\n", "head", ",", "relation", ",", "tail", "=", "positive_sample", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TrainDataset.__len__": [[28, 30], ["None"], "methods", ["None"], ["\n", "negative_sample_list", "=", "[", "]", "\n", "negative_sample_size", "=", "0", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TrainDataset.__getitem__": [[31, 55], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.random.randint", "numpy.in1d", "negative_sample_list.append", "numpy.concatenate"], "methods", ["None"], ["\n", "while", "negative_sample_size", "<", "self", ".", "negative_sample_size", ":", "\n", "            ", "negative_sample", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "nentity", ",", "size", "=", "self", ".", "negative_sample_size", "*", "2", ")", "\n", "mask", "=", "np", ".", "in1d", "(", "\n", "negative_sample", ",", "\n", "self", ".", "hr2t", "[", "(", "head", ",", "relation", ")", "]", ",", "\n", "assume_unique", "=", "True", ",", "\n", "invert", "=", "True", "\n", ")", "\n", "negative_sample", "=", "negative_sample", "[", "mask", "]", "\n", "negative_sample_list", ".", "append", "(", "negative_sample", ")", "\n", "negative_sample_size", "+=", "negative_sample", ".", "size", "\n", "\n", "", "negative_sample", "=", "np", ".", "concatenate", "(", "negative_sample_list", ")", "[", ":", "self", ".", "negative_sample_size", "]", "\n", "negative_sample", "=", "torch", ".", "from_numpy", "(", "negative_sample", ")", "\n", "positive_sample", "=", "torch", ".", "LongTensor", "(", "positive_sample", ")", "\n", "\n", "return", "positive_sample", ",", "negative_sample", ",", "idx", "\n", "\n", "", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "positive_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "negative_sample", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "sample_idx", "=", "torch", ".", "tensor", "(", "[", "_", "[", "2", "]", "for", "_", "in", "data", "]", ")", "\n", "return", "positive_sample", ",", "negative_sample", ",", "sample_idx", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TrainDataset.collate_fn": [[56, 62], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["\n", "\n", "", "", "class", "TestDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "triples", ",", "all_true_triples", ",", "nentity", ",", "rel_mask", "=", "None", ")", ":", "\n", "        ", "self", ".", "len", "=", "len", "(", "triples", ")", "\n", "self", ".", "triple_set", "=", "all_true_triples", "\n", "self", ".", "triples", "=", "triples", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset.__init__": [[65, 76], ["len", "collections.defaultdict", "dataloader.TestDataset.hr2t_all[].add"], "methods", ["None"], ["self", ".", "rel_mask", "=", "rel_mask", "\n", "\n", "self", ".", "hr2t_all", "=", "ddict", "(", "set", ")", "\n", "for", "h", ",", "r", ",", "t", "in", "all_true_triples", ":", "\n", "            ", "self", ".", "hr2t_all", "[", "(", "h", ",", "r", ")", "]", ".", "add", "(", "t", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n", "", "@", "staticmethod", "\n", "def", "collate_fn", "(", "data", ")", ":", "\n", "        ", "triple", "=", "torch", ".", "stack", "(", "[", "_", "[", "0", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset.__len__": [[77, 79], ["None"], "methods", ["None"], ["trp_label", "=", "torch", ".", "stack", "(", "[", "_", "[", "1", "]", "for", "_", "in", "data", "]", ",", "dim", "=", "0", ")", "\n", "return", "triple", ",", "trp_label", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset.collate_fn": [[80, 85], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "head", ",", "relation", ",", "tail", "=", "self", ".", "triples", "[", "idx", "]", "\n", "label", "=", "self", ".", "hr2t_all", "[", "(", "head", ",", "relation", ")", "]", "\n", "trp_label", "=", "self", ".", "get_label", "(", "label", ")", "\n", "triple", "=", "torch", ".", "LongTensor", "(", "(", "head", ",", "relation", ",", "tail", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset.__getitem__": [[86, 93], ["dataloader.TestDataset.get_label", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.get_label"], ["return", "triple", ",", "trp_label", "\n", "\n", "", "def", "get_label", "(", "self", ",", "label", ")", ":", "\n", "        ", "y", "=", "np", ".", "zeros", "(", "[", "self", ".", "nentity", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "e2", "in", "label", ":", "\n", "            ", "y", "[", "e2", "]", "=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset.get_label": [[94, 103], ["numpy.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "type"], "methods", ["None"], ["", "return", "torch", ".", "FloatTensor", "(", "y", ")", "\n", "\n", "\n", "", "", "def", "get_task_dataset", "(", "data", ",", "args", ")", ":", "\n", "    ", "nentity", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", ".", "reshape", "(", "-", "1", ")", ")", ")", "\n", "nrelation", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ")", ")", "\n", "\n", "train_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.__init__": [[106, 118], ["len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "collections.defaultdict", "dataloader.TestDataset_Entire.hr2t_all[].add"], "methods", ["None"], ["data", "[", "'valid'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "test_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_type'", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "all_triples", "=", "np", ".", "concatenate", "(", "[", "train_triples", ",", "valid_triples", ",", "test_triples", "]", ")", "\n", "train_dataset", "=", "TrainDataset", "(", "train_triples", ",", "nentity", ",", "args", ".", "num_neg", ")", "\n", "valid_dataset", "=", "TestDataset", "(", "valid_triples", ",", "all_triples", ",", "nentity", ")", "\n", "test_dataset", "=", "TestDataset", "(", "test_triples", ",", "all_triples", ",", "nentity", ")", "\n", "\n", "return", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.__len__": [[119, 121], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "get_all_clients", "(", "all_data", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.collate_fn": [[122, 128], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["    ", "all_rel", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "for", "data", "in", "all_data", ":", "\n", "        ", "all_rel", "=", "np", ".", "union1d", "(", "all_rel", ",", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "nrelation", "=", "len", "(", "all_rel", ")", "# all relations of training set in all clients", "\n", "\n", "train_dataloader_list", "=", "[", "]", "\n", "test_dataloader_list", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.__getitem__": [[129, 137], ["dataloader.TestDataset_Entire.get_label", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.get_label"], ["valid_dataloader_list", "=", "[", "]", "\n", "\n", "ent_embed_list", "=", "[", "]", "\n", "\n", "rel_freq_list", "=", "[", "]", "\n", "\n", "for", "data", "in", "tqdm", "(", "all_data", ")", ":", "# in a client", "\n", "        ", "nentity", "=", "len", "(", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", ")", ")", "# entities of training in a client", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.TestDataset_Entire.get_label": [[138, 147], ["numpy.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "type"], "methods", ["None"], ["train_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ",", "\n", "data", "[", "'train'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "valid_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_type_ori'", "]", ",", "\n", "data", "[", "'valid'", "]", "[", "'edge_index'", "]", "[", "1", "]", ")", ")", ".", "T", "\n", "\n", "test_triples", "=", "np", ".", "stack", "(", "(", "data", "[", "'test'", "]", "[", "'edge_index'", "]", "[", "0", "]", ",", "\n", "data", "[", "'test'", "]", "[", "'edge_type_ori'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset": [[149, 171], ["len", "len", "numpy.concatenate", "dataloader.TrainDataset", "dataloader.TestDataset", "dataloader.TestDataset", "numpy.unique", "numpy.unique", "numpy.stack", "numpy.stack", "numpy.stack", "[].reshape"], "function", ["None"], ["\n", "client_mask_rel", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "nrelation", ")", ",", "\n", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ".", "reshape", "(", "-", "1", ")", ")", ",", "assume_unique", "=", "True", ")", "\n", "\n", "all_triples", "=", "np", ".", "concatenate", "(", "[", "train_triples", ",", "valid_triples", ",", "test_triples", "]", ")", "# in a client", "\n", "train_dataset", "=", "TrainDataset", "(", "train_triples", ",", "nentity", ",", "args", ".", "num_neg", ")", "\n", "valid_dataset", "=", "TestDataset", "(", "valid_triples", ",", "all_triples", ",", "nentity", ",", "client_mask_rel", ")", "\n", "test_dataset", "=", "TestDataset", "(", "test_triples", ",", "all_triples", ",", "nentity", ",", "client_mask_rel", ")", "\n", "\n", "# dataloader", "\n", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "train_dataloader_list", ".", "append", "(", "train_dataloader", ")", "\n", "\n", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_task_dataset_entire": [[173, 226], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len", "enumerate", "numpy.concatenate", "dataloader.TrainDataset", "dataloader.TestDataset_Entire", "dataloader.TestDataset_Entire", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "train_client_idx.extend", "valid_client_idx.extend", "test_client_idx.extend", "numpy.unique", "numpy.unique", "numpy.setdiff1d", "ent_mask.append", "numpy.stack", "numpy.stack", "numpy.stack", "np.concatenate.reshape", "numpy.arange", "numpy.unique", "[].reshape"], "function", ["None"], ["\n", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "test_dataloader_list", ".", "append", "(", "test_dataloader", ")", "\n", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "\n", "'''use n of entity in train or all (train, valid, test)?'''", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "ent_embed", "=", "torch", ".", "zeros", "(", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "ent_embed", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "ent_embed_list", ".", "append", "(", "ent_embed", ")", "\n", "\n", "rel_freq", "=", "torch", ".", "zeros", "(", "nrelation", ")", "\n", "for", "r", "in", "data", "[", "'train'", "]", "[", "'edge_type_ori'", "]", ".", "reshape", "(", "-", "1", ")", ":", "\n", "            ", "rel_freq", "[", "r", "]", "+=", "1", "\n", "", "rel_freq_list", ".", "append", "(", "rel_freq", ")", "\n", "\n", "", "rel_freq_mat", "=", "torch", ".", "stack", "(", "rel_freq_list", ")", ".", "to", "(", "args", ".", "gpu", ")", "\n", "\n", "return", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "rel_freq_mat", ",", "ent_embed_list", ",", "nrelation", "\n", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.FedE.dataloader.get_all_clients": [[228, 316], ["numpy.array", "len", "tqdm.tqdm", "torch.stack().to", "torch.stack().to", "numpy.union1d", "len", "len", "numpy.setdiff1d", "numpy.concatenate", "dataloader.TrainDataset", "dataloader.TestDataset", "dataloader.TestDataset", "torch.utils.data.DataLoader", "train_dataloader_list.append", "torch.utils.data.DataLoader", "valid_dataloader_list.append", "torch.utils.data.DataLoader", "test_dataloader_list.append", "torch.Tensor", "torch.Tensor", "torch.init.uniform_", "rel_embed_list.append", "torch.zeros", "torch.zeros", "[].reshape", "ent_freq_list.append", "[].reshape", "numpy.unique", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.unique", "numpy.arange", "numpy.unique", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.zeros().to().requires_grad_", "torch.stack", "torch.stack", "[].reshape", "[].reshape", "torch.Tensor.item", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.Tensor.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], []], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.__init__": [[24, 28], ["torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nentity", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "entity_embeddings", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "nentity", ",", "args", ".", "embedding_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "nentity", "=", "nentity", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.send_emb": [[29, 31], ["copy.deepcopy"], "methods", ["None"], ["", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "entity_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.aggregation": [[32, 46], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "enumerate", "client.entity_embeddings.clone().detach", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ent_w[].reshape", "numpy.zeros", "client.entity_embeddings.clone"], "methods", ["None"], ["", "def", "aggregation", "(", "self", ",", "clients", ",", "ent_update_weights", ")", ":", "\n", "        ", "agg_ent_mask", "=", "ent_update_weights", "\n", "agg_ent_mask", "[", "ent_update_weights", "!=", "0", "]", "=", "1", "\n", "\n", "ent_w_sum", "=", "torch", ".", "sum", "(", "agg_ent_mask", ",", "dim", "=", "0", ")", "\n", "ent_w", "=", "agg_ent_mask", "/", "ent_w_sum", "\n", "ent_w", "[", "torch", ".", "isnan", "(", "ent_w", ")", "]", "=", "0", "\n", "\n", "update_ent_embed", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "self", ".", "nentity", ",", "self", ".", "args", ".", "embedding_size", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", ",", "client", "in", "enumerate", "(", "clients", ")", ":", "\n", "            ", "local_ent_embed", "=", "client", ".", "entity_embeddings", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "# print(local_rel_embed.shape, rel_w[i].shape)", "\n", "update_ent_embed", "+=", "local_ent_embed", "*", "ent_w", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "entity_embeddings", "=", "update_ent_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.__init__": [[48, 76], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "create_batch.Corpus", "models.SpKBGATModified", "models.SpKBGATConvOnly", "fedGAT.Client.model_conv.cuda", "fedGAT.Client.model_gat.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "client_id", ",", "train_dataloader", ",", "\n", "valid_dataloader", ",", "test_dataloader", ",", "headTailSelector", ",", "unique_entities_train", ",", "rel_embed", ",", "ent_embed", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "# self.data = data", "\n", "self", ".", "train_dataloader", "=", "train_dataloader", "\n", "self", ".", "valid_dataloader", "=", "valid_dataloader", "\n", "self", ".", "test_dataloader", "=", "test_dataloader", "\n", "self", ".", "client_id", "=", "client_id", "\n", "\n", "nentity", "=", "ent_embed", ".", "shape", "[", "0", "]", "\n", "# self.entity_embeddings = torch.FloatTensor(ent_embed)", "\n", "self", ".", "relation_embeddings", "=", "torch", ".", "Tensor", "(", "rel_embed", ")", "\n", "self", ".", "entity_embeddings", "=", "ent_embed", "\n", "self", ".", "Corpus_", "=", "Corpus", "(", "args", ",", "train_dataloader", ",", "valid_dataloader", ",", "test_dataloader", ",", "headTailSelector", ",", "\n", "args", ".", "batch_size_gat", ",", "args", ".", "valid_invalid_ratio_gat", ",", "unique_entities_train", ",", "nentity", ",", "args", ".", "get_2hop", ")", "\n", "if", "args", ".", "use_2hop", ":", "\n", "        \t", "self", ".", "node_neighbors_2hop", "=", "self", ".", "Corpus_", ".", "node_neighbors_2hop", "\n", "# self.current_batch_2hop_indices = self.Corpus_.get_batch_nhop_neighbors_all(self.args,", "\n", "#                                                                 self.Corpus_.unique_entities_train, self.node_neighbors_2hop)", "\n", "\n", "", "self", ".", "model_gat", "=", "SpKBGATModified", "(", "self", ".", "entity_embeddings", ",", "self", ".", "relation_embeddings", ",", "args", ".", "entity_out_dim", ",", "args", ".", "entity_out_dim", ",", "\n", "args", ".", "drop_GAT", ",", "args", ".", "alpha", ",", "args", ".", "nheads_GAT", ",", "args", ".", "gpu", ")", "\n", "self", ".", "model_conv", "=", "SpKBGATConvOnly", "(", "self", ".", "entity_embeddings", ",", "self", ".", "relation_embeddings", ",", "args", ".", "entity_out_dim", ",", "args", ".", "entity_out_dim", ",", "\n", "args", ".", "drop_GAT", ",", "args", ".", "drop_conv", ",", "args", ".", "alpha", ",", "args", ".", "alpha_conv", ",", "\n", "args", ".", "nheads_GAT", ",", "args", ".", "out_channels", ")", "\n", "\n", "self", ".", "model_conv", ".", "cuda", "(", ")", "\n", "self", ".", "model_gat", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.batch_gat_loss": [[77, 110], ["int", "pos_triples.repeat.repeat.repeat", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "gat_loss_func", "int", "len", "len", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "len", "len", "int", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "int"], "methods", ["None"], ["", "def", "batch_gat_loss", "(", "self", ",", "gat_loss_func", ",", "train_indices", ",", "entity_embed", ",", "relation_embed", ")", ":", "\n", "        ", "len_pos_triples", "=", "int", "(", "\n", "train_indices", ".", "shape", "[", "0", "]", "/", "(", "int", "(", "self", ".", "args", ".", "valid_invalid_ratio_gat", ")", "+", "1", ")", ")", "\n", "\n", "pos_triples", "=", "train_indices", "[", ":", "len_pos_triples", "]", "\n", "neg_triples", "=", "train_indices", "[", "len_pos_triples", ":", "]", "\n", "\n", "pos_triples", "=", "pos_triples", ".", "repeat", "(", "int", "(", "self", ".", "args", ".", "valid_invalid_ratio_gat", ")", ",", "1", ")", "\n", "\n", "if", "(", "len", "(", "pos_triples", ")", ">", "len", "(", "neg_triples", ")", ")", ":", "\n", "        \t", "pos_triples", "=", "pos_triples", "[", ":", "len", "(", "neg_triples", ")", "]", "\n", "", "elif", "(", "len", "(", "pos_triples", ")", "<", "len", "(", "neg_triples", ")", ")", ":", "\n", "        \t", "neg_triples", "=", "neg_triples", "[", ":", "len", "(", "pos_triples", ")", "]", "\n", "\n", "", "source_embeds", "=", "entity_embed", "[", "pos_triples", "[", ":", ",", "0", "]", "]", "\n", "relation_embeds", "=", "relation_embed", "[", "pos_triples", "[", ":", ",", "1", "]", "]", "\n", "tail_embeds", "=", "entity_embed", "[", "pos_triples", "[", ":", ",", "2", "]", "]", "\n", "\n", "x", "=", "source_embeds", "+", "relation_embeds", "-", "tail_embeds", "\n", "pos_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "source_embeds", "=", "entity_embed", "[", "neg_triples", "[", ":", ",", "0", "]", "]", "\n", "relation_embeds", "=", "relation_embed", "[", "neg_triples", "[", ":", ",", "1", "]", "]", "\n", "tail_embeds", "=", "entity_embed", "[", "neg_triples", "[", ":", ",", "2", "]", "]", "\n", "\n", "x", "=", "source_embeds", "+", "relation_embeds", "-", "tail_embeds", "\n", "neg_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "-", "torch", ".", "ones", "(", "int", "(", "self", ".", "args", ".", "valid_invalid_ratio_gat", ")", "*", "len_pos_triples", ")", ".", "cuda", "(", ")", "\n", "# y = -torch.ones(int(args.valid_invalid_ratio_gat) * len_pos_triples).to(args.gpu)", "\n", "\n", "loss", "=", "gat_loss_func", "(", "pos_norm", ",", "neg_norm", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.train_gat": [[111, 186], ["copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "range", "fedGAT.Client.model_gat.final_entity_embeddings.data.clone().detach", "fedGAT.Client.model_gat.final_relation_embeddings.data.clone().detach", "fedGAT.Client.model_gat.parameters", "fedGAT.Client.Corpus_.get_batch_nhop_neighbors_all", "random.shuffle", "numpy.array().astype", "fedGAT.Client.model_gat.train", "range", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "epoch_losses.append", "sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "fedGAT.Client.Corpus_.get_iteration_batch", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "fedGAT.Client.model_gat", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "fedGAT.Client.batch_gat_loss", "fedGAT.Client.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "epoch_loss.append", "fedGAT.Client.model_gat.final_entity_embeddings.data.clone", "fedGAT.Client.model_gat.final_relation_embeddings.data.clone", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array", "len", "len", "fedGAT.Client.data.item", "sum", "len", "list", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_batch_nhop_neighbors_all", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_iteration_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.batch_gat_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward"], ["", "def", "train_gat", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "model_gat", ".", "entity_embeddings", ".", "data", "=", "copy", ".", "deepcopy", "(", "self", ".", "entity_embeddings", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "model_gat", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay_gat", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "500", ",", "gamma", "=", "0.5", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "gat_loss_func", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "self", ".", "args", ".", "margin", ")", "\n", "\n", "current_batch_2hop_indices", "=", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "if", "(", "self", ".", "args", ".", "use_2hop", ")", ":", "\n", "            ", "current_batch_2hop_indices", "=", "self", ".", "Corpus_", ".", "get_batch_nhop_neighbors_all", "(", "self", ".", "args", ",", "\n", "self", ".", "Corpus_", ".", "unique_entities_train", ",", "self", ".", "node_neighbors_2hop", ")", "\n", "\n", "", "current_batch_2hop_indices", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "current_batch_2hop_indices", ")", ")", ".", "cuda", "(", ")", "\n", "# current_batch_2hop_indices = Variable(", "\n", "#     torch.LongTensor(current_batch_2hop_indices)).to(args.gpu)", "\n", "\n", "epoch_losses", "=", "[", "]", "# losses of all epochs", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs_gat", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "Corpus_", ".", "train_triples", ")", "\n", "self", ".", "Corpus_", ".", "train_indices", "=", "np", ".", "array", "(", "\n", "list", "(", "self", ".", "Corpus_", ".", "train_triples", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "self", ".", "model_gat", ".", "train", "(", ")", "# getting in training mode", "\n", "# start_time = time.time()", "\n", "epoch_loss", "=", "[", "]", "\n", "\n", "if", "len", "(", "self", ".", "Corpus_", ".", "train_indices", ")", "%", "self", ".", "args", ".", "batch_size_gat", "==", "0", ":", "\n", "                ", "num_iters_per_epoch", "=", "len", "(", "\n", "self", ".", "Corpus_", ".", "train_indices", ")", "//", "self", ".", "args", ".", "batch_size_gat", "\n", "", "else", ":", "\n", "                ", "num_iters_per_epoch", "=", "(", "\n", "len", "(", "self", ".", "Corpus_", ".", "train_indices", ")", "//", "self", ".", "args", ".", "batch_size_gat", ")", "+", "1", "\n", "\n", "", "for", "iters", "in", "range", "(", "num_iters_per_epoch", ")", ":", "\n", "# start_time_iter = time.time()", "\n", "                ", "train_indices", ",", "train_values", "=", "self", ".", "Corpus_", ".", "get_iteration_batch", "(", "iters", ")", "\n", "\n", "train_indices", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "train_indices", ")", ")", ".", "cuda", "(", ")", "\n", "train_values", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "train_values", ")", ")", ".", "cuda", "(", ")", "\n", "# train_indices = Variable(", "\n", "#     torch.LongTensor(train_indices)).to(args.gpu)", "\n", "# train_values = Variable(torch.FloatTensor(train_values)).to(args.gpu)", "\n", "\n", "# forward pass", "\n", "entity_embed", ",", "relation_embed", "=", "self", ".", "model_gat", "(", "\n", "self", ".", "Corpus_", ",", "self", ".", "Corpus_", ".", "train_adj_matrix", ",", "train_indices", ",", "current_batch_2hop_indices", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "self", ".", "batch_gat_loss", "(", "\n", "gat_loss_func", ",", "train_indices", ",", "entity_embed", ",", "relation_embed", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "# end_time_iter = time.time()", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "epoch_losses", ".", "append", "(", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ")", "\n", "\n", "", "self", ".", "entity_embeddings", "=", "self", ".", "model_gat", ".", "final_entity_embeddings", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "self", ".", "relation_embeddings", "=", "self", ".", "model_gat", ".", "final_relation_embeddings", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "return", "(", "sum", "(", "epoch_losses", ")", "/", "len", "(", "epoch_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.train_conv": [[188, 246], ["int", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "torch.nn.SoftMarginLoss", "range", "fedGAT.Client.model_conv.parameters", "random.shuffle", "numpy.array().astype", "fedGAT.Client.model_conv.train", "range", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "torch.optim.lr_scheduler.StepLR.step", "epoch_losses.append", "fedGAT.Client.Corpus_.get_iteration_batch", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "fedGAT.Client.model_conv", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.SoftMarginLoss.", "torch.nn.SoftMarginLoss.", "torch.nn.SoftMarginLoss.", "torch.nn.SoftMarginLoss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "epoch_loss.append", "numpy.array", "len", "len", "fedGAT.Client.view", "torch.autograd.Variable().cuda.view", "torch.nn.SoftMarginLoss.data.item", "sum", "len", "list", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train", "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_iteration_batch", "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward"], ["", "def", "train_conv", "(", "self", ")", ":", "\n", "\n", "# self.model_conv.final_entity_embeddings = self.model_gat.final_entity_embeddings", "\n", "# self.model_conv.final_relation_embeddings = self.model_gat.final_relation_embeddings", "\n", "\n", "        ", "self", ".", "Corpus_", ".", "batch_size", "=", "self", ".", "args", ".", "batch_size_conv", "\n", "self", ".", "Corpus_", ".", "invalid_valid_ratio", "=", "int", "(", "self", ".", "args", ".", "valid_invalid_ratio_conv", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "model_conv", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay_conv", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "25", ",", "gamma", "=", "0.5", ",", "last_epoch", "=", "-", "1", ")", "\n", "\n", "margin_loss", "=", "torch", ".", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n", "epoch_losses", "=", "[", "]", "# losses of all epochs", "\n", "# print(\"Number of epochs {}\".format(args.epochs_conv))", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "epochs_conv", ")", ":", "\n", "# print(\"\\nepoch-> \", epoch)", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "Corpus_", ".", "train_triples", ")", "\n", "self", ".", "Corpus_", ".", "train_indices", "=", "np", ".", "array", "(", "\n", "list", "(", "self", ".", "Corpus_", ".", "train_triples", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "self", ".", "model_conv", ".", "train", "(", ")", "# getting in training mode", "\n", "# start_time = time.time()", "\n", "epoch_loss", "=", "[", "]", "\n", "\n", "if", "len", "(", "self", ".", "Corpus_", ".", "train_indices", ")", "%", "self", ".", "args", ".", "batch_size_conv", "==", "0", ":", "\n", "                ", "num_iters_per_epoch", "=", "len", "(", "\n", "self", ".", "Corpus_", ".", "train_indices", ")", "//", "self", ".", "args", ".", "batch_size_conv", "\n", "", "else", ":", "\n", "                ", "num_iters_per_epoch", "=", "(", "\n", "len", "(", "self", ".", "Corpus_", ".", "train_indices", ")", "//", "self", ".", "args", ".", "batch_size_conv", ")", "+", "1", "\n", "\n", "", "for", "iters", "in", "range", "(", "num_iters_per_epoch", ")", ":", "\n", "# start_time_iter = time.time()", "\n", "                ", "train_indices", ",", "train_values", "=", "self", ".", "Corpus_", ".", "get_iteration_batch", "(", "iters", ")", "\n", "\n", "train_indices", "=", "Variable", "(", "\n", "torch", ".", "LongTensor", "(", "train_indices", ")", ")", ".", "cuda", "(", ")", "\n", "train_values", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "train_values", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "preds", "=", "self", ".", "model_conv", "(", "\n", "self", ".", "Corpus_", ",", "self", ".", "Corpus_", ".", "train_adj_matrix", ",", "train_indices", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "margin_loss", "(", "preds", ".", "view", "(", "-", "1", ")", ",", "train_values", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", ".", "append", "(", "loss", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "epoch_losses", ".", "append", "(", "sum", "(", "epoch_loss", ")", "/", "len", "(", "epoch_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update": [[255, 258], ["fedGAT.Client.train_gat"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.train_gat"], ["", "", "def", "client_update", "(", "self", ")", ":", "\n", "        ", "loss", "=", "self", ".", "train_gat", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval": [[259, 271], ["fedGAT.Client.train_conv", "fedGAT.Client.model_conv.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fedGAT.Client.Corpus_.get_validation_pred"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.train_conv", "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_validation_pred"], ["", "def", "client_eval", "(", "self", ",", "istest", ")", ":", "\n", "\n", "        ", "self", ".", "model_conv", ".", "final_relation_embeddings", ".", "data", "=", "self", ".", "relation_embeddings", "\n", "self", ".", "model_conv", ".", "final_entity_embeddings", ".", "data", "=", "self", ".", "entity_embeddings", "\n", "\n", "self", ".", "train_conv", "(", ")", "\n", "\n", "self", ".", "model_conv", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "self", ".", "Corpus_", ".", "get_validation_pred", "(", "self", ".", "args", ",", "self", ".", "model_conv", ",", "self", ".", "Corpus_", ".", "unique_entities_train", ",", "istest", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.__init__": [[274, 299], ["preprocess.get_all_clients", "len", "fedGAT.Server", "sum", "sum", "fedGAT.Client", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "all_data", ")", ":", "\n", "        ", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "headTailSelector_list", ",", "unique_entities_train_list", ",", "rel_embed_list", ",", "self", ".", "ent_freq_mat", ",", "nentity", "=", "get_all_clients", "(", "all_data", ",", "args", ")", "\n", "\n", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# client", "\n", "self", ".", "num_clients", "=", "len", "(", "train_dataloader_list", ")", "\n", "self", ".", "server", "=", "Server", "(", "args", ",", "nentity", ")", "\n", "# self.clients = [", "\n", "#     Client(args, i, all_data[i], train_dataloader_list[i], valid_dataloader_list[i],", "\n", "#            test_dataloader_list[i], headTailSelector_list[i], unique_entities_train_list[i], rel_embed_list[i], self.server.entity_embeddings) for i in range(self.num_clients)", "\n", "# ]", "\n", "self", ".", "clients", "=", "[", "\n", "Client", "(", "args", ",", "i", ",", "train_dataloader_list", "[", "i", "]", ",", "valid_dataloader_list", "[", "i", "]", ",", "\n", "test_dataloader_list", "[", "i", "]", ",", "headTailSelector_list", "[", "i", "]", ",", "unique_entities_train_list", "[", "i", "]", ",", "rel_embed_list", "[", "i", "]", ",", "self", ".", "server", ".", "entity_embeddings", ")", "for", "i", "in", "range", "(", "self", ".", "num_clients", ")", "\n", "]", "\n", "\n", "self", ".", "total_test_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "test_dataloader", "[", "0", "]", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "test_eval_weights", "=", "[", "len", "(", "client", ".", "test_dataloader", "[", "0", "]", ")", "/", "self", ".", "total_test_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n", "self", ".", "total_valid_data_size", "=", "sum", "(", "[", "len", "(", "client", ".", "valid_dataloader", "[", "0", "]", ")", "for", "client", "in", "self", ".", "clients", "]", ")", "\n", "self", ".", "valid_eval_weights", "=", "[", "len", "(", "client", ".", "valid_dataloader", "[", "0", "]", ")", "/", "self", ".", "total_valid_data_size", "for", "client", "in", "self", ".", "clients", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss": [[300, 302], ["fedGAT.fedGAT.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result": [[303, 308], ["fedGAT.fedGAT.args.writer.add_scalar", "fedGAT.fedGAT.args.writer.add_scalar", "fedGAT.fedGAT.args.writer.add_scalar", "fedGAT.fedGAT.args.writer.add_scalar"], "methods", ["None"], ["", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint": [[309, 326], ["os.listdir", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.listdir", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.isfile", "os.remove", "os.path.isfile", "os.remove", "client.model_conv.state_dict", "os.path.join", "filename.split", "os.path.join", "os.path.join", "filename.split", "os.path.join", "os.path.join", "str", "str", "str"], "methods", ["None"], ["", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'ent_embed'", ":", "self", ".", "server", ".", "entity_embeddings", ",", "\n", "'rel_embed'", ":", "[", "client", ".", "relation_embeddings", "for", "client", "in", "self", ".", "clients", "]", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", "\n", "# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "# delete previous models checkpoints", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "output_folder", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "filename", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "filename", ")", ")", "\n", "# save current models checkpoints", "\n", "", "", "for", "client", "in", "self", ".", "clients", ":", "\n", "        \t", "torch", ".", "save", "(", "client", ".", "model_conv", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'_client.'", "+", "str", "(", "client", ".", "client_id", ")", "+", "'.pth'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_model": [[327, 333], ["os.rename", "os.path.join", "os.path.join", "os.rename", "os.path.join", "os.path.join", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "for", "client", "in", "self", ".", "clients", ":", "\n", "            ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'_client.'", "+", "str", "(", "client", ".", "client_id", ")", "+", "'.pth'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "self", ".", "args", ".", "name", "+", "'_client.'", "+", "str", "(", "client", ".", "client_id", ")", "+", "'.best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb": [[334, 337], ["enumerate", "fedGAT.fedGAT.server.send_emb"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb"], ["", "", "def", "send_emb", "(", "self", ")", ":", "\n", "        ", "for", "k", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "entity_embeddings", "=", "self", ".", "server", ".", "send_emb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.train": [[338, 399], ["range", "logging.info", "logging.info", "fedGAT.fedGAT.save_model", "fedGAT.fedGAT.before_test_load", "fedGAT.fedGAT.evaluate", "max", "numpy.random.choice", "fedGAT.fedGAT.send_emb", "iter", "fedGAT.fedGAT.server.aggregation", "logging.info", "fedGAT.fedGAT.write_training_loss", "loss_plot_result.append", "round", "fedGAT.fedGAT.clients[].client_update", "numpy.mean", "numpy.mean", "fedGAT.fedGAT.evaluate", "fedGAT.fedGAT.write_evaluation_result", "mrr_plot_result.append", "logging.info", "numpy.mean", "logging.info", "fedGAT.fedGAT.save_checkpoint", "logging.info", "open", "pickle.dump", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Server.aggregation", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_training_loss", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_update", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.write_evaluation_result", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.save_checkpoint"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "mrr_plot_result", "=", "[", "]", "\n", "loss_plot_result", "=", "[", "]", "\n", "\n", "for", "num_round", "in", "range", "(", "self", ".", "args", ".", "max_round", ")", ":", "\n", "            ", "n_sample", "=", "max", "(", "round", "(", "self", ".", "args", ".", "fraction", "*", "self", ".", "num_clients", ")", ",", "1", ")", "\n", "sample_set", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_clients", ",", "n_sample", ",", "replace", "=", "False", ")", "\n", "\n", "self", ".", "send_emb", "(", ")", "\n", "\n", "round_loss", "=", "0", "\n", "for", "k", "in", "iter", "(", "sample_set", ")", ":", "\n", "                ", "client_loss", "=", "self", ".", "clients", "[", "k", "]", ".", "client_update", "(", ")", "\n", "round_loss", "+=", "client_loss", "\n", "", "round_loss", "/=", "n_sample", "\n", "self", ".", "server", ".", "aggregation", "(", "self", ".", "clients", ",", "self", ".", "ent_freq_mat", ")", "\n", "\n", "logging", ".", "info", "(", "'round: {} | loss: {:.4f}'", ".", "format", "(", "num_round", ",", "np", ".", "mean", "(", "round_loss", ")", ")", ")", "\n", "self", ".", "write_training_loss", "(", "np", ".", "mean", "(", "round_loss", ")", ",", "num_round", ")", "\n", "\n", "loss_plot_result", ".", "append", "(", "np", ".", "mean", "(", "round_loss", ")", ")", "\n", "\n", "if", "num_round", "%", "self", ".", "args", ".", "check_per_round", "==", "0", "and", "num_round", "!=", "0", ":", "\n", "                ", "eval_res", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "write_evaluation_result", "(", "eval_res", ",", "num_round", ")", "\n", "\n", "if", "eval_res", "[", "'mrr'", "]", ">", "best_mrr", ":", "\n", "                    ", "best_mrr", "=", "eval_res", "[", "'mrr'", "]", "\n", "best_epoch", "=", "num_round", "\n", "logging", ".", "info", "(", "'best model | mrr {:.4f}'", ".", "format", "(", "best_mrr", ")", ")", "\n", "self", ".", "save_checkpoint", "(", "num_round", ")", "\n", "bad_count", "=", "0", "\n", "", "else", ":", "\n", "                    ", "bad_count", "+=", "1", "\n", "logging", ".", "info", "(", "'best model is at round {0}, mrr {1:.4f}, bad count {2}'", ".", "format", "(", "\n", "best_epoch", ",", "best_mrr", ",", "bad_count", ")", ")", "\n", "\n", "", "mrr_plot_result", ".", "append", "(", "eval_res", "[", "'mrr'", "]", ")", "\n", "\n", "", "if", "bad_count", ">=", "self", ".", "args", ".", "early_stop_patience", ":", "\n", "                ", "logging", ".", "info", "(", "'early stop at round {}'", ".", "format", "(", "num_round", ")", ")", "\n", "\n", "loss_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_loss.pkl'", "\n", "with", "open", "(", "loss_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "loss_plot_result", ",", "fp", ")", "\n", "\n", "", "mrr_file_name", "=", "'loss/'", "+", "self", ".", "args", ".", "name", "+", "'_mrr.pkl'", "\n", "with", "open", "(", "mrr_file_name", ",", "'wb'", ")", "as", "fp", ":", "\n", "                    ", "pickle", ".", "dump", "(", "mrr_plot_result", ",", "fp", ")", "\n", "\n", "", "break", "\n", "\n", "", "", "logging", ".", "info", "(", "'finish training'", ")", "\n", "logging", ".", "info", "(", "'save best model'", ")", "\n", "self", ".", "save_model", "(", "best_epoch", ")", "\n", "self", ".", "before_test_load", "(", ")", "\n", "self", ".", "evaluate", "(", "istest", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.before_test_load": [[400, 410], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "enumerate", "os.path.join", "os.path.join", "client.model_conv.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "str"], "methods", ["None"], ["", "def", "before_test_load", "(", "self", ")", ":", "\n", "# load embeddings", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "server", ".", "entity_embeddings", "=", "state", "[", "'ent_embed'", "]", "\n", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client", ".", "relation_embeddings", "=", "state", "[", "'rel_embed'", "]", "[", "idx", "]", "\n", "# load conv models", "\n", "", "for", "client", "in", "self", ".", "clients", ":", "\n", "        \t", "PATH", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "self", ".", "args", ".", "name", "+", "'_client.'", "+", "str", "(", "client", ".", "client_id", ")", "+", "'.best'", ")", "\n", "client", ".", "model_conv", ".", "load_state_dict", "(", "torch", ".", "load", "(", "PATH", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.evaluate": [[412, 434], ["fedGAT.fedGAT.send_emb", "collections.defaultdict", "enumerate", "logging.info", "client.client_eval", "logging.info", "client.client_eval.items"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.fedGAT.send_emb", "home.repos.pwc.inspect_result.taokz_FedR.GAT.fedGAT.Client.client_eval"], ["", "", "def", "evaluate", "(", "self", ",", "istest", "=", "False", ")", ":", "\n", "        ", "self", ".", "send_emb", "(", ")", "\n", "result", "=", "ddict", "(", "int", ")", "\n", "if", "istest", ":", "\n", "            ", "weights", "=", "self", ".", "test_eval_weights", "\n", "", "else", ":", "\n", "            ", "weights", "=", "self", ".", "valid_eval_weights", "\n", "", "for", "idx", ",", "client", "in", "enumerate", "(", "self", ".", "clients", ")", ":", "\n", "            ", "client_res", "=", "client", ".", "client_eval", "(", "istest", ")", "\n", "\n", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "client_res", "[", "'mrr'", "]", ",", "client_res", "[", "'hits@1'", "]", ",", "\n", "client_res", "[", "'hits@3'", "]", ",", "client_res", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "for", "k", ",", "v", "in", "client_res", ".", "items", "(", ")", ":", "\n", "                ", "result", "[", "k", "]", "+=", "v", "*", "weights", "[", "idx", "]", "\n", "\n", "", "", "logging", ".", "info", "(", "'mrr: {:.4f}, hits@1: {:.4f}, hits@3: {:.4f}, hits@10: {:.4f}'", ".", "format", "(", "\n", "result", "[", "'mrr'", "]", ",", "result", "[", "'hits@1'", "]", ",", "\n", "result", "[", "'hits@3'", "]", ",", "result", "[", "'hits@10'", "]", ")", ")", "\n", "\n", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpGAT.__init__": [[12, 48], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "enumerate", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "layers.SpGraphAttentionLayer", "layers.SpGraphAttentionLayer", "models.SpGAT.add_module", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["import", "numpy", "as", "np", "\n", "from", "gnn_layers", "import", "*", "\n", "\n", "class", "NoGE_GCN_QuatE", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "emb_dim", ",", "hid_dim", ",", "adj", ",", "n_entities", ",", "n_relations", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "NoGE_GCN_QuatE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adj", "=", "adj", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "n_entities", "=", "n_entities", "\n", "self", ".", "n_relations", "=", "n_relations", "\n", "\n", "self", ".", "embeddings", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "n_entities", "+", "self", ".", "n_relations", ",", "emb_dim", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "embeddings", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "lst_gcn", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "if", "_layer", "==", "0", ":", "\n", "                ", "self", ".", "lst_gcn", ".", "append", "(", "GraphConvolution", "(", "emb_dim", ",", "hid_dim", ",", "act", "=", "torch", ".", "tanh", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lst_gcn", ".", "append", "(", "GraphConvolution", "(", "hid_dim", ",", "hid_dim", ",", "act", "=", "torch", ".", "tanh", ")", ")", "\n", "\n", "", "", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hid_dim", ")", "\n", "self", ".", "hidden_dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", ")", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "e1_idx", ",", "r_idx", ",", "lst_indexes", ")", ":", "\n", "        ", "X", "=", "self", ".", "embeddings", "(", "lst_indexes", ")", "\n", "#print(1, self.adj.get_device())", "\n", "for", "_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "X", "=", "self", ".", "lst_gcn", "[", "_layer", "]", "(", "X", ",", "self", ".", "adj", ")", "\n", "# change", "\n", "# h = X[e1_idx]", "\n", "# r = X[r_idx + self.n_entities]", "\n", "", "h", "=", "X", "[", "e1_idx", "+", "self", ".", "n_relations", "]", "\n", "r", "=", "X", "[", "r_idx", "]", "\n", "normalized_r", "=", "normalization", "(", "r", ")", "\n", "hr", "=", "vec_vec_wise_multiplication", "(", "h", ",", "normalized_r", ")", "# following the 1-N scoring strategy", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpGAT.forward": [[50, 71], ["relation_embed.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SpGAT.dropout_layer", "relation_embed.cuda.cuda.mm", "torch.elu", "torch.elu", "torch.elu", "relation_embed[].cuda", "models.SpGAT.out_att", "att"], "methods", ["None"], ["#change", "\n", "#hrt = torch.mm(hr, X[:self.n_entities].t())", "\n", "hrt", "=", "torch", ".", "mm", "(", "hr", ",", "X", "[", "self", ".", "n_relations", ":", "]", ".", "t", "(", ")", ")", "\n", "pred", "=", "torch", ".", "sigmoid", "(", "hrt", ")", "\n", "return", "pred", "\n", "\n", "# Quaternion operations", "\n", "", "", "def", "normalization", "(", "quaternion", ",", "split_dim", "=", "1", ")", ":", "# vectorized quaternion bs x 4dim", "\n", "    ", "size", "=", "quaternion", ".", "size", "(", "split_dim", ")", "//", "4", "\n", "quaternion", "=", "quaternion", ".", "reshape", "(", "-", "1", ",", "4", ",", "size", ")", "# bs x 4 x dim", "\n", "quaternion", "=", "quaternion", "/", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "quaternion", "**", "2", ",", "1", ",", "True", ")", ")", "# quaternion / norm", "\n", "quaternion", "=", "quaternion", ".", "reshape", "(", "-", "1", ",", "4", "*", "size", ")", "\n", "return", "quaternion", "\n", "\n", "", "def", "make_wise_quaternion", "(", "quaternion", ")", ":", "# for vector * vector quaternion element-wise multiplication", "\n", "    ", "if", "len", "(", "quaternion", ".", "size", "(", ")", ")", "==", "1", ":", "\n", "        ", "quaternion", "=", "quaternion", ".", "unsqueeze", "(", "0", ")", "\n", "", "size", "=", "quaternion", ".", "size", "(", "1", ")", "//", "4", "\n", "r", ",", "i", ",", "j", ",", "k", "=", "torch", ".", "split", "(", "quaternion", ",", "size", ",", "dim", "=", "1", ")", "\n", "r2", "=", "torch", ".", "cat", "(", "[", "r", ",", "-", "i", ",", "-", "j", ",", "-", "k", "]", ",", "dim", "=", "1", ")", "# 0, 1, 2, 3 --> bs x 4dim", "\n", "i2", "=", "torch", ".", "cat", "(", "[", "i", ",", "r", ",", "-", "k", ",", "j", "]", ",", "dim", "=", "1", ")", "# 1, 0, 3, 2", "\n", "j2", "=", "torch", ".", "cat", "(", "[", "j", ",", "k", ",", "r", ",", "-", "i", "]", ",", "dim", "=", "1", ")", "# 2, 3, 0, 1", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATModified.__init__": [[74, 117], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.SpGAT", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["\n", "", "def", "get_quaternion_wise_mul", "(", "quaternion", ")", ":", "\n", "    ", "size", "=", "quaternion", ".", "size", "(", "1", ")", "//", "4", "\n", "quaternion", "=", "quaternion", ".", "view", "(", "-", "1", ",", "4", ",", "size", ")", "\n", "quaternion", "=", "torch", ".", "sum", "(", "quaternion", ",", "1", ")", "\n", "return", "quaternion", "\n", "\n", "", "def", "vec_vec_wise_multiplication", "(", "q", ",", "p", ")", ":", "# vector * vector", "\n", "    ", "q_r", ",", "q_i", ",", "q_j", ",", "q_k", "=", "make_wise_quaternion", "(", "q", ")", "# bs x 4dim", "\n", "\n", "qp_r", "=", "get_quaternion_wise_mul", "(", "q_r", "*", "p", ")", "# qrpr\u2212qipi\u2212qjpj\u2212qkpk", "\n", "qp_i", "=", "get_quaternion_wise_mul", "(", "q_i", "*", "p", ")", "# qipr+qrpi\u2212qkpj+qjpk", "\n", "qp_j", "=", "get_quaternion_wise_mul", "(", "q_j", "*", "p", ")", "# qjpr+qkpi+qrpj\u2212qipk", "\n", "qp_k", "=", "get_quaternion_wise_mul", "(", "q_k", "*", "p", ")", "# qkpr\u2212qjpi+qipj+qrpk", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "qp_r", ",", "qp_i", ",", "qp_j", ",", "qp_k", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# def regularization(quaternion):  # vectorized quaternion bs x 4dim", "\n", "#     size = quaternion.size(1) // 4", "\n", "#     r, i, j, k = torch.split(quaternion, size, dim=1)", "\n", "#     return torch.mean(r ** 2) + torch.mean(i ** 2) + torch.mean(j ** 2) + torch.mean(k ** 2)", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATModified.forward": [[118, 165], ["torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_list.cuda.cuda.cuda", "edge_type.cuda.cuda.cuda", "edge_list_nhop.cuda.cuda.cuda", "edge_type_nhop.cuda.cuda.cuda", "models.SpKBGATModified.relation_embeddings[].cuda", "torch.normalize().detach", "torch.normalize().detach", "torch.normalize().detach", "models.SpKBGATModified.sparse_gat_1", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.unique().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "models.SpKBGATModified.entity_embeddings.mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "train_indices_nhop[].unsqueeze", "train_indices_nhop[].unsqueeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda.unsqueeze().expand_as", "torch.zeros().cuda.unsqueeze().expand_as", "torch.zeros().cuda.unsqueeze().expand_as", "train_indices_nhop[].unsqueeze", "train_indices_nhop[].unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze", "torch.zeros().cuda.unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.__init__": [[168, 206], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "layers.ConvKB", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], []], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.forward": [[207, 212], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SpKBGATConvOnly.convKB", "models.SpKBGATConvOnly.final_entity_embeddings[].unsqueeze", "models.SpKBGATConvOnly.final_relation_embeddings[].unsqueeze", "models.SpKBGATConvOnly.final_entity_embeddings[].unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test": [[213, 220], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.SpKBGATConvOnly.convKB", "models.SpKBGATConvOnly.final_entity_embeddings[].unsqueeze", "models.SpKBGATConvOnly.final_relation_embeddings[].unsqueeze", "models.SpKBGATConvOnly.final_entity_embeddings[].unsqueeze"], "methods", ["None"], []], "home.repos.pwc.inspect_result.taokz_FedR.GAT.main.parse_args": [[23, 98], ["argparse.ArgumentParser", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.add_argument", "args.parse_args.parse_args"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.main.parse_args"], ["", "else", ":", "\n", "            ", "train_dataset", ",", "valid_dataset", ",", "test_dataset", ",", "nrelation", ",", "nentity", "=", "get_task_dataset", "(", "data", ",", "args", ")", "\n", "\n", "", "self", ".", "nentity", "=", "nentity", "\n", "self", ".", "nrelation", "=", "nrelation", "\n", "\n", "# embedding", "\n", "embedding_range", "=", "torch", ".", "Tensor", "(", "[", "(", "args", ".", "gamma", "+", "args", ".", "epsilon", ")", "/", "args", ".", "hidden_dim", "]", ")", "\n", "if", "args", ".", "model", "in", "[", "'RotatE'", ",", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "entity_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nentity", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "entity_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "if", "args", ".", "model", "in", "[", "'ComplEx'", "]", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", "*", "2", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "relation_embedding", "=", "torch", ".", "zeros", "(", "self", ".", "nrelation", ",", "args", ".", "hidden_dim", ")", ".", "to", "(", "args", ".", "gpu", ")", ".", "requires_grad_", "(", ")", "\n", "", "nn", ".", "init", ".", "uniform_", "(", "\n", "tensor", "=", "self", ".", "relation_embedding", ",", "\n", "a", "=", "-", "embedding_range", ".", "item", "(", ")", ",", "\n", "b", "=", "embedding_range", ".", "item", "(", ")", "\n", ")", "\n", "\n", "# dataloader", "\n", "self", ".", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "TrainDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "if", "args", ".", "run_mode", "==", "'Entire'", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset_Entire", ".", "collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "valid_dataloader", "=", "DataLoader", "(", "\n", "valid_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "self", ".", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "collate_fn", "=", "TestDataset", ".", "collate_fn", "\n", ")", "\n", "\n", "# model", "\n", "", "self", ".", "kge_model", "=", "KGEModel", "(", "args", ",", "args", ".", "model", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "{", "'params'", ":", "self", ".", "entity_embedding", "}", ",", "\n", "{", "'params'", ":", "self", ".", "relation_embedding", "}", "]", ",", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "", "def", "before_test_load", "(", "self", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ",", "\n", "map_location", "=", "self", ".", "args", ".", "gpu", ")", "\n", "self", ".", "relation_embedding", "=", "state", "[", "'rel_emb'", "]", "\n", "self", ".", "entity_embedding", "=", "state", "[", "'ent_emb'", "]", "\n", "\n", "", "def", "write_training_loss", "(", "self", ",", "loss", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"training/loss\"", ",", "loss", ",", "e", ")", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.main.init_dir": [[99, 111], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "", "def", "write_evaluation_result", "(", "self", ",", "results", ",", "e", ")", ":", "\n", "        ", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/mrr\"", ",", "results", "[", "'mrr'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits10\"", ",", "results", "[", "'hits@10'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits3\"", ",", "results", "[", "'hits@3'", "]", ",", "e", ")", "\n", "self", ".", "args", ".", "writer", ".", "add_scalar", "(", "\"evaluation/hits1\"", ",", "results", "[", "'hits@1'", "]", ",", "e", ")", "\n", "\n", "", "def", "save_checkpoint", "(", "self", ",", "e", ")", ":", "\n", "        ", "state", "=", "{", "'rel_emb'", ":", "self", ".", "relation_embedding", ",", "\n", "'ent_emb'", ":", "self", ".", "entity_embedding", "}", "\n", "# delete previous checkpoint", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "self", ".", "args", ".", "state_dir", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "name", "in", "filename", ".", "split", "(", "'.'", ")", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "filename", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.main.init_logger": [[113, 129], ["os.path.join", "logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger"], "function", ["None"], ["# save current checkpoint", "\n", "", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "\n", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "e", ")", "+", "'.ckpt'", ")", ")", "\n", "\n", "", "def", "save_model", "(", "self", ",", "best_epoch", ")", ":", "\n", "        ", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.'", "+", "str", "(", "best_epoch", ")", "+", "'.ckpt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "state_dir", ",", "self", ".", "args", ".", "name", "+", "'.best'", ")", ")", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "best_epoch", "=", "0", "\n", "best_mrr", "=", "0", "\n", "bad_count", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "args", ".", "max_epoch", ")", ":", "\n", "            ", "losses", "=", "[", "]", "\n", "self", ".", "kge_model", ".", "train", "(", ")", "\n", "for", "batch", "in", "self", ".", "train_dataloader", ":", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.ConvKB.__init__": [[13, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "input_seq_len", ",", "in_channels", ",", "out_channels", ",", "drop_prob", ",", "alpha_leaky", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_layer", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "(", "1", ",", "input_seq_len", ")", ")", "# kernel size -> 1*input_seq_length(i.e. 2)", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "drop_prob", ")", "\n", "self", ".", "non_linearity", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "(", "input_dim", ")", "*", "out_channels", ",", "1", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc_layer", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "conv_layer", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.ConvKB.forward": [[25, 40], ["conv_input.unsqueeze.unsqueeze.size", "conv_input.unsqueeze.unsqueeze.transpose", "conv_input.unsqueeze.unsqueeze.unsqueeze", "layers.ConvKB.dropout", "layers.ConvKB.squeeze().view", "layers.ConvKB.fc_layer", "layers.ConvKB.non_linearity", "layers.ConvKB.conv_layer", "layers.ConvKB.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "conv_input", ")", ":", "\n", "\n", "        ", "batch_size", ",", "length", ",", "dim", "=", "conv_input", ".", "size", "(", ")", "\n", "# assuming inputs are of the form ->", "\n", "conv_input", "=", "conv_input", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# batch * length(which is 3 here -> entity,relation,entity) * dim", "\n", "# To make tensor of size 4, where second dim is for input channels", "\n", "conv_input", "=", "conv_input", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "out_conv", "=", "self", ".", "dropout", "(", "\n", "self", ".", "non_linearity", "(", "self", ".", "conv_layer", "(", "conv_input", ")", ")", ")", "\n", "\n", "input_fc", "=", "out_conv", ".", "squeeze", "(", "-", "1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "fc_layer", "(", "input_fc", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.forward": [[44, 56], ["torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum", "torch.sparse.sum.to_dense", "torch.sparse.sum.to_dense", "torch.sparse.sum.to_dense", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.sparse_coo_tensor._indices", "torch.sparse_coo_tensor._indices", "torch.sparse_coo_tensor._indices"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "edge", ",", "edge_w", ",", "N", ",", "E", ",", "out_features", ")", ":", "\n", "# assert indices.requires_grad == False", "\n", "        ", "a", "=", "torch", ".", "sparse_coo_tensor", "(", "\n", "edge", ",", "edge_w", ",", "torch", ".", "Size", "(", "[", "N", ",", "N", ",", "out_features", "]", ")", ")", "\n", "b", "=", "torch", ".", "sparse", ".", "sum", "(", "a", ",", "dim", "=", "1", ")", "\n", "ctx", ".", "N", "=", "b", ".", "shape", "[", "0", "]", "\n", "ctx", ".", "outfeat", "=", "b", ".", "shape", "[", "1", "]", "\n", "ctx", ".", "E", "=", "E", "\n", "ctx", ".", "indices", "=", "a", ".", "_indices", "(", ")", "[", "0", ",", ":", "]", "\n", "\n", "return", "b", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFunctionFinal.backward": [[57, 72], ["edge_sources.cuda.cuda.cuda"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "grad_values", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "1", "]", ":", "\n", "            ", "edge_sources", "=", "ctx", ".", "indices", "\n", "\n", "# if(CUDA):", "\n", "# edge_sources = edge_sources.to(torch.device('cuda:1'))", "\n", "edge_sources", "=", "edge_sources", ".", "cuda", "(", ")", "\n", "\n", "grad_values", "=", "grad_output", "[", "edge_sources", "]", "\n", "# grad_values = grad_values.view(ctx.E, ctx.outfeat)", "\n", "# print(\"Grad Outputs-> \", grad_output)", "\n", "# print(\"Grad values-> \", grad_values)", "\n", "", "return", "None", ",", "grad_values", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpecialSpmmFinal.forward": [[75, 77], ["SpecialSpmmFunctionFinal.apply"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "edge", ",", "edge_w", ",", "N", ",", "E", ",", "out_features", ")", ":", "\n", "        ", "return", "SpecialSpmmFunctionFinal", ".", "apply", "(", "edge", ",", "edge_w", ",", "N", ",", "E", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.__init__": [[84, 103], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "layers.SpecialSpmmFinal", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__"], ["def", "__init__", "(", "self", ",", "num_nodes", ",", "in_features", ",", "out_features", ",", "nrela_dim", ",", "dropout", ",", "alpha", ",", "concat", "=", "True", ",", "gpu", "=", "False", ")", ":", "\n", "        ", "super", "(", "SpGraphAttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "nrela_dim", "=", "nrela_dim", "\n", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "\n", "size", "=", "(", "out_features", ",", "2", "*", "in_features", "+", "nrela_dim", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "a", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "size", "=", "(", "1", ",", "out_features", ")", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "a_2", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "self", ".", "special_spmm_final", "=", "SpecialSpmmFinal", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.forward": [[104, 164], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "torch.cat().t", "layers.SpGraphAttentionLayer.a.mm", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "torch.exp().unsqueeze", "layers.SpGraphAttentionLayer.special_spmm_final", "layers.SpGraphAttentionLayer.squeeze", "layers.SpGraphAttentionLayer.dropout", "layers.SpGraphAttentionLayer.special_spmm_final", "h_prime.div.div.div", "input.size", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "layers.SpGraphAttentionLayer.leakyrelu", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.elu", "torch.elu", "torch.elu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layers.SpGraphAttentionLayer.a_2.mm().squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "layers.SpGraphAttentionLayer.a_2.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "edge", ",", "edge_embed", ",", "edge_list_nhop", ",", "edge_embed_nhop", ")", ":", "\n", "        ", "N", "=", "input", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# print(edge.shape)", "\n", "# print(edge_list_nhop.shape)", "\n", "# print(edge_embed.shape, edge_embed_nhop.shape)", "\n", "# print(input.shape)", "\n", "\n", "\n", "# Self-attention on the nodes - Shared attention mechanism", "\n", "edge", "=", "torch", ".", "cat", "(", "(", "edge", "[", ":", ",", ":", "]", ",", "edge_list_nhop", "[", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "\n", "\n", "edge_embed", "=", "torch", ".", "cat", "(", "\n", "(", "edge_embed", "[", ":", ",", ":", "]", ",", "edge_embed_nhop", "[", ":", ",", ":", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "edge_h", "=", "torch", ".", "cat", "(", "\n", "(", "input", "[", "edge", "[", "0", ",", ":", "]", ",", ":", "]", ",", "input", "[", "edge", "[", "1", ",", ":", "]", ",", ":", "]", ",", "edge_embed", "[", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", ".", "t", "(", ")", "\n", "# edge_h: (2*in_dim + nrela_dim) x E", "\n", "assert", "not", "torch", ".", "isnan", "(", "edge_h", ")", ".", "any", "(", ")", "\n", "\n", "edge_m", "=", "self", ".", "a", ".", "mm", "(", "edge_h", ")", "\n", "# edge_m: D * E", "\n", "\n", "# to be checked later", "\n", "powers", "=", "-", "self", ".", "leakyrelu", "(", "self", ".", "a_2", ".", "mm", "(", "edge_m", ")", ".", "squeeze", "(", ")", ")", "\n", "edge_e", "=", "torch", ".", "exp", "(", "powers", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "edge_e", ")", ".", "any", "(", ")", "\n", "# edge_e: E", "\n", "\n", "e_rowsum", "=", "self", ".", "special_spmm_final", "(", "\n", "edge", ",", "edge_e", ",", "N", ",", "edge_e", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "e_rowsum", "[", "e_rowsum", "==", "0.0", "]", "=", "1e-12", "\n", "\n", "e_rowsum", "=", "e_rowsum", "\n", "# e_rowsum: N x 1", "\n", "edge_e", "=", "edge_e", ".", "squeeze", "(", "1", ")", "\n", "\n", "edge_e", "=", "self", ".", "dropout", "(", "edge_e", ")", "\n", "# edge_e: E", "\n", "\n", "edge_w", "=", "(", "edge_e", "*", "edge_m", ")", ".", "t", "(", ")", "\n", "# edge_w: E * D", "\n", "\n", "h_prime", "=", "self", ".", "special_spmm_final", "(", "\n", "edge", ",", "edge_w", ",", "N", ",", "edge_w", ".", "shape", "[", "0", "]", ",", "self", ".", "out_features", ")", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "h_prime", ")", ".", "any", "(", ")", "\n", "# h_prime: N x out", "\n", "h_prime", "=", "h_prime", ".", "div", "(", "e_rowsum", ")", "\n", "# h_prime: N x out", "\n", "\n", "assert", "not", "torch", ".", "isnan", "(", "h_prime", ")", ".", "any", "(", ")", "\n", "if", "self", ".", "concat", ":", "\n", "# if this layer is not last layer,", "\n", "            ", "return", "F", ".", "elu", "(", "h_prime", ")", "\n", "", "else", ":", "\n", "# if this layer is last layer,", "\n", "            ", "return", "h_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.layers.SpGraphAttentionLayer.__repr__": [[165, 167], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.load_data": [[12, 46], ["len", "set", "range", "set.add", "set.add", "triples_data.append", "rows.append", "cols.append", "list", "rows.append", "cols.append", "data.append", "data.append", "data.append", "data.append"], "function", ["None"], ["def", "load_data", "(", "data_dict", ",", "is_unweigted", "=", "False", ",", "directed", "=", "True", ")", ":", "\n", "    ", "size", "=", "len", "(", "data_dict", "[", "'edge_type'", "]", ")", "\n", "triples_data", "=", "[", "]", "\n", "rows", ",", "cols", ",", "data", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "unique_entities", "=", "set", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "e1", "=", "data_dict", "[", "'edge_index_ori'", "]", "[", "0", "]", "[", "i", "]", "\n", "e2", "=", "data_dict", "[", "'edge_index_ori'", "]", "[", "1", "]", "[", "i", "]", "\n", "r", "=", "data_dict", "[", "'edge_type'", "]", "[", "i", "]", "\n", "\n", "unique_entities", ".", "add", "(", "e1", ")", "\n", "unique_entities", ".", "add", "(", "e2", ")", "\n", "triples_data", ".", "append", "(", "(", "e1", ",", "r", ",", "e2", ")", ")", "\n", "\n", "if", "not", "directed", ":", "\n", "# connecting source and tail entity", "\n", "            ", "rows", ".", "append", "(", "e1", ")", "\n", "cols", ".", "append", "(", "e2", ")", "\n", "# relation weight in adjacency matrix", "\n", "if", "is_unweigted", ":", "\n", "                ", "data", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "data", ".", "append", "(", "r", ")", "\n", "\n", "# connecting tail and source entity", "\n", "", "", "rows", ".", "append", "(", "e2", ")", "\n", "cols", ".", "append", "(", "e1", ")", "\n", "if", "is_unweigted", ":", "\n", "            ", "data", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "data", ".", "append", "(", "r", ")", "\n", "\n", "", "", "return", "triples_data", ",", "(", "rows", ",", "cols", ",", "data", ")", ",", "list", "(", "unique_entities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.get_all_clients": [[48, 128], ["numpy.array", "len", "torch.stack().cuda", "torch.stack().cuda", "numpy.union1d().reshape", "numpy.unique", "len", "preprocess.load_data", "preprocess.load_data", "preprocess.load_data", "range", "torch.zeros", "torch.zeros", "[].reshape", "ent_freq_list.append", "numpy.random.randn", "rel_embed_list.append", "train_dataloader_list.append", "valid_dataloader_list.append", "test_dataloader_list.append", "headTailSelector_list.append", "unique_entities_train_list.append", "len", "torch.stack", "torch.stack", "numpy.union1d", "len", "len", "sum", "sum", "left_entity[].values", "right_entity[].values"], "function", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.load_data", "home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.load_data", "home.repos.pwc.inspect_result.taokz_FedR.GAT.preprocess.load_data"], ["", "def", "get_all_clients", "(", "all_data", ",", "args", ",", "is_unweigted", "=", "False", ",", "directed", "=", "True", ")", ":", "\n", "\n", "    ", "all_ent", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "int", ")", "\n", "for", "data", "in", "all_data", ":", "\n", "        ", "all_ent", "=", "np", ".", "union1d", "(", "all_ent", ",", "data", "[", "'train'", "]", "[", "'edge_index_ori'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "nentity", "=", "len", "(", "all_ent", ")", "# all entities of training set in all clients", "\n", "if", "'DDB14'", "in", "args", ".", "data_path", ":", "\n", "        ", "nentity", "=", "9203", "\n", "\n", "", "train_dataloader_list", "=", "[", "]", "\n", "test_dataloader_list", "=", "[", "]", "\n", "valid_dataloader_list", "=", "[", "]", "\n", "headTailSelector_list", "=", "[", "]", "\n", "unique_entities_train_list", "=", "[", "]", "\n", "\n", "rel_embed_list", "=", "[", "]", "\n", "ent_freq_list", "=", "[", "]", "\n", "\n", "for", "data", "in", "all_data", ":", "\n", "        ", "nrelation", "=", "np", ".", "unique", "(", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ")", "# unique relations in training set in a client", "\n", "size", "=", "len", "(", "data", "[", "'train'", "]", "[", "'edge_type'", "]", ")", "\n", "\n", "train_triples", ",", "train_adjacency_mat", ",", "unique_entities_train", ",", "=", "load_data", "(", "data", "[", "'train'", "]", ",", "is_unweigted", ",", "directed", ")", "\n", "validation_triples", ",", "valid_adjacency_mat", ",", "unique_entities_validation", "=", "load_data", "(", "data", "[", "'valid'", "]", ",", "is_unweigted", ",", "directed", ")", "\n", "test_triples", ",", "test_adjacency_mat", ",", "unique_entities_test", "=", "load_data", "(", "data", "[", "'test'", "]", ",", "is_unweigted", ",", "directed", ")", "\n", "\n", "left_entity", ",", "right_entity", "=", "{", "}", ",", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "            ", "e1", "=", "data", "[", "'train'", "]", "[", "'edge_index_ori'", "]", "[", "0", "]", "[", "i", "]", "\n", "e2", "=", "data", "[", "'train'", "]", "[", "'edge_index_ori'", "]", "[", "1", "]", "[", "i", "]", "\n", "relation", "=", "data", "[", "'train'", "]", "[", "'edge_type'", "]", "[", "i", "]", "\n", "\n", "# Count number of occurences for each (e1, relation)", "\n", "if", "relation", "not", "in", "left_entity", ":", "\n", "                ", "left_entity", "[", "relation", "]", "=", "{", "}", "\n", "", "if", "e1", "not", "in", "left_entity", "[", "relation", "]", ":", "\n", "                ", "left_entity", "[", "relation", "]", "[", "e1", "]", "=", "0", "\n", "", "left_entity", "[", "relation", "]", "[", "e1", "]", "+=", "1", "\n", "\n", "# Count number of occurences for each (relation, e2)", "\n", "if", "relation", "not", "in", "right_entity", ":", "\n", "                ", "right_entity", "[", "relation", "]", "=", "{", "}", "\n", "", "if", "e2", "not", "in", "right_entity", "[", "relation", "]", ":", "\n", "                ", "right_entity", "[", "relation", "]", "[", "e2", "]", "=", "0", "\n", "", "right_entity", "[", "relation", "]", "[", "e2", "]", "+=", "1", "\n", "\n", "", "left_entity_avg", "=", "{", "}", "\n", "for", "j", "in", "nrelation", ":", "\n", "            ", "left_entity_avg", "[", "j", "]", "=", "sum", "(", "\n", "left_entity", "[", "j", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "left_entity", "[", "j", "]", ")", "\n", "\n", "", "right_entity_avg", "=", "{", "}", "\n", "for", "j", "in", "nrelation", ":", "\n", "            ", "right_entity_avg", "[", "j", "]", "=", "sum", "(", "\n", "right_entity", "[", "j", "]", ".", "values", "(", ")", ")", "*", "1.0", "/", "len", "(", "right_entity", "[", "j", "]", ")", "\n", "\n", "", "headTailSelector", "=", "{", "}", "\n", "for", "j", "in", "nrelation", ":", "\n", "            ", "headTailSelector", "[", "j", "]", "=", "1000", "*", "right_entity_avg", "[", "j", "]", "/", "(", "right_entity_avg", "[", "j", "]", "+", "left_entity_avg", "[", "j", "]", ")", "\n", "\n", "", "ent_freq", "=", "torch", ".", "zeros", "(", "nentity", ")", "\n", "for", "e", "in", "data", "[", "'train'", "]", "[", "'edge_index_ori'", "]", ".", "reshape", "(", "-", "1", ")", ":", "\n", "            ", "ent_freq", "[", "e", "]", "+=", "1", "\n", "", "ent_freq_list", ".", "append", "(", "ent_freq", ")", "\n", "\n", "rel_embed", "=", "np", ".", "random", ".", "randn", "(", "len", "(", "nrelation", ")", ",", "args", ".", "embedding_size", ")", "\n", "rel_embed_list", ".", "append", "(", "rel_embed", ")", "\n", "\n", "train_dataloader_list", ".", "append", "(", "(", "train_triples", ",", "train_adjacency_mat", ")", ")", "\n", "valid_dataloader_list", ".", "append", "(", "(", "validation_triples", ",", "valid_adjacency_mat", ")", ")", "\n", "test_dataloader_list", ".", "append", "(", "(", "test_triples", ",", "test_adjacency_mat", ")", ")", "\n", "headTailSelector_list", ".", "append", "(", "headTailSelector", ")", "\n", "unique_entities_train_list", ".", "append", "(", "unique_entities_train", ")", "\n", "\n", "", "ent_freq_mat", "=", "torch", ".", "stack", "(", "ent_freq_list", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "train_dataloader_list", ",", "valid_dataloader_list", ",", "test_dataloader_list", ",", "headTailSelector_list", ",", "unique_entities_train_list", ",", "rel_embed_list", ",", "ent_freq_mat", ",", "nentity", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.__init__": [[10, 65], ["torch.LongTensor", "torch.LongTensor", "int", "create_batch.Corpus.get_graph", "create_batch.Corpus.get_further_neighbors", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "numpy.empty().astype", "numpy.empty().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "enumerate", "numpy.empty", "numpy.empty", "list", "list", "list", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_graph", "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_further_neighbors"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "train_data", ",", "validation_data", ",", "test_data", ",", "\n", "headTailSelector", ",", "batch_size", ",", "valid_to_invalid_samples_ratio", ",", "unique_entities_train", ",", "nentity", ",", "get_2hop", "=", "True", ")", ":", "\n", "        ", "self", ".", "train_triples", "=", "train_data", "[", "0", "]", "\n", "# number of entities", "\n", "self", ".", "nentity", "=", "nentity", "\n", "\n", "# Converting to sparse tensor", "\n", "adj_indices", "=", "torch", ".", "LongTensor", "(", "\n", "[", "train_data", "[", "1", "]", "[", "0", "]", ",", "train_data", "[", "1", "]", "[", "1", "]", "]", ")", "# rows and columns", "\n", "adj_values", "=", "torch", ".", "LongTensor", "(", "train_data", "[", "1", "]", "[", "2", "]", ")", "\n", "self", ".", "train_adj_matrix", "=", "(", "adj_indices", ",", "adj_values", ")", "\n", "\n", "# adjacency matrix is needed for train_data only, as GAT is trained for", "\n", "# training data", "\n", "self", ".", "validation_triples", "=", "validation_data", "[", "0", "]", "\n", "self", ".", "test_triples", "=", "test_data", "[", "0", "]", "\n", "\n", "self", ".", "headTailSelector", "=", "headTailSelector", "# for selecting random entities", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "# ratio of valid to invalid samples per batch for training ConvKB Model", "\n", "self", ".", "invalid_valid_ratio", "=", "int", "(", "valid_to_invalid_samples_ratio", ")", "\n", "\n", "# if(get_2hop == True):", "\n", "#     self.graph = self.get_graph()", "\n", "#     self.node_neighbors_2hop = self.get_further_neighbors()", "\n", "self", ".", "graph", "=", "self", ".", "get_graph", "(", ")", "\n", "self", ".", "node_neighbors_2hop", "=", "self", ".", "get_further_neighbors", "(", ")", "\n", "\n", "self", ".", "unique_entities_train", "=", "unique_entities_train", "\n", "\n", "self", ".", "train_indices", "=", "np", ".", "array", "(", "\n", "list", "(", "self", ".", "train_triples", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "# These are valid triples, hence all have value 1", "\n", "self", ".", "train_values", "=", "np", ".", "array", "(", "\n", "[", "[", "1", "]", "]", "*", "len", "(", "self", ".", "train_triples", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "validation_indices", "=", "np", ".", "array", "(", "\n", "list", "(", "self", ".", "validation_triples", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "validation_values", "=", "np", ".", "array", "(", "\n", "[", "[", "1", "]", "]", "*", "len", "(", "self", ".", "validation_triples", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "test_indices", "=", "np", ".", "array", "(", "list", "(", "self", ".", "test_triples", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "test_values", "=", "np", ".", "array", "(", "\n", "[", "[", "1", "]", "]", "*", "len", "(", "self", ".", "test_triples", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "self", ".", "valid_triples_dict", "=", "{", "j", ":", "i", "for", "i", ",", "j", "in", "enumerate", "(", "\n", "self", ".", "train_triples", "+", "self", ".", "validation_triples", "+", "self", ".", "test_triples", ")", "}", "\n", "# print(\"Total triples count {}, training triples {}, validation_triples {}, test_triples {}\".format(len(self.valid_triples_dict), len(self.train_indices),", "\n", "#                                                                                                    len(self.validation_indices), len(self.test_indices)))", "\n", "\n", "# For training purpose", "\n", "self", ".", "batch_indices", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "batch_values", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_iteration_batch": [[66, 179], ["len", "numpy.empty().astype", "numpy.empty().astype", "range", "numpy.empty().astype", "numpy.empty().astype", "range", "numpy.random.randint", "numpy.tile", "numpy.tile", "range", "len", "len", "numpy.random.randint", "numpy.tile", "numpy.tile", "range", "numpy.empty", "numpy.empty", "range", "range", "numpy.empty", "numpy.empty", "range", "range", "create_batch.Corpus.valid_triples_dict.keys", "numpy.random.randint", "create_batch.Corpus.valid_triples_dict.keys", "numpy.random.randint", "create_batch.Corpus.valid_triples_dict.keys", "numpy.random.randint", "create_batch.Corpus.valid_triples_dict.keys", "numpy.random.randint"], "methods", ["None"], ["", "def", "get_iteration_batch", "(", "self", ",", "iter_num", ")", ":", "\n", "        ", "if", "(", "iter_num", "+", "1", ")", "*", "self", ".", "batch_size", "<=", "len", "(", "self", ".", "train_indices", ")", ":", "\n", "            ", "self", ".", "batch_indices", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "batch_values", "=", "np", ".", "empty", "(", "\n", "(", "self", ".", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "indices", "=", "range", "(", "self", ".", "batch_size", "*", "iter_num", ",", "\n", "self", ".", "batch_size", "*", "(", "iter_num", "+", "1", ")", ")", "\n", "\n", "self", ".", "batch_indices", "[", ":", "self", ".", "batch_size", ",", "\n", ":", "]", "=", "self", ".", "train_indices", "[", "indices", ",", ":", "]", "\n", "self", ".", "batch_values", "[", ":", "self", ".", "batch_size", ",", "\n", ":", "]", "=", "self", ".", "train_values", "[", "indices", ",", ":", "]", "\n", "\n", "last_index", "=", "self", ".", "batch_size", "\n", "\n", "if", "self", ".", "invalid_valid_ratio", ">", "0", ":", "\n", "                ", "random_entities", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ",", "last_index", "*", "self", ".", "invalid_valid_ratio", ")", "\n", "\n", "# Precopying the same valid indices from 0 to batch_size to rest", "\n", "# of the indices", "\n", "self", ".", "batch_indices", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_indices", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "self", ".", "batch_values", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_values", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "last_index", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                        ", "current_index", "=", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", "\n", "\n", "while", "(", "random_entities", "[", "current_index", "]", ",", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "1", "]", ",", "\n", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "2", "]", ")", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                            ", "random_entities", "[", "current_index", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ")", "\n", "", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "0", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "-", "1", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                        ", "current_index", "=", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "(", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", ")", "\n", "\n", "while", "(", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "0", "]", ",", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "1", "]", ",", "\n", "random_entities", "[", "current_index", "]", ")", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                            ", "random_entities", "[", "current_index", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ")", "\n", "", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "2", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "-", "1", "]", "\n", "\n", "", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n", "", "else", ":", "\n", "            ", "last_iter_size", "=", "len", "(", "self", ".", "train_indices", ")", "-", "self", ".", "batch_size", "*", "iter_num", "\n", "self", ".", "batch_indices", "=", "np", ".", "empty", "(", "\n", "(", "last_iter_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "batch_values", "=", "np", ".", "empty", "(", "\n", "(", "last_iter_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "indices", "=", "range", "(", "self", ".", "batch_size", "*", "iter_num", ",", "\n", "len", "(", "self", ".", "train_indices", ")", ")", "\n", "self", ".", "batch_indices", "[", ":", "last_iter_size", ",", "\n", ":", "]", "=", "self", ".", "train_indices", "[", "indices", ",", ":", "]", "\n", "self", ".", "batch_values", "[", ":", "last_iter_size", ",", "\n", ":", "]", "=", "self", ".", "train_values", "[", "indices", ",", ":", "]", "\n", "\n", "last_index", "=", "last_iter_size", "\n", "\n", "if", "self", ".", "invalid_valid_ratio", ">", "0", ":", "\n", "                ", "random_entities", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ",", "last_index", "*", "self", ".", "invalid_valid_ratio", ")", "\n", "\n", "# Precopying the same valid indices from 0 to batch_size to rest", "\n", "# of the indices", "\n", "self", ".", "batch_indices", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_indices", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "self", ".", "batch_values", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_values", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "last_index", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                        ", "current_index", "=", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", "\n", "\n", "while", "(", "random_entities", "[", "current_index", "]", ",", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "1", "]", ",", "\n", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "2", "]", ")", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                            ", "random_entities", "[", "current_index", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ")", "\n", "", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "0", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "-", "1", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                        ", "current_index", "=", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "(", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", ")", "\n", "\n", "while", "(", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "0", "]", ",", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "1", "]", ",", "\n", "random_entities", "[", "current_index", "]", ")", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                            ", "random_entities", "[", "current_index", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ")", "\n", "", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "2", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "-", "1", "]", "\n", "\n", "", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_iteration_batch_nhop": [[180, 226], ["numpy.empty().astype", "numpy.empty().astype", "random.sample", "numpy.ones", "range", "numpy.random.randint", "numpy.tile", "numpy.tile", "range", "numpy.empty", "numpy.empty", "len", "range", "range"], "methods", ["None"], ["", "", "def", "get_iteration_batch_nhop", "(", "self", ",", "current_batch_indices", ",", "node_neighbors", ",", "batch_size", ")", ":", "\n", "\n", "        ", "self", ".", "batch_indices", "=", "np", ".", "empty", "(", "\n", "(", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "self", ".", "batch_values", "=", "np", ".", "empty", "(", "\n", "(", "batch_size", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "current_batch_indices", ")", ")", ",", "batch_size", ")", "\n", "\n", "self", ".", "batch_indices", "[", ":", "batch_size", ",", "\n", ":", "]", "=", "current_batch_indices", "[", "indices", ",", ":", "]", "\n", "self", ".", "batch_values", "[", ":", "batch_size", ",", "\n", ":", "]", "=", "np", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ")", "\n", "\n", "last_index", "=", "batch_size", "\n", "\n", "if", "self", ".", "invalid_valid_ratio", ">", "0", ":", "\n", "            ", "random_entities", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "self", ".", "nentity", ",", "last_index", "*", "self", ".", "invalid_valid_ratio", ")", "\n", "\n", "# Precopying the same valid indices from 0 to batch_size to rest", "\n", "# of the indices", "\n", "self", ".", "batch_indices", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_indices", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "self", ".", "batch_values", "[", "last_index", ":", "(", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "+", "1", ")", ")", ",", ":", "]", "=", "np", ".", "tile", "(", "\n", "self", ".", "batch_values", "[", ":", "last_index", ",", ":", "]", ",", "(", "self", ".", "invalid_valid_ratio", ",", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "last_index", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                    ", "current_index", "=", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", "\n", "\n", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "0", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "0", "]", "\n", "\n", "", "for", "j", "in", "range", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", ":", "\n", "                    ", "current_index", "=", "last_index", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "(", "i", "*", "(", "self", ".", "invalid_valid_ratio", "//", "2", ")", "+", "j", ")", "\n", "\n", "self", ".", "batch_indices", "[", "last_index", "+", "current_index", ",", "\n", "3", "]", "=", "random_entities", "[", "current_index", "]", "\n", "self", ".", "batch_values", "[", "last_index", "+", "current_index", ",", ":", "]", "=", "[", "0", "]", "\n", "\n", "", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n", "", "return", "self", ".", "batch_indices", ",", "self", ".", "batch_values", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_graph": [[227, 244], ["torch.cat", "data[].data.item", "data[].data.item", "data[].data.item", "create_batch.Corpus.train_adj_matrix[].transpose", "create_batch.Corpus.train_adj_matrix[].unsqueeze", "graph.keys"], "methods", ["None"], ["", "def", "get_graph", "(", "self", ")", ":", "\n", "        ", "graph", "=", "{", "}", "\n", "all_tiples", "=", "torch", ".", "cat", "(", "[", "self", ".", "train_adj_matrix", "[", "0", "]", ".", "transpose", "(", "\n", "0", ",", "1", ")", ",", "self", ".", "train_adj_matrix", "[", "1", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "for", "data", "in", "all_tiples", ":", "\n", "            ", "source", "=", "data", "[", "1", "]", ".", "data", ".", "item", "(", ")", "\n", "target", "=", "data", "[", "0", "]", ".", "data", ".", "item", "(", ")", "\n", "value", "=", "data", "[", "2", "]", ".", "data", ".", "item", "(", ")", "\n", "\n", "if", "(", "source", "not", "in", "graph", ".", "keys", "(", ")", ")", ":", "\n", "                ", "graph", "[", "source", "]", "=", "{", "}", "\n", "graph", "[", "source", "]", "[", "target", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "graph", "[", "source", "]", "[", "target", "]", "=", "value", "\n", "# print(\"Graph created\")", "\n", "", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.bfs": [[245, 298], ["queue.Queue", "queue.Queue.put", "visit.keys", "queue.Queue.empty", "queue.Queue.get", "graph.keys", "graph[].keys", "relations.append", "entities.append", "neighbors.keys", "neighbors[].append", "visit.keys", "queue.Queue.put", "tuple", "tuple", "tuple", "tuple", "distance_lengths.keys"], "methods", ["None"], ["", "def", "bfs", "(", "self", ",", "graph", ",", "source", ",", "nbd_size", "=", "2", ")", ":", "\n", "        ", "visit", "=", "{", "}", "\n", "distance", "=", "{", "}", "\n", "parent", "=", "{", "}", "\n", "distance_lengths", "=", "{", "}", "\n", "\n", "visit", "[", "source", "]", "=", "1", "\n", "distance", "[", "source", "]", "=", "0", "\n", "parent", "[", "source", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "\n", "q", "=", "queue", ".", "Queue", "(", ")", "\n", "q", ".", "put", "(", "(", "source", ",", "-", "1", ")", ")", "\n", "\n", "while", "(", "not", "q", ".", "empty", "(", ")", ")", ":", "\n", "            ", "top", "=", "q", ".", "get", "(", ")", "\n", "if", "top", "[", "0", "]", "in", "graph", ".", "keys", "(", ")", ":", "\n", "                ", "for", "target", "in", "graph", "[", "top", "[", "0", "]", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "(", "target", "in", "visit", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "q", ".", "put", "(", "(", "target", ",", "graph", "[", "top", "[", "0", "]", "]", "[", "target", "]", ")", ")", "\n", "\n", "distance", "[", "target", "]", "=", "distance", "[", "top", "[", "0", "]", "]", "+", "1", "\n", "\n", "visit", "[", "target", "]", "=", "1", "\n", "if", "distance", "[", "target", "]", ">", "2", ":", "\n", "                            ", "continue", "\n", "", "parent", "[", "target", "]", "=", "(", "top", "[", "0", "]", ",", "graph", "[", "top", "[", "0", "]", "]", "[", "target", "]", ")", "\n", "\n", "if", "distance", "[", "target", "]", "not", "in", "distance_lengths", ".", "keys", "(", ")", ":", "\n", "                            ", "distance_lengths", "[", "distance", "[", "target", "]", "]", "=", "1", "\n", "\n", "", "", "", "", "", "neighbors", "=", "{", "}", "\n", "for", "target", "in", "visit", ".", "keys", "(", ")", ":", "\n", "            ", "if", "(", "distance", "[", "target", "]", "!=", "nbd_size", ")", ":", "\n", "                ", "continue", "\n", "", "edges", "=", "[", "-", "1", ",", "parent", "[", "target", "]", "[", "1", "]", "]", "\n", "relations", "=", "[", "]", "\n", "entities", "=", "[", "target", "]", "\n", "temp", "=", "target", "\n", "while", "(", "parent", "[", "temp", "]", "!=", "(", "-", "1", ",", "-", "1", ")", ")", ":", "\n", "                ", "relations", ".", "append", "(", "parent", "[", "temp", "]", "[", "1", "]", ")", "\n", "entities", ".", "append", "(", "parent", "[", "temp", "]", "[", "0", "]", ")", "\n", "temp", "=", "parent", "[", "temp", "]", "[", "0", "]", "\n", "\n", "", "if", "(", "distance", "[", "target", "]", "in", "neighbors", ".", "keys", "(", ")", ")", ":", "\n", "                ", "neighbors", "[", "distance", "[", "target", "]", "]", ".", "append", "(", "\n", "(", "tuple", "(", "relations", ")", ",", "tuple", "(", "entities", "[", ":", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "neighbors", "[", "distance", "[", "target", "]", "]", "=", "[", "\n", "(", "tuple", "(", "relations", ")", ",", "tuple", "(", "entities", "[", ":", "-", "1", "]", ")", ")", "]", "\n", "\n", "", "", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_further_neighbors": [[299, 321], ["time.time", "create_batch.Corpus.graph.keys", "create_batch.Corpus.bfs", "create_batch.Corpus.keys", "neighbors.keys", "neighbors[].keys", "[].append"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.bfs"], ["", "def", "get_further_neighbors", "(", "self", ",", "nbd_size", "=", "2", ")", ":", "\n", "        ", "neighbors", "=", "{", "}", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# print(\"length of graph keys is \", len(self.graph.keys()))", "\n", "for", "source", "in", "self", ".", "graph", ".", "keys", "(", ")", ":", "\n", "# st_time = time.time()", "\n", "            ", "temp_neighbors", "=", "self", ".", "bfs", "(", "self", ".", "graph", ",", "source", ",", "nbd_size", ")", "\n", "for", "distance", "in", "temp_neighbors", ".", "keys", "(", ")", ":", "\n", "                ", "if", "(", "source", "in", "neighbors", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "(", "distance", "in", "neighbors", "[", "source", "]", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "neighbors", "[", "source", "]", "[", "distance", "]", ".", "append", "(", "\n", "temp_neighbors", "[", "distance", "]", ")", "\n", "", "else", ":", "\n", "                        ", "neighbors", "[", "source", "]", "[", "distance", "]", "=", "temp_neighbors", "[", "distance", "]", "\n", "", "", "else", ":", "\n", "                    ", "neighbors", "[", "source", "]", "=", "{", "}", "\n", "neighbors", "[", "source", "]", "[", "distance", "]", "=", "temp_neighbors", "[", "distance", "]", "\n", "\n", "# print(\"time taken \", time.time() - start_time)", "\n", "\n", "# print(\"length of neighbors dict is \", len(neighbors))", "\n", "", "", "", "return", "neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_batch_nhop_neighbors_all": [[322, 340], ["numpy.array().astype", "node_neighbors.keys", "enumerate", "numpy.array", "batch_source_triples.append"], "methods", ["None"], ["", "def", "get_batch_nhop_neighbors_all", "(", "self", ",", "args", ",", "batch_sources", ",", "node_neighbors", ",", "nbd_size", "=", "2", ")", ":", "\n", "        ", "batch_source_triples", "=", "[", "]", "\n", "# print(\"length of unique_entities \", len(batch_sources))", "\n", "count", "=", "0", "\n", "for", "source", "in", "batch_sources", ":", "\n", "# randomly select from the list of neighbors", "\n", "            ", "if", "source", "in", "node_neighbors", ".", "keys", "(", ")", ":", "\n", "                ", "nhop_list", "=", "node_neighbors", "[", "source", "]", "[", "nbd_size", "]", "\n", "\n", "for", "i", ",", "tup", "in", "enumerate", "(", "nhop_list", ")", ":", "\n", "                    ", "if", "(", "args", ".", "partial_2hop", "and", "i", ">=", "2", ")", ":", "\n", "                        ", "break", "\n", "\n", "", "count", "+=", "1", "\n", "batch_source_triples", ".", "append", "(", "[", "source", ",", "nhop_list", "[", "i", "]", "[", "0", "]", "[", "-", "1", "]", ",", "nhop_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", ",", "\n", "nhop_list", "[", "i", "]", "[", "1", "]", "[", "0", "]", "]", ")", "\n", "\n", "", "", "", "return", "np", ".", "array", "(", "batch_source_triples", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.transe_scoring": [[341, 348], ["torch.norm"], "methods", ["None"], ["", "def", "transe_scoring", "(", "self", ",", "batch_inputs", ",", "entity_embeddings", ",", "relation_embeddings", ")", ":", "\n", "        ", "source_embeds", "=", "entity_embeddings", "[", "batch_inputs", "[", ":", ",", "0", "]", "]", "\n", "relation_embeds", "=", "relation_embeddings", "[", "batch_inputs", "[", ":", ",", "1", "]", "]", "\n", "tail_embeds", "=", "entity_embeddings", "[", "batch_inputs", "[", ":", ",", "2", "]", "]", "\n", "x", "=", "source_embeds", "+", "relation_embed", "-", "tail_embeds", "\n", "x", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.create_batch.Corpus.get_validation_pred": [[349, 552], ["range", "time.time", "range", "range", "range", "average_hits_at_ten_head.append", "average_hits_at_three_head.append", "average_hits_at_one_head.append", "average_mean_rank_head.append", "average_mean_recip_rank_head.append", "average_hits_at_ten_tail.append", "average_hits_at_three_tail.append", "average_hits_at_one_tail.append", "average_mean_rank_tail.append", "average_mean_recip_rank_tail.append", "time.time", "numpy.tile", "numpy.tile", "range", "numpy.delete", "numpy.delete", "numpy.insert", "numpy.insert", "torch.sort", "ranks_head.append", "reciprocal_ranks_head.append", "torch.sort", "ranks_tail.append", "reciprocal_ranks_tail.append", "len", "len", "len", "len", "len", "len", "range", "len", "int", "model.batch_test", "model.batch_test", "model.batch_test", "model.batch_test", "torch.cat", "model.batch_test", "model.batch_test.view", "int", "model.batch_test", "model.batch_test", "model.batch_test", "model.batch_test", "torch.cat", "model.batch_test", "model.batch_test.view", "len", "len", "len", "sum", "len", "sum", "len", "len", "len", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "sum", "len", "range", "range", "create_batch.Corpus.valid_triples_dict.keys", "last_index_head.append", "create_batch.Corpus.valid_triples_dict.keys", "last_index_tail.append", "math.ceil", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "math.ceil", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "sorted_indices_head.cpu().numpy", "sorted_indices_tail.cpu().numpy", "sorted_indices_head.cpu", "sorted_indices_tail.cpu"], "methods", ["home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test", "home.repos.pwc.inspect_result.taokz_FedR.GAT.models.SpKBGATConvOnly.batch_test"], ["", "def", "get_validation_pred", "(", "self", ",", "args", ",", "model", ",", "unique_entities", ",", "istest", ")", ":", "\n", "# average_hits_at_100_head, average_hits_at_100_tail = [], []", "\n", "        ", "average_hits_at_ten_head", ",", "average_hits_at_ten_tail", "=", "[", "]", ",", "[", "]", "\n", "average_hits_at_three_head", ",", "average_hits_at_three_tail", "=", "[", "]", ",", "[", "]", "\n", "average_hits_at_one_head", ",", "average_hits_at_one_tail", "=", "[", "]", ",", "[", "]", "\n", "average_mean_rank_head", ",", "average_mean_rank_tail", "=", "[", "]", ",", "[", "]", "\n", "average_mean_recip_rank_head", ",", "average_mean_recip_rank_tail", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "iters", "in", "range", "(", "1", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "istest", ":", "\n", "                ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "test_indices", ")", ")", "]", "\n", "batch_indices", "=", "self", ".", "test_indices", "[", "indices", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "indices", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "validation_indices", ")", ")", "]", "\n", "batch_indices", "=", "self", ".", "validation_indices", "[", "indices", ",", ":", "]", "\n", "# print(\"Sampled indices\")", "\n", "# print(\"test set length \", len(self.test_indices))", "\n", "#entity_list = [j for i, j in self.entity2id.items()]", "\n", "", "entity_list", "=", "[", "i", "for", "i", "in", "range", "(", "self", ".", "nentity", ")", "]", "\n", "\n", "\n", "ranks_head", ",", "ranks_tail", "=", "[", "]", ",", "[", "]", "\n", "reciprocal_ranks_head", ",", "reciprocal_ranks_tail", "=", "[", "]", ",", "[", "]", "\n", "# hits_at_100_head, hits_at_100_tail = 0, 0", "\n", "hits_at_ten_head", ",", "hits_at_ten_tail", "=", "0", ",", "0", "\n", "hits_at_three_head", ",", "hits_at_three_tail", "=", "0", ",", "0", "\n", "hits_at_one_head", ",", "hits_at_one_tail", "=", "0", ",", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_indices", ".", "shape", "[", "0", "]", ")", ":", "\n", "# print(len(ranks_head))", "\n", "                ", "start_time_it", "=", "time", ".", "time", "(", ")", "\n", "new_x_batch_head", "=", "np", ".", "tile", "(", "\n", "batch_indices", "[", "i", ",", ":", "]", ",", "(", "self", ".", "nentity", ",", "1", ")", ")", "\n", "new_x_batch_tail", "=", "np", ".", "tile", "(", "\n", "batch_indices", "[", "i", ",", ":", "]", ",", "(", "self", ".", "nentity", ",", "1", ")", ")", "\n", "\n", "if", "(", "batch_indices", "[", "i", ",", "0", "]", "not", "in", "unique_entities", "or", "batch_indices", "[", "i", ",", "2", "]", "not", "in", "unique_entities", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "new_x_batch_head", "[", ":", ",", "0", "]", "=", "entity_list", "\n", "new_x_batch_tail", "[", ":", ",", "2", "]", "=", "entity_list", "\n", "\n", "last_index_head", "=", "[", "]", "# array of already existing triples", "\n", "last_index_tail", "=", "[", "]", "\n", "for", "tmp_index", "in", "range", "(", "len", "(", "new_x_batch_head", ")", ")", ":", "\n", "                    ", "temp_triple_head", "=", "(", "new_x_batch_head", "[", "tmp_index", "]", "[", "0", "]", ",", "new_x_batch_head", "[", "tmp_index", "]", "[", "1", "]", ",", "\n", "new_x_batch_head", "[", "tmp_index", "]", "[", "2", "]", ")", "\n", "if", "temp_triple_head", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "last_index_head", ".", "append", "(", "tmp_index", ")", "\n", "\n", "", "temp_triple_tail", "=", "(", "new_x_batch_tail", "[", "tmp_index", "]", "[", "0", "]", ",", "new_x_batch_tail", "[", "tmp_index", "]", "[", "1", "]", ",", "\n", "new_x_batch_tail", "[", "tmp_index", "]", "[", "2", "]", ")", "\n", "if", "temp_triple_tail", "in", "self", ".", "valid_triples_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "last_index_tail", ".", "append", "(", "tmp_index", ")", "\n", "\n", "# Deleting already existing triples, leftover triples are invalid, according", "\n", "# to train, validation and test data", "\n", "# Note, all of them maynot be actually invalid", "\n", "", "", "new_x_batch_head", "=", "np", ".", "delete", "(", "\n", "new_x_batch_head", ",", "last_index_head", ",", "axis", "=", "0", ")", "\n", "new_x_batch_tail", "=", "np", ".", "delete", "(", "\n", "new_x_batch_tail", ",", "last_index_tail", ",", "axis", "=", "0", ")", "\n", "\n", "# adding the current valid triples to the top, i.e, index 0", "\n", "new_x_batch_head", "=", "np", ".", "insert", "(", "\n", "new_x_batch_head", ",", "0", ",", "batch_indices", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "new_x_batch_tail", "=", "np", ".", "insert", "(", "\n", "new_x_batch_tail", ",", "0", ",", "batch_indices", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "\n", "import", "math", "\n", "# Have to do this, because it doesn't fit in memory", "\n", "\n", "if", "'WN'", "in", "args", ".", "data_path", ":", "\n", "                    ", "num_triples_each_shot", "=", "int", "(", "\n", "math", ".", "ceil", "(", "new_x_batch_head", ".", "shape", "[", "0", "]", "/", "4", ")", ")", "\n", "\n", "scores1_head", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_head", "[", ":", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores2_head", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_head", "[", "num_triples_each_shot", ":", "2", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores3_head", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_head", "[", "2", "*", "num_triples_each_shot", ":", "3", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores4_head", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_head", "[", "3", "*", "num_triples_each_shot", ":", "4", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "# scores1_head = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_head[:num_triples_each_shot, :]))", "\n", "# scores2_head = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_head[num_triples_each_shot: 2 * num_triples_each_shot, :]))", "\n", "# scores3_head = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_head[2 * num_triples_each_shot: 3 * num_triples_each_shot, :]))", "\n", "# scores4_head = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_head[3 * num_triples_each_shot: 4 * num_triples_each_shot, :]))", "\n", "\n", "scores_head", "=", "torch", ".", "cat", "(", "\n", "[", "scores1_head", ",", "scores2_head", ",", "scores3_head", ",", "scores4_head", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "scores_head", "=", "model", ".", "batch_test", "(", "new_x_batch_head", ")", "\n", "\n", "", "sorted_scores_head", ",", "sorted_indices_head", "=", "torch", ".", "sort", "(", "\n", "scores_head", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "# Just search for zeroth index in the sorted scores, we appended valid triple at top", "\n", "ranks_head", ".", "append", "(", "\n", "np", ".", "where", "(", "sorted_indices_head", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "0", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "reciprocal_ranks_head", ".", "append", "(", "1.0", "/", "ranks_head", "[", "-", "1", "]", ")", "\n", "\n", "# Tail part here", "\n", "\n", "if", "'WN'", "in", "args", ".", "data_path", ":", "\n", "                    ", "num_triples_each_shot", "=", "int", "(", "\n", "math", ".", "ceil", "(", "new_x_batch_tail", ".", "shape", "[", "0", "]", "/", "4", ")", ")", "\n", "\n", "scores1_tail", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_tail", "[", ":", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores2_tail", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_tail", "[", "num_triples_each_shot", ":", "2", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores3_tail", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_tail", "[", "2", "*", "num_triples_each_shot", ":", "3", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "scores4_tail", "=", "model", ".", "batch_test", "(", "torch", ".", "LongTensor", "(", "\n", "new_x_batch_tail", "[", "3", "*", "num_triples_each_shot", ":", "4", "*", "num_triples_each_shot", ",", ":", "]", ")", ".", "cuda", "(", ")", ")", "\n", "# scores1_tail = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_tail[:num_triples_each_shot, :]))", "\n", "# scores2_tail = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_tail[num_triples_each_shot: 2 * num_triples_each_shot, :]))", "\n", "# scores3_tail = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_tail[2 * num_triples_each_shot: 3 * num_triples_each_shot, :]))", "\n", "# scores4_tail = model.batch_test(torch.LongTensor(", "\n", "#     new_x_batch_tail[3 * num_triples_each_shot: 4 * num_triples_each_shot, :]))", "\n", "\n", "scores_tail", "=", "torch", ".", "cat", "(", "\n", "[", "scores1_tail", ",", "scores2_tail", ",", "scores3_tail", ",", "scores4_tail", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "scores_tail", "=", "model", ".", "batch_test", "(", "new_x_batch_tail", ")", "\n", "\n", "", "sorted_scores_tail", ",", "sorted_indices_tail", "=", "torch", ".", "sort", "(", "\n", "scores_tail", ".", "view", "(", "-", "1", ")", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "\n", "# Just search for zeroth index in the sorted scores, we appended valid triple at top", "\n", "ranks_tail", ".", "append", "(", "\n", "np", ".", "where", "(", "sorted_indices_tail", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "==", "0", ")", "[", "0", "]", "[", "0", "]", "+", "1", ")", "\n", "reciprocal_ranks_tail", ".", "append", "(", "1.0", "/", "ranks_tail", "[", "-", "1", "]", ")", "\n", "# print(\"sample - \", ranks_head[-1], ranks_tail[-1])", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "ranks_head", ")", ")", ":", "\n", "\n", "                ", "if", "ranks_head", "[", "i", "]", "<=", "10", ":", "\n", "                    ", "hits_at_ten_head", "=", "hits_at_ten_head", "+", "1", "\n", "", "if", "ranks_head", "[", "i", "]", "<=", "3", ":", "\n", "                    ", "hits_at_three_head", "=", "hits_at_three_head", "+", "1", "\n", "", "if", "ranks_head", "[", "i", "]", "==", "1", ":", "\n", "                    ", "hits_at_one_head", "=", "hits_at_one_head", "+", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "ranks_tail", ")", ")", ":", "\n", "\n", "                ", "if", "ranks_tail", "[", "i", "]", "<=", "10", ":", "\n", "                    ", "hits_at_ten_tail", "=", "hits_at_ten_tail", "+", "1", "\n", "", "if", "ranks_tail", "[", "i", "]", "<=", "3", ":", "\n", "                    ", "hits_at_three_tail", "=", "hits_at_three_tail", "+", "1", "\n", "", "if", "ranks_tail", "[", "i", "]", "==", "1", ":", "\n", "                    ", "hits_at_one_tail", "=", "hits_at_one_tail", "+", "1", "\n", "\n", "", "", "assert", "len", "(", "ranks_head", ")", "==", "len", "(", "reciprocal_ranks_head", ")", "\n", "assert", "len", "(", "ranks_tail", ")", "==", "len", "(", "reciprocal_ranks_tail", ")", "\n", "\n", "\n", "average_hits_at_ten_head", ".", "append", "(", "\n", "hits_at_ten_head", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_hits_at_three_head", ".", "append", "(", "\n", "hits_at_three_head", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_hits_at_one_head", ".", "append", "(", "\n", "hits_at_one_head", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_mean_rank_head", ".", "append", "(", "sum", "(", "ranks_head", ")", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_mean_recip_rank_head", ".", "append", "(", "\n", "sum", "(", "reciprocal_ranks_head", ")", "/", "len", "(", "reciprocal_ranks_head", ")", ")", "\n", "\n", "average_hits_at_ten_tail", ".", "append", "(", "\n", "hits_at_ten_tail", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_hits_at_three_tail", ".", "append", "(", "\n", "hits_at_three_tail", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_hits_at_one_tail", ".", "append", "(", "\n", "hits_at_one_tail", "/", "len", "(", "ranks_head", ")", ")", "\n", "average_mean_rank_tail", ".", "append", "(", "sum", "(", "ranks_tail", ")", "/", "len", "(", "ranks_tail", ")", ")", "\n", "average_mean_recip_rank_tail", ".", "append", "(", "\n", "sum", "(", "reciprocal_ranks_tail", ")", "/", "len", "(", "reciprocal_ranks_tail", ")", ")", "\n", "\n", "", "cumulative_hits_ten", "=", "(", "sum", "(", "average_hits_at_ten_head", ")", "/", "len", "(", "average_hits_at_ten_head", ")", "\n", "+", "sum", "(", "average_hits_at_ten_tail", ")", "/", "len", "(", "average_hits_at_ten_tail", ")", ")", "/", "2", "\n", "cumulative_hits_three", "=", "(", "sum", "(", "average_hits_at_three_head", ")", "/", "len", "(", "average_hits_at_three_head", ")", "\n", "+", "sum", "(", "average_hits_at_three_tail", ")", "/", "len", "(", "average_hits_at_three_tail", ")", ")", "/", "2", "\n", "cumulative_hits_one", "=", "(", "sum", "(", "average_hits_at_one_head", ")", "/", "len", "(", "average_hits_at_one_head", ")", "\n", "+", "sum", "(", "average_hits_at_one_tail", ")", "/", "len", "(", "average_hits_at_one_tail", ")", ")", "/", "2", "\n", "cumulative_mean_rank", "=", "(", "sum", "(", "average_mean_rank_head", ")", "/", "len", "(", "average_mean_rank_head", ")", "\n", "+", "sum", "(", "average_mean_rank_tail", ")", "/", "len", "(", "average_mean_rank_tail", ")", ")", "/", "2", "\n", "cumulative_mean_recip_rank", "=", "(", "sum", "(", "average_mean_recip_rank_head", ")", "/", "len", "(", "average_mean_recip_rank_head", ")", "+", "sum", "(", "\n", "average_mean_recip_rank_tail", ")", "/", "len", "(", "average_mean_recip_rank_tail", ")", ")", "/", "2", "\n", "\n", "\n", "results", "=", "{", "'mrr'", ":", "cumulative_mean_recip_rank", ",", "'hits@1'", ":", "cumulative_hits_one", ",", "'hits@3'", ":", "cumulative_hits_three", ",", "'hits@10'", ":", "cumulative_hits_ten", "}", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.save_model": [[26, 31], ["print", "torch.save", "torch.save", "print", "model.state_dict"], "function", ["None"], ["def", "save_model", "(", "model", ",", "name", ",", "epoch", ",", "folder_name", ",", "client_id", ")", ":", "\n", "    ", "print", "(", "\"Saving Model\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "(", "folder_name", "+", "\"trained_{}_client_{}.pth\"", ")", ".", "format", "(", "epoch", ",", "client_id", ")", ")", "\n", "print", "(", "\"Done saving Model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.GAT_Loss": [[36, 62], ["pos_triples.repeat.repeat", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.ones().cuda", "torch.ones().cuda", "gat_loss_func", "int", "int", "torch.ones", "torch.ones", "int"], "function", ["None"], ["def", "GAT_Loss", "(", "train_indices", ",", "valid_invalid_ratio", ")", ":", "\n", "    ", "len_pos_triples", "=", "train_indices", ".", "shape", "[", "0", "]", "//", "(", "int", "(", "valid_invalid_ratio", ")", "+", "1", ")", "\n", "\n", "pos_triples", "=", "train_indices", "[", ":", "len_pos_triples", "]", "\n", "neg_triples", "=", "train_indices", "[", "len_pos_triples", ":", "]", "\n", "\n", "pos_triples", "=", "pos_triples", ".", "repeat", "(", "int", "(", "valid_invalid_ratio", ")", ",", "1", ")", "\n", "\n", "source_embeds", "=", "entity_embed", "[", "pos_triples", "[", ":", ",", "0", "]", "]", "\n", "relation_embeds", "=", "relation_embed", "[", "pos_triples", "[", ":", ",", "1", "]", "]", "\n", "tail_embeds", "=", "entity_embed", "[", "pos_triples", "[", ":", ",", "2", "]", "]", "\n", "\n", "x", "=", "source_embeds", "+", "relation_embeds", "-", "tail_embeds", "\n", "pos_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "source_embeds", "=", "entity_embed", "[", "neg_triples", "[", ":", ",", "0", "]", "]", "\n", "relation_embeds", "=", "relation_embed", "[", "neg_triples", "[", ":", ",", "1", "]", "]", "\n", "tail_embeds", "=", "entity_embed", "[", "neg_triples", "[", ":", ",", "2", "]", "]", "\n", "\n", "x", "=", "source_embeds", "+", "relation_embeds", "-", "tail_embeds", "\n", "neg_norm", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "y", "=", "torch", ".", "ones", "(", "int", "(", "args", ".", "valid_invalid_ratio", ")", "\n", "*", "len_pos_triples", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "gat_loss_func", "(", "pos_norm", ",", "neg_norm", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.render_model_graph": [[64, 68], ["make_dot", "make_dot.render", "model", "dict", "model.named_parameters"], "function", ["None"], ["", "def", "render_model_graph", "(", "model", ",", "Corpus_", ",", "train_indices", ",", "relation_adj", ",", "averaged_entity_vectors", ")", ":", "\n", "    ", "graph", "=", "make_dot", "(", "model", "(", "Corpus_", ".", "train_adj_matrix", ",", "train_indices", ",", "relation_adj", ",", "averaged_entity_vectors", ")", ",", "\n", "params", "=", "dict", "(", "model", ".", "named_parameters", "(", ")", ")", ")", "\n", "graph", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.print_grads": [[70, 76], ["print", "print", "print", "model.named_parameters", "print"], "function", ["None"], ["", "def", "print_grads", "(", "model", ")", ":", "\n", "    ", "print", "(", "model", ".", "relation_embed", ".", "weight", ".", "grad", ")", "\n", "print", "(", "model", ".", "relation_gat_1", ".", "attention_0", ".", "a", ".", "grad", ")", "\n", "print", "(", "model", ".", "convKB", ".", "fc_layer", ".", "weight", ".", "grad", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "param", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.clip_gradients": [[78, 85], ["torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.named_parameters", "model.parameters", "print", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "print", "param.grad.norm", "param.grad.norm"], "function", ["None"], ["", "", "def", "clip_gradients", "(", "model", ",", "gradient_clip_norm", ")", ":", "\n", "    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "gradient_clip_norm", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", ":", "\n", "            ", "print", "(", "name", ",", "\"norm before clipping is -> \"", ",", "param", ".", "grad", ".", "norm", "(", ")", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "param", ",", "args", ".", "gradient_clip_norm", ")", "\n", "print", "(", "name", ",", "\"norm beafterfore clipping is -> \"", ",", "param", ".", "grad", ".", "norm", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.plot_grad_flow": [[87, 117], ["zip", "matplotlib.bar", "matplotlib.bar", "matplotlib.hlines", "matplotlib.xticks", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.grid", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "numpy.arange", "range", "layers.append", "ave_grads.append", "max_grads.append", "len", "len", "len", "len", "len", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "matplotlib.lines.Line2D", "p.grad.abs().mean", "p.grad.abs().max", "p.grad.abs", "p.grad.abs"], "function", ["None"], ["", "", "", "def", "plot_grad_flow", "(", "named_parameters", ",", "parameters", ")", ":", "\n", "    ", "'''Plots the gradients flowing through different layers in the net during training.\n    Can be used for checking for possible gradient vanishing / exploding problems.\n\n    Usage: Plug this function in Trainer class after loss.backwards() as\n    \"plot_grad_flow(self.model.named_parameters())\" to visualize the gradient flow'''", "\n", "ave_grads", "=", "[", "]", "\n", "max_grads", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "n", ",", "p", "in", "zip", "(", "named_parameters", ",", "parameters", ")", ":", "\n", "        ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "n", ")", "\n", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "max_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "", "", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "max_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"r\"", ")", "\n", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "max_grads", ")", ")", ",", "ave_grads", ",", "alpha", "=", "0.1", ",", "lw", "=", "1", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "hlines", "(", "0", ",", "0", ",", "len", "(", "ave_grads", ")", "+", "1", ",", "lw", "=", "2", ",", "color", "=", "\"g\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "len", "(", "ave_grads", ")", ",", "1", ")", ",", "layers", ",", "rotation", "=", "\"vertical\"", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "0", ",", "right", "=", "len", "(", "ave_grads", ")", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "-", "0.001", ",", "top", "=", "0.02", ")", "# zoom in on the lower gradient regions", "\n", "plt", ".", "xlabel", "(", "\"Layers\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average gradient\"", ")", "\n", "plt", ".", "title", "(", "\"Gradient flow\"", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", "[", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"r\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"b\"", ",", "lw", "=", "4", ")", ",", "\n", "Line2D", "(", "[", "0", "]", ",", "[", "0", "]", ",", "color", "=", "\"g\"", ",", "lw", "=", "4", ")", "]", ",", "[", "'max-gradient'", ",", "'mean-gradient'", ",", "'zero-gradient'", "]", ")", "\n", "plt", ".", "savefig", "(", "'initial.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.taokz_FedR.GAT.utils.plot_grad_flow_low": [[119, 137], ["zip", "matplotlib.plot", "matplotlib.hlines", "matplotlib.xticks", "matplotlib.xlim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.grid", "matplotlib.savefig", "matplotlib.close", "range", "layers.append", "ave_grads.append", "len", "len", "len", "p.grad.abs().mean", "p.grad.abs"], "function", ["None"], ["", "def", "plot_grad_flow_low", "(", "named_parameters", ",", "parameters", ")", ":", "\n", "    ", "ave_grads", "=", "[", "]", "\n", "layers", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "zip", "(", "named_parameters", ",", "parameters", ")", ":", "\n", "# print(n)", "\n", "        ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "n", ")", "\n", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "", "plt", ".", "plot", "(", "ave_grads", ",", "alpha", "=", "0.3", ",", "color", "=", "\"b\"", ")", "\n", "plt", ".", "hlines", "(", "0", ",", "0", ",", "len", "(", "ave_grads", ")", "+", "1", ",", "linewidth", "=", "1", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "xticks", "(", "range", "(", "0", ",", "len", "(", "ave_grads", ")", ",", "1", ")", ",", "layers", ",", "rotation", "=", "\"vertical\"", ")", "\n", "plt", ".", "xlim", "(", "xmin", "=", "0", ",", "xmax", "=", "len", "(", "ave_grads", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"Layers\"", ")", "\n", "plt", ".", "ylabel", "(", "\"average gradient\"", ")", "\n", "plt", ".", "title", "(", "\"Gradient flow\"", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "savefig", "(", "'initial.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]]}