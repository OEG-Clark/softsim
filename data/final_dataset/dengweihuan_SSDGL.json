{"home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.classification_map": [[18, 32], ["matplotlib.figure", "plt.figure.set_size_inches", "matplotlib.Axes", "plt.Axes.set_axis_off", "plt.Axes.xaxis.set_visible", "plt.Axes.yaxis.set_visible", "plt.figure.add_axes", "plt.Axes.imshow", "plt.figure.savefig"], "function", ["None"], ["def", "classification_map", "(", "map", ",", "ground_truth", ",", "dpi", ",", "save_path", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "frameon", "=", "False", ")", "\n", "fig", ".", "set_size_inches", "(", "ground_truth", ".", "shape", "[", "1", "]", "*", "2.0", "/", "dpi", ",", "ground_truth", ".", "shape", "[", "0", "]", "*", "2.0", "/", "dpi", ")", "\n", "\n", "ax", "=", "plt", ".", "Axes", "(", "fig", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ")", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "ax", ".", "xaxis", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "yaxis", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "add_axes", "(", "ax", ")", "\n", "\n", "ax", ".", "imshow", "(", "map", ")", "\n", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.list_to_colormap": [[34, 78], ["numpy.zeros", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "list_to_colormap", "(", "x_list", ")", ":", "\n", "    ", "y", "=", "np", ".", "zeros", "(", "(", "x_list", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "x_list", ")", ":", "\n", "        ", "if", "item", "==", "0", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "1", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "2", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "255", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "3", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "255", ",", "255", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "4", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "255", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "5", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "255", ",", "0", ",", "255", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "6", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "192", ",", "192", ",", "192", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "7", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "128", ",", "128", ",", "128", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "8", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "128", ",", "0", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "9", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "128", ",", "128", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "10", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "128", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "11", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "128", ",", "0", ",", "128", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "12", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "128", ",", "128", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "13", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "128", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "14", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "255", ",", "165", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "15", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "255", ",", "215", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "16", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "17", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "215", ",", "255", ",", "0", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "18", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "215", "]", ")", "/", "255.", "\n", "", "if", "item", "==", "-", "1", ":", "\n", "            ", "y", "[", "index", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "/", "255.", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.fcn_evaluate_fn": [[81, 154], ["train_map.._model.eval", "simplecv.util.logger.speed", "enumerate", "train_map.._logger.eval_log", "torch.no_grad", "enumerate", "round", "metric.th_overall_accuracy_score.item", "aa.item", "metric.th_cohen_kappa_score.item", "acc.item", "time.time", "train_map.._model().squeeze", "torch.cuda.synchronize", "round", "w.byte.unsqueeze_", "w.byte.byte", "torch.masked_select", "torch.masked_select", "scipy.io.loadmat", "gt_mask.flatten", "numpy.zeros", "numpy.zeros", "range", "y_out.flatten.flatten", "range", "numpy.ravel", "train_map.list_to_colormap", "train_map.list_to_colormap", "y_all_list.append", "y_all_gt.append", "numpy.reshape", "numpy.reshape", "train_map.classification_map", "train_map.classification_map", "simplecv.util.metric.th_overall_accuracy_score", "simplecv.util.metric.th_average_accuracy_score", "simplecv.util.metric.th_cohen_kappa_score", "simplecv.util.logger.speed", "simplecv.util.logger.eval_progress", "torch.masked_select.argmax().cpu", "torch.masked_select.view", "w.byte.view", "torch.masked_select.view", "w.byte.view", "len", "len", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "len", "len", "train_map.._model", "time.time", "torch.masked_select.argmax", "str", "str"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.speed", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.eval_log", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.list_to_colormap", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.list_to_colormap", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.classification_map", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.classification_map", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_overall_accuracy_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_average_accuracy_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_cohen_kappa_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.speed", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.eval_progress"], ["", "def", "fcn_evaluate_fn", "(", "self", ",", "test_dataloader", ",", "config", ")", ":", "\n", "    ", "if", "self", ".", "checkpoint", ".", "global_step", "<", "0", ":", "\n", "        ", "return", "\n", "", "self", ".", "_model", ".", "eval", "(", ")", "\n", "total_time", "=", "0.", "\n", "y_all_list", "=", "[", "]", "\n", "y_all_gt", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "(", "im", ",", "mask", ",", "w", ")", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred", "=", "self", ".", "_model", "(", "im", ")", ".", "squeeze", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_cost", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start", ",", "3", ")", "\n", "y_pred", "=", "y_pred", ".", "argmax", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", "+", "1", "\n", "w", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "y_out", "=", "y_pred", "[", "0", ":", "610", ",", "0", ":", "340", "]", "\n", "w", "=", "w", ".", "byte", "(", ")", "\n", "\n", "mask", "=", "torch", ".", "masked_select", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "w", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "y_pred", "=", "torch", ".", "masked_select", "(", "y_pred", ".", "view", "(", "-", "1", ")", ",", "w", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "gt_mat", "=", "loadmat", "(", "'./pavia/PaviaU_gt.mat'", ")", "\n", "gt_mask", "=", "gt_mat", "[", "'paviaU_gt'", "]", "\n", "\n", "gt", "=", "gt_mask", ".", "flatten", "(", ")", "\n", "x_label", "=", "np", ".", "zeros", "(", "gt", ".", "shape", ")", "\n", "y_label", "=", "np", ".", "zeros", "(", "gt", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "                ", "if", "gt", "[", "i", "]", "==", "0", ":", "\n", "                    ", "gt", "[", "i", "]", "=", "17", "\n", "x_label", "[", "i", "]", "=", "16", "\n", "\n", "", "", "gt", "=", "gt", "[", ":", "]", "-", "1", "\n", "y_out", "=", "y_out", ".", "flatten", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "y_out", ")", ")", ":", "\n", "                ", "if", "y_out", "[", "i", "]", "==", "0", ":", "\n", "                    ", "y_out", "[", "i", "]", "=", "17", "\n", "y_label", "[", "i", "]", "=", "16", "\n", "", "", "y_out", "=", "y_out", "[", ":", "]", "-", "1", "\n", "x", "=", "np", ".", "ravel", "(", "y_out", ")", "\n", "y_list", "=", "list_to_colormap", "(", "x", ")", "\n", "y_gt", "=", "list_to_colormap", "(", "gt", ")", "\n", "y_all_list", ".", "append", "(", "y_list", ")", "\n", "y_all_gt", ".", "append", "(", "y_gt", ")", "\n", "y_re", "=", "np", ".", "reshape", "(", "y_list", ",", "(", "gt_mask", ".", "shape", "[", "0", "]", ",", "gt_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "gt_re", "=", "np", ".", "reshape", "(", "y_gt", ",", "(", "gt_mask", ".", "shape", "[", "0", "]", ",", "gt_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "\n", "classification_map", "(", "y_re", ",", "gt_mask", ",", "300", ",", "\n", "'./classification_maps/'", "+", "str", "(", "0.05", ")", "+", "'_'", "+", "'pavia.png'", ")", "\n", "classification_map", "(", "gt_re", ",", "gt_mask", ",", "300", ",", "\n", "'./classification_maps/'", "+", "str", "(", "0.05", ")", "+", "'_'", "+", "'pavia_gt.png'", ")", "\n", "\n", "oa", "=", "metric", ".", "th_overall_accuracy_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ")", "\n", "aa", ",", "acc_per_class", "=", "metric", ".", "th_average_accuracy_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "_model", ".", "module", ".", "config", ".", "num_classes", ",", "\n", "return_accuracys", "=", "True", ")", "\n", "kappa", "=", "metric", ".", "th_cohen_kappa_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ",", "self", ".", "_model", ".", "module", ".", "config", ".", "num_classes", ")", "\n", "total_time", "+=", "time_cost", "\n", "speed", "(", "self", ".", "_logger", ",", "time_cost", ",", "'im'", ")", "\n", "\n", "eval_progress", "(", "self", ".", "_logger", ",", "idx", "+", "1", ",", "len", "(", "test_dataloader", ")", ")", "\n", "\n", "", "", "speed", "(", "self", ".", "_logger", ",", "round", "(", "total_time", "/", "len", "(", "test_dataloader", ")", ",", "3", ")", ",", "'batched im (avg)'", ")", "\n", "\n", "metric_dict", "=", "{", "\n", "'OA'", ":", "oa", ".", "item", "(", ")", ",", "\n", "'AA'", ":", "aa", ".", "item", "(", ")", ",", "\n", "'Kappa'", ":", "kappa", ".", "item", "(", ")", "\n", "}", "\n", "for", "i", ",", "acc", "in", "enumerate", "(", "acc_per_class", ")", ":", "\n", "        ", "metric_dict", "[", "'acc_{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "acc", ".", "item", "(", ")", "\n", "", "self", ".", "_logger", ".", "eval_log", "(", "metric_dict", "=", "metric_dict", ",", "step", "=", "self", ".", "checkpoint", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train_map.register_evaluate_fn": [[156, 158], ["launcher.override_evaluate"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.override_evaluate"], ["", "def", "register_evaluate_fn", "(", "launcher", ")", ":", "\n", "    ", "launcher", ".", "override_evaluate", "(", "fcn_evaluate_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train.fcn_evaluate_fn": [[17, 56], ["train.._model.eval", "simplecv.util.logger.speed", "enumerate", "train.._logger.eval_log", "torch.no_grad", "enumerate", "round", "metric.th_overall_accuracy_score.item", "aa.item", "metric.th_cohen_kappa_score.item", "acc.item", "time.time", "train.._model().squeeze", "torch.cuda.synchronize", "round", "w.byte.unsqueeze_", "w.byte.byte", "torch.masked_select", "torch.masked_select", "simplecv.util.metric.th_overall_accuracy_score", "simplecv.util.metric.th_average_accuracy_score", "simplecv.util.metric.th_cohen_kappa_score", "simplecv.util.logger.speed", "simplecv.util.logger.eval_progress", "torch.masked_select.argmax().cpu", "torch.masked_select.view", "w.byte.view", "torch.masked_select.view", "w.byte.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "torch.masked_select.view", "len", "len", "train.._model", "time.time", "torch.masked_select.argmax"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.speed", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.eval_log", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_overall_accuracy_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_average_accuracy_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_cohen_kappa_score", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.speed", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.eval_progress"], ["def", "fcn_evaluate_fn", "(", "self", ",", "test_dataloader", ",", "config", ")", ":", "\n", "\n", "    ", "if", "self", ".", "checkpoint", ".", "global_step", "<", "0", ":", "\n", "        ", "return", "\n", "", "self", ".", "_model", ".", "eval", "(", ")", "\n", "total_time", "=", "0.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "(", "im", ",", "mask", ",", "w", ")", "in", "enumerate", "(", "test_dataloader", ")", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "y_pred", "=", "self", ".", "_model", "(", "im", ")", ".", "squeeze", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "time_cost", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start", ",", "3", ")", "\n", "y_pred", "=", "y_pred", ".", "argmax", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", "+", "1", "\n", "w", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "\n", "w", "=", "w", ".", "byte", "(", ")", "\n", "mask", "=", "torch", ".", "masked_select", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "w", ".", "view", "(", "-", "1", ")", ")", "\n", "y_pred", "=", "torch", ".", "masked_select", "(", "y_pred", ".", "view", "(", "-", "1", ")", ",", "w", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "oa", "=", "metric", ".", "th_overall_accuracy_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ")", "\n", "aa", ",", "acc_per_class", "=", "metric", ".", "th_average_accuracy_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ",", "\n", "self", ".", "_model", ".", "module", ".", "config", ".", "num_classes", ",", "\n", "return_accuracys", "=", "True", ")", "\n", "kappa", "=", "metric", ".", "th_cohen_kappa_score", "(", "mask", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ",", "self", ".", "_model", ".", "module", ".", "config", ".", "num_classes", ")", "\n", "total_time", "+=", "time_cost", "\n", "speed", "(", "self", ".", "_logger", ",", "time_cost", ",", "'im'", ")", "\n", "\n", "eval_progress", "(", "self", ".", "_logger", ",", "idx", "+", "1", ",", "len", "(", "test_dataloader", ")", ")", "\n", "\n", "", "", "speed", "(", "self", ".", "_logger", ",", "round", "(", "total_time", "/", "len", "(", "test_dataloader", ")", ",", "3", ")", ",", "'batched im (avg)'", ")", "\n", "\n", "metric_dict", "=", "{", "\n", "'OA'", ":", "oa", ".", "item", "(", ")", ",", "\n", "'AA'", ":", "aa", ".", "item", "(", ")", ",", "\n", "'Kappa'", ":", "kappa", ".", "item", "(", ")", "\n", "}", "\n", "for", "i", ",", "acc", "in", "enumerate", "(", "acc_per_class", ")", ":", "\n", "        ", "metric_dict", "[", "'acc_{}'", ".", "format", "(", "i", "+", "1", ")", "]", "=", "acc", ".", "item", "(", ")", "\n", "", "self", ".", "_logger", ".", "eval_log", "(", "metric_dict", "=", "metric_dict", ",", "step", "=", "self", ".", "checkpoint", ".", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.None.train.register_evaluate_fn": [[58, 60], ["launcher.override_evaluate"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.override_evaluate"], ["", "def", "register_evaluate_fn", "(", "launcher", ")", ":", "\n", "    ", "launcher", ".", "override_evaluate", "(", "fcn_evaluate_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SSDGL.__init__": [[58, 120], ["simplecv.interface.CVModule.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "int", "int", "int", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "SSDGL.conv3x3_gn_relu", "SSDGL.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL.downsample2x", "SSDGL.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL.downsample2x", "SSDGL.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL.downsample2x", "SSDGL.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SSDGL.conv3x3_gn_relu", "SSDGL.conv3x3_gn_relu", "SSDGL.conv3x3_gn_relu", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SSDGL.SpatialAttention", "SSDGL.SpatialAttention", "SSDGL.SpatialAttention", "SSDGL.SpatialAttention"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SSDGL", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "if", "cfg", ".", "data", ".", "train", ".", "params", ".", "select_type", "==", "'sample_percent'", ":", "\n", "            ", "r", "=", "int", "(", "8", "*", "self", ".", "config", ".", "reduction_ratio", ")", "\n", "kernel_size", "=", "3", "\n", "", "else", ":", "\n", "            ", "r", "=", "int", "(", "4", "*", "self", ".", "config", ".", "reduction_ratio", ")", "\n", "kernel_size", "=", "5", "\n", "", "block1_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "0", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block2_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "1", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block3_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "2", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block4_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "3", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "\n", "self", ".", "feature_ops", "=", "nn", ".", "ModuleList", "(", "[", "\n", "\n", "conv3x3_gn_relu", "(", "self", ".", "config", ".", "in_channels", ",", "block1_channels", ",", "r", ")", ",", "\n", "\n", "repeat_block", "(", "block1_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "0", "]", ",", "kernel_size", ")", ",", "# num_blocks=(1, 1, 1, 1)", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "\n", "\n", "downsample2x", "(", "block1_channels", ",", "block2_channels", ")", ",", "\n", "\n", "repeat_block", "(", "block2_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "1", "]", ",", "kernel_size", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "\n", "\n", "\n", "downsample2x", "(", "block2_channels", ",", "block3_channels", ")", ",", "\n", "repeat_block", "(", "block3_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "2", "]", ",", "kernel_size", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "\n", "\n", "\n", "downsample2x", "(", "block3_channels", ",", "block4_channels", ")", ",", "\n", "\n", "repeat_block", "(", "block4_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "3", "]", ",", "kernel_size", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "]", ")", "\n", "inner_dim", "=", "int", "(", "self", ".", "config", ".", "inner_dim", "*", "self", ".", "config", ".", "reduction_ratio", ")", "\n", "\n", "self", ".", "reduce_1x1convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "block1_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block2_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block3_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block4_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "]", ")", "\n", "if", "cfg", ".", "data", ".", "train", ".", "params", ".", "select_type", "==", "'sample_percent'", ":", "\n", "            ", "self", ".", "SA", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "]", ")", "\n", "", "self", ".", "fuse_3x3convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv3x3_gn_relu", "(", "inner_dim", ",", "inner_dim", ",", "r", ")", ",", "\n", "conv3x3_gn_relu", "(", "inner_dim", ",", "inner_dim", ",", "r", ")", ",", "\n", "conv3x3_gn_relu", "(", "inner_dim", ",", "inner_dim", ",", "r", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_dim", ",", "self", ".", "config", ".", "in_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "cls_pred_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "config", ".", "in_channels", ",", "self", ".", "config", ".", "num_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SSDGL.top_down": [[123, 129], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "top_down", "(", "self", ",", "top", ",", "lateral", ")", ":", "\n", "\n", "        ", "top2x", "=", "F", ".", "interpolate", "(", "top", ",", "scale_factor", "=", "2.0", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "\n", "return", "lateral", "+", "top2x", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SSDGL.forward": [[130, 161], ["inner_feat_list.reverse", "range", "SSDGL.SSDGL.cls_pred_conv", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "op", "isinstance", "SSDGL.SSDGL.top_down", "out_feat_list.append", "feat_list.append", "enumerate", "len", "SSDGL.SSDGL.loss", "y.cuda"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.top_down", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "w", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "feat_list", "=", "[", "]", "\n", "\n", "for", "op", "in", "self", ".", "feature_ops", ":", "\n", "            ", "x", "=", "op", "(", "x", ")", "\n", "\n", "if", "isinstance", "(", "op", ",", "nn", ".", "Identity", ")", ":", "\n", "\n", "                ", "feat_list", ".", "append", "(", "x", ")", "\n", "\n", "", "", "inner_feat_list", "=", "[", "self", ".", "reduce_1x1convs", "[", "i", "]", "(", "feat", ")", "for", "i", ",", "feat", "in", "enumerate", "(", "feat_list", ")", "]", "\n", "\n", "inner_feat_list", ".", "reverse", "(", ")", "\n", "out_feat_list", "=", "[", "self", ".", "fuse_3x3convs", "[", "0", "]", "(", "inner_feat_list", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inner_feat_list", ")", "-", "1", ")", ":", "\n", "            ", "inner", "=", "self", ".", "top_down", "(", "out_feat_list", "[", "i", "]", ",", "inner_feat_list", "[", "i", "+", "1", "]", ")", "\n", "\n", "out", "=", "self", ".", "fuse_3x3convs", "[", "i", "+", "1", "]", "(", "inner", ")", "\n", "\n", "out_feat_list", ".", "append", "(", "out", ")", "\n", "", "final_feat", "=", "out_feat_list", "[", "-", "1", "]", "\n", "\n", "\n", "logit", "=", "self", ".", "cls_pred_conv", "(", "final_feat", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "loss_dict", "=", "{", "\n", "'cls_loss'", ":", "self", ".", "loss", "(", "logit", ",", "y", ".", "cuda", "(", ")", ",", "w", ")", "\n", "}", "\n", "return", "loss_dict", "\n", "\n", "", "return", "torch", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SSDGL.loss": [[162, 171], ["print", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "weight.sum", "torch.cross_entropy.sum", "weight.sum", "y.long"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "x", ",", "y", ",", "weight", ")", ":", "\n", "        ", "print", "(", "\"weight\"", ",", "weight", ".", "sum", "(", ")", ")", "\n", "\n", "losses", "=", "F", ".", "cross_entropy", "(", "x", ",", "y", ".", "long", "(", ")", "-", "1", ",", "weight", "=", "None", ",", "\n", "ignore_index", "=", "-", "1", ",", "reduction", "=", "'none'", ")", "\n", "\n", "v", "=", "losses", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "#v = losses.mul_(weight).sum() / weight.sum()", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SSDGL.set_defalut_config": [[173, 182], ["SSDGL.SSDGL.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "# pavia", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "in_channels", "=", "103", ",", "\n", "num_classes", "=", "9", ",", "\n", "block_channels", "=", "(", "96", ",", "128", ",", "192", ",", "256", ")", ",", "\n", "num_blocks", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "inner_dim", "=", "128", ",", "\n", "reduction_ratio", "=", "1.0", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ChannelAttention.__init__": [[186, 198], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GELU", "torch.GELU", "torch.GELU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "ratio", "=", "16", ")", ":", "\n", "        ", "super", "(", "ChannelAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ratio", "=", "24", "if", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_Indianpine\"", "else", "16", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "//", "ratio", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu1", "=", "nn", ".", "GELU", "(", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "in_planes", "//", "ratio", ",", "in_planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ChannelAttention.forward": [[199, 213], ["SSDGL.ChannelAttention.fc2", "SSDGL.ChannelAttention.fc2", "SSDGL.ChannelAttention.relu2", "SSDGL.ChannelAttention.relu1", "SSDGL.ChannelAttention.relu1", "SSDGL.ChannelAttention.view", "SSDGL.ChannelAttention.fc1", "SSDGL.ChannelAttention.fc1", "SSDGL.ChannelAttention.size", "SSDGL.ChannelAttention.size", "SSDGL.ChannelAttention.avg_pool", "SSDGL.ChannelAttention.max_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "avg_out", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", ")", "\n", "\n", "#avg_out = self.relu2(avg_out)            ", "\n", "max_out", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "max_pool", "(", "x", ")", ")", ")", ")", "\n", "\n", "#max_out = self.relu2(max_out)          ", "\n", "out", "=", "self", ".", "relu2", "(", "avg_out", "+", "max_out", ")", "\n", "\n", "y", "=", "x", "*", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "y", "=", "y", "+", "residual", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SpatialAttention.__init__": [[216, 227], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "#self.relu1 = nn.GELU()", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.SpatialAttention.forward": [[228, 244], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSDGL.SpatialAttention.conv1", "SSDGL.SpatialAttention.relu1", "SSDGL.SpatialAttention.sigmoid", "SSDGL.SpatialAttention.view", "SSDGL.SpatialAttention.size", "SSDGL.SpatialAttention.size", "SSDGL.SpatialAttention.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "out1", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out2", "=", "self", ".", "relu1", "(", "out1", ")", "\n", "\n", "out", "=", "self", ".", "sigmoid", "(", "out2", ")", "\n", "\n", "y", "=", "x", "*", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "1", ",", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "y", "=", "y", "+", "residual", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.BasicBlock.__init__": [[249, 255], ["torch.Module.__init__", "SSDGL.ChannelAttention", "SSDGL.SpatialAttention", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ca", "=", "ChannelAttention", "(", "planes", ")", "\n", "self", ".", "sa", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.BasicBlock.forward": [[256, 262], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSDGL.BasicBlock.ca", "SSDGL.BasicBlock.sa"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = self.ca(x) + self.sa(x)", "\n", "        ", "out", "=", "torch", ".", "cat", "(", "[", "self", ".", "ca", "(", "x", ")", ",", "self", ".", "sa", "(", "x", ")", "]", ",", "dim", "=", "1", ")", "\n", "#min -", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ConvLSTMCell.__init__": [[265, 289], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_features", "=", "4", "\n", "\n", "self", ".", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "Wxi", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxf", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxc", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxo", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Who", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "Wci", "=", "None", "\n", "self", ".", "Wcf", "=", "None", "\n", "self", ".", "Wco", "=", "None", "\n", "#self.relu = nn.ReLU(inplace=True)        ", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ConvLSTMCell.forward": [[291, 300], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SSDGL.ConvLSTMCell.Wxi", "SSDGL.ConvLSTMCell.Whi", "SSDGL.ConvLSTMCell.Wxf", "SSDGL.ConvLSTMCell.Whf", "SSDGL.ConvLSTMCell.Wxo", "SSDGL.ConvLSTMCell.Who", "SSDGL.ConvLSTMCell.Wxc", "SSDGL.ConvLSTMCell.Whc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "\n", "        ", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxi", "(", "x", ")", "+", "self", ".", "Whi", "(", "h", ")", "+", "c", "*", "self", ".", "Wci", ")", "\n", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxf", "(", "x", ")", "+", "self", ".", "Whf", "(", "h", ")", "+", "c", "*", "self", ".", "Wcf", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "torch", ".", "tanh", "(", "self", ".", "Wxc", "(", "x", ")", "+", "self", ".", "Whc", "(", "h", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxo", "(", "x", ")", "+", "self", ".", "Who", "(", "h", ")", "+", "cc", "*", "self", ".", "Wco", ")", "\n", "ch", "=", "co", "*", "torch", ".", "tanh", "(", "cc", ")", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ConvLSTMCell.init_hidden": [[301, 311], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "SSDGL.ConvLSTMCell.Wci.size", "SSDGL.ConvLSTMCell.Wci.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "if", "self", ".", "Wci", "is", "None", ":", "\n", "            ", "self", ".", "Wci", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wcf", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wco", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "shape", "[", "0", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "2", "]", ",", "'Input Height Mismatched!'", "\n", "assert", "shape", "[", "1", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "3", "]", ",", "'Input Width Mismatched!'", "\n", "", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ConvLSTM.__init__": [[316, 330], ["torch.Module.__init__", "len", "range", "SSDGL.ConvLSTMCell", "setattr", "SSDGL.ConvLSTM._all_layers.append"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "step", "=", "1", ",", "effective_step", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "[", "input_channels", "]", "+", "hidden_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "len", "(", "hidden_channels", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "effective_step", "=", "effective_step", "\n", "self", ".", "_all_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "cell", "=", "ConvLSTMCell", "(", "self", ".", "input_channels", "[", "i", "]", ",", "self", ".", "hidden_channels", "[", "i", "]", ",", "self", ".", "kernel_size", ")", "\n", "setattr", "(", "self", ",", "name", ",", "cell", ")", "\n", "self", ".", "_all_layers", ".", "append", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.ConvLSTM.forward": [[331, 364], ["range", "range", "input.squeeze", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "len", "x.size", "getattr().init_hidden", "internal_state.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTMCell.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "internal_state", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "step", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "            ", "a", "=", "input", ".", "squeeze", "(", ")", "\n", "\n", "b", "=", "int", "(", "len", "(", "a", ")", "/", "8", ")", "\n", "\n", "x", "=", "input", "[", ":", ",", "step", "*", "b", ":", "(", "step", "+", "1", ")", "*", "b", ",", ":", ",", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# all cells are initialized in the first step", "\n", "                ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "bsize", ",", "_", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "(", "h", ",", "c", ")", "=", "getattr", "(", "self", ",", "name", ")", ".", "init_hidden", "(", "batch_size", "=", "bsize", ",", "hidden", "=", "self", ".", "hidden_channels", "[", "i", "]", ",", "\n", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "internal_state", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "# do forward", "\n", "", "(", "h", ",", "c", ")", "=", "internal_state", "[", "i", "]", "\n", "x", ",", "new_c", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "h", ",", "c", ")", "\n", "internal_state", "[", "i", "]", "=", "(", "x", ",", "new_c", ")", "\n", "# only record effective steps", "\n", "", "deng", "=", "self", ".", "effective_step", "[", "0", "]", "\n", "if", "step", "<=", "deng", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "result", "=", "outputs", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "step", "-", "1", ")", ":", "\n", "            ", "result", "=", "torch", ".", "cat", "(", "[", "result", ",", "outputs", "[", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.conv3x3_gn_relu": [[23, 28], ["torch.Sequential", "torch.Conv2d", "torch.GroupNorm", "torch.ReLU"], "function", ["None"], ["def", "conv3x3_gn_relu", "(", "in_channel", ",", "out_channel", ",", "num_group", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_group", ",", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.gn_relu": [[30, 34], ["torch.Sequential", "torch.GroupNorm", "torch.ReLU"], "function", ["None"], ["", "def", "gn_relu", "(", "in_channel", ",", "num_group", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "GroupNorm", "(", "num_group", ",", "in_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.downsample2x": [[37, 41], ["torch.Sequential", "torch.Conv2d", "torch.ReLU"], "function", ["None"], ["", "def", "downsample2x", "(", "in_channel", ",", "out_channel", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL.repeat_block": [[44, 55], ["int", "int", "int", "torch.Sequential", "torch.Sequential", "ConvLSTM().cuda", "SSDGL.BasicBlock", "SSDGL.gn_relu", "SSDGL.ConvLSTM"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.gn_relu"], ["", "def", "repeat_block", "(", "block_channel1", ",", "r", ",", "n", ",", "conv_size", ")", ":", "\n", "    ", "cl_channel", "=", "block_channel1", "/", "8", "\n", "cl_channel", "=", "int", "(", "cl_channel", ")", "\n", "cl2_channel", "=", "int", "(", "cl_channel", "/", "2", ")", "\n", "gn_a", "=", "int", "(", "block_channel1", "/", "2", ")", "\n", "layers", "=", "[", "\n", "nn", ".", "Sequential", "(", "\n", "ConvLSTM", "(", "input_channels", "=", "cl_channel", ",", "hidden_channels", "=", "[", "cl_channel", ",", "cl2_channel", "]", ",", "kernel_size", "=", "conv_size", ",", "step", "=", "8", ",", "\n", "effective_step", "=", "[", "7", "]", ")", ".", "cuda", "(", ")", ",", "\n", "BasicBlock", "(", "gn_a", ")", ",", "gn_relu", "(", "block_channel1", ",", "r", ")", ",", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.GlobalMaxPool2D.__init__": [[16, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalMaxPool2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.GlobalMaxPool2D.forward": [[18, 20], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.FlattenLayer.__init__": [[22, 24], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "FlattenLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "# x shape: (batch, *, *, ...)", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.FlattenLayer.forward": [[24, 26], ["x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# x shape: (batch, *, *, ...)", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "", "class", "ConvLSTMCell", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTMCell.__init__": [[27, 51], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_features", "=", "4", "\n", "\n", "self", ".", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "Wxi", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxf", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxc", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxo", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Who", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "Wci", "=", "None", "\n", "self", ".", "Wcf", "=", "None", "\n", "self", ".", "Wco", "=", "None", "\n", "#self.relu = nn.ReLU(inplace=True)        ", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTMCell.forward": [[53, 62], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SSDGL_HOS.ConvLSTMCell.Wxi", "SSDGL_HOS.ConvLSTMCell.Whi", "SSDGL_HOS.ConvLSTMCell.Wxf", "SSDGL_HOS.ConvLSTMCell.Whf", "SSDGL_HOS.ConvLSTMCell.Wxo", "SSDGL_HOS.ConvLSTMCell.Who", "SSDGL_HOS.ConvLSTMCell.Wxc", "SSDGL_HOS.ConvLSTMCell.Whc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "\n", "        ", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxi", "(", "x", ")", "+", "self", ".", "Whi", "(", "h", ")", "+", "c", "*", "self", ".", "Wci", ")", "\n", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxf", "(", "x", ")", "+", "self", ".", "Whf", "(", "h", ")", "+", "c", "*", "self", ".", "Wcf", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "torch", ".", "tanh", "(", "self", ".", "Wxc", "(", "x", ")", "+", "self", ".", "Whc", "(", "h", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxo", "(", "x", ")", "+", "self", ".", "Who", "(", "h", ")", "+", "cc", "*", "self", ".", "Wco", ")", "\n", "ch", "=", "co", "*", "torch", ".", "tanh", "(", "cc", ")", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTMCell.init_hidden": [[63, 73], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "SSDGL_HOS.ConvLSTMCell.Wci.size", "SSDGL_HOS.ConvLSTMCell.Wci.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "if", "self", ".", "Wci", "is", "None", ":", "\n", "            ", "self", ".", "Wci", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wcf", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wco", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "shape", "[", "0", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "2", "]", ",", "'Input Height Mismatched!'", "\n", "assert", "shape", "[", "1", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "3", "]", ",", "'Input Width Mismatched!'", "\n", "", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTM.__init__": [[78, 92], ["torch.Module.__init__", "len", "range", "SSDGL_HOS.ConvLSTMCell", "setattr", "SSDGL_HOS.ConvLSTM._all_layers.append"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "step", "=", "1", ",", "effective_step", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "[", "input_channels", "]", "+", "hidden_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "len", "(", "hidden_channels", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "effective_step", "=", "effective_step", "\n", "self", ".", "_all_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "cell", "=", "ConvLSTMCell", "(", "self", ".", "input_channels", "[", "i", "]", ",", "self", ".", "hidden_channels", "[", "i", "]", ",", "self", ".", "kernel_size", ")", "\n", "setattr", "(", "self", ",", "name", ",", "cell", ")", "\n", "self", ".", "_all_layers", ".", "append", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTM.forward": [[93, 123], ["range", "range", "input.squeeze", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "outputs.append", "len", "x.size", "getattr().init_hidden", "internal_state.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ConvLSTMCell.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "internal_state", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "            ", "a", "=", "input", ".", "squeeze", "(", ")", "\n", "b", "=", "int", "(", "len", "(", "a", ")", "/", "8", ")", "\n", "x", "=", "input", "[", ":", ",", "step", "*", "b", ":", "(", "step", "+", "1", ")", "*", "b", ",", ":", ",", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# all cells are initialized in the first step", "\n", "                ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "bsize", ",", "_", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "(", "h", ",", "c", ")", "=", "getattr", "(", "self", ",", "name", ")", ".", "init_hidden", "(", "batch_size", "=", "bsize", ",", "hidden", "=", "self", ".", "hidden_channels", "[", "i", "]", ",", "\n", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "internal_state", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "# do forward", "\n", "", "(", "h", ",", "c", ")", "=", "internal_state", "[", "i", "]", "\n", "x", ",", "new_c", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "h", ",", "c", ")", "\n", "internal_state", "[", "i", "]", "=", "(", "x", ",", "new_c", ")", "\n", "# only record effective steps", "\n", "", "deng", "=", "self", ".", "effective_step", "[", "0", "]", "\n", "if", "step", "<=", "deng", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "", "", "result", "=", "outputs", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "step", "-", "1", ")", ":", "\n", "            ", "result", "=", "torch", ".", "cat", "(", "[", "result", ",", "outputs", "[", "i", "+", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ChannelAttention.__init__": [[131, 143], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "ratio", "=", "16", ")", ":", "\n", "        ", "super", "(", "ChannelAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "self", ".", "max_pool", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", "//", "ratio", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "in_planes", "//", "ratio", ",", "in_planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.ChannelAttention.forward": [[144, 154], ["SSDGL_HOS.ChannelAttention.fc2", "SSDGL_HOS.ChannelAttention.fc2", "SSDGL_HOS.ChannelAttention.relu2", "SSDGL_HOS.ChannelAttention.relu1", "SSDGL_HOS.ChannelAttention.relu1", "SSDGL_HOS.ChannelAttention.view", "SSDGL_HOS.ChannelAttention.fc1", "SSDGL_HOS.ChannelAttention.fc1", "SSDGL_HOS.ChannelAttention.size", "SSDGL_HOS.ChannelAttention.size", "SSDGL_HOS.ChannelAttention.avg_pool", "SSDGL_HOS.ChannelAttention.max_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "avg_out", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "avg_pool", "(", "x", ")", ")", ")", ")", "\n", "max_out", "=", "self", ".", "fc2", "(", "self", ".", "relu1", "(", "self", ".", "fc1", "(", "self", ".", "max_pool", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "relu2", "(", "avg_out", "+", "max_out", ")", "\n", "\n", "y", "=", "x", "*", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "out", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "\n", "y", "=", "y", "+", "residual", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.BasicBlock.__init__": [[159, 166], ["torch.Module.__init__", "SSDGL_HOS.ChannelAttention", "SSDGL_HOS.SpatialAttention", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "planes", ",", "rate", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ca", "=", "ChannelAttention", "(", "planes", ",", "18", ")", "\n", "self", ".", "sa", "=", "SpatialAttention", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "rate", "=", "rate", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.BasicBlock.forward": [[167, 171], ["SSDGL_HOS.BasicBlock.ca", "SSDGL_HOS.BasicBlock.sa"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#out = torch.cat([self.ca(x), self.sa(x)], dim=1)", "\n", "        ", "out", "=", "self", ".", "ca", "(", "x", ")", "+", "self", ".", "rate", "*", "self", ".", "sa", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SpatialAttention.__init__": [[180, 188], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", "=", "7", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "kernel_size", "in", "(", "3", ",", "7", ")", ",", "'kernel size must be 3 or 7'", "\n", "padding", "=", "3", "if", "kernel_size", "==", "7", "else", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", ",", "1", ",", "kernel_size", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SpatialAttention.forward": [[189, 201], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SSDGL_HOS.SpatialAttention.sigmoid", "SSDGL_HOS.SpatialAttention.conv1", "SSDGL_HOS.SpatialAttention.view", "SSDGL_HOS.SpatialAttention.size", "SSDGL_HOS.SpatialAttention.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "avg_out", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "max_out", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "avg_out", ",", "max_out", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "sigmoid", "(", "self", ".", "conv1", "(", "out", ")", ")", "\n", "\n", "y", "=", "x", "*", "out", ".", "view", "(", "1", ",", "1", ",", "out", ".", "size", "(", "-", "2", ")", ",", "out", ".", "size", "(", "-", "1", ")", ")", "\n", "y", "=", "y", "+", "residual", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.__init__": [[225, 272], ["simplecv.interface.CVModule.__init__", "int", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "int", "SSDGL_HOS.conv3x3_gn_relu", "SSDGL_HOS.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL_HOS.downsample2x", "SSDGL_HOS.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL_HOS.downsample2x", "SSDGL_HOS.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "SSDGL_HOS.downsample2x", "SSDGL_HOS.repeat_block", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "SSDGL_HOS.SpatialAttention", "SSDGL_HOS.SpatialAttention", "SSDGL_HOS.SpatialAttention", "SSDGL_HOS.SpatialAttention"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SSDGL_HOS", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "r", "=", "int", "(", "8", "*", "self", ".", "config", ".", "reduction_ratio", ")", "\n", "block1_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "0", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block2_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "1", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block3_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "2", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "block4_channels", "=", "int", "(", "self", ".", "config", ".", "block_channels", "[", "3", "]", "*", "self", ".", "config", ".", "reduction_ratio", "/", "r", ")", "*", "r", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "16", ",", "144", ")", "\n", "self", ".", "rl", "=", "nn", ".", "ReLU", "(", "inplace", "=", "False", ")", "\n", "self", ".", "feature_ops", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv3x3_gn_relu", "(", "self", ".", "config", ".", "in_channels", ",", "block1_channels", ",", "r", ")", ",", "\n", "\n", "repeat_block", "(", "block1_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "0", "]", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "downsample2x", "(", "block1_channels", ",", "block2_channels", ")", ",", "\n", "\n", "repeat_block", "(", "block2_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "1", "]", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "downsample2x", "(", "block2_channels", ",", "block3_channels", ")", ",", "\n", "\n", "repeat_block", "(", "block3_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "2", "]", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "downsample2x", "(", "block3_channels", ",", "block4_channels", ")", ",", "\n", "\n", "repeat_block", "(", "block4_channels", ",", "r", ",", "self", ".", "config", ".", "num_blocks", "[", "3", "]", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "]", ")", "\n", "inner_dim", "=", "int", "(", "self", ".", "config", ".", "inner_dim", "*", "self", ".", "config", ".", "reduction_ratio", ")", "\n", "self", ".", "reduce_1x1convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "block1_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block2_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block3_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block4_channels", ",", "inner_dim", ",", "1", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "fuse_3x3convs", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Conv2d", "(", "inner_dim", ",", "inner_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_dim", ",", "inner_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_dim", ",", "inner_dim", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inner_dim", ",", "self", ".", "config", ".", "in_channels", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "]", ")", "\n", "self", ".", "cls_pred_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "config", ".", "in_channels", ",", "self", ".", "config", ".", "num_classes", ",", "1", ")", "\n", "self", ".", "SA", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "SpatialAttention", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.top_down": [[273, 276], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "top_down", "(", "self", ",", "top", ",", "lateral", ")", ":", "\n", "        ", "top2x", "=", "F", ".", "interpolate", "(", "top", ",", "scale_factor", "=", "2.0", ",", "mode", "=", "'bilinear'", ")", "\n", "return", "lateral", "+", "top2x", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.forward": [[277, 308], ["inner_feat_list.reverse", "range", "SSDGL_HOS.SSDGL_HOS.cls_pred_conv", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "op", "isinstance", "SSDGL_HOS.SSDGL_HOS.top_down", "out_feat_list.append", "feat_list.append", "enumerate", "len", "SSDGL_HOS.SSDGL_HOS.loss", "y.cuda"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.top_down", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "w", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "feat_list", "=", "[", "]", "\n", "for", "op", "in", "self", ".", "feature_ops", ":", "\n", "            ", "x", "=", "op", "(", "x", ")", "\n", "if", "isinstance", "(", "op", ",", "nn", ".", "Identity", ")", ":", "\n", "                ", "feat_list", ".", "append", "(", "x", ")", "\n", "\n", "", "", "inner_feat_list", "=", "[", "self", ".", "SA", "[", "i", "]", "(", "self", ".", "reduce_1x1convs", "[", "i", "]", "(", "feat", ")", ")", "for", "i", ",", "feat", "in", "enumerate", "(", "feat_list", ")", "]", "\n", "inner_feat_list", ".", "reverse", "(", ")", "\n", "\n", "out_feat_list", "=", "[", "self", ".", "fuse_3x3convs", "[", "0", "]", "(", "inner_feat_list", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "inner_feat_list", ")", "-", "1", ")", ":", "\n", "            ", "inner", "=", "self", ".", "top_down", "(", "out_feat_list", "[", "i", "]", ",", "inner_feat_list", "[", "i", "+", "1", "]", ")", "\n", "out", "=", "self", ".", "fuse_3x3convs", "[", "i", "+", "1", "]", "(", "inner", ")", "\n", "out_feat_list", ".", "append", "(", "out", ")", "\n", "\n", "", "final_feat", "=", "out_feat_list", "[", "-", "1", "]", "\n", "\n", "logit", "=", "self", ".", "cls_pred_conv", "(", "final_feat", ")", "\n", "\n", "\n", "\n", "if", "self", ".", "training", ":", "\n", "\n", "            ", "loss_dict", "=", "{", "\n", "'cls_loss'", ":", "self", ".", "loss", "(", "logit", ",", "y", ".", "cuda", "(", ")", ",", "w", ",", "residual", ",", "final_feat", ")", "\n", "}", "\n", "return", "loss_dict", "\n", "\n", "", "return", "torch", ".", "softmax", "(", "logit", ",", "dim", "=", "1", ")", "\n", "", "def", "loss", "(", "self", ",", "x", ",", "y", ",", "weight", ",", "x_origin", ",", "diff_feat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.loss": [[308, 320], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "SSDGL_HOS.SSDGL_HOS.rl", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "diff_feat.cuda", "SSDGL_HOS.SSDGL_HOS.cuda", "x_origin.cuda", "torch.cross_entropy.mul_().sum", "weight.sum", "y.long", "torch.cross_entropy.mul_"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "x", ",", "y", ",", "weight", ",", "x_origin", ",", "diff_feat", ")", ":", "\n", "#print(\"weight\",weight.sum())", "\n", "#print(\"x\",x.shape)", "\n", "#print(\"y\",y.shape)        ", "\n", "        ", "losses", "=", "F", ".", "cross_entropy", "(", "x", ",", "y", ".", "long", "(", ")", "-", "1", ",", "weight", "=", "None", ",", "\n", "ignore_index", "=", "-", "1", ",", "reduction", "=", "'none'", ")", "\n", "\n", "diff_feat_new", "=", "self", ".", "rl", "(", "diff_feat", ".", "cuda", "(", ")", ")", "\n", "l1", "=", "F", ".", "mse_loss", "(", "diff_feat_new", ".", "cuda", "(", ")", ",", "x_origin", ".", "cuda", "(", ")", ")", "\n", "v", "=", "losses", ".", "mul_", "(", "weight", ")", ".", "sum", "(", ")", "/", "weight", ".", "sum", "(", ")", "\n", "v", "=", "v", "+", "0.1", "*", "l1", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.SSDGL_HOS.set_defalut_config": [[322, 330], ["SSDGL_HOS.SSDGL_HOS.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "in_channels", "=", "144", ",", "\n", "num_classes", "=", "15", ",", "\n", "block_channels", "=", "(", "96", ",", "128", ",", "192", ",", "256", ")", ",", "\n", "num_blocks", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "inner_dim", "=", "128", ",", "\n", "reduction_ratio", "=", "1.0", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.gn_relu": [[124, 128], ["torch.Sequential", "torch.GroupNorm", "torch.ReLU"], "function", ["None"], ["", "", "def", "gn_relu", "(", "in_channel", ",", "num_group", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "GroupNorm", "(", "num_group", ",", "in_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu": [[173, 178], ["torch.Sequential", "torch.Conv2d", "torch.GroupNorm", "torch.ReLU"], "function", ["None"], ["", "", "def", "conv3x3_gn_relu", "(", "in_channel", ",", "out_channel", ",", "num_group", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_group", ",", "out_channel", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.repeat_block": [[202, 216], ["int", "int", "int", "torch.Sequential", "torch.Sequential", "SSDGL_HOS.conv3x3_gn_relu", "ConvLSTM().cuda", "SSDGL_HOS.BasicBlock", "torch.GroupNorm", "torch.ReLU", "SSDGL_HOS.ConvLSTM"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.conv3x3_gn_relu"], ["", "", "def", "repeat_block", "(", "block_channel1", ",", "r", ",", "n", ")", ":", "\n", "    ", "cl_channel", "=", "block_channel1", "/", "8", "\n", "cl_channel", "=", "int", "(", "cl_channel", ")", "\n", "cl2_channel", "=", "int", "(", "cl_channel", "/", "2", ")", "\n", "gn_a", "=", "int", "(", "block_channel1", "/", "2", ")", "\n", "layers", "=", "[", "\n", "nn", ".", "Sequential", "(", "\n", "conv3x3_gn_relu", "(", "block_channel1", ",", "block_channel1", ",", "r", ")", ",", "\n", "ConvLSTM", "(", "input_channels", "=", "cl_channel", ",", "hidden_channels", "=", "[", "cl_channel", "]", ",", "kernel_size", "=", "3", ",", "step", "=", "8", ",", "\n", "effective_step", "=", "[", "7", "]", ")", ".", "cuda", "(", ")", ",", "\n", "BasicBlock", "(", "block_channel1", ",", "0", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "r", ",", "block_channel1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.SSDGL_HOS.downsample2x": [[217, 221], ["torch.Sequential", "torch.Conv2d", "torch.ReLU"], "function", ["None"], ["", "def", "downsample2x", "(", "in_channel", ",", "out_channel", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "3", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.sep_conv.SeparableConv2d.__init__": [[10, 16], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "\n", "bias", "=", "bias", ",", "padding_mode", "=", "padding_mode", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.sep_conv.SeparableConv2D.__init__": [[23, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "norm_fn"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ",", "\n", "use_batchnorm", "=", "False", ",", "\n", "norm_fn", "=", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "super", "(", "SeparableConv2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_bn", "=", "use_batchnorm", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "depthwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", "=", "in_channels", ",", "\n", "bias", "=", "bias", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "bias", ")", "\n", "if", "use_batchnorm", ":", "\n", "            ", "self", ".", "bn", "=", "norm_fn", "(", "in_channels", ")", "\n", "", "nn", ".", "init", ".", "normal_", "(", "self", ".", "depthwise", ".", "weight", ",", "std", "=", "0.33", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "pointwise", ".", "weight", ",", "std", "=", "0.06", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.sep_conv.SeparableConv2D.forward": [[38, 45], ["sep_conv.SeparableConv2D.depthwise", "torch.relu", "torch.relu", "torch.relu", "sep_conv.SeparableConv2D.pointwise", "sep_conv.SeparableConv2D.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "depthwise", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck.__init__": [[19, 31], ["torch.Module.__init__", "trident_block.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "trident_block.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "trident_block.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "dilations", "=", "(", "1", ",", "2", ",", "3", ")", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilations", "=", "dilations", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck.forward": [[32, 42], ["isinstance", "zip", "out_list.append", "out_list.append", "trident_block.Bottleneck._forward_with_dilation", "trident_block.Bottleneck._forward_with_dilation"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck._forward_with_dilation", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck._forward_with_dilation"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "            ", "for", "d", ",", "x_i", "in", "zip", "(", "self", ".", "dilations", ",", "x", ")", ":", "\n", "                ", "out_list", ".", "append", "(", "self", ".", "_forward_with_dilation", "(", "x_i", ",", "dilation", "=", "d", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "d", "in", "self", ".", "dilations", ":", "\n", "                ", "out_list", ".", "append", "(", "self", ".", "_forward_with_dilation", "(", "x", ",", "dilation", "=", "d", ")", ")", "\n", "\n", "", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck._forward_with_dilation": [[43, 54], ["trident_block.Bottleneck._forward"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck._forward"], ["", "def", "_forward_with_dilation", "(", "self", ",", "x", ",", "dilation", ")", ":", "\n", "        ", "org_dilation", "=", "self", ".", "conv2", ".", "dilation", "\n", "org_padding", "=", "self", ".", "conv2", ".", "padding", "\n", "self", ".", "conv2", ".", "dilation", "=", "(", "dilation", ",", "dilation", ")", "\n", "self", ".", "conv2", ".", "padding", "=", "(", "dilation", ",", "dilation", ")", "\n", "\n", "out", "=", "self", ".", "_forward", "(", "x", ")", "\n", "\n", "self", ".", "conv2", ".", "dilation", "=", "org_dilation", "\n", "self", ".", "conv2", ".", "padding", "=", "org_padding", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.Bottleneck._forward": [[55, 75], ["trident_block.Bottleneck.conv1", "trident_block.Bottleneck.bn1", "trident_block.Bottleneck.relu", "trident_block.Bottleneck.conv2", "trident_block.Bottleneck.bn2", "trident_block.Bottleneck.relu", "trident_block.Bottleneck.conv3", "trident_block.Bottleneck.bn3", "trident_block.Bottleneck.relu", "trident_block.Bottleneck.downsample"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.conv3x3": [[5, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.conv1x1": [[11, 14], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.trident_block.plugin_to_resnet": [[77, 79], ["None"], "function", ["None"], ["", "", "def", "plugin_to_resnet", "(", "module", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.aspp.AtrousSpatialPyramidPool.__init__": [[12, 79], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "issubclass", "aspp.AtrousSpatialPyramidPool.aspp_convs.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "simplecv.util.param_util.freeze_modules", "aspp.AtrousSpatialPyramidPool.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "issubclass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "simplecv.module.gap.GlobalAvgPool2D", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "isinstance", "simplecv.module.sep_conv.SeparableConv2D", "ValueError", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity", "torch.Identity", "m.eval", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity", "torch.Identity", "type"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_modules"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channel", ",", "\n", "aspp_dim", "=", "256", ",", "\n", "atrous_rates", "=", "(", "6", ",", "12", ",", "18", ")", ",", "\n", "add_image_level", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "use_batchnorm", "=", "False", ",", "\n", "batchnorm_trainable", "=", "False", ",", "\n", "norm_type", "=", "'batchnorm'", ",", "\n", "conv_op", "=", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "super", "(", "AtrousSpatialPyramidPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_fn", "=", "registry", ".", "OP", "[", "norm_type", "]", "if", "use_batchnorm", "else", "nn", ".", "Identity", "\n", "\n", "self", ".", "add_image_level", "=", "add_image_level", "\n", "self", ".", "rate_list", "=", "atrous_rates", "\n", "self", ".", "add_image_level", "=", "add_image_level", "\n", "self", ".", "use_batchnorm", "=", "use_batchnorm", "\n", "self", ".", "batchnorm_trainable", "=", "batchnorm_trainable", "\n", "self", ".", "aspp_dim", "=", "aspp_dim", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "aspp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "rate", "in", "atrous_rates", ":", "\n", "            ", "if", "issubclass", "(", "conv_op", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_op_intance", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "\n", "bias", "=", "use_bias", ")", "\n", "", "elif", "issubclass", "(", "conv_op", ",", "SeparableConv2D", ")", ":", "\n", "                ", "conv_op_intance", "=", "SeparableConv2D", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rate", ",", "\n", "dilation", "=", "rate", ",", "\n", "bias", "=", "use_bias", ",", "use_batchnorm", "=", "use_batchnorm", ",", "norm_fn", "=", "norm_fn", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Type {} is not support.'", ".", "format", "(", "type", "(", "conv_op", ")", ")", ")", "\n", "", "self", ".", "aspp_convs", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "conv_op_intance", ",", "\n", "nn", ".", "BatchNorm2d", "(", "aspp_dim", ")", "if", "use_batchnorm", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "add_image_level", ":", "\n", "            ", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "GlobalAvgPool2D", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "aspp_dim", ")", "if", "use_batchnorm", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "merge_inchannel", "=", "1", "+", "len", "(", "atrous_rates", ")", "+", "int", "(", "add_image_level", ")", "\n", "# projection", "\n", "self", ".", "merge_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "merge_inchannel", "*", "aspp_dim", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "# self.dropout = nn.Dropout(p=0.1)", "\n", "\n", "if", "self", ".", "use_batchnorm", "and", "not", "self", ".", "batchnorm_trainable", ":", "\n", "            ", "param_util", ".", "freeze_modules", "(", "self", ",", "nn", ".", "BatchNorm2d", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.aspp.AtrousSpatialPyramidPool.forward": [[80, 102], ["aspp.AtrousSpatialPyramidPool.conv1x1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp.AtrousSpatialPyramidPool.merge_conv", "aspp_conv_op", "aspp.AtrousSpatialPyramidPool.image_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "aspp_feat_dict.values", "aspp.AtrousSpatialPyramidPool.size", "aspp.AtrousSpatialPyramidPool.size"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# aspp feat", "\n", "        ", "c1", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n", "aspp_feat_dict", "=", "{", "'conv1x1'", ":", "c1", "}", "\n", "for", "aspp_conv_op", "in", "self", ".", "aspp_convs", ":", "\n", "            ", "aspp_feat", "=", "aspp_conv_op", "(", "x", ")", "\n", "aspp_feat_dict", "[", "'artous_rate_{}'", ".", "format", "(", "aspp_conv_op", "[", "0", "]", ".", "dilation", ")", "]", "=", "aspp_feat", "\n", "# image level feat", "\n", "", "if", "self", ".", "add_image_level", ":", "\n", "            ", "image_feature", "=", "self", ".", "image_pool", "(", "x", ")", "\n", "image_feature", "=", "F", ".", "interpolate", "(", "image_feature", ",", "size", "=", "(", "c1", ".", "size", "(", "2", ")", ",", "c1", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "aspp_feat_dict", "[", "'image_level'", "]", "=", "image_feature", "\n", "# merge op", "\n", "", "branch_logits", "=", "list", "(", "aspp_feat_dict", ".", "values", "(", ")", ")", "\n", "concat_logits", "=", "torch", ".", "cat", "(", "branch_logits", ",", "dim", "=", "1", ")", "\n", "concat_logits", "=", "self", ".", "merge_conv", "(", "concat_logits", ")", "\n", "\n", "# concat_logits = self.dropout(concat_logits)", "\n", "\n", "return", "concat_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.aspp.AtrousSpatialPyramidPoolv2.__init__": [[106, 171], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "issubclass", "aspp.AtrousSpatialPyramidPoolv2.aspp_convs.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "simplecv.util.param_util.freeze_modules", "aspp.AtrousSpatialPyramidPoolv2.modules", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "issubclass", "torch.Sequential", "torch.Sequential", "torch.Sequential", "simplecv.module.gap.GlobalAvgPool2D", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "isinstance", "simplecv.module.sep_conv.SeparableConv2D", "ValueError", "norm_fn", "torch.ReLU", "torch.ReLU", "torch.ReLU", "m.eval", "type"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_modules"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channel", ",", "\n", "aspp_dim", "=", "256", ",", "\n", "atrous_rates", "=", "(", "6", ",", "12", ",", "18", ")", ",", "\n", "add_image_level", "=", "True", ",", "\n", "use_bias", "=", "True", ",", "\n", "norm_trainable", "=", "False", ",", "\n", "norm_fn", "=", "nn", ".", "BatchNorm2d", ",", "\n", "conv_op", "=", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "super", "(", "AtrousSpatialPyramidPoolv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "norm_fn", "=", "nn", ".", "Identity", "if", "norm_fn", "is", "None", "else", "norm_fn", "\n", "\n", "self", ".", "add_image_level", "=", "add_image_level", "\n", "self", ".", "rate_list", "=", "atrous_rates", "\n", "self", ".", "add_image_level", "=", "add_image_level", "\n", "self", ".", "batchnorm_trainable", "=", "norm_trainable", "\n", "self", ".", "aspp_dim", "=", "aspp_dim", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "aspp_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "rate", "in", "atrous_rates", ":", "\n", "            ", "if", "issubclass", "(", "conv_op", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "conv_op_intance", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rate", ",", "dilation", "=", "rate", ",", "\n", "bias", "=", "use_bias", ")", "\n", "", "elif", "issubclass", "(", "conv_op", ",", "SeparableConv2D", ")", ":", "\n", "                ", "conv_op_intance", "=", "SeparableConv2D", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rate", ",", "\n", "dilation", "=", "rate", ",", "\n", "bias", "=", "use_bias", ",", "use_batchnorm", "=", "True", ",", "norm_fn", "=", "norm_fn", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Type {} is not support.'", ".", "format", "(", "type", "(", "conv_op", ")", ")", ")", "\n", "", "self", ".", "aspp_convs", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "conv_op_intance", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "add_image_level", ":", "\n", "            ", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "GlobalAvgPool2D", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "", "merge_inchannel", "=", "1", "+", "len", "(", "atrous_rates", ")", "+", "int", "(", "add_image_level", ")", "\n", "# projection", "\n", "self", ".", "merge_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "merge_inchannel", "*", "aspp_dim", ",", "aspp_dim", ",", "kernel_size", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_fn", "(", "aspp_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "# self.dropout = nn.Dropout(p=0.1)", "\n", "\n", "if", "not", "self", ".", "batchnorm_trainable", ":", "\n", "            ", "param_util", ".", "freeze_modules", "(", "self", ",", "nn", ".", "BatchNorm2d", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.aspp.AtrousSpatialPyramidPoolv2.forward": [[172, 194], ["aspp.AtrousSpatialPyramidPoolv2.conv1x1", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp.AtrousSpatialPyramidPoolv2.merge_conv", "aspp_conv_op", "aspp.AtrousSpatialPyramidPoolv2.image_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "aspp_feat_dict.values", "aspp.AtrousSpatialPyramidPoolv2.size", "aspp.AtrousSpatialPyramidPoolv2.size"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# aspp feat", "\n", "        ", "c1", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n", "aspp_feat_dict", "=", "{", "'conv1x1'", ":", "c1", "}", "\n", "for", "aspp_conv_op", "in", "self", ".", "aspp_convs", ":", "\n", "            ", "aspp_feat", "=", "aspp_conv_op", "(", "x", ")", "\n", "aspp_feat_dict", "[", "'artous_rate_{}'", ".", "format", "(", "aspp_conv_op", "[", "0", "]", ".", "dilation", ")", "]", "=", "aspp_feat", "\n", "# image level feat", "\n", "", "if", "self", ".", "add_image_level", ":", "\n", "            ", "image_feature", "=", "self", ".", "image_pool", "(", "x", ")", "\n", "image_feature", "=", "F", ".", "interpolate", "(", "image_feature", ",", "size", "=", "(", "c1", ".", "size", "(", "2", ")", ",", "c1", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "aspp_feat_dict", "[", "'image_level'", "]", "=", "image_feature", "\n", "# merge op", "\n", "", "branch_logits", "=", "list", "(", "aspp_feat_dict", ".", "values", "(", ")", ")", "\n", "concat_logits", "=", "torch", ".", "cat", "(", "branch_logits", ",", "dim", "=", "1", ")", "\n", "concat_logits", "=", "self", ".", "merge_conv", "(", "concat_logits", ")", "\n", "\n", "# concat_logits = self.dropout(concat_logits)", "\n", "\n", "return", "concat_logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.InvResidulBlock.__init__": [[10, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "expansion_factor", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "InvResidulBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "t", "=", "expansion_factor", "\n", "self", ".", "s", "=", "stride", "\n", "padding", "=", "dilation", "\n", "self", ".", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "t", ",", "1", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "*", "t", ",", "in_channels", "*", "t", ",", "3", ",", "stride", "=", "self", ".", "s", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "in_channels", "*", "t", ",", "bias", "=", "bias", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "*", "t", ",", "out_channels", ",", "1", ",", "bias", "=", "bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.InvResidulBlock.forward": [[25, 32], ["mobilenetv2.InvResidulBlock.seq", "x.size", "mobilenetv2.InvResidulBlock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "self", ".", "seq", "(", "x", ")", "\n", "if", "self", ".", "s", "==", "1", "and", "x", ".", "size", "(", "1", ")", "==", "res", ".", "size", "(", "1", ")", ":", "\n", "            ", "out", "=", "res", "+", "x", "\n", "", "else", ":", "\n", "            ", "out", "=", "res", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.MobileNetv2.__init__": [[35, 45], ["simplecv.interface.CVModule.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mobilenetv2.MobileNetv2.make_blocks", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "simplecv.module.gap.GlobalAvgPool2D", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.MobileNetv2.make_blocks"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MobileNetv2", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "2", ",", "1", ")", "\n", "\n", "self", ".", "blocks", "=", "self", ".", "make_blocks", "(", "bias", "=", "True", ")", "\n", "\n", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "1", ")", "\n", "self", ".", "gap", "=", "GlobalAvgPool2D", "(", ")", "\n", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "cls_conv", "=", "nn", ".", "Conv2d", "(", "1280", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.MobileNetv2.make_blocks": [[46, 58], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "torch.ModuleList.append", "mobilenetv2.InvResidulBlock", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenetv2.InvResidulBlock", "range"], "methods", ["None"], ["", "", "def", "make_blocks", "(", "self", ",", "bias", "=", "True", ")", ":", "\n", "        ", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "in_c", "=", "self", ".", "conv1", ".", "out_channels", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "zip", "(", "self", ".", "expansion_factors", ",", "self", ".", "out_channels", ",", "self", ".", "repeats", ",", "self", ".", "strides", ")", ":", "\n", "            ", "layers", "=", "[", "InvResidulBlock", "(", "in_c", ",", "c", ",", "t", ",", "s", ",", "bias", "=", "bias", ")", "]", "\n", "in_c", "=", "c", "\n", "if", "n", ">", "1", ":", "\n", "                ", "s", "=", "1", "\n", "layers", "+=", "[", "InvResidulBlock", "(", "c", ",", "c", ",", "t", ",", "s", ",", "bias", "=", "bias", ")", "for", "_", "in", "range", "(", "n", "-", "1", ")", "]", "\n", "\n", "", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.MobileNetv2.forward": [[59, 69], ["mobilenetv2.MobileNetv2.conv1", "mobilenetv2.MobileNetv2.conv1x1", "mobilenetv2.MobileNetv2.gap", "block", "mobilenetv2.MobileNetv2.cls_conv"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "if", "self", ".", "num_classes", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "cls_conv", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.mobilenetv2.MobileNetv2.set_defalut_config": [[70, 77], ["mobilenetv2.MobileNetv2.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_classes", "=", "None", ",", "\n", "expansion_factors", "=", "(", "1", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ")", ",", "\n", "out_channels", "=", "(", "16", ",", "24", ",", "32", ",", "64", ",", "96", ",", "160", ",", "320", ")", ",", "\n", "repeats", "=", "(", "1", ",", "2", ",", "3", ",", "4", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.__init__": [[30, 38], ["super().__init__", "simplecv.interface.ConfigurableMixin.__init__", "_logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["    ", "def", "__init__", "(", "self", ",", "config", "=", "defalut_config", ")", ":", "\n", "        ", "super", "(", "HRNetEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ConfigurableMixin", ".", "__init__", "(", "self", ",", "config", ")", "\n", "self", ".", "hrnet", "=", "registry", ".", "MODEL", "[", "self", ".", "config", ".", "hrnet_type", "]", "(", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "\n", "weight_path", "=", "self", ".", "config", ".", "weight_path", ",", "\n", "norm_eval", "=", "self", ".", "config", ".", "norm_eval", ",", "\n", "frozen_stages", "=", "self", ".", "config", ".", "frozen_stages", ")", "\n", "_logger", ".", "info", "(", "'HRNetEncoder: pretrained = {}'", ".", "format", "(", "self", ".", "config", ".", "pretrained", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.forward": [[39, 43], ["hrnet.HRNetEncoder.hrnet", "torch.utils.checkpoint.checkpoint"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "with_cp", "and", "not", "self", ".", "training", ":", "\n", "            ", "return", "cp", ".", "checkpoint", "(", "self", ".", "hrnet", ",", "x", ")", "\n", "", "return", "self", ".", "hrnet", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage1": [[49, 53], ["None"], "methods", ["None"], ["", "@", "stage1", ".", "setter", "\n", "def", "stage1", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "hrnet", ".", "stage1", "\n", "self", ".", "hrnet", ".", "stage1", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage2": [[59, 63], ["None"], "methods", ["None"], ["", "@", "stage2", ".", "setter", "\n", "def", "stage2", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "hrnet", ".", "stage2", "\n", "self", ".", "hrnet", ".", "stage2", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage3": [[69, 73], ["None"], "methods", ["None"], ["", "@", "stage3", ".", "setter", "\n", "def", "stage3", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "hrnet", ".", "stage3", "\n", "self", ".", "hrnet", ".", "stage3", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage4": [[79, 83], ["None"], "methods", ["None"], ["", "@", "stage4", ".", "setter", "\n", "def", "stage4", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "hrnet", ".", "stage4", "\n", "self", ".", "hrnet", ".", "stage4", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.set_defalut_config": [[84, 86], ["hrnet.HRNetEncoder.config.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "defalut_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.output_channels": [[87, 98], ["NotImplementedError"], "methods", ["None"], ["", "def", "output_channels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "hrnet_type", "==", "'hrnetv2_w18'", ":", "\n", "            ", "return", "18", ",", "36", ",", "72", ",", "144", "\n", "", "elif", "self", ".", "config", ".", "hrnet_type", "==", "'hrnetv2_w32'", ":", "\n", "            ", "return", "32", ",", "64", ",", "128", ",", "256", "\n", "", "elif", "self", ".", "config", ".", "hrnet_type", "==", "'hrnetv2_w40'", ":", "\n", "            ", "return", "40", ",", "80", ",", "160", ",", "320", "\n", "", "elif", "self", ".", "config", ".", "hrnet_type", "==", "'hrnetv2_w48'", ":", "\n", "            ", "return", "48", ",", "96", ",", "192", ",", "384", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{} is not implemented.'", ".", "format", "(", "self", ".", "config", ".", "hrnet_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.with_context_block": [[99, 105], ["_logger.info", "simplecv.module.context_block.plugin_to_basicblock", "simplecv.module.context_block.plugin_to_basicblock", "simplecv.module.context_block.plugin_to_basicblock"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock"], ["", "", "def", "with_context_block", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "_logger", ".", "info", "(", "'With context block (ratio = {})'", ".", "format", "(", "ratio", ")", ")", "\n", "assert", "ratio", "in", "[", "1", "/", "16.", ",", "1", "/", "8.", "]", "\n", "self", ".", "stage2", "=", "context_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage2", ",", "ratio", ")", "\n", "self", ".", "stage3", "=", "context_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage3", ",", "ratio", ")", "\n", "self", ".", "stage4", "=", "context_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage4", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.with_squeeze_excitation": [[106, 112], ["_logger.info", "simplecv.module.se_block.plugin_to_basicblock", "simplecv.module.se_block.plugin_to_basicblock", "simplecv.module.se_block.plugin_to_basicblock"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock"], ["", "def", "with_squeeze_excitation", "(", "self", ",", "inv_ratio", ")", ":", "\n", "        ", "_logger", ".", "info", "(", "'With squeeze_excitation block (inv_ratio = {})'", ".", "format", "(", "inv_ratio", ")", ")", "\n", "assert", "inv_ratio", "in", "[", "16", ",", "8", "]", "\n", "self", ".", "stage2", "=", "se_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage2", ",", "inv_ratio", ")", "\n", "self", ".", "stage3", "=", "se_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage3", ",", "inv_ratio", ")", "\n", "self", ".", "stage4", "=", "se_block", ".", "plugin_to_basicblock", "(", "self", ".", "stage4", ",", "inv_ratio", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.FPN.__init__": [[75, 107], ["torch.nn.Module.__init__", "enumerate", "conv_block", "conv_block", "fpn.FPN.add_module", "fpn.FPN.add_module", "fpn.FPN.inner_blocks.append", "fpn.FPN.layer_blocks.append"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels_list", ",", "\n", "out_channels", ",", "\n", "conv_block", "=", "default_conv_block", ",", "\n", "top_blocks", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            in_channels_list (list[int]): number of channels for each feature map that\n                will be fed\n            out_channels (int): number of channels of the FPN representation\n            conv_block: (nn.Module)\n            top_blocks (nn.Module or None): if provided, an extra operation will\n                be performed on the output of the last (smallest resolution)\n                FPN output, and the result will extend the result list\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inner_blocks", "=", "[", "]", "\n", "self", ".", "layer_blocks", "=", "[", "]", "\n", "for", "idx", ",", "in_channels", "in", "enumerate", "(", "in_channels_list", ",", "1", ")", ":", "\n", "            ", "inner_block", "=", "\"fpn_inner{}\"", ".", "format", "(", "idx", ")", "\n", "layer_block", "=", "\"fpn_layer{}\"", ".", "format", "(", "idx", ")", "\n", "\n", "if", "in_channels", "==", "0", ":", "\n", "                ", "continue", "\n", "", "inner_block_module", "=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "1", ")", "\n", "layer_block_module", "=", "conv_block", "(", "out_channels", ",", "out_channels", ",", "3", ",", "1", ")", "\n", "self", ".", "add_module", "(", "inner_block", ",", "inner_block_module", ")", "\n", "self", ".", "add_module", "(", "layer_block", ",", "layer_block_module", ")", "\n", "self", ".", "inner_blocks", ".", "append", "(", "inner_block", ")", "\n", "self", ".", "layer_blocks", ".", "append", "(", "layer_block", ")", "\n", "", "self", ".", "top_blocks", "=", "top_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.FPN.forward": [[108, 136], ["zip", "isinstance", "tuple", "getattr", "torch.interpolate", "results.insert", "fpn.FPN.top_blocks", "results.extend", "isinstance", "getattr", "getattr", "fpn.FPN.top_blocks", "results.extend", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            x (list[Tensor]): feature maps for each feature level.\n        Returns:\n            results (tuple[Tensor]): feature maps after FPN layers.\n                They are ordered from highest resolution first.\n        \"\"\"", "\n", "last_inner", "=", "getattr", "(", "self", ",", "self", ".", "inner_blocks", "[", "-", "1", "]", ")", "(", "x", "[", "-", "1", "]", ")", "\n", "results", "=", "[", "getattr", "(", "self", ",", "self", ".", "layer_blocks", "[", "-", "1", "]", ")", "(", "last_inner", ")", "]", "\n", "for", "feature", ",", "inner_block", ",", "layer_block", "in", "zip", "(", "\n", "x", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "inner_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ",", "self", ".", "layer_blocks", "[", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", "\n", ")", ":", "\n", "            ", "if", "not", "inner_block", ":", "\n", "                ", "continue", "\n", "", "inner_top_down", "=", "F", ".", "interpolate", "(", "last_inner", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "inner_lateral", "=", "getattr", "(", "self", ",", "inner_block", ")", "(", "feature", ")", "\n", "last_inner", "=", "inner_lateral", "+", "inner_top_down", "\n", "results", ".", "insert", "(", "0", ",", "getattr", "(", "self", ",", "layer_block", ")", "(", "last_inner", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelP6P7", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "x", "[", "-", "1", "]", ",", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "top_blocks", ",", "LastLevelMaxPool", ")", ":", "\n", "            ", "last_results", "=", "self", ".", "top_blocks", "(", "results", "[", "-", "1", "]", ")", "\n", "results", ".", "extend", "(", "last_results", ")", "\n", "\n", "", "return", "tuple", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.LastLevelMaxPool.forward": [[139, 141], ["torch.max_pool2d"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "F", ".", "max_pool2d", "(", "x", ",", "1", ",", "2", ",", "0", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.LastLevelP6P7.__init__": [[148, 156], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LastLevelP6P7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p6", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "p7", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "2", ",", "1", ")", "\n", "for", "module", "in", "[", "self", ".", "p6", ",", "self", ".", "p7", "]", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "module", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "self", ".", "use_P5", "=", "in_channels", "==", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.LastLevelP6P7.forward": [[157, 162], ["fpn.LastLevelP6P7.p6", "fpn.LastLevelP6P7.p7", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "c5", ",", "p5", ")", ":", "\n", "        ", "x", "=", "p5", "if", "self", ".", "use_P5", "else", "c5", "\n", "p6", "=", "self", ".", "p6", "(", "x", ")", "\n", "p7", "=", "self", ".", "p7", "(", "F", ".", "relu", "(", "p6", ")", ")", "\n", "return", "[", "p6", ",", "p7", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.conv_with_kaiming_uniform": [[6, 34], ["torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "module.append", "len", "torch.nn.Sequential", "torch.nn.ReLU"], "function", ["None"], ["def", "conv_with_kaiming_uniform", "(", "use_gn", "=", "False", ",", "use_relu", "=", "False", ")", ":", "\n", "    ", "def", "make_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", "if", "use_gn", "else", "True", "\n", ")", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "1", ")", "\n", "if", "not", "use_gn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "", "module", "=", "[", "conv", ",", "]", "\n", "if", "use_gn", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "use_relu", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n", "", "return", "make_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.fpn.convbn_with_kaiming_uniform": [[36, 61], ["torch.nn.Conv2d", "torch.nn.init.kaiming_uniform_", "torch.nn.init.constant_", "torch.nn.BatchNorm2d", "module.append", "len", "torch.nn.Sequential", "torch.nn.ReLU"], "function", ["None"], ["", "def", "convbn_with_kaiming_uniform", "(", "use_relu", "=", "False", ")", ":", "\n", "    ", "def", "make_conv", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "dilation", "=", "1", "\n", ")", ":", "\n", "        ", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "*", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "True", "\n", ")", "\n", "# Caffe2 implementation uses XavierFill, which in fact", "\n", "# corresponds to kaiming_uniform_ in PyTorch", "\n", "nn", ".", "init", ".", "kaiming_uniform_", "(", "conv", ".", "weight", ",", "a", "=", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "module", "=", "[", "conv", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "]", "\n", "if", "use_relu", ":", "\n", "            ", "module", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "if", "len", "(", "module", ")", ">", "1", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "*", "module", ")", "\n", "", "return", "conv", "\n", "\n", "", "return", "make_conv", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.SEBlock.__init__": [[10, 18], ["torch.Module.__init__", "simplecv.module.GlobalAvgPool2D", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "reduction_ratio", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gap", "=", "GlobalAvgPool2D", "(", ")", "\n", "self", ".", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", "//", "reduction_ratio", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "in_channels", "//", "reduction_ratio", ",", "in_channels", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.SEBlock.forward": [[20, 25], ["se_block.SEBlock.gap", "se_block.SEBlock.seq", "se_block.SEBlock.view", "se_block.SEBlock.view", "se_block.SEBlock.size", "se_block.SEBlock.size", "se_block.SEBlock.size", "se_block.SEBlock.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "v", "=", "self", ".", "gap", "(", "x", ")", "\n", "score", "=", "self", ".", "seq", "(", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "v", ".", "size", "(", "1", ")", ")", ")", "\n", "y", "=", "x", "*", "score", ".", "view", "(", "score", ".", "size", "(", "0", ")", ",", "score", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.BasicBlock.__init__": [[41, 51], ["torch.Module.__init__", "se_block.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "se_block.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "se_block.SEBlock"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ratio", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "se", "=", "SEBlock", "(", "planes", "*", "self", ".", "expansion", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.BasicBlock.forward": [[52, 69], ["se_block.BasicBlock.conv1", "se_block.BasicBlock.bn1", "se_block.BasicBlock.relu", "se_block.BasicBlock.conv2", "se_block.BasicBlock.bn2", "se_block.BasicBlock.se", "se_block.BasicBlock.relu", "se_block.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.Bottleneck.__init__": [[74, 86], ["torch.Module.__init__", "se_block.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "se_block.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "se_block.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "se_block.SEBlock"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ratio", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "se", "=", "SEBlock", "(", "planes", "*", "self", ".", "expansion", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.Bottleneck.forward": [[87, 108], ["se_block.Bottleneck.conv1", "se_block.Bottleneck.bn1", "se_block.Bottleneck.relu", "se_block.Bottleneck.conv2", "se_block.Bottleneck.bn2", "se_block.Bottleneck.relu", "se_block.Bottleneck.conv3", "se_block.Bottleneck.bn3", "se_block.Bottleneck.se", "se_block.Bottleneck.relu", "se_block.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.conv3x3": [[27, 31], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.conv1x1": [[33, 36], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.plugin_to_basicblock": [[110, 139], ["module.named_children", "classname.find", "se_block.BasicBlock", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "BasicBlock.add_module", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "se_block.plugin_to_basicblock", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias"], ["", "", "def", "plugin_to_basicblock", "(", "module", ":", "nn", ".", "Module", ",", "ratio", ")", ":", "\n", "    ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'BasicBlock'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "BasicBlock", "(", "module", ".", "conv1", ".", "in_channels", ",", "\n", "module", ".", "conv1", ".", "out_channels", ",", "\n", "ratio", "=", "ratio", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "downsample", "=", "module", ".", "downsample", ")", "\n", "# conv1 bn1", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv1", ",", "module_output", ".", "conv1", ")", "\n", "if", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "# conv2 bn2", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv2", ",", "module_output", ".", "conv2", ")", "\n", "if", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "plugin_to_basicblock", "(", "sub_module", ",", "ratio", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.plugin_to_bottleneck": [[141, 194], ["module.named_children", "classname.find", "se_block.Bottleneck", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "Bottleneck.add_module", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "se_block.plugin_to_bottleneck", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.se_block.plugin_to_bottleneck", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias"], ["", "def", "plugin_to_bottleneck", "(", "module", ":", "nn", ".", "Module", ",", "ratio", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        module: (nn.Module): containing module\n        ratio: (float) reduction ratio\n\n    Returns:\n        The original module with the converted `context_block.Bottleneck` layer\n\n    Example::\n\n            >>> # r16 ct c3-c5\n            >>> from simplecv.module import ResNetEncoder\n            >>> m = ResNetEncoder({})\n            >>> m.resnet.layer2 = plugin_to_bottleneck(m.resnet.layer2, 1 / 16.)\n            >>> m.resnet.layer3 = plugin_to_bottleneck(m.resnet.layer3, 1 / 16.)\n            >>> m.resnet.layer4 = plugin_to_bottleneck(m.resnet.layer4, 1 / 16.)\n    \"\"\"", "\n", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'Bottleneck'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "Bottleneck", "(", "module", ".", "conv1", ".", "in_channels", ",", "\n", "module", ".", "conv1", ".", "out_channels", ",", "\n", "ratio", "=", "ratio", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "downsample", "=", "module", ".", "downsample", ")", "\n", "# conv1 bn1", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv1", ",", "module_output", ".", "conv1", ")", "\n", "if", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "# conv2 bn2", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv2", ",", "module_output", ".", "conv2", ")", "\n", "if", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "# conv3 bn3", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv3", ",", "module_output", ".", "conv3", ")", "\n", "if", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "plugin_to_bottleneck", "(", "sub_module", ",", "ratio", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceLoss.__init__": [[25, 29], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "smooth", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceLoss._dice_coeff": [[30, 42], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.sum", "target.sum"], "methods", ["None"], ["", "def", "_dice_coeff", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred: [N, 1] within [0, 1]\n            target: [N, 1]\n        Returns:\n        \"\"\"", "\n", "\n", "smooth", "=", "self", ".", "smooth", "\n", "inter", "=", "torch", ".", "sum", "(", "pred", "*", "target", ")", "\n", "z", "=", "pred", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "smooth", "\n", "return", "(", "2", "*", "inter", "+", "smooth", ")", "/", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceLoss.forward": [[43, 45], ["loss.DiceLoss._dice_coeff"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceWithLogitsLoss._dice_coeff"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "return", "1.", "-", "self", ".", "_dice_coeff", "(", "pred", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceWithLogitsLoss.__init__": [[48, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "smooth", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "DiceWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceWithLogitsLoss._dice_coeff": [[53, 66], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred.sum", "target.sum"], "methods", ["None"], ["", "def", "_dice_coeff", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pred: [N, 1] within [0, 1]\n            target: [N, 1]\n        Returns:\n        \"\"\"", "\n", "\n", "smooth", "=", "self", ".", "smooth", "\n", "inter", "=", "torch", ".", "sum", "(", "pred", "*", "target", ")", "\n", "\n", "z", "=", "pred", ".", "sum", "(", ")", "+", "target", ".", "sum", "(", ")", "+", "smooth", "\n", "return", "(", "2", "*", "inter", "+", "smooth", ")", "/", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceWithLogitsLoss.forward": [[67, 70], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "loss.DiceWithLogitsLoss._dice_coeff"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.DiceWithLogitsLoss._dice_coeff"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "pred_score", "=", "torch", ".", "sigmoid", "(", "pred", ")", "\n", "return", "1.", "-", "self", ".", "_dice_coeff", "(", "pred_score", ",", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.dice_coeff": [[8, 12], ["torch.sum", "torch.sum", "y_pred.sum", "y_true.sum"], "function", ["None"], ["def", "dice_coeff", "(", "y_pred", ",", "y_true", ",", "smooth_value", "=", "1.0", ")", ":", "\n", "    ", "inter", "=", "torch", ".", "sum", "(", "y_pred", "*", "y_true", ")", "\n", "z", "=", "y_pred", ".", "sum", "(", ")", "+", "y_true", ".", "sum", "(", ")", "+", "smooth_value", "\n", "return", "(", "2", "*", "inter", "+", "smooth_value", ")", "/", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.dice_loss_with_logits": [[14, 22], ["y_pred.masked_select().float.view", "y_true.masked_select().float.view", "y_true.masked_select().float.masked_select().float", "y_pred.masked_select().float.masked_select().float", "loss.dice_coeff", "y_true.masked_select().float.masked_select", "y_pred.masked_select().float.masked_select", "y_pred.masked_select().float.sigmoid"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.loss.dice_coeff"], ["", "def", "dice_loss_with_logits", "(", "y_pred", ":", "torch", ".", "Tensor", ",", "y_true", ":", "torch", ".", "Tensor", ",", "smooth_value", "=", "1.0", ",", "ignore_index", "=", "255", ")", ":", "\n", "    ", "y_pred", "=", "y_pred", ".", "view", "(", "-", "1", ")", "\n", "y_true", "=", "y_true", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "y_true", "==", "ignore_index", "\n", "valid", "=", "~", "mask", "\n", "y_true", "=", "y_true", ".", "masked_select", "(", "valid", ")", ".", "float", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "masked_select", "(", "valid", ")", ".", "float", "(", ")", "\n", "return", "1.", "-", "dice_coeff", "(", "y_pred", ".", "sigmoid", "(", ")", ",", "y_true", ",", "smooth_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.__init__": [[52, 74], ["simplecv.interface.CVModule.__init__", "all", "_logger.info", "resnet.ResNetEncoder.resnet._modules.pop", "resnet.ResNetEncoder._freeze_at", "ValueError", "resnet.ResNetEncoder._frozen_res_bn", "resnet.ResNetEncoder.resnet.layer4.apply", "functools.partial", "resnet.ResNetEncoder.resnet.layer3.apply", "resnet.ResNetEncoder.resnet.layer4.apply", "functools.partial", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._freeze_at", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._frozen_res_bn", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ")", ":", "\n", "        ", "super", "(", "ResNetEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "if", "all", "(", "[", "self", ".", "config", ".", "output_stride", "!=", "16", ",", "\n", "self", ".", "config", ".", "output_stride", "!=", "32", ",", "\n", "self", ".", "config", ".", "output_stride", "!=", "8", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'output_stride must be 8, 16 or 32.'", ")", "\n", "\n", "", "self", ".", "resnet", "=", "registry", ".", "MODEL", "[", "self", ".", "config", ".", "resnet_type", "]", "(", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "\n", "norm_layer", "=", "self", ".", "config", ".", "norm_layer", ")", "\n", "_logger", ".", "info", "(", "'ResNetEncoder: pretrained = {}'", ".", "format", "(", "self", ".", "config", ".", "pretrained", ")", ")", "\n", "self", ".", "resnet", ".", "_modules", ".", "pop", "(", "'fc'", ")", "\n", "if", "not", "self", ".", "config", ".", "batchnorm_trainable", ":", "\n", "            ", "self", ".", "_frozen_res_bn", "(", ")", "\n", "\n", "", "self", ".", "_freeze_at", "(", "at", "=", "self", ".", "config", ".", "freeze_at", ")", "\n", "\n", "if", "self", ".", "config", ".", "output_stride", "==", "16", ":", "\n", "            ", "self", ".", "resnet", ".", "layer4", ".", "apply", "(", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "", "elif", "self", ".", "config", ".", "output_stride", "==", "8", ":", "\n", "            ", "self", ".", "resnet", ".", "layer3", ".", "apply", "(", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "2", ")", ")", "\n", "self", ".", "resnet", ".", "layer4", ".", "apply", "(", "partial", "(", "self", ".", "_nostride_dilate", ",", "dilate", "=", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer1": [[79, 83], ["None"], "methods", ["None"], ["", "@", "layer1", ".", "setter", "\n", "def", "layer1", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "resnet", ".", "layer1", "\n", "self", ".", "resnet", ".", "layer1", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer2": [[88, 92], ["None"], "methods", ["None"], ["", "@", "layer2", ".", "setter", "\n", "def", "layer2", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "resnet", ".", "layer2", "\n", "self", ".", "resnet", ".", "layer2", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer3": [[97, 101], ["None"], "methods", ["None"], ["", "@", "layer3", ".", "setter", "\n", "def", "layer3", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "resnet", ".", "layer3", "\n", "self", ".", "resnet", ".", "layer3", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer4": [[106, 110], ["None"], "methods", ["None"], ["", "@", "layer4", ".", "setter", "\n", "def", "layer4", "(", "self", ",", "value", ")", ":", "\n", "        ", "del", "self", ".", "resnet", ".", "layer4", "\n", "self", ".", "resnet", ".", "layer4", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._frozen_res_bn": [[111, 117], ["_logger.info", "simplecv.util.param_util.freeze_modules", "resnet.ResNetEncoder.resnet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_modules"], ["", "def", "_frozen_res_bn", "(", "self", ")", ":", "\n", "        ", "_logger", ".", "info", "(", "'ResNetEncoder: freeze all BN layers'", ")", "\n", "param_util", ".", "freeze_modules", "(", "self", ".", "resnet", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", "\n", "for", "m", "in", "self", ".", "resnet", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._freeze_at": [[118, 130], ["simplecv.util.param_util.freeze_params", "simplecv.util.param_util.freeze_params", "simplecv.util.param_util.freeze_params", "simplecv.util.param_util.freeze_params", "simplecv.util.param_util.freeze_params", "simplecv.util.param_util.freeze_params"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params"], ["", "", "", "def", "_freeze_at", "(", "self", ",", "at", "=", "2", ")", ":", "\n", "        ", "if", "at", ">=", "1", ":", "\n", "            ", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "conv1", ")", "\n", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "bn1", ")", "\n", "", "if", "at", ">=", "2", ":", "\n", "            ", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "layer1", ")", "\n", "", "if", "at", ">=", "3", ":", "\n", "            ", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "layer2", ")", "\n", "", "if", "at", ">=", "4", ":", "\n", "            ", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "layer3", ")", "\n", "", "if", "at", ">=", "5", ":", "\n", "            ", "param_util", ".", "freeze_params", "(", "self", ".", "resnet", ".", "layer4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.get_function": [[131, 138], ["module"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_function", "(", "module", ")", ":", "\n", "        ", "def", "_function", "(", "x", ")", ":", "\n", "            ", "y", "=", "module", "(", "x", ")", "\n", "return", "y", "\n", "\n", "", "return", "_function", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.forward": [[139, 170], ["resnet.ResNetEncoder.resnet.conv1", "resnet.ResNetEncoder.resnet.bn1", "resnet.ResNetEncoder.resnet.relu", "resnet.ResNetEncoder.resnet.maxpool", "torch.utils.checkpoint.checkpoint", "resnet.ResNetEncoder.resnet.layer1", "torch.utils.checkpoint.checkpoint", "resnet.ResNetEncoder.resnet.layer2", "torch.utils.checkpoint.checkpoint", "resnet.ResNetEncoder.resnet.layer3", "resnet.ResNetEncoder.get_function", "resnet.ResNetEncoder.get_function", "resnet.ResNetEncoder.get_function", "torch.utils.checkpoint.checkpoint", "resnet.ResNetEncoder.resnet.layer4", "resnet.ResNetEncoder.get_function"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer2", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.get_function", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.get_function", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.get_function", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer4", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.get_function"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "x", "=", "self", ".", "resnet", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "resnet", ".", "maxpool", "(", "x", ")", "\n", "\n", "# os 4, #layers/outdim: 18,34/64; 50,101,152/256", "\n", "if", "self", ".", "config", ".", "with_cp", "[", "0", "]", "and", "x", ".", "requires_grad", ":", "\n", "            ", "c2", "=", "cp", ".", "checkpoint", "(", "self", ".", "get_function", "(", "self", ".", "resnet", ".", "layer1", ")", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "c2", "=", "self", ".", "resnet", ".", "layer1", "(", "x", ")", "\n", "# os 8, #layers/outdim: 18,34/128; 50,101,152/512", "\n", "", "if", "self", ".", "config", ".", "with_cp", "[", "1", "]", "and", "c2", ".", "requires_grad", ":", "\n", "            ", "c3", "=", "cp", ".", "checkpoint", "(", "self", ".", "get_function", "(", "self", ".", "resnet", ".", "layer2", ")", ",", "c2", ")", "\n", "", "else", ":", "\n", "            ", "c3", "=", "self", ".", "resnet", ".", "layer2", "(", "c2", ")", "\n", "# os 16, #layers/outdim: 18,34/256; 50,101,152/1024", "\n", "", "if", "self", ".", "config", ".", "with_cp", "[", "2", "]", "and", "c3", ".", "requires_grad", ":", "\n", "            ", "c4", "=", "cp", ".", "checkpoint", "(", "self", ".", "get_function", "(", "self", ".", "resnet", ".", "layer3", ")", ",", "c3", ")", "\n", "", "else", ":", "\n", "            ", "c4", "=", "self", ".", "resnet", ".", "layer3", "(", "c3", ")", "\n", "# os 32, #layers/outdim: 18,34/512; 50,101,152/2048", "\n", "", "if", "self", ".", "config", ".", "include_conv5", ":", "\n", "            ", "if", "self", ".", "config", ".", "with_cp", "[", "3", "]", "and", "c4", ".", "requires_grad", ":", "\n", "                ", "c5", "=", "cp", ".", "checkpoint", "(", "self", ".", "get_function", "(", "self", ".", "resnet", ".", "layer4", ")", ",", "c4", ")", "\n", "", "else", ":", "\n", "                ", "c5", "=", "self", ".", "resnet", ".", "layer4", "(", "c4", ")", "\n", "", "return", "[", "c2", ",", "c3", ",", "c4", ",", "c5", "]", "\n", "\n", "", "return", "[", "c2", ",", "c3", ",", "c4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.set_defalut_config": [[171, 182], ["resnet.ResNetEncoder.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "resnet_type", "=", "'resnet50'", ",", "\n", "include_conv5", "=", "True", ",", "\n", "batchnorm_trainable", "=", "True", ",", "\n", "pretrained", "=", "False", ",", "\n", "freeze_at", "=", "0", ",", "\n", "# 16 or 32", "\n", "output_stride", "=", "32", ",", "\n", "with_cp", "=", "(", "False", ",", "False", ",", "False", ",", "False", ")", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.train": [[184, 192], ["super().train", "resnet.ResNetEncoder._freeze_at", "resnet.ResNetEncoder.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._freeze_at"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNetEncoder", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_at", "(", "self", ".", "config", ".", "freeze_at", ")", "\n", "if", "mode", "and", "not", "self", ".", "config", ".", "batchnorm_trainable", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder._nostride_dilate": [[193, 209], ["classname.find"], "methods", ["None"], ["", "", "", "", "def", "_nostride_dilate", "(", "self", ",", "m", ",", "dilate", ")", ":", "\n", "# ref:", "\n", "# https://github.com/CSAILVision/semantic-segmentation-pytorch/blob/1235deb1d68a8f3ef87d639b95b2b8e3607eea4c/models/models.py#L256", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "# the convolution with stride", "\n", "            ", "if", "m", ".", "stride", "==", "(", "2", ",", "2", ")", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "m", ".", "padding", "=", "(", "dilate", "//", "2", ",", "dilate", "//", "2", ")", "\n", "# other convoluions", "\n", "", "", "else", ":", "\n", "                ", "if", "m", ".", "kernel_size", "==", "(", "3", ",", "3", ")", ":", "\n", "                    ", "m", ".", "dilation", "=", "(", "dilate", ",", "dilate", ")", "\n", "m", ".", "padding", "=", "(", "dilate", ",", "dilate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.make_layer": [[32, 48], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "in_channel", ",", "basic_out_channel", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "in_channel", "!=", "basic_out_channel", "*", "block", ".", "expansion", ":", "\n", "        ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "basic_out_channel", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "basic_out_channel", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "in_channel", ",", "basic_out_channel", ",", "stride", ",", "dilation", ",", "downsample", ")", ")", "\n", "in_channel", "=", "basic_out_channel", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", "in_channel", ",", "basic_out_channel", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.plugin_context_block2d": [[211, 262], ["module.named_children", "classname.find", "simplecv.module.context_block.Bottleneck", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "context_block.Bottleneck.add_module", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "resnet.plugin_context_block2d", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.plugin_context_block2d", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias"], ["", "", "", "", "", "def", "plugin_context_block2d", "(", "module", ":", "nn", ".", "Module", ",", "ratio", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        module: (nn.Module): containing module\n        ratio: (float) reduction ratio\n\n    Returns:\n        The original module with the converted `context_block.Bottleneck` layer\n\n    Example::\n\n            >>> # r16 ct c3-c5\n            >>> m = ResNetEncoder({})\n            >>> m.resnet.layer2 = plugin_context_block2d(m.resnet.layer2, 1 / 16.)\n            >>> m.resnet.layer3 = plugin_context_block2d(m.resnet.layer3, 1 / 16.)\n            >>> m.resnet.layer4 = plugin_context_block2d(m.resnet.layer4, 1 / 16.)\n    \"\"\"", "\n", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'Bottleneck'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "context_block", ".", "Bottleneck", "(", "module", ".", "conv1", ".", "in_channels", ",", "\n", "module", ".", "conv1", ".", "out_channels", ",", "\n", "ratio", "=", "ratio", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "downsample", "=", "module", ".", "downsample", ")", "\n", "# conv1 bn1", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv1", ",", "module_output", ".", "conv1", ")", "\n", "if", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "# conv2 bn2", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv2", ",", "module_output", ".", "conv2", ")", "\n", "if", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "# conv3 bn3", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv3", ",", "module_output", ".", "conv3", ")", "\n", "if", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "plugin_context_block2d", "(", "sub_module", ",", "ratio", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.model_builder.make_model": [[4, 11], ["ValueError"], "function", ["None"], ["def", "make_model", "(", "config", ")", ":", "\n", "    ", "model_type", "=", "config", "[", "'type'", "]", "\n", "if", "model_type", "in", "registry", ".", "MODEL", ":", "\n", "        ", "model", "=", "registry", ".", "MODEL", "[", "model_type", "]", "(", "config", "[", "'params'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'{} is not support now.'", ".", "format", "(", "model_type", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.densenet.DenseNetEncoder.__init__": [[20, 28], ["simplecv.interface.CVModule.__init__", "_logger.info", "_logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DenseNetEncoder", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "densenet", "=", "registry", ".", "MODEL", "[", "self", ".", "config", ".", "densenet_type", "]", "(", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "\n", "memory_efficient", "=", "self", ".", "config", ".", "memory_efficient", ")", "\n", "\n", "_logger", ".", "info", "(", "'DenseNetEncoder: pretrained = {}'", ".", "format", "(", "self", ".", "config", ".", "pretrained", ")", ")", "\n", "_logger", ".", "info", "(", "'DenseNetEncoder: memory_efficient = {}'", ".", "format", "(", "self", ".", "config", ".", "memory_efficient", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.densenet.DenseNetEncoder.layers": [[29, 34], ["getattr", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "layers", "(", "self", ",", "inds", "=", "(", "1", ",", "2", ",", "3", ",", "4", ")", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "inds", ",", "tuple", ")", "and", "not", "isinstance", "(", "inds", ",", "list", ")", ":", "\n", "            ", "inds", "=", "(", "inds", ",", ")", "\n", "\n", "", "return", "[", "getattr", "(", "self", ".", "densenet", ".", "features", ",", "'denseblock{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.densenet.DenseNetEncoder.forward": [[35, 40], ["densenet.DenseNetEncoder.densenet.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "feat_list", "=", "[", "]", "\n", "self", ".", "densenet", ".", "features", "(", "inputs", ",", "feat_list", ")", "\n", "\n", "return", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.densenet.DenseNetEncoder.set_defalut_config": [[41, 46], ["densenet.DenseNetEncoder.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "densenet_type", "=", "'densenet121'", ",", "\n", "pretrained", "=", "True", ",", "\n", "memory_efficient", "=", "False", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.densenet.DenseNetEncoder.out_channels": [[48, 59], ["ValueError"], "methods", ["None"], ["", "def", "out_channels", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "densenet_type", "==", "'densenet121'", ":", "\n", "            ", "return", "(", "256", ",", "512", ",", "1024", ",", "1024", ")", "\n", "", "elif", "self", ".", "config", ".", "densenet_type", "==", "'densenet161'", ":", "\n", "            ", "return", "(", "384", ",", "768", ",", "2112", ",", "2208", ")", "\n", "", "elif", "self", ".", "config", ".", "densenet_type", "==", "'densenet201'", ":", "\n", "            ", "return", "(", "256", ",", "512", ",", "1792", ",", "1920", ")", "\n", "", "elif", "self", ".", "config", ".", "densenet_type", "==", "'densenet169'", ":", "\n", "            ", "return", "(", "256", ",", "512", ",", "1280", ",", "1664", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'do not support {}'", ".", "format", "(", "self", ".", "config", ".", "densenet_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.__init__": [[54, 95], ["torch.nn.Module.__init__", "all", "context_block.ContextBlock2d.reset_parameters", "len", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.ReLU", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inner_dim", ",", "pool", "=", "'att'", ",", "fusions", "=", "(", "'channel_add'", ",", ")", ")", ":", "\n", "        ", "\"\"\"\n        \n        Args:\n            in_channels: (int): Number of channels in the input image\n            inner_dim: (int): Number of channels produced by the convolution\n            pool: (str) pool type, `avg` or `att`\n            fusions: list(str) names of funsion op, `channel_add` and `channel_mul`\n        \"\"\"", "\n", "super", "(", "ContextBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "pool", "in", "[", "'avg'", ",", "'att'", "]", "\n", "assert", "all", "(", "[", "f", "in", "[", "'channel_add'", ",", "'channel_mul'", "]", "for", "f", "in", "fusions", "]", ")", "\n", "assert", "len", "(", "fusions", ")", ">", "0", ",", "'at least one fusion should be used'", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inner_dim", "=", "inner_dim", "\n", "self", ".", "pool", "=", "pool", "\n", "self", ".", "fusions", "=", "fusions", "\n", "if", "'att'", "in", "pool", ":", "\n", "            ", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "if", "'channel_add'", "in", "fusions", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "inner_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "inner_dim", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inner_dim", ",", "self", ".", "in_channels", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_add_conv", "=", "None", "\n", "", "if", "'channel_mul'", "in", "fusions", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "inner_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "self", ".", "inner_dim", ",", "1", ",", "1", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inner_dim", ",", "self", ".", "in_channels", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "channel_mul_conv", "=", "None", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.reset_parameters": [[96, 105], ["context_block.kaiming_init", "context_block.last_zero_init", "context_block.last_zero_init"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.kaiming_init", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.last_zero_init", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.last_zero_init"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "pool", "==", "'att'", ":", "\n", "            ", "kaiming_init", "(", "self", ".", "conv_mask", ",", "mode", "=", "'fan_in'", ")", "\n", "self", ".", "conv_mask", ".", "inited", "=", "True", "\n", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_add_conv", ")", "\n", "", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "            ", "last_zero_init", "(", "self", ".", "channel_mul_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.spatial_pool": [[106, 131], ["x.size", "input_x.unsqueeze.unsqueeze.view", "input_x.unsqueeze.unsqueeze.unsqueeze", "context_block.ContextBlock2d.conv_mask", "context_mask.unsqueeze.unsqueeze.view", "context_block.ContextBlock2d.softmax", "context_mask.unsqueeze.unsqueeze.unsqueeze", "torch.matmul", "context_block.ContextBlock2d.view", "context_block.ContextBlock2d.avg_pool"], "methods", ["None"], ["", "", "def", "spatial_pool", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "pool", "==", "'att'", ":", "\n", "            ", "input_x", "=", "x", "\n", "# [N, C, H * W]", "\n", "input_x", "=", "input_x", ".", "view", "(", "batch", ",", "channel", ",", "height", "*", "width", ")", "\n", "# [N, 1, C, H * W]", "\n", "input_x", "=", "input_x", ".", "unsqueeze", "(", "1", ")", "\n", "# [N, 1, H, W]", "\n", "context_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "context_mask", ".", "view", "(", "batch", ",", "1", ",", "height", "*", "width", ")", "\n", "# [N, 1, H * W]", "\n", "context_mask", "=", "self", ".", "softmax", "(", "context_mask", ")", "\n", "# [N, 1, H * W, 1]", "\n", "context_mask", "=", "context_mask", ".", "unsqueeze", "(", "3", ")", "\n", "# [N, 1, C, 1]", "\n", "context", "=", "torch", ".", "matmul", "(", "input_x", ",", "context_mask", ")", "\n", "# [N, C, 1, 1]", "\n", "context", "=", "context", ".", "view", "(", "batch", ",", "channel", ",", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "context", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.forward": [[132, 148], ["context_block.ContextBlock2d.spatial_pool", "torch.sigmoid", "context_block.ContextBlock2d.channel_add_conv", "context_block.ContextBlock2d.channel_mul_conv"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.ContextBlock2d.spatial_pool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, 1, 1]", "\n", "        ", "context", "=", "self", ".", "spatial_pool", "(", "x", ")", "\n", "\n", "if", "self", ".", "channel_mul_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_mul_term", "=", "torch", ".", "sigmoid", "(", "self", ".", "channel_mul_conv", "(", "context", ")", ")", "\n", "out", "=", "x", "*", "channel_mul_term", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "if", "self", ".", "channel_add_conv", "is", "not", "None", ":", "\n", "# [N, C, 1, 1]", "\n", "            ", "channel_add_term", "=", "self", ".", "channel_add_conv", "(", "context", ")", "\n", "out", "=", "out", "+", "channel_add_term", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.BasicBlock.__init__": [[153, 163], ["torch.nn.Module.__init__", "context_block.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "context_block.conv3x3", "torch.nn.BatchNorm2d", "context_block.ContextBlock2d", "int"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ratio", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "0.1", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "context_block", "=", "ContextBlock2d", "(", "planes", "*", "self", ".", "expansion", ",", "int", "(", "planes", "*", "self", ".", "expansion", "*", "ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.BasicBlock.forward": [[164, 181], ["context_block.BasicBlock.conv1", "context_block.BasicBlock.bn1", "context_block.BasicBlock.relu", "context_block.BasicBlock.conv2", "context_block.BasicBlock.bn2", "context_block.BasicBlock.context_block", "context_block.BasicBlock.relu", "context_block.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "context_block", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.Bottleneck.__init__": [[186, 198], ["torch.nn.Module.__init__", "context_block.conv1x1", "torch.nn.BatchNorm2d", "context_block.conv3x3", "torch.nn.BatchNorm2d", "context_block.conv1x1", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "context_block.ContextBlock2d", "int"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "ratio", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "context_block", "=", "ContextBlock2d", "(", "planes", "*", "self", ".", "expansion", ",", "int", "(", "planes", "*", "self", ".", "expansion", "*", "ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.Bottleneck.forward": [[199, 220], ["context_block.Bottleneck.conv1", "context_block.Bottleneck.bn1", "context_block.Bottleneck.relu", "context_block.Bottleneck.conv2", "context_block.Bottleneck.bn2", "context_block.Bottleneck.relu", "context_block.Bottleneck.conv3", "context_block.Bottleneck.bn3", "context_block.Bottleneck.context_block", "context_block.Bottleneck.relu", "context_block.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "context_block", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.conv3x3": [[9, 13], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.conv1x1": [[15, 18], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.constant_init": [[20, 24], ["torch.nn.init.constant_", "hasattr", "torch.nn.init.constant_"], "function", ["None"], ["", "def", "constant_init", "(", "module", ",", "val", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "val", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.kaiming_init": [[26, 41], ["torch.nn.init.kaiming_uniform_", "torch.nn.init.kaiming_normal_", "hasattr", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "module", ",", "\n", "a", "=", "0", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.last_zero_init": [[43, 50], ["isinstance", "context_block.constant_init", "context_block.constant_init"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.constant_init", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.constant_init"], ["", "", "def", "last_zero_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Sequential", ")", ":", "\n", "        ", "constant_init", "(", "m", "[", "-", "1", "]", ",", "val", "=", "0", ")", "\n", "m", "[", "-", "1", "]", ".", "inited", "=", "True", "\n", "", "else", ":", "\n", "        ", "constant_init", "(", "m", ",", "val", "=", "0", ")", "\n", "m", ".", "inited", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock": [[222, 251], ["module.named_children", "classname.find", "context_block.BasicBlock", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "BasicBlock.add_module", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "context_block.plugin_to_basicblock", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_basicblock", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias"], ["", "", "def", "plugin_to_basicblock", "(", "module", ":", "nn", ".", "Module", ",", "ratio", ")", ":", "\n", "    ", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'BasicBlock'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "BasicBlock", "(", "module", ".", "conv1", ".", "in_channels", ",", "\n", "module", ".", "conv1", ".", "out_channels", ",", "\n", "ratio", "=", "ratio", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "downsample", "=", "module", ".", "downsample", ")", "\n", "# conv1 bn1", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv1", ",", "module_output", ".", "conv1", ")", "\n", "if", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "# conv2 bn2", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv2", ",", "module_output", ".", "conv2", ")", "\n", "if", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "plugin_to_basicblock", "(", "sub_module", ",", "ratio", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_resnet": [[253, 306], ["module.named_children", "classname.find", "context_block.Bottleneck", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "simplecv.util.param_util.copy_conv_parameters", "isinstance", "Bottleneck.add_module", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "simplecv.util.param_util.copy_bn_parameters", "isinstance", "context_block.plugin_to_resnet", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias", "simplecv.util.param_util.copy_weight_bias"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.context_block.plugin_to_resnet", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias"], ["", "def", "plugin_to_resnet", "(", "module", ":", "nn", ".", "Module", ",", "ratio", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        module: (nn.Module): containing module\n        ratio: (float) reduction ratio\n\n    Returns:\n        The original module with the converted `context_block.Bottleneck` layer\n\n    Example::\n\n            >>> # r16 ct c3-c5\n            >>> from simplecv.module import ResNetEncoder\n            >>> m = ResNetEncoder({})\n            >>> m.resnet.layer2 = plugin_to_resnet(m.resnet.layer2, 1 / 16.)\n            >>> m.resnet.layer3 = plugin_to_resnet(m.resnet.layer3, 1 / 16.)\n            >>> m.resnet.layer4 = plugin_to_resnet(m.resnet.layer4, 1 / 16.)\n    \"\"\"", "\n", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'Bottleneck'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "Bottleneck", "(", "module", ".", "conv1", ".", "in_channels", ",", "\n", "module", ".", "conv1", ".", "out_channels", ",", "\n", "ratio", "=", "ratio", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "downsample", "=", "module", ".", "downsample", ")", "\n", "# conv1 bn1", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv1", ",", "module_output", ".", "conv1", ")", "\n", "if", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn1", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn1", ",", "module_output", ".", "bn1", ")", "\n", "# conv2 bn2", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv2", ",", "module_output", ".", "conv2", ")", "\n", "if", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn2", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn2", ",", "module_output", ".", "bn2", ")", "\n", "# conv3 bn3", "\n", "", "param_util", ".", "copy_conv_parameters", "(", "module", ".", "conv3", ",", "module_output", ".", "conv3", ")", "\n", "if", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_bn_parameters", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "", "elif", "isinstance", "(", "module", ".", "bn3", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "            ", "param_util", ".", "copy_weight_bias", "(", "module", ".", "bn3", ",", "module_output", ".", "bn3", ")", "\n", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "plugin_to_resnet", "(", "sub_module", ",", "ratio", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.gap.GlobalAvgPool2DBaseline.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2DBaseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.gap.GlobalAvgPool2DBaseline.forward": [[11, 16], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "x_pool.view().contiguous.view().contiguous.view().contiguous", "x.view", "x.size", "x.size", "x_pool.view().contiguous.view().contiguous.view", "x.size", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_pool", "=", "torch", ".", "mean", "(", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "*", "x", ".", "size", "(", "3", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "x_pool", "=", "x_pool", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "return", "x_pool", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.weight_standardize.Conv2D.__init__": [[8, 14], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "padding_mode", "=", "'zeros'", ")", ":", "\n", "        ", "super", "(", "Conv2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "groups", ",", "\n", "bias", ",", "padding_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.weight_standardize.Conv2D.forward": [[15, 30], ["weight.mean().mean().mean", "torch.conv2d", "torch.conv2d", "weight.view().std().view", "std.expand_as", "torch.conv2d", "torch.conv2d", "weight.mean().mean", "torch.pad", "torch.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "weight.view().std", "weight.mean", "weight.view", "weight.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "\n", "weight_mean", "=", "weight", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "2", ",", "\n", "keepdim", "=", "True", ")", ".", "mean", "(", "dim", "=", "3", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "weight", "-", "weight_mean", "\n", "std", "=", "weight", ".", "view", "(", "weight", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "+", "1e-5", "\n", "weight", "=", "weight", "/", "std", ".", "expand_as", "(", "weight", ")", "\n", "if", "self", ".", "padding_mode", "==", "'circular'", ":", "\n", "            ", "expanded_padding", "=", "(", "(", "self", ".", "padding", "[", "1", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "1", "]", "//", "2", ",", "\n", "(", "self", ".", "padding", "[", "0", "]", "+", "1", ")", "//", "2", ",", "self", ".", "padding", "[", "0", "]", "//", "2", ")", "\n", "return", "F", ".", "conv2d", "(", "F", ".", "pad", "(", "input", ",", "expanded_padding", ",", "mode", "=", "'circular'", ")", ",", "\n", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "", "return", "F", ".", "conv2d", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.weight_standardize.convert_conv2d_with_ws": [[32, 66], ["module.named_children", "classname.find", "weight_standardize.Conv2D", "simplecv.util.param_util.copy_conv_parameters", "Conv2D.add_module", "weight_standardize.convert_conv2d_with_ws"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.weight_standardize.convert_conv2d_with_ws"], ["", "", "def", "convert_conv2d_with_ws", "(", "module", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        module: (nn.Module): containing module\n    Returns:\n        The original Conv2D with the converted `Conv2D with WS` layer\n\n    Example::\n\n            >>> # r16 ct c3-c5\n            >>> from simplecv.module import ResNetEncoder\n            >>> m = ResNetEncoder({})\n            >>> m = convert_conv2d_with_ws(m)\n\n    \"\"\"", "\n", "classname", "=", "module", ".", "__class__", ".", "__name__", "\n", "module_output", "=", "module", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "module_output", "=", "Conv2D", "(", "module", ".", "in_channels", ",", "\n", "module", ".", "out_channels", ",", "\n", "module", ".", "kernel_size", ",", "\n", "module", ".", "stride", ",", "\n", "module", ".", "padding", ",", "module", ".", "dilation", ",", "module", ".", "groups", ",", "\n", "module", ".", "bias", "is", "not", "None", ",", "\n", "module", ".", "padding_mode", "\n", ")", "\n", "\n", "param_util", ".", "copy_conv_parameters", "(", "module", ",", "module_output", ")", "\n", "\n", "", "for", "name", ",", "sub_module", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "module_output", ".", "add_module", "(", "name", ",", "convert_conv2d_with_ws", "(", "sub_module", ")", ")", "\n", "", "del", "module", "\n", "return", "module_output", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.BasicBlock.__init__": [[33, 50], ["torch.Module.__init__", "_resnets.conv3x3", "norm_layer", "torch.ReLU", "_resnets.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.BasicBlock.forward": [[51, 68], ["_resnets.BasicBlock.conv1", "_resnets.BasicBlock.bn1", "_resnets.BasicBlock.relu", "_resnets.BasicBlock.conv2", "_resnets.BasicBlock.bn2", "_resnets.BasicBlock.relu", "_resnets.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.Bottleneck.__init__": [[73, 89], ["torch.Module.__init__", "_resnets.conv1x1", "norm_layer", "_resnets.conv3x3", "norm_layer", "_resnets.conv1x1", "norm_layer", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.Bottleneck.forward": [[90, 111], ["_resnets.Bottleneck.conv1", "_resnets.Bottleneck.bn1", "_resnets.Bottleneck.relu", "_resnets.Bottleneck.conv2", "_resnets.Bottleneck.bn2", "_resnets.Bottleneck.relu", "_resnets.Bottleneck.conv3", "_resnets.Bottleneck.bn3", "_resnets.Bottleneck.relu", "_resnets.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.ResNet.__init__": [[115, 165], ["torch.Module.__init__", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.MaxPool2d", "_resnets.ResNet._make_layer", "_resnets.ResNet._make_layer", "_resnets.ResNet._make_layer", "_resnets.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.Linear", "_resnets.ResNet.modules", "len", "ValueError", "isinstance", "_resnets.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.ResNet._make_layer": [[166, 189], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "_resnets.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.ResNet.forward": [[190, 206], ["_resnets.ResNet.conv1", "_resnets.ResNet.bn1", "_resnets.ResNet.relu", "_resnets.ResNet.maxpool", "_resnets.ResNet.layer1", "_resnets.ResNet.layer2", "_resnets.ResNet.layer3", "_resnets.ResNet.layer4", "_resnets.ResNet.avgpool", "_resnets.ResNet.reshape", "_resnets.ResNet.fc", "_resnets.ResNet.size"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer2", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer4"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.conv1x1": [[25, 28], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet": [[208, 217], ["_resnets.ResNet", "torch.utils.model_zoo.load_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "if", "'state_dict'", "in", "state_dict", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnet18": [[219, 227], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnet34": [[229, 237], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnet50": [[239, 247], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnet101": [[249, 257], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnet152": [[259, 267], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnext50_32x4d": [[269, 279], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-50 32x4d model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnext101_32x4d": [[281, 291], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnext101_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext101_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets.resnext101_32x8d": [[293, 303], ["_resnets._resnet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._resnets._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNeXt-101 32x8d model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.CollectibleSequential.forward": [[29, 36], ["_densenet.CollectibleSequential._modules.values", "module", "isinstance", "isinstance", "feat_collector.append"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "feat_collector", "=", "None", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "input", "=", "module", "(", "input", ")", "\n", "if", "isinstance", "(", "module", ",", "_DenseBlock", ")", ":", "\n", "                ", "if", "isinstance", "(", "feat_collector", ",", "list", ")", ":", "\n", "                    ", "feat_collector", ".", "append", "(", "input", ")", "\n", "", "", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._DenseLayer.__init__": [[39, 53], ["torch.Sequential.__init__", "_densenet._DenseLayer.add_module", "_densenet._DenseLayer.add_module", "_densenet._DenseLayer.add_module", "_densenet._DenseLayer.add_module", "_densenet._DenseLayer.add_module", "_densenet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ",", "memory_efficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "memory_efficient", "=", "memory_efficient", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._DenseLayer.forward": [[54, 65], ["_densenet._bn_function_factory", "_densenet._DenseLayer.conv2", "any", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "_bn_function_factory.", "_densenet._DenseLayer.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "_densenet._DenseLayer.norm2"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._bn_function_factory", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint"], ["", "def", "forward", "(", "self", ",", "*", "prev_features", ")", ":", "\n", "        ", "bn_function", "=", "_bn_function_factory", "(", "self", ".", "norm1", ",", "self", ".", "relu1", ",", "self", ".", "conv1", ")", "\n", "if", "self", ".", "memory_efficient", "and", "any", "(", "prev_feature", ".", "requires_grad", "for", "prev_feature", "in", "prev_features", ")", ":", "\n", "            ", "bottleneck_output", "=", "cp", ".", "checkpoint", "(", "bn_function", ",", "*", "prev_features", ")", "\n", "", "else", ":", "\n", "            ", "bottleneck_output", "=", "bn_function", "(", "*", "prev_features", ")", "\n", "", "new_features", "=", "self", ".", "conv2", "(", "self", ".", "relu2", "(", "self", ".", "norm2", "(", "bottleneck_output", ")", ")", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._DenseBlock.__init__": [[68, 79], ["torch.Module.__init__", "range", "_densenet._DenseLayer", "_densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ",", "memory_efficient", "=", "False", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "\n", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ",", "\n", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._DenseBlock.forward": [[80, 86], ["_densenet._DenseBlock.named_children", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer", "features.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "init_features", ")", ":", "\n", "        ", "features", "=", "[", "init_features", "]", "\n", "for", "name", ",", "layer", "in", "self", ".", "named_children", "(", ")", ":", "\n", "            ", "new_features", "=", "layer", "(", "*", "features", ")", "\n", "features", ".", "append", "(", "new_features", ")", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._Transition.__init__": [[89, 96], ["torch.Sequential.__init__", "_densenet._Transition.add_module", "_densenet._Transition.add_module", "_densenet._Transition.add_module", "_densenet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.DenseNet.__init__": [[111, 157], ["torch.Module.__init__", "_densenet.CollectibleSequential", "enumerate", "_densenet.DenseNet.modules", "collections.OrderedDict", "_densenet._DenseBlock", "_densenet.DenseNet.features.add_module", "isinstance", "_densenet._Transition", "_densenet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "memory_efficient", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "CollectibleSequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm2d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "memory_efficient", "=", "memory_efficient", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "# self.features.add_module('norm5', nn.BatchNorm2d(num_features))", "\n", "\n", "# Linear layer", "\n", "# self.classifier = nn.Linear(num_features, num_classes)", "\n", "\n", "# Official init from torch repo.", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.DenseNet.forward": [[158, 166], ["_densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "_densenet.DenseNet.classifier", "_densenet.DenseNet.size", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat_list", "=", "[", "]", "\n", "features", "=", "self", ".", "features", "(", "x", ",", "feat_list", ")", "\n", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._bn_function_factory": [[19, 26], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv", "relu", "norm"], "function", ["None"], ["def", "_bn_function_factory", "(", "norm", ",", "relu", ",", "conv", ")", ":", "\n", "    ", "def", "bn_function", "(", "*", "inputs", ")", ":", "\n", "        ", "concated_features", "=", "torch", ".", "cat", "(", "inputs", ",", "1", ")", "\n", "bottleneck_output", "=", "conv", "(", "relu", "(", "norm", "(", "concated_features", ")", ")", ")", "\n", "return", "bottleneck_output", "\n", "\n", "", "return", "bn_function", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._load_state_dict": [[168, 184], ["re.compile", "torch.utils.model_zoo.load_url", "list", "model.load_state_dict", "torch.utils.model_zoo.load_url.keys", "re.compile.match", "pattern.match.group", "pattern.match.group"], "function", ["None"], ["", "", "def", "_load_state_dict", "(", "model", ",", "model_url", ",", "progress", ")", ":", "\n", "# '.'s are no longer allowed in module names, but previous _DenseLayer", "\n", "# has keys 'norm.1', 'relu.1', 'conv.1', 'norm.2', 'relu.2', 'conv.2'.", "\n", "# They are also in the checkpoints in model_urls. This pattern is used", "\n", "# to find such keys.", "\n", "    ", "pattern", "=", "re", ".", "compile", "(", "\n", "r'^(.*denselayer\\d+\\.(?:norm|relu|conv))\\.((?:[12])\\.(?:weight|bias|running_mean|running_var))$'", ")", "\n", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_url", ",", "progress", "=", "progress", ")", "\n", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "res", "=", "pattern", ".", "match", "(", "key", ")", "\n", "if", "res", ":", "\n", "            ", "new_key", "=", "res", ".", "group", "(", "1", ")", "+", "res", ".", "group", "(", "2", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "key", "]", "\n", "del", "state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._densenet": [[186, 192], ["_densenet.DenseNet", "_densenet._load_state_dict"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._load_state_dict"], ["", "def", "_densenet", "(", "arch", ",", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "growth_rate", ",", "block_config", ",", "num_init_features", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "_load_state_dict", "(", "model", ",", "model_urls", "[", "arch", "]", ",", "progress", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.densenet121": [[194, 205], ["_densenet._densenet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._densenet"], ["", "def", "densenet121", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet121'", ",", "32", ",", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.densenet161": [[207, 218], ["_densenet._densenet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._densenet"], ["", "def", "densenet161", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet161'", ",", "48", ",", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "96", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.densenet169": [[220, 231], ["_densenet._densenet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._densenet"], ["", "def", "densenet169", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet169'", ",", "32", ",", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet.densenet201": [[233, 244], ["_densenet._densenet"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._densenet._densenet"], ["", "def", "densenet201", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n        memory_efficient (bool) - If True, uses checkpointing. Much more memory efficient,\n          but slower. Default: *False*. See `\"paper\" <https://arxiv.org/pdf/1707.06990.pdf>`_\n    \"\"\"", "\n", "return", "_densenet", "(", "'densenet201'", ",", "32", ",", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "64", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.BasicBlock.__init__": [[195, 204], ["torch.Module.__init__", "_hrnet.conv3x3", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "_hrnet.conv3x3", "BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.BasicBlock.forward": [[205, 222], ["_hrnet.BasicBlock.conv1", "_hrnet.BasicBlock.bn1", "_hrnet.BasicBlock.relu", "_hrnet.BasicBlock.conv2", "_hrnet.BasicBlock.bn2", "_hrnet.BasicBlock.relu", "_hrnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.Bottleneck.__init__": [[227, 241], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.Bottleneck.forward": [[242, 263], ["_hrnet.Bottleneck.conv1", "_hrnet.Bottleneck.bn1", "_hrnet.Bottleneck.relu", "_hrnet.Bottleneck.conv2", "_hrnet.Bottleneck.bn2", "_hrnet.Bottleneck.relu", "_hrnet.Bottleneck.conv3", "_hrnet.Bottleneck.bn3", "_hrnet.Bottleneck.relu", "_hrnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule.__init__": [[266, 282], ["torch.Module.__init__", "_hrnet.HighResolutionModule._check_branches", "_hrnet.HighResolutionModule._make_branches", "_hrnet.HighResolutionModule._make_fuse_layers", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._check_branches", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_branches", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_fuse_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "\n", "num_channels", ",", "fuse_method", ",", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_check_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_inchannels", ",", "num_channels", ")", "\n", "\n", "self", ".", "num_inchannels", "=", "num_inchannels", "\n", "self", ".", "fuse_method", "=", "fuse_method", "\n", "self", ".", "num_branches", "=", "num_branches", "\n", "\n", "self", ".", "multi_scale_output", "=", "multi_scale_output", "\n", "\n", "self", ".", "branches", "=", "self", ".", "_make_branches", "(", "\n", "num_branches", ",", "blocks", ",", "num_blocks", ",", "num_channels", ")", "\n", "self", ".", "fuse_layers", "=", "self", ".", "_make_fuse_layers", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._check_branches": [[283, 299], ["len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "len", "len"], "methods", ["None"], ["", "def", "_check_branches", "(", "self", ",", "num_branches", ",", "blocks", ",", "num_blocks", ",", "\n", "num_inchannels", ",", "num_channels", ")", ":", "\n", "        ", "if", "num_branches", "!=", "len", "(", "num_blocks", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_BLOCKS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_blocks", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_channels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_CHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_channels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n", "", "if", "num_branches", "!=", "len", "(", "num_inchannels", ")", ":", "\n", "            ", "error_msg", "=", "'NUM_BRANCHES({}) <> NUM_INCHANNELS({})'", ".", "format", "(", "\n", "num_branches", ",", "len", "(", "num_inchannels", ")", ")", "\n", "raise", "ValueError", "(", "error_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_one_branch": [[300, 323], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_one_branch", "(", "self", ",", "branch_index", ",", "block", ",", "num_blocks", ",", "num_channels", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "num_inchannels", "[", "branch_index", "]", "!=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "num_inchannels", "[", "branch_index", "]", "=", "num_channels", "[", "branch_index", "]", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", "[", "branch_index", "]", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "num_inchannels", "[", "branch_index", "]", ",", "\n", "num_channels", "[", "branch_index", "]", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_branches": [[324, 332], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "branches.append", "_hrnet.HighResolutionModule._make_one_branch"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_one_branch"], ["", "def", "_make_branches", "(", "self", ",", "num_branches", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ":", "\n", "        ", "branches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_branches", ")", ":", "\n", "            ", "branches", ".", "append", "(", "\n", "self", ".", "_make_one_branch", "(", "i", ",", "block", ",", "num_blocks", ",", "num_channels", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "branches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule._make_fuse_layers": [[333, 378], ["range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "fuse_layers.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "fuse_layer.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fuse_layer.append", "range", "fuse_layer.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv3x3s.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fuse_layers", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "num_branches", "=", "self", ".", "num_branches", "\n", "num_inchannels", "=", "self", ".", "num_inchannels", "\n", "fuse_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches", "if", "self", ".", "multi_scale_output", "else", "1", ")", ":", "\n", "            ", "fuse_layer", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_branches", ")", ":", "\n", "                ", "if", "j", ">", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_inchannels", "[", "i", "]", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_inchannels", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", "**", "(", "j", "-", "i", ")", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "elif", "j", "==", "i", ":", "\n", "                    ", "fuse_layer", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "conv3x3s", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "i", "-", "j", ")", ":", "\n", "                        ", "if", "k", "==", "i", "-", "j", "-", "1", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "i", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "momentum", "=", "BN_MOMENTUM", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "num_outchannels_conv3x3", "=", "num_inchannels", "[", "j", "]", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_inchannels", "[", "j", "]", ",", "\n", "num_outchannels_conv3x3", ",", "\n", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "num_outchannels_conv3x3", ",", "\n", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "False", ")", ")", ")", "\n", "", "", "fuse_layer", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "", "", "fuse_layers", ".", "append", "(", "nn", ".", "ModuleList", "(", "fuse_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "ModuleList", "(", "fuse_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule.get_num_inchannels": [[379, 381], ["None"], "methods", ["None"], ["", "def", "get_num_inchannels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule.forward": [[382, 403], ["range", "range", "len", "range", "x_fuse.append", "_hrnet.HighResolutionModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "num_branches", "==", "1", ":", "\n", "            ", "return", "[", "self", ".", "branches", "[", "0", "]", "(", "x", "[", "0", "]", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_branches", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "self", ".", "branches", "[", "i", "]", "(", "x", "[", "i", "]", ")", "\n", "\n", "", "x_fuse", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "fuse_layers", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "y", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "y", "=", "self", ".", "fuse_layers", "[", "i", "]", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_branches", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "y", "=", "y", "+", "x", "[", "j", "]", "\n", "", "else", ":", "\n", "                    ", "y", "=", "y", "+", "self", ".", "fuse_layers", "[", "i", "]", "[", "j", "]", "(", "x", "[", "j", "]", ")", "\n", "", "", "x_fuse", ".", "append", "(", "self", ".", "relu", "(", "y", ")", ")", "\n", "\n", "", "return", "x_fuse", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.__init__": [[413, 476], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "_hrnet.HighResolutionNet._make_layer", "_hrnet.HighResolutionNet._make_transition_layer", "_hrnet.HighResolutionNet._make_stage", "_hrnet.HighResolutionNet._make_transition_layer", "_hrnet.HighResolutionNet._make_stage", "_hrnet.HighResolutionNet._make_transition_layer", "_hrnet.HighResolutionNet._make_stage", "_hrnet.HighResolutionNet._frozen_stages", "range", "range", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_transition_layer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_stage", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._frozen_stages"], ["    ", "def", "__init__", "(", "self", ",", "\n", "extra", ",", "\n", "norm_eval", "=", "True", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "frozen_stages", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "# for", "\n", "self", ".", "extra", "=", "extra", "\n", "# stem network", "\n", "# stem net", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "64", ",", "momentum", "=", "BN_MOMENTUM", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# stage 1", "\n", "self", ".", "stage1_cfg", "=", "self", ".", "extra", "[", "'stage1'", "]", "\n", "num_channels", "=", "self", ".", "stage1_cfg", "[", "'num_channels'", "]", "[", "0", "]", "\n", "block_type", "=", "self", ".", "stage1_cfg", "[", "'block'", "]", "\n", "num_blocks", "=", "self", ".", "stage1_cfg", "[", "'num_blocks'", "]", "[", "0", "]", "\n", "\n", "block", "=", "blocks_dict", "[", "block_type", "]", "\n", "stage1_out_channels", "=", "num_channels", "*", "block", ".", "expansion", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_channels", ",", "num_blocks", ")", "\n", "\n", "# stage 2", "\n", "self", ".", "stage2_cfg", "=", "self", ".", "extra", "[", "'stage2'", "]", "\n", "num_channels", "=", "self", ".", "stage2_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage2_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition1", "=", "self", ".", "_make_transition_layer", "(", "[", "stage1_out_channels", "]", ",", "num_channels", ")", "\n", "# num_modules, num_branches, num_blocks, num_channels, block, fuse_method, num_inchannels", "\n", "self", ".", "stage2", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "self", ".", "stage2_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 3", "\n", "self", ".", "stage3_cfg", "=", "self", ".", "extra", "[", "'stage3'", "]", "\n", "num_channels", "=", "self", ".", "stage3_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage3_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition2", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage3", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "self", ".", "stage3_cfg", ",", "num_channels", ")", "\n", "\n", "# stage 4", "\n", "self", ".", "stage4_cfg", "=", "self", ".", "extra", "[", "'stage4'", "]", "\n", "num_channels", "=", "self", ".", "stage4_cfg", "[", "'num_channels'", "]", "\n", "block_type", "=", "self", ".", "stage4_cfg", "[", "'block'", "]", "\n", "\n", "block", "=", "blocks_dict", "[", "block_type", "]", "\n", "num_channels", "=", "[", "num_channels", "[", "i", "]", "*", "block", ".", "expansion", "for", "i", "in", "range", "(", "len", "(", "num_channels", ")", ")", "]", "\n", "self", ".", "transition3", "=", "self", ".", "_make_transition_layer", "(", "pre_stage_channels", ",", "num_channels", ")", "\n", "self", ".", "stage4", ",", "pre_stage_channels", "=", "self", ".", "_make_stage", "(", "self", ".", "stage4_cfg", ",", "num_channels", ")", "\n", "\n", "self", ".", "_frozen_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_transition_layer": [[477, 512], ["len", "len", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "transition_layers.append", "transition_layers.append", "transition_layers.append", "conv3x3s.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_transition_layer", "(", "\n", "self", ",", "num_channels_pre_layer", ",", "num_channels_cur_layer", ")", ":", "\n", "        ", "num_branches_cur", "=", "len", "(", "num_channels_cur_layer", ")", "\n", "num_branches_pre", "=", "len", "(", "num_channels_pre_layer", ")", "\n", "\n", "transition_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_branches_cur", ")", ":", "\n", "            ", "if", "i", "<", "num_branches_pre", ":", "\n", "                ", "if", "num_channels_cur_layer", "[", "i", "]", "!=", "num_channels_pre_layer", "[", "i", "]", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_channels_pre_layer", "[", "i", "]", ",", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "\n", "3", ",", "\n", "1", ",", "\n", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "\n", "num_channels_cur_layer", "[", "i", "]", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "transition_layers", ".", "append", "(", "None", ")", "\n", "", "", "else", ":", "\n", "                ", "conv3x3s", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", "-", "num_branches_pre", ")", ":", "\n", "                    ", "inchannels", "=", "num_channels_pre_layer", "[", "-", "1", "]", "\n", "outchannels", "=", "num_channels_cur_layer", "[", "i", "]", "if", "j", "==", "i", "-", "num_branches_pre", "else", "inchannels", "\n", "conv3x3s", ".", "append", "(", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "inchannels", ",", "outchannels", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "outchannels", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", "\n", "", "transition_layers", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "conv3x3s", ")", ")", "\n", "\n", "", "", "return", "nn", ".", "ModuleList", "(", "transition_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_layer": [[513, 529], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "momentum", "=", "BN_MOMENTUM", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._frozen_stages": [[530, 539], ["_hrnet.HighResolutionNet.layer1.parameters", "m.parameters"], "methods", ["None"], ["", "def", "_frozen_stages", "(", "self", ")", ":", "\n", "# frozen stage  1 or stem networks", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "m", "in", "[", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "conv2", ",", "self", ".", "bn2", "]", ":", "\n", "                ", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "if", "self", ".", "frozen_stages", "==", "1", ":", "\n", "            ", "for", "param", "in", "self", ".", "layer1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet._make_stage": [[540, 569], ["range", "modules.append", "modules[].get_num_inchannels", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "_hrnet.HighResolutionModule"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionModule.get_num_inchannels"], ["", "", "", "def", "_make_stage", "(", "self", ",", "layer_config", ",", "num_inchannels", ",", "\n", "multi_scale_output", "=", "True", ")", ":", "\n", "        ", "num_modules", "=", "layer_config", "[", "'num_modules'", "]", "\n", "num_branches", "=", "layer_config", "[", "'num_branches'", "]", "\n", "num_blocks", "=", "layer_config", "[", "'num_blocks'", "]", "\n", "num_channels", "=", "layer_config", "[", "'num_channels'", "]", "\n", "block", "=", "blocks_dict", "[", "layer_config", "[", "'block'", "]", "]", "\n", "fuse_method", "=", "layer_config", "[", "'fuse_method'", "]", "\n", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_modules", ")", ":", "\n", "# multi_scale_output is only used last module", "\n", "            ", "if", "not", "multi_scale_output", "and", "i", "==", "num_modules", "-", "1", ":", "\n", "                ", "reset_multi_scale_output", "=", "False", "\n", "", "else", ":", "\n", "                ", "reset_multi_scale_output", "=", "True", "\n", "\n", "", "modules", ".", "append", "(", "\n", "HighResolutionModule", "(", "num_branches", ",", "\n", "block", ",", "\n", "num_blocks", ",", "\n", "num_inchannels", ",", "\n", "num_channels", ",", "\n", "fuse_method", ",", "\n", "reset_multi_scale_output", ")", "\n", ")", "\n", "num_inchannels", "=", "modules", "[", "-", "1", "]", ".", "get_num_inchannels", "(", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", ",", "num_inchannels", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.forward": [[570, 605], ["_hrnet.HighResolutionNet.conv1", "_hrnet.HighResolutionNet.bn1", "_hrnet.HighResolutionNet.relu", "_hrnet.HighResolutionNet.conv2", "_hrnet.HighResolutionNet.bn2", "_hrnet.HighResolutionNet.relu", "_hrnet.HighResolutionNet.layer1", "range", "_hrnet.HighResolutionNet.stage2", "range", "_hrnet.HighResolutionNet.stage3", "range", "_hrnet.HighResolutionNet.stage4", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append", "x_list.append"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.resnet.ResNetEncoder.layer1", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage2", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage3", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.hrnet.HRNetEncoder.stage4"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# h, w = x.size(2), x.size(3)", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage2_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition1", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition1", "[", "i", "]", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "x", ")", "\n", "", "", "y_list", "=", "self", ".", "stage2", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage3_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition2", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition2", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage3", "(", "x_list", ")", "\n", "\n", "x_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stage4_cfg", "[", "'num_branches'", "]", ")", ":", "\n", "            ", "if", "self", ".", "transition3", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "x_list", ".", "append", "(", "self", ".", "transition3", "[", "i", "]", "(", "y_list", "[", "-", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "x_list", ".", "append", "(", "y_list", "[", "i", "]", ")", "\n", "", "", "y_list", "=", "self", ".", "stage4", "(", "x_list", ")", "\n", "\n", "return", "y_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train": [[606, 613], ["super().train", "_hrnet.HighResolutionNet.modules", "isinstance", "m.eval"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "HighResolutionNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "mode", "and", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "# trick: eval have effect on BatchNorm only", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.constant_init": [[163, 167], ["torch.init.constant_", "hasattr", "torch.init.constant_"], "function", ["None"], ["def", "constant_init", "(", "module", ",", "val", ",", "bias", "=", "0", ")", ":", "\n", "    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "weight", ",", "val", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.kaiming_init": [[169, 184], ["torch.init.kaiming_uniform_", "torch.init.kaiming_normal_", "hasattr", "torch.init.constant_"], "function", ["None"], ["", "", "def", "kaiming_init", "(", "module", ",", "\n", "a", "=", "0", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ",", "\n", "bias", "=", "0", ",", "\n", "distribution", "=", "'normal'", ")", ":", "\n", "    ", "assert", "distribution", "in", "[", "'uniform'", ",", "'normal'", "]", "\n", "if", "distribution", "==", "'uniform'", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "else", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "module", ".", "weight", ",", "a", "=", "a", ",", "mode", "=", "mode", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.conv3x3": [[186, 190], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.hrnetv2_w18": [[615, 626], ["_hrnet.HighResolutionNet", "HighResolutionNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.utils.model_zoo.load_url", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "", "", "", "", "def", "hrnetv2_w18", "(", "pretrained", "=", "False", ",", "weight_path", "=", "None", ",", "norm_eval", "=", "False", ",", "frozen_stages", "=", "-", "1", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "model_extra", "[", "'hrnetv2_w18'", "]", ",", "norm_eval", ",", "zero_init_residual", "=", "False", ",", "\n", "frozen_stages", "=", "frozen_stages", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "weight_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'hrnetv2_w18'", "]", ",", "\n", "progress", "=", "True", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.hrnetv2_w32": [[628, 639], ["_hrnet.HighResolutionNet", "HighResolutionNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.utils.model_zoo.load_url", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "def", "hrnetv2_w32", "(", "pretrained", "=", "False", ",", "weight_path", "=", "None", ",", "norm_eval", "=", "False", ",", "frozen_stages", "=", "-", "1", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "model_extra", "[", "'hrnetv2_w32'", "]", ",", "norm_eval", ",", "zero_init_residual", "=", "False", ",", "\n", "frozen_stages", "=", "frozen_stages", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "weight_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'hrnetv2_w32'", "]", ",", "\n", "progress", "=", "True", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.hrnetv2_w40": [[641, 652], ["_hrnet.HighResolutionNet", "HighResolutionNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.utils.model_zoo.load_url", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "def", "hrnetv2_w40", "(", "pretrained", "=", "False", ",", "weight_path", "=", "None", ",", "norm_eval", "=", "False", ",", "frozen_stages", "=", "-", "1", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "model_extra", "[", "'hrnetv2_w40'", "]", ",", "norm_eval", ",", "zero_init_residual", "=", "False", ",", "\n", "frozen_stages", "=", "frozen_stages", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "weight_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'hrnetv2_w40'", "]", ",", "\n", "progress", "=", "True", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.hrnetv2_w48": [[654, 666], ["_hrnet.HighResolutionNet", "HighResolutionNet.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "FileNotFoundError", "torch.utils.model_zoo.load_url", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "def", "hrnetv2_w48", "(", "pretrained", "=", "False", ",", "weight_path", "=", "None", ",", "norm_eval", "=", "False", ",", "frozen_stages", "=", "-", "1", ")", ":", "\n", "    ", "model", "=", "HighResolutionNet", "(", "model_extra", "[", "'hrnetv2_w48'", "]", ",", "norm_eval", ",", "zero_init_residual", "=", "False", ",", "\n", "frozen_stages", "=", "frozen_stages", ")", "\n", "if", "pretrained", ":", "\n", "        ", "if", "weight_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "weight_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'there is not pretrained model for HRNet-w48'", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "'hrnetv2_w48'", "]", ",", "\n", "progress", "=", "True", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.__init__": [[13, 31], ["numpy.random.RandomState", "base.FullImageDataset_small.preset", "base.FullImageDataset_small._rs.randint"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.preset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image", ",", "\n", "mask", ",", "\n", "training", ",", "\n", "np_seed", "=", "2333", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "sub_minibatch", "=", "10", ",", "\n", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "num_train_samples_per_class", "=", "num_train_samples_per_class", "\n", "self", ".", "sub_minibatch", "=", "sub_minibatch", "\n", "self", ".", "_seed", "=", "np_seed", "\n", "self", ".", "_rs", "=", "np", ".", "random", ".", "RandomState", "(", "np_seed", ")", "\n", "# set list lenght = 9999 to make sure seeds enough", "\n", "self", ".", "seeds_for_minibatchsample", "=", "[", "e", "for", "e", "in", "self", ".", "_rs", ".", "randint", "(", "low", "=", "2", "<<", "31", "-", "1", ",", "size", "=", "9999", ")", "]", "\n", "self", ".", "preset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.preset": [[32, 63], ["base.fixed_num_sample_small", "simplecv.data.preprocess.divisible_pad", "base.minibatch_sample_small", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.concatenate", "base.FullImageDataset_small.seeds_for_minibatchsample.pop", "base.FullImageDataset_small.image.transpose"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.fixed_num_sample_small", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.divisible_pad", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample_small", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["", "def", "preset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "\n", "#print(self.num_train_samples_per_class)", "\n", "\n", "            ", "train_indicator", ",", "test_indicator", "=", "fixed_num_sample_small", "(", "self", ".", "mask", ",", "self", ".", "num_train_samples_per_class", ",", "self", ".", "num_classes", ",", "self", ".", "_seed", ")", "\n", "\n", "blob", "=", "divisible_pad", "(", "[", "np", ".", "concatenate", "(", "[", "self", ".", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "self", ".", "mask", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "train_indicator", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "test_indicator", "[", "None", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "]", ",", "16", ",", "False", ")", "\n", "im", "=", "blob", "[", "0", ",", ":", "self", ".", "image", ".", "shape", "[", "-", "1", "]", ",", ":", ",", ":", "]", "\n", "\n", "mask", "=", "blob", "[", "0", ",", "-", "3", ",", ":", ",", ":", "]", "\n", "self", ".", "train_indicator", "=", "blob", "[", "0", ",", "-", "2", ",", ":", ",", ":", "]", "\n", "self", ".", "test_indicator", "=", "blob", "[", "0", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "\n", "\n", "self", ".", "train_inds_list", "=", "minibatch_sample_small", "(", "mask", ",", "self", ".", "train_indicator", ",", "self", ".", "sub_minibatch", ",", "\n", "seed", "=", "self", ".", "seeds_for_minibatchsample", ".", "pop", "(", ")", ")", "\n", "\n", "self", ".", "pad_im", "=", "im", "\n", "self", ".", "pad_mask", "=", "mask", "\n", "np", ".", "save", "(", "'train_indicator.npy'", ",", "self", ".", "train_indicator", ")", "\n", "np", ".", "save", "(", "'test_indicator.npy'", ",", "self", ".", "test_indicator", ")", "\n", "np", ".", "save", "(", "'pad_im.npy'", ",", "self", ".", "pad_im", ")", "\n", "np", ".", "save", "(", "'pad_mask.npy'", ",", "self", ".", "pad_mask", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_indicator", ",", "self", ".", "test_indicator", "=", "np", ".", "load", "(", "'train_indicator.npy'", ")", ",", "np", ".", "load", "(", "'test_indicator.npy'", ")", "\n", "self", ".", "pad_im", "=", "np", ".", "load", "(", "'pad_im.npy'", ")", "\n", "self", ".", "pad_mask", "=", "np", ".", "load", "(", "'pad_mask.npy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.resample_minibatch": [[65, 68], ["base.minibatch_sample_small", "base.FullImageDataset_small.seeds_for_minibatchsample.pop"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample_small"], ["", "", "def", "resample_minibatch", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_inds_list", "=", "minibatch_sample_small", "(", "self", ".", "pad_mask", ",", "self", ".", "train_indicator", ",", "self", ".", "sub_minibatch", ",", "\n", "seed", "=", "self", ".", "seeds_for_minibatchsample", ".", "pop", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.num_classes": [[69, 89], ["print", "print", "print", "print", "print", "print", "sys.exit"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "if", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_pavia\"", ":", "\n", "            ", "print", "(", "\"PU\"", ")", "\n", "return", "9", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_pavia_small\"", ":", "\n", "            ", "print", "(", "\"PU\"", ")", "\n", "return", "9", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_Indianpine\"", ":", "\n", "            ", "print", "(", "\"IP\"", ")", "\n", "return", "16", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_Indianpine_small\"", ":", "\n", "            ", "print", "(", "\"IP\"", ")", "\n", "return", "16", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_HOS\"", ":", "\n", "            ", "print", "(", "\"HOS\"", ")", "\n", "return", "15", "\n", "", "else", ":", "\n", "           ", "print", "(", "\"redefine the number of class\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.__getitem__": [[90, 97], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "pad_im", ",", "self", ".", "pad_mask", ",", "self", ".", "train_inds_list", "[", "idx", "]", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "pad_im", ",", "self", ".", "pad_mask", ",", "self", ".", "test_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset_small.__len__": [[98, 103], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_inds_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.__init__": [[105, 125], ["numpy.random.RandomState", "base.FullImageDataset.preset", "base.FullImageDataset._rs.randint"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.preset"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image", ",", "\n", "mask", ",", "\n", "training", ",", "\n", "np_seed", "=", "2333", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ",", "\n", ")", ":", "\n", "        ", "self", ".", "image", "=", "image", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "sample_percent", "=", "sample_percent", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "_seed", "=", "np_seed", "\n", "self", ".", "_rs", "=", "np", ".", "random", ".", "RandomState", "(", "np_seed", ")", "\n", "\n", "# set list lenght = 9999 to make sure seeds enough", "\n", "self", ".", "seeds_for_minibatchsample", "=", "[", "e", "for", "e", "in", "self", ".", "_rs", ".", "randint", "(", "low", "=", "2", "<<", "31", "-", "1", ",", "size", "=", "9999", ")", "]", "\n", "self", ".", "preset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.preset": [[126, 157], ["base.fixed_num_sample", "simplecv.data.preprocess.divisible_pad", "base.minibatch_sample", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.concatenate", "base.FullImageDataset.seeds_for_minibatchsample.pop", "base.FullImageDataset.image.transpose"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.fixed_num_sample", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.divisible_pad", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["", "def", "preset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "\n", "#print(self.num_train_samples_per_class)", "\n", "\n", "            ", "train_indicator", ",", "test_indicator", "=", "fixed_num_sample", "(", "self", ".", "mask", ",", "self", ".", "sample_percent", ",", "self", ".", "num_classes", ",", "self", ".", "_seed", ")", "\n", "\n", "blob", "=", "divisible_pad", "(", "[", "np", ".", "concatenate", "(", "[", "self", ".", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "\n", "self", ".", "mask", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "train_indicator", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "test_indicator", "[", "None", ",", ":", ",", ":", "]", "]", ",", "axis", "=", "0", ")", "]", ",", "16", ",", "False", ")", "\n", "im", "=", "blob", "[", "0", ",", ":", "self", ".", "image", ".", "shape", "[", "-", "1", "]", ",", ":", ",", ":", "]", "\n", "\n", "mask", "=", "blob", "[", "0", ",", "-", "3", ",", ":", ",", ":", "]", "\n", "self", ".", "train_indicator", "=", "blob", "[", "0", ",", "-", "2", ",", ":", ",", ":", "]", "\n", "self", ".", "test_indicator", "=", "blob", "[", "0", ",", "-", "1", ",", ":", ",", ":", "]", "\n", "\n", "\n", "self", ".", "train_inds_list", "=", "minibatch_sample", "(", "mask", ",", "self", ".", "train_indicator", ",", "self", ".", "batch_size", ",", "\n", "seed", "=", "self", ".", "seeds_for_minibatchsample", ".", "pop", "(", ")", ")", "\n", "\n", "self", ".", "pad_im", "=", "im", "\n", "self", ".", "pad_mask", "=", "mask", "\n", "np", ".", "save", "(", "'train_indicator.npy'", ",", "self", ".", "train_indicator", ")", "\n", "np", ".", "save", "(", "'test_indicator.npy'", ",", "self", ".", "test_indicator", ")", "\n", "np", ".", "save", "(", "'pad_im.npy'", ",", "self", ".", "pad_im", ")", "\n", "np", ".", "save", "(", "'pad_mask.npy'", ",", "self", ".", "pad_mask", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_indicator", ",", "self", ".", "test_indicator", "=", "np", ".", "load", "(", "'train_indicator.npy'", ")", ",", "np", ".", "load", "(", "'test_indicator.npy'", ")", "\n", "self", ".", "pad_im", "=", "np", ".", "load", "(", "'pad_im.npy'", ")", "\n", "self", ".", "pad_mask", "=", "np", ".", "load", "(", "'pad_mask.npy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.resample_minibatch": [[159, 162], ["base.minibatch_sample", "base.FullImageDataset.seeds_for_minibatchsample.pop"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample"], ["", "", "def", "resample_minibatch", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_inds_list", "=", "minibatch_sample", "(", "self", ".", "pad_mask", ",", "self", ".", "train_indicator", ",", "self", ".", "batch_size", ",", "\n", "seed", "=", "self", ".", "seeds_for_minibatchsample", ".", "pop", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.num_classes": [[163, 177], ["print", "print", "print", "print", "sys.exit"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "if", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_pavia\"", ":", "\n", "            ", "print", "(", "\"PU\"", ")", "\n", "return", "9", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_Indianpine\"", ":", "\n", "            ", "print", "(", "\"IP\"", ")", "\n", "return", "16", "\n", "", "elif", "dataset_path", "==", "\"SSDGL.SSDGL_1_0_HOS\"", ":", "\n", "            ", "print", "(", "\"HOS\"", ")", "\n", "return", "15", "\n", "", "else", ":", "\n", "           ", "print", "(", "\"redefine the number of class\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.__getitem__": [[178, 185], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "pad_im", ",", "self", ".", "pad_mask", ",", "self", ".", "train_inds_list", "[", "idx", "]", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "pad_im", ",", "self", ".", "pad_mask", ",", "self", ".", "test_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.__len__": [[186, 191], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_inds_list", ")", "\n", "", "else", ":", "\n", "            ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler_small.__init__": [[193, 198], ["torch.utils.data.Sampler.__init__", "torch.Generator", "base.MinibatchSampler_small.g.manual_seed"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ":", "FullImageDataset_small", ")", ":", "\n", "        ", "super", "(", "MinibatchSampler_small", ",", "self", ")", ".", "__init__", "(", "None", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "self", ".", "g", ".", "manual_seed", "(", "SEED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler_small.__iter__": [[199, 203], ["base.MinibatchSampler_small.dataset.resample_minibatch", "len", "iter", "torch.randperm().tolist", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.resample_minibatch", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "resample_minibatch", "(", ")", "\n", "n", "=", "len", "(", "self", ".", "dataset", ")", "\n", "return", "iter", "(", "torch", ".", "randperm", "(", "n", ",", "generator", "=", "self", ".", "g", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler_small.__len__": [[204, 206], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler.__init__": [[209, 214], ["torch.utils.data.Sampler.__init__", "torch.Generator", "base.MinibatchSampler.g.manual_seed"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ":", "FullImageDataset", ")", ":", "\n", "        ", "super", "(", "MinibatchSampler", ",", "self", ")", ".", "__init__", "(", "None", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "self", ".", "g", ".", "manual_seed", "(", "SEED", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler.__iter__": [[215, 219], ["base.MinibatchSampler.dataset.resample_minibatch", "len", "iter", "torch.randperm().tolist", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.FullImageDataset.resample_minibatch", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "resample_minibatch", "(", ")", "\n", "n", "=", "len", "(", "self", ".", "dataset", ")", "\n", "return", "iter", "(", "torch", ".", "randperm", "(", "n", ",", "generator", "=", "self", ".", "g", ")", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.MinibatchSampler.__len__": [[220, 222], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.fixed_num_sample_small": [[223, 254], ["numpy.random.RandomState", "gt_mask.ravel", "numpy.zeros_like", "numpy.zeros_like", "range", "train_indicator.reshape.reshape", "test_indicator.reshape.reshape", "np.random.RandomState.shuffle", "shuchu.extend", "numpy.where"], "function", ["None"], ["", "", "def", "fixed_num_sample_small", "(", "gt_mask", ":", "np", ".", "ndarray", ",", "num_train_samples", ",", "num_classes", ",", "seed", "=", "2333", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        gt_mask: 2-D array of shape [height, width]\n        num_train_samples: int\n        num_classes: scalar\n        seed: int\n\n    Returns:\n        train_indicator, test_indicator\n    \"\"\"", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "shuchu", "=", "[", "]", "\n", "gt_mask_flatten", "=", "gt_mask", ".", "ravel", "(", ")", "\n", "train_indicator", "=", "np", ".", "zeros_like", "(", "gt_mask_flatten", ")", "\n", "test_indicator", "=", "np", ".", "zeros_like", "(", "gt_mask_flatten", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "gt_mask_flatten", "==", "i", ")", "[", "0", "]", "\n", "rs", ".", "shuffle", "(", "inds", ")", "\n", "#print(\"num_train_samples\",num_train_samples)", "\n", "train_inds", "=", "inds", "[", ":", "num_train_samples", "]", "\n", "test_inds", "=", "inds", "[", "num_train_samples", ":", "]", "\n", "shuchu", ".", "extend", "(", "train_inds", ")", "\n", "train_indicator", "[", "train_inds", "]", "=", "1", "\n", "test_indicator", "[", "test_inds", "]", "=", "1", "\n", "#print(\"shuchu\",shuchu)", "\n", "", "train_indicator", "=", "train_indicator", ".", "reshape", "(", "gt_mask", ".", "shape", ")", "\n", "test_indicator", "=", "test_indicator", ".", "reshape", "(", "gt_mask", ".", "shape", ")", "\n", "\n", "return", "train_indicator", ",", "test_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.fixed_num_sample": [[255, 293], ["numpy.random.RandomState", "gt_mask.ravel", "numpy.zeros_like", "numpy.zeros_like", "range", "train_indicator.reshape.reshape", "test_indicator.reshape.reshape", "numpy.sum", "numpy.ceil", "num_train_samples.astype.astype", "np.random.RandomState.shuffle", "shuchu.extend", "numpy.where"], "function", ["None"], ["", "def", "fixed_num_sample", "(", "gt_mask", ":", "np", ".", "ndarray", ",", "sample_percent", ",", "num_classes", ",", "seed", "=", "2333", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        gt_mask: 2-D array of shape [height, width]\n        num_train_samples: int\n        num_classes: scalar\n        seed: int\n\n    Returns:\n        train_indicator, test_indicator\n    \"\"\"", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "#(106\uff0c610\uff0c340)", "\n", "gt_mask_flatten", "=", "gt_mask", ".", "ravel", "(", ")", "\n", "train_indicator", "=", "np", ".", "zeros_like", "(", "gt_mask_flatten", ")", "\n", "test_indicator", "=", "np", ".", "zeros_like", "(", "gt_mask_flatten", ")", "\n", "shuchu", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "num_classes", "+", "1", ")", ":", "\n", "        ", "inds", "=", "np", ".", "where", "(", "gt_mask_flatten", "==", "i", ")", "[", "0", "]", "\n", "count", "=", "np", ".", "sum", "(", "gt_mask_flatten", "==", "i", ")", "\n", "num_train_samples", "=", "np", ".", "ceil", "(", "count", "*", "sample_percent", ")", "\n", "num_train_samples", "=", "num_train_samples", ".", "astype", "(", "np", ".", "int32", ")", "\n", "if", "num_train_samples", "<", "5", ":", "\n", "            ", "num_train_samples", "=", "5", "# At least 5 samples per class", "\n", "", "rs", ".", "shuffle", "(", "inds", ")", "\n", "\n", "train_inds", "=", "inds", "[", ":", "num_train_samples", "]", "\n", "test_inds", "=", "inds", "[", "num_train_samples", ":", "]", "\n", "shuchu", ".", "extend", "(", "train_inds", ")", "\n", "\n", "train_indicator", "[", "train_inds", "]", "=", "1", "\n", "test_indicator", "[", "test_inds", "]", "=", "1", "\n", "#print(\"shuchu\",shuchu)", "\n", "", "train_indicator", "=", "train_indicator", ".", "reshape", "(", "gt_mask", ".", "shape", ")", "\n", "test_indicator", "=", "test_indicator", ".", "reshape", "(", "gt_mask", ".", "shape", ")", "\n", "return", "train_indicator", ",", "test_indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample_small": [[294, 327], ["numpy.random.RandomState", "numpy.unique", "dict", "numpy.where", "np.random.RandomState.shuffle", "numpy.zeros_like().ravel", "dict.items", "train_inds_list.append", "numpy.zeros_like", "numpy.where", "np.random.RandomState.shuffle", "len", "np.zeros_like().ravel.reshape", "numpy.zeros_like", "np.where.ravel"], "function", ["None"], ["", "def", "minibatch_sample_small", "(", "gt_mask", ":", "np", ".", "ndarray", ",", "train_indicator", ":", "np", ".", "ndarray", ",", "minibatch_size", ",", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        gt_mask: 2-D array of shape [height, width]\n        train_indicator: 2-D array of shape [height, width]\n        minibatch_size:\n\n    Returns:\n    \"\"\"", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "# split into N classes", "\n", "cls_list", "=", "np", ".", "unique", "(", "gt_mask", ")", "\n", "inds_dict_per_class", "=", "dict", "(", ")", "\n", "for", "cls", "in", "cls_list", ":", "\n", "        ", "train_inds_per_class", "=", "np", ".", "where", "(", "gt_mask", "==", "cls", ",", "train_indicator", ",", "np", ".", "zeros_like", "(", "train_indicator", ")", ")", "\n", "inds", "=", "np", ".", "where", "(", "train_inds_per_class", ".", "ravel", "(", ")", "==", "1", ")", "[", "0", "]", "\n", "rs", ".", "shuffle", "(", "inds", ")", "\n", "\n", "inds_dict_per_class", "[", "cls", "]", "=", "inds", "\n", "\n", "", "train_inds_list", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "while", "True", ":", "\n", "        ", "train_inds", "=", "np", ".", "zeros_like", "(", "train_indicator", ")", ".", "ravel", "(", ")", "\n", "for", "cls", ",", "inds", "in", "inds_dict_per_class", ".", "items", "(", ")", ":", "\n", "            ", "rs", ".", "shuffle", "(", "inds", ")", "\n", "cd", "=", "len", "(", "inds", ")", "\n", "fetch_inds", "=", "inds", "[", ":", "cd", "]", "\n", "train_inds", "[", "fetch_inds", "]", "=", "1", "\n", "", "cnt", "+=", "1", "\n", "if", "cnt", "==", "21", ":", "\n", "            ", "return", "train_inds_list", "\n", "", "train_inds_list", ".", "append", "(", "train_inds", ".", "reshape", "(", "train_indicator", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.base.minibatch_sample": [[329, 367], ["numpy.random.RandomState", "numpy.unique", "dict", "numpy.where", "np.random.RandomState.shuffle", "numpy.zeros_like().ravel", "dict.items", "train_inds_list.append", "numpy.zeros_like", "numpy.where", "np.random.RandomState.shuffle", "min", "np.zeros_like().ravel.reshape", "numpy.zeros_like", "len", "np.where.ravel"], "function", ["None"], ["", "", "def", "minibatch_sample", "(", "gt_mask", ":", "np", ".", "ndarray", ",", "train_indicator", ":", "np", ".", "ndarray", ",", "batch_size", ",", "seed", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        gt_mask: 2-D array of shape [height, width]\n        train_indicator: 2-D array of shape [height, width]\n        minibatch_size:\n\n    Returns:\n\n    \"\"\"", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "# split into N classes", "\n", "cls_list", "=", "np", ".", "unique", "(", "gt_mask", ")", "\n", "inds_dict_per_class", "=", "dict", "(", ")", "\n", "for", "cls", "in", "cls_list", ":", "\n", "        ", "train_inds_per_class", "=", "np", ".", "where", "(", "gt_mask", "==", "cls", ",", "train_indicator", ",", "np", ".", "zeros_like", "(", "train_indicator", ")", ")", "\n", "inds", "=", "np", ".", "where", "(", "train_inds_per_class", ".", "ravel", "(", ")", "==", "1", ")", "[", "0", "]", "\n", "\n", "rs", ".", "shuffle", "(", "inds", ")", "\n", "\n", "inds_dict_per_class", "[", "cls", "]", "=", "inds", "\n", "\n", "", "train_inds_list", "=", "[", "]", "\n", "cnt", "=", "0", "\n", "while", "True", ":", "\n", "        ", "train_inds", "=", "np", ".", "zeros_like", "(", "train_indicator", ")", ".", "ravel", "(", ")", "\n", "for", "cls", ",", "inds", "in", "inds_dict_per_class", ".", "items", "(", ")", ":", "\n", "                ", "rs", ".", "shuffle", "(", "inds", ")", "\n", "cd", "=", "min", "(", "batch_size", ",", "len", "(", "inds", ")", ")", "\n", "fetch_inds", "=", "inds", "[", ":", "cd", "]", "\n", "#print(fetch_inds)", "\n", "train_inds", "[", "fetch_inds", "]", "=", "1", "\n", "\n", "", "cnt", "+=", "1", "\n", "if", "cnt", "==", "21", ":", "\n", "            ", "return", "train_inds_list", "\n", "", "train_inds_list", ".", "append", "(", "train_inds", ".", "reshape", "(", "train_indicator", ".", "shape", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.salinas.NewSalinasDataset.__init__": [[10, 34], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'salinas_corrected'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'salinas_gt'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "sample_percent", "=", "sample_percent", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "super", "(", "NewSalinasDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "sample_percent", "=", "sample_percent", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.salinas.NewSalinasDataset.num_classes": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "16", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.HOS.NewHOSDataset.__init__": [[11, 37], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset_small.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "sub_minibatch", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'ans'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'name'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "num_train_samples_per_class", "=", "num_train_samples_per_class", "\n", "self", ".", "sub_minibatch", "=", "sub_minibatch", "\n", "\n", "super", "(", "NewHOSDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "num_train_samples_per_class", "=", "num_train_samples_per_class", ",", "\n", "sub_minibatch", "=", "sub_minibatch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.indianpine.NewIndianPinesDataset.__init__": [[10, 33], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.05", ",", "\n", "batch_size", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'indian_pines_corrected'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'indian_pines_gt'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "sample_percent", "=", "sample_percent", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "super", "(", "NewIndianPinesDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "sample_percent", "=", "sample_percent", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.indianpine.NewIndianPinesDataset.num_classes": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "16", "\n", "", "", "class", "SmallIndianPinesDataset", "(", "FullImageDataset_small", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.indianpine.SmallIndianPinesDataset.__init__": [[38, 64], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset_small.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "sub_minibatch", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "#print(\"as\",num_train_samples_per_class)", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'indian_pines_corrected'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'indian_pines_gt'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "num_train_samples_per_class", "=", "num_train_samples_per_class", "\n", "self", ".", "sub_minibatch", "=", "sub_minibatch", "\n", "\n", "super", "(", "SmallIndianPinesDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "num_train_samples_per_class", "=", "num_train_samples_per_class", ",", "\n", "sub_minibatch", "=", "sub_minibatch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.indianpine.SmallIndianPinesDataset.num_classes": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "16", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.SmallIndianPinesLoader.__init__": [[13, 34], ["dict", "dataloader.SmallIndianPinesLoader.set_defalut", "dataloader.SmallIndianPinesLoader.config.update", "dataloader.SmallIndianPinesLoader.config.items", "data.indianpine.SmallIndianPinesDataset", "print", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "SmallIndianPinesDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "num_train_samples_per_class", ",", "self", ".", "sub_minibatch", ")", "\n", "print", "(", "\"gf\"", ",", "self", ".", "num_train_samples_per_class", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "SmallIndianPinesLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.SmallIndianPinesLoader.set_defalut": [[35, 44], ["dataloader.SmallIndianPinesLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "# mini-batch per class, if there are 9 categories, the total mini-batch is sub_minibatch * num_classes (9)", "\n", "sub_minibatch", "=", "10", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.SmallPaviaLoader.__init__": [[47, 67], ["dict", "dataloader.SmallPaviaLoader.set_defalut", "dataloader.SmallPaviaLoader.config.update", "dataloader.SmallPaviaLoader.config.items", "data.pavia.SmallPaviaDataset", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "SmallPaviaDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "num_train_samples_per_class", ",", "self", ".", "sub_minibatch", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "SmallPaviaLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.SmallPaviaLoader.set_defalut": [[68, 76], ["dataloader.SmallPaviaLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "sub_minibatch", "=", "10", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewPaviaLoader.__init__": [[80, 100], ["dict", "dataloader.NewPaviaLoader.set_defalut", "dataloader.NewPaviaLoader.config.update", "dataloader.NewPaviaLoader.config.items", "data.pavia.NewPaviaDataset", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "NewPaviaDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "sample_percent", ",", "self", ".", "batch_size", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "NewPaviaLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewPaviaLoader.set_defalut": [[101, 109], ["dataloader.NewPaviaLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewSalinasLoader.__init__": [[114, 134], ["dict", "dataloader.NewSalinasLoader.set_defalut", "dataloader.NewSalinasLoader.config.update", "dataloader.NewSalinasLoader.config.items", "data.salinas.NewSalinasDataset", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "NewSalinasDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "sample_percent", ",", "self", ".", "batch_size", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "NewSalinasLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewSalinasLoader.set_defalut": [[135, 143], ["dataloader.NewSalinasLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewIndianPinesLoader.__init__": [[147, 167], ["dict", "dataloader.NewIndianPinesLoader.set_defalut", "dataloader.NewIndianPinesLoader.config.update", "dataloader.NewIndianPinesLoader.config.items", "data.indianpine.NewIndianPinesDataset", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "NewIndianPinesDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "sample_percent", ",", "self", ".", "batch_size", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "NewIndianPinesLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewIndianPinesLoader.set_defalut": [[168, 176], ["dataloader.NewIndianPinesLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.__init__": [[179, 199], ["dict", "dataloader.NewHOSLoader.set_defalut", "dataloader.NewHOSLoader.config.update", "dataloader.NewHOSLoader.config.items", "data.HOS.NewHOSDataset", "data.base.MinibatchSampler", "torch.utils.data.dataloader.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "dict", "(", ")", "\n", "self", ".", "set_defalut", "(", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "config", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "__dict__", "[", "k", "]", "=", "v", "\n", "\n", "", "dataset", "=", "NewHOSDataset", "(", "self", ".", "image_mat_path", ",", "self", ".", "gt_mat_path", ",", "self", ".", "training", ",", "\n", "self", ".", "num_train_samples_per_class", ",", "self", ".", "sub_minibatch", ")", "\n", "sampler", "=", "MinibatchSampler", "(", "dataset", ")", "\n", "super", "(", "NewHOSLoader", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler", ",", "\n", "batch_sampler", "=", "None", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", "timeout", "=", "0", ",", "\n", "worker_init_fn", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.dataloader.NewHOSLoader.set_defalut": [[200, 209], ["dataloader.NewHOSLoader.config.update", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "set_defalut", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", ".", "update", "(", "dict", "(", "\n", "num_workers", "=", "0", ",", "\n", "image_mat_path", "=", "''", ",", "\n", "gt_mat_path", "=", "''", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "# mini-batch per class, if there are 10 categories, the total mini-batch is sub_minibatch * num_classes (10)", "\n", "sub_minibatch", "=", "10", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.pavia.NewPaviaDataset.__init__": [[10, 34], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "sample_percent", "=", "0.01", ",", "\n", "batch_size", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'paviaU'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'paviaU_gt'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "sample_percent", "=", "sample_percent", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "super", "(", "NewPaviaDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "sample_percent", "=", "sample_percent", ",", "\n", "batch_size", "=", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.pavia.NewPaviaDataset.num_classes": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "9", "\n", "", "", "class", "SmallPaviaDataset", "(", "FullImageDataset_small", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.pavia.SmallPaviaDataset.__init__": [[39, 63], ["scipy.io.loadmat", "scipy.io.loadmat", "simplecv.data.preprocess.mean_std_normalize.reshape().mean", "simplecv.data.preprocess.mean_std_normalize.reshape().std", "simplecv.data.preprocess.mean_std_normalize", "data.base.FullImageDataset_small.__init__", "simplecv.data.preprocess.mean_std_normalize.reshape", "simplecv.data.preprocess.mean_std_normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "image_mat_path", ",", "\n", "gt_mat_path", ",", "\n", "training", "=", "True", ",", "\n", "num_train_samples_per_class", "=", "10", ",", "\n", "sub_minibatch", "=", "10", ")", ":", "\n", "        ", "self", ".", "im_mat_path", "=", "image_mat_path", "\n", "self", ".", "gt_mat_path", "=", "gt_mat_path", "\n", "\n", "im_mat", "=", "loadmat", "(", "image_mat_path", ")", "\n", "image", "=", "im_mat", "[", "'paviaU'", "]", "\n", "gt_mat", "=", "loadmat", "(", "gt_mat_path", ")", "\n", "mask", "=", "gt_mat", "[", "'paviaU_gt'", "]", "\n", "\n", "im_cmean", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "im_cstd", "=", "image", ".", "reshape", "(", "(", "-", "1", ",", "image", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "std", "(", "axis", "=", "0", ")", "\n", "self", ".", "vanilla_image", "=", "image", "\n", "image", "=", "preprocess", ".", "mean_std_normalize", "(", "image", ",", "im_cmean", ",", "im_cstd", ")", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "num_train_samples_per_class", "=", "num_train_samples_per_class", "\n", "self", ".", "sub_minibatch", "=", "sub_minibatch", "\n", "super", "(", "SmallPaviaDataset", ",", "self", ")", ".", "__init__", "(", "image", ",", "mask", ",", "training", ",", "np_seed", "=", "SEED", ",", "\n", "num_train_samples_per_class", "=", "num_train_samples_per_class", ",", "\n", "sub_minibatch", "=", "sub_minibatch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.pavia.SmallPaviaDataset.num_classes": [[64, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "9", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THToTensor.__call__": [[9, 11], ["simplecv.util.tensor_util.to_tensor"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor"], ["    ", "def", "__call__", "(", "self", ",", "images", ",", "masks", ")", ":", "\n", "        ", "return", "tensor_util", ".", "to_tensor", "(", "[", "images", ",", "masks", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THNormalize.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THNormalize.__call__": [[18, 23], ["simplecv.data.preprocess.mean_std_normalize"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "images_tensor", "=", "preprocess", ".", "mean_std_normalize", "(", "images", ",", "\n", "self", ".", "mean", ",", "\n", "self", ".", "std", ")", "\n", "return", "images_tensor", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomRotate90k.__init__": [[26, 29], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "k", "=", "None", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomRotate90k.__call__": [[30, 50], ["list", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "list.append", "int", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "list.append", "len", "numpy.random.choice"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\" Rotate 90 * k degree for image and mask\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "k", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "[", "1", ",", "2", ",", "3", "]", ",", "1", ")", "[", "0", "]", ")", "if", "self", ".", "k", "is", "None", "else", "self", ".", "k", "\n", "ret", "=", "list", "(", ")", "\n", "images_tensor", "=", "torch", ".", "rot90", "(", "images", ",", "k", ",", "[", "0", ",", "1", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "rot90", "(", "masks", ",", "k", ",", "[", "0", ",", "1", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "ret", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomHorizontalFlip.__init__": [[53, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomHorizontalFlip.__call__": [[56, 82], ["list", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "numpy.random.uniform", "list.append", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "list.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "if", "self", ".", "p", "<", "np", ".", "random", ".", "uniform", "(", ")", ":", "\n", "            ", "ret", ".", "append", "(", "images", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "ret", ".", "append", "(", "masks", ")", "\n", "", "return", "ret", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n", "", "images_tensor", "=", "torch", ".", "flip", "(", "images", ",", "[", "1", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "flip", "(", "masks", ",", "[", "1", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "ret", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomVerticalFlip.__init__": [[85, 87], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomVerticalFlip.__call__": [[88, 114], ["list", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "numpy.random.uniform", "list.append", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "list.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "ret", "=", "list", "(", ")", "\n", "\n", "if", "self", ".", "p", "<", "np", ".", "random", ".", "uniform", "(", ")", ":", "\n", "            ", "ret", ".", "append", "(", "images", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "ret", ".", "append", "(", "masks", ")", "\n", "", "return", "ret", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n", "", "images_tensor", "=", "torch", ".", "flip", "(", "images", ",", "[", "0", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "flip", "(", "masks", ",", "[", "0", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "ret", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomCrop.__init__": [[117, 119], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", "=", "(", "512", ",", "512", ")", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomCrop.__call__": [[120, 156], ["int", "int", "list", "list.append", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "numpy.random.randint", "numpy.random.randint", "list.append", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "im_h", ",", "im_w", ",", "_", "=", "images", ".", "shape", "\n", "c_h", ",", "c_w", "=", "self", ".", "crop_size", "\n", "\n", "pad_h", "=", "c_h", "-", "im_h", "\n", "pad_w", "=", "c_w", "-", "im_w", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "images", "=", "F", ".", "pad", "(", "images", ",", "[", "0", ",", "0", ",", "0", ",", "max", "(", "pad_w", ",", "0", ")", ",", "0", ",", "max", "(", "pad_h", ",", "0", ")", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "masks", "=", "F", ".", "pad", "(", "masks", ",", "[", "0", ",", "max", "(", "pad_w", ",", "0", ")", ",", "0", ",", "max", "(", "pad_h", ",", "0", ")", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "", "im_h", ",", "im_w", ",", "_", "=", "images", ".", "shape", "\n", "\n", "y_lim", "=", "im_h", "-", "c_h", "+", "1", "\n", "x_lim", "=", "im_w", "-", "c_w", "+", "1", "\n", "ymin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "y_lim", ",", "1", ")", ")", "\n", "xmin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "x_lim", ",", "1", ")", ")", "\n", "\n", "xmax", "=", "xmin", "+", "c_w", "\n", "ymax", "=", "ymin", "+", "c_h", "\n", "ret", "=", "list", "(", ")", "\n", "images_tensor", "=", "images", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "masks", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomScale.__init__": [[159, 163], ["numpy.linspace", "numpy.random.choice", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_range", "=", "(", "0.5", ",", "2.0", ")", ",", "scale_step", "=", "0.25", ")", ":", "\n", "        ", "scale_factors", "=", "np", ".", "linspace", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ",", "\n", "int", "(", "(", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", ")", "/", "scale_step", ")", "+", "1", ")", "\n", "self", ".", "scale_factor", "=", "np", ".", "random", ".", "choice", "(", "scale_factors", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.seg_transforms.THRandomScale.__call__": [[164, 185], ["list", "torch.interpolate", "torch.interpolate", "images_tensor[].permute", "list.append", "images.permute", "list.append", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "ret", "=", "list", "(", ")", "\n", "_images", "=", "images", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "images_tensor", "=", "F", ".", "interpolate", "(", "_images", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "images_tensor", "=", "images_tensor", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "F", ".", "interpolate", "(", "masks", "[", "None", ",", "None", ",", ":", ",", ":", "]", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'nearest'", ")", "[", "0", "]", "[", "0", "]", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Rotate90k.__init__": [[8, 13], ["simplecv.core.transform_base.TestTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "1", ")", ":", "\n", "        ", "super", "(", "Rotate90k", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "k", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Rotate90k.transform": [[14, 17], ["torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "transformed_inputs", "=", "torch", ".", "rot90", "(", "inputs", ",", "self", ".", "k", ",", "[", "2", ",", "3", "]", ")", "\n", "return", "transformed_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Rotate90k.inv_transform": [[18, 21], ["torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90"], "methods", ["None"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "rot90", "(", "transformed_inputs", ",", "4", "-", "self", ".", "k", ",", "[", "2", ",", "3", "]", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.HorizontalFlip.__init__": [[24, 26], ["simplecv.core.transform_base.TestTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "HorizontalFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.HorizontalFlip.transform": [[27, 30], ["torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "transformed_inputs", "=", "torch", ".", "flip", "(", "inputs", ",", "[", "3", "]", ")", "\n", "return", "transformed_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.HorizontalFlip.inv_transform": [[31, 34], ["torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "flip", "(", "transformed_inputs", ",", "[", "3", "]", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.VerticalFlip.__init__": [[37, 39], ["simplecv.core.transform_base.TestTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VerticalFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.VerticalFlip.transform": [[40, 43], ["torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "transformed_inputs", "=", "torch", ".", "flip", "(", "inputs", ",", "[", "2", "]", ")", "\n", "return", "transformed_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.VerticalFlip.inv_transform": [[44, 47], ["torch.flip", "torch.flip", "torch.flip", "torch.flip"], "methods", ["None"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "flip", "(", "transformed_inputs", ",", "[", "2", "]", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Transpose.__init__": [[50, 52], ["simplecv.core.transform_base.TestTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Transpose", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Transpose.transform": [[53, 56], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "transformed_inputs", "=", "torch", ".", "transpose", "(", "inputs", ",", "2", ",", "3", ")", "\n", "return", "transformed_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Transpose.inv_transform": [[57, 60], ["torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "transpose", "(", "transformed_inputs", ",", "2", ",", "3", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Scale.__init__": [[63, 68], ["simplecv.core.transform_base.TestTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "scale_factor", "=", "None", ")", ":", "\n", "        ", "super", "(", "Scale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "input_shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Scale.transform": [[69, 74], ["torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "input_shape", "=", "inputs", ".", "shape", "\n", "transformed_inputs", "=", "F", ".", "interpolate", "(", "inputs", ",", "size", "=", "self", ".", "size", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "return", "transformed_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.test_transforms.Scale.inv_transform": [[75, 80], ["torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "size", "=", "(", "self", ".", "input_shape", "[", "2", "]", ",", "self", ".", "input_shape", "[", "3", "]", ")", "\n", "inputs", "=", "F", ".", "interpolate", "(", "transformed_inputs", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_resize_to_range": [[5, 21], ["numpy.min", "numpy.max", "min", "cv2.resize"], "function", ["None"], ["def", "_np_resize_to_range", "(", "image", ",", "min_size", ",", "max_size", ")", ":", "\n", "    ", "im_shape", "=", "image", ".", "shape", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "im_scale", "=", "min", "(", "min_size", "/", "im_size_min", ",", "max_size", "/", "im_size_max", ")", "\n", "\n", "image", "=", "cv2", ".", "resize", "(", "\n", "image", ",", "\n", "None", ",", "\n", "None", ",", "\n", "fx", "=", "im_scale", ",", "\n", "fy", "=", "im_scale", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "return", "image", ",", "im_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_mean_std_normalize": [[23, 41], ["isinstance", "numpy.array", "isinstance", "numpy.array", "np.array.reshape", "np.array.reshape"], "function", ["None"], ["", "def", "_np_mean_std_normalize", "(", "image", ",", "mean", "=", "(", "123.675", ",", "116.28", ",", "103.53", ")", ",", "std", "=", "(", "58.395", ",", "57.12", ",", "57.375", ")", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        image: 3-D array of shape [height, width, channel]\n        mean:  a list or tuple or ndarray\n        std: a list or tuple or ndarray\n\n    Returns:\n\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "mean", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "mean", ",", "np", ".", "float32", ")", "\n", "", "if", "not", "isinstance", "(", "std", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "std", "=", "np", ".", "array", "(", "std", ",", "np", ".", "float32", ")", "\n", "", "shape", "=", "[", "1", "]", "*", "image", ".", "ndim", "\n", "shape", "[", "-", "1", "]", "=", "-", "1", "\n", "return", "(", "image", "-", "mean", ".", "reshape", "(", "shape", ")", ")", "/", "std", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_random_crop": [[43, 73], ["int", "int", "numpy.pad", "numpy.random.randint", "numpy.random.randint", "max", "max"], "function", ["None"], ["", "def", "_np_random_crop", "(", "image", ",", "crop_size", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        image: 3-D tensor of shape [h, w, c]\n        crop_size: a tuple of (crop_h, crop_w)\n\n    Returns:\n\n    \"\"\"", "\n", "im_h", ",", "im_w", ",", "_", "=", "image", ".", "shape", "\n", "c_h", ",", "c_w", "=", "crop_size", "\n", "\n", "pad_h", "=", "c_h", "-", "im_h", "\n", "pad_w", "=", "c_w", "-", "im_w", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "[", "0", ",", "max", "(", "pad_h", ",", "0", ")", "]", ",", "[", "0", ",", "max", "(", "pad_w", ",", "0", ")", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "im_h", ",", "im_w", ",", "_", "=", "image", ".", "shape", "\n", "\n", "y_lim", "=", "im_h", "-", "c_h", "+", "1", "\n", "x_lim", "=", "im_w", "-", "c_w", "+", "1", "\n", "ymin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "y_lim", ",", "1", ")", ")", "\n", "xmin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "x_lim", ",", "1", ")", ")", "\n", "\n", "xmax", "=", "xmin", "+", "c_w", "\n", "ymax", "=", "ymin", "+", "c_h", "\n", "\n", "crop_im", "=", "image", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "\n", "\n", "return", "crop_im", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_im_scale": [[75, 106], ["cv2.resize", "int", "int", "cv2.resize", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["", "def", "_np_im_scale", "(", "image", ",", "scale_factor", ",", "size_divisor", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        image: 3-D of shape [height, width, channel]\n        scale_factor:\n        size_divisor:\n\n    Returns:\n\n    \"\"\"", "\n", "im_h", ",", "im_w", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "if", "size_divisor", "is", "None", ":", "\n", "        ", "resized_im", "=", "cv2", ".", "resize", "(", "\n", "image", ",", "\n", "None", ",", "\n", "None", ",", "\n", "fx", "=", "scale_factor", ",", "\n", "fy", "=", "scale_factor", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dst_h", "=", "int", "(", "np", ".", "ceil", "(", "scale_factor", "*", "im_h", "/", "size_divisor", ")", "*", "size_divisor", ")", "\n", "dst_w", "=", "int", "(", "np", ".", "ceil", "(", "scale_factor", "*", "im_h", "/", "size_divisor", ")", "*", "size_divisor", ")", "\n", "resized_im", "=", "cv2", ".", "resize", "(", "\n", "image", ",", "\n", "(", "dst_h", ",", "dst_w", ")", ",", "\n", "None", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "", "return", "resized_im", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_im_random_scale": [[108, 151], ["numpy.arange", "numpy.random.choice", "cv2.resize", "ValueError", "len", "cv2.resize", "isinstance", "isinstance", "round", "round", "int", "int", "numpy.ceil", "numpy.ceil"], "function", ["None"], ["", "def", "_np_im_random_scale", "(", "image", ",", "scale_factors", ",", "size_divisor", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        image: 3-D of shape [height, width, channel]\n        scale_factors:\n        size_divisor:\n        mask:\n\n    Returns:\n\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "scale_factors", ",", "list", ")", "and", "not", "isinstance", "(", "scale_factors", ",", "tuple", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'param: scale_factors should be list or tuple.'", ")", "\n", "\n", "", "im_h", ",", "im_w", "=", "image", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "if", "size_divisor", "is", "None", ":", "\n", "        ", "dst_sizes", "=", "[", "(", "round", "(", "im_h", "*", "scale", ")", ",", "round", "(", "im_w", "*", "scale", ")", ")", "for", "scale", "in", "scale_factors", "]", "\n", "", "else", ":", "\n", "        ", "dst_sizes", "=", "[", "(", "int", "(", "np", ".", "ceil", "(", "im_h", "*", "scale", "/", "size_divisor", ")", "*", "size_divisor", ")", ",", "\n", "int", "(", "np", ".", "ceil", "(", "im_w", "*", "scale", "/", "size_divisor", ")", "*", "size_divisor", ")", ")", "for", "scale", "in", "\n", "scale_factors", "]", "\n", "\n", "", "inds", "=", "np", ".", "arange", "(", "len", "(", "dst_sizes", ")", ")", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "inds", ")", "\n", "dst_size", "=", "dst_sizes", "[", "index", "]", "\n", "\n", "resized_im", "=", "cv2", ".", "resize", "(", "\n", "image", ",", "\n", "dst_size", ",", "\n", "None", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "resized_mask", "=", "cv2", ".", "resize", "(", "\n", "mask", ",", "\n", "dst_size", ",", "\n", "None", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "return", "resized_im", ",", "resized_mask", "\n", "", "return", "resized_im", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess.sliding_window": [[153, 178], ["numpy.meshgrid", "xmin.ravel.ravel", "ymin.ravel.ravel", "numpy.where", "numpy.where", "numpy.stack", "math.ceil", "math.ceil", "numpy.arange", "numpy.arange", "numpy.zeros_like", "numpy.zeros_like", "math.ceil", "math.ceil", "numpy.minimum", "numpy.minimum", "math.ceil", "math.ceil"], "function", ["None"], ["", "def", "sliding_window", "(", "input_size", ",", "kernel_size", ",", "stride", ":", "int", ")", ":", "\n", "    ", "ih", ",", "iw", "=", "input_size", "\n", "kh", ",", "kw", "=", "kernel_size", "\n", "assert", "ih", ">", "0", "and", "iw", ">", "0", "and", "kh", ">", "0", "and", "kw", ">", "0", "and", "stride", ">", "0", "\n", "\n", "kh", "=", "ih", "if", "kh", ">", "ih", "else", "kh", "\n", "kw", "=", "iw", "if", "kw", ">", "iw", "else", "kw", "\n", "\n", "num_rows", "=", "math", ".", "ceil", "(", "(", "ih", "-", "kh", ")", "/", "stride", ")", "if", "math", ".", "ceil", "(", "(", "ih", "-", "kh", ")", "/", "stride", ")", "*", "stride", "+", "kh", ">=", "ih", "else", "math", ".", "ceil", "(", "\n", "(", "ih", "-", "kh", ")", "/", "stride", ")", "+", "1", "\n", "num_cols", "=", "math", ".", "ceil", "(", "(", "iw", "-", "kw", ")", "/", "stride", ")", "if", "math", ".", "ceil", "(", "(", "iw", "-", "kw", ")", "/", "stride", ")", "*", "stride", "+", "kw", ">=", "iw", "else", "math", ".", "ceil", "(", "\n", "(", "iw", "-", "kw", ")", "/", "stride", ")", "+", "1", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "num_cols", "+", "1", ")", ",", "np", ".", "arange", "(", "num_rows", "+", "1", ")", ")", "\n", "xmin", "=", "x", "*", "stride", "\n", "ymin", "=", "y", "*", "stride", "\n", "\n", "xmin", "=", "xmin", ".", "ravel", "(", ")", "\n", "ymin", "=", "ymin", ".", "ravel", "(", ")", "\n", "xmin_offset", "=", "np", ".", "where", "(", "xmin", "+", "kw", ">", "iw", ",", "iw", "-", "xmin", "-", "kw", ",", "np", ".", "zeros_like", "(", "xmin", ")", ")", "\n", "ymin_offset", "=", "np", ".", "where", "(", "ymin", "+", "kh", ">", "ih", ",", "ih", "-", "ymin", "-", "kh", ",", "np", ".", "zeros_like", "(", "ymin", ")", ")", "\n", "boxes", "=", "np", ".", "stack", "(", "[", "xmin", "+", "xmin_offset", ",", "ymin", "+", "ymin_offset", ",", "\n", "np", ".", "minimum", "(", "xmin", "+", "kw", ",", "iw", ")", ",", "np", ".", "minimum", "(", "ymin", "+", "kh", ",", "ih", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedSampler.__init__": [[7, 10], ["torch.utils.data.distributed.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", "StepDistributedSampler", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", ",", "rank", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedSampler.set_step": [[11, 13], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "step", "=", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedSampler.__iter__": [[14, 29], ["torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "iter", "len", "len", "torch.randperm", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on step", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "step", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.__init__": [[32, 38], ["distributed.StepDistributedSampler.__init__", "int", "math.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indices", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", "StepDistributedRandomSubsetSampler", ",", "self", ")", ".", "__init__", "(", "[", "]", ",", "num_replicas", ",", "rank", ")", "\n", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "indices", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.__iter__": [[39, 54], ["torch.Generator", "torch.Generator.manual_seed", "iter", "len", "len", "torch.randperm", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on step", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "step", ")", "\n", "indices", "=", "[", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "torch", ".", "randperm", "(", "len", "(", "self", ".", "indices", ")", ",", "generator", "=", "g", ")", "]", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.__len__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.set_step": [[58, 60], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ")", ":", "\n", "        ", "self", ".", "step", "=", "step", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader": [[4, 12], ["ValueError"], "function", ["None"], ["def", "make_dataloader", "(", "config", ")", ":", "\n", "    ", "dataloader_type", "=", "config", "[", "'type'", "]", "\n", "if", "dataloader_type", "in", "registry", ".", "DATALOADER", ":", "\n", "        ", "data_loader", "=", "registry", ".", "DATALOADER", "[", "dataloader_type", "]", "(", "config", "[", "'params'", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'{} is not support now.'", ".", "format", "(", "dataloader_type", ")", ")", "\n", "\n", "", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_resize_to_range": [[6, 17], ["F.interpolate.size", "F.interpolate.size", "F.interpolate.size", "min", "max", "min", "torch.interpolate", "F.interpolate.permute().view", "F.interpolate.permute"], "function", ["None"], ["def", "_th_resize_to_range", "(", "image", ",", "min_size", ",", "max_size", ")", ":", "\n", "    ", "h", "=", "image", ".", "size", "(", "0", ")", "\n", "w", "=", "image", ".", "size", "(", "1", ")", "\n", "c", "=", "image", ".", "size", "(", "2", ")", "\n", "im_size_min", "=", "min", "(", "h", ",", "w", ")", "\n", "im_size_max", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "im_scale", "=", "min", "(", "min_size", "/", "im_size_min", ",", "max_size", "/", "im_size_max", ")", "\n", "\n", "image", "=", "F", ".", "interpolate", "(", "image", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "view", "(", "1", ",", "c", ",", "h", ",", "w", ")", ",", "scale_factor", "=", "im_scale", ",", "mode", "=", "'bilinear'", ")", "\n", "return", "image", ",", "im_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_mean_std_normalize": [[19, 37], ["torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "image.sub().div", "image.dim", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "image.sub"], "function", ["None"], ["", "def", "_th_mean_std_normalize", "(", "image", ",", "mean", "=", "(", "123.675", ",", "116.28", ",", "103.53", ")", ",", "std", "=", "(", "58.395", ",", "57.12", ",", "57.375", ")", ")", ":", "\n", "    ", "\"\"\" this version faster than torchvision.transforms.functional.normalize\n\n\n    Args:\n        image: 3-D or 4-D array of shape [batch (optional) , height, width, channel]\n        mean:  a list or tuple or ndarray\n        std: a list or tuple or ndarray\n\n    Returns:\n\n    \"\"\"", "\n", "shape", "=", "[", "1", "]", "*", "image", ".", "dim", "(", ")", "\n", "shape", "[", "-", "1", "]", "=", "-", "1", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "\n", "return", "image", ".", "sub", "(", "mean", ")", ".", "div", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_mean_std_normalize_": [[39, 57], ["torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "image.sub_().div_", "image.dim", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "image.sub_"], "function", ["None"], ["", "def", "_th_mean_std_normalize_", "(", "image", ",", "mean", "=", "(", "123.675", ",", "116.28", ",", "103.53", ")", ",", "std", "=", "(", "58.395", ",", "57.12", ",", "57.375", ")", ")", ":", "\n", "    ", "\"\"\" this version faster than torchvision.transforms.functional.normalize\n\n\n    Args:\n        image: 3-D or 4-D array of shape [batch (optional) , height, width, channel]\n        mean:  a list or tuple or ndarray\n        std: a list or tuple or ndarray\n\n    Returns:\n\n    \"\"\"", "\n", "shape", "=", "[", "1", "]", "*", "image", ".", "dim", "(", ")", "\n", "shape", "[", "-", "1", "]", "=", "-", "1", "\n", "mean", "=", "torch", ".", "tensor", "(", "mean", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "std", ",", "requires_grad", "=", "False", ")", ".", "reshape", "(", "*", "shape", ")", "\n", "\n", "return", "image", ".", "sub_", "(", "mean", ")", ".", "div_", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_divisible_pad": [[59, 78], ["torch.pad", "tensor.size", "tensor.size", "math.ceil", "math.ceil"], "function", ["None"], ["", "def", "_th_divisible_pad", "(", "tensor", ",", "size_divisor", ":", "int", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        tensor: 4-D tensor of shape [batch, channel, height, width]\n        size_divisor: int\n        mode: ``'constant'``, ``'reflect'``, ``'replicate'`` or ``'circular'``.\n            Default: ``'constant'``\n        value: fill value for ``'constant'`` padding. Default: ``0``\n\n    Returns:\n\n    \"\"\"", "\n", "height", ",", "width", "=", "tensor", ".", "size", "(", "2", ")", ",", "tensor", ".", "size", "(", "3", ")", "\n", "nheight", "=", "math", ".", "ceil", "(", "height", "/", "size_divisor", ")", "*", "size_divisor", "\n", "nwidth", "=", "math", ".", "ceil", "(", "width", "/", "size_divisor", ")", "*", "size_divisor", "\n", "\n", "pad_tensor", "=", "F", ".", "pad", "(", "tensor", ",", "pad", "=", "[", "0", ",", "nwidth", "-", "width", ",", "0", ",", "nheight", "-", "height", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "mode", "=", "mode", ",", "value", "=", "value", ")", "\n", "return", "pad_tensor", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.cross_validation.CrossValSamplerGenerator.__init__": [[10, 29], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ":", "Dataset", ",", "\n", "distributed", "=", "True", ",", "\n", "seed", "=", "2333", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            dataset: a instance of torch.utils.data.dataset.Dataset\n            distributed: whether to use distributed random sampler\n            seed: random seed for torch.randperm\n\n        Example::\n            >>> CV = CrossValSamplerGenerator(dataset, distributed=True, seed=2333)\n            >>> sampler_pairs = CV.k_fold(5) # 5-fold CV\n            >>> train_sampler, val_sampler = sampler_pairs[0] # 0-th as val, 1, 2, 3, 4 as train\n        \"\"\"", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.cross_validation.CrossValSamplerGenerator.k_fold": [[30, 56], ["torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "int", "range", "len", "k_fold_indices.copy", "k_fold_indices.copy.pop", "functools.reduce", "torch.randperm", "math.ceil", "range", "sampler_pairs.append", "sampler_pairs.append", "len", "len", "len", "len", "simplecv.data.distributed.StepDistributedRandomSubsetSampler", "simplecv.data.distributed.StepDistributedRandomSubsetSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler"], "methods", ["None"], ["", "def", "k_fold", "(", "self", ",", "k", "=", "5", ")", ":", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_samples", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "total_size", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "indices", ")", "/", "k", ")", "*", "k", ")", "\n", "indices", "+=", "indices", "[", ":", "(", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "\n", "assert", "len", "(", "indices", ")", "==", "total_size", "\n", "\n", "# subsample", "\n", "sampler_pairs", "=", "[", "]", "\n", "k_fold_indices", "=", "[", "indices", "[", "i", ":", "total_size", ":", "k", "]", "for", "i", "in", "range", "(", "k", ")", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "cp", "=", "k_fold_indices", ".", "copy", "(", ")", "\n", "val_indices", "=", "cp", ".", "pop", "(", "i", ")", "\n", "train_indices", "=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "+", "b", ",", "cp", ")", "\n", "assert", "len", "(", "val_indices", ")", "+", "len", "(", "train_indices", ")", "==", "total_size", "\n", "\n", "if", "self", ".", "distributed", ":", "\n", "                ", "sampler_pairs", ".", "append", "(", "(", "StepDistributedRandomSubsetSampler", "(", "train_indices", ")", ",", "\n", "StepDistributedRandomSubsetSampler", "(", "val_indices", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "sampler_pairs", ".", "append", "(", "(", "SubsetRandomSampler", "(", "train_indices", ")", ",", "SubsetRandomSampler", "(", "val_indices", ")", ")", ")", "\n", "\n", "", "", "return", "sampler_pairs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_crop": [[16, 21], ["isinstance", "simplecv.data._np_preprocess._np_random_crop", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_random_crop"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.divisible_pad": [[23, 49], ["numpy.array().max", "int", "int", "enumerate", "torch.FloatStorage._new_shared", "torch.Tensor().view", "np.zeros.zero_", "numpy.zeros", "torch.from_numpy", "numpy.array", "numpy.ceil", "numpy.ceil", "len", "numpy.prod", "torch.Tensor", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.resize_to_range": [[51, 68], ["isinstance", "simplecv.data._np_preprocess._np_resize_to_range", "isinstance", "simplecv.data._th_preprocess._th_resize_to_range", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_resize_to_range", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_resize_to_range"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.transpose": [[70, 85], ["numpy.transpose", "ret.append", "numpy.transpose", "ret.append", "numpy.split", "numpy.concatenate", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_90": [[87, 103], ["numpy.rot90", "ret.append", "numpy.rot90", "ret.append", "numpy.split", "numpy.concatenate", "ret.append", "tuple", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_180": [[105, 121], ["numpy.rot90", "ret.append", "numpy.rot90", "ret.append", "numpy.split", "numpy.concatenate", "ret.append", "tuple", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_270": [[123, 139], ["numpy.rot90", "ret.append", "numpy.rot90", "ret.append", "numpy.split", "numpy.concatenate", "ret.append", "tuple", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.flip_left_right": [[141, 169], ["ret.append", "ret.append", "boxes.copy", "ret.append", "tuple", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.scale_image": [[171, 177], ["isinstance", "simplecv.data._np_preprocess._np_im_scale", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_im_scale"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_scale_image": [[179, 185], ["isinstance", "simplecv.data._np_preprocess._np_im_random_scale", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_im_random_scale"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.scale_image_and_label": [[187, 220], ["cv2.resize", "int", "int", "numpy.zeros", "numpy.zeros", "cv2.resize", "numpy.ceil", "numpy.ceil", "numpy.zeros", "numpy.zeros"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.mean_std_normalize": [[222, 239], ["isinstance", "simplecv.data._np_preprocess._np_mean_std_normalize", "isinstance", "simplecv.data._th_preprocess._th_mean_std_normalize", "ValueError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._np_preprocess._np_mean_std_normalize", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data._th_preprocess._th_mean_std_normalize"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.channel_last_to_first": [[241, 252], ["numpy.transpose"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.flip_up_down": [[254, 282], ["ret.append", "ret.append", "boxes.copy", "ret.append", "tuple", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_flip_up_down": [[284, 306], ["numpy.random.random", "preprocess.flip_up_down", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.flip_up_down"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_flip_left_right": [[308, 330], ["numpy.random.random", "preprocess.flip_left_right", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.flip_left_right"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_rotate_90": [[332, 344], ["numpy.random.random", "preprocess.rotate_90", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_90"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_rotate_180": [[346, 358], ["numpy.random.random", "preprocess.rotate_180", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_180"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_rotate_270": [[360, 372], ["numpy.random.random", "preprocess.rotate_270", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.rotate_270"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.preprocess.random_transpose": [[374, 386], ["numpy.random.random", "preprocess.transpose", "ret.append", "ret.append", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.__init__": [[15, 19], ["iterator.Iterator.iter"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["    ", "def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "_data_loader", "=", "data_loader", "\n", "self", ".", "_iterator", "=", "iter", "(", "self", ".", "_data_loader", ")", "\n", "self", ".", "_current_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.next": [[20, 40], ["range", "data_list.append", "iterator.Iterator.next"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next"], ["", "def", "next", "(", "self", ",", "forward_times", "=", "1", ",", "call_backs", "=", "None", ",", "is_master", "=", "True", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "forward_times", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "data", "=", "next", "(", "self", ".", "_iterator", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "self", ".", "reset", "(", ")", "\n", "self", ".", "_current_epoch", "+=", "1", "\n", "if", "is_master", ":", "\n", "                    ", "if", "call_backs", "is", "not", "None", ":", "\n", "                        ", "for", "f", "in", "call_backs", ":", "\n", "                            ", "if", "isinstance", "(", "f", ",", "tuple", ")", ":", "\n", "                                ", "f", ",", "call_back_interval", "=", "f", "\n", "if", "self", ".", "_current_epoch", "%", "call_back_interval", "!=", "0", ":", "\n", "                                    ", "continue", "\n", "", "", "f", "(", ")", "\n", "", "", "", "data", "=", "next", "(", "self", ".", "_iterator", ")", "\n", "\n", "", "data_list", ".", "append", "(", "data", ")", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.reset": [[41, 43], ["iterator.Iterator.iter"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_iterator", "=", "iter", "(", "self", ".", "_data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter": [[44, 59], ["data_list.append", "len"], "methods", ["None"], ["", "def", "iter", "(", "self", ",", "forward_times", "=", "1", ")", ":", "\n", "        ", "\"\"\" a droplast iterator\n        \n        Args:\n            forward_times: int\n\n        Returns:\n        \n        \"\"\"", "\n", "data_list", "=", "[", "]", "\n", "for", "data", "in", "self", ".", "_iterator", ":", "\n", "            ", "data_list", ".", "append", "(", "data", ")", "\n", "if", "len", "(", "data_list", ")", "==", "forward_times", ":", "\n", "                ", "yield", "data_list", "\n", "data_list", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.set_seed_for_dist_sampler": [[60, 77], ["isinstance", "hasattr", "iterator.Iterator._data_loader.batch_sampler.sampler.set_step", "hasattr", "hasattr", "warnings.warn", "iterator.Iterator._data_loader.batch_sampler.sampler.set_epoch", "iterator.Iterator._data_loader.sampler.set_step", "hasattr", "iterator.Iterator._data_loader.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.set_step", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.distributed.StepDistributedRandomSubsetSampler.set_step"], ["", "", "", "def", "set_seed_for_dist_sampler", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "self", ".", "_data_loader", ".", "sampler", ",", "DistributedSampler", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_data_loader", ".", "batch_sampler", "is", "not", "None", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "_data_loader", ".", "batch_sampler", ".", "sampler", ",", "'set_step'", ")", ":", "\n", "                ", "self", ".", "_data_loader", ".", "batch_sampler", ".", "sampler", ".", "set_step", "(", "seed", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "_data_loader", ".", "batch_sampler", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "                ", "self", ".", "_data_loader", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "seed", ")", "\n", "\n", "", "", "elif", "self", ".", "_data_loader", ".", "sampler", "is", "not", "None", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "_data_loader", ".", "sampler", ",", "'set_step'", ")", ":", "\n", "                ", "self", ".", "_data_loader", ".", "sampler", ".", "set_step", "(", "seed", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "_data_loader", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "                ", "self", ".", "_data_loader", ".", "sampler", ".", "set_epoch", "(", "seed", ")", "\n", "", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "'batch_sampler and sampler are not found in data_loader, therefore no shuffle here.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.__init__": [[80, 87], ["iter", "torch.cuda.Stream", "iterator.Prefetcher.preload", "torch.cuda.is_available", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.preload"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "self", ".", "_device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "_dataloader", "=", "dataloader", "\n", "self", ".", "loader", "=", "iter", "(", "dataloader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.next": [[88, 96], ["torch.cuda.current_stream().wait_stream", "iterator.Prefetcher.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.preload"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "data", "=", "self", ".", "data", "\n", "try", ":", "\n", "            ", "self", ".", "preload", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.preload": [[97, 106], ["iterator.Prefetcher.next"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "data", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "data", "=", "None", "\n", "raise", "StopIteration", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "self", ".", "data", "=", "tensor_util", ".", "to_device", "(", "self", ".", "data", ",", "self", ".", "_device", ",", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.reset": [[107, 110], ["iter", "iterator.Prefetcher.preload"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Prefetcher.preload"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "self", ".", "_dataloader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.__init__": [[113, 117], ["iterator.Iterator.__init__", "iterator.Prefetcher"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "super", "(", "PrefetchedIterator", ",", "self", ")", ".", "__init__", "(", "data_loader", ")", "\n", "\n", "self", ".", "_prefetcher", "=", "Prefetcher", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next": [[118, 133], ["range", "data_list.append", "iterator.PrefetchedIterator._prefetcher.next", "iterator.PrefetchedIterator.reset", "iterator.PrefetchedIterator._prefetcher.next", "f"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.reset", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next"], ["", "def", "next", "(", "self", ",", "forward_times", "=", "1", ",", "call_backs", "=", "None", ",", "is_master", "=", "True", ")", ":", "\n", "        ", "data_list", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "forward_times", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "data", "=", "self", ".", "_prefetcher", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                ", "self", ".", "reset", "(", ")", "\n", "if", "is_master", ":", "\n", "                    ", "if", "call_backs", "is", "not", "None", ":", "\n", "                        ", "for", "f", "in", "call_backs", ":", "\n", "                            ", "f", "(", ")", "\n", "", "", "", "data", "=", "self", ".", "_prefetcher", ".", "next", "(", ")", "\n", "\n", "", "data_list", ".", "append", "(", "data", ")", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.reset": [[134, 137], ["iterator.PrefetchedIterator._prefetcher.reset", "iter"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.reset", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_prefetcher", ".", "reset", "(", ")", "\n", "self", ".", "_iterator", "=", "iter", "(", "self", ".", "_data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.get_iterator": [[7, 12], ["KeyError"], "function", ["None"], ["def", "get_iterator", "(", "type_name", ")", ":", "\n", "    ", "if", "type_name", "in", "ITERATOR_TYPE", ":", "\n", "        ", "return", "ITERATOR_TYPE", "[", "type_name", "]", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'{} is not support.'", ".", "format", "(", "type_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.simplecv.apex_ddp_train.half_bn": [[40, 44], ["classname.find", "m.half"], "function", ["None"], ["def", "half_bn", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "half", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.simplecv.apex_ddp_train.run": [[46, 107], ["simplecv.util.config.import_config", "simplecv.core.config.AttrDict.from_dict", "simplecv.module.model_builder.make_model", "cfg[].get", "simplecv.opt.learning_rate.make_learningrate", "simplecv.opt.optimizer.make_optimizer", "simplecv.data.data_loader.make_dataloader", "simplecv.core.trainer.Launcher", "trainer.Launcher.logger.info", "trainer.Launcher.logger.info", "trainer.Launcher.logger.info", "trainer.Launcher.override_backward", "trainer.Launcher.train_by_config", "dict", "AttrDict.from_dict.update_from_list", "apex.parallel.convert_syncbn_model", "torch.cuda.is_available", "torch.cuda.is_available", "DDP.to", "torch.is_available", "simplecv.data.data_loader.make_dataloader", "DDP.parameters", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.device", "torch.device", "amp.initialize", "cfg[].get", "DDP", "f", "simplecv.core._misc.merge_dict", "DDP.apply", "cfg[].get"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.config.import_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.from_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.model_builder.make_model", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.make_learningrate", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.optimizer.make_optimizer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.override_backward", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_by_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update_from_list", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.merge_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply"], ["", "", "def", "run", "(", "local_rank", ",", "\n", "config_path", ",", "\n", "model_dir", ",", "\n", "opt_level", "=", "'O0'", ",", "\n", "cpu_mode", "=", "False", ",", "\n", "after_construct_launcher_callbacks", "=", "None", ",", "\n", "opts", "=", "None", ")", ":", "\n", "# 0. config", "\n", "    ", "cfg", "=", "config", ".", "import_config", "(", "config_path", ")", "\n", "cfg", "=", "AttrDict", ".", "from_dict", "(", "cfg", ")", "\n", "if", "opts", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "update_from_list", "(", "opts", ")", "\n", "# 1. model", "\n", "", "model", "=", "make_model", "(", "cfg", "[", "'model'", "]", ")", "\n", "if", "cfg", "[", "'train'", "]", ".", "get", "(", "'apex_sync_bn'", ",", "False", ")", ":", "\n", "        ", "model", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "model", ")", "\n", "# 2. optimizer", "\n", "", "lr_schedule", "=", "make_learningrate", "(", "cfg", "[", "'learning_rate'", "]", ")", "\n", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "'lr'", "]", "=", "lr_schedule", ".", "base_lr", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", "[", "'optimizer'", "]", ",", "params", "=", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "not", "cpu_mode", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "", "model", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "# if OPT_LEVELS.index(opt_level) < 2:", "\n", "#     keep_batchnorm_fp32 = None", "\n", "            ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "opt_level", "=", "opt_level", ",", "\n", ")", "\n", "# half bn for https://github.com/NVIDIA/apex/issues/122, when frozen bn", "\n", "if", "cfg", "[", "'train'", "]", ".", "get", "(", "'half_bn'", ",", "False", ")", ":", "\n", "                ", "model", ".", "apply", "(", "half_bn", ")", "\n", "\n", "", "model", "=", "DDP", "(", "\n", "model", ",", "delay_allreduce", "=", "True", ",", "\n", ")", "\n", "# 3. data", "\n", "", "", "traindata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'train'", "]", ")", "\n", "testdata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'test'", "]", ")", "if", "'test'", "in", "cfg", "[", "'data'", "]", "else", "None", "\n", "tl", "=", "trainer", ".", "Launcher", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "lr_schedule", "=", "lr_schedule", ")", "\n", "# log dist train info", "\n", "tl", ".", "logger", ".", "info", "(", "'[NVIDIA/apex] amp optimizer. opt_level = {}'", ".", "format", "(", "opt_level", ")", ")", "\n", "tl", ".", "logger", ".", "info", "(", "'apex sync bn: {}'", ".", "format", "(", "'on'", "if", "cfg", "[", "'train'", "]", ".", "get", "(", "'apex_sync_bn'", ",", "False", ")", "else", "'off'", ")", ")", "\n", "tl", ".", "logger", ".", "info", "(", "'external parameter: {}'", ".", "format", "(", "opts", ")", ")", "\n", "tl", ".", "override_backward", "(", "default_backward", ".", "amp_backward", ")", "\n", "\n", "if", "after_construct_launcher_callbacks", "is", "not", "None", ":", "\n", "        ", "for", "f", "in", "after_construct_launcher_callbacks", ":", "\n", "            ", "f", "(", "tl", ")", "\n", "\n", "", "", "tl", ".", "train_by_config", "(", "traindata_loader", ",", "config", "=", "merge_dict", "(", "cfg", "[", "'train'", "]", ",", "cfg", "[", "'test'", "]", ")", ",", "test_data_loader", "=", "testdata_loader", ")", "\n", "return", "dict", "(", "config", "=", "cfg", ",", "launcher", "=", "tl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.simplecv.ddp_train.run": [[29, 74], ["simplecv.util.config.import_config", "simplecv.core.config.AttrDict.from_dict", "simplecv.module.model_builder.make_model", "cfg[].get", "simplecv.data.data_loader.make_dataloader", "simplecv.opt.learning_rate.make_learningrate", "simplecv.opt.optimizer.make_optimizer", "simplecv.core.trainer.Launcher", "trainer.Launcher.logger.info", "trainer.Launcher.logger.info", "trainer.Launcher.train_by_config", "dict", "AttrDict.from_dict.update_from_list", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "nn.parallel.DistributedDataParallel.to", "torch.is_available", "simplecv.data.data_loader.make_dataloader", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.device", "torch.device", "torch.device", "torch.parallel.DistributedDataParallel", "nn.parallel.DistributedDataParallel.parameters", "f", "simplecv.core._misc.merge_dict", "cfg[].get"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.config.import_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.from_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.model_builder.make_model", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.make_learningrate", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.optimizer.make_optimizer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_by_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update_from_list", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.merge_dict"], ["def", "run", "(", "local_rank", ",", "config_path", ",", "model_dir", ",", "cpu_mode", "=", "False", ",", "after_construct_launcher_callbacks", "=", "None", ",", "opts", "=", "None", ")", ":", "\n", "# 0. config", "\n", "    ", "cfg", "=", "config", ".", "import_config", "(", "config_path", ")", "\n", "cfg", "=", "AttrDict", ".", "from_dict", "(", "cfg", ")", "\n", "if", "opts", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "update_from_list", "(", "opts", ")", "\n", "# 1. model", "\n", "", "model", "=", "make_model", "(", "cfg", "[", "'model'", "]", ")", "\n", "if", "cfg", "[", "'train'", "]", ".", "get", "(", "'sync_bn'", ",", "False", ")", ":", "\n", "        ", "model", "=", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "\n", "", "if", "not", "cpu_mode", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", "\n", ")", "\n", "", "model", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "model", ",", "device_ids", "=", "[", "local_rank", "]", ",", "output_device", "=", "local_rank", ",", "\n", ")", "\n", "\n", "# 2. data", "\n", "", "", "traindata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'train'", "]", ")", "\n", "testdata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'test'", "]", ")", "if", "'test'", "in", "cfg", "[", "'data'", "]", "else", "None", "\n", "\n", "# 3. optimizer", "\n", "lr_schedule", "=", "make_learningrate", "(", "cfg", "[", "'learning_rate'", "]", ")", "\n", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "'lr'", "]", "=", "lr_schedule", ".", "base_lr", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", "[", "'optimizer'", "]", ",", "params", "=", "model", ".", "parameters", "(", ")", ")", "\n", "tl", "=", "trainer", ".", "Launcher", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "lr_schedule", "=", "lr_schedule", ")", "\n", "\n", "if", "after_construct_launcher_callbacks", "is", "not", "None", ":", "\n", "        ", "for", "f", "in", "after_construct_launcher_callbacks", ":", "\n", "            ", "f", "(", "tl", ")", "\n", "\n", "", "", "tl", ".", "logger", ".", "info", "(", "'sync bn: {}'", ".", "format", "(", "'True'", "if", "cfg", "[", "'train'", "]", ".", "get", "(", "'sync_bn'", ",", "False", ")", "else", "'False'", ")", ")", "\n", "tl", ".", "logger", ".", "info", "(", "'external parameter: {}'", ".", "format", "(", "opts", ")", ")", "\n", "tl", ".", "train_by_config", "(", "traindata_loader", ",", "config", "=", "merge_dict", "(", "cfg", "[", "'train'", "]", ",", "cfg", "[", "'test'", "]", ")", ",", "test_data_loader", "=", "testdata_loader", ")", "\n", "return", "dict", "(", "config", "=", "cfg", ",", "launcher", "=", "tl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.simplecv.dp_train.run": [[27, 64], ["simplecv.util.config.import_config", "simplecv.core.config.AttrDict.from_dict", "simplecv.module.model_builder.make_model", "simplecv.data.data_loader.make_dataloader", "simplecv.opt.learning_rate.make_learningrate", "simplecv.opt.optimizer.make_optimizer", "simplecv.core.trainer.Launcher", "trainer.Launcher.logger.info", "trainer.Launcher.train_by_config", "dict", "AttrDict.from_dict.update_from_list", "torch.cuda.is_available", "torch.cuda.is_available", "simplecv.data.data_loader.make_dataloader", "nn.DataParallel.to", "torch.DataParallel", "nn.DataParallel.parameters", "f", "simplecv.core._misc.merge_dict", "torch.device", "torch.device", "list", "range", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.config.import_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.from_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.model_builder.make_model", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.make_learningrate", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.optimizer.make_optimizer", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_by_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update_from_list", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.data_loader.make_dataloader", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.merge_dict"], ["def", "run", "(", "config_path", ",", "model_dir", ",", "cpu_mode", "=", "False", ",", "after_construct_launcher_callbacks", "=", "None", ",", "opts", "=", "None", ")", ":", "\n", "# 0. config", "\n", "    ", "cfg", "=", "config", ".", "import_config", "(", "config_path", ")", "\n", "cfg", "=", "AttrDict", ".", "from_dict", "(", "cfg", ")", "\n", "\n", "if", "opts", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "update_from_list", "(", "opts", ")", "\n", "# 1. model", "\n", "", "model", "=", "make_model", "(", "cfg", "[", "'model'", "]", ")", "\n", "\n", "if", "not", "cpu_mode", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "model", ".", "to", "(", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", ")", "\n", "\n", "# 2. data", "\n", "", "", "traindata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'train'", "]", ")", "\n", "testdata_loader", "=", "make_dataloader", "(", "cfg", "[", "'data'", "]", "[", "'test'", "]", ")", "if", "'test'", "in", "cfg", "[", "'data'", "]", "else", "None", "\n", "\n", "# 3. optimizer", "\n", "lr_schedule", "=", "make_learningrate", "(", "cfg", "[", "'learning_rate'", "]", ")", "\n", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "'lr'", "]", "=", "lr_schedule", ".", "base_lr", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", "[", "'optimizer'", "]", ",", "params", "=", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "tl", "=", "trainer", ".", "Launcher", "(", "\n", "model_dir", "=", "model_dir", ",", "\n", "model", "=", "model", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "lr_schedule", "=", "lr_schedule", ")", "\n", "\n", "if", "after_construct_launcher_callbacks", "is", "not", "None", ":", "\n", "        ", "for", "f", "in", "after_construct_launcher_callbacks", ":", "\n", "            ", "f", "(", "tl", ")", "\n", "\n", "", "", "tl", ".", "logger", ".", "info", "(", "'external parameter: {}'", ".", "format", "(", "opts", ")", ")", "\n", "tl", ".", "train_by_config", "(", "traindata_loader", ",", "config", "=", "merge_dict", "(", "cfg", "[", "'train'", "]", ",", "cfg", "[", "'test'", "]", ")", ",", "test_data_loader", "=", "testdata_loader", ")", "\n", "return", "dict", "(", "config", "=", "cfg", ",", "launcher", "=", "tl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.__init__": [[14, 26], ["scipy.sparse.coo_matrix", "os.makedirs", "simplecv.util.logger.get_console_file_logger"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_console_file_logger"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "logdir", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_total", "=", "sparse", ".", "coo_matrix", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "logdir", "is", "not", "None", ":", "\n", "            ", "os", ".", "makedirs", "(", "logdir", ",", "exist_ok", "=", "True", ")", "\n", "", "self", ".", "logdir", "=", "logdir", "\n", "if", "logdir", "is", "not", "None", "and", "logger", "is", "None", ":", "\n", "            ", "self", ".", "_logger", "=", "get_console_file_logger", "(", "'PixelMertic'", ",", "logging", ".", "INFO", ",", "self", ".", "logdir", ")", "\n", "", "elif", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "_logger", "=", "logger", "\n", "", "else", ":", "\n", "            ", "self", ".", "_logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.logger": [[27, 30], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "logger", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.reset": [[31, 34], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "num_classes", "=", "self", ".", "num_classes", "\n", "self", ".", "_total", "=", "sparse", ".", "coo_matrix", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_iou_per_class": [[35, 51], ["numpy.sum", "numpy.sum", "numpy.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_iou_per_class", "(", "confusion_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            confusion_matrix: numpy array [num_classes, num_classes] row - gt, col - pred\n        Returns:\n            iou_per_class: float32 [num_classes, ]\n        \"\"\"", "\n", "sum_over_row", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "0", ")", "\n", "sum_over_col", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "1", ")", "\n", "diag", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "denominator", "=", "sum_over_row", "+", "sum_over_col", "-", "diag", "\n", "\n", "iou_per_class", "=", "diag", "/", "(", "denominator", "+", "EPS", ")", "\n", "\n", "return", "iou_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_recall_per_class": [[52, 58], ["numpy.sum", "numpy.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_recall_per_class", "(", "confusion_matrix", ")", ":", "\n", "        ", "sum_over_row", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "1", ")", "\n", "diag", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "recall_per_class", "=", "diag", "/", "(", "sum_over_row", "+", "EPS", ")", "\n", "return", "recall_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_precision_per_class": [[59, 65], ["numpy.sum", "numpy.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_precision_per_class", "(", "confusion_matrix", ")", ":", "\n", "        ", "sum_over_col", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "0", ")", "\n", "diag", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "precision_per_class", "=", "diag", "/", "(", "sum_over_col", "+", "EPS", ")", "\n", "return", "precision_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_overall_accuracy": [[66, 70], ["numpy.diag", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_overall_accuracy", "(", "confusion_matrix", ")", ":", "\n", "        ", "diag", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "return", "np", ".", "sum", "(", "diag", ")", "/", "(", "np", ".", "sum", "(", "confusion_matrix", ")", "+", "EPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_F_measure_per_class": [[71, 79], ["NPPixelMertic.compute_precision_per_class", "NPPixelMertic.compute_recall_per_class"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_precision_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_recall_per_class"], ["", "@", "staticmethod", "\n", "def", "compute_F_measure_per_class", "(", "confusion_matrix", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "precision_per_class", "=", "NPPixelMertic", ".", "compute_precision_per_class", "(", "confusion_matrix", ")", "\n", "recall_per_class", "=", "NPPixelMertic", ".", "compute_recall_per_class", "(", "confusion_matrix", ")", "\n", "F1_per_class", "=", "(", "1", "+", "beta", "**", "2", ")", "*", "precision_per_class", "*", "recall_per_class", "/", "(", "\n", "(", "beta", "**", "2", ")", "*", "precision_per_class", "+", "recall_per_class", "+", "EPS", ")", "\n", "\n", "return", "F1_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.forward": [[80, 92], ["isinstance", "isinstance", "y_pred.cpu().numpy.cpu().numpy.reshape", "y_true.cpu().numpy.cpu().numpy.reshape", "numpy.ones_like", "scipy.sparse.coo_matrix", "y_pred.cpu().numpy.cpu().numpy.cpu().numpy", "y_true.cpu().numpy.cpu().numpy.cpu().numpy", "y_pred.cpu().numpy.cpu().numpy.cpu", "y_true.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "if", "isinstance", "(", "y_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "y_pred", "=", "y_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "y_true", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "y_true", "=", "y_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "y_pred", "=", "y_pred", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "y_true", "=", "y_true", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "v", "=", "np", ".", "ones_like", "(", "y_pred", ")", "\n", "cm", "=", "sparse", ".", "coo_matrix", "(", "(", "v", ",", "(", "y_true", ",", "y_pred", ")", ")", ",", "shape", "=", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_total", "+=", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric._log_summary": [[93, 100], ["pixel.NPPixelMetric.logger.info", "print", "numpy.save", "table.get_string", "os.path.join", "time.time"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save"], ["", "def", "_log_summary", "(", "self", ",", "table", ",", "dense_cm", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'\\n'", "+", "table", ".", "get_string", "(", ")", ")", "\n", "if", "self", ".", "logdir", "is", "not", "None", ":", "\n", "                ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "'confusion_matrix-{time}.npy'", ".", "format", "(", "time", "=", "time", ".", "time", "(", ")", ")", ")", ",", "dense_cm", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "table", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.summary_iou": [[101, 115], ["pixel.NPPixelMetric._total.toarray", "NPPixelMertic.compute_iou_per_class", "NPPixelMertic.compute_iou_per_class.mean", "prettytable.PrettyTable", "enumerate", "prettytable.PrettyTable.add_row", "pixel.NPPixelMetric._log_summary", "prettytable.PrettyTable.add_row"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.compute_iou_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric._log_summary"], ["", "", "def", "summary_iou", "(", "self", ")", ":", "\n", "        ", "dense_cm", "=", "self", ".", "_total", ".", "toarray", "(", ")", "\n", "iou_per_class", "=", "NPPixelMertic", ".", "compute_iou_per_class", "(", "dense_cm", ")", "\n", "miou", "=", "iou_per_class", ".", "mean", "(", ")", "\n", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", ")", "\n", "tb", ".", "field_names", "=", "[", "'class'", ",", "'iou'", "]", "\n", "for", "idx", ",", "iou", "in", "enumerate", "(", "iou_per_class", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "idx", ",", "iou", "]", ")", "\n", "", "tb", ".", "add_row", "(", "[", "'mIoU'", ",", "miou", "]", ")", "\n", "\n", "self", ".", "_log_summary", "(", "tb", ",", "dense_cm", ")", "\n", "\n", "return", "tb", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.summary_all": [[116, 141], ["pixel.NPPixelMetric._total.toarray", "NPPixelMertic.compute_iou_per_class", "NPPixelMertic.compute_iou_per_class.mean", "NPPixelMertic.compute_F_measure_per_class", "NPPixelMertic.compute_F_measure_per_class.mean", "NPPixelMertic.compute_overall_accuracy", "NPPixelMertic.compute_precision_per_class", "NPPixelMertic.compute_precision_per_class.mean", "NPPixelMertic.compute_recall_per_class", "NPPixelMertic.compute_recall_per_class.mean", "prettytable.PrettyTable", "enumerate", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.add_row", "pixel.NPPixelMetric._log_summary", "zip", "prettytable.PrettyTable.add_row"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.compute_iou_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_F_measure_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_overall_accuracy", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_precision_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric.compute_recall_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.pixel.NPPixelMetric._log_summary"], ["", "def", "summary_all", "(", "self", ")", ":", "\n", "        ", "dense_cm", "=", "self", ".", "_total", ".", "toarray", "(", ")", "\n", "iou_per_class", "=", "NPPixelMertic", ".", "compute_iou_per_class", "(", "dense_cm", ")", "\n", "miou", "=", "iou_per_class", ".", "mean", "(", ")", "\n", "F1_per_class", "=", "NPPixelMertic", ".", "compute_F_measure_per_class", "(", "dense_cm", ",", "beta", "=", "1.0", ")", "\n", "mF1", "=", "F1_per_class", ".", "mean", "(", ")", "\n", "overall_accuracy", "=", "NPPixelMertic", ".", "compute_overall_accuracy", "(", "dense_cm", ")", "\n", "precision_per_class", "=", "NPPixelMertic", ".", "compute_precision_per_class", "(", "dense_cm", ")", "\n", "mprec", "=", "precision_per_class", ".", "mean", "(", ")", "\n", "recall_per_class", "=", "NPPixelMertic", ".", "compute_recall_per_class", "(", "dense_cm", ")", "\n", "mrecall", "=", "recall_per_class", ".", "mean", "(", ")", "\n", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", ")", "\n", "tb", ".", "field_names", "=", "[", "'class'", ",", "'iou'", ",", "'f1'", ",", "'precision'", ",", "'recall'", "]", "\n", "\n", "for", "idx", ",", "(", "iou", ",", "f1", ",", "precision", ",", "recall", ")", "in", "enumerate", "(", "\n", "zip", "(", "iou_per_class", ",", "F1_per_class", ",", "precision_per_class", ",", "recall_per_class", ")", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "idx", ",", "iou", ",", "f1", ",", "precision", ",", "recall", "]", ")", "\n", "\n", "", "tb", ".", "add_row", "(", "[", "'mean'", ",", "miou", ",", "mF1", ",", "mprec", ",", "mrecall", "]", ")", "\n", "tb", ".", "add_row", "(", "[", "'OA'", ",", "overall_accuracy", ",", "'-'", ",", "'-'", ",", "'-'", "]", ")", "\n", "\n", "self", ".", "_log_summary", "(", "tb", ",", "dense_cm", ")", "\n", "\n", "return", "tb", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.confusion_matrix.ConfusionMatrix.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.confusion_matrix.ConfusionMatrix.__call__": [[8, 10], ["simplecv.th_confusion_matrix"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix"], ["", "def", "__call__", "(", "self", ",", "y_true", ",", "y_pred", ",", "to_dense", "=", "True", ")", ":", "\n", "        ", "return", "mF", ".", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "self", ".", "num_classes", ",", "to_dense", "=", "to_dense", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.confusion_matrix.ConfusionMatrix.summary": [[11, 14], ["None"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "# todo (visualize)", "\n", "        ", "return", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.THMeanIntersectionOverUnion.__init__": [[11, 14], ["torch.zeros().to_sparse", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_total_cm", "=", "torch", ".", "zeros", "(", "num_classes", ",", "num_classes", ")", ".", "to_sparse", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.THMeanIntersectionOverUnion.__call__": [[15, 18], ["simplecv.th_confusion_matrix", "y_true.view", "y_pred.view"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix"], ["", "def", "__call__", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "sparse_cm", "=", "mF", ".", "th_confusion_matrix", "(", "y_true", ".", "view", "(", "-", "1", ")", ",", "y_pred", ".", "view", "(", "-", "1", ")", ",", "self", ".", "num_classes", ",", "to_dense", "=", "False", ")", "\n", "self", ".", "_total_cm", "+=", "sparse_cm", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.THMeanIntersectionOverUnion.summary": [[19, 34], ["simplecv.intersection_over_union_per_class", "simplecv.intersection_over_union_per_class.mean", "prettytable.PrettyTable", "enumerate", "prettytable.PrettyTable.add_row", "iou_per_class.mean.THMeanIntersectionOverUnion._total_cm.to_dense", "prettytable.PrettyTable.add_row", "simplecv.util.logger.get_console_file_logger", "simplecv.util.logger.get_console_file_logger.info", "print", "prettytable.PrettyTable.get_string"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.intersection_over_union_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_console_file_logger", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "summary", "(", "self", ",", "log_dir", "=", "None", ")", ":", "\n", "        ", "iou_per_class", "=", "mF", ".", "intersection_over_union_per_class", "(", "self", ".", "_total_cm", ".", "to_dense", "(", ")", ")", "\n", "miou", "=", "iou_per_class", ".", "mean", "(", ")", "\n", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", ")", "\n", "tb", ".", "field_names", "=", "[", "'class'", ",", "'iou'", "]", "\n", "for", "idx", ",", "iou", "in", "enumerate", "(", "iou_per_class", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "idx", ",", "iou", "]", ")", "\n", "", "tb", ".", "add_row", "(", "[", "'mIoU'", ",", "miou", "]", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "logger", "=", "get_console_file_logger", "(", "'mIoU'", ",", "logging", ".", "INFO", ",", "log_dir", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "tb", ".", "get_string", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "tb", ")", "\n", "", "return", "iou_per_class", ",", "miou", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.__init__": [[37, 41], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "logdir", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "_total", "=", "sparse", ".", "coo_matrix", "(", "(", "num_classes", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "logdir", "=", "logdir", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.compute_iou_per_class": [[42, 58], ["numpy.sum", "numpy.sum", "numpy.diag"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_iou_per_class", "(", "confusion_matrix", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            confusion_matrix: numpy array [num_classes, num_classes] row - gt, col - pred\n        Returns:\n            iou_per_class: float32 [num_classes, ]\n        \"\"\"", "\n", "sum_over_row", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "0", ")", "\n", "sum_over_col", "=", "np", ".", "sum", "(", "confusion_matrix", ",", "axis", "=", "1", ")", "\n", "diag", "=", "np", ".", "diag", "(", "confusion_matrix", ")", "\n", "denominator", "=", "sum_over_row", "+", "sum_over_col", "-", "diag", "\n", "\n", "iou_per_class", "=", "diag", "/", "denominator", "\n", "\n", "return", "iou_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.forward": [[59, 71], ["isinstance", "isinstance", "y_pred.cpu().numpy.cpu().numpy.reshape", "y_true.cpu().numpy.cpu().numpy.reshape", "numpy.ones_like", "scipy.sparse.coo_matrix", "y_pred.cpu().numpy.cpu().numpy.cpu().numpy", "y_true.cpu().numpy.cpu().numpy.cpu().numpy", "y_pred.cpu().numpy.cpu().numpy.cpu", "y_true.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "if", "isinstance", "(", "y_pred", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "y_pred", "=", "y_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "y_true", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "y_true", "=", "y_true", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "y_pred", "=", "y_pred", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "y_true", "=", "y_true", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "v", "=", "np", ".", "ones_like", "(", "y_pred", ")", "\n", "cm", "=", "sparse", ".", "coo_matrix", "(", "(", "v", ",", "(", "y_true", ",", "y_pred", ")", ")", ",", "shape", "=", "(", "self", ".", "num_classes", ",", "self", ".", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "_total", "+=", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.summary": [[72, 88], ["iou_per_class.mean.NPMeanIntersectionOverUnion._total.toarray", "iou_per_class.mean.NPMeanIntersectionOverUnion.compute_iou_per_class", "miou.NPMeanIntersectionOverUnion.compute_iou_per_class", "prettytable.PrettyTable", "enumerate", "prettytable.PrettyTable.add_row", "prettytable.PrettyTable.add_row", "simplecv.util.logger.get_console_file_logger", "simplecv.util.logger.get_console_file_logger.info", "print", "prettytable.PrettyTable.get_string"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.compute_iou_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.miou.NPMeanIntersectionOverUnion.compute_iou_per_class", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_console_file_logger", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "dense_cm", "=", "self", ".", "_total", ".", "toarray", "(", ")", "\n", "iou_per_class", "=", "NPMeanIntersectionOverUnion", ".", "compute_iou_per_class", "(", "dense_cm", ")", "\n", "miou", "=", "iou_per_class", ".", "mean", "(", ")", "\n", "\n", "tb", "=", "pt", ".", "PrettyTable", "(", ")", "\n", "tb", ".", "field_names", "=", "[", "'class'", ",", "'iou'", "]", "\n", "for", "idx", ",", "iou", "in", "enumerate", "(", "iou_per_class", ")", ":", "\n", "            ", "tb", ".", "add_row", "(", "[", "idx", ",", "iou", "]", ")", "\n", "", "tb", ".", "add_row", "(", "[", "'mIoU'", ",", "miou", "]", ")", "\n", "if", "self", ".", "logdir", "is", "not", "None", ":", "\n", "            ", "logger", "=", "get_console_file_logger", "(", "'mIoU'", ",", "logging", ".", "INFO", ",", "self", ".", "logdir", ")", "\n", "logger", ".", "info", "(", "'\\n'", "+", "tb", ".", "get_string", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "tb", ")", "\n", "", "return", "iou_per_class", ",", "miou", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_confusion_matrix": [[3, 25], ["y_true.float.float", "y_pred.float.float", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor.to_dense", "torch.stack", "torch.ones_like", "torch.stack", "torch.ones_like"], "function", ["None"], ["def", "th_confusion_matrix", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ",", "to_dense", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        y_true: 1-D tensor of shape [n_samples], label value starts from 0\n        y_pred: 1-D tensor of shape [n_samples]\n        num_classes: scalar\n    Returns:\n\n    \"\"\"", "\n", "size", "=", "[", "num_classes", ",", "num_classes", "]", "if", "num_classes", "is", "not", "None", "else", "None", "\n", "y_true", "=", "y_true", ".", "float", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "float", "(", ")", "\n", "if", "size", "is", "None", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ")", "\n", "", "else", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ",", "\n", "size", "=", "size", ")", "\n", "", "if", "to_dense", ":", "\n", "        ", "return", "cm", ".", "to_dense", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "cm", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_overall_accuracy_score": [[27, 29], ["float", "y_true.numel", "y_true.int", "y_pred.int"], "function", ["None"], ["", "", "def", "th_overall_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "(", "y_true", ".", "int", "(", ")", "==", "y_pred", ".", "int", "(", ")", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "float", "(", "y_true", ".", "numel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.average_accuracy_score": [[31, 38], ["cm_th.float.float", "torch.diag", "torch.diag.mean", "torch.diag.mean", "cm_th.float.sum"], "function", ["None"], ["", "def", "average_accuracy_score", "(", "cm_th", ",", "return_accuracys", "=", "False", ")", ":", "\n", "    ", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n", "aas", "=", "torch", ".", "diag", "(", "cm_th", "/", "(", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "[", "None", ",", ":", "]", "+", "1e-6", ")", ")", "\n", "if", "not", "return_accuracys", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", ",", "aas", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_average_accuracy_score": [[40, 43], ["function.th_confusion_matrix", "function.average_accuracy_score"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.average_accuracy_score"], ["", "", "def", "th_average_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ",", "return_accuracys", "=", "False", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "average_accuracy_score", "(", "cm_th", ",", "return_accuracys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.cohen_kappa_score": [[45, 55], ["cm_th.float.float", "cm_th.float.size", "cm_th.float.sum", "cm_th.float.sum", "torch.ones", "torch.ger", "torch.sum", "torch.ones.view", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cohen_kappa_score", "(", "cm_th", ")", ":", "\n", "    ", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n", "n_classes", "=", "cm_th", ".", "size", "(", "0", ")", "\n", "sum0", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum1", "=", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "\n", "expected", "=", "torch", ".", "ger", "(", "sum0", ",", "sum1", ")", "/", "torch", ".", "sum", "(", "sum0", ")", "\n", "w_mat", "=", "torch", ".", "ones", "(", "[", "n_classes", ",", "n_classes", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "w_mat", ".", "view", "(", "-", "1", ")", "[", ":", ":", "n_classes", "+", "1", "]", "=", "0.", "\n", "k", "=", "torch", ".", "sum", "(", "w_mat", "*", "cm_th", ")", "/", "torch", ".", "sum", "(", "w_mat", "*", "expected", ")", "\n", "return", "1.", "-", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_cohen_kappa_score": [[57, 60], ["function.th_confusion_matrix", "function.cohen_kappa_score"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.cohen_kappa_score"], ["", "def", "th_cohen_kappa_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "cohen_kappa_score", "(", "cm_th", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.intersection_over_union_per_class": [[62, 70], ["cm_th.sum", "cm_th.sum", "cm_th.diag"], "function", ["None"], ["", "def", "intersection_over_union_per_class", "(", "cm_th", ")", ":", "\n", "    ", "sum_over_row", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum_over_col", "=", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "\n", "diag", "=", "cm_th", ".", "diag", "(", ")", "\n", "denominator", "=", "sum_over_row", "+", "sum_over_col", "-", "diag", "\n", "\n", "iou_per_class", "=", "diag", "/", "denominator", "\n", "return", "iou_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_intersection_over_union_per_class": [[72, 75], ["function.th_confusion_matrix", "function.intersection_over_union_per_class"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.intersection_over_union_per_class"], ["", "def", "th_intersection_over_union_per_class", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "intersection_over_union_per_class", "(", "cm_th", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.metric.function.th_mean_intersection_over_union": [[77, 80], ["function.th_intersection_over_union_per_class", "th_intersection_over_union_per_class.mean"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_intersection_over_union_per_class"], ["", "def", "th_mean_intersection_over_union", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "iou_per_class", "=", "th_intersection_over_union_per_class", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "iou_per_class", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.Pipeline.__call__": [[7, 14], ["thcomm.Pipeline._modules.values", "isinstance", "module", "module"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "_modules", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "tuple", ")", ":", "\n", "                ", "inputs", "=", "module", "(", "*", "inputs", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "module", "(", "inputs", ")", "\n", "", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.FuncWrapper.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "super", "(", "FuncWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.FuncWrapper.__call__": [[21, 23], ["thcomm.FuncWrapper.fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "self", ".", "fn", "(", "*", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.ToTensor.__call__": [[26, 28], ["simplecv.util.tensor_util.to_tensor"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor"], ["    ", "def", "__call__", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "to_tensor", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THChannelFirst._is_channel_first": [[31, 34], ["tensor.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "_is_channel_first", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "size", "(", "0", ")", "<=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THChannelFirst.__call__": [[35, 39], ["thcomm.THChannelFirst._is_channel_first", "image.permute"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THChannelFirst._is_channel_first"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "if", "THChannelFirst", ".", "_is_channel_first", "(", "image", ")", ":", "\n", "            ", "return", "image", "\n", "", "return", "image", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THChannelFirst2.__call__": [[42, 44], ["thcomm.THChannelFirst.__call__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.Callback.__call__"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "other", ")", ":", "\n", "        ", "return", "super", "(", "THChannelFirst2", ",", "self", ")", ".", "__call__", "(", "image", ")", ",", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THMeanStdNormalize.__init__": [[47, 51], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "123.675", ",", "116.28", ",", "103.53", ")", ",", "std", "=", "(", "58.395", ",", "57.12", ",", "57.375", ")", ")", ":", "\n", "        ", "super", "(", "THMeanStdNormalize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_m", "=", "mean", "\n", "self", ".", "_s", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THMeanStdNormalize.__call__": [[52, 57], ["image.float.float.float", "simplecv.th_mean_std_normalize"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_mean_std_normalize"], ["", "def", "__call__", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "float", "(", ")", "\n", "nimage", "=", "pF", ".", "th_mean_std_normalize", "(", "image", ",", "self", ".", "_m", ",", "self", ".", "_s", ")", "\n", "\n", "return", "nimage", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THMeanStdNormalize2.__init__": [[60, 62], ["thcomm.THMeanStdNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "(", "123.675", ",", "116.28", ",", "103.53", ")", ",", "std", "=", "(", "58.395", ",", "57.12", ",", "57.375", ")", ")", ":", "\n", "        ", "super", "(", "THMeanStdNormalize2", ",", "self", ")", ".", "__init__", "(", "mean", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THMeanStdNormalize2.__call__": [[63, 66], ["thcomm.THMeanStdNormalize.__call__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.Callback.__call__"], ["", "def", "__call__", "(", "self", ",", "image", ",", "other", ")", ":", "\n", "        ", "nimage", "=", "super", "(", "THMeanStdNormalize2", ",", "self", ")", ".", "__call__", "(", "image", ")", "\n", "return", "nimage", ",", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THDivisiblePad.__init__": [[69, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_divisor", ",", "mask_pad_value", "=", "255", ",", "pad_to_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "THDivisiblePad", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "mask_pad_value", "=", "mask_pad_value", "\n", "self", ".", "pad_to_size", "=", "pad_to_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thcomm.THDivisiblePad.__call__": [[75, 88], ["simplecv.th_divisible_pad", "simplecv.th_pad_to_size", "simplecv.th_divisible_pad", "simplecv.th_pad_to_size"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_divisible_pad", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_pad_to_size", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_divisible_pad", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_pad_to_size"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "pimage", "=", "pF", ".", "th_divisible_pad", "(", "image", ",", "self", ".", "size_divisor", ")", "\n", "if", "self", ".", "pad_to_size", "is", "not", "None", ":", "\n", "            ", "pimage", "=", "pF", ".", "th_pad_to_size", "(", "image", ",", "self", ".", "pad_to_size", ")", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "pmask", "=", "pF", ".", "th_divisible_pad", "(", "mask", ",", "self", ".", "size_divisor", ",", "value", "=", "self", ".", "mask_pad_value", ")", "\n", "if", "self", ".", "pad_to_size", ":", "\n", "                ", "pmask", "=", "pF", ".", "th_pad_to_size", "(", "pmask", ",", "self", ".", "pad_to_size", ",", "value", "=", "self", ".", "mask_pad_value", ")", "\n", "", "", "else", ":", "\n", "            ", "pmask", "=", "mask", "\n", "\n", "", "return", "pimage", ",", "pmask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.Compose.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.Compose.__call__": [[8, 17], ["t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "target", "is", "None", ":", "\n", "            ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "                ", "image", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", "\n", "\n", "", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.Compose.__repr__": [[18, 25], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "\"(\"", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "\"\\n\"", "\n", "format_string", "+=", "\"    {0}\"", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "\"\\n)\"", "\n", "return", "format_string", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.CustomOp.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.CustomOp.__call__": [[31, 35], ["comm.CustomOp.fn", "comm.CustomOp.fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "if", "target", "is", "None", ":", "\n", "            ", "return", "self", ".", "fn", "(", "image", ")", "\n", "", "return", "self", ".", "fn", "(", "image", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.THMeanStdNormalize.__init__": [[38, 41], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.comm.THMeanStdNormalize.__call__": [[42, 47], ["torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "image", "=", "F", ".", "normalize", "(", "image", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "if", "target", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "return", "image", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomRotate90k.__init__": [[8, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "None", ")", ":", "\n", "        ", "super", "(", "THRandomRotate90k", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomRotate90k.__call__": [[12, 38], ["list", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "list.append", "int", "list.append", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "list.append", "tuple", "list.append", "tuple", "len", "numpy.random.choice", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\" Rotate 90 * k degree for image and mask\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "ret", "=", "list", "(", ")", "\n", "k", "=", "int", "(", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "1", ")", "[", "0", "]", ")", "if", "self", ".", "k", "is", "None", "else", "self", ".", "k", "\n", "if", "k", "==", "0", ":", "\n", "            ", "ret", ".", "append", "(", "images", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "ret", ".", "append", "(", "masks", ")", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n", "", "images_tensor", "=", "torch", ".", "rot90", "(", "images", ",", "k", ",", "[", "0", ",", "1", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "rot90", "(", "masks", ",", "k", ",", "[", "0", ",", "1", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomHorizontalFlip.__init__": [[41, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "THRandomHorizontalFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomHorizontalFlip.__call__": [[45, 71], ["list", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "numpy.random.uniform", "list.append", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "tuple", "list.append", "tuple", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "if", "self", ".", "p", "<", "np", ".", "random", ".", "uniform", "(", ")", ":", "\n", "            ", "ret", ".", "append", "(", "images", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "ret", ".", "append", "(", "masks", ")", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n", "", "images_tensor", "=", "torch", ".", "flip", "(", "images", ",", "[", "1", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "flip", "(", "masks", ",", "[", "1", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomVerticalFlip.__init__": [[74, 77], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "THRandomVerticalFlip", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomVerticalFlip.__call__": [[78, 104], ["list", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "numpy.random.uniform", "list.append", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "list.append", "tuple", "list.append", "tuple", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "ret", "=", "list", "(", ")", "\n", "\n", "if", "self", ".", "p", "<", "np", ".", "random", ".", "uniform", "(", ")", ":", "\n", "            ", "ret", ".", "append", "(", "images", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "ret", ".", "append", "(", "masks", ")", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n", "", "images_tensor", "=", "torch", ".", "flip", "(", "images", ",", "[", "0", "]", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "torch", ".", "flip", "(", "masks", ",", "[", "0", "]", ")", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "tuple", "(", "ret", ")", "if", "len", "(", "ret", ")", ">", "1", "else", "ret", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomCrop.__init__": [[107, 110], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", "=", "(", "512", ",", "512", ")", ")", ":", "\n", "        ", "super", "(", "THRandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomCrop.__call__": [[111, 147], ["int", "int", "list", "list.append", "tuple", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "numpy.random.randint", "numpy.random.randint", "list.append", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "im_h", ",", "im_w", ",", "_", "=", "images", ".", "shape", "\n", "c_h", ",", "c_w", "=", "self", ".", "crop_size", "\n", "\n", "pad_h", "=", "c_h", "-", "im_h", "\n", "pad_w", "=", "c_w", "-", "im_w", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "            ", "images", "=", "F", ".", "pad", "(", "images", ",", "[", "0", ",", "0", ",", "0", ",", "max", "(", "pad_w", ",", "0", ")", ",", "0", ",", "max", "(", "pad_h", ",", "0", ")", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "masks", "=", "F", ".", "pad", "(", "masks", ",", "[", "0", ",", "max", "(", "pad_w", ",", "0", ")", ",", "0", ",", "max", "(", "pad_h", ",", "0", ")", "]", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "", "im_h", ",", "im_w", ",", "_", "=", "images", ".", "shape", "\n", "\n", "y_lim", "=", "im_h", "-", "c_h", "+", "1", "\n", "x_lim", "=", "im_w", "-", "c_w", "+", "1", "\n", "ymin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "y_lim", ",", "1", ")", ")", "\n", "xmin", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "x_lim", ",", "1", ")", ")", "\n", "\n", "xmax", "=", "xmin", "+", "c_w", "\n", "ymax", "=", "ymin", "+", "c_h", "\n", "ret", "=", "list", "(", ")", "\n", "images_tensor", "=", "images", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "masks", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", "]", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "tuple", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomScale.__init__": [[150, 155], ["torch.Module.__init__", "numpy.linspace", "numpy.random.choice", "int"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_range", "=", "(", "0.5", ",", "2.0", ")", ",", "scale_step", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "THRandomScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "scale_factors", "=", "np", ".", "linspace", "(", "scale_range", "[", "0", "]", ",", "scale_range", "[", "1", "]", ",", "\n", "int", "(", "(", "scale_range", "[", "1", "]", "-", "scale_range", "[", "0", "]", ")", "/", "scale_step", ")", "+", "1", ")", "\n", "self", ".", "scale_factor", "=", "np", ".", "random", ".", "choice", "(", "scale_factors", ",", "size", "=", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.thsegm.THRandomScale.__call__": [[156, 177], ["list", "torch.interpolate", "torch.interpolate", "torch.interpolate", "images_tensor[].permute", "list.append", "tuple", "images.permute", "list.append", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ",", "masks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            images: 3-D tensor of shape [height, width, channel]\n            masks: 2-D tensor of shape [height, width]\n\n        Returns:\n            images_tensor\n            masks_tensor\n        \"\"\"", "\n", "ret", "=", "list", "(", ")", "\n", "_images", "=", "images", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "\n", "images_tensor", "=", "F", ".", "interpolate", "(", "_images", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "images_tensor", "=", "images_tensor", "[", "0", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "ret", ".", "append", "(", "images_tensor", ")", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "masks_tensor", "=", "F", ".", "interpolate", "(", "masks", "[", "None", ",", "None", ",", ":", ",", ":", "]", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'nearest'", ")", "[", "0", "]", "[", "0", "]", "\n", "ret", ".", "append", "(", "masks_tensor", ")", "\n", "\n", "", "return", "tuple", "(", "ret", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.ToTensor.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_keep_255", "=", "False", ")", ":", "\n", "        ", "self", ".", "image_keep_255", "=", "image_keep_255", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.ToTensor.__call__": [[19, 34], ["isinstance", "torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor().div", "torchvision.transforms.functional.to_tensor", "torch.from_numpy", "numpy.array", "torchvision.transforms.functional.to_tensor"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", "and", "image", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "if", "self", ".", "image_keep_255", ":", "\n", "                ", "return", "F", ".", "to_tensor", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "to_tensor", "(", "image", ")", ".", "div", "(", "255.", ")", "\n", "\n", "", "", "if", "self", ".", "image_keep_255", ":", "\n", "            ", "image", "=", "255.", "*", "F", ".", "to_tensor", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "F", ".", "to_tensor", "(", "image", ")", "\n", "", "if", "mask", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "else", ":", "\n", "            ", "return", "image", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "mask", ",", "copy", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomHorizontalFlip.__init__": [[37, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomHorizontalFlip.__call__": [[40, 45], ["random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "hflip", "(", "image", ")", "\n", "mask", "=", "F", ".", "hflip", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomVerticalFlip.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomVerticalFlip.__call__": [[51, 56], ["random.random", "torchvision.transforms.functional.vflip", "torchvision.transforms.functional.vflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "F", ".", "vflip", "(", "image", ")", "\n", "mask", "=", "F", ".", "vflip", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomTranspose.__init__": [[59, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomTranspose.__call__": [[62, 67], ["random.random", "segm.transpose", "segm.transpose"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "image", "=", "transpose", "(", "image", ")", "\n", "mask", "=", "transpose", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomRotate90K.__init__": [[70, 72], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomRotate90K.__call__": [[73, 82], ["random.choice", "torchvision.transforms.functional.rotate", "torchvision.transforms.functional.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "k", "=", "random", ".", "choice", "(", "self", ".", "k", ")", "\n", "if", "k", "==", "0", ":", "\n", "            ", "return", "image", ",", "mask", "\n", "\n", "", "image", "=", "F", ".", "rotate", "(", "image", ",", "90", "*", "k", ",", "expand", "=", "True", ")", "\n", "mask", "=", "F", ".", "rotate", "(", "mask", ",", "90", "*", "k", ",", "expand", "=", "True", ")", "\n", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomScale.__init__": [[85, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size_divisor", "=", "32", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomScale.compute_size": [[89, 95], ["random.choice", "int", "int"], "methods", ["None"], ["", "def", "compute_size", "(", "self", ",", "image", ")", ":", "\n", "        ", "h", ",", "w", "=", "image", ".", "height", ",", "image", ".", "width", "\n", "scale", "=", "random", ".", "choice", "(", "self", ".", "scales", ")", "\n", "nh", "=", "int", "(", "h", "*", "scale", ")", "//", "self", ".", "size_divisor", "*", "self", ".", "size_divisor", "\n", "nw", "=", "int", "(", "w", "*", "scale", ")", "//", "self", ".", "size_divisor", "*", "self", ".", "size_divisor", "\n", "return", "nw", ",", "nh", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomScale.__call__": [[96, 101], ["segm.RandomScale.compute_size", "torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomScale.compute_size"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "new_size", "=", "self", ".", "compute_size", "(", "image", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "new_size", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "F", ".", "resize", "(", "mask", ",", "new_size", ",", "Image", ".", "NEAREST", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomCrop.__init__": [[104, 107], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "mask_pad_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "mask_pad_value", "=", "mask_pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.RandomCrop.__call__": [[108, 129], ["random.randint", "random.randint", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "ih", ",", "iw", "=", "image", ".", "height", ",", "image", ".", "width", "\n", "ch", ",", "cw", "=", "self", ".", "crop_size", "\n", "\n", "if", "ch", ">", "ih", "or", "cw", ">", "iw", ":", "\n", "            ", "ph", "=", "ch", "-", "ih", "\n", "pw", "=", "cw", "-", "iw", "\n", "image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "0", ")", "\n", "mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "self", ".", "mask_pad_value", ")", "\n", "\n", "", "ih", ",", "iw", "=", "image", ".", "height", ",", "image", ".", "width", "\n", "\n", "ylim", "=", "ih", "-", "ch", "+", "1", "\n", "xlim", "=", "iw", "-", "cw", "+", "1", "\n", "\n", "ymin", "=", "random", ".", "randint", "(", "0", ",", "ylim", ")", "\n", "xmin", "=", "random", ".", "randint", "(", "0", ",", "xlim", ")", "\n", "\n", "image", "=", "F", ".", "crop", "(", "image", ",", "ymin", ",", "xmin", ",", "ch", ",", "cw", ")", "\n", "mask", "=", "F", ".", "crop", "(", "mask", ",", "ymin", ",", "xmin", ",", "ch", ",", "cw", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.DivisiblePad.__init__": [[132, 135], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size_divisor", ",", "mask_pad_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "mask_pad_value", "=", "mask_pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.DivisiblePad.__call__": [[136, 150], ["torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "math.ceil", "math.ceil"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "ph", "=", "math", ".", "ceil", "(", "image", ".", "height", "/", "self", ".", "size_divisor", ")", "*", "self", ".", "size_divisor", "-", "image", ".", "height", "\n", "pw", "=", "math", ".", "ceil", "(", "image", ".", "width", "/", "self", ".", "size_divisor", ")", "*", "self", ".", "size_divisor", "-", "image", ".", "width", "\n", "\n", "if", "ph", "==", "0", "and", "pw", "==", "0", ":", "\n", "            ", "if", "mask", "is", "None", ":", "\n", "                ", "return", "image", "\n", "", "return", "image", ",", "mask", "\n", "\n", "", "image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "0", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "self", ".", "mask_pad_value", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.FixedPad.__init__": [[153, 156], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "target_size", ",", "mask_pad_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "target_size", "=", "target_size", "\n", "self", ".", "mask_pad_value", "=", "mask_pad_value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.FixedPad.__call__": [[157, 177], ["torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "th", ",", "tw", "=", "self", ".", "target_size", "\n", "h", ",", "w", "=", "image", ".", "height", ",", "image", ".", "width", "\n", "assert", "th", ">=", "h", "and", "tw", ">=", "w", "\n", "\n", "if", "th", "==", "h", "and", "tw", "==", "w", ":", "\n", "            ", "if", "mask", "is", "None", ":", "\n", "                ", "return", "image", "\n", "", "else", ":", "\n", "                ", "return", "image", ",", "mask", "\n", "\n", "", "", "ph", "=", "th", "-", "h", "\n", "pw", "=", "tw", "-", "w", "\n", "\n", "image", "=", "F", ".", "pad", "(", "image", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "0", ")", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "return", "image", "\n", "\n", "", "mask", "=", "F", ".", "pad", "(", "mask", ",", "(", "0", ",", "0", ",", "pw", ",", "ph", ")", ",", "self", ".", "mask_pad_value", ")", "\n", "return", "image", ",", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose": [[9, 13], ["img.transpose", "torchvision.transforms.functional._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.segm.transpose"], ["def", "transpose", "(", "img", ")", ":", "\n", "    ", "if", "not", "F", ".", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "", "return", "img", ".", "transpose", "(", "Image", ".", "TRANSPOSE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData.__init__": [[2, 4], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "extra_fields", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData.add_field": [[5, 7], ["None"], "methods", ["None"], ["", "def", "add_field", "(", "self", ",", "field", ",", "field_data", ")", ":", "\n", "        ", "self", ".", "extra_fields", "[", "field", "]", "=", "field_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData.get_field": [[8, 10], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "self", ".", "extra_fields", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData.has_field": [[11, 13], ["None"], "methods", ["None"], ["", "def", "has_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "return", "field", "in", "self", ".", "extra_fields", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData.fields": [[14, 16], ["list", "data.ImageData.extra_fields.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "extra_fields", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.data.ImageData._copy_extra_fields": [[17, 20], ["bbox.extra_fields.items"], "methods", ["None"], ["", "def", "_copy_extra_fields", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "bbox", ".", "extra_fields", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "extra_fields", "[", "k", "]", "=", "v", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_mean_std_normalize": [[8, 32], ["torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "image.sub().div", "image.dim", "image.dim", "image.dim", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "image.sub"], "function", ["None"], ["\n", "size", "=", "[", "num_classes", ",", "num_classes", "]", "if", "num_classes", "is", "not", "None", "else", "None", "\n", "y_true", "=", "y_true", ".", "float", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "float", "(", ")", "\n", "if", "size", "is", "None", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ")", "\n", "", "else", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ",", "\n", "size", "=", "size", ")", "\n", "", "if", "to_dense", ":", "\n", "        ", "return", "cm", ".", "to_dense", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "cm", "\n", "\n", "\n", "", "", "def", "th_overall_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "(", "y_true", ".", "int", "(", ")", "==", "y_pred", ".", "int", "(", ")", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "float", "(", "y_true", ".", "numel", "(", ")", ")", "\n", "\n", "\n", "", "def", "average_accuracy_score", "(", "cm_th", ",", "return_accuracys", "=", "False", ")", ":", "\n", "    ", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_divisible_pad": [[34, 64], ["torch.pad", "tensor.dim", "math.ceil", "math.ceil", "tensor.size", "tensor.size", "tensor.dim", "tensor.size", "tensor.size", "tensor.dim", "tensor.size", "tensor.size"], "function", ["None"], ["if", "not", "return_accuracys", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", ",", "aas", "\n", "\n", "\n", "", "", "def", "th_average_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ",", "return_accuracys", "=", "False", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "average_accuracy_score", "(", "cm_th", ",", "return_accuracys", ")", "\n", "\n", "\n", "", "def", "cohen_kappa_score", "(", "cm_th", ")", ":", "\n", "    ", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n", "n_classes", "=", "cm_th", ".", "size", "(", "0", ")", "\n", "sum0", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum1", "=", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "\n", "expected", "=", "torch", ".", "ger", "(", "sum0", ",", "sum1", ")", "/", "torch", ".", "sum", "(", "sum0", ")", "\n", "w_mat", "=", "torch", ".", "ones", "(", "[", "n_classes", ",", "n_classes", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "w_mat", ".", "view", "(", "-", "1", ")", "[", ":", ":", "n_classes", "+", "1", "]", "=", "0.", "\n", "k", "=", "torch", ".", "sum", "(", "w_mat", "*", "cm_th", ")", "/", "torch", ".", "sum", "(", "w_mat", "*", "expected", ")", "\n", "return", "1.", "-", "k", "\n", "\n", "\n", "", "def", "th_cohen_kappa_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "cohen_kappa_score", "(", "cm_th", ")", "\n", "\n", "\n", "", "def", "intersection_over_union_per_class", "(", "cm_th", ")", ":", "\n", "    ", "sum_over_row", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum_over_col", "=", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.function.th_pad_to_size": [[66, 83], ["torch.pad", "tensor.dim", "tensor.size", "tensor.size", "tensor.dim", "tensor.size", "tensor.size", "tensor.dim", "tensor.size", "tensor.size"], "function", ["None"], ["denominator", "=", "sum_over_row", "+", "sum_over_col", "-", "diag", "\n", "\n", "iou_per_class", "=", "diag", "/", "denominator", "\n", "return", "iou_per_class", "\n", "\n", "\n", "", "def", "th_intersection_over_union_per_class", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "intersection_over_union_per_class", "(", "cm_th", ")", "\n", "\n", "\n", "", "def", "th_mean_intersection_over_union", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "iou_per_class", "=", "th_intersection_over_union_per_class", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "iou_per_class", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.RandomDiscreteScale.__init__": [[13, 16], ["albumentations.RandomScale.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ",", "always_apply", "=", "False", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "RandomDiscreteScale", ",", "self", ")", ".", "__init__", "(", "0", ",", "interpolation", ",", "always_apply", ",", "p", ")", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.RandomDiscreteScale.get_params": [[17, 19], ["random.choice"], "methods", ["None"], ["", "def", "get_params", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"scale\"", ":", "random", ".", "choice", "(", "self", ".", "scales", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ToTensor.targets": [[22, 25], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "targets", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"image\"", ":", "self", ".", "apply", ",", "\"mask\"", ":", "self", ".", "apply_to_mask", ",", "'masks'", ":", "self", ".", "apply_to_masks", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ToTensor.apply_to_masks": [[26, 28], ["albu.ToTensor.apply_to_mask"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply_to_mask"], ["", "def", "apply_to_masks", "(", "self", ",", "masks", ",", "**", "params", ")", ":", "\n", "        ", "return", "[", "self", ".", "apply_to_mask", "(", "m", ",", "**", "params", ")", "for", "m", "in", "masks", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.__init__": [[31, 43], ["albumentations.DualTransform.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "min_height", "=", "1024", ",", "\n", "min_width", "=", "1024", ",", "\n", "value", "=", "None", ",", "\n", "mask_value", "=", "None", ",", "\n", "always_apply", "=", "False", ",", "\n", "p", "=", "1.0", ",", ")", ":", "\n", "        ", "super", "(", "ConstantPad", ",", "self", ")", ".", "__init__", "(", "always_apply", ",", "p", ")", "\n", "self", ".", "min_height", "=", "min_height", "\n", "self", ".", "min_width", "=", "min_width", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "mask_value", "=", "mask_value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.update_params": [[44, 67], ["super().update_params", "super().update_params.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.update_params", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "def", "update_params", "(", "self", ",", "params", ",", "**", "kwargs", ")", ":", "\n", "        ", "params", "=", "super", "(", "ConstantPad", ",", "self", ")", ".", "update_params", "(", "params", ",", "**", "kwargs", ")", "\n", "rows", "=", "params", "[", "\"rows\"", "]", "\n", "cols", "=", "params", "[", "\"cols\"", "]", "\n", "\n", "if", "rows", "<", "self", ".", "min_height", ":", "\n", "            ", "h_pad_top", "=", "0", "\n", "h_pad_bottom", "=", "self", ".", "min_height", "-", "rows", "\n", "", "else", ":", "\n", "            ", "h_pad_top", "=", "0", "\n", "h_pad_bottom", "=", "0", "\n", "\n", "", "if", "cols", "<", "self", ".", "min_width", ":", "\n", "            ", "w_pad_left", "=", "0", "\n", "w_pad_right", "=", "self", ".", "min_width", "-", "cols", "\n", "", "else", ":", "\n", "            ", "w_pad_left", "=", "0", "\n", "w_pad_right", "=", "0", "\n", "\n", "", "params", ".", "update", "(", "\n", "{", "\"pad_top\"", ":", "h_pad_top", ",", "\"pad_bottom\"", ":", "h_pad_bottom", ",", "\"pad_left\"", ":", "w_pad_left", ",", "\"pad_right\"", ":", "w_pad_right", "}", "\n", ")", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply": [[68, 71], ["numpy.pad"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "img", ",", "pad_top", "=", "0", ",", "pad_bottom", "=", "0", ",", "pad_left", "=", "0", ",", "pad_right", "=", "0", ",", "**", "params", ")", ":", "\n", "        ", "return", "np", ".", "pad", "(", "img", ",", "(", "(", "pad_top", ",", "pad_bottom", ")", ",", "(", "pad_left", ",", "pad_right", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply_to_mask": [[72, 75], ["numpy.pad"], "methods", ["None"], ["", "def", "apply_to_mask", "(", "self", ",", "img", ",", "pad_top", "=", "0", ",", "pad_bottom", "=", "0", ",", "pad_left", "=", "0", ",", "pad_right", "=", "0", ",", "**", "params", ")", ":", "\n", "        ", "return", "np", ".", "pad", "(", "img", ",", "(", "(", "pad_top", ",", "pad_bottom", ")", ",", "(", "pad_left", ",", "pad_right", ")", ")", ",", "mode", "=", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "mask_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.get_transform_init_args_names": [[76, 78], ["None"], "methods", ["None"], ["", "def", "get_transform_init_args_names", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"min_height\"", ",", "\"min_width\"", ",", "\"value\"", ",", "\"mask_value\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.viz.segm.VisualizeSegmm.__init__": [[7, 11], ["os.makedirs"], "methods", ["None"], ["\n", "\n", "def", "transpose", "(", "img", ")", ":", "\n", "    ", "if", "not", "F", ".", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.viz.segm.VisualizeSegmm.__call__": [[12, 26], ["y_pred.squeeze.squeeze.astype", "y_pred.squeeze.squeeze.squeeze", "PIL.Image.fromarray", "PIL.Image.fromarray.putpalette", "PIL.Image.fromarray.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save"], ["", "return", "img", ".", "transpose", "(", "Image", ".", "TRANSPOSE", ")", "\n", "\n", "\n", "", "class", "ToTensor", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "image_keep_255", "=", "False", ")", ":", "\n", "        ", "self", ".", "image_keep_255", "=", "image_keep_255", "\n", "\n", "", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "image", ",", "np", ".", "ndarray", ")", "and", "image", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "            ", "if", "self", ".", "image_keep_255", ":", "\n", "                ", "return", "F", ".", "to_tensor", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "to_tensor", "(", "image", ")", ".", "div", "(", "255.", ")", "\n", "\n", "", "", "if", "self", ".", "image_keep_255", ":", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.module.CVModule.__init__": [[14, 20], ["super().__init__", "simplecv.interface.configurable.ConfigurableMixin.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CVModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ConfigurableMixin", ".", "__init__", "(", "self", ",", "config", ")", "\n", "for", "key", "in", "CVModule", ".", "__Keys__", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "config", ":", "\n", "                ", "self", ".", "config", "[", "key", "]", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.module.CVModule.forward": [[21, 23], ["None"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.module.CVModule.set_defalut_config": [[24, 26], ["NotImplementedError"], "methods", ["None"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'You should set a default config'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.module.CVModule.init_from_weightfile": [[27, 56], ["torch.load", "torch.load", "torch.load", "torch.load", "simplecv.util.checkpoint.is_checkpoint", "torch.load.items", "torch.load.items", "module.CVModule.load_state_dict", "_logger.info", "isinstance", "re.compile", "k.replace.replace.startswith", "k.replace.replace.replace", "getattr"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.is_checkpoint", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "init_from_weightfile", "(", "self", ")", ":", "\n", "        ", "if", "'weight'", "not", "in", "self", ".", "config", ".", "GLOBAL", ":", "\n", "            ", "return", "\n", "", "if", "not", "isinstance", "(", "self", ".", "config", ".", "GLOBAL", ".", "weight", ",", "dict", ")", ":", "\n", "            ", "return", "\n", "", "if", "'path'", "not", "in", "self", ".", "config", ".", "GLOBAL", ".", "weight", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "config", ".", "GLOBAL", ".", "weight", ".", "path", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "config", ".", "GLOBAL", ".", "weight", ".", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "if", "checkpoint", ".", "is_checkpoint", "(", "state_dict", ")", ":", "\n", "            ", "state_dict", "=", "state_dict", "[", "checkpoint", ".", "CheckPoint", ".", "MODEL", "]", "\n", "", "ret", "=", "{", "}", "\n", "if", "'excepts'", "in", "self", ".", "config", ".", "GLOBAL", ".", "weight", "and", "self", ".", "config", ".", "GLOBAL", ".", "weight", ".", "excepts", "is", "not", "None", ":", "\n", "            ", "pattern", "=", "re", ".", "compile", "(", "self", ".", "config", ".", "GLOBAL", ".", "weight", ".", "excepts", ")", "\n", "", "else", ":", "\n", "            ", "pattern", "=", "None", "\n", "\n", "", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "", "if", "getattr", "(", "pattern", ",", "'match'", ",", "lambda", "_", ":", "False", ")", "(", "k", ")", ":", "\n", "# ignore", "\n", "                ", "continue", "\n", "", "ret", "[", "k", "]", "=", "v", "\n", "\n", "", "self", ".", "load_state_dict", "(", "ret", ",", "strict", "=", "False", ")", "\n", "_logger", ".", "info", "(", "'Load weights from: {}'", ".", "format", "(", "self", ".", "config", ".", "GLOBAL", ".", "weight", ".", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.learning_rate.LearningRateBase.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_lr", ")", ":", "\n", "        ", "self", ".", "_base_lr", "=", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.learning_rate.LearningRateBase.base_lr": [[5, 8], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.learning_rate.LearningRateBase.step": [[9, 11], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "global_step", ",", "optimizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.configurable.ConfigurableMixin.__init__": [[18, 24], ["simplecv.core.config.AttrDict", "configurable.ConfigurableMixin.set_defalut_config", "configurable.ConfigurableMixin._cfg.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.configurable.ConfigurableMixin.set_defalut_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "_cfg", "=", "AttrDict", "(", "\n", "\n", ")", "\n", "self", ".", "set_defalut_config", "(", ")", "\n", "self", ".", "_cfg", ".", "update", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.configurable.ConfigurableMixin.set_defalut_config": [[25, 27], ["None"], "methods", ["None"], ["", "def", "set_defalut_config", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.interface.configurable.ConfigurableMixin.config": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cfg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_image": [[13, 44], ["img.copy.copy", "fig.add_subplot.imshow", "matplotlib.figure", "plt.figure.add_subplot", "img.copy.astype"], "function", ["None"], ["def", "plot_image", "(", "img", ",", "ax", "=", "None", ",", "reverse_rgb", "=", "False", ")", ":", "\n", "    ", "\"\"\"Visualize image.\n    Parameters\n    ----------\n    img : numpy.ndarray\n        Image with shape `H, W, 3`.\n    ax : matplotlib axes, optional\n        You can reuse previous axes if provided.\n    reverse_rgb : bool, optional\n        Reverse RGB<->BGR orders if `True`.\n    Returns\n    -------\n    matplotlib axes\n        The ploted axes.\n    Examples\n    --------\n    from matplotlib import pyplot as plt\n    ax = plot_image(img)\n    plt.show()\n    \"\"\"", "\n", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "if", "ax", "is", "None", ":", "\n", "# create new axes", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "img", "=", "img", ".", "copy", "(", ")", "\n", "if", "reverse_rgb", ":", "\n", "        ", "img", "[", ":", ",", ":", ",", "(", "0", ",", "1", ",", "2", ")", "]", "=", "img", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "", "ax", ".", "imshow", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_bbox": [[46, 133], ["viz.plot_image", "enumerate", "ValueError", "ValueError", "len", "dict", "matplotlib.Rectangle", "plot_image.add_patch", "int", "int", "plot_image.text", "len", "len", "len", "len", "len", "len", "len", "len", "len", "str", "matplotlib.get_cmap", "random.random", "random.random", "random.random", "dict", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_image"], ["", "def", "plot_bbox", "(", "img", ",", "bboxes", ",", "scores", "=", "None", ",", "labels", "=", "None", ",", "thresh", "=", "0.5", ",", "\n", "class_names", "=", "None", ",", "colors", "=", "None", ",", "ax", "=", "None", ",", "\n", "reverse_rgb", "=", "False", ",", "absolute_coordinates", "=", "True", ")", ":", "\n", "    ", "\"\"\"Visualize bounding boxes.\n    Parameters\n    ----------\n    img : numpy.ndarray\n        Image with shape `H, W, 3`.\n    bboxes : numpy.ndarray\n        Bounding boxes with shape `N, 4`. Where `N` is the number of boxes.\n    scores : numpy.ndarray, optional\n        Confidence scores of the provided `bboxes` with shape `N`.\n    labels : numpy.ndarray, optional\n        Class labels of the provided `bboxes` with shape `N`.\n    thresh : float, optional, default 0.5\n        Display threshold if `scores` is provided. Scores with less than `thresh`\n        will be ignored in display, this is visually more elegant if you have\n        a large number of bounding boxes with very small scores.\n    class_names : list of str, optional\n        Description of parameter `class_names`.\n    colors : dict, optional\n        You can provide desired colors as {0: (255, 0, 0), 1:(0, 255, 0), ...}, otherwise\n        random colors will be substituted.\n    ax : matplotlib axes, optional\n        You can reuse previous axes if provided.\n    reverse_rgb : bool, optional\n        Reverse RGB<->BGR orders if `True`.\n    absolute_coordinates : bool\n        If `True`, absolute coordinates will be considered, otherwise coordinates\n        are interpreted as in range(0, 1).\n    Returns\n    -------\n    matplotlib axes\n        The ploted axes.\n    \"\"\"", "\n", "from", "matplotlib", "import", "pyplot", "as", "plt", "\n", "\n", "if", "labels", "is", "not", "None", "and", "not", "len", "(", "bboxes", ")", "==", "len", "(", "labels", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The length of labels and bboxes mismatch, {} vs {}'", "\n", ".", "format", "(", "len", "(", "labels", ")", ",", "len", "(", "bboxes", ")", ")", ")", "\n", "", "if", "scores", "is", "not", "None", "and", "not", "len", "(", "bboxes", ")", "==", "len", "(", "scores", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The length of scores and bboxes mismatch, {} vs {}'", "\n", ".", "format", "(", "len", "(", "scores", ")", ",", "len", "(", "bboxes", ")", ")", ")", "\n", "\n", "", "ax", "=", "plot_image", "(", "img", ",", "ax", "=", "ax", ",", "reverse_rgb", "=", "reverse_rgb", ")", "\n", "\n", "if", "len", "(", "bboxes", ")", "<", "1", ":", "\n", "        ", "return", "ax", "\n", "\n", "", "if", "not", "absolute_coordinates", ":", "\n", "# convert to absolute coordinates using image shape", "\n", "        ", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "bboxes", "[", ":", ",", "(", "0", ",", "2", ")", "]", "*=", "width", "\n", "bboxes", "[", ":", ",", "(", "1", ",", "3", ")", "]", "*=", "height", "\n", "\n", "# use random colors if None is provided", "\n", "", "if", "colors", "is", "None", ":", "\n", "        ", "colors", "=", "dict", "(", ")", "\n", "", "for", "i", ",", "bbox", "in", "enumerate", "(", "bboxes", ")", ":", "\n", "        ", "if", "scores", "is", "not", "None", "and", "scores", ".", "flat", "[", "i", "]", "<", "thresh", ":", "\n", "            ", "continue", "\n", "", "if", "labels", "is", "not", "None", "and", "labels", ".", "flat", "[", "i", "]", "<", "0", ":", "\n", "            ", "continue", "\n", "", "cls_id", "=", "int", "(", "labels", ".", "flat", "[", "i", "]", ")", "if", "labels", "is", "not", "None", "else", "-", "1", "\n", "if", "cls_id", "not", "in", "colors", ":", "\n", "            ", "if", "class_names", "is", "not", "None", ":", "\n", "                ", "colors", "[", "cls_id", "]", "=", "plt", ".", "get_cmap", "(", "'hsv'", ")", "(", "cls_id", "/", "len", "(", "class_names", ")", ")", "\n", "", "else", ":", "\n", "                ", "colors", "[", "cls_id", "]", "=", "(", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", ")", "\n", "", "", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "[", "int", "(", "x", ")", "for", "x", "in", "bbox", "]", "\n", "rect", "=", "plt", ".", "Rectangle", "(", "(", "xmin", ",", "ymin", ")", ",", "xmax", "-", "xmin", ",", "\n", "ymax", "-", "ymin", ",", "fill", "=", "False", ",", "\n", "edgecolor", "=", "colors", "[", "cls_id", "]", ",", "\n", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "if", "class_names", "is", "not", "None", "and", "cls_id", "<", "len", "(", "class_names", ")", ":", "\n", "            ", "class_name", "=", "class_names", "[", "cls_id", "]", "\n", "", "else", ":", "\n", "            ", "class_name", "=", "str", "(", "cls_id", ")", "if", "cls_id", ">=", "0", "else", "''", "\n", "", "score", "=", "'{:.3f}'", ".", "format", "(", "scores", ".", "flat", "[", "i", "]", ")", "if", "scores", "is", "not", "None", "else", "''", "\n", "if", "class_name", "or", "score", ":", "\n", "            ", "ax", ".", "text", "(", "xmin", ",", "ymin", "-", "2", ",", "\n", "'{:s} {:s}'", ".", "format", "(", "class_name", ",", "score", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "colors", "[", "cls_id", "]", ",", "alpha", "=", "0.5", ")", ",", "\n", "fontsize", "=", "12", ",", "color", "=", "'white'", ")", "\n", "", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_mask": [[135, 156], ["numpy.random.RandomState", "np.where.astype", "numpy.repeat", "numpy.where", "np.random.RandomState.random_sample"], "function", ["None"], ["", "def", "plot_mask", "(", "img", ",", "masks", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Visualize segmentation mask.\n    Parameters\n    ----------\n    img : numpy.ndarray\n        Image with shape `H, W, 3`.\n    masks : numpy.ndarray\n        Binary images with shape `N, H, W`.\n    alpha : float, optional, default 0.5\n        Transparency of plotted mask\n    Returns\n    -------\n    numpy.ndarray\n        The image plotted with segmentation masks\n    \"\"\"", "\n", "rs", "=", "np", ".", "random", ".", "RandomState", "(", "567", ")", "\n", "for", "mask", "in", "masks", ":", "\n", "        ", "color", "=", "rs", ".", "random_sample", "(", "3", ")", "*", "255", "\n", "mask", "=", "np", ".", "repeat", "(", "(", "mask", ">", "0", ")", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "repeats", "=", "3", ",", "axis", "=", "2", ")", "\n", "img", "=", "np", ".", "where", "(", "mask", ",", "img", "*", "(", "1", "-", "alpha", ")", "+", "color", "*", "alpha", ",", "img", ")", "\n", "", "return", "img", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_bbox_mask": [[158, 164], ["viz.expand_mask", "viz.plot_mask", "viz.plot_bbox"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.expand_mask", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_mask", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_bbox"], ["", "def", "plot_bbox_mask", "(", "img", ",", "bboxes", ",", "masks", ",", "scores", "=", "None", ",", "labels", "=", "None", ",", "thresh", "=", "0.5", ",", "\n", "class_names", "=", "None", ",", "colors", "=", "None", ",", "ax", "=", "None", ",", "\n", "reverse_rgb", "=", "False", ",", "absolute_coordinates", "=", "True", ")", ":", "\n", "    ", "full_masks", ",", "_", "=", "expand_mask", "(", "masks", ",", "bboxes", ",", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", ",", "scores", "=", "scores", ")", "\n", "viz_im", "=", "plot_mask", "(", "img", ",", "full_masks", ")", "\n", "return", "plot_bbox", "(", "viz_im", ",", "bboxes", ",", "scores", ",", "labels", ",", "thresh", ",", "class_names", ",", "colors", ",", "ax", ",", "reverse_rgb", ",", "absolute_coordinates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.fill": [[166, 205], ["numpy.zeros", "map", "cv2.resize", "numpy.zeros", "max", "max", "min", "min"], "function", ["None"], ["", "def", "fill", "(", "mask", ",", "bbox", ",", "size", ")", ":", "\n", "    ", "\"\"\"Fill mask to full image size\n    Parameters\n    ----------\n    mask : numpy.ndarray with dtype=uint8\n        Binary mask prediction of a box\n    bbox : iterable of float\n        They are :math:`(xmin, ymin, xmax, ymax)`.\n    size : tuple\n        Tuple of length 2: (width, height).\n    Returns\n    -------\n    numpy.ndarray\n        Full size binary mask of shape (height, width)\n    \"\"\"", "\n", "width", ",", "height", "=", "size", "\n", "# pad mask", "\n", "M", "=", "mask", ".", "shape", "[", "0", "]", "\n", "padded_mask", "=", "np", ".", "zeros", "(", "(", "M", "+", "2", ",", "M", "+", "2", ")", ")", "\n", "padded_mask", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "=", "mask", "\n", "mask", "=", "padded_mask", "\n", "# expand boxes", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "x", ",", "y", ",", "hw", ",", "hh", "=", "(", "x1", "+", "x2", ")", "/", "2", ",", "(", "y1", "+", "y2", ")", "/", "2", ",", "(", "x2", "-", "x1", ")", "/", "2", ",", "(", "y2", "-", "y1", ")", "/", "2", "\n", "hw", "=", "hw", "*", "(", "(", "M", "+", "2", ")", "*", "1.0", "/", "M", ")", "\n", "hh", "=", "hh", "*", "(", "(", "M", "+", "2", ")", "*", "1.0", "/", "M", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "x", "-", "hw", ",", "y", "-", "hh", ",", "x", "+", "hw", ",", "y", "+", "hh", "\n", "# quantize", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "map", "(", "int", ",", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "w", ",", "h", "=", "(", "x2", "-", "x1", "+", "1", ")", ",", "(", "y2", "-", "y1", "+", "1", ")", "\n", "# resize mask", "\n", "mask", "=", "cv2", ".", "resize", "(", "mask", ",", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "# binarize and fill", "\n", "mask", "=", "(", "mask", ">", "0.5", ")", ".", "astype", "(", "'uint8'", ")", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "xx1", ",", "yy1", "=", "max", "(", "0", ",", "x1", ")", ",", "max", "(", "0", ",", "y1", ")", "\n", "xx2", ",", "yy2", "=", "min", "(", "width", ",", "x2", "+", "1", ")", ",", "min", "(", "height", ",", "y2", "+", "1", ")", "\n", "ret", "[", "yy1", ":", "yy2", ",", "xx1", ":", "xx2", "]", "=", "mask", "[", "yy1", "-", "y1", ":", "yy2", "-", "y1", ",", "xx1", "-", "x1", ":", "xx2", "-", "x1", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.expand_mask": [[207, 270], ["numpy.array", "len", "len", "ValueError", "ValueError", "numpy.argsort", "np.array.append", "len", "len", "numpy.argsort", "range", "viz.fill", "len", "len", "len", "len", "numpy.argsort", "len", "numpy.argsort", "numpy.argsort", "numpy.argsort", "ValueError"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.fill"], ["", "def", "expand_mask", "(", "masks", ",", "bboxes", ",", "im_shape", ",", "scores", "=", "None", ",", "thresh", "=", "0.5", ",", "scale", "=", "1.0", ",", "sortby", "=", "None", ")", ":", "\n", "    ", "\"\"\"Expand instance segmentation mask to full image size.\n    Parameters\n    ----------\n    masks : numpy.ndarray\n        Binary images with shape `N, M, M`\n    bboxes : numpy.ndarray\n        Bounding boxes with shape `N, 4`. Where `N` is the number of boxes\n    im_shape : tuple\n        Tuple of length 2: (width, height)\n    scores : numpy.ndarray, optional\n        Confidence scores of the provided `bboxes` with shape `N`.\n    thresh : float, optional, default 0.5\n        Display threshold if `scores` is provided. Scores with less than `thresh`\n        will be ignored in display, this is visually more elegant if you have\n        a large number of bounding boxes with very small scores.\n    sortby : str, optional, default None\n        If not None, sort the color palette for masks by the given attributes of each bounding box.\n        Valid inputs are 'area', 'xmin', 'ymin', 'xmax', 'ymax'.\n    scale : float\n        The scale of output image, which may affect the positions of boxes\n    Returns\n    -------\n    numpy.ndarray\n        Binary images with shape `N, height, width`\n    numpy.ndarray\n        Index array of sorted masks\n    \"\"\"", "\n", "if", "len", "(", "masks", ")", "!=", "len", "(", "bboxes", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The length of bboxes and masks mismatch, {} vs {}'", "\n", ".", "format", "(", "len", "(", "bboxes", ")", ",", "len", "(", "masks", ")", ")", ")", "\n", "", "if", "scores", "is", "not", "None", "and", "len", "(", "masks", ")", "!=", "len", "(", "scores", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The length of scores and masks mismatch, {} vs {}'", "\n", ".", "format", "(", "len", "(", "scores", ")", ",", "len", "(", "masks", ")", ")", ")", "\n", "\n", "", "if", "sortby", "is", "not", "None", ":", "\n", "        ", "if", "sortby", "==", "'area'", ":", "\n", "            ", "areas", "=", "(", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", ")", "*", "(", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", ")", "\n", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "areas", ")", "\n", "", "elif", "sortby", "==", "'xmin'", ":", "\n", "            ", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "bboxes", "[", ":", ",", "0", "]", ")", "\n", "", "elif", "sortby", "==", "'ymin'", ":", "\n", "            ", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "bboxes", "[", ":", ",", "1", "]", ")", "\n", "", "elif", "sortby", "==", "'xmax'", ":", "\n", "            ", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "bboxes", "[", ":", ",", "2", "]", ")", "\n", "", "elif", "sortby", "==", "'ymax'", ":", "\n", "            ", "sorted_inds", "=", "np", ".", "argsort", "(", "-", "bboxes", "[", ":", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'argument sortby cannot take value {}'", "\n", ".", "format", "(", "sortby", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sorted_inds", "=", "np", ".", "argsort", "(", "range", "(", "len", "(", "masks", ")", ")", ")", "\n", "\n", "", "full_masks", "=", "[", "]", "\n", "bboxes", "*=", "scale", "\n", "for", "i", "in", "sorted_inds", ":", "\n", "        ", "if", "scores", "is", "not", "None", "and", "scores", "[", "i", "]", "<", "thresh", ":", "\n", "            ", "continue", "\n", "", "mask", "=", "masks", "[", "i", "]", "\n", "bbox", "=", "bboxes", "[", "i", "]", "\n", "full_masks", ".", "append", "(", "fill", "(", "mask", ",", "bbox", ",", "im_shape", ")", ")", "\n", "", "full_masks", "=", "np", ".", "array", "(", "full_masks", ")", "\n", "return", "full_masks", ",", "sorted_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.get_pallete": [[272, 288], ["range"], "function", ["None"], ["", "def", "get_pallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "            ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.viz.plot_image_color_mask": [[290, 308], ["image.astype.astype", "render_image.astype", "numpy.sum"], "function", ["None"], ["", "def", "plot_image_color_mask", "(", "image", ",", "mask", ",", "alpha", "=", "0.4", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        image: 3-D array of shape [H, W, 3] following RGB mode (0-255)\n        mask: 3-D array of shape [H, W, 3] with color (0-255), background color needs to be (0, 0, 0).\n        alpha: transparency of mask\n\n    Returns:\n\n    \"\"\"", "\n", "image", "=", "image", ".", "astype", "(", "np", ".", "float32", ")", "\n", "fg_mask", "=", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "2", ")", ">", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "im_factor", "=", "(", "fg_mask", "*", "(", "1", "-", "alpha", ")", "+", "(", "1", "-", "fg_mask", ")", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "mask_factor", "=", "(", "fg_mask", "*", "alpha", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "render_image", "=", "image", "*", "im_factor", "+", "mask", "*", "mask_factor", "\n", "return", "render_image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.config.import_config": [[4, 7], ["importlib.import_module"], "function", ["None"], ["def", "import_config", "(", "config_name", ",", "prefix", "=", "'configs'", ")", ":", "\n", "    ", "m", "=", "importlib", ".", "import_module", "(", "name", "=", "'{}.{}'", ".", "format", "(", "prefix", ",", "config_name", ")", ")", "\n", "return", "m", ".", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor": [[5, 28], ["isinstance", "isinstance", "isinstance", "isinstance", "torch.from_numpy", "isinstance", "isinstance", "torch.Tensor", "blob.items", "list", "hasattr", "tensor_util.to_tensor", "tuple", "tensor_util.to_tensor", "tensor_util.to_tensor", "type", "getattr", "tensor_util.to_tensor"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_tensor"], ["def", "to_tensor", "(", "blob", ")", ":", "\n", "    ", "if", "isinstance", "(", "blob", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "blob", ")", "\n", "", "if", "isinstance", "(", "blob", ",", "int", ")", "or", "isinstance", "(", "blob", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "blob", ")", "\n", "\n", "", "if", "isinstance", "(", "blob", ",", "dict", ")", ":", "\n", "        ", "ts", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blob", ".", "items", "(", ")", ":", "\n", "            ", "ts", "[", "k", "]", "=", "to_tensor", "(", "v", ")", "\n", "", "return", "ts", "\n", "\n", "", "if", "isinstance", "(", "blob", ",", "list", ")", ":", "\n", "        ", "ts", "=", "list", "(", "[", "to_tensor", "(", "e", ")", "for", "e", "in", "blob", "]", ")", "\n", "return", "ts", "\n", "", "if", "isinstance", "(", "blob", ",", "tuple", ")", ":", "\n", "# namedtuple", "\n", "        ", "if", "hasattr", "(", "blob", ",", "'_fields'", ")", ":", "\n", "            ", "ts", "=", "{", "k", ":", "to_tensor", "(", "getattr", "(", "blob", ",", "k", ")", ")", "for", "k", "in", "blob", ".", "_fields", "}", "\n", "ts", "=", "type", "(", "blob", ")", "(", "**", "ts", ")", "\n", "", "else", ":", "\n", "            ", "ts", "=", "tuple", "(", "[", "to_tensor", "(", "e", ")", "for", "e", "in", "blob", "]", ")", "\n", "", "return", "ts", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device": [[30, 54], ["hasattr", "isinstance", "isinstance", "isinstance", "isinstance", "blob.to", "blob.to", "blob.items", "list", "hasattr", "tensor_util.to_device", "tuple", "tensor_util.to_device", "tensor_util.to_device", "type", "getattr", "tensor_util.to_device"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device"], ["", "", "def", "to_device", "(", "blob", ",", "device", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "hasattr", "(", "blob", ",", "'to'", ")", ":", "\n", "        ", "return", "blob", ".", "to", "(", "device", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "if", "isinstance", "(", "blob", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "blob", ".", "to", "(", "device", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "isinstance", "(", "blob", ",", "dict", ")", ":", "\n", "        ", "ts", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "blob", ".", "items", "(", ")", ":", "\n", "            ", "ts", "[", "k", "]", "=", "to_device", "(", "v", ",", "device", ")", "\n", "", "return", "ts", "\n", "\n", "", "if", "isinstance", "(", "blob", ",", "list", ")", ":", "\n", "        ", "ts", "=", "list", "(", "[", "to_device", "(", "e", ",", "device", ")", "for", "e", "in", "blob", "]", ")", "\n", "return", "ts", "\n", "", "if", "isinstance", "(", "blob", ",", "tuple", ")", ":", "\n", "# namedtuple", "\n", "        ", "if", "hasattr", "(", "blob", ",", "'_fields'", ")", ":", "\n", "            ", "ts", "=", "{", "k", ":", "to_device", "(", "getattr", "(", "blob", ",", "k", ")", ",", "device", ")", "for", "k", "in", "blob", ".", "_fields", "}", "\n", "ts", "=", "type", "(", "blob", ")", "(", "**", "ts", ")", "\n", "", "else", ":", "\n", "            ", "ts", "=", "tuple", "(", "[", "to_device", "(", "e", ",", "device", ")", "for", "e", "in", "blob", "]", ")", "\n", "", "return", "ts", "\n", "", "return", "blob", "\n", "# raise ValueError('type of {} is not support for to_device'.format(type(blob)))", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.trainable_parameters": [[11, 20], ["enumerate", "_default_logger.info", "module.parameters", "ret.append", "len"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["def", "trainable_parameters", "(", "module", ",", "_default_logger", "=", "logger", ")", ":", "\n", "    ", "ret", "=", "[", "]", "\n", "total", "=", "0", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "module", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "if", "p", ".", "requires_grad", ":", "\n", "            ", "ret", ".", "append", "(", "p", ")", "\n", "", "total", "=", "idx", "+", "1", "\n", "", "_default_logger", ".", "info", "(", "'[trainable params] {}/{}'", ".", "format", "(", "len", "(", "ret", ")", ",", "total", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.count_model_parameters": [[22, 29], ["module.parameters", "_default_logger.info", "functools.reduce", "list", "round", "float"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "count_model_parameters", "(", "module", ",", "_default_logger", "=", "logger", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "cnt", "+=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "list", "(", "p", ".", "shape", ")", ")", "\n", "", "_default_logger", ".", "info", "(", "'#params: {}, {} M'", ".", "format", "(", "cnt", ",", "round", "(", "cnt", "/", "float", "(", "1e6", ")", ",", "3", ")", ")", ")", "\n", "\n", "return", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params": [[31, 38], ["module.named_parameters", "isinstance", "module.eval"], "function", ["None"], ["", "def", "freeze_params", "(", "module", ")", ":", "\n", "    ", "for", "name", ",", "p", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "False", "\n", "# todo: show complete name", "\n", "# logger.info('[freeze params] {name}'.format(name=name))", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_modules": [[40, 46], ["module.modules", "param_util.freeze_params", "isinstance"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params"], ["", "", "", "def", "freeze_modules", "(", "module", ",", "specific_class", "=", "None", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "specific_class", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "m", ",", "specific_class", ")", ":", "\n", "                ", "continue", "\n", "", "", "freeze_params", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_bn": [[48, 53], ["module.modules", "isinstance", "param_util.freeze_params", "m.eval"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.freeze_params"], ["", "", "def", "freeze_bn", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "freeze_params", "(", "m", ")", "\n", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.count_model_flops": [[55, 140], ["collections.OrderedDict", "model.apply", "collections.OrderedDict.items", "logger.info", "torch.no_grad", "torch.no_grad", "model", "hook.remove", "isinstance", "len", "collections.OrderedDict", "id", "isinstance", "collections.OrderedDict", "module.named_parameters", "list", "hooks.append", "[].split", "list", "list", "int", "int", "param.nelement", "module.named_parameters", "collections.OrderedDict.values", "module.register_forward_hook", "outputs[].size", "outputs.size", "list", "param.size", "len", "int", "param.nelement", "list", "param.nelement", "str().split", "param.size", "param.nelement", "int", "str", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.model"], ["", "", "", "def", "count_model_flops", "(", "model", ",", "x", ")", ":", "\n", "    ", "\"\"\" count the macs of model\n    This implementation is modified version of\n    https://github.com/nmhkahn/torchsummaryX/blob/558b0ec4e5f8efdbdf4244cc7b5e10ce66095910/torchsummaryX/torchsummaryX.py#L5\n\n    Args:\n        model: nn.Module\n        x: 4-D tensor as the input of model\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "def", "register_hook", "(", "module", ")", ":", "\n", "        ", "def", "hook", "(", "module", ",", "inputs", ",", "outputs", ")", ":", "\n", "            ", "cls_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "module_idx", "=", "len", "(", "summary", ")", "\n", "key", "=", "\"{}_{}\"", ".", "format", "(", "module_idx", ",", "cls_name", ")", "\n", "\n", "info", "=", "OrderedDict", "(", ")", "\n", "info", "[", "\"id\"", "]", "=", "id", "(", "module", ")", "\n", "if", "isinstance", "(", "outputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "info", "[", "\"out\"", "]", "=", "list", "(", "outputs", ".", "size", "(", ")", ")", "\n", "\n", "", "info", "[", "\"ksize\"", "]", "=", "\"-\"", "\n", "info", "[", "\"inner\"", "]", "=", "OrderedDict", "(", ")", "\n", "info", "[", "\"params\"", "]", ",", "info", "[", "\"macs\"", "]", "=", "int", "(", "0", ")", ",", "int", "(", "0", ")", "\n", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "info", "[", "\"params\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "if", "name", "==", "\"weight\"", ":", "\n", "                    ", "ksize", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "# to make [in_shape, out_shape, ksize, ksize]", "\n", "if", "len", "(", "ksize", ")", ">", "1", ":", "\n", "                        ", "ksize", "[", "0", "]", ",", "ksize", "[", "1", "]", "=", "ksize", "[", "1", "]", ",", "ksize", "[", "0", "]", "\n", "", "info", "[", "\"ksize\"", "]", "=", "ksize", "\n", "\n", "# ignore N, C when calculate Mult-Adds in ConvNd", "\n", "if", "\"Conv\"", "in", "cls_name", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "int", "(", "param", ".", "nelement", "(", ")", "*", "int", "(", "np", ".", "prod", "(", "info", "[", "\"out\"", "]", "[", "2", ":", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "# RNN modules have inner weights such as weight_ih_l0", "\n", "", "", "elif", "\"weight\"", "in", "name", ":", "\n", "                    ", "info", "[", "\"inner\"", "]", "[", "name", "]", "=", "list", "(", "param", ".", "size", "(", ")", ")", "\n", "info", "[", "\"macs\"", "]", "+=", "param", ".", "nelement", "(", ")", "\n", "\n", "# if the current module is already-used, mark as \"(recursive)\"", "\n", "# check if this module has params", "\n", "", "", "if", "list", "(", "module", ".", "named_parameters", "(", ")", ")", ":", "\n", "                ", "for", "v", "in", "summary", ".", "values", "(", ")", ":", "\n", "                    ", "if", "info", "[", "\"id\"", "]", "==", "v", "[", "\"id\"", "]", ":", "\n", "                        ", "info", "[", "\"params\"", "]", "=", "\"(recursive)\"", "\n", "\n", "", "", "", "if", "info", "[", "\"params\"", "]", "==", "0", ":", "\n", "                ", "info", "[", "\"params\"", "]", ",", "info", "[", "\"macs\"", "]", "=", "\"-\"", ",", "\"-\"", "\n", "\n", "", "summary", "[", "key", "]", "=", "info", "\n", "\n", "# ignore Sequential and ModuleList", "\n", "", "if", "not", "module", ".", "_modules", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "hooks", "=", "[", "]", "\n", "summary", "=", "OrderedDict", "(", ")", "\n", "\n", "model", ".", "apply", "(", "register_hook", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", "(", "x", ")", "\n", "\n", "", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "total_params", ",", "total_macs", "=", "0", ",", "0", "\n", "for", "layer", ",", "info", "in", "summary", ".", "items", "(", ")", ":", "\n", "        ", "repr_macs", "=", "info", "[", "\"macs\"", "]", "\n", "\n", "if", "isinstance", "(", "repr_macs", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "total_macs", "+=", "repr_macs", "\n", "\n", "", "", "logger", ".", "info", "(", "\"# Mult-Adds: {0:,.2f} GFlops\"", ".", "format", "(", "total_macs", "/", "1000000000", ")", ")", "\n", "return", "total_macs", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_conv_parameters": [[142, 154], ["src.weight.data.clone().detach", "src.__dict__.items", "hasattr", "src.bias.data.clone().detach", "name.startswith", "src.weight.data.clone", "src.bias.data.clone"], "function", ["None"], ["", "def", "copy_conv_parameters", "(", "src", ":", "nn", ".", "Conv2d", ",", "dst", ":", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "dst", ".", "weight", ".", "data", "=", "src", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "hasattr", "(", "dst", ",", "'bias'", ")", "and", "dst", ".", "bias", "is", "not", "None", ":", "\n", "        ", "dst", ".", "bias", ".", "data", "=", "src", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "for", "name", ",", "v", "in", "src", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "continue", "\n", "", "if", "name", "==", "'kernel_size'", ":", "\n", "            ", "assert", "dst", ".", "__dict__", "[", "name", "]", "==", "src", ".", "__dict__", "[", "name", "]", "\n", "\n", "", "dst", ".", "__dict__", "[", "name", "]", "=", "src", ".", "__dict__", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_bn_parameters": [[156, 167], ["src.__dict__.items", "src.weight.data.clone().detach", "src.bias.data.clone().detach", "name.startswith", "src.weight.data.clone", "src.bias.data.clone"], "function", ["None"], ["", "", "def", "copy_bn_parameters", "(", "src", ":", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ",", "dst", ":", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "    ", "if", "dst", ".", "affine", ":", "\n", "        ", "dst", ".", "weight", ".", "data", "=", "src", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "dst", ".", "bias", ".", "data", "=", "src", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "dst", ".", "running_mean", "=", "src", ".", "running_mean", "\n", "dst", ".", "running_var", "=", "src", ".", "running_var", "\n", "dst", ".", "num_batches_tracked", "=", "src", ".", "num_batches_tracked", "\n", "for", "name", ",", "v", "in", "src", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "continue", "\n", "", "dst", ".", "__dict__", "[", "name", "]", "=", "src", ".", "__dict__", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.copy_weight_bias": [[169, 178], ["src.__dict__.items", "src.weight.data.clone().detach", "src.bias.data.clone().detach", "name.startswith", "src.weight.data.clone", "src.bias.data.clone"], "function", ["None"], ["", "", "def", "copy_weight_bias", "(", "src", ":", "nn", ".", "Module", ",", "dst", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "if", "dst", ".", "weight", "is", "not", "None", ":", "\n", "        ", "dst", ".", "weight", ".", "data", "=", "src", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "if", "dst", ".", "bias", "is", "not", "None", ":", "\n", "        ", "dst", ".", "bias", ".", "data", "=", "src", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "for", "name", ",", "v", "in", "src", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "'_'", ")", ":", "\n", "            ", "continue", "\n", "", "dst", ".", "__dict__", "[", "name", "]", "=", "src", ".", "__dict__", "[", "name", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.__init__": [[37, 52], ["logger.get_console_file_logger", "dict", "ValueError", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_console_file_logger"], ["    ", "def", "__init__", "(", "self", ",", "\n", "name", ",", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "use_tensorboard", "=", "False", ",", "\n", "tensorboard_logdir", "=", "None", ")", ":", "\n", "# self._logger = logging.getLogger(name)", "\n", "        ", "self", ".", "_level", "=", "level", "\n", "# self._logger.setLevel(level)", "\n", "self", ".", "_logger", "=", "get_console_file_logger", "(", "name", ",", "level", ",", "tensorboard_logdir", ")", "\n", "self", ".", "use_tensorboard", "=", "use_tensorboard", "\n", "if", "self", ".", "use_tensorboard", "and", "tensorboard_logdir", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'logdir is not None if you use tensorboard'", ")", "\n", "", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "summary_w", "=", "tensorboardX", ".", "SummaryWriter", "(", "tensorboard_logdir", ")", "\n", "", "self", ".", "smoothvalues", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.create_or_get_smoothvalues": [[53, 60], ["value_dict.items", "logger.Logger.smoothvalues[].add_value", "logger.Logger.smoothvalues[].get_average_value", "logger.SmoothedValue", "value_dict.items"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.add_value", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.get_average_value"], ["", "def", "create_or_get_smoothvalues", "(", "self", ",", "value_dict", ":", "dict", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "value_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "smoothvalues", ":", "\n", "                ", "self", ".", "smoothvalues", "[", "key", "]", "=", "SmoothedValue", "(", "100", ")", "\n", "", "self", ".", "smoothvalues", "[", "key", "]", ".", "add_value", "(", "value", ")", "\n", "\n", "", "return", "{", "key", ":", "self", ".", "smoothvalues", "[", "key", "]", ".", "get_average_value", "(", ")", "for", "key", ",", "_", "in", "value_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info": [[61, 63], ["logger.Logger._logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "info", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.on": [[64, 67], ["logger.Logger._logger.setLevel"], "methods", ["None"], ["", "def", "on", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "setLevel", "(", "self", ".", "_level", ")", "\n", "self", ".", "use_tensorboard", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.off": [[68, 71], ["logger.Logger._logger.setLevel"], "methods", ["None"], ["", "def", "off", "(", "self", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "setLevel", "(", "100", ")", "\n", "self", ".", "use_tensorboard", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_weights": [[72, 78], ["module.named_parameters", "logger.Logger.summary_w.add_histogram", "p.cpu().data.numpy", "p.cpu"], "methods", ["None"], ["", "def", "summary_weights", "(", "self", ",", "module", ",", "step", ")", ":", "\n", "        ", "if", "step", "%", "100", "==", "0", ":", "\n", "            ", "for", "name", ",", "p", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "summary_w", ".", "add_histogram", "(", "'weights/{}'", ".", "format", "(", "name", ")", ",", "p", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_grads": [[79, 85], ["module.named_parameters", "logger.Logger.summary_w.add_histogram", "p.grad.cpu().data.numpy", "p.grad.cpu"], "methods", ["None"], ["", "", "", "def", "summary_grads", "(", "self", ",", "module", ",", "step", ")", ":", "\n", "        ", "if", "step", "%", "100", "==", "0", ":", "\n", "            ", "for", "name", ",", "p", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "summary_w", ".", "add_histogram", "(", "'grads/{}'", ".", "format", "(", "name", ")", ",", "p", ".", "grad", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.train_log": [[86, 129], ["logger.Logger.create_or_get_smoothvalues", "int", "logger.Logger.create_or_get_smoothvalues", "logger.Logger.create_or_get_smoothvalues", "divmod", "divmod", "str", "logger.Logger._logger.info", "logger.Logger.train_summary", "round", "round", "round", "round", "round", "logger.Logger.items", "str().ljust", "metric_dict.items", "numpy.round", "str", "round"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.create_or_get_smoothvalues", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.create_or_get_smoothvalues", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.create_or_get_smoothvalues", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.train_summary"], ["", "", "", "def", "train_log", "(", "self", ",", "\n", "step", ",", "\n", "loss_dict", ",", "\n", "time_cost", ",", "\n", "data_time", ",", "\n", "lr", ",", "num_iters", ",", "metric_dict", "=", "None", ",", "\n", "tensorboard_interval_step", "=", "100", ",", "\n", "log_interval_step", "=", "1", ")", ":", "\n", "        ", "smooth_loss_dict", "=", "self", ".", "create_or_get_smoothvalues", "(", "loss_dict", ")", "\n", "loss_info", "=", "''", ".", "join", "(", "\n", "[", "'{name} = {value}, '", ".", "format", "(", "name", "=", "name", ",", "value", "=", "str", "(", "round", "(", "value", ",", "6", ")", ")", ".", "ljust", "(", "6", ",", "'0'", ")", ")", "for", "name", ",", "value", "in", "\n", "smooth_loss_dict", ".", "items", "(", ")", "]", ")", "\n", "step_info", "=", "'step: {}, '", ".", "format", "(", "int", "(", "step", ")", ")", "\n", "# eta", "\n", "smooth_time_cost", "=", "self", ".", "create_or_get_smoothvalues", "(", "{", "'time_cost'", ":", "time_cost", "}", ")", "[", "'time_cost'", "]", "\n", "smooth_data_time", "=", "self", ".", "create_or_get_smoothvalues", "(", "{", "'data_time'", ":", "data_time", "}", ")", "[", "'data_time'", "]", "\n", "if", "num_iters", "is", "not", "None", ":", "\n", "            ", "eta", "=", "(", "num_iters", "-", "step", ")", "*", "smooth_time_cost", "\n", "m", ",", "s", "=", "divmod", "(", "eta", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "eta_str", "=", "\"%02d:%02d:%02d\"", "%", "(", "h", ",", "m", ",", "s", ")", "\n", "time_cost_info", "=", "'({} sec / step, data: {} sec, eta: {})'", ".", "format", "(", "round", "(", "smooth_time_cost", ",", "3", ")", ",", "\n", "round", "(", "smooth_data_time", ",", "3", ")", ",", "\n", "eta_str", ")", "\n", "", "else", ":", "\n", "            ", "time_cost_info", "=", "'({} sec / step, data: {} sec)'", ".", "format", "(", "round", "(", "smooth_time_cost", ",", "3", ")", ",", "\n", "round", "(", "smooth_data_time", ",", "3", ")", ")", "\n", "\n", "", "if", "metric_dict", ":", "\n", "            ", "metric_info", "=", "''", ".", "join", "(", "\n", "[", "'[Train] {name} = {value}, '", ".", "format", "(", "name", "=", "name", ",", "value", "=", "np", ".", "round", "(", "value", ",", "6", ")", ")", "for", "name", ",", "value", "in", "\n", "metric_dict", ".", "items", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "metric_info", "=", "''", "\n", "", "lr_info", "=", "'lr = {}, '", ".", "format", "(", "str", "(", "round", "(", "lr", ",", "6", ")", ")", ")", "\n", "msg", "=", "'{loss}{metric}{lr}{step}{time}'", ".", "format", "(", "loss", "=", "loss_info", ",", "metric", "=", "metric_info", ",", "step", "=", "step_info", ",", "\n", "lr", "=", "lr_info", ",", "\n", "time", "=", "time_cost_info", ")", "\n", "if", "step", "%", "log_interval_step", "==", "0", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "msg", ")", "\n", "\n", "", "if", "self", ".", "use_tensorboard", "and", "step", "%", "tensorboard_interval_step", "==", "0", ":", "\n", "            ", "self", ".", "train_summary", "(", "step", ",", "smooth_loss_dict", ",", "time_cost", ",", "lr", ",", "metric_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.train_summary": [[130, 143], ["loss_dict.items", "logger.Logger.summary_w.add_scalar", "logger.Logger.summary_w.add_scalar", "logger.Logger.summary_w.add_scalar", "metric_dict.items", "float", "float", "float", "isinstance", "logger.Logger.summary_w.add_scalar", "isinstance", "enumerate", "logger.Logger.summary_w.add_scalar", "float"], "methods", ["None"], ["", "", "def", "train_summary", "(", "self", ",", "step", ",", "loss_dict", ",", "time_cost", ",", "lr", ",", "metric_dict", "=", "None", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "summary_w", ".", "add_scalar", "(", "'loss/{}'", ".", "format", "(", "name", ")", ",", "float", "(", "value", ")", ",", "global_step", "=", "step", ")", "\n", "", "if", "metric_dict", ":", "\n", "            ", "for", "name", ",", "value", "in", "metric_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "                    ", "self", ".", "summary_w", ".", "add_scalar", "(", "'train/{}'", ".", "format", "(", "name", ")", ",", "value", ",", "global_step", "=", "step", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "for", "idx", ",", "nd_v", "in", "enumerate", "(", "value", ")", ":", "\n", "                        ", "self", ".", "summary_w", ".", "add_scalar", "(", "'train/{}_{}'", ".", "format", "(", "name", ",", "idx", ")", ",", "float", "(", "nd_v", ")", ",", "global_step", "=", "step", ")", "\n", "\n", "", "", "", "", "self", ".", "summary_w", ".", "add_scalar", "(", "'sec_per_step'", ",", "float", "(", "time_cost", ")", ",", "global_step", "=", "step", ")", "\n", "self", ".", "summary_w", ".", "add_scalar", "(", "'learning_rate'", ",", "float", "(", "lr", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.eval_log": [[144, 149], ["metric_dict.items", "logger.Logger._logger.info", "logger.Logger.eval_summary", "numpy.round"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.eval_summary"], ["", "def", "eval_log", "(", "self", ",", "metric_dict", ",", "step", "=", "None", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "metric_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "'[Eval] {name} = {value}'", ".", "format", "(", "name", "=", "name", ",", "value", "=", "np", ".", "round", "(", "value", ",", "6", ")", ")", ")", "\n", "", "if", "self", ".", "use_tensorboard", ":", "\n", "            ", "self", ".", "eval_summary", "(", "metric_dict", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.eval_summary": [[150, 160], ["metric_dict.items", "logger.Logger.summary_w.file_writer.flush", "isinstance", "logger.Logger.summary_w.add_scalar", "isinstance", "enumerate", "logger.Logger.summary_w.add_scalar", "float"], "methods", ["None"], ["", "", "def", "eval_summary", "(", "self", ",", "metric_dict", ",", "step", ")", ":", "\n", "        ", "if", "step", "is", "None", ":", "\n", "            ", "step", "=", "1", "\n", "", "for", "name", ",", "value", "in", "metric_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "float", ")", ":", "\n", "                ", "self", ".", "summary_w", ".", "add_scalar", "(", "'eval/{}'", ".", "format", "(", "name", ")", ",", "value", ",", "global_step", "=", "step", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "for", "idx", ",", "nd_v", "in", "enumerate", "(", "value", ")", ":", "\n", "                    ", "self", ".", "summary_w", ".", "add_scalar", "(", "'eval/{}_{}'", ".", "format", "(", "name", ",", "idx", ")", ",", "float", "(", "nd_v", ")", ",", "global_step", "=", "step", ")", "\n", "", "", "", "self", ".", "summary_w", ".", "file_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.forward_times": [[161, 163], ["logger.Logger._logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "forward_times", "(", "self", ",", "forward_times", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "'use {} forward and {} backward mode.'", ".", "format", "(", "forward_times", ",", "forward_times", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.equation": [[164, 166], ["logger.Logger._logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "equation", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "'{name} = {value}'", ".", "format", "(", "name", "=", "name", ",", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.approx_equation": [[167, 169], ["logger.Logger._logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "approx_equation", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "_logger", ".", "info", "(", "'{name} ~= {value}'", ".", "format", "(", "name", "=", "name", ",", "value", "=", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.__init__": [[198, 203], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.add_value": [[204, 209], ["logger.SmoothedValue.deque.append", "logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "add_value", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.get_median_value": [[210, 212], ["numpy.median"], "methods", ["None"], ["", "def", "get_median_value", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "median", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.get_average_value": [[213, 215], ["numpy.mean"], "methods", ["None"], ["", "def", "get_average_value", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.SmoothedValue.get_global_average_value": [[216, 218], ["None"], "methods", ["None"], ["", "def", "get_global_average_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_logger": [[11, 15], ["logging.getLogger", "logging.getLogger.setLevel"], "function", ["None"], ["def", "get_logger", "(", "name", "=", "__name__", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.get_console_file_logger": [[17, 34], ["logging.Logger", "logging.Logger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.Logger.addHandler", "logging.Logger.addHandler", "os.path.join", "str", "time.time"], "function", ["None"], ["", "def", "get_console_file_logger", "(", "name", ",", "level", ",", "logdir", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "Logger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "BASIC_FORMAT", "=", "\"%(asctime)s, %(levelname)s:%(name)s:%(message)s\"", "\n", "DATE_FORMAT", "=", "'%Y-%m-%d %H:%M:%S'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "BASIC_FORMAT", ",", "DATE_FORMAT", ")", "\n", "chlr", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "chlr", ".", "setFormatter", "(", "formatter", ")", "\n", "chlr", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "\n", "fhlr", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "str", "(", "time", ".", "time", "(", ")", ")", "+", "'.log'", ")", ")", "\n", "fhlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "chlr", ")", "\n", "logger", ".", "addHandler", "(", "fhlr", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.save_log": [[171, 173], ["logger.info"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "", "def", "save_log", "(", "logger", ",", "checkpoint_name", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'{} has been saved.'", ".", "format", "(", "checkpoint_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.restore_log": [[175, 177], ["logger.info"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "restore_log", "(", "logger", ",", "checkpoint_name", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'{} has been restored.'", ".", "format", "(", "checkpoint_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.eval_start": [[179, 181], ["logger.info", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "eval_start", "(", "logger", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'Start evaluation at {}'", ".", "format", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.eval_progress": [[183, 185], ["logger.info"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "eval_progress", "(", "logger", ",", "cur", ",", "total", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'[Eval] {}/{}'", ".", "format", "(", "cur", ",", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.speed": [[187, 189], ["logger.info"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "speed", "(", "logger", ",", "sec", ",", "unit", "=", "'im'", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'[Speed] {} s/{}'", ".", "format", "(", "sec", ",", "unit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_pair": [[14, 16], ["None"], "function", ["None"], ["def", "make_pair", "(", "x", ")", ":", "\n", "    ", "return", "x", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_xx": [[18, 25], ["isinstance", "receptive_field_2d_util.from_conv2d", "isinstance", "receptive_field_2d_util.from_maxpool2d", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_conv2d", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_maxpool2d"], ["", "def", "from_xx", "(", "module", ",", "name", "=", "None", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "return", "from_conv2d", "(", "module", ",", "name", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "MaxPool2d", ")", ":", "\n", "        ", "return", "from_maxpool2d", "(", "module", ",", "name", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Unsupport {}'", ".", "format", "(", "type", "(", "module", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_conv2d": [[27, 38], ["BaseLayer"], "function", ["None"], ["", "", "def", "from_conv2d", "(", "module", ":", "nn", ".", "Conv2d", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "BaseLayer", "(", "\n", "kernel_size", "=", "module", ".", "kernel_size", ",", "\n", "stride", "=", "module", ".", "stride", ",", "\n", "dilation", "=", "module", ".", "dilation", ",", "\n", "padding", "=", "module", ".", "padding", ",", "\n", "input_size", "=", "None", ",", "\n", "output_size", "=", "None", ",", "\n", "receptive_field", "=", "None", ",", "\n", "layer_name", "=", "module", ".", "__class__", ".", "__name__", "if", "name", "is", "None", "else", "name", ",", "\n", "is_hide", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_maxpool2d": [[41, 52], ["BaseLayer", "receptive_field_2d_util.make_pair", "receptive_field_2d_util.make_pair", "receptive_field_2d_util.make_pair", "receptive_field_2d_util.make_pair"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_pair", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_pair", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_pair", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_pair"], ["", "def", "from_maxpool2d", "(", "module", ":", "nn", ".", "MaxPool2d", ",", "name", "=", "None", ")", ":", "\n", "    ", "return", "BaseLayer", "(", "\n", "kernel_size", "=", "make_pair", "(", "module", ".", "kernel_size", ")", ",", "\n", "stride", "=", "make_pair", "(", "module", ".", "stride", ")", ",", "\n", "dilation", "=", "make_pair", "(", "module", ".", "dilation", ")", ",", "\n", "padding", "=", "make_pair", "(", "module", ".", "padding", ")", ",", "\n", "input_size", "=", "None", ",", "\n", "output_size", "=", "None", ",", "\n", "receptive_field", "=", "None", ",", "\n", "layer_name", "=", "module", ".", "__class__", ".", "__name__", "if", "name", "is", "None", "else", "name", ",", "\n", "is_hide", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.plot_receptive_field_growth_from_module": [[55, 59], ["receptive_field_2d_util.make_baselayers_from_tracking", "receptive_field_2d_util.print_baselayers", "receptive_field_2d_util.plot_receptive_field_growth_from_baselayers"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_baselayers_from_tracking", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.print_baselayers", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.plot_receptive_field_growth_from_baselayers"], ["", "def", "plot_receptive_field_growth_from_module", "(", "input_shape", ",", "module", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "layer_list", "=", "make_baselayers_from_tracking", "(", "module", ",", "input_shape", ")", "\n", "print_baselayers", "(", "layer_list", ")", "\n", "return", "plot_receptive_field_growth_from_baselayers", "(", "layer_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.plot_receptive_field_growth_from_baselayers": [[61, 88], ["all", "numpy.arange", "numpy.array", "matplotlib.plot", "numpy.linspace", "matplotlib.plot", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.fill_between", "matplotlib.grid", "len", "len", "numpy.minimum", "scipy.interpolate.interp1d", "len", "len"], "function", ["None"], ["", "def", "plot_receptive_field_growth_from_baselayers", "(", "layer_list", ":", "list", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        layer_list:\n\n    Returns:\n    \"\"\"", "\n", "# fig = plt.figure()", "\n", "# ax = fig.add_subplot(1, 1, 1)", "\n", "# n = reduce(lambda layer1, layer2: int(not layer1.is_hide) + int(not layer2.is_hide), layer_list)", "\n", "assert", "all", "(", "[", "layer", ".", "receptive_field", "[", "0", "]", "==", "layer", ".", "receptive_field", "[", "1", "]", "for", "layer", "in", "layer_list", "]", ")", "\n", "rf_list", "=", "[", "layer", ".", "receptive_field", "[", "0", "]", "for", "layer", "in", "layer_list", "if", "not", "layer", ".", "is_hide", "]", "\n", "plt", ".", "rcParams", "[", "'xtick.direction'", "]", "=", "'in'", "\n", "plt", ".", "rcParams", "[", "'ytick.direction'", "]", "=", "'in'", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "rf_list", ")", ")", "\n", "y", "=", "np", ".", "array", "(", "rf_list", ")", "\n", "plt", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "'b'", ",", "marker", "=", "'o'", ",", "markersize", "=", "3", ",", "\n", "markeredgecolor", "=", "'black'", ",", "mfc", "=", "'g'", ")", "\n", "sparse_x", "=", "np", ".", "linspace", "(", "1", ",", "len", "(", "rf_list", ")", ",", "len", "(", "rf_list", ")", "//", "5", ")", "\n", "sparse_x", "=", "np", ".", "minimum", "(", "sparse_x", ",", "len", "(", "rf_list", ")", ")", "-", "1", "\n", "smooth_y", "=", "interpolate", ".", "interp1d", "(", "x", ",", "y", ",", "kind", "=", "'cubic'", ")", "(", "sparse_x", ")", "\n", "plt", ".", "plot", "(", "sparse_x", ",", "smooth_y", ",", "'r'", ")", "\n", "plt", ".", "ylim", "(", "bottom", "=", "0", ")", "\n", "plt", ".", "xlim", "(", "left", "=", "0", ")", "\n", "plt", ".", "fill_between", "(", "sparse_x", ",", "smooth_y", ",", "color", "=", "\"r\"", ",", "alpha", "=", "0.3", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.print_baselayers": [[90, 96], ["print"], "function", ["None"], ["", "def", "print_baselayers", "(", "layer_list", ":", "list", ")", ":", "\n", "    ", "cnt", "=", "1", "\n", "for", "layer", "in", "layer_list", ":", "\n", "        ", "print", "(", "cnt", ",", "layer", ")", "\n", "if", "not", "layer", ".", "is_hide", ":", "\n", "            ", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.make_baselayers_from_tracking": [[98, 152], ["model.apply", "enumerate", "torch.no_grad", "torch.no_grad", "torch.ones", "torch.ones", "model", "hook.remove", "getattr", "getattr", "any", "hooks.append", "layer._replace", "receptive_field_2d_util.from_xx", "baselayer._replace._replace", "baselayer._replace._replace", "baselayer._replace._replace", "baselayers.append", "module.register_forward_hook", "isinstance", "isinstance", "input[].size", "input[].size", "output.size", "output.size"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.preprocess.albu.ConstantPad.apply", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.model", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.receptive_field_2d_util.from_xx"], ["", "", "", "def", "make_baselayers_from_tracking", "(", "model", ":", "nn", ".", "Module", ",", "input_shape", ")", ":", "\n", "    ", "def", "_register_hook", "(", "module", ")", ":", "\n", "        ", "def", "_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "\n", "            ", "last_rf", "=", "getattr", "(", "input", "[", "0", "]", ",", "'receptive_field'", ",", "last_mem_receptive_field", "[", "0", "]", ")", "\n", "accumulated_stride", "=", "getattr", "(", "input", "[", "0", "]", ",", "'accumulated_stride'", ",", "last_mem_accumulated_stride", "[", "0", "]", ")", "\n", "if", "any", "(", "[", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ",", "\n", "isinstance", "(", "module", ",", "nn", ".", "MaxPool2d", ")", "]", ")", ":", "\n", "                ", "baselayer", "=", "from_xx", "(", "module", ")", "\n", "baselayer", "=", "baselayer", ".", "_replace", "(", "input_size", "=", "(", "input", "[", "0", "]", ".", "size", "(", "2", ")", ",", "input", "[", "0", "]", ".", "size", "(", "3", ")", ")", ")", "\n", "baselayer", "=", "baselayer", ".", "_replace", "(", "output_size", "=", "(", "output", ".", "size", "(", "2", ")", ",", "output", ".", "size", "(", "3", ")", ")", ")", "\n", "\n", "baselayer", ".", "dilation", "[", "0", "]", "*", "(", "baselayer", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "\n", "\n", "cur_rf_H", "=", "last_rf", "[", "0", "]", "+", "(", "baselayer", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "baselayer", ".", "dilation", "[", "0", "]", "*", "accumulated_stride", "[", "0", "]", "\n", "cur_rf_W", "=", "last_rf", "[", "1", "]", "+", "(", "baselayer", ".", "kernel_size", "[", "1", "]", "-", "1", ")", "*", "baselayer", ".", "dilation", "[", "1", "]", "*", "accumulated_stride", "[", "1", "]", "\n", "\n", "baselayer", "=", "baselayer", ".", "_replace", "(", "receptive_field", "=", "(", "cur_rf_H", ",", "cur_rf_W", ")", ")", "\n", "\n", "baselayers", ".", "append", "(", "baselayer", ")", "\n", "output", ".", "receptive_field", "=", "baselayer", ".", "receptive_field", "\n", "output", ".", "accumulated_stride", "=", "(", "\n", "accumulated_stride", "[", "0", "]", "*", "baselayer", ".", "stride", "[", "0", "]", ",", "accumulated_stride", "[", "1", "]", "*", "baselayer", ".", "stride", "[", "1", "]", ")", "\n", "\n", "last_mem_receptive_field", "[", "0", "]", "=", "baselayer", ".", "receptive_field", "\n", "last_mem_accumulated_stride", "[", "0", "]", "=", "output", ".", "accumulated_stride", "\n", "", "else", ":", "\n", "                ", "output", ".", "receptive_field", "=", "last_rf", "\n", "\n", "", "", "if", "not", "module", ".", "_modules", ":", "\n", "            ", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "_hook", ")", ")", "\n", "\n", "", "", "hooks", "=", "[", "]", "\n", "baselayers", "=", "[", "]", "\n", "last_mem_receptive_field", "=", "[", "1", "]", "\n", "last_mem_accumulated_stride", "=", "[", "(", "1", ",", "1", ")", "]", "\n", "model", ".", "apply", "(", "_register_hook", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "input", "=", "torch", ".", "ones", "(", "input_shape", ")", "\n", "input", ".", "receptive_field", "=", "(", "1", ",", "1", ")", "\n", "input", ".", "accumulated_stride", "=", "(", "1", ",", "1", ")", "\n", "model", "(", "input", ")", "\n", "\n", "", "for", "hook", "in", "hooks", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "_rf", "=", "(", "1", ",", "1", ")", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "baselayers", ")", ":", "\n", "        ", "if", "layer", ".", "receptive_field", "[", "0", "]", "<", "_rf", "[", "0", "]", "or", "layer", ".", "receptive_field", "[", "1", "]", "<", "_rf", "[", "1", "]", ":", "\n", "            ", "baselayers", "[", "idx", "]", "=", "layer", ".", "_replace", "(", "is_hide", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "_rf", "=", "layer", ".", "receptive_field", "\n", "", "", "return", "baselayers", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.registry.Registry.__init__": [[40, 42], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.registry.Registry.register": [[43, 55], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.registry._register_generic", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", "=", "None", ",", "module", "=", "None", ",", "override", "=", "False", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ",", "override", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ",", "override", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.registry._register_generic": [[7, 13], ["logging.warning"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ",", "override", "=", "False", ")", ":", "\n", "    ", "module_name", "=", "module_name", "if", "module_name", "else", "module", ".", "__name__", "\n", "if", "not", "override", ":", "\n", "        ", "if", "module_name", "in", "module_dict", ":", "\n", "            ", "logging", ".", "warning", "(", "'{} has been in module_dict.'", ".", "format", "(", "module_name", ")", ")", "\n", "", "", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix": [[4, 24], ["y_true.float.float", "y_pred.float.float", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor.to_dense", "torch.sparse_coo_tensor.size", "torch.sparse_coo_tensor.to_dense", "torch.stack", "torch.ones_like", "torch.stack", "torch.ones_like"], "function", ["None"], ["def", "th_confusion_matrix", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        y_true: 1-D tensor of shape [n_samples], label value starts from 1 rather than 0\n        y_pred: 1-D tensor of shape [n_samples]\n        num_classes: scalar\n    Returns:\n\n    \"\"\"", "\n", "size", "=", "[", "num_classes", "+", "1", ",", "num_classes", "+", "1", "]", "if", "num_classes", "is", "not", "None", "else", "None", "\n", "y_true", "=", "y_true", ".", "float", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "float", "(", ")", "\n", "if", "size", "is", "None", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ")", "\n", "", "else", ":", "\n", "        ", "cm", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "torch", ".", "stack", "(", "[", "y_true", ",", "y_pred", "]", ",", "dim", "=", "0", ")", ",", "values", "=", "torch", ".", "ones_like", "(", "y_pred", ")", ",", "\n", "size", "=", "size", ")", "\n", "\n", "", "return", "cm", ".", "to_dense", "(", ")", "[", "1", ":", ",", "1", ":", "]", "if", "cm", ".", "size", "(", "0", ")", ">", "2", "else", "cm", ".", "to_dense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_overall_accuracy_score": [[26, 28], ["float", "y_true.numel", "y_true.int", "y_pred.int"], "function", ["None"], ["", "def", "th_overall_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "(", "y_true", ".", "int", "(", ")", "==", "y_pred", ".", "int", "(", ")", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "float", "(", "y_true", ".", "numel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_average_accuracy_score": [[30, 38], ["metric.th_confusion_matrix", "cm_th.float.float", "torch.diag", "torch.diag.mean", "torch.diag.mean", "cm_th.float.sum"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix"], ["", "def", "th_average_accuracy_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ",", "return_accuracys", "=", "False", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n", "aas", "=", "torch", ".", "diag", "(", "cm_th", "/", "(", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "[", "None", ",", ":", "]", "+", "1e-6", ")", ")", "\n", "if", "not", "return_accuracys", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "aas", ".", "mean", "(", ")", ",", "aas", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_cohen_kappa_score": [[40, 51], ["metric.th_confusion_matrix", "cm_th.float.float", "cm_th.float.size", "cm_th.float.sum", "cm_th.float.sum", "torch.ones", "torch.ger", "torch.sum", "torch.ones.view", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix"], ["", "", "def", "th_cohen_kappa_score", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "cm_th", "=", "cm_th", ".", "float", "(", ")", "\n", "n_classes", "=", "cm_th", ".", "size", "(", "0", ")", "\n", "sum0", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum1", "=", "cm_th", ".", "sum", "(", "dim", "=", "1", ")", "\n", "expected", "=", "torch", ".", "ger", "(", "sum0", ",", "sum1", ")", "/", "torch", ".", "sum", "(", "sum0", ")", "\n", "w_mat", "=", "torch", ".", "ones", "(", "[", "n_classes", ",", "n_classes", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "w_mat", ".", "view", "(", "-", "1", ")", "[", ":", ":", "n_classes", "+", "1", "]", "=", "0.", "\n", "k", "=", "torch", ".", "sum", "(", "w_mat", "*", "cm_th", ")", "/", "torch", ".", "sum", "(", "w_mat", "*", "expected", ")", "\n", "return", "1.", "-", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_intersection_over_union_per_class": [[53, 62], ["metric.th_confusion_matrix", "th_confusion_matrix.sum", "th_confusion_matrix.sum", "th_confusion_matrix.diag"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_confusion_matrix"], ["", "def", "th_intersection_over_union_per_class", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "cm_th", "=", "th_confusion_matrix", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "sum_over_row", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "sum_over_col", "=", "cm_th", ".", "sum", "(", "dim", "=", "0", ")", "\n", "diag", "=", "cm_th", ".", "diag", "(", ")", "\n", "denominator", "=", "sum_over_row", "+", "sum_over_col", "-", "diag", "\n", "\n", "iou_per_class", "=", "diag", "/", "denominator", "\n", "return", "iou_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_mean_intersection_over_union": [[64, 67], ["metric.th_intersection_over_union_per_class", "th_intersection_over_union_per_class.mean"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.metric.th_intersection_over_union_per_class"], ["", "def", "th_mean_intersection_over_union", "(", "y_true", ":", "torch", ".", "Tensor", ",", "y_pred", ":", "torch", ".", "Tensor", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "iou_per_class", "=", "th_intersection_over_union_per_class", "(", "y_true", ",", "y_pred", ",", "num_classes", ")", "\n", "return", "iou_per_class", ".", "mean", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_world_size": [[6, 12], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_rank": [[13, 19], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.reduce_loss_dict": [[20, 43], ["dist.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "loss_dict.keys", "loss_names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_world_size", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_rank"], ["", "def", "reduce_loss_dict", "(", "loss_dict", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the loss dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    loss_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "loss_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loss_names", "=", "[", "]", "\n", "all_losses", "=", "[", "]", "\n", "for", "k", "in", "sorted", "(", "loss_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "loss_names", ".", "append", "(", "k", ")", "\n", "all_losses", ".", "append", "(", "loss_dict", "[", "k", "]", ")", "\n", "", "all_losses", "=", "torch", ".", "stack", "(", "all_losses", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "all_losses", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "all_losses", "/=", "world_size", "\n", "", "reduced_losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "loss_names", ",", "all_losses", ")", "}", "\n", "", "return", "reduced_losses", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.lr_search.LRSearchBase.__init__": [[7, 11], ["simplecv.core.trainer.LauncherPlugin.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_loader", ",", "loss_key", "=", "'total_loss'", ")", ":", "\n", "        ", "super", "(", "LRSearchBase", ",", "self", ")", ".", "__init__", "(", "'lr_search_base'", ")", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "loss_key", "=", "loss_key", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.lr_search.LRSearchBase.function": [[12, 14], ["None"], "methods", ["None"], ["", "def", "function", "(", "self", ",", "launcher", ":", "trainer", ".", "Launcher", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.lr_search.LinearSearch.__init__": [[17, 27], ["lr_search.LRSearchBase.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_loader", ",", "\n", "loss_key", "=", "'total_loss'", ",", "\n", "lr_search_space", "=", "(", "0.001", ",", "0.003", ",", "0.006", ",", "0.01", ",", "0.03", ",", "0.06", ",", "0.1", ")", ",", "\n", "search_iters", "=", "1000", ",", "\n", ")", ":", "\n", "        ", "super", "(", "LinearSearch", ",", "self", ")", ".", "__init__", "(", "data_loader", ",", "loss_key", ")", "\n", "self", ".", "search_space", "=", "lr_search_space", "\n", "self", ".", "search_results", "=", "list", "(", ")", "\n", "self", ".", "search_iters", "=", "search_iters", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.lr_search.LinearSearch.function": [[28, 51], ["launcher.logger.info", "enumerate", "launcher.logger.info", "simplecv.opt.learning_rate.set_lr", "simplecv.opt.learning_rate.set_lr", "dict", "launcher.train_iters", "lr_search.LinearSearch.search_results.append", "launcher.logger.info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_iters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info"], ["", "def", "function", "(", "self", ",", "launcher", ":", "trainer", ".", "Launcher", ")", ":", "\n", "        ", "launcher", ".", "logger", ".", "info", "(", "'Start LR linear search...'", ")", "\n", "original_lr", "=", "launcher", ".", "lr", "\n", "best_lr", ",", "best_loss", "=", "None", ",", "1e6", "\n", "for", "lr", "in", "self", ".", "search_space", ":", "\n", "            ", "set_lr", "(", "launcher", ".", "optimizer", ",", "lr", ")", "\n", "# don't save ckpt during searching, simply set `save_ckpt_interval_epoch` to large enough value", "\n", "train_config", "=", "dict", "(", "num_iters", "=", "self", ".", "search_iters", ",", "save_ckpt_interval_epoch", "=", "999999", ")", "\n", "loss_dict", "=", "launcher", ".", "train_iters", "(", "self", ".", "data_loader", ",", "None", ",", "**", "train_config", ")", "\n", "launcher", ".", "_ckpt", ".", "_global_step", "=", "0", "\n", "if", "self", ".", "loss_key", "in", "loss_dict", ":", "\n", "                ", "pass", "\n", "", "loss", "=", "loss_dict", "[", "self", ".", "loss_key", "]", "\n", "self", ".", "search_results", ".", "append", "(", "(", "lr", ",", "loss", ")", ")", "\n", "if", "loss", "<", "best_loss", ":", "\n", "                ", "best_lr", "=", "lr", "\n", "best_loss", "=", "loss", "\n", "\n", "", "", "for", "idx", ",", "result", "in", "enumerate", "(", "self", ".", "search_results", ")", ":", "\n", "            ", "launcher", ".", "logger", ".", "info", "(", "'[LR search][{}] lr: {}, loss: {}'", ".", "format", "(", "idx", "+", "1", ",", "*", "result", ")", ")", "\n", "", "launcher", ".", "logger", ".", "info", "(", "'[LR search] best_lr: {}, best_loss: {}'", ".", "format", "(", "best_lr", ",", "best_loss", ")", ")", "\n", "# recover status", "\n", "set_lr", "(", "launcher", ".", "optimizer", ",", "original_lr", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.__init__": [[29, 37], ["checkpoint.CheckPoint.init_checkpoint_info_from_launcher", "dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.init_checkpoint_info_from_launcher"], ["def", "__init__", "(", "self", ",", "launcher", "=", "None", ")", ":", "\n", "        ", "self", ".", "_launcher", "=", "launcher", "\n", "self", ".", "_global_step", "=", "0", "\n", "self", ".", "_json_log", "=", "{", "CheckPoint", ".", "LASTCHECKPOINT", ":", "dict", "(", "\n", "step", "=", "0", ",", "\n", "name", "=", "''", ")", ",", "\n", "}", "\n", "self", ".", "init_checkpoint_info_from_launcher", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.set_global_step": [[38, 43], ["ValueError"], "methods", ["None"], ["", "def", "set_global_step", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", ">=", "0", ":", "\n", "            ", "self", ".", "_global_step", "=", "value", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The global step must be larger than zero.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.global_step": [[44, 47], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "global_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.step": [[48, 50], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "_global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.set_launcher": [[51, 54], ["checkpoint.CheckPoint.init_checkpoint_info_from_launcher"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.init_checkpoint_info_from_launcher"], ["", "def", "set_launcher", "(", "self", ",", "launcher", ")", ":", "\n", "        ", "self", ".", "_launcher", "=", "launcher", "\n", "self", ".", "init_checkpoint_info_from_launcher", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save": [[55, 71], ["collections.OrderedDict", "checkpoint.CheckPoint.get_checkpoint_name", "os.path.join", "torch.save", "checkpoint.CheckPoint.save_checkpoint_info", "simplecv.util.logger.save_log", "checkpoint.CheckPoint._launcher.model.state_dict", "checkpoint.CheckPoint._launcher.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.get_checkpoint_name", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save_checkpoint_info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.save_log"], ["", "def", "save", "(", "self", ")", ":", "\n", "        ", "ckpt", "=", "OrderedDict", "(", "{", "\n", "CheckPoint", ".", "MODEL", ":", "self", ".", "_launcher", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "CheckPoint", ".", "OPTIMIZER", ":", "self", ".", "_launcher", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "CheckPoint", ".", "GLOBALSTEP", ":", "self", ".", "global_step", "\n", "}", ")", "\n", "filename", "=", "self", ".", "get_checkpoint_name", "(", "self", ".", "global_step", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_launcher", ".", "model_dir", ",", "filename", ")", "\n", "torch", ".", "save", "(", "ckpt", ",", "filepath", ")", "\n", "self", ".", "_json_log", "[", "self", ".", "global_step", "]", "=", "filename", "\n", "if", "self", ".", "global_step", ">", "self", ".", "_json_log", "[", "CheckPoint", ".", "LASTCHECKPOINT", "]", "[", "'step'", "]", ":", "\n", "            ", "self", ".", "_json_log", "[", "CheckPoint", ".", "LASTCHECKPOINT", "]", "[", "'step'", "]", "=", "self", ".", "global_step", "\n", "self", ".", "_json_log", "[", "CheckPoint", ".", "LASTCHECKPOINT", "]", "[", "'name'", "]", "=", "filename", "\n", "", "self", ".", "save_checkpoint_info", "(", "self", ".", "_launcher", ".", "model_dir", ")", "\n", "# log", "\n", "save_log", "(", "logger", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load": [[72, 77], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "@", "staticmethod", "\n", "def", "load", "(", "filepath", ")", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "filepath", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n", "return", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save_checkpoint_info": [[78, 82], ["simplecv.util.logger.save_log", "open", "json.dump", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.save_log"], ["", "def", "save_checkpoint_info", "(", "self", ",", "model_dir", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "CheckPoint", ".", "CHECKPOINT_NAME", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "_json_log", ",", "f", ")", "\n", "", "save_log", "(", "logger", ",", "CheckPoint", ".", "CHECKPOINT_NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.try_resume": [[83, 109], ["checkpoint.CheckPoint.load_checkpoint_info", "os.path.join", "checkpoint.CheckPoint.load", "checkpoint.CheckPoint._launcher.model.load_state_dict", "simplecv.util.logger.restore_log", "checkpoint.CheckPoint._launcher.optimizer.load_state_dict", "checkpoint.CheckPoint._launcher.checkpoint.set_global_step"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load_checkpoint_info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.restore_log", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.set_global_step"], ["", "def", "try_resume", "(", "self", ")", ":", "\n", "        ", "\"\"\" json -> ckpt_path -> ckpt -> launcher\n\n        Returns:\n\n        \"\"\"", "\n", "if", "self", ".", "_launcher", "is", "None", ":", "\n", "            ", "return", "\n", "# 1. json", "\n", "", "model_dir", "=", "self", ".", "_launcher", ".", "model_dir", "\n", "json_log", "=", "self", ".", "load_checkpoint_info", "(", "model_dir", ")", "\n", "if", "json_log", "is", "None", ":", "\n", "            ", "return", "\n", "# 2. ckpt path", "\n", "", "last_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_launcher", ".", "model_dir", ",", "json_log", "[", "CheckPoint", ".", "LASTCHECKPOINT", "]", "[", "'name'", "]", ")", "\n", "# 3. ckpt", "\n", "ckpt", "=", "self", ".", "load", "(", "last_path", ")", "\n", "# 4. resume", "\n", "\n", "self", ".", "_launcher", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "CheckPoint", ".", "MODEL", "]", ")", "\n", "if", "self", ".", "_launcher", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_launcher", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "CheckPoint", ".", "OPTIMIZER", "]", ")", "\n", "", "if", "self", ".", "_launcher", ".", "checkpoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "_launcher", ".", "checkpoint", ".", "set_global_step", "(", "ckpt", "[", "CheckPoint", ".", "GLOBALSTEP", "]", ")", "\n", "# log", "\n", "", "restore_log", "(", "logger", ",", "last_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.init_checkpoint_info_from_launcher": [[110, 120], ["checkpoint.CheckPoint.load_checkpoint_info"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load_checkpoint_info"], ["", "def", "init_checkpoint_info_from_launcher", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_launcher", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "model_dir", "=", "self", ".", "_launcher", ".", "model_dir", "\n", "json_file", "=", "self", ".", "load_checkpoint_info", "(", "model_dir", ")", "\n", "\n", "if", "json_file", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "_json_log", "=", "json_file", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load_checkpoint_info": [[121, 129], ["os.path.join", "os.path.exists", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "@", "staticmethod", "\n", "def", "load_checkpoint_info", "(", "model_dir", ")", ":", "\n", "        ", "json_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "CheckPoint", ".", "CHECKPOINT_NAME", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "json_path", ")", ":", "\n", "            ", "return", "None", "\n", "", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "json_file", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "json_file", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.get_checkpoint_name": [[130, 133], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_checkpoint_name", "(", "global_step", ")", ":", "\n", "        ", "return", "'model-{}.pth'", ".", "format", "(", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.is_checkpoint": [[10, 20], ["isinstance", "isinstance", "all"], "function", ["None"], ["def", "is_checkpoint", "(", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "CheckPoint", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "isinstance", "(", "obj", ",", "OrderedDict", ")", "and", "all", "(", "[", "\n", "CheckPoint", ".", "MODEL", "in", "obj", ",", "\n", "CheckPoint", ".", "OPTIMIZER", "in", "obj", ",", "\n", "CheckPoint", ".", "GLOBALSTEP", "in", "obj", "\n", "]", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.load_model_state_dict_from_ckpt": [[135, 147], ["statedict.items", "torch.load", "k.replace.replace", "torch.load"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "", "def", "load_model_state_dict_from_ckpt", "(", "filepath", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "filepath", ")", "\n", "", "except", "RuntimeError", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "filepath", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "", "statedict", "=", "ckpt", "[", "CheckPoint", ".", "MODEL", "]", "\n", "ret", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "statedict", ".", "items", "(", ")", ":", "\n", "        ", "k", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "\n", "ret", "[", "k", "]", "=", "v", "\n", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate.__init__": [[23, 36], ["simplecv.interface.LearningRateBase.__init__", "numpy.array", "learning_rate.MultiStepLearningRate._check", "list"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._check"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._check": [[37, 43], ["numpy.all", "numpy.diff"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate.step": [[44, 56], ["learning_rate.MultiStepLearningRate._compute_lr", "learning_rate.set_lr", "learning_rate.MultiStepLearningRate._compute_warmup_lr", "learning_rate.set_lr"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._compute_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._compute_warmup_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._compute_lr": [[57, 59], ["int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.MultiStepLearningRate._compute_warmup_lr": [[60, 63], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.PolyLearningRate.__init__": [[67, 75], ["simplecv.interface.LearningRateBase.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.PolyLearningRate.step": [[76, 80], ["learning_rate.set_lr"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.__init__": [[84, 88], ["simplecv.interface.LearningRateBase.__init__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.step": [[89, 94], ["learning_rate.set_lr", "math.cos"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.make_learningrate": [[7, 14], ["lr_module", "ValueError"], "function", ["None"], ["        ", "return", "self", ".", "_base_lr", "\n", "\n", "", "def", "step", "(", "self", ",", "global_step", ",", "optimizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.set_lr": [[16, 19], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.optimizer.make_optimizer": [[12, 20], ["ValueError"], "function", ["None"], ["", "def", "make_optimizer", "(", "config", ",", "params", ")", ":", "\n", "    ", "opt_type", "=", "config", "[", "'type'", "]", "\n", "if", "opt_type", "in", "registry", ".", "OPT", ":", "\n", "        ", "opt", "=", "registry", ".", "OPT", "[", "opt_type", "]", "(", "params", "=", "params", ",", "**", "config", "[", "'params'", "]", ")", "\n", "opt", ".", "simplecv_config", "=", "config", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'{} is not support now.'", ".", "format", "(", "opt_type", ")", ")", "\n", "", "return", "opt", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.api.infer_tool.build_from_file": [[10, 14], ["simplecv.util.config.import_config", "simplecv.module.model_builder.make_model"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.config.import_config", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module.model_builder.make_model"], ["def", "build_from_file", "(", "config_path", ")", ":", "\n", "    ", "cfg", "=", "config", ".", "import_config", "(", "config_path", ")", "\n", "model", "=", "make_model", "(", "cfg", "[", "'model'", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.api.infer_tool.build_and_load_from_file": [[16, 25], ["infer_tool.build_from_file", "simplecv.util.checkpoint.load_model_state_dict_from_ckpt", "build_from_file.load_state_dict", "build_from_file.eval", "logger.info", "torch.load"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.api.infer_tool.build_from_file", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.load_model_state_dict_from_ckpt", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.load"], ["", "def", "build_and_load_from_file", "(", "config_path", ",", "checkpoint_path", ")", ":", "\n", "    ", "model", "=", "build_from_file", "(", "config_path", ")", "\n", "model_state_dict", "=", "checkpoint", ".", "load_model_state_dict_from_ckpt", "(", "checkpoint_path", ")", "\n", "global_step", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "[", "\n", "checkpoint", ".", "CheckPoint", ".", "GLOBALSTEP", "]", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "'[Load params] from {}'", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "return", "model", ",", "global_step", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.__init__": [[6, 9], ["dict.__init__", "config.AttrDict.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["return", "m", ".", "config", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.from_dict": [[10, 15], ["config.AttrDict", "config.AttrDict.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.__setitem__": [[16, 19], ["super().__setitem__", "dict.__setattr__"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.__setitem__"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update": [[20, 28], ["config.items", "isinstance", "config.AttrDict", "config.AttrDict.update"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update_from_list": [[29, 42], ["zip", "key.split", "key.split.pop", "len", "ast.literal_eval", "warnings.warn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.default_backward.amp_backward": [[14, 17], ["amp.scale_loss", "scaled_loss.backward"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.backward"], ["def", "amp_backward", "(", "self", ",", "total_loss", ",", "optimizer", ")", ":", "\n", "    ", "with", "amp", ".", "scale_loss", "(", "total_loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.__init__": [[21, 39], ["simplecv.util.checkpoint.CheckPoint", "simplecv.util.dist.get_rank", "trainer.Launcher.init_model_dir", "simplecv.util.logger.Logger", "trainer.Launcher._logger.on", "torch.cuda.is_available", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.get_rank", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init_model_dir", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.on"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model_dir", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "lr_schedule", ")", ":", "\n", "        ", "self", ".", "_model_dir", "=", "model_dir", "\n", "self", ".", "_model", "=", "model", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "_lr_schedule", "=", "lr_schedule", "\n", "self", ".", "_master", "=", "get_rank", "(", ")", "==", "0", "\n", "if", "self", ".", "_master", ":", "\n", "            ", "self", ".", "init_model_dir", "(", ")", "\n", "self", ".", "_logger", "=", "Logger", "(", "'SimpleCV'", ",", "use_tensorboard", "=", "self", ".", "_master", ",", "tensorboard_logdir", "=", "model_dir", ")", "\n", "self", ".", "_logger", ".", "on", "(", ")", "\n", "", "self", ".", "_device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "self", ".", "_ckpt", "=", "CheckPoint", "(", "self", ")", "\n", "self", ".", "_training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.model": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.optimizer": [[44, 47], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.model_dir": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "model_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_model_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.checkpoint": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.lr": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.logger": [[60, 70], ["_FakeLogger"], "methods", ["None"], ["", "@", "property", "\n", "def", "logger", "(", "self", ")", ":", "\n", "        ", "class", "_FakeLogger", "(", "object", ")", ":", "\n", "            ", "def", "info", "(", "self", ",", "value", ")", ":", "\n", "                ", "pass", "\n", "\n", "", "", "if", "self", ".", "_master", ":", "\n", "            ", "return", "self", ".", "_logger", "\n", "", "else", ":", "\n", "            ", "return", "_FakeLogger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.compute_loss_gradient": [[71, 121], ["isinstance", "simplecv.util.tensor_util.to_device", "trainer.Launcher._model", "trainer.average_dict", "sum", "trainer.Launcher.backward", "len", "trainer.scale_dict", "torch.no_grad", "simplecv.util.dist.reduce_loss_dict", "simplecv.util.dist.reduce_loss_dict.items", "sum", "torch.no_grad", "trainer.Launcher.items", "k.endswith", "value.item", "list", "trainer.Launcher.items", "len", "trainer.average_dict", "average_dict.items", "len", "simplecv.util.dist.reduce_loss_dict.values", "loss_dict.values", "k.endswith", "len", "trainer.scale_dict", "isinstance", "value.item", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.tensor_util.to_device", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.average_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.backward", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.scale_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.dist.reduce_loss_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.average_dict", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.scale_dict"], ["", "", "def", "compute_loss_gradient", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            data:\n\n        Returns:\n\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "            ", "data", "=", "[", "data", "]", "\n", "\n", "", "loss_dict", "=", "{", "'total_loss'", ":", "0.0", "}", "\n", "\n", "for", "d", "in", "data", ":", "\n", "            ", "d", "=", "tensor_util", ".", "to_device", "(", "d", ",", "self", ".", "_device", ")", "\n", "msg_dict", "=", "self", ".", "_model", "(", "*", "d", ")", "\n", "\n", "losses", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "msg_dict", ".", "items", "(", ")", "if", "k", ".", "endswith", "(", "'loss'", ")", "}", "\n", "\n", "# scale losses by 1. / forward times", "\n", "if", "len", "(", "data", ")", "!=", "1", ":", "\n", "                ", "losses", "=", "scale_dict", "(", "losses", ",", "1.", "/", "len", "(", "data", ")", ")", "\n", "\n", "", "losses", "=", "average_dict", "(", "losses", ")", "\n", "total_loss", "=", "sum", "(", "[", "e", "for", "e", "in", "losses", ".", "values", "(", ")", "]", ")", "\n", "\n", "self", ".", "backward", "(", "total_loss", ",", "self", ".", "optimizer", ")", "\n", "\n", "# log losses", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "losses", "=", "reduce_loss_dict", "(", "losses", ")", "\n", "for", "name", ",", "value", "in", "losses", ".", "items", "(", ")", ":", "\n", "                    ", "if", "name", "not", "in", "loss_dict", ":", "\n", "                        ", "loss_dict", "[", "name", "]", "=", "0.0", "\n", "", "loss_dict", "[", "name", "]", "+=", "value", ".", "item", "(", ")", "\n", "", "loss_dict", "[", "'total_loss'", "]", "+=", "sum", "(", "list", "(", "loss_dict", ".", "values", "(", ")", ")", ")", "\n", "# extra log message", "\n", "", "log_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "msg_dict", ".", "items", "(", ")", "if", "not", "k", ".", "endswith", "(", "'loss'", ")", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "len", "(", "log_dict", ")", "!=", "0", ":", "\n", "                    ", "if", "len", "(", "data", ")", "!=", "1", ":", "\n", "                        ", "log_dict", "=", "scale_dict", "(", "log_dict", ",", "1.", "/", "len", "(", "data", ")", ")", "\n", "", "avg_log_dict", "=", "average_dict", "(", "log_dict", ")", "\n", "for", "name", ",", "value", "in", "avg_log_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "name", "not", "in", "loss_dict", ":", "\n", "                            ", "loss_dict", "[", "name", "]", "=", "0.0", "\n", "", "loss_dict", "[", "name", "]", "+=", "value", ".", "item", "(", ")", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "else", "value", "\n", "\n", "", "", "", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.apply_gradient": [[122, 128], ["trainer.Launcher._optimizer.step", "trainer.Launcher._optimizer.zero_grad", "trainer.Launcher._update_lr", "trainer.Launcher._ckpt.step"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.step", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher._update_lr", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.step"], ["", "def", "apply_gradient", "(", "self", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "step", "(", ")", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "_update_lr", "(", ")", "\n", "self", ".", "_ckpt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher._update_lr": [[129, 136], ["isinstance", "trainer.Launcher._lr_schedule.step", "isinstance", "trainer.Launcher._lr_schedule.step", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.step", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.opt.learning_rate.CosineAnnealingLearningRate.step"], ["", "def", "_update_lr", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "_lr_schedule", ",", "LearningRateBase", ")", ":", "\n", "            ", "self", ".", "_lr_schedule", ".", "step", "(", "self", ".", "_ckpt", ".", "global_step", ",", "self", ".", "_optimizer", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "_lr_schedule", ",", "_LRScheduler", ")", ":", "\n", "            ", "self", ".", "_lr_schedule", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_iters": [[137, 198], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "dict", "simplecv.data.iterator.get_iterator", "call_backs.append", "time.time", "iterator.next", "[].cpu().numpy", "[].cpu().numpy", "print", "torch.from_numpy", "trainer.Launcher._model.train", "trainer.Launcher.compute_loss_gradient", "trainer.Launcher.copy", "trainer.Launcher._optimizer.simplecv_config.get", "torch.nn.utils.clip_grad.clip_grad_norm_", "trainer.Launcher.apply_gradient", "iterator.set_seed_for_dist_sampler", "len", "time.time", "dict", "filter", "trainer.Launcher._logger.train_log", "functools.partial", "[].cpu", "[].cpu", "trainer.Launcher.model.parameters", "trainer.Launcher._logger.summary_grads", "time.time", "trainer.Launcher._logger.summary_weights", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.get_iterator", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.PrefetchedIterator.next", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.compute_loss_gradient", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.apply_gradient", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.set_seed_for_dist_sampler", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.train_log", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_grads", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_weights"], ["", "", "def", "train_iters", "(", "self", ",", "train_data_loader", ",", "test_data_loader", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "num_iters", "=", "kwargs", ".", "get", "(", "'num_iters'", ",", "-", "1", ")", "\n", "forward_times", "=", "kwargs", ".", "get", "(", "'forward_times'", ",", "1", ")", "\n", "eval_per_epoch", "=", "kwargs", ".", "get", "(", "'eval_per_epoch'", ",", "False", ")", "\n", "tensorboard_interval_step", "=", "kwargs", ".", "get", "(", "'tensorboard_interval_step'", ",", "100", ")", "\n", "log_interval_step", "=", "kwargs", ".", "get", "(", "'log_interval_step'", ",", "1", ")", "\n", "distributed", "=", "kwargs", ".", "get", "(", "'distributed'", ",", "False", ")", "\n", "summary_grads", "=", "kwargs", ".", "get", "(", "'summary_grads'", ",", "False", ")", "\n", "summary_weights", "=", "kwargs", ".", "get", "(", "'summary_weights'", ",", "False", ")", "\n", "iterator_type", "=", "kwargs", ".", "get", "(", "'iterator_type'", ",", "'normal'", ")", "\n", "save_ckpt_interval_epoch", "=", "kwargs", ".", "get", "(", "'save_ckpt_interval_epoch'", ",", "1", ")", "\n", "eval_interval_epoch", "=", "kwargs", ".", "get", "(", "'eval_interval_epoch'", ",", "1", ")", "\n", "\n", "iterator", "=", "get_iterator", "(", "iterator_type", ")", "(", "train_data_loader", ")", "\n", "\n", "call_backs", "=", "[", "(", "self", ".", "_ckpt", ".", "save", ",", "save_ckpt_interval_epoch", ")", "]", "\n", "signal_loss_dict", "=", "dict", "(", ")", "\n", "if", "eval_per_epoch", ":", "\n", "            ", "call_backs", ".", "append", "(", "(", "functools", ".", "partial", "(", "self", ".", "evaluate", ",", "test_data_loader", ",", "kwargs", ")", ",", "eval_interval_epoch", ")", ")", "\n", "", "while", "self", ".", "_ckpt", ".", "global_step", "<", "num_iters", ":", "\n", "            ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "distributed", ":", "\n", "                ", "iterator", ".", "set_seed_for_dist_sampler", "(", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "", "data_list", "=", "iterator", ".", "next", "(", "forward_times", ",", "\n", "call_backs", "=", "call_backs", ",", "\n", "is_master", "=", "self", ".", "_master", ")", "\n", "y_mask", "=", "data_list", "[", "0", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "w_mask", "=", "data_list", "[", "0", "]", "[", "2", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mask_w", "=", "(", "1", "-", "w_mask", ")", ".", "astype", "(", "np", ".", "bool_", ")", "\n", "y_mask", "[", "mask_w", "]", "=", "0", "\n", "print", "(", "\"inter\"", ",", "len", "(", "np", ".", "where", "(", "y_mask", ">", "0", ")", "[", "1", "]", ")", ")", "\n", "y_mask", "=", "torch", ".", "from_numpy", "(", "y_mask", ")", "\n", "data_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "self", ".", "_model", ".", "train", "(", ")", "\n", "loss_dict", "=", "self", ".", "compute_loss_gradient", "(", "data_list", ")", "\n", "signal_loss_dict", "=", "loss_dict", ".", "copy", "(", ")", "\n", "\n", "# clip gradient", "\n", "grad_clip_config", "=", "self", ".", "_optimizer", ".", "simplecv_config", ".", "get", "(", "'grad_clip'", ",", "dict", "(", "max_norm", "=", "35", ",", "norm_type", "=", "2", ")", ")", "\n", "clip_grad", ".", "clip_grad_norm_", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "**", "grad_clip_config", ")", "\n", "\n", "if", "self", ".", "_master", ":", "\n", "                ", "if", "summary_grads", ":", "\n", "                    ", "self", ".", "_logger", ".", "summary_grads", "(", "module", "=", "self", ".", "model", ".", "module", ",", "step", "=", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "", "", "self", ".", "apply_gradient", "(", ")", "\n", "\n", "if", "self", ".", "_master", ":", "\n", "                ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "self", ".", "_logger", ".", "train_log", "(", "step", "=", "self", ".", "_ckpt", ".", "global_step", ",", "loss_dict", "=", "loss_dict", ",", "\n", "data_time", "=", "data_time", ",", "\n", "time_cost", "=", "time_cost", ",", "lr", "=", "self", ".", "lr", ",", "num_iters", "=", "num_iters", ",", "\n", "tensorboard_interval_step", "=", "tensorboard_interval_step", ",", "\n", "log_interval_step", "=", "log_interval_step", ")", "\n", "if", "summary_weights", ":", "\n", "                    ", "self", ".", "_logger", ".", "summary_weights", "(", "module", "=", "self", ".", "model", ".", "module", ",", "step", "=", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "\n", "", "", "", "return", "signal_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_epochs": [[199, 242], ["kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "dict", "range", "simplecv.data.iterator.get_iterator", "trainer.Launcher._model.train", "kwargs.get", "iterator.iter", "iterator.set_seed_for_dist_sampler", "time.time", "trainer.Launcher.compute_loss_gradient", "trainer.Launcher.copy", "trainer.Launcher._optimizer.simplecv_config.get", "torch.nn.utils.clip_grad.clip_grad_norm_", "trainer.Launcher.apply_gradient", "trainer.Launcher._ckpt.save", "dict", "filter", "kwargs.get", "trainer.Launcher._logger.train_log", "kwargs.get", "trainer.Launcher.model.parameters", "trainer.Launcher._logger.summary_grads", "time.time", "trainer.Launcher._logger.summary_weights"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.get_iterator", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.iter", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.data.iterator.Iterator.set_seed_for_dist_sampler", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.compute_loss_gradient", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.apply_gradient", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.train_log", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_grads", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.summary_weights"], ["", "def", "train_epochs", "(", "self", ",", "train_data_loader", ",", "test_data_loader", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "num_epochs", "=", "kwargs", ".", "get", "(", "'num_epochs'", ",", "-", "1", ")", "\n", "forward_times", "=", "kwargs", ".", "get", "(", "'forward_times'", ",", "1", ")", "\n", "tensorboard_interval_step", "=", "kwargs", ".", "get", "(", "'tensorboard_interval_step'", ",", "100", ")", "\n", "log_interval_step", "=", "kwargs", ".", "get", "(", "'log_interval_step'", ",", "1", ")", "\n", "\n", "iterator_type", "=", "kwargs", ".", "get", "(", "'iterator_type'", ",", "'normal'", ")", "\n", "\n", "iterator", "=", "get_iterator", "(", "iterator_type", ")", "(", "train_data_loader", ")", "\n", "signal_loss_dict", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_epochs", ")", ":", "\n", "\n", "            ", "self", ".", "_model", ".", "train", "(", ")", "\n", "\n", "if", "kwargs", ".", "get", "(", "'distributed'", ",", "False", ")", ":", "\n", "                ", "iterator", ".", "set_seed_for_dist_sampler", "(", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "", "for", "data_list", "in", "iterator", ".", "iter", "(", "forward_times", "=", "forward_times", ")", ":", "\n", "                ", "start", "=", "time", ".", "time", "(", ")", "\n", "loss_dict", "=", "self", ".", "compute_loss_gradient", "(", "data_list", ")", "\n", "signal_loss_dict", "=", "loss_dict", ".", "copy", "(", ")", "\n", "# clip gradient", "\n", "grad_clip_config", "=", "self", ".", "_optimizer", ".", "simplecv_config", ".", "get", "(", "'grad_clip'", ",", "dict", "(", "max_norm", "=", "35", ",", "norm_type", "=", "2", ")", ")", "\n", "clip_grad", ".", "clip_grad_norm_", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "**", "grad_clip_config", ")", "\n", "if", "self", ".", "_master", ":", "\n", "                    ", "if", "kwargs", ".", "get", "(", "'summary_grads'", ",", "False", ")", ":", "\n", "                        ", "self", ".", "_logger", ".", "summary_grads", "(", "module", "=", "self", ".", "model", ".", "module", ",", "step", "=", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "", "", "self", ".", "apply_gradient", "(", ")", "\n", "if", "self", ".", "_master", ":", "\n", "                    ", "time_cost", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "\n", "self", ".", "_logger", ".", "train_log", "(", "step", "=", "self", ".", "_ckpt", ".", "global_step", ",", "loss_dict", "=", "loss_dict", ",", "\n", "time_cost", "=", "time_cost", ",", "lr", "=", "self", ".", "lr", ",", "num_iters", "=", "None", ",", "\n", "tensorboard_interval_step", "=", "tensorboard_interval_step", ",", "\n", "log_interval_step", "=", "log_interval_step", ")", "\n", "if", "kwargs", ".", "get", "(", "'summary_weights'", ",", "False", ")", ":", "\n", "                        ", "self", ".", "_logger", ".", "summary_weights", "(", "module", "=", "self", ".", "model", ".", "module", ",", "step", "=", "self", ".", "_ckpt", ".", "global_step", ")", "\n", "\n", "", "", "", "if", "self", ".", "_master", ":", "\n", "                ", "self", ".", "_ckpt", ".", "save", "(", ")", "\n", "", "", "return", "signal_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_by_config": [[243, 278], ["config.get", "trainer.Launcher.model.train", "trainer.Launcher.init", "simplecv.util.param_util.trainable_parameters", "simplecv.util.param_util.count_model_parameters", "trainer.Launcher._logger.equation", "trainer.Launcher._logger.forward_times", "trainer.Launcher.train_epochs", "trainer.Launcher._ckpt.save", "config.get", "trainer.Launcher._logger.equation", "trainer.Launcher._logger.equation", "trainer.Launcher.train_iters", "ValueError", "trainer.Launcher.evaluate", "trainer.Launcher._logger.approx_equation", "trainer.Launcher._logger.equation", "len", "round", "len"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.module._hrnet.HighResolutionNet.train", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.trainable_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.param_util.count_model_parameters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.equation", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.forward_times", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_epochs", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.save", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.equation", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.equation", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.train_iters", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.evaluate", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.approx_equation", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.logger.Logger.equation"], ["", "def", "train_by_config", "(", "self", ",", "train_data_loader", ",", "config", ",", "test_data_loader", "=", "None", ",", ")", ":", "\n", "        ", "self", ".", "_training", "=", "True", "\n", "if", "config", ".", "get", "(", "'resume_from_last'", ",", "True", ")", ":", "\n", "            ", "self", ".", "init", "(", ")", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "forward_times", "=", "config", "[", "'forward_times'", "]", "if", "'forward_times'", "in", "config", "else", "1", "\n", "\n", "if", "self", ".", "_master", ":", "\n", "            ", "param_util", ".", "trainable_parameters", "(", "self", ".", "model", ",", "self", ".", "_logger", ")", "\n", "param_util", ".", "count_model_parameters", "(", "self", ".", "model", ",", "self", ".", "_logger", ")", "\n", "self", ".", "_logger", ".", "equation", "(", "'batch_size_per_gpu'", ",", "train_data_loader", ".", "batch_sampler", ".", "batch_size", ")", "\n", "self", ".", "_logger", ".", "forward_times", "(", "forward_times", ")", "\n", "", "if", "'num_epochs'", "in", "config", "and", "'num_iters'", "not", "in", "config", ":", "\n", "            ", "if", "self", ".", "_master", ":", "\n", "                ", "self", ".", "_logger", ".", "equation", "(", "'num_epochs'", ",", "config", "[", "'num_epochs'", "]", ")", "\n", "self", ".", "_logger", ".", "equation", "(", "'num_iters'", ",", "config", "[", "'num_epochs'", "]", "*", "len", "(", "train_data_loader", ")", ")", "\n", "", "signal_loss_dict", "=", "self", ".", "train_epochs", "(", "train_data_loader", ",", "test_data_loader", "=", "test_data_loader", ",", "**", "config", ")", "\n", "\n", "", "elif", "'num_epochs'", "not", "in", "config", "and", "'num_iters'", "in", "config", ":", "\n", "            ", "if", "self", ".", "_master", ":", "\n", "                ", "self", ".", "_logger", ".", "approx_equation", "(", "'num_epochs'", ",", "\n", "round", "(", "config", "[", "'num_iters'", "]", "*", "forward_times", "/", "len", "(", "train_data_loader", ")", ",", "1", ")", ")", "\n", "self", ".", "_logger", ".", "equation", "(", "'num_iters'", ",", "config", "[", "'num_iters'", "]", ")", "\n", "", "signal_loss_dict", "=", "self", ".", "train_iters", "(", "train_data_loader", ",", "test_data_loader", "=", "test_data_loader", ",", "**", "config", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'`num_epochs` is mutually exclusive `num_iters`. Please only use one of them'", ")", "\n", "\n", "", "if", "self", ".", "_master", ":", "\n", "            ", "self", ".", "_ckpt", ".", "save", "(", ")", "\n", "if", "config", ".", "get", "(", "'eval_after_train'", ",", "True", ")", ":", "\n", "                ", "self", ".", "evaluate", "(", "test_data_loader", ",", "config", ")", "\n", "", "", "return", "signal_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init": [[279, 283], ["trainer.Launcher._ckpt.try_resume", "trainer.Launcher.init_model_dir"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.util.checkpoint.CheckPoint.try_resume", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init_model_dir"], ["", "def", "init", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_master", ":", "\n", "            ", "self", ".", "init_model_dir", "(", ")", "\n", "", "self", ".", "_ckpt", ".", "try_resume", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init_model_dir": [[284, 286], ["os.makedirs"], "methods", ["None"], ["", "def", "init_model_dir", "(", "self", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "self", ".", "_model_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.evaluate": [[287, 291], ["trainer.Launcher._evaluate_fn", "trainer.Launcher.init"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher._evaluate_fn", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init"], ["", "def", "evaluate", "(", "self", ",", "data_loader", ",", "config", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "_training", ":", "\n", "            ", "self", ".", "init", "(", ")", "\n", "", "self", ".", "_evaluate_fn", "(", "data_loader", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.evaluate_last_ckpt": [[292, 295], ["trainer.Launcher.init", "trainer.Launcher._evaluate_fn"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.init", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher._evaluate_fn"], ["", "def", "evaluate_last_ckpt", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "init", "(", ")", "\n", "self", ".", "_evaluate_fn", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher._evaluate_fn": [[296, 298], ["None"], "methods", ["None"], ["", "def", "_evaluate_fn", "(", "self", ",", "data_loader", ",", "config", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.backward": [[299, 301], ["total_loss.backward"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.backward"], ["", "def", "backward", "(", "self", ",", "total_loss", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "total_loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.override_evaluate": [[302, 304], ["types.MethodType"], "methods", ["None"], ["", "def", "override_evaluate", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "_evaluate_fn", "=", "types", ".", "MethodType", "(", "fn", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.override_backward": [[305, 307], ["types.MethodType"], "methods", ["None"], ["", "def", "override_backward", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "backward", "=", "types", ".", "MethodType", "(", "fn", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.Launcher.invoke_plugin": [[308, 313], ["hasattr", "ModuleNotFoundError", "getattr"], "methods", ["None"], ["", "def", "invoke_plugin", "(", "self", ",", "plugin_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "plugin_name", ")", ":", "\n", "            ", "getattr", "(", "self", ",", "plugin_name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ModuleNotFoundError", "(", "'plugin: {} is not found.'", ".", "format", "(", "plugin_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.LauncherPlugin.__init__": [[316, 318], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "plugin_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.LauncherPlugin.register": [[319, 324], ["isinstance", "hasattr", "launcher.__setattr__", "ValueError", "types.MethodType"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "launcher", ":", "Launcher", ")", ":", "\n", "        ", "assert", "isinstance", "(", "launcher", ",", "Launcher", ")", "\n", "if", "hasattr", "(", "launcher", ",", "self", ".", "plugin_name", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'plugin_name: {} has existed.'", ".", "format", "(", "self", ".", "plugin_name", ")", ")", "\n", "", "launcher", ".", "__setattr__", "(", "self", ".", "plugin_name", ",", "types", ".", "MethodType", "(", "self", ".", "function", ",", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.LauncherPlugin.function": [[325, 327], ["None"], "methods", ["None"], ["", "def", "function", "(", "self", ",", "launcher", ":", "Launcher", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.scale_dict": [[329, 333], ["input_dict.items"], "function", ["None"], ["", "", "def", "scale_dict", "(", "input_dict", ",", "scale", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "input_dict", ".", "items", "(", ")", ":", "\n", "        ", "input_dict", "[", "k", "]", "=", "v", "*", "scale", "\n", "", "return", "input_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.trainer.average_dict": [[335, 339], ["input_dict.items", "v.mean", "v.ndimension"], "function", ["None"], ["", "def", "average_dict", "(", "input_dict", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "input_dict", ".", "items", "(", ")", ":", "\n", "        ", "input_dict", "[", "k", "]", "=", "v", ".", "mean", "(", ")", "if", "v", ".", "ndimension", "(", ")", "!=", "0", "else", "v", "\n", "", "return", "input_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.Callback.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "before_callbacks", "=", "None", ",", "after_callbacks", "=", "None", ")", ":", "\n", "        ", "self", ".", "before_callbacks", "=", "before_callbacks", "\n", "self", ".", "after_callbacks", "=", "after_callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.Callback.__call__": [[9, 24], ["functools.wraps", "_misc.Callback.__call__.wrapped_func"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "func", ")", ":", "\n", "        ", "@", "wraps", "(", "func", ")", "\n", "def", "wrapped_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "if", "self", ".", "before_callbacks", "is", "not", "None", ":", "\n", "                ", "for", "callback", "in", "self", ".", "before_callbacks", ":", "\n", "                    ", "callback", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "out", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "after_callbacks", "is", "not", "None", ":", "\n", "                ", "for", "callback", "in", "self", ".", "after_callbacks", ":", "\n", "                    ", "callback", "(", "out", ")", "\n", "", "", "return", "out", "\n", "\n", "", "return", "wrapped_func", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core._misc.merge_dict": [[26, 36], ["dict1.copy", "dict1.copy.update", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.config.AttrDict.update"], ["", "", "def", "merge_dict", "(", "dict1", ":", "dict", ",", "dict2", ":", "dict", ")", ":", "\n", "# check whether redundant key", "\n", "    ", "redundant_keys", "=", "[", "key", "for", "key", "in", "dict1", "if", "key", "in", "dict2", "]", "\n", "if", "len", "(", "redundant_keys", ")", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Duplicate keys: {}'", ".", "format", "(", "redundant_keys", ")", ")", "\n", "\n", "", "merged", "=", "dict1", ".", "copy", "(", ")", "\n", "merged", ".", "update", "(", "dict2", ")", "\n", "\n", "return", "merged", "\n", "", ""]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.TestTransform.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.TestTransform.transform": [[9, 19], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            inputs: 4-D tensor of shape [batch, channel, height, width]\n\n        Returns:\n            transformed_inputs\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.TestTransform.inv_transform": [[20, 30], ["None"], "methods", ["None"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "\"\"\" inverse transformation\n\n        Args:\n            transformed_inputs:\n\n        Returns:\n            inputs\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.TestTransform.unit_test": [[31, 37], ["torch.ones", "transform.transform", "transform.inv_transform", "numpy.testing.assert_almost_equal", "transform.inv_transform.numpy", "torch.ones.numpy"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.transform", "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.inv_transform"], ["", "@", "staticmethod", "\n", "def", "unit_test", "(", "transform", ")", ":", "\n", "        ", "inputs", "=", "torch", ".", "ones", "(", "2", ",", "32", ",", "128", ",", "128", ")", "\n", "transformed_inputs", "=", "transform", ".", "transform", "(", "inputs", ")", "\n", "our_inputs", "=", "transform", ".", "inv_transform", "(", "transformed_inputs", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "our_inputs", ".", "numpy", "(", ")", ",", "inputs", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__": [[40, 44], ["list.__init__", "all", "isinstance"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "transforms", ")", ":", "\n", "        ", "super", "(", "ParallelTestTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "all", "(", "[", "isinstance", "(", "transop", ",", "TestTransform", ")", "for", "transop", "in", "transforms", "]", ")", "\n", "self", ".", "_trans_list", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.transform": [[45, 55], ["transop.transform"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.transform"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            inputs: 4-D tensor of shape [batch, channel, height, width]\n\n        Returns:\n            transformed_inputs\n        \"\"\"", "\n", "return", "[", "transop", ".", "transform", "(", "inputs", ")", "for", "transop", "in", "self", ".", "_trans_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.inv_transform": [[56, 66], ["transop.inv_transform", "zip"], "methods", ["home.repos.pwc.inspect_result.dengweihuan_SSDGL.core.transform_base.ParallelTestTransform.inv_transform"], ["", "def", "inv_transform", "(", "self", ",", "transformed_inputs", ")", ":", "\n", "        ", "\"\"\" inverse transformation\n\n        Args:\n            transformed_inputs:\n\n        Returns:\n            inputs\n        \"\"\"", "\n", "return", "[", "transop", ".", "inv_transform", "(", "ti", ")", "for", "ti", ",", "transop", "in", "zip", "(", "transformed_inputs", ",", "self", ".", "_trans_list", ")", "]", "\n", "\n"]]}