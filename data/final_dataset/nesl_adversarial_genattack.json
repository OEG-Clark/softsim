{"home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.MNIST.__init__": [[38, 60], ["setup_mnist.extract_data", "setup_mnist.extract_labels", "setup_mnist.extract_data", "setup_mnist.extract_labels", "os.path.exists", "os.mkdir", "urllib.request.urlretrieve"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_data", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_labels", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_data", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_labels"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"data\"", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "\"data\"", ")", "\n", "files", "=", "[", "\"train-images-idx3-ubyte.gz\"", ",", "\n", "\"t10k-images-idx3-ubyte.gz\"", ",", "\n", "\"train-labels-idx1-ubyte.gz\"", ",", "\n", "\"t10k-labels-idx1-ubyte.gz\"", "]", "\n", "for", "name", "in", "files", ":", "\n", "\n", "                ", "urllib", ".", "request", ".", "urlretrieve", "(", "'http://yann.lecun.com/exdb/mnist/'", "+", "name", ",", "\"data/\"", "+", "name", ")", "\n", "\n", "", "", "train_data", "=", "extract_data", "(", "\"data/train-images-idx3-ubyte.gz\"", ",", "60000", ")", "\n", "train_labels", "=", "extract_labels", "(", "\"data/train-labels-idx1-ubyte.gz\"", ",", "60000", ")", "\n", "self", ".", "test_data", "=", "extract_data", "(", "\"data/t10k-images-idx3-ubyte.gz\"", ",", "10000", ")", "\n", "self", ".", "test_labels", "=", "extract_labels", "(", "\"data/t10k-labels-idx1-ubyte.gz\"", ",", "10000", ")", "\n", "\n", "VALIDATION_SIZE", "=", "5000", "\n", "\n", "self", ".", "validation_data", "=", "train_data", "[", ":", "VALIDATION_SIZE", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "validation_labels", "=", "train_labels", "[", ":", "VALIDATION_SIZE", "]", "\n", "self", ".", "train_data", "=", "train_data", "[", "VALIDATION_SIZE", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "train_labels", "=", "train_labels", "[", "VALIDATION_SIZE", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.MNISTModel.__init__": [[63, 96], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dense", "keras.models.Sequential.add", "keras.models.Sequential.load_weights", "keras.layers.Activation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "restore", "=", "None", ",", "session", "=", "None", ",", "use_log", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "1", "\n", "self", ".", "image_size", "=", "28", "\n", "self", ".", "num_labels", "=", "10", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ",", "\n", "input_shape", "=", "(", "28", ",", "28", ",", "1", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "32", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "200", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "200", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ")", ")", "\n", "# output log probability, used for black-box attack", "\n", "if", "use_log", ":", "\n", "            ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "", "if", "restore", ":", "\n", "            ", "model", ".", "load_weights", "(", "restore", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.MNISTModel.predict": [[97, 99], ["setup_mnist.MNISTModel.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_data": [[21, 29], ["gzip.open", "bytestream.read", "bytestream.read", "numpy.frombuffer().astype", "data.reshape.reshape", "numpy.frombuffer"], "function", ["None"], ["def", "extract_data", "(", "filename", ",", "num_images", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "filename", ")", "as", "bytestream", ":", "\n", "        ", "bytestream", ".", "read", "(", "16", ")", "\n", "buf", "=", "bytestream", ".", "read", "(", "num_images", "*", "28", "*", "28", ")", "\n", "data", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "data", "=", "(", "data", "/", "255", ")", "-", "0.5", "\n", "data", "=", "data", ".", "reshape", "(", "num_images", ",", "28", ",", "28", ",", "1", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_mnist.extract_labels": [[30, 36], ["gzip.open", "bytestream.read", "bytestream.read", "numpy.frombuffer", "numpy.arange"], "function", ["None"], ["", "", "def", "extract_labels", "(", "filename", ",", "num_images", ")", ":", "\n", "    ", "with", "gzip", ".", "open", "(", "filename", ")", "as", "bytestream", ":", "\n", "        ", "bytestream", ".", "read", "(", "8", ")", "\n", "buf", "=", "bytestream", ".", "read", "(", "1", "*", "num_images", ")", "\n", "labels", "=", "np", ".", "frombuffer", "(", "buf", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "return", "(", "np", ".", "arange", "(", "10", ")", "==", "labels", "[", ":", ",", "None", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.mutation_op": [[12, 19], ["tensorflow.random_uniform", "cur_pop.get_shape", "tensorflow.cast", "tensorflow.random_uniform", "cur_pop.get_shape"], "methods", ["None"], ["    ", "def", "mutation_op", "(", "self", ",", "cur_pop", ",", "idx", ",", "step_noise", "=", "0.01", ",", "p", "=", "0.005", ")", ":", "\n", "        ", "perturb_noise", "=", "tf", ".", "random_uniform", "(", "cur_pop", ".", "get_shape", "(", ")", ",", "\n", "minval", "=", "-", "step_noise", ",", "maxval", "=", "step_noise", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "mutated_pop", "=", "perturb_noise", "*", "tf", ".", "cast", "(", "tf", ".", "random_uniform", "(", "cur_pop", ".", "get_shape", "(", ")", ")", "\n", "<", "p", ",", "tf", ".", "float32", ")", "+", "cur_pop", "\n", "return", "mutated_pop", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.attack_step": [[20, 98], ["tensorflow.clip_by_value", "genattack_tf2.GenAttack2.model.predict", "tensorflow.argmax", "tensorflow.cast", "tensorflow.reduce_max", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.gather", "tensorflow.nn.softmax", "tensorflow.distributions.Categorical().sample", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.tile", "tensorflow.cast", "tensorflow.Print", "tensorflow.concat", "genattack_tf2.GenAttack2.mutation_op", "tensorflow.concat", "tensorflow.image.resize_bilinear", "tensorflow.equal", "tensorflow.greater", "tensorflow.greater", "tensorflow.greater", "tensorflow.maximum", "tensorflow.cond", "tensorflow.equal", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.log", "tensorflow.log", "tensorflow.reduce_max", "tensorflow.less", "tensorflow.squeeze", "tensorflow.distributions.Categorical", "tensorflow.expand_dims", "tensorflow.random_uniform", "tensorflow.reduce_min", "tensorflow.pow", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.cast", "tensorflow.maximum", "tensorflow.cast", "tensorflow.cast", "tensorflow.gather.get_shape", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.pow", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.mutation_op"], ["", "def", "attack_step", "(", "self", ",", "idx", ",", "success", ",", "orig_copies", ",", "cur_noise", ",", "prev_elite", ",", "margin_log", ",", "best_win_margin", ",", "cur_plateau_count", ",", "num_plateaus", ")", ":", "\n", "        ", "if", "self", ".", "resize_dim", ":", "\n", "            ", "noise_resized", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "\n", "cur_noise", ",", "(", "self", ".", "image_dim", ",", "self", ".", "image_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "noise_resized", "=", "cur_noise", "\n", "", "noise_dim", "=", "self", ".", "resize_dim", "or", "self", ".", "image_dim", "\n", "cur_pop", "=", "tf", ".", "clip_by_value", "(", "\n", "noise_resized", "+", "orig_copies", ",", "self", ".", "box_min", ",", "self", ".", "box_max", ")", "\n", "pop_preds", "=", "self", ".", "model", ".", "predict", "(", "cur_pop", ")", "\n", "all_preds", "=", "tf", ".", "argmax", "(", "pop_preds", ",", "axis", "=", "1", ")", "\n", "\n", "success_pop", "=", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "all_preds", ",", "self", ".", "target", ")", ",", "tf", ".", "int32", ")", "\n", "success", "=", "tf", ".", "reduce_max", "(", "success_pop", ",", "axis", "=", "0", ")", "\n", "\n", "target_scores", "=", "tf", ".", "reduce_sum", "(", "self", ".", "tlab", "*", "pop_preds", ",", "axis", "=", "1", ")", "\n", "sum_others", "=", "tf", ".", "reduce_sum", "(", "(", "1", "-", "self", ".", "tlab", ")", "*", "pop_preds", ",", "axis", "=", "1", ")", "\n", "max_others", "=", "tf", ".", "reduce_max", "(", "(", "1", "-", "self", ".", "tlab", ")", "*", "pop_preds", ",", "axis", "=", "1", ")", "\n", "\n", "# the goal is to maximize this loss", "\n", "loss", "=", "-", "(", "tf", ".", "log", "(", "sum_others", "+", "1e-30", ")", "-", "tf", ".", "log", "(", "target_scores", "+", "1e-30", ")", ")", "\n", "\n", "win_margin", "=", "tf", ".", "reduce_max", "(", "\n", "pop_preds", "[", ":", ",", "self", ".", "target", "]", "-", "tf", ".", "reduce_max", "(", "pop_preds", ",", "axis", "=", "1", ")", ")", "\n", "\n", "new_best_win_margin", ",", "new_cur_plateau_count", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "greater", "(", "win_margin", ",", "best_win_margin", ")", ",", "\n", "false_fn", "=", "lambda", ":", "(", "best_win_margin", ",", "cur_plateau_count", "+", "1", ")", ",", "\n", "true_fn", "=", "lambda", ":", "(", "win_margin", ",", "0", ")", "\n", ")", "\n", "plateau_threshold", "=", "tf", ".", "cond", "(", "tf", ".", "greater", "(", "win_margin", ",", "-", "0.40", ")", ",", "\n", "true_fn", "=", "lambda", ":", "100", ",", "\n", "false_fn", "=", "lambda", ":", "300", ")", "\n", "new_num_plateaus", ",", "new_cur_plateau_count", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "greater", "(", "new_cur_plateau_count", ",", "plateau_threshold", ")", ",", "\n", "true_fn", "=", "lambda", ":", "(", "num_plateaus", "+", "1", ",", "0", ")", ",", "\n", "false_fn", "=", "lambda", ":", "(", "num_plateaus", ",", "new_cur_plateau_count", ")", "\n", ")", "\n", "\n", "if", "self", ".", "adaptive", ":", "\n", "            ", "step_noise", "=", "tf", ".", "maximum", "(", "self", ".", "alpha", ",", "\n", "0.4", "*", "tf", ".", "pow", "(", "0.9", ",", "tf", ".", "cast", "(", "new_num_plateaus", ",", "tf", ".", "float32", ")", ")", ")", "\n", "step_p", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "idx", ",", "10", ")", ",", "\n", "true_fn", "=", "lambda", ":", "1.0", ",", "\n", "false_fn", "=", "lambda", ":", "tf", ".", "maximum", "(", "self", ".", "mutation_rate", ",", "0.5", "*", "tf", ".", "pow", "(", "0.90", ",", "tf", ".", "cast", "(", "new_num_plateaus", ",", "tf", ".", "float32", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "step_noise", "=", "self", ".", "alpha", "\n", "step_p", "=", "self", ".", "mutation_rate", "\n", "\n", "", "step_temp", "=", "self", ".", "temp", "\n", "\n", "elite_idx", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "success", ",", "1", ")", ",", "\n", "true_fn", "=", "lambda", ":", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "success_pop", ")", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", ",", "\n", "false_fn", "=", "lambda", ":", "tf", ".", "expand_dims", "(", "tf", ".", "cast", "(", "tf", ".", "argmax", "(", "loss", ",", "axis", "=", "0", ")", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "elite", "=", "tf", ".", "gather", "(", "cur_noise", ",", "elite_idx", ")", "\n", "select_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "squeeze", "(", "loss", ")", "/", "step_temp", ")", "\n", "parents", "=", "tf", ".", "distributions", ".", "Categorical", "(", "\n", "probs", "=", "select_probs", ")", ".", "sample", "(", "2", "*", "self", ".", "pop_size", "-", "2", ")", "\n", "parent1", "=", "tf", ".", "gather", "(", "cur_noise", ",", "parents", "[", ":", "self", ".", "pop_size", "-", "1", "]", ")", "\n", "parent2", "=", "tf", ".", "gather", "(", "cur_noise", ",", "parents", "[", "self", ".", "pop_size", "-", "1", ":", "]", ")", "\n", "pp1", "=", "tf", ".", "gather", "(", "select_probs", ",", "parents", "[", ":", "self", ".", "pop_size", "-", "1", "]", ")", "\n", "pp2", "=", "tf", ".", "gather", "(", "select_probs", ",", "parents", "[", "self", ".", "pop_size", "-", "1", ":", "]", ")", "\n", "pp2", "=", "pp2", "/", "(", "pp1", "+", "pp2", ")", "\n", "pp2", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "expand_dims", "(", "pp2", ",", "1", ")", ",", "2", ")", ",", "self", ".", "image_channels", ")", ",", "(", "1", ",", "noise_dim", ",", "noise_dim", ",", "self", ".", "image_channels", ")", ")", "\n", "xover_prop", "=", "tf", ".", "cast", "(", "tf", ".", "random_uniform", "(", "\n", "shape", "=", "parent1", ".", "get_shape", "(", ")", ")", ">", "pp2", ",", "tf", ".", "float32", ")", "\n", "childs", "=", "parent1", "*", "xover_prop", "+", "parent2", "*", "(", "1", "-", "xover_prop", ")", "\n", "idx", "=", "tf", ".", "Print", "(", "idx", "+", "1", ",", "[", "idx", ",", "tf", ".", "reduce_min", "(", "loss", ")", ",", "\n", "win_margin", ",", "step_p", ",", "step_noise", ",", "new_cur_plateau_count", "]", ")", "\n", "margin_log", "=", "tf", ".", "concat", "(", "[", "margin_log", ",", "[", "[", "win_margin", "]", "]", "]", ",", "axis", "=", "0", ")", "\n", "mutated_childs", "=", "self", ".", "mutation_op", "(", "\n", "childs", ",", "idx", "=", "idx", ",", "step_noise", "=", "self", ".", "eps", "*", "step_noise", ",", "p", "=", "step_p", ")", "\n", "new_pop", "=", "tf", ".", "concat", "(", "(", "mutated_childs", ",", "elite", ")", ",", "axis", "=", "0", ")", "\n", "return", "idx", ",", "success", ",", "orig_copies", ",", "new_pop", ",", "tf", ".", "reshape", "(", "elite", ",", "(", "noise_dim", ",", "noise_dim", ",", "self", ".", "image_channels", ")", ")", ",", "margin_log", ",", "new_best_win_margin", ",", "new_cur_plateau_count", ",", "new_num_plateaus", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.__init__": [[99, 156], ["tensorflow.summary.FileWriter", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.tile", "tensorflow.tile", "tensorflow.Variable", "genattack_tf2.GenAttack2.margin_log.set_shape", "tensorflow.contrib.layers.one_hot_encoding", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.while_loop", "tensorflow.summary.merge_all", "numpy.zeros", "numpy.zeros", "numpy.zeros", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.logical_and", "genattack_tf2.GenAttack2.attack_step", "numpy.zeros", "tensorflow.less_equal", "tensorflow.equal"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.attack_step"], ["", "def", "__init__", "(", "self", ",", "model", ",", "pop_size", "=", "6", ",", "mutation_rate", "=", "0.001", ",", "\n", "eps", "=", "0.15", ",", "max_steps", "=", "10000", ",", "alpha", "=", "0.20", ",", "\n", "image_dim", "=", "299", ",", "\n", "image_channels", "=", "3", ",", "\n", "num_labels", "=", "1001", ",", "\n", "temp", "=", "0.3", ",", "\n", "resize_dim", "=", "None", ",", "adaptive", "=", "False", ")", ":", "\n", "        ", "self", ".", "eps", "=", "eps", "\n", "self", ".", "pop_size", "=", "pop_size", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "mutation_rate", "=", "mutation_rate", "\n", "self", ".", "image_dim", "=", "image_dim", "\n", "self", ".", "resize_dim", "=", "resize_dim", "\n", "noise_dim", "=", "self", ".", "resize_dim", "or", "self", ".", "image_dim", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "logdir", "=", "'.'", ")", "\n", "self", ".", "input_img", "=", "tf", ".", "Variable", "(", "\n", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "image_dim", ",", "self", ".", "image_dim", ",", "self", ".", "image_channels", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "'x'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "# copies of original image", "\n", "self", ".", "pop_orig", "=", "tf", ".", "Variable", "(", "np", ".", "zeros", "(", "\n", "(", "self", ".", "pop_size", ",", "self", ".", "image_dim", ",", "self", ".", "image_dim", ",", "image_channels", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "'pop_orig'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "pop_noise", "=", "tf", ".", "Variable", "(", "np", ".", "zeros", "(", "\n", "(", "self", ".", "pop_size", ",", "noise_dim", ",", "noise_dim", ",", "self", ".", "image_channels", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "name", "=", "'pop_noise'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "target", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int64", ",", "name", "=", "'target'", ")", "\n", "self", ".", "init_success", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'success'", ")", "\n", "self", ".", "box_min", "=", "tf", ".", "tile", "(", "tf", ".", "maximum", "(", "\n", "self", ".", "input_img", "-", "eps", ",", "-", "0.5", ")", ",", "(", "self", ".", "pop_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "box_max", "=", "tf", ".", "tile", "(", "tf", ".", "minimum", "(", "\n", "self", ".", "input_img", "+", "eps", ",", "0.5", ")", ",", "(", "self", ".", "pop_size", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "margin_log", "=", "tf", ".", "Variable", "(", "initial_value", "=", "np", ".", "zeros", "(", "\n", "(", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "validate_shape", "=", "False", ",", "name", "=", "'margin_log'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "margin_log", ".", "set_shape", "(", "(", "None", ",", "1", ")", ")", "\n", "self", ".", "tlab", "=", "tf", ".", "contrib", ".", "layers", ".", "one_hot_encoding", "(", "\n", "[", "self", ".", "target", "]", ",", "num_classes", "=", "self", ".", "num_labels", ")", "\n", "self", ".", "i", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int64", ",", "name", "=", "'step'", ")", "\n", "\n", "# Variables to detect plateau", "\n", "self", ".", "best_win_margin", "=", "tf", ".", "Variable", "(", "-", "1", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'cur_margin'", ")", "\n", "self", ".", "cur_plateau_count", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'plateau'", ")", "\n", "self", ".", "num_plateaus", "=", "tf", ".", "Variable", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'num_plateaus'", ")", "\n", "\n", "def", "cond", "(", "i", ",", "success", ",", "pop_orig", ",", "pop_noise", ",", "cur_elite", ",", "margin_log", ",", "best_win_margin", ",", "cur_plateau_count", ",", "\n", "num_plateaus", ")", ":", "return", "tf", ".", "logical_and", "(", "tf", ".", "less_equal", "(", "i", ",", "self", ".", "max_steps", ")", ",", "tf", ".", "equal", "(", "success", ",", "0", ")", ")", "\n", "\n", "def", "attack_body", "(", "i", ",", "success", ",", "pop_orig", ",", "pop_noise", ",", "cur_elite", ",", "margin_log", ",", "best_win_margin", ",", "cur_plateau_count", ",", "num_plateaus", ")", ":", "return", "self", ".", "attack_step", "(", "\n", "i", ",", "success", ",", "pop_orig", ",", "pop_noise", ",", "cur_elite", ",", "margin_log", ",", "best_win_margin", ",", "cur_plateau_count", ",", "num_plateaus", ")", "\n", "\n", "self", ".", "attack_main", "=", "tf", ".", "while_loop", "(", "cond", ",", "attack_body", ",", "[", "self", ".", "i", ",", "self", ".", "init_success", ",", "self", ".", "pop_orig", ",", "\n", "self", ".", "pop_noise", ",", "self", ".", "pop_noise", "[", "0", "]", ",", "self", ".", "margin_log", ",", "self", ".", "best_win_margin", ",", "self", ".", "cur_plateau_count", ",", "self", ".", "num_plateaus", "]", ")", "\n", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.initialize": [[157, 181], ["sess.run", "sess.run", "sess.run", "tensorflow.tile", "sess.run", "genattack_tf2.GenAttack2.mutation_op", "sess.run", "sess.run", "sess.run", "sess.run", "sess.run", "print", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "numpy.expand_dims", "numpy.zeros", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.mutation_op"], ["", "def", "initialize", "(", "self", ",", "sess", ",", "img", ",", "target", ")", ":", "\n", "        ", "sess", ".", "run", "(", "[", "x", ".", "initializer", "for", "x", "in", "\n", "[", "self", ".", "i", ",", "\n", "self", ".", "input_img", ",", "\n", "self", ".", "target", ",", "\n", "self", ".", "margin_log", ",", "\n", "self", ".", "pop_noise", ",", "\n", "self", ".", "best_win_margin", ",", "\n", "self", ".", "cur_plateau_count", ",", "\n", "self", ".", "num_plateaus", ",", "\n", "self", ".", "init_success", "]", "]", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "input_img", ",", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "0", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "target", ",", "target", ")", ")", "\n", "orig_copies", "=", "tf", ".", "tile", "(", "self", ".", "input_img", ",", "[", "self", ".", "pop_size", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "pop_orig", ",", "orig_copies", ")", ")", "\n", "init_noise", "=", "self", ".", "mutation_op", "(", "\n", "self", ".", "pop_noise", ",", "idx", "=", "self", ".", "i", ",", "p", "=", "self", ".", "mutation_rate", ",", "step_noise", "=", "self", ".", "eps", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "margin_log", ",", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "pop_noise", ",", "init_noise", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "best_win_margin", ",", "\n", "np", ".", "array", "(", "-", "1.0", ",", "dtype", "=", "np", ".", "float32", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "cur_plateau_count", ",", "np", ".", "array", "(", "0", ",", "dtype", "=", "np", ".", "int32", ")", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "assign", "(", "self", ".", "num_plateaus", ",", "0", ")", ")", "\n", "print", "(", "'Population initailized'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.attack": [[182, 206], ["genattack_tf2.GenAttack2.initialize", "sess.run", "sess.run", "sess.run", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "numpy.expand_dims", "tensorflow.image.resize_bilinear", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.genattack_tf2.GenAttack2.initialize"], ["", "def", "attack", "(", "self", ",", "sess", ",", "input_img", ",", "target_label", ")", ":", "\n", "        ", "self", ".", "initialize", "(", "sess", ",", "input_img", ",", "target_label", ")", "\n", "(", "num_steps", ",", "success", ",", "copies", ",", "final_pop", ",", "adv_noise", ",", "\n", "log_hist", ",", "_", ",", "_", ",", "_", ")", "=", "sess", ".", "run", "(", "self", ".", "attack_main", ")", "\n", "if", "success", ":", "\n", "            ", "if", "self", ".", "resize_dim", ":", "\n", "                ", "adv_img", "=", "sess", ".", "run", "(", "\n", "tf", ".", "clip_by_value", "(", "\n", "np", ".", "expand_dims", "(", "input_img", ",", "axis", "=", "0", ")", "+", "tf", ".", "image", ".", "resize_bilinear", "(", "\n", "np", ".", "expand_dims", "(", "adv_noise", ",", "axis", "=", "0", ")", ",", "(", "self", ".", "image_dim", ",", "self", ".", "image_dim", ")", ")", ",", "\n", "self", ".", "box_min", "[", "0", ":", "1", "]", ",", "self", ".", "box_max", "[", "0", ":", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "adv_img", "=", "sess", ".", "run", "(", "\n", "tf", ".", "clip_by_value", "(", "np", ".", "expand_dims", "(", "input_img", ",", "axis", "=", "0", ")", "+", "np", ".", "expand_dims", "(", "adv_noise", ",", "axis", "=", "0", ")", ",", "\n", "self", ".", "box_min", "[", "0", ":", "1", "]", ",", "self", ".", "box_max", "[", "0", ":", "1", "]", ")", ")", "\n", "\n", "# Number of queries = NUM_STEPS * (POP_SIZE -1 ) + 1", "\n", "# We subtract 1 from pop_size, because we use elite mechanism, so one population", "\n", "# member is copied from previous generation and no need to re-evaluate it.", "\n", "# The first population is an exception, therefore we add 1 to have total sum.", "\n", "", "query_count", "=", "num_steps", "*", "(", "self", ".", "pop_size", "-", "1", ")", "+", "1", "\n", "return", "adv_img", "[", "0", "]", ",", "query_count", ",", "log_hist", "[", "1", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.__init__": [[83, 89], ["setup_inception.NodeLookup.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.load"], ["def", "__init__", "(", "self", ",", "\n", "label_lookup_path", "=", "None", ")", ":", "\n", "    ", "if", "not", "label_lookup_path", ":", "\n", "      ", "label_lookup_path", "=", "os", ".", "path", ".", "join", "(", "\n", "FLAGS", ".", "model_dir", ",", "'labels.txt'", ")", "\n", "", "self", ".", "node_lookup", "=", "self", ".", "load", "(", "label_lookup_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.load": [[90, 114], ["tensorflow.gfile.GFile().readlines", "tensorflow.gfile.Exists", "tensorflow.logging.fatal", "tensorflow.gfile.GFile", "line.split", "int"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "label_lookup_path", ")", ":", "\n", "    ", "\"\"\"Loads a human readable English name for each softmax node.\n\n    Args:\n      label_lookup_path: string UID to integer node ID.\n      uid_lookup_path: string UID to human-readable string.\n\n    Returns:\n      dict from integer node ID to human-readable string.\n    \"\"\"", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "label_lookup_path", ")", ":", "\n", "      ", "tf", ".", "logging", ".", "fatal", "(", "'File does not exist %s'", ",", "label_lookup_path", ")", "\n", "\n", "# Loads mapping from string UID to integer node ID.", "\n", "", "node_id_to_name", "=", "{", "}", "\n", "proto_as_ascii", "=", "tf", ".", "gfile", ".", "GFile", "(", "label_lookup_path", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "proto_as_ascii", ":", "\n", "      ", "if", "line", ":", "\n", "        ", "words", "=", "line", ".", "split", "(", "':'", ")", "\n", "target_class", "=", "int", "(", "words", "[", "0", "]", ")", "\n", "name", "=", "words", "[", "1", "]", "\n", "node_id_to_name", "[", "target_class", "]", "=", "name", "\n", "\n", "", "", "return", "node_id_to_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.id_to_string": [[115, 119], ["None"], "methods", ["None"], ["", "def", "id_to_string", "(", "self", ",", "node_id", ")", ":", "\n", "    ", "if", "node_id", "not", "in", "self", ".", "node_lookup", ":", "\n", "      ", "return", "''", "\n", "", "return", "self", ".", "node_lookup", "[", "node_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.InceptionModelPrediction.__init__": [[184, 196], ["tensorflow.placeholder", "tensorflow.import_graph_def", "sess.graph.as_graph_def"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sess", ",", "use_log", "=", "True", ")", ":", "\n", "    ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "use_log", "=", "use_log", "\n", "if", "self", ".", "use_log", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Softmax:0'", "\n", "", "else", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Reshape:0'", "\n", "", "self", ".", "img", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "(", "None", ",", "299", ",", "299", ",", "3", ")", ")", "\n", "self", ".", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "self", ".", "img", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "def", "predict", "(", "self", ",", "dat", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.InceptionModelPrediction.predict": [[196, 214], ["numpy.squeeze", "numpy.squeeze.reshape", "setup_inception.InceptionModelPrediction.sess.run", "numpy.squeeze", "setup_inception.NodeLookup", "numpy.squeeze.argsort", "print", "setup_inception.NodeLookup.id_to_string", "print"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.id_to_string"], ["", "def", "predict", "(", "self", ",", "dat", ")", ":", "\n", "    ", "dat", "=", "np", ".", "squeeze", "(", "dat", ")", "\n", "# scaled = (0.5 + dat) * 255", "\n", "scaled", "=", "dat", ".", "reshape", "(", "(", "1", ",", ")", "+", "dat", ".", "shape", ")", "\n", "# print(scaled.shape)", "\n", "predictions", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "softmax_tensor", ",", "\n", "{", "self", ".", "img", ":", "scaled", "}", ")", "\n", "predictions", "=", "np", ".", "squeeze", "(", "predictions", ")", "\n", "return", "predictions", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", ")", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "", "return", "top_k", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.InceptionModel.__init__": [[221, 229], ["setup_inception.InceptionModelPrediction", "setup_inception.create_graph"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.create_graph"], ["def", "__init__", "(", "self", ",", "sess", ",", "use_log", "=", "True", ")", ":", "\n", "    ", "global", "CREATED_GRAPH", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "use_log", "=", "use_log", "\n", "if", "not", "CREATED_GRAPH", ":", "\n", "      ", "create_graph", "(", ")", "\n", "CREATED_GRAPH", "=", "True", "\n", "", "self", ".", "model", "=", "InceptionModelPrediction", "(", "sess", ",", "use_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.InceptionModel.predict": [[230, 251], ["img.shape.as_list", "tensorflow.import_graph_def", "tensorflow.import_graph_def", "int", "setup_inception.InceptionModel.sess.graph.as_graph_def", "setup_inception.InceptionModel.sess.graph.as_graph_def"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "img", ")", ":", "\n", "    ", "if", "self", ".", "use_log", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Softmax:0'", "\n", "", "else", ":", "\n", "      ", "output_name", "=", "'InceptionV3/Predictions/Reshape:0'", "\n", "# scaled = (0.5+tf.reshape(img,((299,299,3))))*255", "\n", "# scaled = (0.5+img)*255", "\n", "", "if", "img", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ":", "\n", "# check if a shape has been specified explicitly", "\n", "      ", "shape", "=", "(", "int", "(", "img", ".", "shape", "[", "0", "]", ")", ",", "1001", ")", "\n", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "self", ".", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "img", ",", "'InceptionV3/Predictions/Shape:0'", ":", "shape", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "else", ":", "\n", "# placeholder shape", "\n", "      ", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "self", ".", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'input:0'", ":", "img", "}", ",", "\n", "return_elements", "=", "[", "output_name", "]", ")", "\n", "", "return", "softmax_tensor", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.ImageNet.__init__": [[308, 323], ["sorted", "random.shuffle", "zip", "numpy.array", "numpy.zeros", "os.listdir", "setup_inception.readimg", "read_img_fn", "len", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.readimg"], ["  ", "def", "__init__", "(", "self", ",", "path", "=", "'images'", ")", ":", "\n", "#from multiprocessing import Pool", "\n", "#pool = Pool(8)", "\n", "    ", "file_list", "=", "sorted", "(", "os", ".", "listdir", "(", "path", ")", ")", "\n", "random", ".", "shuffle", "(", "file_list", ")", "\n", "read_img_fn", "=", "lambda", "x", ":", "readimg", "(", "x", ",", "path", ")", "\n", "\n", "r", "=", "[", "read_img_fn", "(", "x", ")", "for", "x", "in", "file_list", "[", ":", "200", "]", "]", "\n", "# print(file_list[:200])", "\n", "r", "=", "[", "x", "for", "x", "in", "r", "if", "x", "!=", "None", "]", "\n", "test_data", ",", "test_labels", ",", "test_paths", "=", "zip", "(", "*", "r", ")", "\n", "self", ".", "test_data", "=", "np", ".", "array", "(", "test_data", ")", "\n", "self", ".", "test_labels", "=", "np", ".", "zeros", "(", "(", "len", "(", "test_labels", ")", ",", "1001", ")", ")", "\n", "self", ".", "test_labels", "[", "np", ".", "arange", "(", "len", "(", "test_labels", ")", ")", ",", "test_labels", "]", "=", "1", "\n", "self", ".", "test_paths", "=", "test_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.create_graph": [[121, 133], ["tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "os.path.join", "f.read"], "function", ["None"], ["", "", "def", "create_graph", "(", ")", ":", "\n", "  ", "\"\"\"Creates a graph from saved GraphDef file and returns a saver.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "#  FLAGS.model_dir, 'classify_image_graph_def.pb'), 'rb') as f:", "\n", "FLAGS", ".", "model_dir", ",", "'frozen_inception_v3.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "#for line in repr(graph_def).split(\"\\n\"):", "\n", "#  if \"tensor_content\" not in line:", "\n", "#    print(line)", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.run_inference_on_image": [[135, 182], ["tensorflow.gfile.FastGFile().read", "setup_inception.create_graph", "tensorflow.gfile.Exists", "tensorflow.logging.fatal", "tensorflow.Session", "tensorflow.placeholder", "tensorflow.import_graph_def", "scipy.misc.imresize", "sess.run", "numpy.squeeze", "setup_inception.NodeLookup", "np.squeeze.argsort", "tensorflow.gfile.FastGFile", "sess.graph.as_graph_def", "scipy.misc.imread", "print", "setup_inception.NodeLookup.id_to_string", "print", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.create_graph", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.id_to_string"], ["", "", "def", "run_inference_on_image", "(", "image", ")", ":", "\n", "  ", "\"\"\"Runs inference on an image. (Not updated, not working for inception v3 20160828)\n\n  Args:\n    image: Image file name.\n\n  Returns:\n    Nothing\n  \"\"\"", "\n", "if", "not", "tf", ".", "gfile", ".", "Exists", "(", "image", ")", ":", "\n", "    ", "tf", ".", "logging", ".", "fatal", "(", "'File does not exist %s'", ",", "image", ")", "\n", "", "image_data", "=", "tf", ".", "gfile", ".", "FastGFile", "(", "image", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "\n", "# Creates graph from saved GraphDef.", "\n", "create_graph", "(", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "# Some useful tensors:", "\n", "# 'softmax:0': A tensor containing the normalized prediction across", "\n", "#   1000 labels.", "\n", "# 'pool_3:0': A tensor containing the next-to-last layer containing 2048", "\n", "#   float description of the image.", "\n", "# 'DecodeJpeg/contents:0': A tensor containing a string providing JPEG", "\n", "#   encoding of the image.", "\n", "# Runs the softmax tensor by feeding the image_data as input to the graph.", "\n", "#softmax_tensor = sess.graph.get_tensor_by_name('softmax:0')", "\n", "    ", "img", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "(", "299", ",", "299", ",", "3", ")", ")", "\n", "softmax_tensor", "=", "tf", ".", "import_graph_def", "(", "\n", "sess", ".", "graph", ".", "as_graph_def", "(", ")", ",", "\n", "input_map", "=", "{", "'DecodeJpeg:0'", ":", "tf", ".", "reshape", "(", "img", ",", "(", "(", "299", ",", "299", ",", "3", ")", ")", ")", "}", ",", "\n", "return_elements", "=", "[", "'softmax/logits:0'", "]", ")", "\n", "\n", "dat", "=", "scipy", ".", "misc", ".", "imresize", "(", "scipy", ".", "misc", ".", "imread", "(", "image", ")", ",", "(", "299", ",", "299", ")", ")", "\n", "predictions", "=", "sess", ".", "run", "(", "softmax_tensor", ",", "\n", "{", "img", ":", "dat", "}", ")", "\n", "\n", "predictions", "=", "np", ".", "squeeze", "(", "predictions", ")", "\n", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", ")", "\n", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.maybe_download_and_extract": [[253, 270], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "sys.stdout.write", "sys.stdout.flush", "tarfile.open", "float", "float"], "function", ["None"], ["", "", "def", "maybe_download_and_extract", "(", ")", ":", "\n", "  ", "\"\"\"Download and extract model tar file.\"\"\"", "\n", "dest_directory", "=", "FLAGS", ".", "model_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_directory", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dest_directory", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "dest_directory", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "dest_directory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.main": [[272, 293], ["setup_inception.maybe_download_and_extract", "setup_inception.create_graph", "os.path.join", "tensorflow.Session", "numpy.array", "setup_inception.InceptionModelPrediction", "setup_inception.InceptionModelPrediction.predict", "setup_inception.NodeLookup", "model.predict.argsort", "scipy.misc.imresize", "print", "setup_inception.NodeLookup.id_to_string", "print", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.maybe_download_and_extract", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.create_graph", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.CIFARModel.predict", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.NodeLookup.id_to_string"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "maybe_download_and_extract", "(", ")", "\n", "image", "=", "(", "FLAGS", ".", "image_file", "if", "FLAGS", ".", "image_file", "else", "\n", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "model_dir", ",", "'cropped_panda.jpg'", ")", ")", "\n", "# run_inference_on_image(image)", "\n", "create_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "dat", "=", "np", ".", "array", "(", "scipy", ".", "misc", ".", "imresize", "(", "scipy", ".", "misc", ".", "imread", "(", "image", ")", ",", "(", "299", ",", "299", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dat", "/=", "255.0", "\n", "dat", "-=", "0.5", "\n", "# print(dat)", "\n", "model", "=", "InceptionModelPrediction", "(", "sess", ",", "True", ")", "\n", "predictions", "=", "model", ".", "predict", "(", "dat", ")", "\n", "# Creates node ID --> English string lookup.", "\n", "node_lookup", "=", "NodeLookup", "(", ")", "\n", "top_k", "=", "predictions", ".", "argsort", "(", ")", "#[-FLAGS.num_top_predictions:][::-1]", "\n", "for", "node_id", "in", "top_k", ":", "\n", "      ", "print", "(", "'id'", ",", "node_id", ")", "\n", "human_string", "=", "node_lookup", ".", "id_to_string", "(", "node_id", ")", "\n", "score", "=", "predictions", "[", "node_id", "]", "\n", "print", "(", "'%s (score = %.5f)'", "%", "(", "human_string", ",", "score", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_inception.readimg": [[295, 306], ["os.path.join", "scipy.misc.imread", "int", "numpy.array", "scipy.misc.imresize", "ff.split"], "function", ["None"], ["", "", "", "def", "readimg", "(", "ff", ",", "path", ")", ":", "\n", "#f = \"../imagenetdata/imgs/\"+ff", "\n", "  ", "f", "=", "os", ".", "path", ".", "join", "(", "path", ",", "ff", ")", "\n", "img", "=", "scipy", ".", "misc", ".", "imread", "(", "f", ")", "\n", "# skip small images (image should be at least 299x299)", "\n", "if", "img", ".", "shape", "[", "0", "]", "<", "299", "or", "img", ".", "shape", "[", "1", "]", "<", "299", ":", "\n", "    ", "return", "None", "\n", "", "img", "=", "np", ".", "array", "(", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "(", "299", ",", "299", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255", "-", ".5", "\n", "if", "img", ".", "shape", "!=", "(", "299", ",", "299", ",", "3", ")", ":", "\n", "    ", "return", "None", "\n", "", "return", "[", "img", ",", "int", "(", "ff", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ",", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.CIFAR.__init__": [[62, 88], ["range", "numpy.array", "numpy.array", "setup_cifar.load_batch", "os.path.exists", "urllib.request.urlretrieve", "os.popen().read", "setup_cifar.load_batch", "numpy.array.extend", "numpy.array.extend", "os.popen", "str"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.load_batch", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.load_batch"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "train_data", "=", "[", "]", "\n", "train_labels", "=", "[", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"cifar-10-batches-bin\"", ")", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "\"https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz\"", ",", "\n", "\"cifar-data.tar.gz\"", ")", "\n", "os", ".", "popen", "(", "\"tar -xzf cifar-data.tar.gz\"", ")", ".", "read", "(", ")", "\n", "\n", "\n", "", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "            ", "r", ",", "s", "=", "load_batch", "(", "\"cifar-10-batches-bin/data_batch_\"", "+", "str", "(", "i", "+", "1", ")", "+", "\".bin\"", ")", "\n", "train_data", ".", "extend", "(", "r", ")", "\n", "train_labels", ".", "extend", "(", "s", ")", "\n", "\n", "", "train_data", "=", "np", ".", "array", "(", "train_data", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "train_labels", "=", "np", ".", "array", "(", "train_labels", ")", "\n", "\n", "self", ".", "test_data", ",", "self", ".", "test_labels", "=", "load_batch", "(", "\"cifar-10-batches-bin/test_batch.bin\"", ")", "\n", "\n", "VALIDATION_SIZE", "=", "5000", "\n", "\n", "self", ".", "validation_data", "=", "train_data", "[", ":", "VALIDATION_SIZE", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "validation_labels", "=", "train_labels", "[", ":", "VALIDATION_SIZE", "]", "\n", "self", ".", "train_data", "=", "train_data", "[", "VALIDATION_SIZE", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "train_labels", "=", "train_labels", "[", "VALIDATION_SIZE", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.CIFARModel.__init__": [[90, 122], ["keras.models.Sequential", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dense", "keras.models.Sequential.add", "keras.models.Sequential.load_weights", "keras.layers.Activation"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "restore", "=", "None", ",", "session", "=", "None", ",", "use_log", "=", "False", ")", ":", "\n", "        ", "self", ".", "num_channels", "=", "3", "\n", "self", ".", "image_size", "=", "32", "\n", "self", ".", "num_labels", "=", "10", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ",", "\n", "input_shape", "=", "(", "32", ",", "32", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "64", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "128", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "256", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ")", ")", "\n", "if", "use_log", ":", "\n", "            ", "model", ".", "add", "(", "Activation", "(", "'softmax'", ")", ")", "\n", "", "if", "restore", ":", "\n", "            ", "model", ".", "load_weights", "(", "restore", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.CIFARModel.predict": [[123, 125], ["setup_cifar.CIFARModel.model"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.setup_cifar.load_batch": [[46, 59], ["open().read", "range", "numpy.fromstring", "arr[].reshape().transpose", "labels.append", "images.append", "numpy.array", "numpy.array", "open", "numpy.identity", "arr[].reshape"], "function", ["None"], ["", "def", "load_batch", "(", "fpath", ")", ":", "\n", "    ", "f", "=", "open", "(", "fpath", ",", "\"rb\"", ")", ".", "read", "(", ")", "\n", "size", "=", "32", "*", "32", "*", "3", "+", "1", "\n", "labels", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "arr", "=", "np", ".", "fromstring", "(", "f", "[", "i", "*", "size", ":", "(", "i", "+", "1", ")", "*", "size", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lab", "=", "np", ".", "identity", "(", "10", ")", "[", "arr", "[", "0", "]", "]", "\n", "img", "=", "arr", "[", "1", ":", "]", ".", "reshape", "(", "(", "3", ",", "32", ",", "32", ")", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "labels", ".", "append", "(", "lab", ")", "\n", "images", ".", "append", "(", "(", "img", "/", "255", ")", "-", ".5", ")", "\n", "", "return", "np", ".", "array", "(", "images", ")", ",", "np", ".", "array", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.__init__": [[42, 59], ["open", "utils.ResultLogger.results_fh.write", "os.path.exists", "os.mkdir", "open", "open.write", "open.close", "os.path.join", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.close"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "flags", ")", ":", "\n", "        ", "assert", "path", "is", "not", "None", ",", "'You must give an output results dir.'", "\n", "self", ".", "path", "=", "path", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "if", "flags", "is", "not", "None", ":", "\n", "            ", "config_fh", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'config.txt'", ")", ",", "'w'", ")", "\n", "config_fh", ".", "write", "(", "str", "(", "flags", ")", ")", "\n", "config_fh", ".", "close", "(", ")", "\n", "", "self", ".", "results_fh", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'results.csv'", ")", ",", "'w'", ")", "\n", "self", ".", "results_fh", ".", "write", "(", "\n", "'index, real, target, queries, l_0, l_2, l_inf, time\\n'", ")", "\n", "self", ".", "time_total", "=", "0.0", "\n", "self", ".", "queries_total", "=", "0.0", "\n", "self", ".", "query_list", "=", "[", "]", "\n", "self", ".", "l2_total", "=", "0.0", "\n", "self", ".", "num_success", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.add_result": [[60, 81], ["utils.save_image", "utils.save_image", "numpy.save", "utils.l_2_dist", "utils.ResultLogger.results_fh.write", "utils.ResultLogger.query_list.append", "utils.ResultLogger.results_fh.flush", "os.path.join", "os.path.join", "os.path.join", "utils.l_0_dist", "utils.l_inf_dist"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.save_image", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.save_image", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_2_dist", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_0_dist", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_inf_dist"], ["", "def", "add_result", "(", "self", ",", "idx", ",", "src_img", ",", "adv_img", ",", "real", ",", "target", ",", "queries", ",", "attack_time", ",", "margin_log", ")", ":", "\n", "        ", "save_image", "(", "src_img", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'orig_{}.jpg'", ".", "format", "(", "idx", ")", ")", ")", "\n", "save_image", "(", "adv_img", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'adv_{}.jpg'", ".", "format", "(", "idx", ")", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'log_{}.npy'", ".", "format", "(", "idx", ")", ")", ",", "margin_log", ")", "\n", "attack_l2", "=", "l_2_dist", "(", "src_img", ",", "adv_img", ")", "\n", "self", ".", "results_fh", ".", "write", "(", "'{}, {}, {}, {}, {}, {}, {}, {}\\n'", ".", "format", "(", "\n", "idx", ",", "real", ",", "target", ",", "queries", ",", "\n", "l_0_dist", "(", "src_img", ",", "adv_img", ")", ",", "\n", "attack_l2", ",", "\n", "l_inf_dist", "(", "src_img", ",", "adv_img", ")", ",", "\n", "attack_time", "\n", ")", ")", "\n", "\n", "self", ".", "num_success", "+=", "1", "\n", "self", ".", "time_total", "+=", "attack_time", "\n", "self", ".", "queries_total", "+=", "queries", "\n", "self", ".", "query_list", ".", "append", "(", "queries", ")", "\n", "self", ".", "l2_total", "+=", "attack_l2", "\n", "self", ".", "results_fh", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.close": [[82, 100], ["utils.ResultLogger.results_fh.close", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.close", "os.path.join", "int", "numpy.median"], "methods", ["home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.close", "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.ResultLogger.close"], ["", "def", "close", "(", "self", ",", "num_attempts", ")", ":", "\n", "        ", "self", ".", "results_fh", ".", "close", "(", ")", "\n", "stats_fh", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "'stats.txt'", ")", ",", "'w'", ")", "\n", "stats_fh", ".", "write", "(", "'Success rate = {}/{} ({} %%)\\n'", ".", "format", "(", "int", "(", "self", ".", "num_success", ")", ",", "\n", "num_attempts", ",", "100", "*", "self", ".", "num_success", "/", "num_attempts", ")", ")", "\n", "stats_fh", ".", "write", "(", "'Mean queries count = {}.\\n'", ".", "format", "(", "\n", "self", ".", "queries_total", "/", "self", ".", "num_success", "\n", ")", ")", "\n", "stats_fh", ".", "write", "(", "'median queries count = {}.\\n'", ".", "format", "(", "\n", "np", ".", "median", "(", "self", ".", "query_list", ")", "\n", ")", ")", "\n", "stats_fh", ".", "write", "(", "'Mean l2 distance = {}.\\n'", ".", "format", "(", "\n", "self", ".", "l2_total", "/", "self", ".", "num_success", "\n", ")", ")", "\n", "stats_fh", ".", "write", "(", "'Mean attack time = {} seconds.\\n'", ".", "format", "(", "\n", "self", ".", "time_total", "/", "self", ".", "num_success", "\n", ")", ")", "\n", "stats_fh", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.generate_data": [[7, 23], ["numpy.array", "numpy.array", "np.array.append", "reals.append", "np.array.append", "len", "data.test_data[].astype", "numpy.argmax", "range", "range", "numpy.random.choice"], "function", ["None"], ["def", "generate_data", "(", "data", ",", "size", "=", "1000", ")", ":", "\n", "    ", "inputs", ",", "targets", ",", "reals", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_labels", "=", "data", ".", "test_labels", ".", "shape", "[", "1", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "size", "and", "i", "<", "len", "(", "data", ".", "test_data", ")", ":", "\n", "        ", "inputs", ".", "append", "(", "data", ".", "test_data", "[", "i", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "reals", ".", "append", "(", "np", ".", "argmax", "(", "data", ".", "test_labels", "[", "i", "]", ")", ")", "\n", "other_labels", "=", "[", "x", "for", "x", "in", "range", "(", "\n", "num_labels", ")", "if", "data", ".", "test_labels", "[", "i", "]", "[", "x", "]", "==", "0", "]", "\n", "random_target", "=", "[", "0", "for", "_", "in", "range", "(", "num_labels", ")", "]", "\n", "random_target", "[", "np", ".", "random", ".", "choice", "(", "other_labels", ")", "]", "=", "1", "\n", "targets", ".", "append", "(", "random_target", ")", "\n", "i", "+=", "1", "\n", "", "inputs", "=", "np", ".", "array", "(", "inputs", ")", "\n", "targets", "=", "np", ".", "array", "(", "targets", ")", "\n", "return", "inputs", ",", "targets", ",", "reals", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_inf_dist": [[25, 27], ["numpy.max", "numpy.abs", "orig_img.ravel", "new_img.ravel"], "function", ["None"], ["", "def", "l_inf_dist", "(", "orig_img", ",", "new_img", ")", ":", "\n", "    ", "return", "np", ".", "max", "(", "np", ".", "abs", "(", "orig_img", ".", "ravel", "(", ")", "-", "new_img", ".", "ravel", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_2_dist": [[29, 31], ["numpy.sqrt", "numpy.sum", "orig_img.ravel", "new_img.ravel"], "function", ["None"], ["", "def", "l_2_dist", "(", "orig_img", ",", "new_img", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "orig_img", ".", "ravel", "(", ")", "-", "new_img", ".", "ravel", "(", ")", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.l_0_dist": [[33, 35], ["numpy.sum", "orig_img.ravel", "new_img.ravel"], "function", ["None"], ["", "def", "l_0_dist", "(", "orig_img", ",", "new_img", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "(", "orig_img", ".", "ravel", "(", ")", "-", "new_img", ".", "ravel", "(", ")", ")", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.utils.save_image": [[37, 39], ["scipy.misc.imsave"], "function", ["None"], ["", "def", "save_image", "(", "img", ",", "path", ")", ":", "\n", "    ", "imsave", "(", "path", ",", "(", "img", "+", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nesl_adversarial_genattack.None.train_models.train": [[22, 75], ["keras.models.Sequential", "print", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.SGD", "keras.models.Sequential.compile", "keras.models.Sequential.fit", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.MaxPooling2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Dense", "keras.models.Sequential.load_weights", "tensorflow.nn.softmax_cross_entropy_with_logits", "keras.models.Sequential.save"], "function", ["None"], ["def", "train", "(", "data", ",", "file_name", ",", "params", ",", "num_epochs", "=", "50", ",", "batch_size", "=", "128", ",", "train_temp", "=", "1", ",", "init", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Standard neural network training procedure.\n    \"\"\"", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "print", "(", "data", ".", "train_data", ".", "shape", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "params", "[", "0", "]", ",", "(", "3", ",", "3", ")", ",", "\n", "input_shape", "=", "data", ".", "train_data", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "params", "[", "1", "]", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Conv2D", "(", "params", "[", "2", "]", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Conv2D", "(", "params", "[", "3", "]", ",", "(", "3", ",", "3", ")", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Flatten", "(", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "params", "[", "4", "]", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dropout", "(", "0.5", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "params", "[", "5", "]", ")", ")", "\n", "model", ".", "add", "(", "Activation", "(", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "10", ")", ")", "\n", "\n", "if", "init", "!=", "None", ":", "\n", "        ", "model", ".", "load_weights", "(", "init", ")", "\n", "\n", "", "def", "fn", "(", "correct", ",", "predicted", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "correct", ",", "\n", "logits", "=", "predicted", "/", "train_temp", ")", "\n", "\n", "", "sgd", "=", "SGD", "(", "lr", "=", "0.01", ",", "decay", "=", "1e-6", ",", "momentum", "=", "0.9", ",", "nesterov", "=", "True", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "fn", ",", "\n", "optimizer", "=", "sgd", ",", "\n", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "model", ".", "fit", "(", "data", ".", "train_data", ",", "data", ".", "train_labels", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "validation_data", "=", "(", "data", ".", "validation_data", ",", "data", ".", "validation_labels", ")", ",", "\n", "nb_epoch", "=", "num_epochs", ",", "\n", "shuffle", "=", "True", ")", "\n", "\n", "\n", "if", "file_name", "!=", "None", ":", "\n", "        ", "model", ".", "save", "(", "file_name", ")", "\n", "\n", "", "return", "model", "\n", "\n"]]}