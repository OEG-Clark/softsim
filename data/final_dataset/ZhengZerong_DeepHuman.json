{"home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_infer_natural_img.main": [[13, 33], ["tensorflow.GPUOptions", "tensorflow.Session", "TrainerNormal.Trainer", "TrainerNormal.Trainer.test", "os.system", "zipfile.ZipFile", "zipfile.ZipFile.close", "tensorflow.ConfigProto", "zipfile.ZipFile.write", "os.remove", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.test", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["def", "main", "(", "img_folder", ",", "img_prefix", ",", "zip_intermedia_results", "=", "True", ")", ":", "\n", "    ", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "0.8", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "sess", ")", "\n", "trainer", ".", "test", "(", "img_folder", ",", "[", "img_prefix", "]", ",", "\n", "'./results/results_final_19_09_30_10_29_33'", ")", "\n", "os", ".", "system", "(", "'python2 ./DataUtil/NormalFusion.py --volume_file %s --normal_file %s'", "\n", "%", "(", "os", ".", "path", ".", "join", "(", "img_folder", ",", "img_prefix", "+", "'_volume_out.mat'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "img_folder", ",", "img_prefix", "+", "'_normal_0.png'", ")", ")", ")", "\n", "\n", "suffixes", "=", "[", "'__normal_0.png'", ",", "'__normal_1.png'", ",", "'__normal_2.png'", ",", "'__normal_3.png'", ",", "\n", "'__normal_orig_0.png'", ",", "'__normal_orig_1.png'", ",", "'__normal_orig_2.png'", ",", "\n", "'__normal_orig_3.png'", ",", "'__volume_out.mat'", "]", "\n", "if", "zip_intermedia_results", ":", "\n", "        ", "z", "=", "zipfile", ".", "ZipFile", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_intermediate_infer.zip'", ",", "'w'", ")", "\n", "for", "suffix", "in", "suffixes", ":", "\n", "            ", "z", ".", "write", "(", "img_dir", "[", ":", "-", "4", "]", "+", "suffix", ")", "\n", "os", ".", "remove", "(", "img_dir", "[", ":", "-", "4", "]", "+", "suffix", ")", "\n", "", "z", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.preprocess_image": [[29, 49], ["cv2.imread", "numpy.zeros", "cv2.resize", "cv2.resize", "cv2.imwrite", "print", "max"], "function", ["None"], ["def", "preprocess_image", "(", "img_dir", ")", ":", "\n", "    ", "log_str", "=", "''", "\n", "\n", "img", "=", "cv", ".", "imread", "(", "img_dir", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "log_str", "+=", "'image size: %d, %d\\n'", "%", "(", "h", ",", "w", ")", "\n", "\n", "h_c", ",", "w_c", "=", "h", "//", "2", ",", "w", "//", "2", "\n", "s", "=", "max", "(", "h", ",", "w", ")", "//", "2", "\n", "img_pad", "=", "np", ".", "zeros", "(", "(", "2", "*", "s", ",", "2", "*", "s", ",", "3", ")", ")", "\n", "img_pad", "[", "(", "s", "-", "h_c", ")", ":", "(", "s", "+", "h_c", ")", ",", "(", "s", "-", "w_c", ")", ":", "(", "s", "+", "w_c", ")", ",", ":", "]", "=", "img", "[", ":", "h_c", "*", "2", ",", ":", "w_c", "*", "2", ",", ":", "]", "\n", "img_crop", "=", "img_pad", "\n", "img_crop", "=", "cv", ".", "resize", "(", "img_crop", ",", "(", "dim_h", "*", "2", ",", "dim_h", "*", "2", ")", ")", "\n", "log_str", "+=", "'image padding/croping: s=%d, h_c=%d, w_c=%d\\n'", "%", "(", "s", ",", "h_c", ",", "w_c", ")", "\n", "\n", "img_crop", "=", "cv", ".", "resize", "(", "img_crop", ",", "(", "preprocess_size", ",", "preprocess_size", ")", ")", "\n", "cv", ".", "imwrite", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ",", "img_crop", ")", "\n", "log_str", "+=", "'image saved to '", "+", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", "+", "'\\n'", "\n", "print", "(", "log_str", ")", "\n", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.run_im2smpl": [[51, 94], ["os.path.join", "os.getcwd", "CommonUtil.safe_mkdir", "print", "subprocess.call", "os.remove", "random.sample", "open", "fp.write", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "random.sample", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "run_im2smpl", "(", "img_dir", ")", ":", "\n", "    ", "log_str", "=", "''", "\n", "tmp_folder", "=", "''", ".", "join", "(", "random", ".", "sample", "(", "string", ".", "ascii_letters", "+", "string", ".", "digits", ",", "8", ")", ")", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "img2smpl_dir", ",", "tmp_folder", ")", "\n", "curr_path", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "util", ".", "safe_mkdir", "(", "tmp_path", ")", "\n", "\n", "sh_file_str", "=", "''", "\n", "sh_file_str", "+=", "'#!/usr/local/bin/bash\\n'", "\n", "sh_file_str", "+=", "'cp %s %s\\n'", "%", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ",", "\n", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png'", ")", ")", "\n", "sh_file_str", "+=", "'cd '", "+", "img2smpl_dir", "+", "'\\n'", "\n", "if", "crop_orig_img", ":", "\n", "        ", "sh_file_str", "+=", "'python2 main.py --img_file %s --out_dir %s \\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png'", ")", ",", "tmp_path", ")", "\n", "", "else", ":", "\n", "        ", "sh_file_str", "+=", "'python2 main_wo_cropping.py --img_file %s --out_dir %s \\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png'", ")", ",", "tmp_path", ")", "\n", "\n", "", "sh_file_str", "+=", "'cd '", "+", "curr_path", "+", "'\\n'", "\n", "sh_file_str", "+=", "'mv %s %s\\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png.final.txt'", ")", ",", "\n", "img_dir", "[", ":", "-", "4", "]", "+", "'_final.txt'", ")", "\n", "sh_file_str", "+=", "'mv %s %s\\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png.smpl.obj'", ")", ",", "\n", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl.obj'", ")", "\n", "sh_file_str", "+=", "'mv %s %s\\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png.smpl_proj.png'", ")", ",", "\n", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl_proj.png'", ")", "\n", "sh_file_str", "+=", "'cp %s %s\\n'", "%", "(", "os", ".", "path", ".", "join", "(", "tmp_path", ",", "'test_img.png'", ")", ",", "\n", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ")", "# copies the cropped image back", "\n", "sh_file_str", "+=", "'rm -rf '", "+", "tmp_path", "+", "'\\n'", "\n", "\n", "sh_fname", "=", "''", ".", "join", "(", "random", ".", "sample", "(", "string", ".", "ascii_letters", "+", "string", ".", "digits", ",", "8", ")", ")", "+", "'.sh'", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "sh_fname", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "sh_file_str", ")", "\n", "", "log_str", "+=", "'will run the following commands ------------\\n'", "\n", "log_str", "+=", "sh_file_str", "\n", "log_str", "+=", "'end of commend -----------------------------\\n'", "\n", "print", "(", "log_str", ")", "\n", "\n", "call", "(", "[", "'sh'", ",", "os", ".", "path", ".", "join", "(", "'./'", ",", "sh_fname", ")", "]", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "sh_fname", ")", ")", "\n", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.postprocess_im2smpl_result": [[96, 124], ["cv2.imread", "DataUtil.load_obj_data", "DataUtil.flip_axis_in_place", "DataUtil.save_obj_data_binary", "open", "fp.readlines", "lines[].split", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.flip_axis_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary"], ["", "def", "postprocess_im2smpl_result", "(", "img_dir", ")", ":", "\n", "    ", "log_str", "=", "''", "\n", "\n", "# load and postprocess SMPL model (change camera model)", "\n", "with", "open", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_final.txt'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "line0_data", "=", "lines", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "cam_tx", "=", "float", "(", "line0_data", "[", "0", "]", ")", "\n", "cam_ty", "=", "float", "(", "line0_data", "[", "1", "]", ")", "\n", "cam_tz", "=", "float", "(", "line0_data", "[", "2", "]", ")", "\n", "\n", "", "img", "=", "cv", ".", "imread", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ")", "\n", "cam_f", "=", "5000.0", "\n", "cam_s", "=", "cam_f", "/", "(", "0.5", "*", "img", ".", "shape", "[", "0", "]", "*", "cam_tz", ")", "\n", "\n", "smpl", "=", "objio", ".", "load_obj_data", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl.obj'", ")", "\n", "smpl", "[", "'v'", "]", "[", ":", ",", "0", "]", "=", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "0", "]", "+", "cam_tx", ")", "*", "cam_s", "\n", "smpl", "[", "'v'", "]", "[", ":", ",", "1", "]", "=", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "1", "]", "+", "cam_ty", ")", "*", "cam_s", "\n", "smpl", "[", "'v'", "]", "[", ":", ",", "2", "]", "=", "smpl", "[", "'v'", "]", "[", ":", ",", "2", "]", "*", "cam_s", "\n", "smpl", "[", "'v'", "]", "*=", "0.5", "\n", "\n", "dutil", ".", "flip_axis_in_place", "(", "smpl", ",", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "objio", ".", "save_obj_data_binary", "(", "smpl", ",", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl_2.obj'", ")", "\n", "\n", "log_str", "+=", "'cam_tx = %f, cam_ty = %f, cam_s = %f\\n'", "%", "(", "cam_tx", ",", "cam_ty", ",", "cam_s", ")", "\n", "log_str", "+=", "'save to '", "+", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl_2.obj\\n'", "\n", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.prepare_network_input_color": [[126, 142], ["cv2.imread", "cv2.resize", "cv2.imwrite"], "function", ["None"], ["", "def", "prepare_network_input_color", "(", "img_dir", ")", ":", "\n", "    ", "log_str", "=", "''", "\n", "img_size", "=", "384", "\n", "\n", "# prepare input color for the network", "\n", "img", "=", "cv", ".", "imread", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ")", "\n", "\n", "# gamma = 0.8", "\n", "# gamma_table = [np.power(x / 255.0, gamma) * 255.0 for x in range(256)]", "\n", "# gamma_table = np.round(np.array(gamma_table)).astype(np.uint8)", "\n", "# img = cv.LUT(img, gamma_table)", "\n", "\n", "img", "=", "cv", ".", "resize", "(", "img", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "cv", ".", "imwrite", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png'", ",", "img", ")", "\n", "log_str", "+=", "'save to '", "+", "img_dir", "[", ":", "-", "4", "]", "+", "'_color.png\\n'", "\n", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.prepare_network_input_semantic": [[144, 194], ["DataUtil.load_obj_data_binary", "DataUtil.voxelize_2", "DataUtil.binary_fill_from_corner_3D", "DataUtil.calc_vmap_volume", "numpy.zeros", "scipy.savemat", "DataUtil.compress_along_z_axis_single", "DataUtil.project_vertices", "DataUtil.get_smpl_semantic_code", "DataUtil.render_color_model_without_lighting", "numpy.float32", "cv2.imwrite", "numpy.max", "numpy.flipud", "cv2.resize", "cv2.imwrite", "DataUtil.save_v_volume", "print", "numpy.copy", "numpy.uint8", "numpy.transpose", "zipfile.ZipFile", "zipfile.ZipFile.close", "chumpy.array", "chumpy.array", "numpy.uint8", "zipfile.ZipFile.write", "os.remove"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data_binary", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize_2", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.binary_fill_from_corner_3D", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.calc_vmap_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.compress_along_z_axis_single", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.project_vertices", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.get_smpl_semantic_code", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.render_color_model_without_lighting", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.save_v_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "prepare_network_input_semantic", "(", "img_dir", ",", "zip_intermedia_results", "=", "True", ")", ":", "\n", "    ", "log_str", "=", "''", "\n", "img_size", "=", "384", "\n", "\n", "# create semantic map", "\n", "smpl", "=", "objio", ".", "load_obj_data_binary", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl_2.obj'", ")", "\n", "smpl_volume", "=", "voxel_util", ".", "voxelize_2", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_smpl_2.obj'", ",", "\n", "dim_h", ",", "dim_w", ",", "VOXELIZER_PATH", ")", "\n", "smpl_volume", "=", "voxel_util", ".", "binary_fill_from_corner_3D", "(", "smpl_volume", ")", "\n", "smpl_v_volume", "=", "voxel_util", ".", "calc_vmap_volume", "(", "smpl_volume", ",", "smpl", "[", "'v'", "]", ",", "\n", "dim_h", ",", "dim_w", ",", "voxel_size", ")", "\n", "mesh_volume", "=", "np", ".", "zeros", "(", "(", "dim_w", ",", "dim_h", ",", "dim_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sio", ".", "savemat", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_volume.mat'", ",", "\n", "{", "'mesh_volume'", ":", "mesh_volume", ",", "'smpl_v_volume'", ":", "smpl_v_volume", "}", ",", "\n", "do_compression", "=", "True", ")", "\n", "\n", "# render semantic map", "\n", "smpl_v_", "=", "renderers", ".", "compress_along_z_axis_single", "(", "smpl", "[", "'v'", "]", ")", "\n", "u", "=", "renderers", ".", "project_vertices", "(", "smpl_v_", ",", "img_size", ",", "img_size", ",", "\n", "cam_r", "=", "ch", ".", "array", "(", "(", "3.14", ",", "0", ",", "0", ")", ")", ",", "\n", "cam_t", "=", "ch", ".", "array", "(", "(", "0", ",", "0", ",", "0", ")", ")", ")", "\n", "smpl_vc", "=", "dutil", ".", "get_smpl_semantic_code", "(", ")", "\n", "v_map", "=", "renderers", ".", "render_color_model_without_lighting", "(", "img_size", ",", "img_size", ",", "\n", "smpl_v_", ",", "smpl_vc", ",", "\n", "smpl", "[", "'f'", "]", ",", "u", ",", "\n", "bg_img", "=", "None", ")", "\n", "v_map", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "v_map", ")", ")", "\n", "cv", ".", "imwrite", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_vmap.png'", ",", "np", ".", "uint8", "(", "v_map", "*", "255", ")", ")", "\n", "\n", "# test orthogonal projection from SMPL's volume", "\n", "smpl_volume_proj", "=", "np", ".", "max", "(", "smpl_volume", ",", "axis", "=", "-", "1", ")", "\n", "smpl_volume_proj", "=", "np", ".", "flipud", "(", "np", ".", "transpose", "(", "smpl_volume_proj", ")", ")", "\n", "smpl_volume_proj", "=", "cv", ".", "resize", "(", "np", ".", "uint8", "(", "smpl_volume_proj", ")", "*", "255", ",", "(", "256", ",", "384", ")", ")", "\n", "cv", ".", "imwrite", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_test_proj.png'", ",", "smpl_volume_proj", ")", "\n", "\n", "# save smpl semantic volume for visualization", "\n", "voxel_util", ".", "save_v_volume", "(", "smpl_v_volume", ",", "img_dir", "[", ":", "-", "4", "]", "+", "'_v_volume.obj'", ",", "\n", "dim_h", ",", "dim_w", ",", "voxel_size", ")", "\n", "\n", "suffixes", "=", "[", "'_final.txt'", ",", "'_smpl.obj'", ",", "'_smpl_2.obj'", ",", "'_smpl_proj.png'", ",", "\n", "'_test_proj.png'", ",", "'_v_volume.obj'", "]", "\n", "if", "zip_intermedia_results", ":", "\n", "        ", "z", "=", "zipfile", ".", "ZipFile", "(", "img_dir", "[", ":", "-", "4", "]", "+", "'_intermediate_prepare.zip'", ",", "'w'", ")", "\n", "for", "suffix", "in", "suffixes", ":", "\n", "            ", "z", ".", "write", "(", "img_dir", "[", ":", "-", "4", "]", "+", "suffix", ")", "\n", "os", ".", "remove", "(", "img_dir", "[", ":", "-", "4", "]", "+", "suffix", ")", "\n", "", "z", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "log_str", ")", "\n", "return", "log_str", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.main": [[196, 202], ["main_prepare_natural_img.preprocess_image", "main_prepare_natural_img.run_im2smpl", "main_prepare_natural_img.postprocess_im2smpl_result", "main_prepare_natural_img.prepare_network_input_color", "main_prepare_natural_img.prepare_network_input_semantic"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.preprocess_image", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.run_im2smpl", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.postprocess_im2smpl_result", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.prepare_network_input_color", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_prepare_natural_img.prepare_network_input_semantic"], ["", "def", "main", "(", "img_dir", ")", ":", "\n", "    ", "preprocess_image", "(", "img_dir", ")", "\n", "run_im2smpl", "(", "img_dir", ")", "\n", "postprocess_im2smpl_result", "(", "img_dir", ")", "\n", "prepare_network_input_color", "(", "img_dir", ")", "\n", "prepare_network_input_semantic", "(", "img_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.featrue_affine": [[14, 28], ["tensorflow.reshape.get_shape().as_list", "tensorflow.reshape.get_shape().as_list", "f_3d.get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape.get_shape", "tensorflow.reshape.get_shape", "f_3d.get_shape"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "featrue_affine", "(", "f_3d", ",", "f_2d_a", ",", "f_2d_b", ")", ":", "\n", "        ", "shape_2d_a", "=", "f_2d_a", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# BHWC", "\n", "shape_2d_b", "=", "f_2d_b", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# BHWC", "\n", "shape_3d", "=", "f_3d", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# BDHWC", "\n", "\n", "assert", "shape_2d_b", "==", "shape_2d_a", "\n", "assert", "shape_2d_a", "[", "1", "]", "==", "shape_3d", "[", "2", "]", "and", "shape_2d_a", "[", "2", "]", "==", "shape_3d", "[", "3", "]", "and", "shape_2d_a", "[", "3", "]", "==", "shape_3d", "[", "4", "]", "\n", "\n", "f_2d_a", "=", "tf", ".", "reshape", "(", "f_2d_a", ",", "(", "shape_2d_a", "[", "0", "]", ",", "1", ",", "shape_2d_a", "[", "1", "]", ",", "shape_2d_a", "[", "2", "]", ",", "shape_2d_a", "[", "3", "]", ")", ")", "\n", "f_2d_b", "=", "tf", ".", "reshape", "(", "f_2d_b", ",", "(", "shape_2d_a", "[", "0", "]", ",", "1", ",", "shape_2d_a", "[", "1", "]", ",", "shape_2d_a", "[", "2", "]", ",", "shape_2d_a", "[", "3", "]", ")", ")", "\n", "\n", "f_3d", "=", "f_3d", "*", "f_2d_a", "+", "f_2d_b", "\n", "return", "f_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.lrelu": [[29, 34], ["abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", ":", "\n", "        ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.relu": [[35, 38], ["tensorflow.nn.relu"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.relu"], ["", "@", "staticmethod", "\n", "def", "relu", "(", "x", ")", ":", "\n", "        ", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.xxlu": [[39, 45], ["Ops.relu", "Ops.lrelu"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.relu", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.lrelu"], ["", "@", "staticmethod", "\n", "def", "xxlu", "(", "x", ",", "label", ",", "name", "=", "None", ")", ":", "\n", "        ", "if", "label", "==", "'relu'", ":", "\n", "            ", "return", "Ops", ".", "relu", "(", "x", ")", "\n", "", "if", "label", "==", "'lrelu'", ":", "\n", "            ", "return", "Ops", ".", "lrelu", "(", "x", ",", "leak", "=", "0.2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.variable_statistics": [[46, 56], ["tensorflow.name_scope", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.histogram", "tensorflow.reduce_mean", "tensorflow.reduce_max", "tensorflow.reduce_min", "tensorflow.square"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "variable_statistics", "(", "var", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "            ", "mean", "=", "tf", ".", "reduce_mean", "(", "var", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'mean'", ",", "mean", ")", "\n", "stddev", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "var", "-", "mean", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'stddev'", ",", "stddev", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'max'", ",", "tf", ".", "reduce_max", "(", "var", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'min'", ",", "tf", ".", "reduce_min", "(", "var", ")", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'histogram'", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.fc": [[57, 67], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "Ops.variable_statistics", "x.get_shape", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.variable_statistics"], ["", "", "@", "staticmethod", "\n", "def", "fc", "(", "x", ",", "out_d", ",", "name", ")", ":", "\n", "        ", "xavier_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "zero_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "in_d", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", "\n", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "'_w'", ",", "[", "in_d", ",", "out_d", "]", ",", "initializer", "=", "xavier_init", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "'_b'", ",", "[", "out_d", "]", ",", "initializer", "=", "zero_init", ")", "\n", "y", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "x", ",", "w", ")", ",", "b", ")", "\n", "Ops", ".", "variable_statistics", "(", "w", ",", "name", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.maxpool3d": [[68, 74], ["tensorflow.nn.max_pool3d"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "maxpool3d", "(", "x", ",", "k", ",", "s", ",", "pad", "=", "'SAME'", ")", ":", "\n", "        ", "ker", "=", "[", "1", ",", "k", ",", "k", ",", "k", ",", "1", "]", "\n", "str", "=", "[", "1", ",", "s", ",", "s", ",", "s", ",", "1", "]", "\n", "y", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "x", ",", "ksize", "=", "ker", ",", "strides", "=", "str", ",", "padding", "=", "pad", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d": [[75, 86], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add", "Ops.variable_statistics", "x.get_shape", "tensorflow.nn.conv3d"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.variable_statistics", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d"], ["", "@", "staticmethod", "\n", "def", "conv3d", "(", "x", ",", "k", ",", "out_c", ",", "str", ",", "name", ",", "pad", "=", "'SAME'", ")", ":", "\n", "        ", "xavier_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "zero_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "in_c", "=", "x", ".", "get_shape", "(", ")", "[", "4", "]", "\n", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "'_w'", ",", "[", "k", ",", "k", ",", "k", ",", "in_c", ",", "out_c", "]", ",", "initializer", "=", "xavier_init", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "'_b'", ",", "[", "out_c", "]", ",", "initializer", "=", "zero_init", ")", "\n", "stride", "=", "[", "1", ",", "str", ",", "str", ",", "str", ",", "1", "]", "\n", "y", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "nn", ".", "conv3d", "(", "x", ",", "w", ",", "stride", ",", "pad", ")", ",", "b", ")", "\n", "Ops", ".", "variable_statistics", "(", "w", ",", "name", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.deconv3d": [[87, 102], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.zeros_initializer", "x.get_shape", "int", "int", "int", "int", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.conv3d_transpose", "tensorflow.nn.bias_add", "Ops.variable_statistics", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.variable_statistics", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.shape"], ["", "@", "staticmethod", "\n", "def", "deconv3d", "(", "x", ",", "k", ",", "out_c", ",", "str", ",", "name", ",", "pad", "=", "'SAME'", ")", ":", "\n", "        ", "xavier_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "zero_init", "=", "tf", ".", "zeros_initializer", "(", ")", "\n", "[", "_", ",", "in_d1", ",", "in_d2", ",", "in_d3", ",", "in_c", "]", "=", "x", ".", "get_shape", "(", ")", "\n", "in_d1", "=", "int", "(", "in_d1", ")", ";", "in_d2", "=", "int", "(", "in_d2", ")", ";", "in_d3", "=", "int", "(", "in_d3", ")", ";", "in_c", "=", "int", "(", "in_c", ")", "\n", "bat", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "w", "=", "tf", ".", "get_variable", "(", "name", "+", "'_w'", ",", "[", "k", ",", "k", ",", "k", ",", "out_c", ",", "in_c", "]", ",", "initializer", "=", "xavier_init", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "+", "'_b'", ",", "[", "out_c", "]", ",", "initializer", "=", "zero_init", ")", "\n", "out_shape", "=", "[", "bat", ",", "in_d1", "*", "str", ",", "in_d2", "*", "str", ",", "in_d3", "*", "str", ",", "out_c", "]", "\n", "stride", "=", "[", "1", ",", "str", ",", "str", ",", "str", ",", "1", "]", "\n", "y", "=", "tf", ".", "nn", ".", "conv3d_transpose", "(", "x", ",", "w", ",", "output_shape", "=", "out_shape", ",", "strides", "=", "stride", ",", "padding", "=", "pad", ")", "\n", "y", "=", "tf", ".", "nn", ".", "bias_add", "(", "y", ",", "b", ")", "\n", "Ops", ".", "variable_statistics", "(", "w", ",", "name", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.get_variable_num": [[103, 116], ["cout_fn", "tensorflow.trainable_variables", "cout_fn", "variable.get_shape", "reduce"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_variable_num", "(", "logger", "=", "None", ")", ":", "\n", "        ", "cout_fn", "=", "print", "if", "logger", "is", "None", "else", "logger", ".", "write", "\n", "\n", "from", "functools", "import", "reduce", "\n", "from", "operator", "import", "mul", "\n", "num_params", "=", "0", "\n", "cout_fn", "(", "'All trainable variable: '", ")", "\n", "for", "variable", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "cout_fn", "(", "'-- '", ",", "variable", ".", "name", ")", "\n", "shape", "=", "variable", ".", "get_shape", "(", ")", "\n", "num_params", "+=", "reduce", "(", "mul", ",", "[", "dim", ".", "value", "for", "dim", "in", "shape", "]", ",", "1", ")", "\n", "", "return", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.compute_l1_error": [[117, 121], ["tensorflow.reduce_mean", "real.get_shape().as_list", "fake.get_shape().as_list", "tensorflow.abs", "real.get_shape", "fake.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_l1_error", "(", "real", ",", "fake", ")", ":", "\n", "        ", "assert", "real", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "fake", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "real", "-", "fake", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.compute_l2_error": [[122, 126], ["tensorflow.reduce_mean", "real.get_shape().as_list", "fake.get_shape().as_list", "tensorflow.square", "real.get_shape", "fake.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "compute_l2_error", "(", "real", ",", "fake", ")", ":", "\n", "        ", "assert", "real", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "fake", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "real", "-", "fake", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.main_train.main": [[12, 45], ["CommonUtil.safe_mkdir", "CommonUtil.safe_mkdir", "numpy.asarray", "testing_inds.tolist.tolist", "training_inds.tolist.tolist", "numpy.random.shuffle", "numpy.random.shuffle", "tensorflow.GPUOptions", "tensorflow.Session", "time.strftime", "TrainerNormal.Trainer", "TrainerNormal.Trainer.train", "range", "numpy.logical_not", "tensorflow.ConfigProto"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.train"], ["def", "main", "(", ")", ":", "\n", "    ", "util", ".", "safe_mkdir", "(", "'./results'", ")", "\n", "util", ".", "safe_mkdir", "(", "'./debug'", ")", "\n", "\n", "# please define your own split here", "\n", "img_total_num", "=", "28000", "\n", "split", "=", "0.8", "\n", "indices", "=", "np", ".", "asarray", "(", "range", "(", "img_total_num", ")", ")", "\n", "testing_flag", "=", "(", "indices", ">", "split", "*", "max_idx", ")", "\n", "testing_inds", "=", "indices", "[", "testing_flag", "]", "\n", "training_inds", "=", "indices", "[", "np", ".", "logical_not", "(", "testing_flag", ")", "]", "\n", "\n", "testing_inds", "=", "testing_inds", ".", "tolist", "(", ")", "\n", "training_inds", "=", "training_inds", ".", "tolist", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "testing_inds", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "training_inds", ")", "\n", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "per_process_gpu_memory_fraction", "=", "0.8", ")", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ")", ")", "\n", "\n", "time_str", "=", "time", ".", "strftime", "(", "'%y_%m_%d_%H_%M_%S'", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "sess", ")", "\n", "trainer", ".", "train", "(", "'./TrainingDataPreparation/synthetic_dataset_final'", ",", "training_inds", ",", "testing_inds", ",", "\n", "results_dir", "=", "'./results/results_final_'", "+", "time_str", ",", "# directory to stored the results", "\n", "graph_dir", "=", "'./results/graph_final_'", "+", "time_str", ",", "# directory as tensorboard working space", "\n", "batch_size", "=", "4", ",", "# batch size", "\n", "epoch_num", "=", "12", ",", "# epoch number", "\n", "first_channel", "=", "8", ",", "\n", "bottle_width", "=", "4", ",", "\n", "dis_reps", "=", "1", ",", "\n", "mode", "=", "'retrain'", ",", "\n", "pre_model_dir", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.Logger.__init__": [[8, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "buffer", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.Logger.__del__": [[12, 15], ["CommonUtil.Logger.file.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.Logger.set_log_file": [[16, 22], ["open", "CommonUtil.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "def", "set_log_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "assert", "self", ".", "file", "is", "None", "\n", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "if", "self", ".", "buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "self", ".", "buffer", ")", "\n", "self", ".", "buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.Logger.write": [[23, 33], ["datetime.datetime.now", "datetime.datetime.now.strftime", "print", "CommonUtil.Logger.file.write", "map"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "def", "write", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "dtstr", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "t_msg", "=", "'[%s]'", "%", "dtstr", "+", "' %s'", "%", "' '", ".", "join", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n", "print", "(", "t_msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "t_msg", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", "+=", "t_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.Logger.flush": [[34, 37], ["CommonUtil.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir": [[42, 46], ["os.path.exists", "os.mkdir", "shutil.rmtree"], "function", ["None"], ["def", "safe_rm_mkdir", "(", "dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "dir", ")", "\n", "", "os", ".", "mkdir", "(", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_mkdir": [[48, 51], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "safe_mkdir", "(", "dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Constants.Constants.__init__": [[5, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dim_w", "=", "128", "\n", "self", ".", "dim_h", "=", "192", "\n", "self", ".", "hb_ratio", "=", "self", ".", "dim_h", "/", "self", ".", "dim_w", "\n", "self", ".", "real_h", "=", "1.0", "\n", "self", ".", "real_w", "=", "self", ".", "real_h", "/", "self", ".", "dim_h", "*", "self", ".", "dim_w", "\n", "self", ".", "voxel_size", "=", "self", ".", "real_h", "/", "self", ".", "dim_h", "\n", "self", ".", "tau", "=", "0.5", "\n", "self", ".", "K", "=", "100", "\n", "self", ".", "fill", "=", "True", "\n", "\n", "# loss weights", "\n", "self", ".", "lamb_sil", "=", "0.02", "\n", "self", ".", "lamb_dis", "=", "0.0", "\n", "self", ".", "lamb_nml_rf", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.__init__": [[24, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sess", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.train": [[27, 171], ["TrainerNormal.Trainer._setup_result_folder", "TrainerNormal.Trainer._setup_data_loader", "log", "CommonUtil.safe_rm_mkdir", "range", "TrainerNormal.Trainer._build_network", "TrainerNormal.Trainer._build_loss", "TrainerNormal.Trainer._build_optimizer", "TrainerNormal.Trainer._setup_summary", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer._setup_saver", "range", "len", "val_data_loader.queue.get", "test_conc_imgs.append", "test_smpl_v_volumes.append", "test_mesh_volumes.append", "TrainerNormal.Trainer._save_tuple", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.local_variables_initializer", "log", "range", "log", "data_loaders[].queue.get", "TrainerNormal.Trainer._construct_feed_dict", "TrainerNormal.Trainer._construct_feed_dict", "writer.add_summary", "log", "open", "fp.write", "os.path.join", "CommonUtil.safe_rm_mkdir", "TrainerNormal.Trainer.save", "range", "TrainerNormal.Trainer.save", "TrainerNormal.Trainer.sess.run", "val_data_loader.queue.get", "TrainerNormal.Trainer._construct_feed_dict", "TrainerNormal.Trainer.sess.run", "os.path.join", "os.path.join", "TrainerNormal.Trainer.sess.run", "numpy.concatenate", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer._save_results_raw_training", "os.path.join", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_result_folder", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_data_loader", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_network", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_loss", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_optimizer", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_summary", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_saver", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_tuple", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._construct_feed_dict", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._construct_feed_dict", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._construct_feed_dict", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_results_raw_training", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run"], ["", "def", "train", "(", "self", ",", "\n", "dataset_dir", ",", "# path to dataset", "\n", "dataset_training_indices", ",", "# data starting index", "\n", "dataset_testing_indices", ",", "# data ending index", "\n", "results_dir", "=", "'./results/results_depth_multi_normal3'", ",", "# directory to stored the results", "\n", "graph_dir", "=", "'./results/graph_depth_multi_normal3'", ",", "# directory as tensorboard working space", "\n", "batch_size", "=", "4", ",", "# batch size", "\n", "epoch_num", "=", "9", ",", "# epoch number", "\n", "first_channel", "=", "8", ",", "\n", "bottle_width", "=", "4", ",", "\n", "dis_reps", "=", "1", ",", "\n", "mode", "=", "'retrain'", ",", "# training mode: 'retrain' or 'finetune'", "\n", "pre_model_dir", "=", "None", ")", ":", "# directory to pre-trained model", "\n", "        ", "\"\"\"\n        Train\n        construct the network, data loader and loss function accroding to the argument\n        \"\"\"", "\n", "assert", "batch_size", ">", "1", "# tf.squeeze is used, so need to make sure that the batch dim won't be removed", "\n", "\n", "self", ".", "_setup_result_folder", "(", "mode", ",", "results_dir", ",", "graph_dir", ")", "\n", "# logger.set_log_file(results_dir + '/log.txt')", "\n", "\n", "# setups data loader", "\n", "data_loader_num", "=", "4", "\n", "data_loaders", ",", "val_data_loader", "=", "self", ".", "_setup_data_loader", "(", "data_loader_num", ",", "batch_size", ",", "dataset_dir", ",", "dataset_training_indices", ",", "dataset_testing_indices", ")", "\n", "batch_num", "=", "len", "(", "dataset_training_indices", ")", "//", "batch_size", "\n", "test_batch_num", "=", "16", "//", "batch_size", "\n", "log", "(", "'#epoch = %d, #batch = %d'", "%", "(", "epoch_num", ",", "batch_num", ")", ")", "\n", "\n", "# loads some testing data for visualization and supervision", "\n", "test_conc_imgs", ",", "test_smpl_v_volumes", ",", "test_mesh_volumes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "safe_rm_mkdir", "(", "results_dir", "+", "'/test_gt'", ")", "\n", "for", "i", "in", "range", "(", "test_batch_num", ")", ":", "\n", "            ", "_", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "val_data_loader", ".", "queue", ".", "get", "(", ")", "\n", "test_conc_imgs", ".", "append", "(", "conc_imgs", ")", "\n", "test_smpl_v_volumes", ".", "append", "(", "smpl_v_volumes", ")", "\n", "test_mesh_volumes", ".", "append", "(", "mesh_volumes", ")", "\n", "self", ".", "_save_tuple", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "results_dir", "+", "'/test_gt'", ",", "i", ")", "\n", "\n", "# setups network and training loss", "\n", "", "self", ".", "_build_network", "(", "batch_size", ",", "first_channel", ",", "bottle_width", ")", "\n", "loss_collection", "=", "self", ".", "_build_loss", "(", "self", ".", "v_d", "[", "-", "1", "]", ",", "self", ".", "Y", ",", "self", ".", "M_fv", ",", "self", ".", "M_sv", ",", "\n", "self", ".", "Ns", ",", "self", ".", "n_final", ",", "self", ".", "dis_real_out", ",", "self", ".", "dis_fake_out", ",", "\n", "lamb_sil", "=", "self", ".", "lamb_sil", ",", "lamb_nml_rf", "=", "self", ".", "lamb_nml", ",", "\n", "lamb_dis", "=", "self", ".", "lamb_dis", ",", "w", "=", "0.7", ")", "\n", "loss_keys", "=", "[", "'vol_loss'", ",", "'sil_loss'", ",", "'normal_loss'", ",", "'nr_loss'", ",", "'recon_loss'", ",", "'total_loss'", "]", "\n", "\n", "# setups optimizer and visualizer", "\n", "recon_loss", "=", "loss_collection", "[", "'recon_loss'", "]", "\n", "nr_loss", "=", "loss_collection", "[", "'nr_loss'", "]", "\n", "total_loss", "=", "loss_collection", "[", "'total_loss'", "]", "\n", "dis_d_loss", "=", "loss_collection", "[", "'dis_d_loss'", "]", "\n", "recon_opt", ",", "nr_opt", ",", "all_opt", ",", "dis_opt", "=", "self", ".", "_build_optimizer", "(", "self", ".", "lr", ",", "recon_loss", ",", "nr_loss", ",", "total_loss", ",", "dis_d_loss", ")", "\n", "merged_scalar_loss", ",", "writer", "=", "self", ".", "_setup_summary", "(", "self", ".", "sess", ",", "graph_dir", ",", "loss_collection", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "saver", "=", "self", ".", "_setup_saver", "(", "pre_model_dir", ")", "\n", "\n", "for", "epoch_id", "in", "range", "(", "epoch_num", ")", ":", "\n", "            ", "log", "(", "'Running epoch No.%d'", "%", "epoch_id", ")", "\n", "loss_log_str", "=", "''", "\n", "for", "batch_id", "in", "range", "(", "batch_num", ")", ":", "\n", "                ", "iter_id", "=", "epoch_id", "*", "batch_num", "+", "batch_id", "\n", "lrate", "=", "1e-4", "if", "epoch_id", "<=", "epoch_num", "/", "3", "*", "2", "else", "1e-5", "\n", "lrate_d", "=", "lrate", "*", "0.1", "\n", "l_sil", "=", "consts", ".", "lamb_sil", "\n", "l_dis", "=", "consts", ".", "lamb_dis", "\n", "l_nml_rf", "=", "consts", ".", "lamb_nml_rf", "\n", "\n", "# training ==============================================================", "\n", "ind", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "data_loaders", "[", "iter_id", "%", "data_loader_num", "]", ".", "queue", ".", "get", "(", ")", "\n", "\n", "f_dict", "=", "self", ".", "_construct_feed_dict", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "l_sil", ",", "l_dis", ",", "l_nml_rf", ",", "lrate", ")", "\n", "f_dict_d", "=", "self", ".", "_construct_feed_dict", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "l_sil", ",", "l_dis", ",", "l_nml_rf", ",", "lrate_d", ")", "\n", "\n", "if", "epoch_id", "<=", "epoch_num", "/", "3", ":", "\n", "                    ", "out", "=", "self", ".", "sess", ".", "run", "(", "[", "recon_opt", "]", "+", "[", "loss_collection", "[", "lk", "]", "for", "lk", "in", "loss_keys", "]", "+", "[", "merged_scalar_loss", "]", ",", "feed_dict", "=", "f_dict", ")", "\n", "loss_curr_list", "=", "out", "[", "1", ":", "-", "1", "]", "\n", "graph_results", "=", "out", "[", "-", "1", "]", "\n", "\n", "", "elif", "epoch_id", "<=", "epoch_num", "/", "3", "*", "2", ":", "\n", "# for _ in range(dis_reps):", "\n", "#     self.sess.run([dis_opt], feed_dict=f_dict_d)", "\n", "                    ", "out", "=", "self", ".", "sess", ".", "run", "(", "[", "nr_opt", "]", "+", "[", "loss_collection", "[", "lk", "]", "for", "lk", "in", "loss_keys", "]", "+", "[", "merged_scalar_loss", "]", ",", "feed_dict", "=", "f_dict", ")", "\n", "loss_curr_list", "=", "out", "[", "1", ":", "-", "1", "]", "\n", "graph_results", "=", "out", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "# for _ in range(dis_reps):", "\n", "#     self.sess.run([dis_opt], feed_dict=f_dict_d)", "\n", "                    ", "out", "=", "self", ".", "sess", ".", "run", "(", "[", "all_opt", "]", "+", "[", "loss_collection", "[", "lk", "]", "for", "lk", "in", "loss_keys", "]", "+", "[", "merged_scalar_loss", "]", ",", "feed_dict", "=", "f_dict", ")", "\n", "loss_curr_list", "=", "out", "[", "2", ":", "-", "1", "]", "\n", "graph_results", "=", "out", "[", "-", "1", "]", "\n", "\n", "", "writer", ".", "add_summary", "(", "graph_results", ",", "epoch_id", "*", "batch_num", "+", "batch_id", ")", "\n", "\n", "scale", "=", "1", "\n", "log", "(", "'Epoch %d, Batch %d: '", "\n", "'vol_loss:%.4f, sil_loss:%.4f, normal_loss:%.4f, nr_loss:%.4f, '", "\n", "'recon_loss:%.4f, total_loss:%.4f'", "%", "\n", "(", "epoch_id", ",", "batch_id", ",", "loss_curr_list", "[", "0", "]", "*", "scale", ",", "loss_curr_list", "[", "1", "]", "*", "scale", ",", "\n", "loss_curr_list", "[", "2", "]", "*", "scale", ",", "loss_curr_list", "[", "3", "]", "*", "scale", ",", "\n", "loss_curr_list", "[", "4", "]", "*", "scale", ",", "loss_curr_list", "[", "5", "]", "*", "scale", ")", ")", "\n", "\n", "# validation ===========================================================", "\n", "if", "iter_id", "%", "5", "==", "0", ":", "\n", "                    ", "_", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "val_data_loader", ".", "queue", ".", "get", "(", ")", "\n", "f_dict", "=", "self", ".", "_construct_feed_dict", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "l_sil", ",", "l_dis", ",", "l_nml_rf", ",", "lrate", ")", "\n", "loss_val_curr", "=", "self", ".", "sess", ".", "run", "(", "[", "loss_collection", "[", "lk", "]", "for", "lk", "in", "loss_keys", "]", ",", "feed_dict", "=", "f_dict", ")", "\n", "\n", "loss_log_str", "+=", "(", "'%f %f %f %f %f %f '", "%", "(", "loss_curr_list", "[", "0", "]", ",", "loss_curr_list", "[", "1", "]", ",", "loss_curr_list", "[", "2", "]", ",", "\n", "loss_curr_list", "[", "3", "]", ",", "loss_curr_list", "[", "4", "]", ",", "loss_curr_list", "[", "5", "]", ")", ")", "\n", "loss_log_str", "+=", "(", "'%f %f %f %f %f %f \\n'", "%", "(", "loss_val_curr", "[", "0", "]", ",", "loss_val_curr", "[", "1", "]", ",", "loss_val_curr", "[", "2", "]", ",", "\n", "loss_val_curr", "[", "3", "]", ",", "loss_val_curr", "[", "4", "]", ",", "loss_val_curr", "[", "5", "]", ")", ")", "\n", "\n", "", "", "log", "(", "'End of epoch. '", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'loss_log.txt'", ")", ",", "'a'", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "loss_log_str", ")", "\n", "\n", "", "if", "epoch_id", ">", "0.5", "*", "epoch_num", ":", "\n", "                ", "test_dir", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'%04d'", "%", "epoch_id", ")", "\n", "safe_rm_mkdir", "(", "test_dir", ")", "\n", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'model.ckpt'", ")", ")", "\n", "\n", "# test the network and save the results", "\n", "for", "tbi", "in", "range", "(", "test_batch_num", ")", ":", "\n", "                    ", "f_dict", "=", "{", "self", ".", "X", ":", "test_smpl_v_volumes", "[", "tbi", "]", ",", "self", ".", "Y", ":", "test_mesh_volumes", "[", "tbi", "]", ",", "\n", "self", ".", "R", ":", "test_conc_imgs", "[", "tbi", "]", "[", ":", ",", ":", ",", ":", ",", ":", "6", "]", "}", "\n", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "n0_project", ",", "self", ".", "n1_project", ",", "\n", "self", ".", "n2_project", ",", "self", ".", "n3_project", "]", ",", "\n", "feed_dict", "=", "f_dict", ")", "\n", "nps", "=", "np", ".", "concatenate", "(", "(", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "v_out", ",", "feed_dict", "=", "f_dict", ")", "\n", "res_n", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "n_final", ",", "feed_dict", "=", "f_dict", ")", "\n", "self", ".", "_save_results_raw_training", "(", "res", ",", "res_n", ",", "nps", ",", "test_dir", ",", "tbi", ")", "\n", "\n", "# backup model", "\n", "", "", "if", "True", ":", "# epoch_id % 10 == 0:", "\n", "                ", "saver", ".", "save", "(", "self", ".", "sess", ",", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'model.ckpt'", ")", ")", "\n", "\n", "", "", "for", "data", "in", "data_loaders", ":", "\n", "            ", "data", ".", "stop_queue", "=", "True", "\n", "", "val_data_loader", ".", "stop_queue", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_result_folder": [[172, 191], ["CommonUtil.safe_rm_mkdir", "glob.glob", "os.path.exists", "os.path.exists", "CommonUtil.safe_rm_mkdir", "CommonUtil.safe_rm_mkdir", "os.path.join", "shutil.copy", "log", "shutil.rmtree", "log", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.CommonUtil.safe_rm_mkdir"], ["", "@", "staticmethod", "\n", "def", "_setup_result_folder", "(", "mode", ",", "\n", "results_dir", "=", "'./results/results_depth_multi_normal3'", ",", "\n", "graph_dir", "=", "'./results/graph_depth_multi_normal3'", ")", ":", "\n", "# create folders", "\n", "        ", "if", "mode", "==", "'retrain'", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "                ", "log", "(", "'Warning: %s already exists. It will be removed. '", "%", "results_dir", ")", "\n", "shutil", ".", "rmtree", "(", "results_dir", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "graph_dir", ")", ":", "\n", "                ", "log", "(", "'Warning: %s already exists. It will be removed. '", "%", "graph_dir", ")", "\n", "shutil", ".", "rmtree", "(", "graph_dir", ")", "\n", "", "safe_rm_mkdir", "(", "results_dir", ")", "\n", "safe_rm_mkdir", "(", "graph_dir", ")", "\n", "\n", "", "safe_rm_mkdir", "(", "results_dir", "+", "'/code_bk'", ")", "\n", "pylist", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "'*.py'", ")", ")", "\n", "for", "pyfile", "in", "pylist", ":", "\n", "            ", "shutil", ".", "copy", "(", "pyfile", ",", "results_dir", "+", "'/code_bk'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_data_loader": [[192, 212], ["log", "log", "log", "range", "DataLoaderNormal.DataLoader", "DataLoaderNormal.DataLoader.start", "log", "len", "len", "DataLoaderNormal.DataLoader", "DataLoaderNormal.DataLoader.start", "data_loaders.append"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.start", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.start"], ["", "", "@", "staticmethod", "\n", "def", "_setup_data_loader", "(", "data_loader_num", ",", "batch_size", ",", "dataset_dir", ",", "\n", "dataset_training_indices", ",", "dataset_testing_indices", ")", ":", "\n", "        ", "log", "(", "'Constructing data loader...'", ")", "\n", "log", "(", "'#training_data ='", ",", "len", "(", "dataset_training_indices", ")", ")", "\n", "log", "(", "'#testing_data ='", ",", "len", "(", "dataset_testing_indices", ")", ")", "\n", "\n", "data_loaders", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "data_loader_num", ")", ":", "\n", "            ", "data", "=", "DataLoader", "(", "batch_size", ",", "dataset_dir", ",", "dataset_training_indices", ",", "augmentation", "=", "True", ")", "\n", "data", ".", "daemon", "=", "True", "\n", "data", ".", "start", "(", ")", "\n", "data_loaders", ".", "append", "(", "data", ")", "\n", "\n", "", "val_data_loader", "=", "DataLoader", "(", "batch_size", ",", "dataset_dir", ",", "dataset_testing_indices", ",", "augmentation", "=", "False", ")", "\n", "val_data_loader", ".", "daemon", "=", "True", "\n", "val_data_loader", ".", "start", "(", ")", "\n", "\n", "log", "(", "'DataLoaders start. '", ")", "\n", "return", "data_loaders", ",", "val_data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._construct_feed_dict": [[213, 227], ["None"], "methods", ["None"], ["", "def", "_construct_feed_dict", "(", "self", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "\n", "l_sil", ",", "l_dis", ",", "l_nml_rf", ",", "lrate", ")", ":", "\n", "        ", "in_imgs", "=", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", ":", "6", "]", "# use only first 6 channels as input", "\n", "m0", ",", "m1", "=", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "6", ":", "7", "]", ",", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "7", ":", "8", "]", "\n", "n0", ",", "n1", "=", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "10", ":", "13", "]", ",", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "13", ":", "16", "]", "\n", "n2", ",", "n3", "=", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "16", ":", "19", "]", ",", "conc_imgs", "[", ":", ",", ":", ",", ":", ",", "19", ":", "22", "]", "\n", "f_dict", "=", "{", "self", ".", "X", ":", "smpl_v_volumes", ",", "\n", "self", ".", "Y", ":", "mesh_volumes", ",", "\n", "self", ".", "R", ":", "in_imgs", ",", "\n", "self", ".", "M_fv", ":", "m0", ",", "self", ".", "M_sv", ":", "m1", ",", "\n", "self", ".", "N0", ":", "n0", ",", "self", ".", "N1", ":", "n1", ",", "self", ".", "N2", ":", "n2", ",", "self", ".", "N3", ":", "n3", ",", "\n", "self", ".", "lamb_sil", ":", "l_sil", ",", "self", ".", "lamb_dis", ":", "l_dis", ",", "self", ".", "lamb_nml", ":", "l_nml_rf", ",", "\n", "self", ".", "lr", ":", "lrate", "}", "\n", "return", "f_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.test": [[228, 278], ["TrainerNormal.Trainer._build_network", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run", "log", "TrainerNormal.Trainer._setup_saver", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.local_variables_initializer", "cv2.cvtColor", "DataLoaderNormal.DataLoader.resize_and_crop_img", "cv2.cvtColor", "DataLoaderNormal.DataLoader.resize_and_crop_img", "scipy.loadmat", "numpy.transpose", "numpy.flip", "numpy.concatenate", "numpy.expand_dims", "numpy.expand_dims", "TrainerNormal.Trainer.sess.run", "numpy.concatenate", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run", "log", "TrainerNormal.Trainer._save_results_raw_testing", "cv2.imread", "numpy.float32", "cv2.imread", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_network", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_saver", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_results_raw_testing"], ["", "def", "test", "(", "self", ",", "\n", "dataset_dir", ",", "# path to testing dataset", "\n", "dataset_prefix_list", ",", "# file name prefix of testing data", "\n", "pre_model_dir", ",", "# path to pretrained model", "\n", "first_channel", "=", "8", ",", "\n", "bottle_width", "=", "4", ")", ":", "# directory to pre-trained model", "\n", "        ", "\"\"\"\n            Test\n            construct the network, data loader and loss function accroding to the argument\n        \"\"\"", "\n", "log", "=", "logger", ".", "write", "\n", "batch_size", "=", "1", "# batch size", "\n", "\n", "self", ".", "_build_network", "(", "batch_size", ",", "first_channel", ",", "bottle_width", ")", "\n", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "log", "(", "'Constructing saver...'", ")", "\n", "saver", "=", "self", ".", "_setup_saver", "(", "pre_model_dir", ")", "\n", "\n", "for", "dataset_prefix", "in", "dataset_prefix_list", ":", "\n", "            ", "prefix", "=", "dataset_dir", "+", "'/'", "+", "dataset_prefix", "\n", "img", "=", "cv", ".", "cvtColor", "(", "cv", ".", "imread", "(", "prefix", "+", "'color.png'", ")", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "# prefix = './TestingData/test_'", "\n", "# img = cv.cvtColor(cv.imread(prefix + 'input.jpg'), cv.COLOR_BGR2RGB)", "\n", "img", "=", "np", ".", "float32", "(", "img", ")", "/", "255.0", "\n", "img", "=", "DataLoader", ".", "resize_and_crop_img", "(", "img", ")", "\n", "\n", "vmap", "=", "cv", ".", "cvtColor", "(", "cv", ".", "imread", "(", "prefix", "+", "'vmap.png'", ")", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "vmap", "=", "np", ".", "float32", "(", "vmap", ")", "/", "255.0", "\n", "vmap", "=", "DataLoader", ".", "resize_and_crop_img", "(", "vmap", ")", "\n", "\n", "smpl_v_volume", "=", "sio", ".", "loadmat", "(", "prefix", "+", "'volume.mat'", ")", "\n", "smpl_v_volume", "=", "smpl_v_volume", "[", "'smpl_v_volume'", "]", "\n", "smpl_v_volume", "=", "np", ".", "transpose", "(", "smpl_v_volume", ",", "(", "2", ",", "1", ",", "0", ",", "3", ")", ")", "\n", "smpl_v_volume", "=", "np", ".", "flip", "(", "smpl_v_volume", ",", "axis", "=", "1", ")", "\n", "\n", "concat_in", "=", "np", ".", "concatenate", "(", "(", "img", ",", "vmap", ")", ",", "axis", "=", "-", "1", ")", "\n", "concat_in", "=", "np", ".", "expand_dims", "(", "concat_in", ",", "axis", "=", "0", ")", "\n", "smpl_v_volume", "=", "np", ".", "expand_dims", "(", "smpl_v_volume", ",", "axis", "=", "0", ")", "\n", "\n", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "n0_project", ",", "self", ".", "n1_project", ",", "self", ".", "n2_project", ",", "self", ".", "n3_project", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "X", ":", "smpl_v_volume", ",", "self", ".", "R", ":", "concat_in", "}", ")", "\n", "nps", "=", "np", ".", "concatenate", "(", "(", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "v_out", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "smpl_v_volume", ",", "self", ".", "R", ":", "concat_in", "}", ")", "\n", "res_n", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "n_final", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "smpl_v_volume", ",", "self", ".", "R", ":", "concat_in", "}", ")", "\n", "log", "(", "'Testing results saved to'", ",", "dataset_dir", ")", "\n", "self", ".", "_save_results_raw_testing", "(", "res", ",", "res_n", ",", "nps", ",", "dataset_dir", ",", "dataset_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer.test_with_gt": [[279, 306], ["CommonUtil.safe_mkdir", "DataLoaderNormal.DataLoader", "TrainerNormal.Trainer._build_network", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer.sess.run", "TrainerNormal.Trainer._setup_saver", "tensorflow.global_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "tensorflow.local_variables_initializer", "DataLoaderNormal.DataLoader.load_tuple_batch", "TrainerNormal.Trainer._construct_feed_dict", "TrainerNormal.Trainer.sess.run", "numpy.concatenate", "TrainerNormal.Trainer.sess.run", "log", "TrainerNormal.Trainer._save_results_raw_testing"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_network", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_saver", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple_batch", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._construct_feed_dict", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_results_raw_testing"], ["", "", "def", "test_with_gt", "(", "self", ",", "\n", "dataset_dir", ",", "# path to dataset", "\n", "dataset_testing_indices", ",", "# data ending index", "\n", "pre_model_dir", ",", "\n", "output_dir", ",", "\n", "first_channel", "=", "8", ",", "\n", "bottle_width", "=", "4", ")", ":", "# directory to pre-trained model", "\n", "        ", "safe_mkdir", "(", "output_dir", ")", "\n", "loader", "=", "DataLoader", "(", "1", ",", "dataset_dir", ",", "dataset_testing_indices", ",", "augmentation", "=", "False", ")", "\n", "\n", "self", ".", "_build_network", "(", "1", ",", "first_channel", ",", "bottle_width", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "saver", "=", "self", ".", "_setup_saver", "(", "pre_model_dir", ")", "\n", "\n", "for", "i", "in", "dataset_testing_indices", ":", "\n", "            ", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "loader", ".", "load_tuple_batch", "(", "[", "i", "]", ")", "\n", "f_dict", "=", "self", ".", "_construct_feed_dict", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "0", ",", "\n", "0", ",", "0", ",", "0", ")", "\n", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "n0_project", ",", "self", ".", "n1_project", ",", "\n", "self", ".", "n2_project", ",", "self", ".", "n3_project", "]", ",", "\n", "feed_dict", "=", "f_dict", ")", "\n", "nps", "=", "np", ".", "concatenate", "(", "(", "n0_p", ",", "n1_p", ",", "n2_p", ",", "n3_p", ")", ",", "axis", "=", "-", "1", ")", "\n", "res", ",", "res_n", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "v_out", ",", "self", ".", "n_final", "]", ",", "\n", "feed_dict", "=", "f_dict", ")", "\n", "log", "(", "'Testing results saved to '", ",", "output_dir", ")", "\n", "self", ".", "_save_results_raw_testing", "(", "res", ",", "res_n", ",", "nps", ",", "output_dir", ",", "'%08d_'", "%", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_network": [[307, 351], ["log", "log", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.concat", "tensorflow.concat", "tensorflow.name_scope", "tensorflow.name_scope", "TrainerNormal.Trainer._build_image_encoder", "TrainerNormal.Trainer._build_affine_params", "TrainerNormal.Trainer._build_volume_encoder", "TrainerNormal.Trainer._build_volume_decoder", "TrainerNormal.Trainer._build_depth_projector", "TrainerNormal.Trainer._build_normal_calculator", "TrainerNormal.Trainer._build_normal_calculator", "TrainerNormal.Trainer._build_normal_calculator", "TrainerNormal.Trainer._build_normal_calculator", "TrainerNormal.Trainer._build_normal_refiner", "TrainerNormal.Trainer._build_normal_refiner2", "tensorflow.concat", "tensorflow.concat", "TrainerNormal.Trainer._build_normal_discriminator", "Ops.Ops.Ops.get_variable_num"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_image_encoder", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_affine_params", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_volume_encoder", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_volume_decoder", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_depth_projector", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_calculator", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_calculator", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_calculator", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_calculator", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_refiner", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_refiner2", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_discriminator", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.get_variable_num"], ["", "", "def", "_build_network", "(", "self", ",", "batch_size", ",", "first_channel", ",", "bottle_width", ")", ":", "\n", "        ", "\"\"\"\n        Builds the image-guided volume-to-volume network\n        Warning: the network input format: BDHWC for volume, and BHWC for image\n        \"\"\"", "\n", "log", "(", "'Constructing network...'", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'params'", ")", ":", "\n", "            ", "self", ".", "lamb_sil", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "lamb_dis", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "lamb_nml", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'input'", ")", ":", "\n", "            ", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "consts", ".", "dim_w", ",", "consts", ".", "dim_h", ",", "consts", ".", "dim_w", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Y", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "consts", ".", "dim_w", ",", "consts", ".", "dim_h", ",", "consts", ".", "dim_w", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "R", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "6", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "M_fv", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "M_sv", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "N0", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "N1", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "N2", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "N3", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "batch_size", ",", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_w", ",", "3", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "Ns", "=", "tf", ".", "concat", "(", "[", "self", ".", "N0", ",", "self", ".", "N1", ",", "self", ".", "N2", ",", "self", ".", "N3", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'network'", ")", ":", "\n", "            ", "self", ".", "i_e", "=", "self", ".", "_build_image_encoder", "(", "self", ".", "R", ",", "first_channel", ",", "bottle_width", ",", "logger", ".", "write", ")", "\n", "self", ".", "sft_a", ",", "self", ".", "sft_b", "=", "self", ".", "_build_affine_params", "(", "self", ".", "i_e", ",", "logger", ".", "write", ")", "\n", "self", ".", "v_e", "=", "self", ".", "_build_volume_encoder", "(", "self", ".", "X", ",", "first_channel", ",", "bottle_width", ",", "self", ".", "sft_a", ",", "self", ".", "sft_b", ",", "logger", ".", "write", ")", "\n", "self", ".", "v_d", "=", "self", ".", "_build_volume_decoder", "(", "self", ".", "v_e", ",", "1", ",", "consts", ".", "dim_w", ",", "self", ".", "sft_a", ",", "self", ".", "sft_b", ",", "logger", ".", "write", ")", "\n", "self", ".", "v_out", "=", "self", ".", "v_d", "[", "-", "1", "]", "\n", "self", ".", "d0", ",", "self", ".", "d1", ",", "self", ".", "d2", ",", "self", ".", "d3", "=", "self", ".", "_build_depth_projector", "(", "self", ".", "v_out", ")", "\n", "self", ".", "n0_project", "=", "self", ".", "_build_normal_calculator", "(", "self", ".", "d0", ")", "\n", "self", ".", "n1_project", "=", "self", ".", "_build_normal_calculator", "(", "self", ".", "d1", ")", "\n", "self", ".", "n2_project", "=", "self", ".", "_build_normal_calculator", "(", "self", ".", "d2", ")", "\n", "self", ".", "n3_project", "=", "self", ".", "_build_normal_calculator", "(", "self", ".", "d3", ")", "\n", "self", ".", "nr0", "=", "self", ".", "_build_normal_refiner", "(", "self", ".", "n0_project", ",", "self", ".", "R", ",", "logger", ".", "write", ")", "\n", "self", ".", "n_final_0", "=", "self", ".", "nr0", "[", "-", "1", "]", "\n", "self", ".", "nr1", ",", "self", ".", "nr2", ",", "self", ".", "nr3", "=", "self", ".", "_build_normal_refiner2", "(", "self", ".", "n1_project", ",", "self", ".", "n2_project", ",", "self", ".", "n3_project", ",", "logger", ".", "write", ")", "\n", "self", ".", "n_final_1", ",", "self", ".", "n_final_2", ",", "self", ".", "n_final_3", "=", "self", ".", "nr1", "[", "-", "1", "]", ",", "self", ".", "nr2", "[", "-", "1", "]", ",", "self", ".", "nr3", "[", "-", "1", "]", "\n", "self", ".", "n_final", "=", "tf", ".", "concat", "(", "[", "self", ".", "n_final_0", ",", "self", ".", "n_final_1", ",", "self", ".", "n_final_2", ",", "self", ".", "n_final_3", "]", ",", "axis", "=", "-", "1", ")", "\n", "self", ".", "dis_real_out", ",", "self", ".", "dis_fake_out", "=", "self", ".", "_build_normal_discriminator", "(", "self", ".", "n_final", ",", "self", ".", "Ns", ",", "self", ".", "M_fv", ",", "self", ".", "M_sv", ",", "self", ".", "R", ",", "logger", ".", "write", ")", "\n", "\n", "", "log", "(", "'The whole graph has %d trainable parameters'", "%", "Ops", ".", "get_variable_num", "(", "logger", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_image_encoder": [[352, 385], ["tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear.get_shape().as_list", "print_fn", "print_fn", "w_e.append", "c_e.append", "tensorflow.image.resize_bilinear.get_shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.conv2d", "tensorflow.conv2d", "print_fn", "layers.append", "tensorflow.conv2d.get_shape().as_list", "len", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "tensorflow.conv2d.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_image_encoder", "(", "R", ",", "first_channel", ",", "bottle_neck_w", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Build the volume encoder\n        \"\"\"", "\n", "R_", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "R", ",", "(", "consts", ".", "dim_h", ",", "consts", ".", "dim_w", ")", ")", "\n", "\n", "r_shape", "=", "R_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "r_w", "=", "r_shape", "[", "2", "]", "\n", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "\n", "# calculate network parameters", "\n", "", "w_e", "=", "[", "r_w", "//", "2", "]", "\n", "c_e", "=", "[", "first_channel", "]", "\n", "while", "w_e", "[", "-", "1", "]", ">", "bottle_neck_w", ":", "\n", "            ", "w_e", ".", "append", "(", "w_e", "[", "-", "1", "]", "//", "2", ")", "\n", "c_e", ".", "append", "(", "c_e", "[", "-", "1", "]", "*", "2", ")", "\n", "", "print_fn", "(", "'-- Image encoder layers\\' width'", ",", "w_e", ")", "\n", "print_fn", "(", "'-- Image encoder layers\\' channel'", ",", "c_e", ")", "\n", "layers", "=", "[", "R_", "]", "\n", "for", "c", "in", "c_e", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'i_e_%d'", "%", "(", "len", "(", "layers", ")", ")", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "c", ",", "[", "7", ",", "7", "]", ",", "2", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "print_fn", "(", "'-- Image encoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_affine_params": [[386, 409], ["range", "len", "tensorflow.variable_scope", "tensorflow.variable_scope", "E_i[].get_shape().as_list", "tensorflow.conv2d", "tensorflow.conv2d", "sft_a.append", "tensorflow.conv2d", "tensorflow.conv2d", "sft_b.append", "print_fn", "tensorflow.conv2d.get_shape().as_list", "E_i[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "len", "tensorflow.conv2d.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_affine_params", "(", "E_i", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "\n", "", "sft_a", ",", "sft_b", "=", "[", "]", ",", "[", "]", "\n", "for", "li", "in", "range", "(", "1", ",", "len", "(", "E_i", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'a_p_%d'", "%", "(", "len", "(", "sft_a", ")", "+", "1", ")", ")", ":", "\n", "                ", "nin_shape", "=", "E_i", "[", "li", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net_a", "=", "slim", ".", "conv2d", "(", "E_i", "[", "li", "]", ",", "nin_shape", "[", "-", "1", "]", ",", "[", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0_pa'", ")", "\n", "sft_a", ".", "append", "(", "net_a", ")", "\n", "net_b", "=", "slim", ".", "conv2d", "(", "E_i", "[", "li", "]", ",", "nin_shape", "[", "-", "1", "]", ",", "[", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0_pb'", ")", "\n", "sft_b", ".", "append", "(", "net_b", ")", "\n", "print_fn", "(", "'-- SFT parameters layer %d:'", "%", "len", "(", "sft_a", ")", ",", "nin_shape", ",", "'-->'", ",", "net_a", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "", "return", "sft_a", ",", "sft_b", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_volume_encoder": [[410, 442], ["X.get_shape().as_list", "print_fn", "print_fn", "enumerate", "w_e.append", "c_e.append", "X.get_shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.conv3d", "tensorflow.conv3d", "Ops.Ops.Ops.featrue_affine", "print_fn", "layers.append", "Ops.Ops.featrue_affine.get_shape().as_list", "len", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "Ops.Ops.featrue_affine.get_shape"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.featrue_affine"], ["", "@", "staticmethod", "\n", "def", "_build_volume_encoder", "(", "X", ",", "frist_channel", ",", "bottle_neck_w", ",", "sft_params_a", ",", "sft_params_b", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build the volume encoder\n        \"\"\"", "\n", "x_shape", "=", "X", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# (batch, x_dim, y_dim, z_dim, channel)", "\n", "x_w", "=", "x_shape", "[", "1", "]", "\n", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "\n", "# calculate network parameters", "\n", "", "w_e", "=", "[", "x_w", "//", "2", "]", "\n", "c_e", "=", "[", "frist_channel", "]", "\n", "while", "w_e", "[", "-", "1", "]", ">", "bottle_neck_w", ":", "\n", "            ", "w_e", ".", "append", "(", "w_e", "[", "-", "1", "]", "//", "2", ")", "\n", "c_e", ".", "append", "(", "c_e", "[", "-", "1", "]", "*", "2", ")", "\n", "", "print_fn", "(", "'-- Volume encoder layers\\' width'", ",", "w_e", ")", "\n", "print_fn", "(", "'-- Volume encoder layers\\' channel'", ",", "c_e", ")", "\n", "\n", "layers", "=", "[", "X", "]", "\n", "for", "ci", ",", "c", "in", "enumerate", "(", "c_e", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'v_e_%d'", "%", "len", "(", "layers", ")", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv3d", "(", "layers", "[", "-", "1", "]", ",", "c", ",", "[", "7", ",", "7", ",", "7", "]", ",", "2", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "Ops", ".", "featrue_affine", "(", "net", ",", "sft_params_a", "[", "ci", "]", ",", "sft_params_b", "[", "ci", "]", ")", "\n", "print_fn", "(", "'-- Volume encoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_volume_decoder": [[443, 491], ["Z.get_shape().as_list", "print_fn", "print_fn", "enumerate", "w_d.append", "c_d.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.conv3d", "tensorflow.conv3d", "print_fn", "layers.append", "Z.get_shape", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.concat.get_shape().as_list", "tensorflow.conv3d_transpose", "tensorflow.conv3d_transpose", "print_fn", "layers.append", "tensorflow.concat.get_shape().as_list", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat.get_shape().as_list", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "len", "tensorflow.concat.get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "tensorflow.concat.get_shape", "tensorflow.concat.get_shape"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.Ops.Ops.conv3d"], ["", "@", "staticmethod", "\n", "def", "_build_volume_decoder", "(", "layers_e", ",", "last_channel", ",", "out_w", ",", "sft_params_a", ",", "sft_params_b", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build the volume decoder\n        \"\"\"", "\n", "Z", "=", "layers_e", "[", "-", "1", "]", "\n", "z_shape", "=", "Z", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "z_w", "=", "z_shape", "[", "1", "]", "\n", "z_c", "=", "z_shape", "[", "-", "1", "]", "\n", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "\n", "# calculate network parameters", "\n", "", "w_d", "=", "[", "z_w", "*", "2", "]", "\n", "c_d", "=", "[", "z_c", "//", "2", "]", "\n", "while", "w_d", "[", "-", "1", "]", "<", "out_w", ":", "\n", "            ", "w_d", ".", "append", "(", "w_d", "[", "-", "1", "]", "*", "2", ")", "\n", "c_d", ".", "append", "(", "c_d", "[", "-", "1", "]", "//", "2", ")", "\n", "", "print_fn", "(", "'-- Volume decoder layers\\' width'", ",", "w_d", ")", "\n", "print_fn", "(", "'-- Volume decoder layers\\' channel'", ",", "c_d", ")", "\n", "\n", "layers", "=", "[", "Z", "]", "\n", "for", "ci", ",", "c", "in", "enumerate", "(", "c_d", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'v_d_%d'", "%", "len", "(", "layers", ")", ")", ":", "\n", "                ", "if", "ci", "==", "0", ":", "\n", "                    ", "net", "=", "layers", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "net", "=", "tf", ".", "concat", "(", "[", "layers", "[", "-", "1", "]", ",", "layers_e", "[", "-", "ci", "-", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "# U-net structure", "\n", "", "nin_shape", "=", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv3d_transpose", "(", "net", ",", "c", ",", "[", "7", ",", "7", ",", "7", "]", ",", "2", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "print_fn", "(", "'-- Volume decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'v_d_out'", ")", ":", "\n", "            ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv3d", "(", "layers", "[", "-", "1", "]", ",", "last_channel", ",", "[", "1", ",", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ",", "scope", "=", "'conv0'", ")", "# output to (0, 1)", "\n", "print_fn", "(", "'-- Volume decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_sil_projector": [[492, 507], ["tensorflow.name_scope", "tensorflow.name_scope", "volume.get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.expand_dims", "volume.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_sil_projector", "(", "volume", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'projector'", ")", ":", "\n", "            ", "vshape", "=", "volume", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "v1", "=", "tf", ".", "reshape", "(", "volume", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "1", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ")", ")", "# remove last dim", "\n", "fv", "=", "tf", ".", "reduce_max", "(", "v1", ",", "axis", "=", "1", ")", "# project along z-axis", "\n", "fv", "=", "tf", ".", "squeeze", "(", "fv", ")", "# remove z-dim", "\n", "fv", "=", "tf", ".", "expand_dims", "(", "fv", ",", "axis", "=", "-", "1", ")", "# add channel dim", "\n", "\n", "sv", "=", "tf", ".", "reduce_max", "(", "v1", ",", "axis", "=", "3", ")", "# project along x-axis", "\n", "sv", "=", "tf", ".", "squeeze", "(", "sv", ")", "# remove x-dim", "\n", "sv", "=", "tf", ".", "transpose", "(", "sv", ",", "(", "0", ",", "2", ",", "1", ")", ")", "# convert to HW format", "\n", "sv", "=", "tf", ".", "expand_dims", "(", "sv", ",", "axis", "=", "-", "1", ")", "# add channel dim", "\n", "\n", "", "return", "fv", ",", "sv", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_depth_projector": [[508, 549], ["tensorflow.name_scope", "tensorflow.name_scope", "volume.get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.sigmoid", "tensorflow.sigmoid", "numpy.asarray", "tensorflow.constant", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_min", "tensorflow.reduce_min", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.reshape", "tensorflow.reshape", "range", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "volume.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_depth_projector", "(", "volume", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'depth_projector'", ")", ":", "\n", "            ", "vshape", "=", "volume", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "v1", "=", "tf", ".", "reshape", "(", "volume", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "1", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ")", ")", "# remove last dim", "\n", "v1", "=", "tf", ".", "sigmoid", "(", "9999", "*", "(", "v1", "-", "0.5", ")", ")", "\n", "\n", "d_array", "=", "np", ".", "asarray", "(", "range", "(", "consts", ".", "dim_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "d_array", "=", "(", "d_array", "-", "(", "consts", ".", "dim_w", "/", "2", ")", "+", "0.5", ")", "*", "consts", ".", "voxel_size", "\n", "\n", "d_array", "=", "tf", ".", "constant", "(", "d_array", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# front view (view 0) projection (along z-axis)", "\n", "M", "=", "-", "99", "\n", "d_array_v0", "=", "tf", ".", "reshape", "(", "d_array", ",", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "# BDHW", "\n", "depth_volume_0", "=", "M", "*", "(", "1", "-", "v1", ")", "+", "d_array_v0", "*", "v1", "\n", "depth_project_0", "=", "tf", ".", "reduce_max", "(", "depth_volume_0", ",", "axis", "=", "1", ")", "# max along D (Z) --> BHW", "\n", "depth_project_0", "=", "tf", ".", "reshape", "(", "depth_project_0", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ",", "1", ")", ")", "\n", "\n", "# side view (view 1) projection (along x_axis)", "\n", "M", "=", "99", "\n", "d_array_v1", "=", "tf", ".", "reshape", "(", "d_array", ",", "(", "1", ",", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "depth_volume_1", "=", "M", "*", "(", "1", "-", "v1", ")", "+", "d_array_v1", "*", "v1", "\n", "depth_project_1", "=", "tf", ".", "reduce_min", "(", "depth_volume_1", ",", "axis", "=", "3", ")", "# min along W (X) --> BDH", "\n", "depth_project_1", "=", "-", "depth_project_1", "\n", "depth_project_1", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "depth_project_1", ",", "(", "0", ",", "2", ",", "1", ")", ")", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ",", "1", ")", ")", "\n", "\n", "# back view (view 2) projection (along z-axis)", "\n", "M", "=", "99", "\n", "depth_volume_2", "=", "M", "*", "(", "1", "-", "v1", ")", "+", "d_array_v0", "*", "v1", "\n", "depth_project_2", "=", "tf", ".", "reduce_min", "(", "depth_volume_2", ",", "axis", "=", "1", ")", "# max along D (Z) --> BHW", "\n", "depth_project_2", "=", "-", "depth_project_2", "\n", "depth_project_2", "=", "tf", ".", "reshape", "(", "depth_project_2", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ",", "1", ")", ")", "\n", "\n", "# size view (view 3) projection (along x-axis)", "\n", "M", "=", "-", "99", "\n", "depth_volume_3", "=", "M", "*", "(", "1", "-", "v1", ")", "+", "d_array_v1", "*", "v1", "\n", "depth_project_3", "=", "tf", ".", "reduce_max", "(", "depth_volume_3", ",", "axis", "=", "3", ")", "# min along W (X) --> BDH", "\n", "depth_project_3", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "depth_project_3", ",", "(", "0", ",", "2", ",", "1", ")", ")", ",", "(", "vshape", "[", "0", "]", ",", "vshape", "[", "2", "]", ",", "vshape", "[", "3", "]", ",", "1", ")", ")", "\n", "\n", "", "return", "depth_project_0", ",", "depth_project_1", ",", "depth_project_2", ",", "depth_project_3", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_calculator": [[550, 588], ["depth.get_shape().as_list", "numpy.asarray", "numpy.reshape", "numpy.tile", "tensorflow.constant", "tensorflow.constant", "numpy.asarray", "numpy.reshape", "numpy.tile", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d", "tensorflow.concat", "tensorflow.concat", "tensorflow.cross", "tensorflow.cross", "range", "range", "tensorflow.norm", "tensorflow.norm", "depth.get_shape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_normal_calculator", "(", "depth", ")", ":", "\n", "        ", "d_shape", "=", "depth", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "batch_sz", "=", "d_shape", "[", "0", "]", "\n", "img_h", "=", "d_shape", "[", "1", "]", "\n", "img_w", "=", "d_shape", "[", "2", "]", "\n", "\n", "w_array", "=", "np", ".", "asarray", "(", "range", "(", "consts", ".", "dim_w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "w_array", "=", "(", "w_array", "-", "(", "consts", ".", "dim_w", "/", "2", ")", "+", "0.5", ")", "*", "consts", ".", "voxel_size", "\n", "w_array", "=", "np", ".", "reshape", "(", "w_array", ",", "(", "1", ",", "1", ",", "-", "1", ",", "1", ")", ")", "# BHWC", "\n", "w_array", "=", "np", ".", "tile", "(", "w_array", ",", "(", "batch_sz", ",", "img_h", ",", "1", ",", "1", ")", ")", "\n", "w_map", "=", "tf", ".", "constant", "(", "w_array", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "h_array", "=", "np", ".", "asarray", "(", "range", "(", "consts", ".", "dim_h", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "h_array", "=", "(", "h_array", "-", "(", "consts", ".", "dim_h", "/", "2", ")", "+", "0.5", ")", "*", "consts", ".", "voxel_size", "\n", "h_array", "=", "np", ".", "reshape", "(", "h_array", ",", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "# BHWC", "\n", "h_array", "=", "np", ".", "tile", "(", "h_array", ",", "(", "batch_sz", ",", "1", ",", "img_w", ",", "1", ")", ")", "\n", "h_map", "=", "tf", ".", "constant", "(", "h_array", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# vmap = tf.concat([w_map, h_map, depth], axis=-1)", "\n", "\n", "sobel_x", "=", "tf", ".", "constant", "(", "[", "[", "-", "1", ",", "0", ",", "1", "]", ",", "[", "-", "2", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "0", ",", "1", "]", "]", ",", "tf", ".", "float32", ")", "\n", "sobel_x_filter", "=", "tf", ".", "reshape", "(", "sobel_x", ",", "[", "3", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "sobel_y_filter", "=", "tf", ".", "transpose", "(", "sobel_x_filter", ",", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "w_map_dx", "=", "tf", ".", "nn", ".", "conv2d", "(", "w_map", ",", "sobel_x_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "h_map_dx", "=", "tf", ".", "nn", ".", "conv2d", "(", "h_map", ",", "sobel_x_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "depth_dx", "=", "tf", ".", "nn", ".", "conv2d", "(", "depth", ",", "sobel_x_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "dx", "=", "tf", ".", "concat", "(", "[", "w_map_dx", ",", "h_map_dx", ",", "depth_dx", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "w_map_dy", "=", "tf", ".", "nn", ".", "conv2d", "(", "w_map", ",", "sobel_y_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "h_map_dy", "=", "tf", ".", "nn", ".", "conv2d", "(", "h_map", ",", "sobel_y_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "depth_dy", "=", "tf", ".", "nn", ".", "conv2d", "(", "depth", ",", "sobel_y_filter", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "dy", "=", "tf", ".", "concat", "(", "[", "w_map_dy", ",", "h_map_dy", ",", "depth_dy", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "normal", "=", "tf", ".", "cross", "(", "dy", ",", "dx", ")", "\n", "normal", "=", "normal", "/", "tf", ".", "norm", "(", "normal", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_refiner": [[589, 651], ["tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.concat", "tensorflow.concat", "print_fn", "print_fn", "print_fn", "print_fn", "enumerate", "w_e.append", "c_e.append", "w_d.append", "c_d.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.conv2d", "tensorflow.conv2d", "print_fn", "layers.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.conv2d", "tensorflow.conv2d", "print_fn", "layers.append", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers[].get_shape().as_list", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.concat", "tensorflow.concat", "tensorflow.conv2d", "tensorflow.conv2d", "print_fn", "layers.append", "tensorflow.conv2d.get_shape().as_list", "tensorflow.conv2d.get_shape().as_list", "tensorflow.conv2d.get_shape().as_list", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "len", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "len", "layers[].get_shape", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "tensorflow.contrib.layers.python.layers.initializers.xavier_initializer", "len", "tensorflow.conv2d.get_shape", "tensorflow.conv2d.get_shape", "tensorflow.conv2d.get_shape", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_normal_refiner", "(", "normal_0", ",", "rgb", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "conc_d", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "normal_0", ",", "(", "consts", ".", "dim_h", "*", "2", ",", "consts", ".", "dim_w", "*", "2", ")", ")", "\n", "conc", "=", "tf", ".", "concat", "(", "[", "conc_d", ",", "rgb", "]", ",", "axis", "=", "-", "1", ")", "\n", "w_e", "=", "[", "consts", ".", "dim_w", "//", "2", "]", "\n", "c_e", "=", "[", "16", "]", "\n", "bottle_neck_w", "=", "4", "\n", "\n", "while", "w_e", "[", "-", "1", "]", ">", "bottle_neck_w", ":", "\n", "            ", "w_e", ".", "append", "(", "w_e", "[", "-", "1", "]", "//", "2", ")", "\n", "c_e", ".", "append", "(", "c_e", "[", "-", "1", "]", "*", "2", ")", "\n", "", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "", "print_fn", "(", "'-- Normal refiner 0 encoder layers\\' width'", ",", "w_e", ")", "\n", "print_fn", "(", "'-- Normal refiner 0 encoder layers\\' channel'", ",", "c_e", ")", "\n", "layers", "=", "[", "conc", "]", "\n", "for", "c", "in", "c_e", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'nml_rf_e_%d'", "%", "(", "len", "(", "layers", ")", ")", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "c", ",", "[", "4", ",", "4", "]", ",", "2", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "print_fn", "(", "'-- Normal refiner encoder 0 layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "w_d", "=", "[", "w_e", "[", "-", "1", "]", "*", "2", "]", "\n", "c_d", "=", "[", "c_e", "[", "-", "1", "]", "//", "2", "]", "\n", "while", "w_d", "[", "-", "1", "]", "<", "consts", ".", "dim_w", ":", "\n", "            ", "w_d", ".", "append", "(", "w_d", "[", "-", "1", "]", "*", "2", ")", "\n", "c_d", ".", "append", "(", "c_d", "[", "-", "1", "]", "//", "2", ")", "\n", "", "print_fn", "(", "'-- Normal refiner 0 decoder layers\\' width'", ",", "w_d", ")", "\n", "print_fn", "(", "'-- Normal refiner 0 decoderlayers\\' channel'", ",", "c_d", ")", "\n", "\n", "for", "ci", ",", "c", "in", "enumerate", "(", "c_d", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'nml_rf_d_%d'", "%", "(", "len", "(", "layers", ")", ")", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "layers", "[", "-", "1", "]", ",", "(", "nin_shape", "[", "1", "]", "*", "2", ",", "nin_shape", "[", "2", "]", "*", "2", ")", ")", "\n", "\n", "net", "=", "tf", ".", "concat", "(", "[", "net", ",", "layers", "[", "len", "(", "w_e", ")", "-", "ci", "-", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "# U-net structure", "\n", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "c", ",", "[", "4", ",", "4", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "print_fn", "(", "'-- Normal refiner decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'nml_rf_d_out'", ")", ":", "\n", "            ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "3", ",", "[", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "scope", "=", "'conv0'", ")", "# output to (-1, 1)", "\n", "net", "=", "net", "+", "conc_d", "\n", "print_fn", "(", "'-- Normal refiner 0 decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_refiner2": [[652, 730], ["tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "enumerate", "tensorflow.name_scope", "tensorflow.name_scope", "TrainerNormal.Trainer._build_normal_refiner2.build_u_net"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_normal_refiner2", "(", "normal_1", ",", "normal_2", ",", "normal_3", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "def", "build_u_net", "(", "normal", ",", "reuse", ",", "print_fn", "=", "None", ")", ":", "\n", "            ", "conc", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "normal", ",", "(", "consts", ".", "dim_h", "*", "2", ",", "consts", ".", "dim_w", "*", "2", ")", ")", "\n", "w_e", "=", "[", "consts", ".", "dim_w", "//", "2", "]", "\n", "c_e", "=", "[", "16", "]", "\n", "bottle_neck_w", "=", "4", "\n", "\n", "while", "w_e", "[", "-", "1", "]", ">", "bottle_neck_w", ":", "\n", "                ", "w_e", ".", "append", "(", "w_e", "[", "-", "1", "]", "//", "2", ")", "\n", "c_e", ".", "append", "(", "c_e", "[", "-", "1", "]", "*", "2", ")", "\n", "", "if", "print_fn", "is", "None", ":", "\n", "                ", "print_fn", "=", "print", "\n", "", "if", "not", "reuse", ":", "\n", "                ", "print_fn", "(", "'-- Normal refiner 1 encoder layers\\' width'", ",", "w_e", ")", "\n", "print_fn", "(", "'-- Normal refiner 1 encoder layers\\' channel'", ",", "c_e", ")", "\n", "", "layers", "=", "[", "conc", "]", "\n", "for", "c", "in", "c_e", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'nml_rf2_e_%d'", "%", "(", "len", "(", "layers", ")", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                    ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "c", ",", "[", "4", ",", "4", "]", ",", "2", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "if", "not", "reuse", ":", "\n", "                        ", "print_fn", "(", "'-- Normal refiner 1 encoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "\n", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "w_d", "=", "[", "w_e", "[", "-", "1", "]", "*", "2", "]", "\n", "c_d", "=", "[", "c_e", "[", "-", "1", "]", "//", "2", "]", "\n", "while", "w_d", "[", "-", "1", "]", "<", "consts", ".", "dim_w", ":", "\n", "                ", "w_d", ".", "append", "(", "w_d", "[", "-", "1", "]", "*", "2", ")", "\n", "c_d", ".", "append", "(", "c_d", "[", "-", "1", "]", "//", "2", ")", "\n", "", "if", "not", "reuse", ":", "\n", "                ", "print_fn", "(", "'-- Normal refiner 1 decoder layers\\' width'", ",", "w_d", ")", "\n", "print_fn", "(", "'-- Normal refiner 1 decoderlayers\\' channel'", ",", "c_d", ")", "\n", "\n", "", "for", "ci", ",", "c", "in", "enumerate", "(", "c_d", ")", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'nml_rf2_d_%d'", "%", "(", "len", "(", "layers", ")", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                    ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "layers", "[", "-", "1", "]", ",", "(", "nin_shape", "[", "1", "]", "*", "2", ",", "nin_shape", "[", "2", "]", "*", "2", ")", ")", "\n", "\n", "net", "=", "tf", ".", "concat", "(", "[", "net", ",", "layers", "[", "len", "(", "w_e", ")", "-", "ci", "-", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "# U-net structure", "\n", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "c", ",", "[", "4", ",", "4", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "if", "not", "reuse", ":", "\n", "                        ", "print_fn", "(", "'-- Normal refiner 1 decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "\n", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'nml_rf2_d_out'", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "3", ",", "[", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "scope", "=", "'conv0'", ")", "# output to (-1, 1)", "\n", "net", "=", "net", "+", "conc", "\n", "if", "not", "reuse", ":", "\n", "                    ", "print_fn", "(", "'-- Normal refiner 1 decoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "\n", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "net", ")", "\n", "\n", "", "return", "layers", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'normal_1_R'", ")", ":", "\n", "            ", "normal_1_r", "=", "build_u_net", "(", "normal_1", ",", "reuse", "=", "False", ",", "print_fn", "=", "print_fn", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'normal_2_R'", ")", ":", "\n", "            ", "normal_2_r", "=", "build_u_net", "(", "normal_2", ",", "reuse", "=", "True", ",", "print_fn", "=", "print_fn", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'normal_3_R'", ")", ":", "\n", "            ", "normal_3_r", "=", "build_u_net", "(", "normal_3", ",", "reuse", "=", "True", ",", "print_fn", "=", "print_fn", ")", "\n", "", "return", "normal_1_r", ",", "normal_2_r", ",", "normal_3_r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_normal_discriminator": [[731, 809], ["tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.name_scope", "tensorflow.name_scope", "TrainerNormal.Trainer._build_normal_discriminator.build_D"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_normal_discriminator", "(", "d_pred", ",", "d_gt", ",", "mask_fv_gt", ",", "mask_sv_gt", ",", "in_img", ",", "print_fn", "=", "None", ")", ":", "\n", "        ", "if", "print_fn", "is", "None", ":", "\n", "            ", "print_fn", "=", "print", "\n", "\n", "", "m_conc", "=", "tf", ".", "concat", "(", "[", "mask_fv_gt", ",", "mask_fv_gt", ",", "mask_fv_gt", ",", "\n", "mask_sv_gt", ",", "mask_sv_gt", ",", "mask_sv_gt", ",", "\n", "mask_fv_gt", ",", "mask_fv_gt", ",", "mask_fv_gt", ",", "\n", "mask_sv_gt", ",", "mask_sv_gt", ",", "mask_sv_gt", "]", ",", "axis", "=", "-", "1", ")", "\n", "d_pred_m", "=", "m_conc", "*", "d_pred", "# mask out background", "\n", "d_gt_m", "=", "m_conc", "*", "d_gt", "# mask out background", "\n", "conc_pred", "=", "tf", ".", "concat", "(", "[", "d_pred_m", ",", "in_img", "]", ",", "axis", "=", "-", "1", ")", "\n", "conc_gt", "=", "tf", ".", "concat", "(", "[", "d_gt_m", ",", "in_img", "]", ",", "axis", "=", "-", "1", ")", "\n", "conc_pred", "=", "conc_pred", "\n", "conc_gt", "=", "conc_gt", "\n", "\n", "def", "build_D", "(", "conc", ",", "reuse", "=", "False", ")", ":", "\n", "            ", "batch_sz", "=", "conc", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "\n", "layer_w", "=", "conc", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "w_e", "=", "[", "layer_w", "//", "2", "]", "\n", "c_e", "=", "[", "16", "]", "\n", "while", "w_e", "[", "-", "1", "]", ">", "16", ":", "\n", "                ", "w_e", ".", "append", "(", "w_e", "[", "-", "1", "]", "//", "2", ")", "\n", "c_e", ".", "append", "(", "min", "(", "c_e", "[", "-", "1", "]", "*", "2", ",", "64", ")", ")", "\n", "", "if", "not", "reuse", ":", "\n", "                ", "print_fn", "(", "'-- Normal discriminator encoder layers\\' width'", ",", "w_e", ")", "\n", "print_fn", "(", "'-- Normal discriminator encoder layers\\' channel'", ",", "c_e", ")", "\n", "\n", "", "layers", "=", "[", "conc", "]", "\n", "for", "c", "in", "c_e", ":", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'nml_dis_e_%d'", "%", "(", "len", "(", "layers", ")", ")", ",", "reuse", "=", "reuse", ")", ":", "\n", "                    ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "c", ",", "[", "3", ",", "3", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "leaky_relu", ",", "scope", "=", "'conv0'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "[", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "scope", "=", "'maxp0'", ")", "\n", "if", "not", "reuse", ":", "\n", "                        ", "print_fn", "(", "'-- Normal discriminator encoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "net", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'nml_dis_out'", ",", "reuse", "=", "reuse", ")", ":", "\n", "                ", "nin_shape", "=", "layers", "[", "-", "1", "]", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "layers", "[", "-", "1", "]", ",", "1", ",", "[", "1", ",", "1", "]", ",", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "rate", "=", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ",", "scope", "=", "'conv0'", ")", "\n", "if", "not", "reuse", ":", "\n", "                    ", "print_fn", "(", "'-- Normal discriminator encoder layer %d:'", "%", "len", "(", "layers", ")", ",", "nin_shape", ",", "'-->'", ",", "net", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "net", ")", "\n", "", "return", "layers", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'Dis_real'", ")", ":", "\n", "            ", "d_out_gt", "=", "build_D", "(", "tf", ".", "concat", "(", "[", "conc_gt", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "conc_gt", "[", ":", ",", ":", ",", ":", ",", "12", ":", "15", "]", "]", ",", "axis", "=", "-", "1", ")", ",", "reuse", "=", "False", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'Dis_fake'", ")", ":", "\n", "            ", "d_out_pred", "=", "build_D", "(", "tf", ".", "concat", "(", "[", "conc_pred", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "conc_pred", "[", ":", ",", ":", ",", ":", ",", "12", ":", "15", "]", "]", ",", "axis", "=", "-", "1", ")", ",", "reuse", "=", "True", ")", "\n", "\n", "# with tf.name_scope('Dis_real_0'):", "\n", "#     d_out_gt0 = build_D(conc_gt[:, :, :, 0:3], reuse=False)", "\n", "# with tf.name_scope('Dis_real_1'):", "\n", "#     d_out_gt1 = build_D(conc_gt[:, :, :, 3:6], reuse=True)", "\n", "# with tf.name_scope('Dis_real_2'):", "\n", "#     d_out_gt2 = build_D(conc_gt[:, :, :, 6:9], reuse=True)", "\n", "# with tf.name_scope('Dis_real_3'):", "\n", "#     d_out_gt3 = build_D(conc_gt[:, :, :, 9:12], reuse=True)", "\n", "# with tf.name_scope('Dis_fake_0'):", "\n", "#     d_out_pred0 = build_D(conc_pred[:, :, :, 0:3], reuse=True)", "\n", "# with tf.name_scope('Dis_fake_1'):", "\n", "#     d_out_pred1 = build_D(conc_pred[:, :, :, 3:6], reuse=True)", "\n", "# with tf.name_scope('Dis_fake_2'):", "\n", "#     d_out_pred2 = build_D(conc_pred[:, :, :, 6:9], reuse=True)", "\n", "# with tf.name_scope('Dis_fake_3'):", "\n", "#     d_out_pred3 = build_D(conc_pred[:, :, :, 9:12], reuse=True)", "\n", "\n", "# d_out_gt = tf.concat([d_out_gt0[-1], d_out_gt1[-1], d_out_gt2[-1], d_out_gt3[-1]], axis=-1)", "\n", "# d_out_pred = tf.concat([d_out_pred0[-1], d_out_pred1[-1], d_out_pred2[-1], d_out_pred3[-1]], axis=-1)", "\n", "", "return", "d_out_gt", "[", "-", "1", "]", ",", "d_out_pred", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_loss": [[810, 874], ["log", "mask_fv_gt.get_shape().as_list", "tensorflow.name_scope", "tensorflow.name_scope", "TrainerNormal.Trainer._build_sil_projector", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "tensorflow.image.resize_bilinear", "range", "mask_fv_gt.get_shape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.norm", "tensorflow.norm", "tensorflow.norm", "tensorflow.norm", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.square", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_sil_projector"], ["", "@", "staticmethod", "\n", "def", "_build_loss", "(", "vol_pred", ",", "vol_gt", ",", "\n", "mask_fv_gt", ",", "mask_sv_gt", ",", "\n", "normal_hd_gt", ",", "normal_hd_pred", ",", "\n", "dis_real", ",", "dis_fake", ",", "\n", "lamb_sil", "=", "0.1", ",", "lamb_nml_rf", "=", "0.01", ",", "lamb_dis", "=", "0.001", ",", "\n", "w", "=", "0.7", ")", ":", "\n", "        ", "log", "(", "'Constructing loss function...'", ")", "\n", "\n", "s", "=", "1000", "# to scale the loss", "\n", "shp", "=", "mask_fv_gt", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "with", "tf", ".", "name_scope", "(", "'loss'", ")", ":", "\n", "# volume loss", "\n", "            ", "vol_loss", "=", "s", "*", "tf", ".", "reduce_mean", "(", "-", "w", "*", "tf", ".", "reduce_mean", "(", "vol_gt", "*", "tf", ".", "log", "(", "vol_pred", "+", "1e-8", ")", ")", "\n", "-", "(", "1", "-", "w", ")", "*", "tf", ".", "reduce_mean", "(", "(", "1", "-", "vol_gt", ")", "*", "tf", ".", "log", "(", "1", "-", "vol_pred", "+", "1e-8", ")", ")", ")", "\n", "# silhouette loss", "\n", "mask_fv_pred", ",", "mask_sv_pred", "=", "Trainer", ".", "_build_sil_projector", "(", "vol_pred", ")", "\n", "#mask_fv_gt_p, mask_sv_gt_p = Trainer._build_sil_projector(vol_gt)", "\n", "mask_fv_gt_rs", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "mask_fv_gt", ",", "(", "shp", "[", "1", "]", "//", "2", ",", "shp", "[", "2", "]", "//", "2", ")", ")", "\n", "mask_sv_gt_rs", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "mask_sv_gt", ",", "(", "shp", "[", "1", "]", "//", "2", ",", "shp", "[", "2", "]", "//", "2", ")", ")", "\n", "sil_loss_fv", "=", "s", "*", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "reduce_mean", "(", "mask_fv_gt_rs", "*", "tf", ".", "log", "(", "mask_fv_pred", "+", "1e-8", ")", ")", "\n", "-", "tf", ".", "reduce_mean", "(", "(", "1", "-", "mask_fv_gt_rs", ")", "*", "tf", ".", "log", "(", "1", "-", "mask_fv_pred", "+", "1e-8", ")", ")", ")", "\n", "sil_loss_sv", "=", "s", "*", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "reduce_mean", "(", "mask_sv_gt_rs", "*", "tf", ".", "log", "(", "mask_sv_pred", "+", "1e-8", ")", ")", "\n", "-", "tf", ".", "reduce_mean", "(", "(", "1", "-", "mask_sv_gt_rs", ")", "*", "tf", ".", "log", "(", "1", "-", "mask_sv_pred", "+", "1e-8", ")", ")", ")", "\n", "sil_loss", "=", "sil_loss_fv", "+", "sil_loss_sv", "\n", "\n", "# normal refinement loss", "\n", "normal_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "normal_hd_gt_", "=", "normal_hd_gt", "[", ":", ",", ":", ",", ":", ",", "(", "i", "*", "3", ")", ":", "(", "i", "*", "3", "+", "3", ")", "]", "\n", "normal_hd_pred_", "=", "normal_hd_pred", "[", ":", ",", ":", ",", ":", ",", "(", "i", "*", "3", ")", ":", "(", "i", "*", "3", "+", "3", ")", "]", "\n", "normal_cos", "=", "1", "-", "tf", ".", "reduce_sum", "(", "normal_hd_gt_", "*", "normal_hd_pred_", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "/", "(", "tf", ".", "norm", "(", "normal_hd_gt_", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "*", "tf", ".", "norm", "(", "normal_hd_pred_", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "# mask out invalid areas", "\n", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "normal_loss", "+=", "s", "*", "tf", ".", "reduce_mean", "(", "mask_fv_gt", "*", "normal_cos", ")", "\n", "normal_loss", "+=", "s", "*", "0.001", "*", "tf", ".", "reduce_mean", "(", "mask_fv_gt", "*", "tf", ".", "square", "(", "normal_hd_pred_", "-", "normal_hd_gt_", ")", ")", "\n", "", "else", ":", "\n", "                    ", "normal_loss", "+=", "s", "*", "tf", ".", "reduce_mean", "(", "mask_sv_gt", "*", "normal_cos", ")", "\n", "normal_loss", "+=", "s", "*", "0.001", "*", "tf", ".", "reduce_mean", "(", "mask_sv_gt", "*", "tf", ".", "square", "(", "normal_hd_pred_", "-", "normal_hd_gt_", ")", ")", "\n", "\n", "# normal discriminator loss", "\n", "", "", "dis_d_real_loss", "=", "s", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "dis_fake", ")", ")", "\n", "dis_d_fake_loss", "=", "s", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "1", "-", "dis_real", ")", ")", "\n", "dis_d_loss", "=", "dis_d_real_loss", "+", "dis_d_fake_loss", "\n", "dis_g_loss", "=", "s", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "1", "-", "dis_fake", ")", ")", "\n", "\n", "# total loss", "\n", "recon_loss", "=", "vol_loss", "+", "lamb_sil", "*", "sil_loss", "# reconstruction loss", "\n", "nr_loss", "=", "lamb_nml_rf", "*", "normal_loss", "+", "lamb_dis", "*", "dis_g_loss", "# normal refinement loss", "\n", "total_loss", "=", "recon_loss", "+", "nr_loss", "# total loss", "\n", "\n", "loss_collection", "=", "{", "}", "\n", "loss_collection", "[", "'vol_loss'", "]", "=", "vol_loss", "\n", "loss_collection", "[", "'sil_loss'", "]", "=", "sil_loss", "\n", "loss_collection", "[", "'normal_loss'", "]", "=", "normal_loss", "\n", "loss_collection", "[", "'dis_d_real_loss'", "]", "=", "dis_d_real_loss", "\n", "loss_collection", "[", "'dis_d_fake_loss'", "]", "=", "dis_d_fake_loss", "\n", "loss_collection", "[", "'dis_d_loss'", "]", "=", "dis_d_loss", "\n", "loss_collection", "[", "'dis_g_loss'", "]", "=", "dis_g_loss", "\n", "loss_collection", "[", "'recon_loss'", "]", "=", "recon_loss", "\n", "loss_collection", "[", "'nr_loss'", "]", "=", "nr_loss", "\n", "loss_collection", "[", "'total_loss'", "]", "=", "total_loss", "\n", "", "return", "loss_collection", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._build_optimizer": [[875, 901], ["log", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "tensorflow.trainable_variables", "var.name.startswith", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "var.name.startswith", "var.name.startswith", "var.name.startswith", "var.name.startswith", "var.name.startswith", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_build_optimizer", "(", "lr", ",", "recon_loss", ",", "nr_loss", ",", "total_loss", ",", "dis_loss", ")", ":", "\n", "        ", "log", "(", "'Constructing optimizer...'", ")", "\n", "\n", "recon_var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "not", "var", ".", "name", ".", "startswith", "(", "'nml_rf'", ")", "and", "not", "var", ".", "name", ".", "startswith", "(", "'nml_dis'", ")", "]", "\n", "nr_var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "var", ".", "name", ".", "startswith", "(", "'nml_rf'", ")", "and", "not", "var", ".", "name", ".", "startswith", "(", "'nml_dis'", ")", "]", "\n", "all_var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "not", "var", ".", "name", ".", "startswith", "(", "'nml_dis'", ")", "]", "\n", "dis_var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "if", "var", ".", "name", ".", "startswith", "(", "'nml_dis'", ")", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'recon_optimizer'", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "recon_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", ".", "minimize", "(", "recon_loss", ",", "var_list", "=", "recon_var_list", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'nml_rf_optimizer'", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "dr_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", ".", "minimize", "(", "nr_loss", ",", "var_list", "=", "nr_var_list", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'all_optimizer'", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "all_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", ".", "minimize", "(", "total_loss", ",", "var_list", "=", "all_var_list", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'dis_optimizer'", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "dis_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "lr", ")", ".", "minimize", "(", "dis_loss", ",", "var_list", "=", "dis_var_list", ")", "\n", "", "", "return", "recon_opt", ",", "dr_opt", ",", "all_opt", ",", "dis_opt", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_summary": [[902, 912], ["tensorflow.summary.merge", "tensorflow.summary.merge", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "loss_scalar_s.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_setup_summary", "(", "sess", ",", "graph_dir", ",", "loss_collection", ")", ":", "\n", "        ", "loss_scalar_s", "=", "[", "]", "\n", "for", "lk", "in", "loss_collection", ":", "\n", "            ", "loss_s", "=", "tf", ".", "summary", ".", "scalar", "(", "'loss/%s'", "%", "(", "lk", ")", ",", "loss_collection", "[", "lk", "]", ")", "\n", "loss_scalar_s", ".", "append", "(", "loss_s", ")", "\n", "\n", "", "merged_scalar_loss", "=", "tf", ".", "summary", ".", "merge", "(", "[", "loss_s", "for", "loss_s", "in", "loss_scalar_s", "]", ")", "\n", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "graph_dir", ",", "sess", ".", "graph", ")", "\n", "return", "merged_scalar_loss", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._setup_saver": [[913, 926], ["log", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.get_checkpoint_state", "tensorflow.train.get_checkpoint_state", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "CommonUtil.logger.write", "CommonUtil.logger.write", "tensorflow.trainable_variables", "tensorflow.trainable_variables"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "_setup_saver", "(", "self", ",", "pre_model_dir", ")", ":", "\n", "# load pre-trained model to fine-tune or resume training", "\n", "        ", "log", "(", "'Constructing saver...'", ")", "\n", "if", "pre_model_dir", "is", "not", "None", ":", "\n", "            ", "ckpt_prev", "=", "tf", ".", "train", ".", "get_checkpoint_state", "(", "pre_model_dir", ")", "\n", "if", "ckpt_prev", ":", "\n", "                ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "ckpt_prev", ".", "model_checkpoint_path", ")", "\n", "logger", ".", "write", "(", "'Loaded model %s'", "%", "pre_model_dir", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "write", "(", "'Unable to load the pretrained model. '", ")", "\n", "", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1000", ")", "\n", "return", "saver", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_tuple": [[927, 935], ["range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.cvtColor", "numpy.uint8", "numpy.uint8", "numpy.uint16", "numpy.uint8"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_save_tuple", "(", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ",", "dir", ",", "idx", ")", ":", "\n", "        ", "batch_sz", "=", "conc_imgs", ".", "shape", "[", "0", "]", "\n", "for", "bi", "in", "range", "(", "batch_sz", ")", ":", "\n", "            ", "cv", ".", "imwrite", "(", "'%s/color_%d.png'", "%", "(", "dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "cv", ".", "cvtColor", "(", "np", ".", "uint8", "(", "conc_imgs", "[", "bi", ",", ":", ",", ":", ",", "0", ":", "3", "]", "*", "255", ")", ",", "cv", ".", "COLOR_BGRA2RGB", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/vmap_%d.png'", "%", "(", "dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint8", "(", "conc_imgs", "[", "bi", ",", ":", ",", ":", ",", "3", ":", "6", "]", "*", "255", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/mask_%d.png'", "%", "(", "dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint8", "(", "conc_imgs", "[", "bi", ",", ":", ",", ":", ",", "6", "]", "*", "255", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_%d.png'", "%", "(", "dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "conc_imgs", "[", "bi", ",", ":", ",", ":", ",", "10", ":", "13", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_results_raw_training": [[936, 968], ["range", "range", "scipy.savemat", "range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "numpy.sqrt", "numpy.expand_dims", "numpy.sqrt", "numpy.expand_dims", "numpy.uint16", "numpy.uint16", "numpy.uint16", "numpy.uint16", "numpy.uint16", "numpy.uint16", "numpy.uint16", "numpy.uint16"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_save_results_raw_training", "(", "mesh_volume", ",", "refined_normal", ",", "orig_normal", ",", "test_dir", ",", "idx", ")", ":", "\n", "        ", "batch_sz", "=", "mesh_volume", ".", "shape", "[", "0", "]", "\n", "for", "bi", "in", "range", "(", "batch_sz", ")", ":", "\n", "            ", "sio", ".", "savemat", "(", "'%s/mesh_volume_%d.obj'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "\n", "{", "'mesh_volume'", ":", "mesh_volume", "[", "bi", ",", ":", ",", ":", ",", ":", ",", "0", "]", "}", ",", "do_compression", "=", "False", ")", "\n", "\n", "", "for", "bi", "in", "range", "(", "batch_sz", ")", ":", "\n", "            ", "for", "vi", "in", "range", "(", "4", ")", ":", "\n", "                ", "refined_normal_", "=", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "\n", "refined_normal_l", "=", "np", ".", "sqrt", "(", "refined_normal_", "[", ":", ",", ":", ",", "0", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "refined_normal_", "[", ":", ",", ":", ",", "1", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "1", "]", "+", "\n", "refined_normal_", "[", ":", ",", ":", ",", "2", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "refined_normal_", "/=", "np", ".", "expand_dims", "(", "refined_normal_l", ",", "axis", "=", "-", "1", ")", "\n", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "=", "refined_normal_", "\n", "\n", "original_normal_", "=", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "\n", "original_normal_l", "=", "np", ".", "sqrt", "(", "original_normal_", "[", ":", ",", ":", ",", "0", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "original_normal_", "[", ":", ",", ":", ",", "1", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "1", "]", "+", "\n", "original_normal_", "[", ":", ",", ":", ",", "2", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "original_normal_", "/=", "np", ".", "expand_dims", "(", "original_normal_l", ",", "axis", "=", "-", "1", ")", "\n", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "=", "original_normal_", "\n", "\n", "", "cv", ".", "imwrite", "(", "'%s/normal_0_%d.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "0", ":", "3", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_1_%d.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "3", ":", "6", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_2_%d.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "6", ":", "9", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_3_%d.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "9", ":", "12", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "\n", "cv", ".", "imwrite", "(", "'%s/normal_0_%d_.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "0", ":", "3", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_1_%d_.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "3", ":", "6", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_2_%d_.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "6", ":", "9", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal_3_%d_.png'", "%", "(", "test_dir", ",", "batch_sz", "*", "idx", "+", "bi", ")", ",", "np", ".", "uint16", "(", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "9", ":", "12", "]", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.TrainerNormal.Trainer._save_results_raw_testing": [[969, 994], ["range", "range", "scipy.savemat", "range", "numpy.sqrt", "numpy.expand_dims", "numpy.sqrt", "numpy.expand_dims", "cv2.imwrite", "cv2.imwrite", "numpy.uint16", "numpy.uint16"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_save_results_raw_testing", "(", "mesh_volume", ",", "refined_normal", ",", "orig_normal", ",", "test_dir", ",", "prefix", ")", ":", "\n", "        ", "batch_sz", "=", "mesh_volume", ".", "shape", "[", "0", "]", "\n", "assert", "batch_sz", "==", "1", "# only use for testing", "\n", "# mesh_volume = np.squeeze(mesh_volume)", "\n", "for", "bi", "in", "range", "(", "batch_sz", ")", ":", "\n", "            ", "sio", ".", "savemat", "(", "'%s/%s_volume_out.mat'", "%", "(", "test_dir", ",", "prefix", ")", ",", "\n", "{", "'mesh_volume'", ":", "mesh_volume", "[", "bi", ",", ":", ",", ":", ",", ":", ",", "0", "]", "}", ",", "do_compression", "=", "False", ")", "\n", "\n", "", "for", "bi", "in", "range", "(", "batch_sz", ")", ":", "\n", "            ", "for", "vi", "in", "range", "(", "4", ")", ":", "\n", "                ", "refined_normal_", "=", "refined_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "\n", "refined_normal_l", "=", "np", ".", "sqrt", "(", "refined_normal_", "[", ":", ",", ":", ",", "0", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "refined_normal_", "[", ":", ",", ":", ",", "1", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "1", "]", "+", "\n", "refined_normal_", "[", ":", ",", ":", ",", "2", "]", "*", "refined_normal_", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "refined_normal_", "/=", "np", ".", "expand_dims", "(", "refined_normal_l", ",", "axis", "=", "-", "1", ")", "\n", "\n", "original_normal_", "=", "orig_normal", "[", "bi", ",", ":", ",", ":", ",", "(", "3", "*", "vi", ")", ":", "(", "3", "*", "vi", "+", "3", ")", "]", "\n", "original_normal_l", "=", "np", ".", "sqrt", "(", "original_normal_", "[", ":", ",", ":", ",", "0", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "0", "]", "+", "\n", "original_normal_", "[", ":", ",", ":", ",", "1", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "1", "]", "+", "\n", "original_normal_", "[", ":", ",", ":", ",", "2", "]", "*", "original_normal_", "[", ":", ",", ":", ",", "2", "]", ")", "\n", "original_normal_", "/=", "np", ".", "expand_dims", "(", "original_normal_l", ",", "axis", "=", "-", "1", ")", "\n", "\n", "cv", ".", "imwrite", "(", "'%s/%s_normal_%d.png'", "%", "(", "test_dir", ",", "prefix", ",", "vi", ")", ",", "np", ".", "uint16", "(", "refined_normal_", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/%s_normal_orig_%d.png'", "%", "(", "test_dir", ",", "prefix", ",", "vi", ")", ",", "np", ".", "uint16", "(", "original_normal_", "*", "32767.5", "+", "32767.5", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.__init__": [[23, 58], ["threading.Thread.__init__", "len", "numpy.copy", "DataLoaderNormal.DataLoader.reshuffle_indices", "queue.Queue", "int", "print", "numpy.max", "numpy.random.randint", "numpy.random.randint", "len", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.SmplVtx.__init__", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.reshuffle_indices"], ["    ", "def", "__init__", "(", "self", ",", "\n", "batch_size", ",", "\n", "data_dir", ",", "\n", "data_indices", ",", "\n", "vol_res_x_w", "=", "128", ",", "vol_res_x_h", "=", "192", ",", "\n", "vol_res_y_w", "=", "128", ",", "vol_res_y_h", "=", "192", ",", "\n", "augmentation", "=", "True", ")", ":", "\n", "        ", "super", "(", "DataLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "vol_res_x_h", "!=", "192", "or", "vol_res_x_w", "!=", "128", "or", "vol_res_y_h", "!=", "192", "or", "vol_res_y_w", "!=", "128", ":", "\n", "            ", "print", "(", "'Unsupported resolution!'", ")", "\n", "raise", "ValueError", "\n", "\n", "", "self", ".", "batch_index", "=", "0", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "vox_res_x", "=", "(", "vol_res_x_w", ",", "vol_res_x_h", ",", "vol_res_x_w", ")", "\n", "self", ".", "vox_res_y", "=", "(", "vol_res_y_w", ",", "vol_res_y_h", ",", "vol_res_y_w", ")", "\n", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "data_num", "=", "len", "(", "data_indices", ")", "\n", "self", ".", "data_indices", "=", "np", ".", "copy", "(", "data_indices", ")", "\n", "self", ".", "augmentation", "=", "augmentation", "\n", "self", ".", "reshuffle_indices", "(", ")", "\n", "\n", "if", "augmentation", ":", "\n", "            ", "max_idx", "=", "np", ".", "max", "(", "self", ".", "data_indices", ")", "\n", "self", ".", "alpha", "=", "np", ".", "random", ".", "rand", "(", "max_idx", "+", "1", ")", "*", "0.3", "+", "0.85", "# random from [0.9, 1.1]", "\n", "self", ".", "beta", "=", "np", ".", "random", ".", "rand", "(", "max_idx", "+", "1", ")", "*", "0.3", "-", "0.15", "# random from [-0.05, 0.05]", "\n", "self", ".", "crop_size", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "20", ",", "(", "max_idx", "+", "1", ",", "4", ")", ")", "\n", "self", ".", "movement", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "11", ",", "(", "max_idx", "+", "1", ",", "3", ")", ")", "-", "5", "\n", "\n", "", "self", ".", "queue", "=", "queue", ".", "Queue", "(", "8", ")", "\n", "self", ".", "stop_queue", "=", "False", "\n", "\n", "self", ".", "total_batch_num", "=", "int", "(", "len", "(", "self", ".", "data_indices", ")", "//", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.reshuffle_indices": [[59, 68], ["numpy.random.shuffle", "numpy.max", "numpy.random.randint", "numpy.random.randint", "numpy.random.rand", "numpy.random.rand"], "methods", ["None"], ["", "def", "reshuffle_indices", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch_index", "=", "0", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "data_indices", ")", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "max_idx", "=", "np", ".", "max", "(", "self", ".", "data_indices", ")", "\n", "self", ".", "alpha", "=", "np", ".", "random", ".", "rand", "(", "max_idx", "+", "1", ")", "*", "0.3", "+", "0.85", "# random from [0.9, 1.1]", "\n", "self", ".", "beta", "=", "np", ".", "random", ".", "rand", "(", "max_idx", "+", "1", ")", "*", "0.3", "-", "0.15", "# random from [-0.05, 0.05]", "\n", "self", ".", "crop_size", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "20", ",", "(", "max_idx", "+", "1", ",", "4", ")", ")", "\n", "self", ".", "movement", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "11", ",", "(", "max_idx", "+", "1", ",", "3", ")", ")", "-", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_volume": [[69, 94], ["DataUtil.VoxelizerUtil.rotate_volume", "DataUtil.VoxelizerUtil.rotate_volume", "numpy.transpose", "numpy.transpose", "numpy.flip", "numpy.flip", "DataUtil.VoxelizerUtil.load_volume_from_mat", "DataUtil.VoxelizerUtil.load_volume_from_mat"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.rotate_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.rotate_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.load_volume_from_mat", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.load_volume_from_mat"], ["", "", "def", "load_volume", "(", "self", ",", "idx", ")", ":", "\n", "        ", "volume_id", "=", "idx", "//", "4", "*", "4", "\n", "view_id", "=", "idx", "-", "volume_id", "\n", "if", "consts", ".", "fill", ":", "\n", "            ", "volume", "=", "load_volume_from_mat", "(", "'%s/voxel2/voxel_%08d.mat'", "%", "(", "self", ".", "data_dir", ",", "volume_id", ")", ")", "\n", "", "else", ":", "\n", "            ", "volume", "=", "load_volume_from_mat", "(", "'%s/voxel/voxel_%08d.mat'", "%", "(", "self", ".", "data_dir", ",", "volume_id", ")", ")", "\n", "\n", "", "mesh_volume", "=", "rotate_volume", "(", "volume", "[", "'mesh_volume'", "]", ",", "view_id", ")", "\n", "smpl_v_volume", "=", "rotate_volume", "(", "volume", "[", "'smpl_v_volume'", "]", ",", "view_id", ")", "\n", "\n", "# convert from WHD format to DHW format (as required by tensorflow)", "\n", "mesh_volume", "=", "np", ".", "transpose", "(", "mesh_volume", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "smpl_v_volume", "=", "np", ".", "transpose", "(", "smpl_v_volume", ",", "(", "2", ",", "1", ",", "0", ",", "3", ")", ")", "\n", "\n", "# flip upside down", "\n", "mesh_volume", "=", "np", ".", "flip", "(", "mesh_volume", ",", "axis", "=", "1", ")", "\n", "smpl_v_volume", "=", "np", ".", "flip", "(", "smpl_v_volume", ",", "axis", "=", "1", ")", "\n", "\n", "# if self.augmentation:", "\n", "#     movement = self.movement[idx, :]", "\n", "#     x_m, y_m, z_m = movement[0], movement[1], movement[2]", "\n", "#     smpl_v_volume = sii.shift(smpl_v_volume, (0, x_m, y_m, 0), cval=0)", "\n", "\n", "return", "smpl_v_volume", ",", "mesh_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img": [[95, 103], ["cv2.resize", "len", "numpy.expand_dims"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "resize_and_crop_img", "(", "img", ")", ":", "\n", "        ", "img", "=", "cv", ".", "resize", "(", "img", ",", "(", "2", "*", "consts", ".", "dim_h", ",", "2", "*", "consts", ".", "dim_h", ")", ")", "\n", "edg", "=", "(", "2", "*", "consts", ".", "dim_h", "-", "2", "*", "consts", ".", "dim_w", ")", "//", "2", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "", "img", "=", "img", "[", ":", ",", "edg", ":", "-", "edg", ",", ":", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_normal_maps": [[104, 150], ["cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "numpy.fliplr", "numpy.fliplr", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img"], ["", "def", "load_normal_maps", "(", "self", ",", "idx", ")", ":", "\n", "        ", "volume_id", "=", "idx", "//", "4", "*", "4", "\n", "view_id", "=", "idx", "-", "volume_id", "\n", "normal_0_id", "=", "volume_id", "+", "view_id", "\n", "normal_1_id", "=", "volume_id", "+", "(", "view_id", "+", "1", ")", "%", "4", "\n", "normal_2_id", "=", "volume_id", "+", "(", "view_id", "+", "2", ")", "%", "4", "\n", "normal_3_id", "=", "volume_id", "+", "(", "view_id", "+", "3", ")", "%", "4", "\n", "\n", "normal_0_frame", "=", "cv", ".", "imread", "(", "'%s/normal/normal_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "normal_0_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "normal_1_frame", "=", "cv", ".", "imread", "(", "'%s/normal/normal_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "normal_1_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "normal_2_frame", "=", "cv", ".", "imread", "(", "'%s/normal/normal_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "normal_2_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "normal_3_frame", "=", "cv", ".", "imread", "(", "'%s/normal/normal_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "normal_3_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "normal_0_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "normal_0_frame", ")", ")", "/", "32767.5", "-", "1.0", "\n", "normal_1_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "normal_1_frame", ")", ")", "/", "32767.5", "-", "1.0", "\n", "normal_2_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "normal_2_frame", ")", ")", "/", "32767.5", "-", "1.0", "\n", "normal_3_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "normal_3_frame", ")", ")", "/", "32767.5", "-", "1.0", "\n", "\n", "#TODO: for testing", "\n", "# following code pass test", "\n", "# res = self.sess.run(gt_n, feed_dict={self.X: test_smpl_v_volumes[0],", "\n", "#                                      self.Y: test_mesh_volumes[0],", "\n", "#                                      self.R: test_conc_imgs[0][:, :, :, :6]})", "\n", "# first_n = res[0, :, :, :]", "\n", "# first_l = first_n[:, :, 0]*first_n[:, :, 0] + first_n[:, :, 1]*first_n[:, :, 1] + first_n[:, :, 2]*first_n[:, :, 2]", "\n", "# first_n = first_n / np.sqrt(np.expand_dims(first_l, axis=-1))", "\n", "# first_n_ = test_conc_imgs[0][0, :, :, 10:13]", "\n", "# first_n_[:, :, 0] *= -1", "\n", "# first_n_[:, :, 2] *= -1", "\n", "# first_n_ = cv.resize(first_n_, (first_n.shape[1], first_n.shape[0]))", "\n", "# cv.imwrite('./first_n.png', np.uint16(first_n*32767.5+32767.5))", "\n", "# cv.imwrite('./first_n_.png', np.uint16(first_n_*32767.5+32767.5))", "\n", "#", "\n", "# pdb.set_trace()", "\n", "\n", "for", "n", "in", "[", "normal_0_frame", ",", "normal_1_frame", ",", "normal_2_frame", ",", "normal_3_frame", "]", ":", "\n", "# n[:, :, 0] *= -1.0", "\n", "            ", "n", "[", ":", ",", ":", ",", "2", "]", "*=", "-", "1.0", "\n", "\n", "", "for", "n", "in", "[", "normal_0_frame", ",", "normal_1_frame", "]", ":", "\n", "            ", "n", "[", ":", ",", ":", ",", "0", "]", "*=", "-", "1.0", "\n", "\n", "", "normal_2_frame", "=", "np", ".", "fliplr", "(", "normal_2_frame", ")", "\n", "normal_3_frame", "=", "np", ".", "fliplr", "(", "normal_3_frame", ")", "\n", "\n", "return", "normal_0_frame", ",", "normal_1_frame", ",", "normal_2_frame", ",", "normal_3_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_mask": [[151, 184], ["cv2.imread", "cv2.imread", "cv2.imread", "cv2.imread", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.fliplr", "numpy.fliplr", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img", "DataLoaderNormal.DataLoader.resize_and_crop_img"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img"], ["", "def", "load_mask", "(", "self", ",", "idx", ")", ":", "\n", "        ", "volume_id", "=", "idx", "//", "4", "*", "4", "\n", "view_id", "=", "idx", "-", "volume_id", "\n", "mask_0_id", "=", "volume_id", "+", "view_id", "\n", "mask_1_id", "=", "volume_id", "+", "(", "view_id", "+", "1", ")", "%", "4", "\n", "mask_2_id", "=", "volume_id", "+", "(", "view_id", "+", "2", ")", "%", "4", "\n", "mask_3_id", "=", "volume_id", "+", "(", "view_id", "+", "3", ")", "%", "4", "\n", "\n", "mask_0_frame", "=", "cv", ".", "imread", "(", "'%s/mask/mask_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "mask_0_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "mask_1_frame", "=", "cv", ".", "imread", "(", "'%s/mask/mask_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "mask_1_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "mask_2_frame", "=", "cv", ".", "imread", "(", "'%s/mask/mask_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "mask_2_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "mask_3_frame", "=", "cv", ".", "imread", "(", "'%s/mask/mask_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "mask_3_id", ")", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "mask_0_frame", "=", "mask_0_frame", "/", "255", "\n", "mask_1_frame", "=", "mask_1_frame", "/", "255", "\n", "mask_2_frame", "=", "mask_2_frame", "/", "255", "\n", "mask_3_frame", "=", "mask_3_frame", "/", "255", "\n", "\n", "# kernel = np.ones((5, 5), np.uint8)", "\n", "# mask_0_frame = cv.erode(mask_0_frame/255, kernel, iterations=1)", "\n", "# mask_1_frame = cv.erode(mask_1_frame/255, kernel, iterations=1)", "\n", "# mask_2_frame = cv.erode(mask_2_frame/255, kernel, iterations=1)", "\n", "# mask_3_frame = cv.erode(mask_3_frame/255, kernel, iterations=1)", "\n", "\n", "mask_0_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "mask_0_frame", ")", ")", "\n", "mask_1_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "mask_1_frame", ")", ")", "\n", "mask_2_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "mask_2_frame", ")", ")", "\n", "mask_3_frame", "=", "np", ".", "float32", "(", "self", ".", "resize_and_crop_img", "(", "mask_3_frame", ")", ")", "\n", "\n", "mask_2_frame", "=", "np", ".", "fliplr", "(", "mask_2_frame", ")", "\n", "mask_3_frame", "=", "np", ".", "fliplr", "(", "mask_3_frame", ")", "\n", "\n", "return", "mask_0_frame", ",", "mask_1_frame", ",", "mask_2_frame", ",", "mask_3_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_color_img": [[185, 205], ["cv2.cvtColor", "DataLoaderNormal.DataLoader.resize_and_crop_img", "cv2.imread", "numpy.float32", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img"], ["", "def", "load_color_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "cv", ".", "cvtColor", "(", "cv", ".", "imread", "(", "'%s/color/color_%08d.jpg'", "%", "(", "self", ".", "data_dir", ",", "idx", ")", ")", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "float32", "(", "img", ")", "/", "255.0", "\n", "\n", "if", "self", ".", "augmentation", ":", "\n", "            ", "alpha", "=", "self", ".", "alpha", "[", "idx", "]", "# random from [0.9, 1.1]", "\n", "beta", "=", "self", ".", "beta", "[", "idx", "]", "# random from [-0.05, 0.05]", "\n", "\n", "img", "=", "alpha", "*", "img", "+", "beta", "# random brightness and contrast", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "img", "=", "self", ".", "resize_and_crop_img", "(", "img", ")", "\n", "# if self.augmentation:", "\n", "#     crop_size = self.crop_size[idx, :]", "\n", "#     img[0:crop_size[0], :, :] = 0.", "\n", "#     img[crop_size[1]:, :, :] = 0.", "\n", "#     img[:, 0:crop_size[2], :] = 0.", "\n", "#     img[:, crop_size[3]:, :] = 0.", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_vmap": [[206, 216], ["cv2.cvtColor", "DataLoaderNormal.DataLoader.resize_and_crop_img", "cv2.imread", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.resize_and_crop_img"], ["", "def", "load_vmap", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img", "=", "cv", ".", "cvtColor", "(", "cv", ".", "imread", "(", "'%s/vmap/vmap_%08d.png'", "%", "(", "self", ".", "data_dir", ",", "idx", ")", ")", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "np", ".", "float32", "(", "img", ")", "/", "255.0", "\n", "img", "=", "self", ".", "resize_and_crop_img", "(", "img", ")", "\n", "# if self.augmentation:", "\n", "#     movement = self.movement[idx, :]", "\n", "#     x_m, y_m, z_m = movement[0], movement[1], movement[2]", "\n", "#     img = sii.shift(img, (x_m, y_m, 0), cval=0)", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple": [[217, 229], ["DataLoaderNormal.DataLoader.load_volume", "numpy.expand_dims", "DataLoaderNormal.DataLoader.load_normal_maps", "DataLoaderNormal.DataLoader.load_mask", "DataLoaderNormal.DataLoader.load_vmap", "DataLoaderNormal.DataLoader.load_color_img", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.load_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_normal_maps", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_mask", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_vmap", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_color_img"], ["", "def", "load_tuple", "(", "self", ",", "idx", ")", ":", "\n", "        ", "smpl_v_volume", ",", "mesh_volume", "=", "self", ".", "load_volume", "(", "idx", ")", "\n", "mesh_volume", "=", "np", ".", "expand_dims", "(", "mesh_volume", ",", "axis", "=", "-", "1", ")", "# expand to [x_dim, y_dim, z_dim, channel] format", "\n", "\n", "n0", ",", "n1", ",", "n2", ",", "n3", "=", "self", ".", "load_normal_maps", "(", "idx", ")", "\n", "m0", ",", "m1", ",", "m2", ",", "m3", "=", "self", ".", "load_mask", "(", "idx", ")", "\n", "\n", "v", "=", "self", ".", "load_vmap", "(", "idx", ")", "\n", "c", "=", "self", ".", "load_color_img", "(", "idx", ")", "\n", "\n", "conc_img", "=", "np", ".", "concatenate", "(", "(", "c", ",", "v", ",", "m0", ",", "m1", ",", "m2", ",", "m3", ",", "n0", ",", "n1", ",", "n2", ",", "n3", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "conc_img", ",", "smpl_v_volume", ",", "mesh_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple_batch": [[230, 249], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "DataLoaderNormal.DataLoader.load_tuple", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray.append", "numpy.sum", "print", "DataLoaderNormal.DataLoader.load_tuple"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple"], ["", "def", "load_tuple_batch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "assert", "len", "(", "indices", ")", "==", "self", ".", "batch_size", "\n", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", "in", "indices", ":", "\n", "\n", "            ", "conc_img", ",", "smpl_v_volume", ",", "mesh_volume", "=", "self", ".", "load_tuple", "(", "idx", ")", "\n", "while", "np", ".", "sum", "(", "mesh_volume", ")", "<", "2e4", ":", "\n", "                ", "print", "(", "'skipped one data. '", ")", "\n", "idx", "+=", "1", "\n", "conc_img", ",", "smpl_v_volume", ",", "mesh_volume", "=", "self", ".", "load_tuple", "(", "idx", ")", "\n", "\n", "", "conc_imgs", ".", "append", "(", "conc_img", ")", "\n", "smpl_v_volumes", ".", "append", "(", "smpl_v_volume", ")", "\n", "mesh_volumes", ".", "append", "(", "mesh_volume", ")", "\n", "\n", "", "conc_imgs", "=", "np", ".", "asarray", "(", "conc_imgs", ")", "\n", "smpl_v_volumes", "=", "np", ".", "asarray", "(", "smpl_v_volumes", ")", "\n", "mesh_volumes", "=", "np", ".", "asarray", "(", "mesh_volumes", ")", "\n", "return", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple_next_batch": [[250, 258], ["DataLoaderNormal.DataLoader.load_tuple_batch"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple_batch"], ["", "def", "load_tuple_next_batch", "(", "self", ")", ":", "\n", "        ", "start_idx", "=", "self", ".", "batch_size", "*", "self", ".", "batch_index", "\n", "end_idx", "=", "self", ".", "batch_size", "*", "(", "self", ".", "batch_index", "+", "1", ")", "\n", "data_indices", "=", "self", ".", "data_indices", "[", "start_idx", ":", "end_idx", "]", "\n", "self", ".", "batch_index", "+=", "1", "\n", "\n", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "self", ".", "load_tuple_batch", "(", "data_indices", ")", "\n", "return", "data_indices", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.run": [[259, 268], ["DataLoaderNormal.DataLoader.queue.full", "DataLoaderNormal.DataLoader.load_tuple_next_batch", "DataLoaderNormal.DataLoader.queue.put", "DataLoaderNormal.DataLoader.reshuffle_indices"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.load_tuple_next_batch", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.None.DataLoaderNormal.DataLoader.reshuffle_indices"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "stop_queue", ":", "\n", "## train", "\n", "            ", "if", "not", "self", ".", "queue", ".", "full", "(", ")", ":", "\n", "                ", "if", "self", ".", "batch_index", ">=", "self", ".", "total_batch_num", ":", "\n", "                    ", "self", ".", "reshuffle_indices", "(", ")", "\n", "# print ('shuffle')", "\n", "", "data_indices", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", "=", "self", ".", "load_tuple_next_batch", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "(", "data_indices", ",", "conc_imgs", ",", "smpl_v_volumes", ",", "mesh_volumes", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.primitives_per_edge": [[39, 47], ["depends_on", "MyRenderer.BaseRenderer.v.r.reshape", "opendr.topology.get_vertices_per_edge", "opendr.topology.get_faces_per_edge"], "methods", ["None"], ["@", "depends_on", "(", "\n", "'f'", ")", "# not v: specifically, it depends only on the number of vertices, not on the values in v", "\n", "def", "primitives_per_edge", "(", "self", ")", ":", "\n", "        ", "v", "=", "self", ".", "v", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "f", "=", "self", ".", "f", "\n", "vpe", "=", "get_vertices_per_edge", "(", "v", ",", "f", ")", "\n", "fpe", "=", "get_faces_per_edge", "(", "v", ",", "f", ",", "vpe", ")", "\n", "return", "fpe", ",", "vpe", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.barycentric_image": [[48, 53], ["depends_on", "MyRenderer.BaseRenderer._call_on_changed", "opendr.common.draw_barycentric_image"], "methods", ["None"], ["", "@", "depends_on", "(", "'f'", ",", "'frustum'", ",", "'camera'", ",", "'overdraw'", ")", "\n", "def", "barycentric_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "return", "draw_barycentric_image", "(", "self", ".", "glf", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "\n", "self", ".", "boundarybool_image", "if", "self", ".", "overdraw", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.boundaryid_image": [[54, 58], ["depends_on", "MyRenderer.BaseRenderer._call_on_changed", "MyRenderer.draw_boundaryid_image"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_boundaryid_image"], ["", "@", "depends_on", "(", "terms", "+", "dterms", ")", "\n", "def", "boundaryid_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "return", "draw_boundaryid_image", "(", "self", ".", "glb", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "self", ".", "vpe", ",", "self", ".", "fpe", ",", "self", ".", "camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.visibility_image": [[59, 64], ["depends_on", "MyRenderer.BaseRenderer._call_on_changed", "opendr.common.draw_visibility_image"], "methods", ["None"], ["", "@", "depends_on", "(", "'f'", ",", "'frustum'", ",", "'camera'", ",", "'overdraw'", ")", "\n", "def", "visibility_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "return", "draw_visibility_image", "(", "self", ".", "glb", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "\n", "self", ".", "boundarybool_image", "if", "self", ".", "overdraw", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.boundarybool_image": [[65, 70], ["depends_on", "MyRenderer.BaseRenderer._call_on_changed", "numpy.asarray().reshape", "numpy.asarray"], "methods", ["None"], ["", "@", "depends_on", "(", "terms", "+", "dterms", ")", "\n", "def", "boundarybool_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "boundaryid_image", "=", "self", ".", "boundaryid_image", "\n", "return", "np", ".", "asarray", "(", "boundaryid_image", "!=", "4294967295", ",", "np", ".", "uint32", ")", ".", "reshape", "(", "boundaryid_image", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.shape": [[71, 74], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Should be implemented in inherited class.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.v": [[79, 82], ["None"], "methods", ["None"], ["", "@", "v", ".", "setter", "\n", "def", "v", "(", "self", ",", "newval", ")", ":", "\n", "        ", "self", ".", "camera", ".", "v", "=", "newval", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.vpe": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "vpe", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "primitives_per_edge", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BaseRenderer.fpe": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "fpe", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "primitives_per_edge", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.shape": [[96, 99], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.compute_r": [[100, 103], ["MyRenderer.DepthRenderer.depth_image.reshape"], "methods", ["None"], ["", "def", "compute_r", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "camera", ".", "r", "\n", "return", "self", ".", "depth_image", ".", "reshape", "(", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.compute_dr_wrt": [[104, 160], ["numpy.nonzero", "common.dImage_wrt_2dVerts_bnd", "common.dImage_wrt_2dVerts", "numpy.tile().ravel", "chumpy.utils.col", "numpy.hstack().ravel", "numpy.array", "MyRenderer.DepthRenderer.camera.unproject_points", "scipy.csc_matrix", "visibility.ravel", "MyRenderer.DepthRenderer.f[].ravel", "numpy.asarray", "numpy.asarray", "chumpy.utils.col", "chumpy.utils.col", "chumpy.utils.col", "numpy.hstack().ravel", "numpy.tile().ravel", "numpy.tile", "numpy.hstack", "numpy.floor", "chumpy.utils.col", "numpy.hstack", "numpy.tile", "numpy.floor", "chumpy.utils.row", "visibility.ravel"], "methods", ["None"], ["", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "\n", "        ", "if", "wrt", "is", "not", "self", ".", "camera", "and", "wrt", "is", "not", "self", ".", "v", ":", "\n", "            ", "return", "None", "\n", "\n", "", "visibility", "=", "self", ".", "visibility_image", "\n", "visible", "=", "np", ".", "nonzero", "(", "visibility", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "barycentric", "=", "self", ".", "barycentric_image", "\n", "if", "wrt", "is", "self", ".", "camera", ":", "\n", "            ", "shape", "=", "visibility", ".", "shape", "\n", "depth", "=", "self", ".", "depth_image", "\n", "\n", "if", "self", ".", "overdraw", ":", "\n", "                ", "result1", "=", "common", ".", "dImage_wrt_2dVerts_bnd", "(", "depth", ",", "visible", ",", "visibility", ",", "barycentric", ",", "\n", "self", ".", "frustum", "[", "'width'", "]", ",", "\n", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "\n", "self", ".", "f", ",", "self", ".", "boundaryid_image", "!=", "4294967295", ")", "\n", "", "else", ":", "\n", "                ", "result1", "=", "common", ".", "dImage_wrt_2dVerts", "(", "depth", ",", "visible", ",", "visibility", ",", "barycentric", ",", "\n", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "frustum", "[", "'height'", "]", ",", "\n", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "self", ".", "f", ")", "\n", "\n", "# result1 = common.dImage_wrt_2dVerts(depth, visible, visibility, barycentric, self.frustum['width'], self.frustum['height'], self.v.r.size/3, self.f)", "\n", "\n", "", "return", "result1", "\n", "\n", "", "elif", "wrt", "is", "self", ".", "v", ":", "\n", "\n", "            ", "IS", "=", "np", ".", "tile", "(", "col", "(", "visible", ")", ",", "(", "1", ",", "9", ")", ")", ".", "ravel", "(", ")", "\n", "JS", "=", "col", "(", "self", ".", "f", "[", "visibility", ".", "ravel", "(", ")", "[", "visible", "]", "]", ".", "ravel", "(", ")", ")", "\n", "JS", "=", "np", ".", "hstack", "(", "(", "JS", "*", "3", ",", "JS", "*", "3", "+", "1", ",", "JS", "*", "3", "+", "2", ")", ")", ".", "ravel", "(", ")", "\n", "\n", "# FIXME: there should be a faster way to get the camera axis.", "\n", "# But it should be carefully tested with distortion present!", "\n", "pts", "=", "np", ".", "array", "(", "[", "\n", "[", "self", ".", "camera", ".", "c", ".", "r", "[", "0", "]", ",", "self", ".", "camera", ".", "c", ".", "r", "[", "1", "]", ",", "2", "]", ",", "\n", "[", "self", ".", "camera", ".", "c", ".", "r", "[", "0", "]", ",", "self", ".", "camera", ".", "c", ".", "r", "[", "1", "]", ",", "1", "]", "\n", "]", ")", "\n", "pts", "=", "self", ".", "camera", ".", "unproject_points", "(", "pts", ")", "\n", "cam_axis", "=", "pts", "[", "0", ",", ":", "]", "-", "pts", "[", "1", ",", ":", "]", "\n", "\n", "if", "True", ":", "# use barycentric coordinates (correct way)", "\n", "                ", "w", "=", "visibility", ".", "shape", "[", "1", "]", "\n", "pxs", "=", "np", ".", "asarray", "(", "visible", "%", "w", ",", "np", ".", "int32", ")", "\n", "pys", "=", "np", ".", "asarray", "(", "np", ".", "floor", "(", "np", ".", "floor", "(", "visible", ")", "/", "w", ")", ",", "np", ".", "int32", ")", "\n", "bc0", "=", "col", "(", "barycentric", "[", "pys", ",", "pxs", ",", "0", "]", ")", "\n", "bc1", "=", "col", "(", "barycentric", "[", "pys", ",", "pxs", ",", "1", "]", ")", "\n", "bc2", "=", "col", "(", "barycentric", "[", "pys", ",", "pxs", ",", "2", "]", ")", "\n", "bc", "=", "np", ".", "hstack", "(", "(", "bc0", ",", "bc0", ",", "bc0", ",", "bc1", ",", "bc1", ",", "bc1", ",", "bc2", ",", "bc2", ",", "bc2", ")", ")", ".", "ravel", "(", ")", "\n", "", "else", ":", "# each vert contributes equally (an approximation)", "\n", "                ", "bc", "=", "1.", "/", "3.", "\n", "\n", "", "data", "=", "np", ".", "tile", "(", "row", "(", "cam_axis", ")", ",", "(", "IS", ".", "size", "/", "3", ",", "1", ")", ")", ".", "ravel", "(", ")", "*", "bc", "\n", "result2", "=", "sp", ".", "csc_matrix", "(", "(", "data", ",", "(", "IS", ",", "JS", ")", ")", ",", "shape", "=", "(", "\n", "self", ".", "frustum", "[", "'height'", "]", "*", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "v", ".", "r", ".", "size", ")", ")", "\n", "return", "result2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.on_changed": [[161, 179], ["OsContext", "MyRenderer.DepthRenderer.glf.Viewport", "OsContext", "MyRenderer.DepthRenderer.glb.Viewport", "MyRenderer.setup_camera", "MyRenderer.setup_camera", "hasattr"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera"], ["", "", "def", "on_changed", "(", "self", ",", "which", ")", ":", "\n", "\n", "        ", "if", "'frustum'", "in", "which", ":", "\n", "            ", "w", "=", "self", ".", "frustum", "[", "'width'", "]", "\n", "h", "=", "self", ".", "frustum", "[", "'height'", "]", "\n", "self", ".", "glf", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_FLOAT", ")", "\n", "self", ".", "glf", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "self", ".", "glb", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_UNSIGNED_BYTE", ")", "\n", "self", ".", "glb", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "\n", "", "if", "'frustum'", "in", "which", "or", "'camera'", "in", "which", ":", "\n", "            ", "setup_camera", "(", "self", ".", "glb", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "setup_camera", "(", "self", ".", "glf", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'overdraw'", ")", ":", "\n", "            ", "self", ".", "overdraw", "=", "True", "\n", "\n", "", "assert", "(", "self", ".", "v", "is", "self", ".", "camera", ".", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.depth_image": [[180, 210], ["depends_on", "MyRenderer.DepthRenderer._call_on_changed", "gl.Clear", "gl.PolygonMode", "MyRenderer.draw_noncolored_verts", "numpy.asarray", "hasattr", "copy.deepcopy", "gl.PolygonMode", "MyRenderer.draw_noncolored_verts", "numpy.asarray", "gl.PolygonMode", "gl.getDepth", "copy.deepcopy", "numpy.concatenate", "numpy.min", "gl.getDepth", "numpy.atleast_3d", "numpy.atleast_3d"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_noncolored_verts", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_noncolored_verts"], ["", "@", "depends_on", "(", "dterms", "+", "terms", ")", "\n", "def", "depth_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "\n", "gl", "=", "self", ".", "glb", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "draw_noncolored_verts", "(", "gl", ",", "self", ".", "camera", ".", "v", ".", "r", ",", "self", ".", "f", ")", "\n", "result", "=", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getDepth", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "\n", "if", "self", ".", "overdraw", ":", "\n", "            ", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_LINE", ")", "\n", "draw_noncolored_verts", "(", "gl", ",", "self", ".", "camera", ".", "v", ".", "r", ",", "self", ".", "f", ")", "\n", "overdraw", "=", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getDepth", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "boundarybool_image", "=", "self", ".", "boundarybool_image", "\n", "result", "=", "overdraw", "*", "boundarybool_image", "+", "result", "*", "(", "1", "-", "boundarybool_image", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'background_image'", ")", ":", "\n", "            ", "if", "False", ":", "# has problems at boundaries, not sure why yet", "\n", "                ", "bg_px", "=", "self", ".", "visibility_image", "==", "4294967295", "\n", "fg_px", "=", "1", "-", "bg_px", "\n", "result", "=", "bg_px", "*", "self", ".", "background_image", "+", "fg_px", "*", "result", "\n", "", "else", ":", "\n", "                ", "tmp", "=", "np", ".", "concatenate", "(", "(", "np", ".", "atleast_3d", "(", "result", ")", ",", "np", ".", "atleast_3d", "(", "self", ".", "background_image", ")", ")", ",", "\n", "axis", "=", "2", ")", "\n", "result", "=", "np", ".", "min", "(", "tmp", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.DepthRenderer.getDepthMesh": [[211, 226], ["MyRenderer.DepthRenderer._call_on_changed", "MyRenderer.DepthRenderer.glb.getDepthCloud", "numpy.arange().reshape", "chumpy.utils.col", "chumpy.utils.col", "chumpy.utils.col", "chumpy.utils.col", "numpy.hstack().reshape", "numpy.arange", "numpy.hstack"], "methods", ["None"], ["", "def", "getDepthMesh", "(", "self", ",", "depth_image", "=", "None", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "# make everything is up-to-date", "\n", "v", "=", "self", ".", "glb", ".", "getDepthCloud", "(", "depth_image", ")", "\n", "w", "=", "self", ".", "frustum", "[", "'width'", "]", "\n", "h", "=", "self", ".", "frustum", "[", "'height'", "]", "\n", "idxs", "=", "np", ".", "arange", "(", "w", "*", "h", ")", ".", "reshape", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "# v0 is upperleft, v1 is upper right, v2 is lowerleft, v3 is lowerright", "\n", "v0", "=", "col", "(", "idxs", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "\n", "v1", "=", "col", "(", "idxs", "[", ":", "-", "1", ",", "1", ":", "]", ")", "\n", "v2", "=", "col", "(", "idxs", "[", "1", ":", ",", ":", "-", "1", "]", ")", "\n", "v3", "=", "col", "(", "idxs", "[", "1", ":", ",", "1", ":", "]", ")", "\n", "\n", "f", "=", "np", ".", "hstack", "(", "(", "v0", ",", "v1", ",", "v2", ",", "v1", ",", "v3", ",", "v2", ")", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "return", "v", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BoundaryRenderer.shape": [[232, 235], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BoundaryRenderer.compute_r": [[236, 239], ["None"], "methods", ["None"], ["", "def", "compute_r", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "camera", ".", "r", "\n", "return", "self", ".", "color_image", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BoundaryRenderer.compute_dr_wrt": [[240, 255], ["len", "common.dImage_wrt_2dVerts", "numpy.nonzero", "visibility.ravel"], "methods", ["None"], ["", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "        ", "if", "wrt", "is", "not", "self", ".", "camera", ":", "\n", "            ", "return", "None", "\n", "\n", "", "visibility", "=", "self", ".", "boundaryid_image", "\n", "shape", "=", "visibility", ".", "shape", "\n", "\n", "visible", "=", "np", ".", "nonzero", "(", "visibility", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "num_visible", "=", "len", "(", "visible", ")", "\n", "\n", "barycentric", "=", "self", ".", "barycentric_image", "\n", "\n", "return", "common", ".", "dImage_wrt_2dVerts", "(", "self", ".", "color_image", ",", "visible", ",", "visibility", ",", "barycentric", ",", "\n", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "frustum", "[", "'height'", "]", ",", "\n", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "self", ".", "vpe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BoundaryRenderer.on_changed": [[256, 271], ["OsContext", "MyRenderer.BoundaryRenderer.glf.Viewport", "OsContext", "MyRenderer.BoundaryRenderer.glb.Viewport", "MyRenderer.setup_camera", "MyRenderer.setup_camera", "hasattr"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera"], ["", "def", "on_changed", "(", "self", ",", "which", ")", ":", "\n", "        ", "if", "'frustum'", "in", "which", ":", "\n", "            ", "w", "=", "self", ".", "frustum", "[", "'width'", "]", "\n", "h", "=", "self", ".", "frustum", "[", "'height'", "]", "\n", "self", ".", "glf", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_FLOAT", ")", "\n", "self", ".", "glf", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "self", ".", "glb", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_UNSIGNED_BYTE", ")", "\n", "self", ".", "glb", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "\n", "", "if", "'frustum'", "in", "which", "or", "'camera'", "in", "which", ":", "\n", "            ", "setup_camera", "(", "self", ".", "glb", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "setup_camera", "(", "self", ".", "glf", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'overdraw'", ")", ":", "\n", "            ", "self", ".", "overdraw", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.BoundaryRenderer.color_image": [[272, 277], ["depends_on", "MyRenderer.BoundaryRenderer._call_on_changed", "MyRenderer.BoundaryRenderer.boundarybool_image.astype", "numpy.dstack", "range"], "methods", ["None"], ["", "", "@", "depends_on", "(", "terms", "+", "dterms", ")", "\n", "def", "color_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "result", "=", "self", ".", "boundarybool_image", ".", "astype", "(", "np", ".", "float64", ")", "\n", "return", "np", ".", "dstack", "(", "[", "result", "for", "i", "in", "range", "(", "self", ".", "num_channels", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.shape": [[283, 291], ["hasattr"], "methods", ["None"], ["@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'num_channels'", ")", ":", "\n", "            ", "self", ".", "num_channels", "=", "3", "\n", "", "if", "self", ".", "num_channels", ">", "1", ":", "\n", "            ", "return", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "num_channels", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.compute_r": [[292, 295], ["None"], "methods", ["None"], ["", "", "def", "compute_r", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "camera", ".", "r", "\n", "return", "self", ".", "color_image", "# .reshape((self.frustum['height'], self.frustum['width'], -1)).squeeze()", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.compute_dr_wrt": [[296, 327], ["len", "numpy.nonzero", "common.dImage_wrt_2dVerts_bnd", "common.dImage_wrt_2dVerts", "common.dr_wrt_vc", "visibility.ravel", "common.dr_wrt_bgcolor"], "methods", ["None"], ["", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "        ", "if", "wrt", "is", "not", "self", ".", "camera", "and", "wrt", "is", "not", "self", ".", "vc", "and", "wrt", "is", "not", "self", ".", "bgcolor", ":", "\n", "            ", "return", "None", "\n", "\n", "", "visibility", "=", "self", ".", "visibility_image", "\n", "\n", "shape", "=", "visibility", ".", "shape", "\n", "color", "=", "self", ".", "color_image", "\n", "\n", "visible", "=", "np", ".", "nonzero", "(", "visibility", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "num_visible", "=", "len", "(", "visible", ")", "\n", "\n", "barycentric", "=", "self", ".", "barycentric_image", "\n", "\n", "if", "wrt", "is", "self", ".", "camera", ":", "\n", "            ", "if", "self", ".", "overdraw", ":", "\n", "                ", "return", "common", ".", "dImage_wrt_2dVerts_bnd", "(", "color", ",", "visible", ",", "visibility", ",", "barycentric", ",", "\n", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "frustum", "[", "'height'", "]", ",", "\n", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "self", ".", "f", ",", "\n", "self", ".", "boundaryid_image", "!=", "4294967295", ")", "\n", "", "else", ":", "\n", "                ", "return", "common", ".", "dImage_wrt_2dVerts", "(", "color", ",", "visible", ",", "visibility", ",", "barycentric", ",", "\n", "self", ".", "frustum", "[", "'width'", "]", ",", "self", ".", "frustum", "[", "'height'", "]", ",", "\n", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "self", ".", "f", ")", "\n", "\n", "", "", "elif", "wrt", "is", "self", ".", "vc", ":", "\n", "            ", "return", "common", ".", "dr_wrt_vc", "(", "visible", ",", "visibility", ",", "self", ".", "f", ",", "barycentric", ",", "self", ".", "frustum", ",", "\n", "self", ".", "vc", ".", "size", ",", "num_channels", "=", "self", ".", "num_channels", ")", "\n", "\n", "", "elif", "wrt", "is", "self", ".", "bgcolor", ":", "\n", "            ", "return", "common", ".", "dr_wrt_bgcolor", "(", "visibility", ",", "self", ".", "frustum", ",", "num_channels", "=", "self", ".", "num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.on_changed": [[328, 354], ["OsContext", "MyRenderer.ColoredRenderer.glf.Viewport", "OsContext", "MyRenderer.ColoredRenderer.glb.Viewport", "MyRenderer.setup_camera", "MyRenderer.setup_camera", "hasattr", "hasattr", "Ch", "which.add", "hasattr", "MyRenderer.ColoredRenderer.glf.ClearColor", "numpy.array", "hasattr"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera"], ["", "", "def", "on_changed", "(", "self", ",", "which", ")", ":", "\n", "        ", "if", "'frustum'", "in", "which", ":", "\n", "            ", "w", "=", "self", ".", "frustum", "[", "'width'", "]", "\n", "h", "=", "self", ".", "frustum", "[", "'height'", "]", "\n", "self", ".", "glf", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_FLOAT", ")", "\n", "self", ".", "glf", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "self", ".", "glb", "=", "OsContext", "(", "w", ",", "h", ",", "typ", "=", "GL_UNSIGNED_BYTE", ")", "\n", "self", ".", "glb", ".", "Viewport", "(", "0", ",", "0", ",", "w", ",", "h", ")", "\n", "\n", "", "if", "'frustum'", "in", "which", "or", "'camera'", "in", "which", ":", "\n", "            ", "setup_camera", "(", "self", ".", "glb", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "setup_camera", "(", "self", ".", "glf", ",", "self", ".", "camera", ",", "self", ".", "frustum", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'num_channels'", ")", ":", "\n", "            ", "self", ".", "num_channels", "=", "3", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'bgcolor'", ")", ":", "\n", "            ", "self", ".", "bgcolor", "=", "Ch", "(", "np", ".", "array", "(", "[", ".5", "]", "*", "self", ".", "num_channels", ")", ")", "\n", "which", ".", "add", "(", "'bgcolor'", ")", "\n", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'overdraw'", ")", ":", "\n", "            ", "self", ".", "overdraw", "=", "True", "\n", "\n", "", "if", "'bgcolor'", "in", "which", "or", "(", "'frustum'", "in", "which", "and", "hasattr", "(", "self", ",", "'bgcolor'", ")", ")", ":", "\n", "            ", "self", ".", "glf", ".", "ClearColor", "(", "self", ".", "bgcolor", ".", "r", "[", "0", "]", ",", "self", ".", "bgcolor", ".", "r", "[", "1", "%", "self", ".", "num_channels", "]", ",", "\n", "self", ".", "bgcolor", ".", "r", "[", "2", "%", "self", ".", "num_channels", "]", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.flow_to": [[355, 357], ["common.flow_to"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.flow_to"], ["", "", "def", "flow_to", "(", "self", ",", "v_next", ",", "cam_next", "=", "None", ")", ":", "\n", "        ", "return", "common", ".", "flow_to", "(", "self", ",", "v_next", ",", "cam_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.filter_for_triangles": [[358, 370], ["numpy.zeros", "cim.copy", "numpy.atleast_3d", "numpy.nonzero", "len", "vim.ravel", "relevant_pixels.reshape", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "vim.ravel"], "methods", ["None"], ["", "def", "filter_for_triangles", "(", "self", ",", "which_triangles", ")", ":", "\n", "        ", "cim", "=", "self", ".", "color_image", "\n", "vim", "=", "self", ".", "visibility_image", "+", "1", "\n", "arr", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "f", ")", "+", "1", ")", "\n", "arr", "[", "which_triangles", "+", "1", "]", "=", "1", "\n", "\n", "relevant_pixels", "=", "arr", "[", "vim", ".", "ravel", "(", ")", "]", "\n", "cim2", "=", "cim", ".", "copy", "(", ")", "*", "np", ".", "atleast_3d", "(", "relevant_pixels", ".", "reshape", "(", "vim", ".", "shape", ")", ")", "\n", "relevant_pixels", "=", "np", ".", "nonzero", "(", "arr", "[", "vim", ".", "ravel", "(", ")", "]", ")", "[", "0", "]", "\n", "xs", "=", "relevant_pixels", "%", "vim", ".", "shape", "[", "1", "]", "\n", "ys", "=", "relevant_pixels", "/", "vim", ".", "shape", "[", "1", "]", "\n", "return", "cim2", "[", "np", ".", "min", "(", "ys", ")", ":", "np", ".", "max", "(", "ys", ")", ",", "np", ".", "min", "(", "xs", ")", ":", "np", ".", "max", "(", "xs", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.boundarycolor_image": [[417, 425], ["depends_on", "MyRenderer.ColoredRenderer._call_on_changed", "gl.Clear", "opendr.common.draw_colored_primitives", "numpy.asarray", "MyRenderer.ColoredRenderer.vc.r.reshape", "MyRenderer.ColoredRenderer.v.r.reshape", "copy.deepcopy", "MyRenderer.ColoredRenderer.vpe.ravel", "gl.getImage"], "methods", ["None"], ["", "@", "depends_on", "(", "terms", "+", "dterms", ")", "\n", "def", "boundarycolor_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "gl", "=", "self", ".", "glf", "\n", "colors", "=", "self", ".", "vc", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", "self", ".", "vpe", ".", "ravel", "(", ")", "]", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "draw_colored_primitives", "(", "gl", ",", "self", ".", "v", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "self", ".", "vpe", ",", "colors", ")", "\n", "return", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getImage", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.draw_color_image": [[375, 392], ["MyRenderer.ColoredRenderer._call_on_changed", "gl.Clear", "MyRenderer.draw_colored_verts", "numpy.asarray", "hasattr", "copy.deepcopy", "numpy.tile().squeeze", "[].squeeze", "numpy.tile", "gl.getImage", "numpy.atleast_3d"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_colored_verts"], ["", "def", "draw_color_image", "(", "self", ",", "gl", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "# use face colors if given", "\n", "# FIXME: this won't work for 2 channels", "\n", "draw_colored_verts", "(", "gl", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "self", ".", "vc", ".", "r", ")", "\n", "\n", "result", "=", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getImage", "(", ")", "[", ":", ",", ":", ",", ":", "self", ".", "num_channels", "]", ".", "squeeze", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'background_image'", ")", ":", "\n", "            ", "bg_px", "=", "np", ".", "tile", "(", "np", ".", "atleast_3d", "(", "self", ".", "visibility_image", ")", "==", "4294967295", ",", "\n", "(", "1", ",", "1", ",", "self", ".", "num_channels", ")", ")", ".", "squeeze", "(", ")", "\n", "fg_px", "=", "1", "-", "bg_px", "\n", "result", "=", "bg_px", "*", "self", ".", "background_image", "+", "fg_px", "*", "result", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.color_image": [[393, 411], ["depends_on", "gl.PolygonMode", "MyRenderer.ColoredRenderer.draw_color_image", "gl.PolygonMode", "MyRenderer.ColoredRenderer.draw_color_image", "gl.PolygonMode", "numpy.asarray", "numpy.atleast_3d"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.draw_color_image", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.draw_color_image"], ["", "@", "depends_on", "(", "dterms", "+", "terms", ")", "\n", "def", "color_image", "(", "self", ")", ":", "\n", "        ", "gl", "=", "self", ".", "glf", "\n", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "no_overdraw", "=", "self", ".", "draw_color_image", "(", "gl", ")", "\n", "\n", "if", "not", "self", ".", "overdraw", ":", "\n", "            ", "return", "no_overdraw", "\n", "\n", "", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_LINE", ")", "\n", "overdraw", "=", "self", ".", "draw_color_image", "(", "gl", ")", "\n", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "\n", "boundarybool_image", "=", "self", ".", "boundarybool_image", "\n", "if", "self", ".", "num_channels", ">", "1", ":", "\n", "            ", "boundarybool_image", "=", "np", ".", "atleast_3d", "(", "boundarybool_image", ")", "\n", "", "return", "np", ".", "asarray", "(", "(", "overdraw", "*", "boundarybool_image", "+", "no_overdraw", "*", "(", "1", "-", "boundarybool_image", ")", ")", ",", "\n", "order", "=", "'C'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.ColoredRenderer.boundary_images": [[412, 416], ["depends_on", "MyRenderer.ColoredRenderer._call_on_changed", "MyRenderer.draw_boundary_images"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_boundary_images"], ["", "@", "depends_on", "(", "'f'", ",", "'frustum'", ",", "'camera'", ")", "\n", "def", "boundary_images", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "return", "draw_boundary_images", "(", "self", ".", "glb", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "self", ".", "vpe", ",", "self", ".", "fpe", ",", "self", ".", "camera", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.__del__": [[431, 433], ["MyRenderer.TexturedRenderer.release_textures"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.release_textures"], ["def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "release_textures", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.shape": [[434, 437], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "frustum", "[", "'height'", "]", ",", "self", ".", "frustum", "[", "'width'", "]", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.num_channels": [[438, 441], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_channels", "(", "self", ")", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.release_textures": [[442, 446], ["hasattr", "numpy.asarray", "MyRenderer.TexturedRenderer.glf.DeleteTextures", "numpy.array"], "methods", ["None"], ["", "def", "release_textures", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'textureID'", ")", ":", "\n", "            ", "arr", "=", "np", ".", "asarray", "(", "np", ".", "array", "(", "[", "self", ".", "textureID", "]", ")", ",", "np", ".", "uint32", ")", "\n", "self", ".", "glf", ".", "DeleteTextures", "(", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.compute_dr_wrt": [[447, 476], ["MyRenderer.ColoredRenderer.compute_dr_wrt", "MyRenderer.TexturedRenderer.draw_color_image().ravel", "scipy.spdiags", "scipy.spdiags.dot", "chumpy.utils.row", "MyRenderer.TexturedRenderer.draw_color_image", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "scipy.csc_matrix", "MyRenderer.TexturedRenderer.draw_color_image", "numpy.nonzero", "MyRenderer.TexturedRenderer.texcoord_image_quantized.ravel", "opendr.cvwrap.cv2.imshow", "opendr.cvwrap.cv2.imshow", "opendr.cvwrap.cv2.waitKey", "clr_im[].ravel", "clr_im[].ravel", "clr_im[].ravel", "MyRenderer.TexturedRenderer.visibility_image.ravel"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.compute_dr_wrt", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.draw_color_image", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.draw_color_image"], ["", "", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "        ", "result", "=", "super", "(", "TexturedRenderer", ",", "self", ")", ".", "compute_dr_wrt", "(", "wrt", ")", "\n", "\n", "if", "wrt", "is", "self", ".", "vc", ":", "\n", "            ", "cim", "=", "self", ".", "draw_color_image", "(", "with_vertex_colors", "=", "False", ")", ".", "ravel", "(", ")", "\n", "cim", "=", "sp", ".", "spdiags", "(", "row", "(", "cim", ")", ",", "[", "0", "]", ",", "cim", ".", "size", ",", "cim", ".", "size", ")", "\n", "result", "=", "cim", ".", "dot", "(", "result", ")", "\n", "", "elif", "wrt", "is", "self", ".", "texture_image", ":", "\n", "            ", "IS", "=", "np", ".", "nonzero", "(", "self", ".", "visibility_image", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "JS", "=", "self", ".", "texcoord_image_quantized", ".", "ravel", "(", ")", "[", "IS", "]", "\n", "\n", "clr_im", "=", "self", ".", "draw_color_image", "(", "with_vertex_colors", "=", "True", ",", "with_texture_on", "=", "False", ")", "\n", "\n", "if", "False", ":", "\n", "                ", "cv2", ".", "imshow", "(", "'clr_im'", ",", "clr_im", ")", "\n", "cv2", ".", "imshow", "(", "'texmap'", ",", "self", ".", "texture_image", ".", "r", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "", "r", "=", "clr_im", "[", ":", ",", ":", ",", "0", "]", ".", "ravel", "(", ")", "[", "IS", "]", "\n", "g", "=", "clr_im", "[", ":", ",", ":", ",", "1", "]", ".", "ravel", "(", ")", "[", "IS", "]", "\n", "b", "=", "clr_im", "[", ":", ",", ":", ",", "2", "]", ".", "ravel", "(", ")", "[", "IS", "]", "\n", "data", "=", "np", ".", "concatenate", "(", "(", "r", ",", "g", ",", "b", ")", ")", "\n", "\n", "IS", "=", "np", ".", "concatenate", "(", "(", "IS", "*", "3", ",", "IS", "*", "3", "+", "1", ",", "IS", "*", "3", "+", "2", ")", ")", "\n", "JS", "=", "np", ".", "concatenate", "(", "(", "JS", "*", "3", ",", "JS", "*", "3", "+", "1", ",", "JS", "*", "3", "+", "2", ")", ")", "\n", "\n", "return", "sp", ".", "csc_matrix", "(", "(", "data", ",", "(", "IS", ",", "JS", ")", ")", ",", "shape", "=", "(", "self", ".", "r", ".", "size", ",", "wrt", ".", "r", ".", "size", ")", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.on_changed": [[477, 496], ["MyRenderer.ColoredRenderer.on_changed", "numpy.array", "numpy.zeros", "MyRenderer.TexturedRenderer.release_textures", "gl.GenTextures", "gl.BindTexture", "gl.TexImage2Dub", "gl.GenerateMipmap", "numpy.array.ravel"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.on_changed", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.release_textures"], ["", "def", "on_changed", "(", "self", ",", "which", ")", ":", "\n", "        ", "super", "(", "TexturedRenderer", ",", "self", ")", ".", "on_changed", "(", "which", ")", "\n", "\n", "# have to redo if frustum changes, b/c frustum triggers new context", "\n", "if", "'texture_image'", "in", "which", "or", "'frustum'", "in", "which", ":", "\n", "            ", "gl", "=", "self", ".", "glf", "\n", "texture_data", "=", "np", ".", "array", "(", "self", ".", "texture_image", "*", "255.", ",", "dtype", "=", "'uint8'", ",", "order", "=", "'C'", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "2", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "\n", "self", ".", "release_textures", "(", ")", "\n", "gl", ".", "GenTextures", "(", "1", ",", "tmp", ")", "# TODO: free after done", "\n", "self", ".", "textureID", "=", "tmp", "[", "0", "]", "\n", "\n", "gl", ".", "BindTexture", "(", "GL_TEXTURE_2D", ",", "self", ".", "textureID", ")", "\n", "\n", "gl", ".", "TexImage2Dub", "(", "GL_TEXTURE_2D", ",", "0", ",", "GL_RGB", ",", "texture_data", ".", "shape", "[", "1", "]", ",", "texture_data", ".", "shape", "[", "0", "]", ",", "\n", "0", ",", "GL_BGR", ",", "texture_data", ".", "ravel", "(", ")", ")", "\n", "# gl.Hint(GL_GENERATE_MIPMAP_HINT, GL_NICEST) # must be GL_FASTEST, GL_NICEST or GL_DONT_CARE", "\n", "gl", ".", "GenerateMipmap", "(", "GL_TEXTURE_2D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.mesh_tex_coords": [[497, 503], ["depends_on", "MyRenderer.TexturedRenderer.ft.ravel", "numpy.asarray", "MyRenderer.TexturedRenderer.vt[].astype"], "methods", ["None"], ["", "", "@", "depends_on", "(", "'vt'", ",", "'ft'", ")", "\n", "def", "mesh_tex_coords", "(", "self", ")", ":", "\n", "        ", "ftidxs", "=", "self", ".", "ft", ".", "ravel", "(", ")", "\n", "data", "=", "np", ".", "asarray", "(", "self", ".", "vt", "[", "ftidxs", "]", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", "0", ":", "2", "]", ",", "np", ".", "float32", ",", "order", "=", "'C'", ")", "\n", "data", "[", ":", ",", "1", "]", "=", "1.0", "-", "1.0", "*", "data", "[", ":", ",", "1", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.wireframe_tex_coords": [[505, 512], ["depends_on", "numpy.zeros", "numpy.zeros", "MyRenderer.TexturedRenderer.f.flatten", "MyRenderer.TexturedRenderer.vpe.ravel"], "methods", ["None"], ["", "@", "depends_on", "(", "'vt'", ",", "'ft'", ",", "'f'", ")", "\n", "def", "wireframe_tex_coords", "(", "self", ")", ":", "\n", "        ", "vvt", "=", "np", ".", "zeros", "(", "(", "self", ".", "v", ".", "r", ".", "size", "/", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ",", "order", "=", "'C'", ")", "\n", "vvt", "[", "self", ".", "f", ".", "flatten", "(", ")", "]", "=", "self", ".", "mesh_tex_coords", "\n", "edata", "=", "np", ".", "zeros", "(", "(", "self", ".", "vpe", ".", "size", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ",", "order", "=", "'C'", ")", "\n", "edata", "=", "vvt", "[", "self", ".", "vpe", ".", "ravel", "(", ")", "]", "\n", "return", "edata", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_on": [[513, 521], ["gl.Enable", "gl.TexParameterf", "gl.TexParameterf", "gl.TexEnvf", "gl.BindTexture", "gl.EnableClientState"], "methods", ["None"], ["", "def", "texture_mapping_on", "(", "self", ",", "gl", ",", "with_vertex_colors", ")", ":", "\n", "        ", "gl", ".", "Enable", "(", "GL_TEXTURE_2D", ")", "\n", "gl", ".", "TexParameterf", "(", "GL_TEXTURE_2D", ",", "GL_TEXTURE_MAG_FILTER", ",", "GL_LINEAR", ")", "\n", "gl", ".", "TexParameterf", "(", "GL_TEXTURE_2D", ",", "GL_TEXTURE_MIN_FILTER", ",", "GL_LINEAR_MIPMAP_LINEAR", ")", "\n", "gl", ".", "TexEnvf", "(", "GL_TEXTURE_ENV", ",", "GL_TEXTURE_ENV_MODE", ",", "\n", "GL_MODULATE", "if", "with_vertex_colors", "else", "GL_REPLACE", ")", ";", "\n", "gl", ".", "BindTexture", "(", "GL_TEXTURE_2D", ",", "self", ".", "textureID", ")", "\n", "gl", ".", "EnableClientState", "(", "GL_TEXTURE_COORD_ARRAY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_off": [[522, 525], ["gl.Disable", "gl.DisableClientState"], "methods", ["None"], ["", "def", "texture_mapping_off", "(", "self", ",", "gl", ")", ":", "\n", "        ", "gl", ".", "Disable", "(", "GL_TEXTURE_2D", ")", "\n", "gl", ".", "DisableClientState", "(", "GL_TEXTURE_COORD_ARRAY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.boundaryid_image": [[527, 534], ["depends_on", "MyRenderer.TexturedRenderer._call_on_changed", "MyRenderer.TexturedRenderer.texture_mapping_off", "MyRenderer.draw_boundaryid_image", "MyRenderer.TexturedRenderer.texture_mapping_on"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_off", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_boundaryid_image", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_on"], ["", "@", "depends_on", "(", "dterms", "+", "terms", ")", "\n", "def", "boundaryid_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "self", ".", "texture_mapping_off", "(", "self", ".", "glb", ")", "\n", "result", "=", "draw_boundaryid_image", "(", "self", ".", "glb", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "self", ".", "vpe", ",", "self", ".", "fpe", ",", "self", ".", "camera", ")", "\n", "self", ".", "texture_mapping_on", "(", "self", ".", "glb", ",", "with_vertex_colors", "=", "True", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.boundarycolor_image": [[535, 546], ["depends_on", "MyRenderer.TexturedRenderer._call_on_changed", "gl.Clear", "MyRenderer.TexturedRenderer.texture_mapping_on", "gl.TexCoordPointerf", "opendr.common.draw_colored_primitives", "MyRenderer.TexturedRenderer.texture_mapping_off", "numpy.asarray", "MyRenderer.TexturedRenderer.vc.r.reshape", "MyRenderer.TexturedRenderer.wireframe_tex_coords.ravel", "MyRenderer.TexturedRenderer.v.r.reshape", "copy.deepcopy", "MyRenderer.TexturedRenderer.vpe.ravel", "gl.getImage"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_on", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_off"], ["", "@", "depends_on", "(", "terms", "+", "dterms", ")", "\n", "def", "boundarycolor_image", "(", "self", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "gl", "=", "self", ".", "glf", "\n", "colors", "=", "self", ".", "vc", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", "self", ".", "vpe", ".", "ravel", "(", ")", "]", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "self", ".", "texture_mapping_on", "(", "gl", ",", "with_vertex_colors", "=", "False", "if", "colors", "is", "None", "else", "True", ")", "\n", "gl", ".", "TexCoordPointerf", "(", "2", ",", "0", ",", "self", ".", "wireframe_tex_coords", ".", "ravel", "(", ")", ")", "\n", "draw_colored_primitives", "(", "self", ".", "glf", ",", "self", ".", "v", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "self", ".", "vpe", ",", "colors", ")", "\n", "self", ".", "texture_mapping_off", "(", "gl", ")", "\n", "return", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getImage", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.draw_color_image": [[547, 572], ["MyRenderer.TexturedRenderer._call_on_changed", "gl.Clear", "opendr.common.draw_colored_primitives", "MyRenderer.TexturedRenderer.texture_mapping_off", "numpy.asarray", "hasattr", "MyRenderer.TexturedRenderer.texture_mapping_on", "gl.TexCoordPointerf", "MyRenderer.TexturedRenderer.texture_mapping_off", "MyRenderer.TexturedRenderer.v.r.reshape", "copy.deepcopy", "numpy.tile", "MyRenderer.TexturedRenderer.mesh_tex_coords.ravel", "MyRenderer.TexturedRenderer.vc.r.reshape", "gl.getImage", "MyRenderer.TexturedRenderer.f.ravel", "numpy.atleast_3d"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_off", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_on", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texture_mapping_off"], ["", "def", "draw_color_image", "(", "self", ",", "with_vertex_colors", "=", "True", ",", "with_texture_on", "=", "True", ")", ":", "\n", "        ", "self", ".", "_call_on_changed", "(", ")", "\n", "gl", "=", "self", ".", "glf", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "if", "with_texture_on", ":", "\n", "            ", "self", ".", "texture_mapping_on", "(", "gl", ",", "with_vertex_colors", ")", "\n", "gl", ".", "TexCoordPointerf", "(", "2", ",", "0", ",", "self", ".", "mesh_tex_coords", ".", "ravel", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "texture_mapping_off", "(", "gl", ")", "\n", "\n", "", "colors", "=", "None", "\n", "if", "with_vertex_colors", ":", "\n", "            ", "colors", "=", "self", ".", "vc", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "[", "self", ".", "f", ".", "ravel", "(", ")", "]", "\n", "", "draw_colored_primitives", "(", "self", ".", "glf", ",", "self", ".", "v", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "self", ".", "f", ",", "colors", ")", "\n", "\n", "self", ".", "texture_mapping_off", "(", "gl", ")", "\n", "result", "=", "np", ".", "asarray", "(", "deepcopy", "(", "gl", ".", "getImage", "(", ")", ")", ",", "np", ".", "float64", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'background_image'", ")", ":", "\n", "            ", "bg_px", "=", "np", ".", "tile", "(", "np", ".", "atleast_3d", "(", "self", ".", "visibility_image", ")", "==", "4294967295", ",", "(", "1", ",", "1", ",", "3", ")", ")", "\n", "fg_px", "=", "1", "-", "bg_px", "\n", "result", "=", "bg_px", "*", "self", ".", "background_image", "+", "fg_px", "*", "result", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texcoord_image_quantized": [[573, 582], ["depends_on", "MyRenderer.TexturedRenderer.texcoord_image.copy", "numpy.round"], "methods", ["None"], ["", "@", "depends_on", "(", "'vt'", ",", "'ft'", ",", "'f'", ",", "'frustum'", ",", "'camera'", ")", "\n", "def", "texcoord_image_quantized", "(", "self", ")", ":", "\n", "        ", "texcoord_image", "=", "self", ".", "texcoord_image", ".", "copy", "(", ")", "\n", "texcoord_image", "[", ":", ",", ":", ",", "0", "]", "*=", "self", ".", "texture_image", ".", "shape", "[", "1", "]", "-", "1", "\n", "texcoord_image", "[", ":", ",", ":", ",", "1", "]", "*=", "self", ".", "texture_image", ".", "shape", "[", "0", "]", "-", "1", "\n", "texcoord_image", "=", "np", ".", "round", "(", "texcoord_image", ")", "\n", "texcoord_image", "=", "texcoord_image", "[", ":", ",", ":", ",", "0", "]", "+", "texcoord_image", "[", ":", ",", ":", ",", "1", "]", "*", "self", ".", "texture_image", ".", "shape", "[", "1", "]", "\n", "return", "texcoord_image", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.TexturedRenderer.texcoord_image": [[583, 587], ["depends_on", "opendr.common.draw_texcoord_image"], "methods", ["None"], ["", "@", "depends_on", "(", "'vt'", ",", "'ft'", ",", "'f'", ",", "'frustum'", ",", "'camera'", ")", "\n", "def", "texcoord_image", "(", "self", ")", ":", "\n", "        ", "return", "draw_texcoord_image", "(", "self", ".", "glf", ",", "self", ".", "v", ".", "r", ",", "self", ".", "f", ",", "self", ".", "vt", ",", "self", ".", "ft", ",", "\n", "self", ".", "boundarybool_image", "if", "self", ".", "overdraw", "else", "None", ")", "\n", "# gl = self.glf", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_edge_visibility": [[605, 627], ["gl.Clear", "numpy.arange", "numpy.tile", "numpy.asarray", "opendr.common.draw_colored_primitives", "numpy.asarray", "chumpy.utils.col", "gl.Enable", "gl.PolygonOffset", "opendr.common.draw_colored_primitives", "gl.Disable", "gl.getImage", "len", "numpy.zeros"], "function", ["None"], ["", "", "def", "draw_edge_visibility", "(", "gl", ",", "v", ",", "e", ",", "f", ",", "hidden_wireframe", "=", "True", ")", ":", "\n", "    ", "\"\"\"Assumes camera is set up correctly in gl context.\"\"\"", "\n", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "ec", "=", "np", ".", "arange", "(", "1", ",", "len", "(", "e", ")", "+", "1", ")", "\n", "ec", "=", "np", ".", "tile", "(", "col", "(", "ec", ")", ",", "(", "1", ",", "3", ")", ")", "\n", "ec", "[", ":", ",", "0", "]", "=", "ec", "[", ":", ",", "0", "]", "&", "255", "\n", "ec", "[", ":", ",", "1", "]", "=", "(", "ec", "[", ":", ",", "1", "]", ">>", "8", ")", "&", "255", "\n", "ec", "[", ":", ",", "2", "]", "=", "(", "ec", "[", ":", ",", "2", "]", ">>", "16", ")", "&", "255", "\n", "ec", "=", "np", ".", "asarray", "(", "ec", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "draw_colored_primitives", "(", "gl", ",", "v", ",", "e", ",", "ec", ")", "\n", "\n", "if", "hidden_wireframe", ":", "\n", "        ", "gl", ".", "Enable", "(", "GL_POLYGON_OFFSET_FILL", ")", "\n", "gl", ".", "PolygonOffset", "(", "10.0", ",", "1.0", ")", "\n", "draw_colored_primitives", "(", "gl", ",", "v", ",", "f", ",", "fc", "=", "np", ".", "zeros", "(", "f", ".", "shape", ")", ")", "\n", "gl", ".", "Disable", "(", "GL_POLYGON_OFFSET_FILL", ")", "\n", "\n", "", "raw", "=", "np", ".", "asarray", "(", "gl", ".", "getImage", "(", ")", ",", "np", ".", "uint32", ")", "\n", "raw", "=", "raw", "[", ":", ",", ":", ",", "0", "]", "+", "raw", "[", ":", ",", ":", ",", "1", "]", "*", "256", "+", "raw", "[", ":", ",", ":", ",", "2", "]", "*", "256", "*", "256", "-", "1", "\n", "return", "raw", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_boundary_images": [[629, 654], ["glf.Clear", "glb.Clear", "TriNormals().r.reshape", "numpy.sum", "numpy.asarray", "MyRenderer.draw_edge_visibility", "visibility.ravel.ravel", "visibility.ravel.reshape", "[].T.dot", "v.reshape", "chumpy.utils.row", "numpy.nonzero", "numpy.nonzero", "numpy.nonzero", "TriNormals", "visibility.ravel.ravel", "opendr.cvwrap.cv2.Rodrigues"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_edge_visibility"], ["", "def", "draw_boundary_images", "(", "glf", ",", "glb", ",", "v", ",", "f", ",", "vpe", ",", "fpe", ",", "camera", ")", ":", "\n", "    ", "\"\"\"Assumes camera is set up correctly, and that glf has any texmapping on necessary.\"\"\"", "\n", "glf", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "glb", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "# Figure out which edges are on pairs of differently visible triangles", "\n", "from", "opendr", ".", "geometry", "import", "TriNormals", "\n", "tn", "=", "TriNormals", "(", "v", ",", "f", ")", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "campos", "=", "-", "cv2", ".", "Rodrigues", "(", "camera", ".", "rt", ".", "r", ")", "[", "0", "]", ".", "T", ".", "dot", "(", "camera", ".", "t", ".", "r", ")", "\n", "rays_to_verts", "=", "v", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "-", "row", "(", "campos", ")", "\n", "rays_to_faces", "=", "rays_to_verts", "[", "f", "[", ":", ",", "0", "]", "]", "+", "rays_to_verts", "[", "f", "[", ":", ",", "1", "]", "]", "+", "rays_to_verts", "[", "f", "[", ":", ",", "2", "]", "]", "\n", "dps", "=", "np", ".", "sum", "(", "rays_to_faces", "*", "tn", ",", "axis", "=", "1", ")", "\n", "dps", "=", "dps", "[", "fpe", "[", ":", ",", "0", "]", "]", "*", "dps", "[", "fpe", "[", ":", ",", "1", "]", "]", "\n", "silhouette_edges", "=", "np", ".", "asarray", "(", "np", ".", "nonzero", "(", "dps", "<=", "0", ")", "[", "0", "]", ",", "np", ".", "uint32", ")", "\n", "non_silhouette_edges", "=", "np", ".", "nonzero", "(", "dps", ">", "0", ")", "[", "0", "]", "\n", "lines_e", "=", "vpe", "[", "silhouette_edges", "]", "\n", "lines_v", "=", "v", "\n", "\n", "visibility", "=", "draw_edge_visibility", "(", "glb", ",", "lines_v", ",", "lines_e", ",", "f", ",", "hidden_wireframe", "=", "True", ")", "\n", "shape", "=", "visibility", ".", "shape", "\n", "visibility", "=", "visibility", ".", "ravel", "(", ")", "\n", "visible", "=", "np", ".", "nonzero", "(", "visibility", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "visibility", "[", "visible", "]", "=", "silhouette_edges", "[", "visibility", "[", "visible", "]", "]", "\n", "result", "=", "visibility", ".", "reshape", "(", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.compute_vpe_boundary_idxs": [[656, 670], ["TriNormals().r.reshape", "numpy.sum", "numpy.asarray", "[].T.dot", "v.reshape", "chumpy.utils.row", "numpy.nonzero", "TriNormals", "opendr.cvwrap.cv2.Rodrigues"], "function", ["None"], ["", "def", "compute_vpe_boundary_idxs", "(", "v", ",", "f", ",", "camera", ",", "fpe", ")", ":", "\n", "# Figure out which edges are on pairs of differently visible triangles", "\n", "\n", "    ", "from", "opendr", ".", "geometry", "import", "TriNormals", "\n", "tn", "=", "TriNormals", "(", "v", ",", "f", ")", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "# ray = cv2.Rodrigues(camera.rt.r)[0].T[:,2]", "\n", "campos", "=", "-", "cv2", ".", "Rodrigues", "(", "camera", ".", "rt", ".", "r", ")", "[", "0", "]", ".", "T", ".", "dot", "(", "camera", ".", "t", ".", "r", ")", "\n", "rays_to_verts", "=", "v", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "-", "row", "(", "campos", ")", "\n", "rays_to_faces", "=", "rays_to_verts", "[", "f", "[", ":", ",", "0", "]", "]", "+", "rays_to_verts", "[", "f", "[", ":", ",", "1", "]", "]", "+", "rays_to_verts", "[", "f", "[", ":", ",", "2", "]", "]", "\n", "faces_invisible", "=", "np", ".", "sum", "(", "rays_to_faces", "*", "tn", ",", "axis", "=", "1", ")", "\n", "dps", "=", "faces_invisible", "[", "fpe", "[", ":", ",", "0", "]", "]", "*", "faces_invisible", "[", "fpe", "[", ":", ",", "1", "]", "]", "\n", "silhouette_edges", "=", "np", ".", "asarray", "(", "np", ".", "nonzero", "(", "dps", "<=", "0", ")", "[", "0", "]", ",", "np", ".", "uint32", ")", "\n", "return", "silhouette_edges", ",", "faces_invisible", "<", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_boundaryid_image": [[672, 694], ["MyRenderer.draw_edge_visibility", "gl.Clear", "MyRenderer.compute_vpe_boundary_idxs", "MyRenderer.draw_edge_visibility", "visibility.ravel.ravel", "visibility.ravel.reshape", "len", "numpy.nonzero", "numpy.ones().astype", "visibility.ravel.ravel", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_edge_visibility", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.compute_vpe_boundary_idxs", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_edge_visibility"], ["", "def", "draw_boundaryid_image", "(", "gl", ",", "v", ",", "f", ",", "vpe", ",", "fpe", ",", "camera", ")", ":", "\n", "    ", "if", "False", ":", "\n", "        ", "visibility", "=", "draw_edge_visibility", "(", "gl", ",", "v", ",", "vpe", ",", "f", ",", "hidden_wireframe", "=", "True", ")", "\n", "return", "visibility", "\n", "\n", "", "if", "True", ":", "\n", "# try:", "\n", "        ", "gl", ".", "Clear", "(", "GL_COLOR_BUFFER_BIT", "|", "GL_DEPTH_BUFFER_BIT", ")", ";", "\n", "\n", "silhouette_edges", ",", "faces_facing_camera", "=", "compute_vpe_boundary_idxs", "(", "v", ",", "f", ",", "camera", ",", "fpe", ")", "\n", "lines_e", "=", "vpe", "[", "silhouette_edges", "]", "\n", "lines_v", "=", "v", "\n", "\n", "if", "len", "(", "lines_e", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "ones", "(", "(", "gl", ".", "height", ",", "gl", ".", "width", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "*", "4294967295", "\n", "", "visibility", "=", "draw_edge_visibility", "(", "gl", ",", "lines_v", ",", "lines_e", ",", "f", ",", "hidden_wireframe", "=", "True", ")", "\n", "shape", "=", "visibility", ".", "shape", "\n", "visibility", "=", "visibility", ".", "ravel", "(", ")", "\n", "visible", "=", "np", ".", "nonzero", "(", "visibility", ".", "ravel", "(", ")", "!=", "4294967295", ")", "[", "0", "]", "\n", "visibility", "[", "visible", "]", "=", "silhouette_edges", "[", "visibility", "[", "visible", "]", "]", "\n", "result", "=", "visibility", ".", "reshape", "(", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.setup_camera": [[700, 708], ["MyRenderer._setup_camera"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer._setup_camera"], ["", "", "def", "setup_camera", "(", "gl", ",", "camera", ",", "frustum", ")", ":", "\n", "    ", "_setup_camera", "(", "gl", ",", "\n", "camera", ".", "c", ".", "r", "[", "0", "]", ",", "camera", ".", "c", ".", "r", "[", "1", "]", ",", "\n", "camera", ".", "f", ".", "r", "[", "0", "]", ",", "camera", ".", "f", ".", "r", "[", "1", "]", ",", "\n", "frustum", "[", "'width'", "]", ",", "frustum", "[", "'height'", "]", ",", "\n", "frustum", "[", "'near'", "]", ",", "frustum", "[", "'far'", "]", ",", "\n", "camera", ".", "view_matrix", ",", "\n", "camera", ".", "k", ".", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer._setup_camera": [[790, 844], ["numpy.asarray", "gl.MatrixMode", "gl.LoadIdentity", "gl.Ortho", "gl.MatrixMode", "gl.LoadIdentity", "gl.Rotatef", "numpy.asarray", "gl.MultMatrixf", "gl.Enable", "gl.PolygonMode", "gl.Disable", "gl.Disable", "gl.PixelStorei", "gl.PixelStorei", "numpy.any", "numpy.vstack", "gl.UseProgram", "enumerate", "gl.UseProgram", "hasattr", "gl.CreateProgram", "gl.CreateShader", "gl.ShaderSource", "gl.AttachShader", "gl.LinkProgram", "gl.UseProgram", "len", "numpy.zeros", "gl.GetUniformLocation", "gl.Uniform1f", "numpy.array", "len", "len"], "function", ["None"], ["def", "_setup_camera", "(", "gl", ",", "cx", ",", "cy", ",", "fx", ",", "fy", ",", "w", ",", "h", ",", "near", ",", "far", ",", "view_matrix", ",", "k", ")", ":", "\n", "    ", "k", "=", "np", ".", "asarray", "(", "k", ")", "\n", "gl", ".", "MatrixMode", "(", "GL_PROJECTION", ")", "\n", "gl", ".", "LoadIdentity", "(", ")", ";", "\n", "\n", "f", "=", "0.5", "*", "(", "fx", "+", "fy", ")", "\n", "right", "=", "(", "w", "-", "(", "cx", "+", "pixel_center_offset", ")", ")", "*", "(", "near", "/", "f", ")", "\n", "left", "=", "-", "(", "cx", "+", "pixel_center_offset", ")", "*", "(", "near", "/", "f", ")", "\n", "top", "=", "-", "(", "h", "-", "(", "cy", "+", "pixel_center_offset", ")", ")", "*", "(", "near", "/", "f", ")", "\n", "bottom", "=", "(", "cy", "+", "pixel_center_offset", ")", "*", "(", "near", "/", "f", ")", "\n", "# gl.Frustum(left, right, bottom, top, near, far)", "\n", "gl", ".", "Ortho", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ")", "\n", "\n", "gl", ".", "MatrixMode", "(", "GL_MODELVIEW", ")", ";", "\n", "gl", ".", "LoadIdentity", "(", ")", ";", "# I", "\n", "gl", ".", "Rotatef", "(", "180", ",", "1", ",", "0", ",", "0", ")", "# I * xR(pi)", "\n", "\n", "view_mtx", "=", "np", ".", "asarray", "(", "np", ".", "vstack", "(", "(", "view_matrix", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", ")", ",", "np", ".", "float32", ",", "order", "=", "'F'", ")", "\n", "gl", ".", "MultMatrixf", "(", "view_mtx", ")", "# I * xR(pi) * V", "\n", "\n", "gl", ".", "Enable", "(", "GL_DEPTH_TEST", ")", "\n", "gl", ".", "PolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "gl", ".", "Disable", "(", "GL_LIGHTING", ")", "\n", "gl", ".", "Disable", "(", "GL_CULL_FACE", ")", "\n", "gl", ".", "PixelStorei", "(", "GL_PACK_ALIGNMENT", ",", "1", ")", "\n", "gl", ".", "PixelStorei", "(", "GL_UNPACK_ALIGNMENT", ",", "1", ")", "\n", "\n", "if", "np", ".", "any", "(", "k", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "gl", ",", "'distortion_shader'", ")", ":", "\n", "            ", "program", "=", "gl", ".", "CreateProgram", "(", ")", "\n", "\n", "vs", "=", "gl", ".", "CreateShader", "(", "GL_VERTEX_SHADER", ")", "\n", "gl", ".", "ShaderSource", "(", "vs", ",", "1", ",", "vs_source", ",", "len", "(", "vs_source", ")", ")", "\n", "gl", ".", "AttachShader", "(", "program", ",", "vs", ")", "\n", "\n", "# fs = gl.CreateShader(GL_FRAGMENT_SHADER)", "\n", "# gl.ShaderSource(fs, 1, fs_source, len(fs_source))", "\n", "# gl.AttachShader(program, fs)", "\n", "\n", "gl", ".", "LinkProgram", "(", "program", ")", "\n", "gl", ".", "UseProgram", "(", "program", ")", "\n", "gl", ".", "distortion_shader", "=", "program", "\n", "\n", "", "gl", ".", "UseProgram", "(", "gl", ".", "distortion_shader", ")", "\n", "if", "len", "(", "k", ")", "!=", "8", ":", "\n", "            ", "tmp", "=", "k", "\n", "k", "=", "np", ".", "zeros", "(", "8", ")", "\n", "k", "[", ":", "len", "(", "tmp", ")", "]", "=", "tmp", "\n", "\n", "", "for", "idx", ",", "vname", "in", "enumerate", "(", "[", "'k1'", ",", "'k2'", ",", "'p1'", ",", "'p2'", ",", "'k3'", ",", "'k4'", ",", "'k5'", ",", "'k6'", "]", ")", ":", "\n", "            ", "loc", "=", "gl", ".", "GetUniformLocation", "(", "gl", ".", "distortion_shader", ",", "vname", ")", "\n", "gl", ".", "Uniform1f", "(", "loc", ",", "k", "[", "idx", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "gl", ".", "UseProgram", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_colored_verts": [[846, 856], ["gl.EnableClientState", "gl.EnableClientState", "gl.VertexPointer", "gl.ColorPointerd", "gl.DrawElements", "numpy.vstack().T.copy", "numpy.ascontiguousarray().reshape", "numpy.ascontiguousarray().reshape", "numpy.asarray().ravel", "numpy.ascontiguousarray", "numpy.ascontiguousarray", "numpy.asarray", "numpy.vstack"], "function", ["None"], ["", "", "def", "draw_colored_verts", "(", "gl", ",", "v", ",", "f", ",", "vc", ")", ":", "\n", "# TODO: copying is inefficient here", "\n", "    ", "if", "vc", ".", "shape", "[", "1", "]", "!=", "3", ":", "\n", "        ", "vc", "=", "np", ".", "vstack", "(", "(", "vc", "[", ":", ",", "0", "]", ",", "vc", "[", ":", ",", "1", "%", "vc", ".", "shape", "[", "1", "]", "]", ",", "vc", "[", ":", ",", "2", "%", "vc", ".", "shape", "[", "1", "]", "]", ")", ")", ".", "T", ".", "copy", "(", ")", "\n", "", "assert", "(", "vc", ".", "shape", "[", "1", "]", "==", "3", ")", "\n", "gl", ".", "EnableClientState", "(", "GL_VERTEX_ARRAY", ")", ";", "\n", "gl", ".", "EnableClientState", "(", "GL_COLOR_ARRAY", ")", ";", "\n", "gl", ".", "VertexPointer", "(", "np", ".", "ascontiguousarray", "(", "v", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ")", ";", "\n", "gl", ".", "ColorPointerd", "(", "np", ".", "ascontiguousarray", "(", "vc", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ")", ";", "\n", "gl", ".", "DrawElements", "(", "GL_TRIANGLES", ",", "np", ".", "asarray", "(", "f", ",", "np", ".", "uint32", ")", ".", "ravel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.draw_noncolored_verts": [[858, 863], ["gl.EnableClientState", "gl.DisableClientState", "gl.VertexPointer", "gl.DrawElements", "numpy.ascontiguousarray().reshape", "numpy.asarray().ravel", "numpy.ascontiguousarray", "numpy.asarray"], "function", ["None"], ["", "def", "draw_noncolored_verts", "(", "gl", ",", "v", ",", "f", ")", ":", "\n", "    ", "gl", ".", "EnableClientState", "(", "GL_VERTEX_ARRAY", ")", ";", "\n", "gl", ".", "DisableClientState", "(", "GL_COLOR_ARRAY", ")", ";", "\n", "gl", ".", "VertexPointer", "(", "np", ".", "ascontiguousarray", "(", "v", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ")", ";", "\n", "gl", ".", "DrawElements", "(", "GL_TRIANGLES", ",", "np", ".", "asarray", "(", "f", ",", "np", ".", "uint32", ")", ".", "ravel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyRenderer.main": [[865, 867], ["None"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_voxelize_final.binary_fill_from_corner_3D": [[45, 64], ["numpy.logical_not", "numpy.zeros", "isinstance", "scipy.ndimage.binary_dilation", "numpy.logical_not", "scipy.ndimage.binary_dilation", "numpy.logical_not"], "function", ["None"], ["def", "binary_fill_from_corner_3D", "(", "input", ",", "structure", "=", "None", ",", "output", "=", "None", ",", "origin", "=", "0", ")", ":", "\n", "    ", "mask", "=", "np", ".", "logical_not", "(", "input", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ",", "bool", ")", "\n", "for", "xi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "0", "]", "-", "1", "]", ":", "\n", "        ", "for", "yi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "1", "]", "-", "1", "]", ":", "\n", "            ", "for", "zi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "2", "]", "-", "1", "]", ":", "\n", "                ", "tmp", "[", "xi", ",", "yi", ",", "zi", "]", "=", "True", "\n", "", "", "", "inplace", "=", "isinstance", "(", "output", ",", "np", ".", "ndarray", ")", "\n", "if", "inplace", ":", "\n", "        ", "ndimage", ".", "binary_dilation", "(", "tmp", ",", "structure", "=", "structure", ",", "iterations", "=", "-", "1", ",", "\n", "mask", "=", "mask", ",", "output", "=", "output", ",", "border_value", "=", "0", ",", "\n", "origin", "=", "origin", ")", "\n", "np", ".", "logical_not", "(", "output", ",", "output", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "ndimage", ".", "binary_dilation", "(", "tmp", ",", "structure", "=", "structure", ",", "iterations", "=", "-", "1", ",", "\n", "mask", "=", "mask", ",", "border_value", "=", "0", ",", "\n", "origin", "=", "origin", ")", "\n", "np", ".", "logical_not", "(", "output", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_voxelize_final.voxelize": [[66, 74], ["util.voxelize", "main_voxelize_final.binary_fill_from_corner_3D"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.binary_fill_from_corner_3D"], ["", "", "def", "voxelize", "(", "fname", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ",", "corner_res", ")", ":", "\n", "    ", "\"\"\"voxelizes a mesh (solid voxelization)\"\"\"", "\n", "volume", "=", "util", ".", "voxelize", "(", "fname", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ")", "\n", "volume", "[", ":", "corner_res", ",", ":", "corner_res", ",", ":", "corner_res", "]", "=", "0", "\n", "volume", "[", "-", "corner_res", ":", ",", "-", "corner_res", ":", ",", "-", "corner_res", ":", "]", "=", "0", "\n", "# volume = ndimage.binary_fill_holes(volume)", "\n", "volume", "=", "binary_fill_from_corner_3D", "(", "volume", ")", "\n", "return", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_voxelize_final.process_one_item": [[76, 111], ["print", "os.path.split", "os.path.join", "os.path.exists", "main_voxelize_final.voxelize", "main_voxelize_final.voxelize", "ObjIO.load_obj_data_binary", "numpy.copy", "zip", "util.calc_vmap_volume_fast", "scipy.savemat", "scipy.loadmat", "print", "print"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data_binary", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_vmap_volume_fast"], ["", "def", "process_one_item", "(", "item", ",", "voxel_dir", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ",", "corner_res", ",", "voxel_size", ")", ":", "\n", "    ", "print", "(", "'Processing: '", "+", "item", ")", "\n", "dir_name", ",", "fname", "=", "os", ".", "path", ".", "split", "(", "item", ")", "\n", "\n", "# check existence", "\n", "mat_fname", "=", "os", ".", "path", ".", "join", "(", "voxel_dir", ",", "'voxel'", "+", "fname", "[", "4", ":", "-", "4", "]", "+", "'.mat'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mat_fname", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "sio", ".", "loadmat", "(", "mat_fname", ")", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "'Found corrupted data: '", "+", "item", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "print", "(", "'Found corrupted data: '", "+", "item", ")", "\n", "", "else", ":", "\n", "            ", "return", "\n", "\n", "# voxelize", "\n", "", "", "mesh_file", "=", "item", "\n", "smpl_file", "=", "dir_name", "+", "'/smpl'", "+", "fname", "[", "4", ":", "]", "# the corresponding SMPL file", "\n", "mesh_volume", "=", "voxelize", "(", "mesh_file", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ",", "corner_res", ")", "\n", "smpl_volume", "=", "voxelize", "(", "smpl_file", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ",", "corner_res", ")", "\n", "\n", "# calculate semantic volume", "\n", "smpl", "=", "load_obj_data_binary", "(", "smpl_file", ")", "\n", "smpl_v", "=", "np", ".", "copy", "(", "smpl", "[", "'v'", "]", "[", ":", "6890", ",", ":", "]", ")", "\n", "for", "f", ",", "f_", "in", "zip", "(", "smpl", "[", "'f'", "]", ",", "std_faces", ")", ":", "\n", "        ", "smpl_v", "[", "f_", "[", "0", "]", "]", "=", "smpl", "[", "'v'", "]", "[", "f", "[", "0", "]", "]", "\n", "smpl_v", "[", "f_", "[", "1", "]", "]", "=", "smpl", "[", "'v'", "]", "[", "f", "[", "1", "]", "]", "\n", "smpl_v", "[", "f_", "[", "2", "]", "]", "=", "smpl", "[", "'v'", "]", "[", "f", "[", "2", "]", "]", "\n", "\n", "", "smpl_v_volume", "=", "util", ".", "calc_vmap_volume_fast", "(", "smpl_volume", ",", "smpl_v", ",", "\n", "dim_h", ",", "dim_w", ",", "voxel_size", ")", "\n", "sio", ".", "savemat", "(", "mat_fname", ",", "\n", "{", "'mesh_volume'", ":", "mesh_volume", ",", "'smpl_v_volume'", ":", "smpl_v_volume", "}", ",", "\n", "do_compression", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_voxelize_final.main": [[113, 143], ["os.path.join", "os.path.join", "sorted", "log", "multiprocessing.Pool", "glob.glob", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "os.path.join", "len", "multiprocessing.Pool.apply_async", "item.wait", "multiprocessing.Pool.terminate"], "function", ["None"], ["", "def", "main", "(", ")", ":", "\n", "    ", "output_dir", "=", "conf", ".", "output_dir", "\n", "mesh_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'./mesh_smpl/'", ")", "\n", "voxel_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'./voxel2/'", ")", "\n", "binvox_dir", "=", "conf", ".", "binvox_dir", "\n", "dim_h", "=", "conf", ".", "volume_h", "\n", "dim_w", "=", "conf", ".", "volume_w", "\n", "voxel_size", "=", "conf", ".", "voxel_size", "\n", "corner_res", "=", "conf", ".", "corner_res", "\n", "\n", "all_file", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "mesh_dir", ",", "'mesh*.obj'", ")", ")", ")", "\n", "log", "(", "'Found %d .obj files. '", "%", "len", "(", "all_file", ")", ")", "\n", "\n", "# [single thread]", "\n", "# for f in all_file:", "\n", "#     process_one_item(f, voxel_dir, dim_h, dim_w, binvox_dir, corner_res, voxel_size)", "\n", "\n", "# [multi thread]", "\n", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "7", ")", "\n", "try", ":", "\n", "        ", "r", "=", "[", "pool", ".", "apply_async", "(", "process_one_item", ",", "args", "=", "(", "\n", "f", ",", "voxel_dir", ",", "dim_h", ",", "dim_w", ",", "binvox_dir", ",", "corner_res", ",", "voxel_size", ")", ")", "\n", "for", "f", "in", "all_file", "]", "\n", "pool", ".", "close", "(", ")", "\n", "for", "item", "in", "r", ":", "\n", "            ", "item", ".", "wait", "(", "timeout", "=", "99999999", ")", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pool", ".", "terminate", "(", ")", "\n", "", "finally", ":", "\n", "        ", "pool", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.make_output_dir": [[44, 54], ["util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "util.safe_mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir"], ["def", "make_output_dir", "(", "out_dir", ")", ":", "\n", "    ", "\"\"\"creates output folders\"\"\"", "\n", "util", ".", "safe_mkdir", "(", "out_dir", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'color'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'mask'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'vmap'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'mesh_smpl'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'voxel2'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'normal'", ")", ")", "\n", "util", ".", "safe_mkdir", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'params'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_data_list": [[56, 65], ["os.path.join", "log", "open", "fp.readlines", "data_list.append"], "function", ["None"], ["", "def", "load_data_list", "(", "dataset_dir", ")", ":", "\n", "    ", "\"\"\"loads the list of 3D textured models\"\"\"", "\n", "data_list_fname", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "'data_list.txt'", ")", "\n", "data_list", "=", "[", "]", "\n", "with", "open", "(", "data_list_fname", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "data_list", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "# discard line ending symbol", "\n", "", "", "log", "(", "'data list loaded. '", ")", "\n", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_bg_list": [[67, 76], ["os.path.join", "log", "open", "fp.readlines", "bg_list.append"], "function", ["None"], ["", "def", "load_bg_list", "(", "bg_dir", ")", ":", "\n", "    ", "\"\"\"loads the list of background images\"\"\"", "\n", "bg_list_fname", "=", "os", ".", "path", ".", "join", "(", "bg_dir", ",", "'img_list.txt'", ")", "\n", "bg_list", "=", "[", "]", "\n", "with", "open", "(", "bg_list_fname", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "bg_list", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "# discard line ending symbol", "\n", "", "", "log", "(", "'background list loaded. '", ")", "\n", "return", "bg_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.check_rendered_img_existence": [[78, 93], ["dict", "dict.values", "os.path.exists"], "function", ["None"], ["", "def", "check_rendered_img_existence", "(", "output_dir", ",", "model_idx", ")", ":", "\n", "    ", "\"\"\"check whether the model has been processed\"\"\"", "\n", "rendered", "=", "True", "\n", "img_idices", "=", "[", "4", "*", "model_idx", ",", "4", "*", "model_idx", "+", "1", ",", "4", "*", "model_idx", "+", "2", ",", "4", "*", "model_idx", "+", "3", "]", "\n", "for", "ind", "in", "img_idices", ":", "\n", "        ", "p", "=", "dict", "(", ")", "\n", "p", "[", "'color'", "]", "=", "'%s/color/color_%08d.jpg'", "%", "(", "output_dir", ",", "ind", ")", "\n", "p", "[", "'normal'", "]", "=", "'%s/normal/normal_%08d.png'", "%", "(", "output_dir", ",", "ind", ")", "\n", "p", "[", "'mask'", "]", "=", "'%s/mask/mask_%08d.png'", "%", "(", "output_dir", ",", "ind", ")", "\n", "p", "[", "'vmap'", "]", "=", "'%s/vmap/vmap_%08d.png'", "%", "(", "output_dir", ",", "ind", ")", "\n", "p", "[", "'params'", "]", "=", "'%s/params/params_%08d.json'", "%", "(", "output_dir", ",", "ind", ")", "\n", "\n", "for", "pi", "in", "p", ".", "values", "(", ")", ":", "\n", "            ", "rendered", "=", "rendered", "and", "os", ".", "path", ".", "exists", "(", "pi", ")", "\n", "", "", "return", "rendered", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_models": [[95, 106], ["os.path.join", "os.path.join", "ObjIO.load_obj_data", "ObjIO.load_obj_data", "util.flip_axis_in_place", "util.flip_axis_in_place", "config.conf.axis_transformation"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.flip_axis_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.flip_axis_in_place"], ["", "def", "load_models", "(", "dataset_dir", ",", "data_item", ",", "axis_transformation", ")", ":", "\n", "    ", "\"\"\"loads the model and corrects the orientation\"\"\"", "\n", "mesh_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "data_item", ",", "'mesh.obj'", ")", "\n", "smpl_dir", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "data_item", ",", "'smpl.obj'", ")", "\n", "mesh", "=", "load_obj_data", "(", "mesh_dir", ")", "\n", "smpl", "=", "load_obj_data", "(", "smpl_dir", ")", "\n", "util", ".", "flip_axis_in_place", "(", "mesh", ",", "axis_transformation", "[", "0", "]", ",", "\n", "axis_transformation", "[", "1", "]", ",", "axis_transformation", "[", "2", "]", ")", "\n", "util", ".", "flip_axis_in_place", "(", "smpl", ",", "axis_transformation", "[", "0", "]", ",", "\n", "axis_transformation", "[", "1", "]", ",", "axis_transformation", "[", "2", "]", ")", "\n", "return", "mesh", ",", "smpl", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_model_for_voxelization": [[108, 126], ["dict", "numpy.copy", "numpy.copy", "dict", "numpy.copy", "numpy.copy", "ObjIO.save_obj_data_binary_with_corner", "ObjIO.save_obj_data_binary_with_corner"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary_with_corner", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary_with_corner"], ["", "def", "save_model_for_voxelization", "(", "mesh", ",", "smpl", ",", "min_corner", ",", "max_corner", ",", "\n", "output_dir", ",", "data_idx", ")", ":", "\n", "    ", "\"\"\"saves model to an .obj file for voxelization\"\"\"", "\n", "# create new dictionaries to remove useless info", "\n", "mesh_", "=", "dict", "(", ")", "\n", "mesh_", "[", "'v'", "]", "=", "np", ".", "copy", "(", "mesh", "[", "'v'", "]", ")", "\n", "mesh_", "[", "'f'", "]", "=", "np", ".", "copy", "(", "mesh", "[", "'f'", "]", ")", "\n", "smpl_", "=", "dict", "(", ")", "\n", "smpl_", "[", "'v'", "]", "=", "np", ".", "copy", "(", "smpl", "[", "'v'", "]", ")", "\n", "smpl_", "[", "'f'", "]", "=", "np", ".", "copy", "(", "smpl", "[", "'f'", "]", ")", "\n", "\n", "# save models for voxelization", "\n", "m_path", "=", "'%s/mesh_smpl/mesh_%08d.obj'", "%", "(", "output_dir", ",", "data_idx", "*", "4", ")", "\n", "s_path", "=", "'%s/mesh_smpl/smpl_%08d.obj'", "%", "(", "output_dir", ",", "data_idx", "*", "4", ")", "\n", "save_obj_data_binary_with_corner", "(", "mesh_", ",", "min_corner", ",", "max_corner", ",", "\n", "conf", ".", "corner_size", ",", "m_path", ")", "\n", "save_obj_data_binary_with_corner", "(", "smpl", ",", "min_corner", ",", "max_corner", ",", "\n", "conf", ".", "corner_size", ",", "s_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.transform_model_randomly": [[128, 156], ["util.rotate_model_in_place", "util.rotate_model_in_place", "util.calc_transform_params", "util.transform_mesh_in_place", "util.transform_mesh_in_place", "numpy.array", "numpy.array", "dict", "numpy.array", "numpy.concatenate", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_transform_params", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.transform_mesh_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.transform_mesh_in_place"], ["", "def", "transform_model_randomly", "(", "mesh", ",", "smpl", ",", "hb_ratio", ")", ":", "\n", "    ", "\"\"\"translates the model to the origin, and rotates it randomly\"\"\"", "\n", "# random rotation", "\n", "y_rot", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "np", ".", "pi", "*", "2", "\n", "x_rot", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "0.6", "-", "0.3", "\n", "z_rot", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "0.6", "-", "0.3", "\n", "mesh", "=", "util", ".", "rotate_model_in_place", "(", "mesh", ",", "x_rot", ",", "y_rot", ",", "z_rot", ")", "\n", "smpl", "=", "util", ".", "rotate_model_in_place", "(", "smpl", ",", "x_rot", ",", "y_rot", ",", "z_rot", ")", "\n", "\n", "# transform the mesh and SMPL to unit bounding box", "\n", "# [-0.333, 0.333]x[-0.5, 0.5]x[-0.333, 0.333]", "\n", "s_noise", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "*", "0.15", "\n", "trans", ",", "scale", "=", "util", ".", "calc_transform_params", "(", "mesh", ",", "smpl", ",", "hb_ratio", ",", "s_noise", ")", "\n", "util", ".", "transform_mesh_in_place", "(", "mesh", ",", "trans", ",", "scale", ")", "\n", "util", ".", "transform_mesh_in_place", "(", "smpl", ",", "trans", ",", "scale", ")", "\n", "\n", "bbox_p1", "=", "np", ".", "array", "(", "[", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", ",", "\n", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", "]", ")", "\n", "bbox_p2", "=", "np", ".", "array", "(", "[", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", ",", "\n", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", "]", ")", "\n", "\n", "# create a dict of transformation parameters", "\n", "param", "=", "dict", "(", ")", "\n", "param", "[", "'trans'", "]", "=", "trans", "\n", "param", "[", "'scale'", "]", "=", "scale", "\n", "param", "[", "'rot'", "]", "=", "np", ".", "array", "(", "[", "x_rot", ",", "y_rot", ",", "z_rot", "]", ")", "\n", "param", "[", "'mesh_bbox'", "]", "=", "np", ".", "concatenate", "(", "[", "bbox_p1", ",", "bbox_p2", "]", ")", "\n", "return", "mesh", ",", "smpl", ",", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_rendered_data": [[158, 171], ["numpy.uint8", "numpy.uint8", "numpy.uint16", "numpy.uint8", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["", "def", "save_rendered_data", "(", "img", ",", "msk", ",", "nml", ",", "smap", ",", "output_dir", ",", "img_idx", ")", ":", "\n", "    ", "\"\"\"saves rendered images with correct format\"\"\"", "\n", "img", "=", "np", ".", "uint8", "(", "img", "*", "255", ")", "\n", "msk", "=", "np", ".", "uint8", "(", "msk", "[", ":", ",", ":", ",", "0", "]", "*", "255", ")", "\n", "nml", "=", "np", ".", "uint16", "(", "nml", "*", "65535", ")", "\n", "vmap", "=", "np", ".", "uint8", "(", "smap", "*", "255", ")", "\n", "\n", "cv", ".", "imwrite", "(", "'%s/color/color_%08d.jpg'", "%", "(", "output_dir", ",", "img_idx", ")", ",", "\n", "cv", ".", "cvtColor", "(", "img", ",", "cv", ".", "COLOR_RGB2BGR", ")", ")", "\n", "cv", ".", "imwrite", "(", "'%s/mask/mask_%08d.png'", "%", "(", "output_dir", ",", "img_idx", ")", ",", "msk", ")", "\n", "cv", ".", "imwrite", "(", "'%s/normal/normal_%08d.png'", "%", "(", "output_dir", ",", "img_idx", ")", ",", "nml", ")", "\n", "cv", ".", "imwrite", "(", "'%s/vmap/vmap_%08d.png'", "%", "(", "output_dir", ",", "img_idx", ")", ",", "\n", "cv", ".", "cvtColor", "(", "vmap", ",", "cv", ".", "COLOR_BGR2RGB", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_render_params": [[173, 192], ["dict", "dict.keys", "json.dumps", "param.items", "isinstance", "open", "fp.write", "fp.write", "print", "pdb.set_trace", "numpy.reshape().tolist", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "save_render_params", "(", "param", ",", "output_dir", ",", "img_idx", ")", ":", "\n", "    ", "\"\"\"saves rendering parameters to a .json file\"\"\"", "\n", "param_", "=", "dict", "(", "param", ".", "items", "(", ")", ")", "\n", "for", "key", "in", "param_", ".", "keys", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "param_", "[", "key", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "param_", "[", "key", "]", "=", "np", ".", "reshape", "(", "param_", "[", "key", "]", ",", "(", "-", "1", ",", ")", ")", ".", "tolist", "(", ")", "\n", "", "", "s", "=", "json", ".", "dumps", "(", "param_", ",", "indent", "=", "4", ")", "\n", "json_path", "=", "'%s/params/params_%08d.json'", "%", "(", "output_dir", ",", "img_idx", ")", "\n", "with", "open", "(", "json_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "'// params_%08d.json\\n'", "%", "img_idx", ")", "\n", "fp", ".", "write", "(", "s", ")", "\n", "\n", "# check validity of the bounding box", "\n", "", "if", "param", "[", "'mesh_bbox'", "]", "[", "0", "]", "<=", "-", "0.333", "or", "param", "[", "'mesh_bbox'", "]", "[", "1", "]", "<=", "-", "0.5", "or", "param", "[", "'mesh_bbox'", "]", "[", "2", "]", "<=", "-", "0.333", "or", "param", "[", "'mesh_bbox'", "]", "[", "3", "]", ">=", "0.333", "or", "param", "[", "'mesh_bbox'", "]", "[", "4", "]", ">=", "0.5", "or", "param", "[", "'mesh_bbox'", "]", "[", "5", "]", ">=", "0.333", ":", "\n", "        ", "print", "(", "'Invalid mesh!! Index = %d'", "%", "img_idx", ")", "\n", "import", "pdb", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.main": [[194, 262], ["numpy.random.seed", "main_render_final.make_output_dir", "main_render_final.load_data_list", "main_render_final.load_bg_list", "util.ProgressBar", "util.ProgressBar.start", "enumerate", "util.ProgressBar.end", "numpy.array", "main_render_final.check_rendered_img_existence", "main_render_final.load_models", "main_render_final.transform_model_randomly", "main_render_final.save_model_for_voxelization", "range", "len", "util.ProgressBar.count", "util.sample_bg_img", "util.sample_sh_component", "util.sample_verticle_lighting", "renderers.render_training_pairs", "main_render_final.save_rendered_data", "dict", "numpy.reshape", "main_render_final.save_render_params", "util.rotate_model_in_place", "util.rotate_model_in_place", "util.ProgressBar.count", "chumpy.array", "chumpy.array", "dict", "chumpy.ones", "param_0.items", "dict.items"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.make_output_dir", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_data_list", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_bg_list", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.start", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.end", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.check_rendered_img_existence", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.load_models", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.transform_model_randomly", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_model_for_voxelization", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.count", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_bg_img", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_sh_component", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_verticle_lighting", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers.render_training_pairs", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_rendered_data", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.main_render_final.save_render_params", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.count"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "output_dir", "=", "conf", ".", "output_dir", "\n", "bg_dir", "=", "conf", ".", "bg_dir", "\n", "hb_ratio", "=", "conf", ".", "hb_ratio", "\n", "dataset_dir", "=", "conf", ".", "dataset_dir", "\n", "render_img_w", "=", "conf", ".", "render_img_w", "\n", "render_img_h", "=", "conf", ".", "render_img_h", "\n", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "make_output_dir", "(", "output_dir", ")", "\n", "\n", "data_list", "=", "load_data_list", "(", "dataset_dir", ")", "\n", "bg_list", "=", "load_bg_list", "(", "bg_dir", ")", "\n", "\n", "# corner of unit bounding box [-0.333, 0.333]x[-0.5, 0.5]x[-0.333, 0.333]", "\n", "min_corner", "=", "np", ".", "array", "(", "[", "-", "hb_ratio", ",", "-", "1.", ",", "-", "hb_ratio", "]", ")", "*", "0.5", "\n", "max_corner", "=", "-", "min_corner", "\n", "\n", "pb", "=", "util", ".", "ProgressBar", "(", "80", ")", "\n", "pb", ".", "start", "(", "len", "(", "data_list", ")", "*", "4", ")", "\n", "\n", "for", "di", ",", "data_item", "in", "enumerate", "(", "data_list", ")", ":", "\n", "        ", "if", "check_rendered_img_existence", "(", "output_dir", ",", "di", ")", ":", "\n", "            ", "pb", ".", "count", "(", "c", "=", "4", ")", "\n", "continue", "\n", "\n", "# preprocess 3D models", "\n", "", "mesh", ",", "smpl", "=", "load_models", "(", "dataset_dir", ",", "data_item", ",", "conf", ".", "axis_transformation", ")", "\n", "mesh", ",", "smpl", ",", "param_0", "=", "transform_model_randomly", "(", "mesh", ",", "smpl", ",", "hb_ratio", ")", "\n", "save_model_for_voxelization", "(", "mesh", ",", "smpl", ",", "min_corner", ",", "max_corner", ",", "output_dir", ",", "di", ")", "\n", "\n", "# for each model, I render 4 tuples of images", "\n", "# Note that to reduce storage consumption, I use a trick; that is, I render", "\n", "# data from 4 orthogonal viewpoints (front/back/left/right), so that the", "\n", "# voxelization data in the front viewpoint can be reused in other viewpoints", "\n", "img_indices", "=", "[", "4", "*", "di", ",", "4", "*", "di", "+", "1", ",", "4", "*", "di", "+", "2", ",", "4", "*", "di", "+", "3", "]", "\n", "for", "vi", "in", "range", "(", "4", ")", ":", "\n", "            ", "img_ind", "=", "img_indices", "[", "vi", "]", "\n", "bg", ",", "bg_fname", "=", "util", ".", "sample_bg_img", "(", "bg_list", ",", "bg_dir", ",", "\n", "render_img_w", ",", "render_img_h", ")", "\n", "sh", "=", "util", ".", "sample_sh_component", "(", ")", "\n", "vl_pos", ",", "vl_clr", "=", "util", ".", "sample_verticle_lighting", "(", "3", ")", "\n", "cam_t", ",", "cam_r", "=", "ch", ".", "array", "(", "(", "0", ",", "0", ",", "2.0", ")", ")", ",", "ch", ".", "array", "(", "(", "3.14", ",", "0", ",", "0", ")", ")", "\n", "img", ",", "msk", ",", "nml", ",", "smap", "=", "rd", ".", "render_training_pairs", "(", "mesh", ",", "smpl", ",", "\n", "render_img_w", ",", "render_img_h", ",", "\n", "cam_r", ",", "cam_t", ",", "bg", ",", "\n", "sh_comps", "=", "sh", ",", "\n", "light_c", "=", "ch", ".", "ones", "(", "3", ")", ",", "\n", "vlight_pos", "=", "vl_pos", ",", "\n", "vlight_color", "=", "vl_clr", ")", "\n", "save_rendered_data", "(", "img", ",", "msk", ",", "nml", ",", "smap", ",", "output_dir", ",", "img_ind", ")", "\n", "\n", "# save parameters to a json file", "\n", "param_1", "=", "dict", "(", ")", "\n", "param_1", "[", "'bg_fname'", "]", "=", "bg_fname", "\n", "param_1", "[", "'sh'", "]", "=", "sh", "\n", "param_1", "[", "'vl_pos'", "]", "=", "np", ".", "reshape", "(", "vl_pos", ",", "(", "-", "1", ",", ")", ")", "\n", "param_1", "[", "'vl_clr'", "]", "=", "vl_clr", "\n", "save_render_params", "(", "dict", "(", "param_0", ".", "items", "(", ")", "+", "param_1", ".", "items", "(", ")", ")", ",", "\n", "output_dir", ",", "img_ind", ")", "\n", "\n", "# rotate by 90 degree along y-axis (vertical axis)", "\n", "mesh", "=", "util", ".", "rotate_model_in_place", "(", "mesh", ",", "0", ",", "np", ".", "pi", "/", "2", ",", "0", ")", "\n", "smpl", "=", "util", ".", "rotate_model_in_place", "(", "smpl", ",", "0", ",", "np", ".", "pi", "/", "2", ",", "0", ")", "\n", "\n", "pb", ".", "count", "(", ")", "# update progress bar", "\n", "\n", "", "", "pb", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._project_vertices": [[43, 49], ["chumpy.array", "MyCamera.ProjectPointsOrthogonal", "chumpy.zeros"], "function", ["None"], ["def", "_project_vertices", "(", "v", ",", "w", ",", "h", ",", "cam_r", ",", "cam_t", ")", ":", "\n", "    ", "\"\"\"projects vertices onto image plane\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "U", "=", "ProjectPointsOrthogonal", "(", "v", "=", "V", ",", "f", "=", "[", "w", ",", "w", "]", ",", "c", "=", "[", "w", "/", "2.", ",", "h", "/", "2.", "]", ",", "\n", "k", "=", "ch", ".", "zeros", "(", "5", ")", ",", "t", "=", "cam_t", ",", "rt", "=", "cam_r", ")", "\n", "return", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_color_model_with_lighting": [[51, 83], ["chumpy.ones", "chumpy.array", "numpy.zeros_like", "numpy.array", "MyRenderer.ColoredRenderer", "opendr.lighting.LambertianPointLight", "numpy.zeros", "opendr.lighting.SphericalHarmonics", "len", "len", "opendr.lighting.LambertianPointLight", "len", "len"], "function", ["None"], ["", "def", "_render_color_model_with_lighting", "(", "w", ",", "h", ",", "v", ",", "vn", ",", "vc", ",", "f", ",", "u", ",", "\n", "sh_comps", "=", "None", ",", "light_c", "=", "ch", ".", "ones", "(", "3", ")", ",", "\n", "vlight_pos", "=", "None", ",", "vlight_color", "=", "None", ",", "\n", "bg_img", "=", "None", ")", ":", "\n", "    ", "\"\"\"renders colored model with lighting effect\"\"\"", "\n", "assert", "(", "sh_comps", "is", "not", "None", "or", "vlight_pos", "is", "not", "None", ")", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "\n", "# SH lighting", "\n", "if", "sh_comps", "is", "not", "None", ":", "\n", "        ", "A", "+=", "vc", "*", "SphericalHarmonics", "(", "vn", "=", "vn", ",", "components", "=", "sh_comps", ",", "light_color", "=", "light_c", ")", "\n", "\n", "# single point lighting (grey light)", "\n", "", "if", "vlight_color", "is", "not", "None", "and", "vlight_pos", "is", "not", "None", "and", "len", "(", "vlight_pos", ".", "shape", ")", "==", "1", ":", "\n", "        ", "A", "+=", "LambertianPointLight", "(", "f", "=", "f", ",", "v", "=", "v", ",", "num_verts", "=", "len", "(", "v", ")", ",", "light_pos", "=", "vlight_pos", ",", "\n", "light_color", "=", "vlight_color", ",", "vc", "=", "vc", ")", "\n", "\n", "# multiple point lighting (grey light)", "\n", "", "if", "vlight_color", "is", "not", "None", "and", "vlight_pos", "is", "not", "None", "and", "len", "(", "vlight_pos", ".", "shape", ")", "==", "2", ":", "\n", "        ", "for", "vlp", "in", "vlight_pos", ":", "\n", "            ", "A", "+=", "LambertianPointLight", "(", "f", "=", "f", ",", "v", "=", "v", ",", "num_verts", "=", "len", "(", "v", ")", ",", "light_pos", "=", "vlp", ",", "\n", "light_color", "=", "vlight_color", ",", "vc", "=", "vc", ")", "\n", "\n", "", "", "black_img", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "3", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bg_img_", "=", "bg_img", "if", "bg_img", "is", "not", "None", "else", "black_img", "\n", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "background_image", "=", "bg_img_", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_color_model_without_lighting": [[85, 95], ["chumpy.array", "numpy.array", "MyRenderer.ColoredRenderer", "numpy.zeros"], "function", ["None"], ["", "def", "_render_color_model_without_lighting", "(", "w", ",", "h", ",", "v", ",", "vc", ",", "f", ",", "u", ",", "\n", "bg_img", "=", "None", ")", ":", "\n", "    ", "\"\"\"renders colored model without lighting effect\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "vc", "\n", "black_img", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "3", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bg_img_", "=", "bg_img", "if", "bg_img", "is", "not", "None", "else", "black_img", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "background_image", "=", "bg_img_", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_mask": [[97, 104], ["chumpy.array", "numpy.ones", "MyRenderer.ColoredRenderer", "chumpy.zeros"], "function", ["None"], ["", "def", "_render_mask", "(", "w", ",", "h", ",", "v", ",", "f", ",", "u", ")", ":", "\n", "    ", "\"\"\"renders silhouette\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "np", ".", "ones", "(", "v", ".", "shape", ")", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "bgcolor", "=", "ch", ".", "zeros", "(", "3", ")", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers.render_training_pairs": [[106, 151], ["chumpy.ones", "renderers._project_vertices", "cv2.resize", "renderers._render_color_model_with_lighting", "cv2.resize", "numpy.float32", "renderers._project_vertices", "renderers._render_mask", "numpy.float32", "renderers._render_color_model_without_lighting", "numpy.float32", "renderers._project_vertices", "util.get_smpl_semantic_code", "renderers._render_color_model_without_lighting", "numpy.float32", "numpy.copy", "numpy.copy", "util.calc_normal", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._project_vertices", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_color_model_with_lighting", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._project_vertices", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_mask", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_color_model_without_lighting", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._project_vertices", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.get_smpl_semantic_code", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.renderers._render_color_model_without_lighting", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.calc_normal"], ["", "def", "render_training_pairs", "(", "mesh", ",", "smpl", ",", "img_w", ",", "img_h", ",", "camera_r", ",", "camera_t", ",", "color_bg", ",", "\n", "sh_comps", "=", "None", ",", "light_c", "=", "ch", ".", "ones", "(", "3", ")", ",", "\n", "vlight_pos", "=", "None", ",", "vlight_color", "=", "None", ")", ":", "\n", "    ", "\"\"\"generates training image pairs\n    Will generate color image, mask, semantic map, normal map\n    \"\"\"", "\n", "v_", ",", "v_smpl_", "=", "mesh", "[", "'v'", "]", ",", "smpl", "[", "'v'", "]", "\n", "\n", "# render color image", "\n", "# To avoid aliasing, I render the image with 2x resolution and then resize it", "\n", "# See: https://stackoverflow.com/questions/22069167/opencv-how-to-smoothen-boundary", "\n", "u", "=", "_project_vertices", "(", "v_", ",", "img_w", "*", "2", ",", "img_h", "*", "2", ",", "camera_r", ",", "camera_t", ")", "\n", "color_bg", "=", "cv", ".", "resize", "(", "color_bg", ",", "(", "img_w", "*", "2", ",", "img_h", "*", "2", ")", ")", "\n", "img", "=", "_render_color_model_with_lighting", "(", "img_w", "*", "2", ",", "img_h", "*", "2", ",", "v_", ",", "mesh", "[", "'vn'", "]", ",", "\n", "mesh", "[", "'vc'", "]", ",", "mesh", "[", "'f'", "]", ",", "u", ",", "\n", "sh_comps", "=", "sh_comps", ",", "light_c", "=", "light_c", ",", "\n", "vlight_pos", "=", "vlight_pos", ",", "\n", "vlight_color", "=", "vlight_color", ",", "\n", "bg_img", "=", "color_bg", ")", "\n", "img", "=", "cv", ".", "resize", "(", "img", ",", "(", "img_w", ",", "img_h", ")", ")", "\n", "img", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "img", ")", ")", "\n", "\n", "# render silhouette", "\n", "u", "=", "_project_vertices", "(", "v_", ",", "img_w", ",", "img_h", ",", "camera_r", ",", "camera_t", ")", "\n", "msk", "=", "_render_mask", "(", "img_w", ",", "img_h", ",", "v_", ",", "mesh", "[", "'f'", "]", ",", "u", ")", "\n", "msk", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "msk", ")", ")", "\n", "\n", "# render normal maps", "\n", "if", "'n'", "in", "mesh", ":", "\n", "        ", "n_", "=", "mesh", "[", "'n'", "]", "*", "0.5", "+", "0.5", "\n", "", "else", ":", "\n", "        ", "vn", "=", "util", ".", "calc_normal", "(", "mesh", ")", "\n", "n_", "=", "vn", "*", "0.5", "+", "0.5", "\n", "", "nml", "=", "_render_color_model_without_lighting", "(", "img_w", ",", "img_h", ",", "v_", ",", "n_", ",", "mesh", "[", "'f'", "]", ",", "\n", "u", ",", "bg_img", "=", "None", ")", "\n", "nml", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "nml", ")", ")", "\n", "\n", "# render semantic map", "\n", "u", "=", "_project_vertices", "(", "v_smpl_", ",", "img_w", ",", "img_h", ",", "camera_r", ",", "camera_t", ")", "\n", "vc_smpl", "=", "util", ".", "get_smpl_semantic_code", "(", ")", "\n", "smap", "=", "_render_color_model_without_lighting", "(", "img_w", ",", "img_h", ",", "v_smpl_", ",", "vc_smpl", ",", "\n", "smpl", "[", "'f'", "]", ",", "u", ",", "bg_img", "=", "None", ")", "\n", "smap", "=", "np", ".", "float32", "(", "np", ".", "copy", "(", "smap", ")", ")", "\n", "\n", "return", "img", ",", "msk", ",", "nml", ",", "smap", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.Logger.__init__": [[44, 47], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "buffer", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.Logger.set_log_file": [[48, 54], ["open", "util.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "set_log_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "assert", "self", ".", "file", "is", "None", "\n", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "if", "self", ".", "buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "self", ".", "buffer", ")", "\n", "self", ".", "buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.Logger.write": [[55, 65], ["datetime.datetime.now", "datetime.datetime.now.strftime", "print", "util.Logger.file.write", "map"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "def", "write", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "dtstr", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "t_msg", "=", "'[%s]'", "%", "dtstr", "+", "' %s'", "%", "' '", ".", "join", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n", "print", "(", "t_msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "t_msg", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", "+=", "t_msg", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.Logger.flush": [[66, 69], ["util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.__init__": [[83, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", "=", "40", ")", ":", "\n", "        ", "self", ".", "_w", "=", "width", "\n", "self", ".", "_total", "=", "1", "\n", "self", ".", "_curr", "=", "0", "\n", "self", ".", "_curr_str", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.start": [[89, 96], ["sys.stdout.write", "sys.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["", "def", "start", "(", "self", ",", "total_count", ")", ":", "\n", "        ", "self", ".", "_total", "=", "total_count", "\n", "self", ".", "_curr", "=", "0", "\n", "self", ".", "_curr_str", "=", "\"[%s%s] (%d/%d)\"", "%", "(", "''", ",", "' '", "*", "self", ".", "_w", ",", "\n", "self", ".", "_curr", ",", "self", ".", "_total", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "self", ".", "_curr_str", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.count": [[97, 109], ["sys.stdout.write", "sys.stdout.flush", "int", "sys.stdout.write", "sys.stdout.flush", "len"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["", "def", "count", "(", "self", ",", "c", "=", "1", ")", ":", "\n", "# remove previous output", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "\"\\b\"", "*", "len", "(", "self", ".", "_curr_str", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "# update output", "\n", "self", ".", "_curr", "=", "self", ".", "_curr", "+", "c", "\n", "step", "=", "int", "(", "self", ".", "_w", "*", "self", ".", "_curr", "/", "self", ".", "_total", ")", "\n", "self", ".", "_curr_str", "=", "\"[%s%s] (%d/%d)\"", "%", "(", "'#'", "*", "step", ",", "' '", "*", "(", "self", ".", "_w", "-", "step", ")", ",", "\n", "self", ".", "_curr", ",", "self", ".", "_total", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "self", ".", "_curr_str", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.ProgressBar.end": [[110, 116], ["sys.stdout.write", "sys.stdout.flush"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\nFinished. \\n'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "_total", "=", "1", "\n", "self", ".", "_curr", "=", "0", "\n", "self", ".", "_curr_str", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.SmplVtx.__init__": [[126, 138], ["numpy.loadtxt", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "smpl_vtx_std", "=", "np", ".", "loadtxt", "(", "'vertices.txt'", ")", "\n", "min_x", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", ")", "\n", "max_x", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", ")", "\n", "min_y", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", ")", "\n", "max_y", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", ")", "\n", "min_z", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", ")", "\n", "max_z", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", ")", "\n", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", "-", "min_x", ")", "/", "(", "max_x", "-", "min_x", ")", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", "-", "min_y", ")", "/", "(", "max_y", "-", "min_y", ")", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", "-", "min_z", ")", "/", "(", "max_z", "-", "min_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.safe_mkdir": [[74, 80], ["os.path.exists", "os.mkdir", "logger.write"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["def", "safe_mkdir", "(", "dir", ")", ":", "\n", "    ", "\"\"\"performs mkdir after checking existence\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dir", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "write", "(", "'WARNING: %s already exists. '", "%", "dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.get_smpl_semantic_code": [[143, 146], ["None"], "function", ["None"], ["def", "get_smpl_semantic_code", "(", ")", ":", "\n", "    ", "\"\"\"gets semantic code definition on SMPL model\"\"\"", "\n", "return", "_smpl_vtx", ".", "smpl_vtx_std", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_bg_img": [[150, 175], ["len", "numpy.random.randint", "os.path.join", "cv2.imread", "cv2.cvtColor", "cv2.resize", "numpy.ones", "len", "cv2.cvtColor", "len", "len", "cv2.cvtColor", "len"], "function", ["None"], ["", "def", "sample_bg_img", "(", "bg_list", ",", "bg_root", ",", "w", "=", "256", ",", "h", "=", "256", ")", ":", "\n", "    ", "\"\"\"samples a background image and pre-processes it\"\"\"", "\n", "n", "=", "len", "(", "bg_list", ")", "\n", "i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n", ",", "1", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "bg_root", ",", "bg_list", "[", "i", "[", "0", "]", "]", ")", "\n", "img", "=", "cv", ".", "imread", "(", "img_dir", ")", "\n", "if", "img", "is", "None", ":", "\n", "        ", "return", "np", ".", "ones", "(", "(", "h", ",", "w", ",", "3", ")", ",", "np", ".", "float32", ")", ",", "'none'", "\n", "\n", "# convert color", "\n", "", "if", "len", "(", "img", ".", "shape", ")", "==", "2", "or", "(", "len", "(", "img", ".", "shape", ")", "==", "3", "and", "img", ".", "shape", "[", "2", "]", "==", "1", ")", ":", "\n", "        ", "img", "=", "cv", ".", "cvtColor", "(", "img", ",", "cv", ".", "COLOR_GRAY2RGB", ")", "\n", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "3", "and", "img", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "        ", "img", "=", "cv", ".", "cvtColor", "(", "img", ",", "cv", ".", "COLOR_BGR2RGB", ")", "\n", "", "elif", "len", "(", "img", ".", "shape", ")", "==", "3", "and", "img", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "        ", "img", "=", "cv", ".", "cvtColor", "(", "img", ",", "cv", ".", "COLOR_BGRA2RGB", ")", "\n", "\n", "# crop", "\n", "", "w_", ",", "h_", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "img", "=", "img", "[", "(", "h_", "//", "2", "-", "128", ")", ":", "(", "h_", "//", "2", "+", "128", ")", ",", "(", "w_", "//", "2", "-", "128", ")", ":", "(", "w_", "//", "2", "+", "128", ")", ",", ":", "]", "/", "255.0", "\n", "\n", "if", "not", "w", "==", "256", "or", "not", "h", "==", "256", ":", "\n", "        ", "img", "=", "cv", ".", "resize", "(", "img", ",", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "return", "img", ",", "bg_list", "[", "i", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_sh_component": [[177, 182], ["numpy.array", "numpy.random.rand"], "function", ["None"], ["", "def", "sample_sh_component", "(", ")", ":", "\n", "    ", "\"\"\"samples Spherical Harmonics components\"\"\"", "\n", "sh", "=", "np", ".", "array", "(", "[", "3.5", ",", "0", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "sh", "+=", "np", ".", "random", ".", "rand", "(", "9", ")", "*", "1.4", "-", "0.7", "# sample between [-0.7, 0.7]", "\n", "return", "sh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.sample_verticle_lighting": [[184, 192], ["numpy.zeros", "numpy.random.randn", "numpy.ones", "numpy.random.rand"], "function", ["None"], ["", "def", "sample_verticle_lighting", "(", "light_num", "=", "3", ")", ":", "\n", "    ", "\"\"\"samples vertical lighting position and power (color)\"\"\"", "\n", "light_pos", "=", "np", ".", "zeros", "(", "(", "light_num", ",", "3", ")", ")", "\n", "light_pos", "[", ":", ",", "1", "]", "=", "10", "# prefer vertical lighting", "\n", "light_pos", "+=", "np", ".", "random", ".", "randn", "(", "light_num", ",", "3", ")", "*", "2", "# randomly move lighting source", "\n", "light_color", "=", "np", ".", "ones", "(", "3", ")", "*", "0.75", "\n", "light_color", "+=", "np", ".", "random", ".", "rand", "(", ")", "*", "0.5", "-", "0.25", "\n", "return", "light_pos", ",", "light_color", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_transform_params": [[194, 224], ["numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "min", "max", "min", "max", "min", "max", "max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.array", "max"], "function", ["None"], ["", "def", "calc_transform_params", "(", "mesh", ",", "smpl", ",", "hb_ratio", "=", "1.0", ",", "scale_noise", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the transformation params used to transform the mesh to unit\n    bounding box centered at the origin. Returns translation and scale.\n    Note that to use the returned parameters, you should perform translation\n    first, followed by scaling\n    \"\"\"", "\n", "min_x", "=", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", "\n", "max_x", "=", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", "\n", "min_y", "=", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", "\n", "max_y", "=", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", "\n", "min_z", "=", "np", ".", "min", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", "\n", "max_z", "=", "np", ".", "max", "(", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", "\n", "\n", "min_x", "=", "min", "(", "np", ".", "min", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", ",", "min_x", ")", "\n", "max_x", "=", "max", "(", "np", ".", "max", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "0", "]", ")", ",", "max_x", ")", "\n", "min_y", "=", "min", "(", "np", ".", "min", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", ",", "min_y", ")", "\n", "max_y", "=", "max", "(", "np", ".", "max", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "1", "]", ")", ",", "max_y", ")", "\n", "min_z", "=", "min", "(", "np", ".", "min", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", ",", "min_z", ")", "\n", "max_z", "=", "max", "(", "np", ".", "max", "(", "smpl", "[", "'v'", "]", "[", ":", ",", "2", "]", ")", ",", "max_z", ")", "\n", "\n", "trans", "=", "-", "np", ".", "array", "(", "[", "(", "min_x", "+", "max_x", ")", "/", "2", ",", "(", "min_y", "+", "max_y", ")", "/", "2", ",", "\n", "(", "min_z", "+", "max_z", ")", "/", "2", "]", ")", "\n", "\n", "scale_inv", "=", "max", "(", "max", "(", "(", "max_x", "-", "min_x", ")", "/", "hb_ratio", ",", "(", "max_y", "-", "min_y", ")", ")", ",", "\n", "(", "max_z", "-", "min_z", ")", "/", "hb_ratio", ")", "\n", "scale_inv", "*=", "(", "1.05", "+", "scale_noise", ")", "\n", "scale_inv", "+=", "1e-3", "# avoid division by zero", "\n", "scale", "=", "1.0", "/", "scale_inv", "\n", "return", "trans", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_normal": [[228, 232], ["opendr.lighting.VertNormals"], "function", ["None"], ["", "def", "calc_normal", "(", "mesh", ")", ":", "\n", "    ", "\"\"\"calculates surface normal\"\"\"", "\n", "n", "=", "VertNormals", "(", "f", "=", "mesh", "[", "'f'", "]", ",", "v", "=", "mesh", "[", "'v'", "]", ")", "\n", "return", "n", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.flip_axis_in_place": [[234, 245], ["len"], "function", ["None"], ["", "def", "flip_axis_in_place", "(", "mesh", ",", "x_sign", ",", "y_sign", ",", "z_sign", ")", ":", "\n", "    ", "\"\"\"flips model along some axes\"\"\"", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", "*=", "x_sign", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", "*=", "y_sign", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", "*=", "z_sign", "\n", "\n", "if", "mesh", "[", "'vn'", "]", "is", "not", "None", "and", "len", "(", "mesh", "[", "'vn'", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "mesh", "[", "'vn'", "]", "[", ":", ",", "0", "]", "*=", "x_sign", "\n", "mesh", "[", "'vn'", "]", "[", ":", ",", "1", "]", "*=", "y_sign", "\n", "mesh", "[", "'vn'", "]", "[", ":", ",", "2", "]", "*=", "z_sign", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.transform_mesh_in_place": [[247, 259], ["None"], "function", ["None"], ["", "def", "transform_mesh_in_place", "(", "mesh", ",", "trans", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Transforms mesh\n    Note that it will perform translation first, followed by scaling\n    Also note that the transformation happens in-place\n    \"\"\"", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "0", "]", "+=", "trans", "[", "0", "]", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "1", "]", "+=", "trans", "[", "1", "]", "\n", "mesh", "[", "'v'", "]", "[", ":", ",", "2", "]", "+=", "trans", "[", "2", "]", "\n", "\n", "mesh", "[", "'v'", "]", "*=", "scale", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.rotate_model_in_place": [[261, 278], ["cv2.Rodrigues", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.matmul", "mesh[].transpose", "numpy.matmul", "np.matmul.transpose", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.matmul", "mesh[].transpose", "numpy.matmul", "np.matmul.transpose", "len"], "function", ["None"], ["", "def", "rotate_model_in_place", "(", "mesh", ",", "x_r", ",", "y_r", ",", "z_r", ")", ":", "\n", "    ", "\"\"\"rotates model (x-axis first, then y-axis, and then z-axis)\"\"\"", "\n", "mat_x", ",", "_", "=", "cv", ".", "Rodrigues", "(", "np", ".", "asarray", "(", "[", "x_r", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "mat_y", ",", "_", "=", "cv", ".", "Rodrigues", "(", "np", ".", "asarray", "(", "[", "0", ",", "y_r", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "mat_z", ",", "_", "=", "cv", ".", "Rodrigues", "(", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "z_r", "]", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "mat", "=", "np", ".", "matmul", "(", "np", ".", "matmul", "(", "mat_x", ",", "mat_y", ")", ",", "mat_z", ")", "\n", "\n", "v", "=", "mesh", "[", "'v'", "]", ".", "transpose", "(", ")", "\n", "v", "=", "np", ".", "matmul", "(", "mat", ",", "v", ")", "\n", "mesh", "[", "'v'", "]", "=", "v", ".", "transpose", "(", ")", "\n", "\n", "if", "'vn'", "in", "mesh", "and", "mesh", "[", "'vn'", "]", "is", "not", "None", "and", "len", "(", "mesh", "[", "'vn'", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "n", "=", "mesh", "[", "'vn'", "]", ".", "transpose", "(", ")", "\n", "n", "=", "np", ".", "matmul", "(", "mat", ",", "n", ")", "\n", "mesh", "[", "'vn'", "]", "=", "n", ".", "transpose", "(", ")", "\n", "\n", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.voxelize": [[282, 296], ["subprocess.call", "numpy.zeros", "subprocess.call", "open", "fp.readlines", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["", "def", "voxelize", "(", "mesh_path", ",", "dim_h", ",", "dim_w", ",", "voxelizer_exe_path", ")", ":", "\n", "    ", "\"\"\"voxelizes the mesh using the given binary executable program\"\"\"", "\n", "call", "(", "[", "os", ".", "path", ".", "join", "(", "voxelizer_exe_path", ",", "'voxelizer'", ")", ",", "mesh_path", ",", "\n", "mesh_path", "+", "'.occvox'", "]", ")", "\n", "\n", "dim_x", ",", "dim_y", ",", "dim_z", "=", "dim_w", ",", "dim_h", ",", "dim_w", "\n", "new_volume", "=", "np", ".", "zeros", "(", "(", "dim_x", ",", "dim_y", ",", "dim_z", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "with", "open", "(", "mesh_path", "+", "'.occvox'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "indices", "=", "line", ".", "split", "(", "' '", ")", "\n", "vx", ",", "vy", ",", "vz", "=", "int", "(", "indices", "[", "0", "]", ")", ",", "int", "(", "indices", "[", "1", "]", ")", ",", "int", "(", "indices", "[", "2", "]", ")", "\n", "new_volume", "[", "vx", ",", "vy", ",", "vz", "]", "=", "1", "\n", "", "", "call", "(", "[", "'rm'", ",", "mesh_path", "+", "'.occvox'", "]", ")", "\n", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_vmap_volume": [[298, 333], ["util.get_smpl_semantic_code", "numpy.zeros", "scipy.spatial.KDTree", "range", "range", "range", "numpy.array", "scipy.spatial.KDTree.query", "numpy.zeros", "zip", "math.exp"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.get_smpl_semantic_code"], ["", "def", "calc_vmap_volume", "(", "smpl_volume", ",", "smpl_v", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "\"\"\"calculates the semantic volume\"\"\"", "\n", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "smpl_std_v", "=", "get_smpl_semantic_code", "(", ")", "\n", "\n", "x_dim", "=", "smpl_volume", ".", "shape", "[", "0", "]", "\n", "y_dim", "=", "smpl_volume", ".", "shape", "[", "1", "]", "\n", "z_dim", "=", "smpl_volume", ".", "shape", "[", "2", "]", "\n", "smpl_v_volume", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# for each solid voxel, searches its KNN on SMPL model, and averages", "\n", "# the neighbors' semantic code to obtain the voxel's semantic code", "\n", "kd_tree", "=", "scipy", ".", "spatial", ".", "KDTree", "(", "smpl_v", ")", "\n", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "        ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "            ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                ", "if", "smpl_volume", "[", "xx", ",", "yy", ",", "zz", "]", ">", "0", ":", "\n", "                    ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "dist_list", ",", "idx_list", "=", "kd_tree", ".", "query", "(", "pt", ",", "k", "=", "4", ")", "\n", "\n", "sum_weight", "=", "0", "\n", "v_map", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "for", "d", ",", "i", "in", "zip", "(", "dist_list", ",", "idx_list", ")", ":", "\n", "                        ", "w", "=", "math", ".", "exp", "(", "-", "d", "*", "d", "/", "sigma", ")", "\n", "sum_weight", "+=", "w", "\n", "v_map", "+=", "w", "*", "smpl_std_v", "[", "i", ",", ":", "]", "\n", "", "v_map", "/=", "sum_weight", "\n", "smpl_v_volume", "[", "xx", ",", "yy", ",", "zz", ",", ":", "]", "=", "v_map", "\n", "\n", "", "", "", "", "return", "smpl_v_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.calc_vmap_volume_fast": [[335, 379], ["util.get_smpl_semantic_code", "numpy.zeros", "scipy.spatial.KDTree", "numpy.where", "numpy.zeros", "scipy.spatial.KDTree.query", "numpy.exp", "numpy.sum", "numpy.zeros", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.zeros", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.get_smpl_semantic_code"], ["", "def", "calc_vmap_volume_fast", "(", "smpl_volume", ",", "smpl_v", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "\"\"\"calculates the semantic volume without for-loop\"\"\"", "\n", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "smpl_std_v", "=", "get_smpl_semantic_code", "(", ")", "\n", "\n", "x_dim", "=", "smpl_volume", ".", "shape", "[", "0", "]", "\n", "y_dim", "=", "smpl_volume", ".", "shape", "[", "1", "]", "\n", "z_dim", "=", "smpl_volume", ".", "shape", "[", "2", "]", "\n", "smpl_v_volume", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "kd_tree", "=", "scipy", ".", "spatial", ".", "KDTree", "(", "smpl_v", ")", "\n", "\n", "# gets the solid voxels", "\n", "pt_entry", "=", "np", ".", "where", "(", "smpl_volume", ">", "0", ")", "\n", "pt_num", "=", "pt_entry", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "pt_coord", "=", "np", ".", "zeros", "(", "(", "pt_num", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pt_coord", "[", ":", ",", "0", "]", "=", "(", "pt_entry", "[", "0", "]", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "\n", "pt_coord", "[", ":", ",", "1", "]", "=", "(", "pt_entry", "[", "1", "]", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", "\n", "pt_coord", "[", ":", ",", "2", "]", "=", "(", "pt_entry", "[", "2", "]", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "\n", "\n", "# for each solid voxel, searches its KNN on SMPL model, and averages", "\n", "# the neighbors' semantic code to obtain the voxel's semantic code", "\n", "dist_list", ",", "idx_list", "=", "kd_tree", ".", "query", "(", "pt_coord", ",", "k", "=", "4", ")", "# both variables have shape (k, 4)", "\n", "w", "=", "np", ".", "exp", "(", "-", "dist_list", "*", "dist_list", "/", "sigma", ")", "\n", "sum_weight", "=", "np", ".", "sum", "(", "w", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "w", "/=", "sum_weight", "\n", "v_map", "=", "np", ".", "zeros", "(", "(", "pt_num", ",", "3", ")", ")", "\n", "v_map", "+=", "np", ".", "reshape", "(", "w", "[", ":", ",", "0", "]", ",", "(", "-", "1", ",", "1", ")", ")", "*", "smpl_std_v", "[", "idx_list", "[", ":", ",", "0", "]", ",", ":", "]", "\n", "v_map", "+=", "np", ".", "reshape", "(", "w", "[", ":", ",", "1", "]", ",", "(", "-", "1", ",", "1", ")", ")", "*", "smpl_std_v", "[", "idx_list", "[", ":", ",", "1", "]", ",", ":", "]", "\n", "v_map", "+=", "np", ".", "reshape", "(", "w", "[", ":", ",", "2", "]", ",", "(", "-", "1", ",", "1", ")", ")", "*", "smpl_std_v", "[", "idx_list", "[", ":", ",", "2", "]", ",", ":", "]", "\n", "v_map", "+=", "np", ".", "reshape", "(", "w", "[", ":", ",", "3", "]", ",", "(", "-", "1", ",", "1", ")", ")", "*", "smpl_std_v", "[", "idx_list", "[", ":", ",", "3", "]", ",", ":", "]", "\n", "\n", "# restores the semantic code list into a volume", "\n", "channel_entry", "=", "(", "(", "np", ".", "zeros", "(", "(", "pt_num", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", ")", ",", "\n", "(", "np", ".", "ones", "(", "(", "pt_num", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", ")", ",", "\n", "(", "2", "*", "np", ".", "ones", "(", "(", "pt_num", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", ",", ")", ")", "\n", "smpl_v_volume", "[", "pt_entry", "+", "channel_entry", "[", "0", "]", "]", "=", "v_map", "[", ":", ",", "0", "]", "\n", "smpl_v_volume", "[", "pt_entry", "+", "channel_entry", "[", "1", "]", "]", "=", "v_map", "[", ":", ",", "1", "]", "\n", "smpl_v_volume", "[", "pt_entry", "+", "channel_entry", "[", "2", "]", "]", "=", "v_map", "[", ":", ",", "2", "]", "\n", "\n", "return", "smpl_v_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.util.save_v_volume": [[381, 398], ["open", "range", "range", "range", "numpy.array", "fp.write", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "save_v_volume", "(", "v_volume", ",", "fname", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "v_volume", ".", "shape", "[", "0", "]", ",", "v_volume", ".", "shape", "[", "1", "]", ",", "v_volume", ".", "shape", "[", "2", "]", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "            ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "                ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                    ", "if", "(", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", ":", "]", "!=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "any", "(", ")", ":", "\n", "                        ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f %f %f %f\\n'", "%", "\n", "(", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "pt", "[", "2", "]", ",", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "0", "]", ",", "\n", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "1", "]", ",", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "2", "]", ")", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.ObjIO.load_obj_data": [[5, 80], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "len", "np.asarray.append", "np.asarray.append", "np.asarray.append", "ObjIO.load_obj_data.segElementData"], "function", ["None"], ["def", "load_obj_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.ObjIO.load_obj_data_binary": [[82, 155], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "np.asarray.append", "np.asarray.append", "np.asarray.append", "ObjIO.load_obj_data.segElementData"], "function", ["None"], ["", "def", "load_obj_data_binary", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.ObjIO.save_obj_data": [[157, 199], ["open", "fp.write", "fp.write", "fp.write", "zip", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "save_obj_data", "(", "model", ",", "filename", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.ObjIO.save_obj_data_binary": [[201, 243], ["open", "fp.write", "fp.write", "fp.write", "zip", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "", "", "", "def", "save_obj_data_binary", "(", "model", ",", "filename", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.ObjIO.save_obj_data_binary_with_corner": [[245, 315], ["open", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "zip", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "", "", "", "def", "save_obj_data_binary_with_corner", "(", "model", ",", "min_corner", ",", "max_corner", ",", "corner_size", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Save Obj data with the corner of the bounding box\n    This small feature will be useful when you use some 3d software to voxelize the mesh,\n    because it can help you avoid complex alignments.\n    \"\"\"", "\n", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "# add corner", "\n", "", "", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", "+", "corner_size", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", "+", "corner_size", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", "+", "corner_size", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", "-", "corner_size", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", "-", "corner_size", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", "-", "corner_size", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "\n", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n", "# add corner", "\n", "", "", "", "vid_start", "=", "model", "[", "'v'", "]", ".", "size", "/", "3", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "2", ",", "vid_start", "+", "3", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "4", ",", "vid_start", "+", "2", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "3", ",", "vid_start", "+", "4", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "2", ",", "vid_start", "+", "4", ",", "vid_start", "+", "3", ")", ")", "\n", "\n", "vid_start", "+=", "4", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "2", ",", "vid_start", "+", "3", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "4", ",", "vid_start", "+", "2", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "3", ",", "vid_start", "+", "4", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "2", ",", "vid_start", "+", "4", ",", "vid_start", "+", "3", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.RigidTransform.compute_r": [[32, 34], ["[].dot", "chumpy.utils.col", "opendr.cvwrap.cv2.Rodrigues"], "methods", ["None"], ["def", "compute_r", "(", "self", ")", ":", "\n", "        ", "return", "(", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "[", "0", "]", ".", "dot", "(", "self", ".", "v", ".", "r", ".", "T", ")", "+", "col", "(", "self", ".", "t", ".", "r", ")", ")", ".", "T", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.RigidTransform.compute_dr_wrt": [[35, 62], ["opendr.cvwrap.cv2.Rodrigues", "rot_dr.reshape.reshape.reshape", "numpy.einsum().reshape", "numpy.repeat", "numpy.repeat", "numpy.vstack", "scipy.csc_matrix", "numpy.arange", "numpy.ones", "scipy.csc_matrix", "opendr.cvwrap.cv2.Rodrigues", "numpy.arange", "numpy.arange().reshape", "hasattr", "len", "numpy.einsum", "numpy.ones.ravel", "numpy.arange", "range", "numpy.arange.ravel", "numpy.repeat.ravel"], "methods", ["None"], ["", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "\n", "        ", "if", "wrt", "not", "in", "(", "self", ".", "v", ",", "self", ".", "rt", ",", "self", ".", "t", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "wrt", "is", "self", ".", "t", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'_drt'", ")", "or", "self", ".", "_drt", ".", "shape", "[", "0", "]", "!=", "self", ".", "v", ".", "r", ".", "size", ":", "\n", "                ", "IS", "=", "np", ".", "arange", "(", "self", ".", "v", ".", "r", ".", "size", ")", "\n", "JS", "=", "IS", "%", "3", "\n", "data", "=", "np", ".", "ones", "(", "len", "(", "IS", ")", ")", "\n", "self", ".", "_drt", "=", "sp", ".", "csc_matrix", "(", "(", "data", ",", "(", "IS", ",", "JS", ")", ")", ")", "\n", "", "return", "self", ".", "_drt", "\n", "\n", "", "if", "wrt", "is", "self", ".", "rt", ":", "\n", "            ", "rot", ",", "rot_dr", "=", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "\n", "rot_dr", "=", "rot_dr", ".", "reshape", "(", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "dr", "=", "np", ".", "einsum", "(", "'abc, zc -> zba'", ",", "rot_dr", ",", "self", ".", "v", ".", "r", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "return", "dr", "\n", "\n", "", "if", "wrt", "is", "self", ".", "v", ":", "\n", "            ", "rot", "=", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "[", "0", "]", "\n", "\n", "IS", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "self", ".", "v", ".", "r", ".", "size", ")", ",", "3", ")", "\n", "JS", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "self", ".", "v", ".", "r", ".", "size", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "3", ",", "axis", "=", "0", ")", "\n", "data", "=", "np", ".", "vstack", "(", "[", "rot", "for", "i", "in", "range", "(", "self", ".", "v", ".", "r", ".", "size", "/", "3", ")", "]", ")", "\n", "result", "=", "sp", ".", "csc_matrix", "(", "(", "data", ".", "ravel", "(", ")", ",", "(", "IS", ".", "ravel", "(", ")", ",", "JS", ".", "ravel", "(", ")", ")", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.is_valid": [[67, 78], ["any", "any", "any", "len"], "methods", ["None"], ["def", "is_valid", "(", "self", ")", ":", "\n", "        ", "if", "any", "(", "[", "len", "(", "v", ".", "r", ".", "shape", ")", ">", "1", "for", "v", "in", "[", "self", ".", "rt", ",", "self", ".", "t", ",", "self", ".", "f", ",", "self", ".", "c", ",", "self", ".", "k", "]", "]", ")", ":", "\n", "            ", "return", "False", ",", "'rt, t, f, c, and k must be 1D'", "\n", "\n", "", "if", "any", "(", "[", "v", ".", "r", ".", "size", "!=", "3", "for", "v", "in", "[", "self", ".", "rt", ",", "self", ".", "t", "]", "]", ")", ":", "\n", "            ", "return", "False", ",", "'rt and t must have size=3'", "\n", "\n", "", "if", "any", "(", "[", "v", ".", "r", ".", "size", "!=", "2", "for", "v", "in", "[", "self", ".", "f", ",", "self", ".", "c", "]", "]", ")", ":", "\n", "            ", "return", "False", ",", "'f and c must have size=2'", "\n", "\n", "", "return", "True", ",", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.compute_r": [[79, 81], ["MyCamera.ProjectPointsOrthogonal.r_and_derivatives[].squeeze"], "methods", ["None"], ["", "def", "compute_r", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "r_and_derivatives", "[", "0", "]", ".", "squeeze", "(", ")", "\n", "# return self.get_r_and_derivatives(self.v.r, self.rt.r, self.t.r, self.f.r, self.c.r, self.k.r)[0].squeeze()", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.compute_dr_wrt": [[83, 106], ["numpy.asarray().ravel", "numpy.repeat", "numpy.asarray().ravel", "scipy.csc_matrix", "opendr.cvwrap.cv2.Rodrigues", "numpy.arange", "numpy.asarray", "numpy.asarray", "j[].dot", "numpy.repeat", "numpy.arange().reshape", "numpy.arange"], "methods", ["None"], ["", "def", "compute_dr_wrt", "(", "self", ",", "wrt", ")", ":", "\n", "        ", "if", "wrt", "not", "in", "[", "self", ".", "v", ",", "self", ".", "rt", ",", "self", ".", "t", ",", "self", ".", "f", ",", "self", ".", "c", ",", "self", ".", "k", "]", ":", "\n", "            ", "return", "None", "\n", "\n", "", "j", "=", "self", ".", "r_and_derivatives", "[", "1", "]", "\n", "if", "wrt", "is", "self", ".", "rt", ":", "\n", "            ", "return", "j", "[", ":", ",", ":", "3", "]", "\n", "", "elif", "wrt", "is", "self", ".", "t", ":", "\n", "            ", "return", "j", "[", ":", ",", "3", ":", "6", "]", "\n", "", "elif", "wrt", "is", "self", ".", "f", ":", "\n", "            ", "return", "j", "[", ":", ",", "6", ":", "8", "]", "\n", "", "elif", "wrt", "is", "self", ".", "c", ":", "\n", "            ", "return", "j", "[", ":", ",", "8", ":", "10", "]", "\n", "", "elif", "wrt", "is", "self", ".", "k", ":", "\n", "            ", "return", "j", "[", ":", ",", "10", ":", "10", "+", "self", ".", "k", ".", "size", "]", "\n", "", "elif", "wrt", "is", "self", ".", "v", ":", "\n", "            ", "rot", "=", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "[", "0", "]", "\n", "data", "=", "np", ".", "asarray", "(", "j", "[", ":", ",", "3", ":", "6", "]", ".", "dot", "(", "rot", ")", ",", "order", "=", "'C'", ")", ".", "ravel", "(", ")", "\n", "IS", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "self", ".", "v", ".", "r", ".", "size", "*", "2", "/", "3", ")", ",", "3", ")", "\n", "JS", "=", "np", ".", "asarray", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "self", ".", "v", ".", "r", ".", "size", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "2", ",", "axis", "=", "0", ")", ",", "\n", "order", "=", "'C'", ")", ".", "ravel", "(", ")", "\n", "result", "=", "sp", ".", "csc_matrix", "(", "(", "data", ",", "(", "IS", ",", "JS", ")", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.camera_mtx": [[134, 139], ["chumpy.depends_on", "numpy.array"], "methods", ["None"], ["", "", "@", "depends_on", "(", "'f'", ",", "'c'", ")", "\n", "def", "camera_mtx", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "\n", "[", "[", "self", ".", "f", ".", "r", "[", "0", "]", ",", "0", ",", "self", ".", "c", ".", "r", "[", "0", "]", "]", ",", "[", "0.", ",", "self", ".", "f", ".", "r", "[", "1", "]", ",", "self", ".", "c", ".", "r", "[", "1", "]", "]", ",", "[", "0.", ",", "0.", ",", "0.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.view_mtx": [[140, 144], ["chumpy.depends_on", "numpy.hstack", "opendr.cvwrap.cv2.Rodrigues", "chumpy.utils.col"], "methods", ["None"], ["", "@", "depends_on", "(", "'t'", ",", "'rt'", ")", "\n", "def", "view_mtx", "(", "self", ")", ":", "\n", "        ", "R", "=", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "[", "0", "]", "\n", "return", "np", ".", "hstack", "(", "(", "R", ",", "col", "(", "self", ".", "t", ".", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.r_and_derivatives": [[145, 153], ["chumpy.depends_on", "MyCamera.ProjectPointsOrthogonal.v.r.reshape().copy", "numpy.zeros", "numpy.matmul", "MyCamera.ProjectPointsOrthogonal.v.r.reshape", "MyCamera.ProjectPointsOrthogonal.view_mtx[].transpose"], "methods", ["None"], ["", "@", "depends_on", "(", "'v'", ",", "'rt'", ",", "'t'", ",", "'f'", ",", "'c'", ",", "'k'", ")", "\n", "def", "r_and_derivatives", "(", "self", ")", ":", "\n", "        ", "v", "=", "self", ".", "v", ".", "r", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ".", "copy", "(", ")", "\n", "v_proj", "=", "np", ".", "matmul", "(", "v", ",", "self", ".", "view_mtx", "[", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", ")", ")", "+", "self", ".", "view_mtx", "[", ":", "3", ",", "3", "]", "\n", "v_proj", "=", "v_proj", "[", ":", ",", ":", "2", "]", "\n", "v_proj", "=", "v_proj", "*", "self", ".", "f", ".", "r", "[", "np", ".", "newaxis", ",", ":", "]", "+", "self", ".", "c", ".", "r", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "J", "=", "np", ".", "zeros", "(", "(", "self", ".", "v", ".", "r", ".", "shape", "[", "0", "]", ",", "10", "+", "self", ".", "k", ".", "size", ")", ")", "\n", "return", "v_proj", ",", "J", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.ProjectPointsOrthogonal.view_matrix": [[157, 161], ["numpy.hstack", "opendr.cvwrap.cv2.Rodrigues", "chumpy.utils.col"], "methods", ["None"], ["", "@", "property", "\n", "def", "view_matrix", "(", "self", ")", ":", "\n", "        ", "R", "=", "cv2", ".", "Rodrigues", "(", "self", ".", "rt", ".", "r", ")", "[", "0", "]", "\n", "return", "np", ".", "hstack", "(", "(", "R", ",", "col", "(", "self", ".", "t", ".", "r", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.TrainingDataPreparation.MyCamera.RigidTransformSlow": [[20, 27], ["chumpy.Ch", "len", "chumpy.Ch.set", "v.dot", "opendr.geometry.Rodrigues"], "function", ["None"], ["def", "RigidTransformSlow", "(", "**", "kwargs", ")", ":", "\n", "# Returns a Ch object with dterms 'v', 'rt', and 't'", "\n", "\n", "    ", "result", "=", "Ch", "(", "lambda", "v", ",", "rt", ",", "t", ":", "v", ".", "dot", "(", "Rodrigues", "(", "rt", "=", "rt", ")", ")", "+", "t", ")", "\n", "if", "len", "(", "kwargs", ")", ">", "0", ":", "\n", "        ", "result", ".", "set", "(", "**", "kwargs", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.THUmanDataset.cam_param_usage.load_obj_data": [[4, 77], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "np.asarray.append", "np.asarray.append", "np.asarray.append", "cam_param_usage.load_obj_data.segElementData"], "function", ["None"], ["def", "load_obj_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.load_volume": [[22, 28], ["scipy.loadmat", "numpy.transpose", "print"], "function", ["None"], ["def", "load_volume", "(", "vol_dir", ")", ":", "\n", "    ", "vol", "=", "sio", ".", "loadmat", "(", "vol_dir", ")", "\n", "vol", "=", "vol", "[", "'mesh_volume'", "]", "\n", "vol", "=", "np", ".", "transpose", "(", "vol", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "print", "(", "'volume loaded. volume.shape:'", ",", "vol", ".", "shape", ")", "\n", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.extract_orig_mesh": [[30, 44], ["skimage.measure.marching_cubes_lewiner", "dict", "CommonUtil.calc_normal", "print", "print", "print", "len", "type", "type", "type"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.calc_normal"], ["", "def", "extract_orig_mesh", "(", "vol", ")", ":", "\n", "    ", "assert", "len", "(", "vol", ".", "shape", ")", "==", "3", "\n", "vertices", ",", "simplices", ",", "normals", ",", "_", "=", "measure", ".", "marching_cubes_lewiner", "(", "vol", ",", "0.5", ")", "\n", "vertices", "=", "vertices", "*", "2.0", "\n", "mesh", "=", "dict", "(", ")", "\n", "mesh", "[", "'v'", "]", "=", "vertices", "\n", "mesh", "[", "'f'", "]", "=", "simplices", "\n", "mesh", "[", "'f'", "]", "=", "mesh", "[", "'f'", "]", "[", ":", ",", "(", "1", ",", "0", ",", "2", ")", "]", "\n", "mesh", "[", "'vn'", "]", "=", "util", ".", "calc_normal", "(", "mesh", ")", "\n", "print", "(", "'mesh[v] ='", ",", "type", "(", "mesh", "[", "'v'", "]", ")", ",", "mesh", "[", "'v'", "]", ".", "shape", ")", "\n", "print", "(", "'mesh[vn] ='", ",", "type", "(", "mesh", "[", "'vn'", "]", ")", ",", "mesh", "[", "'vn'", "]", ".", "shape", ")", "\n", "print", "(", "'mesh[f] ='", ",", "type", "(", "mesh", "[", "'f'", "]", ")", ",", "mesh", "[", "'f'", "]", ".", "shape", ")", "\n", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.upsample_mesh": [[46, 97], ["dict", "len", "numpy.vstack", "list", "dict", "numpy.asarray", "numpy.copy", "numpy.vstack", "list", "numpy.asarray", "numpy.copy", "numpy.vstack", "list.append", "list.append", "list.append", "list.append", "numpy.hstack", "numpy.hstack", "numpy.hstack", "str", "str", "np.asarray.append", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str", "str", "len", "len", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "upsample_mesh", "(", "mesh", ")", ":", "\n", "    ", "new_mesh", "=", "dict", "(", ")", "\n", "orig_v_num", "=", "len", "(", "mesh", "[", "'v'", "]", ")", "\n", "# find out edges (without repetition)", "\n", "edges", "=", "np", ".", "vstack", "(", "[", "np", ".", "hstack", "(", "[", "mesh", "[", "'f'", "]", "[", ":", ",", "0", ":", "1", "]", ",", "mesh", "[", "'f'", "]", "[", ":", ",", "1", ":", "2", "]", "]", ")", ",", "\n", "np", ".", "hstack", "(", "[", "mesh", "[", "'f'", "]", "[", ":", ",", "1", ":", "2", "]", ",", "mesh", "[", "'f'", "]", "[", ":", ",", "2", ":", "3", "]", "]", ")", ",", "\n", "np", ".", "hstack", "(", "[", "mesh", "[", "'f'", "]", "[", ":", ",", "2", ":", "3", "]", ",", "mesh", "[", "'f'", "]", "[", ":", ",", "0", ":", "1", "]", "]", ")", "]", ")", "\n", "\n", "# constructs a new edge array without repetition", "\n", "edges_wo_rep", "=", "list", "(", ")", "\n", "edges_dict", "=", "dict", "(", ")", "\n", "for", "e", "in", "edges", ":", "\n", "        ", "if", "e", "[", "0", "]", ">", "e", "[", "1", "]", ":", "\n", "            ", "e", "[", "0", "]", ",", "e", "[", "1", "]", "=", "e", "[", "1", "]", ",", "e", "[", "0", "]", "\n", "", "k1", "=", "str", "(", "e", "[", "0", "]", ")", "+", "'_'", "+", "str", "(", "e", "[", "1", "]", ")", "\n", "k2", "=", "str", "(", "e", "[", "1", "]", ")", "+", "'_'", "+", "str", "(", "e", "[", "0", "]", ")", "\n", "if", "k1", "not", "in", "edges_dict", "and", "k2", "not", "in", "edges_dict", ":", "\n", "            ", "edges_dict", "[", "k1", "]", "=", "len", "(", "edges_wo_rep", ")", "+", "orig_v_num", "\n", "edges_dict", "[", "k2", "]", "=", "len", "(", "edges_wo_rep", ")", "+", "orig_v_num", "\n", "edges_wo_rep", ".", "append", "(", "e", ")", "\n", "", "", "edges_wo_rep", "=", "np", ".", "asarray", "(", "edges_wo_rep", ")", "\n", "\n", "# upsamples point cloud by dividing edges", "\n", "new_v", "=", "np", ".", "copy", "(", "mesh", "[", "'v'", "]", ")", "\n", "new_v_middle", "=", "(", "new_v", "[", "edges_wo_rep", "[", ":", ",", "0", "]", ",", ":", "]", "+", "\n", "new_v", "[", "edges_wo_rep", "[", ":", ",", "1", "]", ",", ":", "]", ")", "/", "2.0", "\n", "new_v", "=", "np", ".", "vstack", "(", "[", "new_v", ",", "new_v_middle", "]", ")", "\n", "new_mesh", "[", "'v'", "]", "=", "new_v", "\n", "\n", "# upsamples point normals", "\n", "if", "'vn'", "in", "mesh", "and", "mesh", "[", "'vn'", "]", "is", "not", "None", "and", "len", "(", "mesh", "[", "'vn'", "]", ".", "shape", ")", ">", "0", ":", "\n", "        ", "new_n", "=", "np", ".", "copy", "(", "mesh", "[", "'vn'", "]", ")", "\n", "new_n_middle", "=", "(", "new_n", "[", "edges_wo_rep", "[", ":", ",", "0", "]", ",", ":", "]", "+", "\n", "new_n", "[", "edges_wo_rep", "[", ":", ",", "1", "]", ",", ":", "]", ")", "/", "2.0", "\n", "new_n", "=", "np", ".", "vstack", "(", "[", "new_n", ",", "new_n_middle", "]", ")", "\n", "new_mesh", "[", "'vn'", "]", "=", "new_n", "\n", "\n", "# divides triangles", "\n", "", "new_f", "=", "list", "(", ")", "\n", "for", "f", "in", "mesh", "[", "'f'", "]", ":", "\n", "        ", "v1", ",", "v2", ",", "v3", "=", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", "\n", "v4", "=", "edges_dict", "[", "str", "(", "v1", ")", "+", "'_'", "+", "str", "(", "v2", ")", "]", "\n", "v5", "=", "edges_dict", "[", "str", "(", "v2", ")", "+", "'_'", "+", "str", "(", "v3", ")", "]", "\n", "v6", "=", "edges_dict", "[", "str", "(", "v3", ")", "+", "'_'", "+", "str", "(", "v1", ")", "]", "\n", "new_f", ".", "append", "(", "np", ".", "array", "(", "[", "v1", ",", "v4", ",", "v6", "]", ")", ")", "\n", "new_f", ".", "append", "(", "np", ".", "array", "(", "[", "v4", ",", "v2", ",", "v5", "]", ")", ")", "\n", "new_f", ".", "append", "(", "np", ".", "array", "(", "[", "v4", ",", "v5", ",", "v6", "]", ")", ")", "\n", "new_f", ".", "append", "(", "np", ".", "array", "(", "[", "v6", ",", "v5", ",", "v3", "]", ")", ")", "\n", "\n", "", "new_mesh", "[", "'f'", "]", "=", "np", ".", "asarray", "(", "new_f", ")", "\n", "return", "new_mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.proj_frontal_mask": [[99, 107], ["numpy.max", "cv2.resize", "numpy.ones", "cv2.erode", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "proj_frontal_mask", "(", "vol", ")", ":", "\n", "    ", "mask0", "=", "np", ".", "max", "(", "vol", ",", "axis", "=", "2", ")", "\n", "mask0", "=", "cv", ".", "resize", "(", "mask0", ",", "(", "mask0", ".", "shape", "[", "1", "]", "*", "2", ",", "mask0", ".", "shape", "[", "0", "]", "*", "2", ")", ")", "\n", "mask0", "[", "np", ".", "where", "(", "mask0", ">", "0.5", ")", "]", "=", "1.0", "\n", "mask0", "[", "np", ".", "where", "(", "mask0", "<=", "0.5", ")", "]", "=", "0.0", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "mask0", "=", "cv", ".", "erode", "(", "mask0", ",", "kernel", ",", "iterations", "=", "2", ")", "\n", "return", "mask0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.proj_frontal_depth": [[109, 119], ["numpy.zeros_like", "numpy.reshape", "numpy.max", "cv2.resize", "numpy.asarray", "numpy.where", "range"], "function", ["None"], ["", "def", "proj_frontal_depth", "(", "vol", ")", ":", "\n", "    ", "vol_bin", "=", "np", ".", "zeros_like", "(", "vol", ")", "\n", "vol_bin", "[", "np", ".", "where", "(", "vol", ">", "0.5", ")", "]", "=", "1.0", "\n", "d_array", "=", "np", ".", "asarray", "(", "range", "(", "128", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "2", "\n", "d_array", "=", "np", ".", "reshape", "(", "d_array", ",", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "\n", "vol_dpt_0", "=", "vol_bin", "*", "d_array", "\n", "dpt0", "=", "np", ".", "max", "(", "vol_dpt_0", ",", "axis", "=", "2", ")", "\n", "dpt0", "=", "cv", ".", "resize", "(", "dpt0", ",", "(", "dpt0", ".", "shape", "[", "1", "]", "*", "2", ",", "dpt0", ".", "shape", "[", "0", "]", "*", "2", ")", ")", "\n", "return", "dpt0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.load_normal_map": [[121, 128], ["cv2.imread", "numpy.transpose", "numpy.expand_dims", "numpy.float32"], "function", ["None"], ["", "def", "load_normal_map", "(", "nml_map_dir", ",", "mask0", ")", ":", "\n", "    ", "nml0", "=", "cv", ".", "imread", "(", "args", ".", "normal_file", ",", "cv", ".", "IMREAD_UNCHANGED", ")", "\n", "nml0", "=", "np", ".", "float32", "(", "nml0", ")", "/", "32767.5", "-", "1.0", "\n", "nml0", "=", "np", ".", "transpose", "(", "nml0", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "nml0", "*=", "np", ".", "expand_dims", "(", "mask0", ",", "axis", "=", "-", "1", ")", "\n", "nml0", "*=", "-", "1.0", "\n", "return", "nml0", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.smooth_surface_normal": [[130, 140], ["numpy.zeros_like", "numpy.sum", "numpy.sqrt", "numpy.square"], "function", ["None"], ["", "def", "smooth_surface_normal", "(", "mesh", ",", "lamb", "=", "0.5", ")", ":", "\n", "    ", "nml_neighbor", "=", "np", ".", "zeros_like", "(", "mesh", "[", "'vn'", "]", ")", "\n", "for", "f", "in", "mesh", "[", "'f'", "]", ":", "\n", "        ", "n0", ",", "n1", ",", "n2", "=", "mesh", "[", "'vn'", "]", "[", "f", "[", "0", "]", "]", ",", "mesh", "[", "'vn'", "]", "[", "f", "[", "1", "]", "]", ",", "mesh", "[", "'vn'", "]", "[", "f", "[", "2", "]", "]", "\n", "nml_neighbor", "[", "f", "[", "0", "]", "]", "+=", "n1", "+", "n2", "\n", "nml_neighbor", "[", "f", "[", "1", "]", "]", "+=", "n2", "+", "n0", "\n", "nml_neighbor", "[", "f", "[", "2", "]", "]", "+=", "n0", "+", "n1", "\n", "", "nml_neighbor_len2", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "nml_neighbor", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "nml_neighbor", "/=", "np", ".", "sqrt", "(", "nml_neighbor_len2", ")", "# normalize normals", "\n", "mesh", "[", "'vn'", "]", "=", "mesh", "[", "'vn'", "]", "*", "(", "1", "-", "lamb", ")", "+", "nml_neighbor", "*", "lamb", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.assigned_normal": [[142, 162], ["numpy.ones", "cv2.erode", "range", "len", "int", "int", "cv2.GaussianBlur", "round", "round", "numpy.linalg.norm", "abs"], "function", ["None"], ["", "def", "assigned_normal", "(", "mesh", ",", "dpt0", ",", "nml0", ",", "msk0", ")", ":", "\n", "    ", "kernel", "=", "np", ".", "ones", "(", "(", "3", ",", "3", ")", ",", "np", ".", "float32", ")", "\n", "msk0", "=", "cv", ".", "erode", "(", "msk0", ",", "kernel", ",", "iterations", "=", "2", ")", "\n", "wmap", "=", "cv", ".", "GaussianBlur", "(", "msk0", ",", "(", "43", ",", "43", ")", ",", "0", ")", "*", "2.0", "-", "1.0", "\n", "x_max", ",", "y_max", "=", "nml0", ".", "shape", "[", "0", "]", "-", "1", ",", "nml0", ".", "shape", "[", "1", "]", "-", "1", "\n", "for", "vi", "in", "range", "(", "len", "(", "mesh", "[", "'v'", "]", ")", ")", ":", "\n", "        ", "v", "=", "mesh", "[", "'v'", "]", "[", "vi", "]", "\n", "n", "=", "mesh", "[", "'vn'", "]", "[", "vi", "]", "\n", "if", "v", "[", "0", "]", "<", "0", "or", "v", "[", "0", "]", ">=", "x_max", "or", "v", "[", "1", "]", "<", "0", "or", "v", "[", "1", "]", ">=", "y_max", ":", "\n", "            ", "continue", "\n", "", "pixel_x", "=", "int", "(", "round", "(", "v", "[", "0", "]", ")", ")", "\n", "pixel_y", "=", "int", "(", "round", "(", "v", "[", "1", "]", ")", ")", "\n", "\n", "if", "msk0", "[", "pixel_x", ",", "pixel_y", "]", ">", "0", "and", "wmap", "[", "pixel_x", ",", "pixel_y", "]", ">", "0", "and", "abs", "(", "dpt0", "[", "pixel_x", ",", "pixel_y", "]", "-", "v", "[", "2", "]", ")", "<", "2", ":", "\n", "            ", "w", "=", "wmap", "[", "pixel_x", ",", "pixel_y", "]", "\n", "mesh", "[", "'vn'", "]", "[", "vi", "]", "=", "nml0", "[", "pixel_x", ",", "pixel_y", ",", ":", "]", "*", "w", "+", "mesh", "[", "'vn'", "]", "[", "vi", "]", "*", "(", "1", "-", "w", ")", "\n", "# mesh['vn'][vi] = nml0[pixel_x, pixel_y, :]", "\n", "mesh", "[", "'vn'", "]", "[", "vi", "]", "/=", "np", ".", "linalg", ".", "norm", "(", "mesh", "[", "'vn'", "]", "[", "vi", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.main": [[164, 190], ["NormalFusion.load_volume", "NormalFusion.proj_frontal_mask", "NormalFusion.proj_frontal_depth", "NormalFusion.load_normal_map", "NormalFusion.extract_orig_mesh", "dict", "numpy.copy", "numpy.copy", "numpy.copy", "ObjIO.save_obj_data_binary", "range", "NormalFusion.upsample_mesh", "NormalFusion.assigned_normal", "CommonUtil.rotate_model_in_place", "CommonUtil.flip_axis_in_place", "ObjIO.save_obj_data_binary", "NormalFusion.smooth_surface_normal"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.load_volume", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.proj_frontal_mask", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.proj_frontal_depth", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.load_normal_map", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.extract_orig_mesh", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.upsample_mesh", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.assigned_normal", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.flip_axis_in_place", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.NormalFusion.smooth_surface_normal"], ["", "", "", "def", "main", "(", "vol_dir", ",", "nml_map_dir", ")", ":", "\n", "    ", "vol", "=", "load_volume", "(", "vol_dir", ")", "\n", "mask0", "=", "proj_frontal_mask", "(", "vol", ")", "\n", "dpt0", "=", "proj_frontal_depth", "(", "vol", ")", "\n", "nml0", "=", "load_normal_map", "(", "nml_map_dir", ",", "mask0", ")", "\n", "mesh", "=", "extract_orig_mesh", "(", "vol", ")", "\n", "\n", "# dpt0 = cv.resize(dpt0, (dpt0.shape[1]*2, dpt0.shape[0]*2))", "\n", "# mask0 = cv.resize(mask0, (mask0.shape[1]*2, mask0.shape[0]*2))", "\n", "\n", "mesh_", "=", "dict", "(", ")", "# extract_hd_mesh(vol)", "\n", "mesh_", "[", "'v'", "]", "=", "np", ".", "copy", "(", "mesh", "[", "'v'", "]", ")", "\n", "mesh_", "[", "'f'", "]", "=", "np", ".", "copy", "(", "mesh", "[", "'f'", "]", ")", "\n", "mesh_", "[", "'vn'", "]", "=", "np", ".", "copy", "(", "mesh", "[", "'vn'", "]", ")", "\n", "ObjIO", ".", "save_obj_data_binary", "(", "mesh_", ",", "vol_dir", "[", ":", "-", "4", "]", "+", "'_out.obj'", ")", "\n", "\n", "nml_smooth_iter_num", "=", "2", "\n", "for", "_", "in", "range", "(", "nml_smooth_iter_num", ")", ":", "\n", "        ", "smooth_surface_normal", "(", "mesh_", ")", "\n", "\n", "", "mesh_upsampled", "=", "upsample_mesh", "(", "mesh_", ")", "\n", "assigned_normal", "(", "mesh_upsampled", ",", "dpt0", ",", "nml0", ",", "mask0", ")", "\n", "\n", "util", ".", "rotate_model_in_place", "(", "mesh_upsampled", ",", "0", ",", "0", ",", "np", ".", "pi", ")", "\n", "util", ".", "flip_axis_in_place", "(", "mesh_upsampled", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "ObjIO", ".", "save_obj_data_binary", "(", "mesh_upsampled", ",", "vol_dir", "[", ":", "-", "4", "]", "+", "'_out_detailed.obj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.PlyIO.load_ply_data": [[5, 233], ["open", "open.readlines", "open.close", "Enum", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.rstrip.rstrip", "line.rstrip.startswith", "int", "line.rstrip.startswith", "int", "line.rstrip.split", "float", "float", "np.asarray.append", "line.rstrip.split", "int", "numpy.array", "range", "np.asarray.append", "print", "max", "max", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "print", "print", "print", "line.split.pop", "line.split.pop", "float", "numpy.array", "float", "float", "float", "np.asarray.append", "np.asarray.append", "float", "float", "np.asarray.append", "len", "line.split.pop", "print", "int", "np.asarray.append", "np.asarray.append", "print", "line.split.pop", "line.split.pop", "line.split.pop", "line.split.pop", "numpy.array", "float", "float", "float", "numpy.array", "line.split.pop", "line.split.pop", "numpy.array", "line.split.pop", "line.split.pop", "line.split.pop", "line.split.pop", "float", "str", "str", "line.split.pop"], "function", ["None"], ["def", "load_ply_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "lineNum", "=", "-", "1", "\n", "\n", "class", "Enum", "(", "set", ")", ":", "\n", "        ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "            ", "if", "name", "in", "self", ":", "\n", "                ", "return", "name", "\n", "", "raise", "AttributeError", "\n", "\n", "", "", "State", "=", "Enum", "(", "[", "\"Header\"", ",", "\"VertexDef\"", ",", "\"FaceDef\"", ",", "\"Vertices\"", ",", "\"Normals\"", ",", "\"Faces\"", "]", ")", "\n", "state", "=", "State", ".", "Header", "\n", "\n", "orderVertices", "=", "-", "1", "\n", "orderIndices", "=", "-", "1", "\n", "\n", "expectedVertices", "=", "0", "\n", "expectedFaces", "=", "0", "\n", "\n", "vertexCoordsFound", "=", "0", "\n", "colorCompsFound", "=", "0", "\n", "texCoordsFound", "=", "0", "\n", "normalsCoordsFound", "=", "0", "\n", "\n", "currentVertex", "=", "0", "\n", "currentFace", "=", "0", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "lineNum", "+=", "1", "\n", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "\n", "if", "lineNum", "==", "0", ":", "\n", "            ", "if", "line", "!=", "'ply'", ":", "\n", "                ", "print", "(", "'Wrong format, expecting ply!!'", ")", "\n", "return", "None", "\n", "", "", "elif", "lineNum", "==", "1", ":", "\n", "            ", "if", "line", "!=", "\"format ascii 1.0\"", ":", "\n", "                ", "print", "(", "\"wrong format, expecting 'format ascii 1.0'\"", ")", "\n", "return", "\n", "\n", "", "", "if", "'comment'", "in", "line", ":", "\n", "            ", "continue", "\n", "\n", "# HEADER ", "\n", "", "if", "(", "state", "==", "State", ".", "Header", "or", "state", "==", "State", ".", "FaceDef", ")", "and", "line", ".", "startswith", "(", "'element vertex'", ")", ":", "\n", "            ", "state", "=", "State", ".", "VertexDef", "\n", "orderVertices", "=", "max", "(", "orderIndices", ",", "0", ")", "+", "1", "\n", "expectedVertices", "=", "int", "(", "line", "[", "15", ":", "]", ")", "\n", "# print(state)", "\n", "# print(line[15:])", "\n", "continue", ";", "\n", "\n", "", "if", "(", "state", "==", "State", ".", "Header", "or", "state", "==", "State", ".", "VertexDef", ")", "and", "line", ".", "startswith", "(", "'element face'", ")", ":", "\n", "            ", "state", "=", "State", ".", "FaceDef", "\n", "orderIndices", "=", "max", "(", "orderVertices", ",", "0", ")", "+", "1", "\n", "expectedFaces", "=", "int", "(", "line", "[", "13", ":", "]", ")", "\n", "# print(state)", "\n", "# print(line[13:])", "\n", "continue", "\n", "\n", "# Vertex Def", "\n", "", "if", "state", "==", "State", ".", "VertexDef", ":", "\n", "\n", "            ", "if", "line", ".", "startswith", "(", "'property float x'", ")", "or", "line", ".", "startswith", "(", "'property float y'", ")", "or", "line", ".", "startswith", "(", "\n", "'property float z'", ")", ":", "\n", "                ", "vertexCoordsFound", "+=", "1", "\n", "# print('vertexCoordsFound ' + str(vertexCoordsFound))", "\n", "continue", "\n", "\n", "", "if", "line", ".", "startswith", "(", "'property float nx'", ")", "or", "line", ".", "startswith", "(", "'property float ny'", ")", "or", "line", ".", "startswith", "(", "\n", "'property float nz'", ")", ":", "\n", "                ", "normalsCoordsFound", "+=", "1", "\n", "# print('normalsCoordsFound ' + str(normalsCoordsFound))", "\n", "continue", "\n", "\n", "", "if", "line", ".", "startswith", "(", "'property float r'", ")", "or", "line", ".", "startswith", "(", "'property float g'", ")", "or", "line", ".", "startswith", "(", "\n", "'property float b'", ")", "or", "line", ".", "startswith", "(", "'property float a'", ")", ":", "\n", "                ", "colorCompsFound", "+=", "1", "\n", "# print('colorCompsFound ' + str(colorCompsFound))", "\n", "floatColor", "=", "True", "\n", "continue", "\n", "\n", "", "if", "line", ".", "startswith", "(", "'property uchar red'", ")", "or", "line", ".", "startswith", "(", "'property uchar green'", ")", "or", "line", ".", "startswith", "(", "\n", "'property uchar blue'", ")", "or", "line", ".", "startswith", "(", "'property uchar alpha'", ")", ":", "\n", "                ", "colorCompsFound", "+=", "1", "\n", "# print('colorCompsFound ' + str(colorCompsFound))", "\n", "floatColor", "=", "False", "\n", "continue", "\n", "\n", "", "if", "line", ".", "startswith", "(", "'property float u'", ")", "or", "line", ".", "startswith", "(", "'property float v'", ")", ":", "\n", "                ", "texCoordsFound", "+=", "1", "\n", "# print('texCoordsFound ' + str(texCoordsFound))", "\n", "continue", "\n", "\n", "", "if", "line", ".", "startswith", "(", "'property float texture_u'", ")", "or", "line", ".", "startswith", "(", "'property float texture_v'", ")", ":", "\n", "                ", "texCoordsFound", "+=", "1", "\n", "# print('texCoordsFound ' + str(texCoordsFound))", "\n", "continue", "\n", "\n", "# if state==State.FaceDef and line.find('property list')!=0 and line!='end_header':", "\n", "#     print('wrong face definition')", "\n", "\n", "", "", "if", "line", "==", "'end_header'", ":", "\n", "# Check that all basic elements seams ok and healthy", "\n", "            ", "if", "colorCompsFound", ">", "0", "and", "colorCompsFound", "<", "3", ":", "\n", "                ", "print", "(", "'data has color coordiantes but not correct number of components. Found '", "+", "str", "(", "\n", "colorCompsFound", ")", "+", "' expecting 3 or 4'", ")", "\n", "return", "\n", "\n", "", "if", "normalsCoordsFound", "!=", "3", ":", "\n", "                ", "print", "(", "'data has normal coordiantes but not correct number of components. Found '", "+", "str", "(", "\n", "normalsCoordsFound", ")", "+", "' expecting 3'", ")", "\n", "return", "\n", "\n", "", "if", "expectedVertices", "==", "0", ":", "\n", "                ", "print", "(", "'mesh loaded has no vertices'", ")", "\n", "return", "\n", "\n", "", "if", "orderVertices", "==", "-", "1", ":", "\n", "                ", "orderVertices", "=", "9999", "\n", "", "if", "orderIndices", "==", "-", "1", ":", "\n", "                ", "orderIndices", "=", "9999", ";", "\n", "\n", "", "if", "orderVertices", "<", "orderIndices", ":", "\n", "                ", "state", "=", "State", ".", "Vertices", "\n", "", "else", ":", "\n", "                ", "state", "=", "State", ".", "Faces", "\n", "\n", "", "continue", "\n", "\n", "", "if", "state", "==", "State", ".", "Vertices", ":", "\n", "            ", "values", "=", "line", ".", "split", "(", ")", "\n", "\n", "# Extract vertex", "\n", "v", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "v", "[", "0", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "v", "[", "1", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "if", "vertexCoordsFound", ">", "2", ":", "\n", "                ", "v", "[", "2", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "", "v_list", ".", "append", "(", "np", ".", "array", "(", "v", ")", ")", "\n", "\n", "# Extract normal", "\n", "if", "normalsCoordsFound", ">", "0", ":", "\n", "                ", "n", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "n", "[", "0", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "n", "[", "1", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "n", "[", "2", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "vn_list", ".", "append", "(", "np", ".", "array", "(", "n", ")", ")", "\n", "\n", "# Extract color", "\n", "", "if", "colorCompsFound", ">", "0", ":", "\n", "                ", "c", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", "\n", "div", "=", "255.0", "\n", "if", "floatColor", ":", "\n", "                    ", "div", "=", "1.0", "\n", "\n", "", "c", "[", "0", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "/", "div", "\n", "c", "[", "1", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "/", "div", "\n", "c", "[", "2", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "/", "div", "\n", "if", "colorCompsFound", ">", "3", ":", "\n", "                    ", "c", "[", "3", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "/", "div", "\n", "", "vc_list", ".", "append", "(", "np", ".", "array", "(", "c", ")", ")", "\n", "\n", "# Extract UVs", "\n", "", "if", "texCoordsFound", ">", "0", ":", "\n", "                ", "uv", "=", "[", "0.0", ",", "0.0", "]", "\n", "uv", "[", "0", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "uv", "[", "1", "]", "=", "float", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "vt_list", ".", "append", "(", "np", ".", "array", "(", "uv", ")", ")", "\n", "\n", "", "if", "len", "(", "v_list", ")", "==", "expectedVertices", ":", "\n", "                ", "if", "orderVertices", "<", "orderIndices", ":", "\n", "                    ", "state", "=", "State", ".", "Faces", "\n", "", "else", ":", "\n", "                    ", "state", "=", "State", ".", "Vertices", "\n", "", "continue", "\n", "\n", "", "", "if", "state", "==", "State", ".", "Faces", ":", "\n", "            ", "values", "=", "line", ".", "split", "(", ")", "\n", "numV", "=", "int", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "\n", "if", "numV", "!=", "3", ":", "\n", "                ", "print", "(", "\"face not a triangle\"", ")", "\n", "\n", "", "f", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "numV", ")", ":", "\n", "                ", "index", "=", "int", "(", "values", ".", "pop", "(", "0", ")", ")", "\n", "f", "[", "i", "]", "=", "index", "\n", "\n", "", "f_list", ".", "append", "(", "f", ")", "\n", "if", "normalsCoordsFound", ":", "\n", "                ", "fn_list", ".", "append", "(", "f", ")", "\n", "", "if", "texCoordsFound", ":", "\n", "                ", "ft_list", ".", "append", "(", "f", ")", "\n", "\n", "", "if", "currentFace", "==", "expectedFaces", ":", "\n", "                ", "if", "orderVertices", "<", "orderIndices", ":", "\n", "                    ", "state", "=", "State", ".", "Vertices", "\n", "", "else", ":", "\n", "                    ", "state", "=", "State", ".", "Faces", "\n", "", "continue", "\n", "\n", "", "currentFace", "+=", "1", "\n", "\n", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.PlyIO.save_ply_data": [[235, 283], ["open", "enumerate", "fp.write", "fp.write", "enumerate", "str", "numpy.uint8", "str"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "save_ply_data", "(", "model", ",", "filename", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "'ply\\n'", "'format ascii 1.0\\n'", "'element vertex '", "+", "str", "(", "model", "[", "'v'", "]", ".", "shape", "[", "0", "]", ")", "+", "'\\n'", "'property float x\\n'", "'property float y\\n'", "'property float z\\n'", "\n", "\n", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", "is", "not", "None", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "lines", "+=", "'property float nx\\n'", "\n", "lines", "+=", "'property float ny\\n'", "\n", "lines", "+=", "'property float nx\\n'", "\n", "", "if", "'vc'", "in", "model", "and", "model", "[", "'vc'", "]", "is", "not", "None", "and", "model", "[", "'vc'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "lines", "+=", "'property uchar red\\n'", "\n", "lines", "+=", "'property uchar green\\n'", "\n", "lines", "+=", "'property uchar blue\\n'", "\n", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", "is", "not", "None", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "lines", "+=", "'property float u\\n'", "\n", "lines", "+=", "'property float v\\n'", "\n", "\n", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", "is", "not", "None", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "lines", "+=", "'element face '", "+", "str", "(", "model", "[", "'f'", "]", ".", "shape", "[", "0", "]", ")", "+", "'\\nproperty list uchar int vertex_indices\\nend_header\\n'", "\n", "", "else", ":", "\n", "            ", "lines", "+=", "'end_header\\n'", "\n", "\n", "", "for", "vi", ",", "v", "in", "enumerate", "(", "model", "[", "'v'", "]", ")", ":", "\n", "            ", "line", "=", "'%f %f %f'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", "\n", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "n", "=", "model", "[", "'vn'", "]", "[", "vi", "]", "\n", "line", "+=", "' %f %f %f'", "%", "(", "n", "[", "0", "]", ",", "n", "[", "1", "]", ",", "n", "[", "2", "]", ")", "\n", "", "if", "'vc'", "in", "model", "and", "model", "[", "'vc'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "c", "=", "np", ".", "uint8", "(", "model", "[", "'vc'", "]", "[", "vi", "]", "*", "255", ")", "\n", "line", "+=", "' %i %i %i'", "%", "(", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", "\n", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "t", "=", "model", "[", "'vt'", "]", "[", "vi", "]", "\n", "line", "+=", "' %f %f'", "%", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", "\n", "", "lines", "+=", "line", "+", "'\\n'", "\n", "\n", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", "is", "not", "None", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "fi", ",", "f", "in", "enumerate", "(", "model", "[", "'f'", "]", ")", ":", "\n", "                ", "line", "=", "'3 %d %d %d'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", "\n", "lines", "+=", "line", "+", "'\\n'", "\n", "\n", "", "", "fp", ".", "write", "(", "lines", "[", ":", "-", "1", "]", ")", "# delete the last eol", "\n", "fp", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.Voxels.__init__": [[88, 95], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "translate", "=", "translate", "\n", "self", ".", "scale", "=", "scale", "\n", "assert", "(", "axis_order", "in", "(", "'xzy'", ",", "'xyz'", ")", ")", "\n", "self", ".", "axis_order", "=", "axis_order", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.Voxels.clone": [[96, 101], ["binvox_rw.Voxels.data.copy", "binvox_rw.Voxels"], "methods", ["None"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", ".", "copy", "(", ")", "\n", "dims", "=", "self", ".", "dims", "[", ":", "]", "\n", "translate", "=", "self", ".", "translate", "[", ":", "]", "\n", "return", "Voxels", "(", "data", ",", "dims", ",", "translate", ",", "self", ".", "scale", ",", "self", ".", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.Voxels.write": [[102, 104], ["binvox_rw.Voxels.write"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "write", "(", "self", ",", "fp", ")", ":", "\n", "        ", "write", "(", "self", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_header": [[105, 116], ["fp.readline().strip", "list", "list", "fp.readline", "fp.readline.startswith", "IOError", "map", "map", "list", "fp.readline", "map", "fp.readline().strip().split", "fp.readline().strip().split", "fp.readline().strip().split", "fp.readline().strip", "fp.readline().strip", "fp.readline().strip", "fp.readline", "fp.readline", "fp.readline"], "function", ["None"], ["", "", "def", "read_header", "(", "fp", ")", ":", "\n", "    ", "\"\"\" Read binvox header. Mostly meant for internal use.\n    \"\"\"", "\n", "line", "=", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "if", "not", "line", ".", "startswith", "(", "b'#binvox'", ")", ":", "\n", "        ", "raise", "IOError", "(", "'Not a binvox file'", ")", "\n", "", "dims", "=", "list", "(", "map", "(", "int", ",", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", ")", ")", "\n", "translate", "=", "list", "(", "map", "(", "float", ",", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", ")", ")", "\n", "scale", "=", "list", "(", "map", "(", "float", ",", "fp", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "b' '", ")", "[", "1", ":", "]", ")", ")", "[", "0", "]", "\n", "line", "=", "fp", ".", "readline", "(", ")", "\n", "return", "dims", ",", "translate", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_as_3d_array": [[117, 152], ["binvox_rw.read_header", "numpy.frombuffer", "numpy.repeat().astype", "np.transpose.reshape", "binvox_rw.Voxels", "fp.read", "numpy.transpose", "numpy.repeat"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_header"], ["", "def", "read_as_3d_array", "(", "fp", ",", "fix_coords", "=", "True", ")", ":", "\n", "    ", "\"\"\" Read binary binvox format as array.\n\n    Returns the model with accompanying metadata.\n\n    Voxels are stored in a three-dimensional numpy array, which is simple and\n    direct, but may use a lot of memory for large models. (Storage requirements\n    are 8*(d^3) bytes, where d is the dimensions of the binvox model. Numpy\n    boolean arrays use a byte per element).\n\n    Doesn't do any checks on input except for the '#binvox' line.\n    \"\"\"", "\n", "dims", ",", "translate", ",", "scale", "=", "read_header", "(", "fp", ")", "\n", "raw_data", "=", "np", ".", "frombuffer", "(", "fp", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# if just using reshape() on the raw data:", "\n", "# indexing the array as array[i,j,k], the indices map into the", "\n", "# coords as:", "\n", "# i -> x", "\n", "# j -> z", "\n", "# k -> y", "\n", "# if fix_coords is true, then data is rearranged so that", "\n", "# mapping is", "\n", "# i -> x", "\n", "# j -> y", "\n", "# k -> z", "\n", "values", ",", "counts", "=", "raw_data", "[", ":", ":", "2", "]", ",", "raw_data", "[", "1", ":", ":", "2", "]", "\n", "data", "=", "np", ".", "repeat", "(", "values", ",", "counts", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "data", "=", "data", ".", "reshape", "(", "dims", ")", "\n", "if", "fix_coords", ":", "\n", "# xzy to xyz TODO the right thing", "\n", "        ", "data", "=", "np", ".", "transpose", "(", "data", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "axis_order", "=", "'xyz'", "\n", "", "else", ":", "\n", "        ", "axis_order", "=", "'xzy'", "\n", "", "return", "Voxels", "(", "data", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_as_coord_array": [[153, 205], ["binvox_rw.read_header", "print", "print", "print", "numpy.frombuffer", "numpy.prod", "numpy.cumsum", "numpy.concatenate().astype", "values.astype.astype", "zip", "numpy.array", "binvox_rw.Voxels", "fp.read", "np.array.extend", "numpy.vstack", "numpy.vstack", "numpy.ascontiguousarray", "numpy.concatenate", "range"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_header"], ["", "def", "read_as_coord_array", "(", "fp", ",", "fix_coords", "=", "True", ")", ":", "\n", "    ", "\"\"\" Read binary binvox format as coordinates.\n\n    Returns binvox model with voxels in a \"coordinate\" representation, i.e.  an\n    3 x N array where N is the number of nonzero voxels. Each column\n    corresponds to a nonzero voxel and the 3 rows are the (x, z, y) coordinates\n    of the voxel.  (The odd ordering is due to the way binvox format lays out\n    data).  Note that coordinates refer to the binvox voxels, without any\n    scaling or translation.\n\n    Use this to save memory if your model is very sparse (mostly empty).\n\n    Doesn't do any checks on input except for the '#binvox' line.\n    \"\"\"", "\n", "dims", ",", "translate", ",", "scale", "=", "read_header", "(", "fp", ")", "\n", "print", "(", "dims", ")", "\n", "print", "(", "translate", ")", "\n", "print", "(", "scale", ")", "\n", "raw_data", "=", "np", ".", "frombuffer", "(", "fp", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "values", ",", "counts", "=", "raw_data", "[", ":", ":", "2", "]", ",", "raw_data", "[", "1", ":", ":", "2", "]", "\n", "\n", "sz", "=", "np", ".", "prod", "(", "dims", ")", "\n", "index", ",", "end_index", "=", "0", ",", "0", "\n", "end_indices", "=", "np", ".", "cumsum", "(", "counts", ")", "\n", "indices", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "end_indices", "[", ":", "-", "1", "]", ")", ")", ".", "astype", "(", "end_indices", ".", "dtype", ")", "\n", "\n", "values", "=", "values", ".", "astype", "(", "np", ".", "bool", ")", "\n", "indices", "=", "indices", "[", "values", "]", "\n", "end_indices", "=", "end_indices", "[", "values", "]", "\n", "\n", "nz_voxels", "=", "[", "]", "\n", "for", "index", ",", "end_index", "in", "zip", "(", "indices", ",", "end_indices", ")", ":", "\n", "        ", "nz_voxels", ".", "extend", "(", "range", "(", "index", ",", "end_index", ")", ")", "\n", "", "nz_voxels", "=", "np", ".", "array", "(", "nz_voxels", ")", "\n", "# TODO are these dims correct?", "\n", "# according to docs,", "\n", "# index = x * wxh + z * width + y; // wxh = width * height = d * d", "\n", "\n", "x", "=", "nz_voxels", "/", "(", "dims", "[", "0", "]", "*", "dims", "[", "1", "]", ")", "\n", "zwpy", "=", "nz_voxels", "%", "(", "dims", "[", "0", "]", "*", "dims", "[", "1", "]", ")", "# z*w + y", "\n", "z", "=", "zwpy", "/", "dims", "[", "0", "]", "\n", "y", "=", "zwpy", "%", "dims", "[", "0", "]", "\n", "if", "fix_coords", ":", "\n", "        ", "data", "=", "np", ".", "vstack", "(", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "axis_order", "=", "'xyz'", "\n", "", "else", ":", "\n", "        ", "data", "=", "np", ".", "vstack", "(", "(", "x", ",", "z", ",", "y", ")", ")", "\n", "axis_order", "=", "'xzy'", "\n", "\n", "#return Voxels(data, dims, translate, scale, axis_order)", "\n", "", "return", "Voxels", "(", "np", ".", "ascontiguousarray", "(", "data", ")", ",", "dims", ",", "translate", ",", "scale", ",", "axis_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.dense_to_sparse": [[206, 213], ["numpy.asarray", "ValueError", "numpy.nonzero"], "function", ["None"], ["", "def", "dense_to_sparse", "(", "voxel_data", ",", "dtype", "=", "np", ".", "int", ")", ":", "\n", "    ", "\"\"\" From dense representation to sparse (coordinate) representation.\n    No coordinate reordering.\n    \"\"\"", "\n", "if", "voxel_data", ".", "ndim", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'voxel_data is wrong shape; should be 3D array.'", ")", "\n", "", "return", "np", ".", "asarray", "(", "np", ".", "nonzero", "(", "voxel_data", ")", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.sparse_to_dense": [[214, 228], ["numpy.isscalar", "voxel_data.astype", "numpy.zeros", "ValueError", "numpy.atleast_2d", "numpy.any", "dims.flatten", "tuple"], "function", ["None"], ["", "def", "sparse_to_dense", "(", "voxel_data", ",", "dims", ",", "dtype", "=", "np", ".", "bool", ")", ":", "\n", "    ", "if", "voxel_data", ".", "ndim", "!=", "2", "or", "voxel_data", ".", "shape", "[", "0", "]", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'voxel_data is wrong shape; should be 3xN array.'", ")", "\n", "", "if", "np", ".", "isscalar", "(", "dims", ")", ":", "\n", "        ", "dims", "=", "[", "dims", "]", "*", "3", "\n", "", "dims", "=", "np", ".", "atleast_2d", "(", "dims", ")", ".", "T", "\n", "# truncate to integers", "\n", "xyz", "=", "voxel_data", ".", "astype", "(", "np", ".", "int", ")", "\n", "# discard voxels that fall outside dims", "\n", "valid_ix", "=", "~", "np", ".", "any", "(", "(", "xyz", "<", "0", ")", "|", "(", "xyz", ">=", "dims", ")", ",", "0", ")", "\n", "xyz", "=", "xyz", "[", ":", ",", "valid_ix", "]", "\n", "out", "=", "np", ".", "zeros", "(", "dims", ".", "flatten", "(", ")", ",", "dtype", "=", "dtype", ")", "\n", "out", "[", "tuple", "(", "xyz", ")", "]", "=", "True", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.write": [[235, 284], ["fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "binvox_rw.sparse_to_dense", "ValueError", "sparse_to_dense.flatten", "fp.write", "fp.write", "numpy.transpose().flatten", "fp.write", "fp.write", "chr", "chr", "str", "fp.write", "fp.write", "chr", "chr", "map", "map", "numpy.transpose", "chr", "chr"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.sparse_to_dense", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "write", "(", "voxel_model", ",", "fp", ")", ":", "\n", "    ", "\"\"\" Write binary binvox format.\n\n    Note that when saving a model in sparse (coordinate) format, it is first\n    converted to dense format.\n\n    Doesn't check if the model is 'sane'.\n\n    \"\"\"", "\n", "if", "voxel_model", ".", "data", ".", "ndim", "==", "2", ":", "\n", "# TODO avoid conversion to dense", "\n", "        ", "dense_voxel_data", "=", "sparse_to_dense", "(", "voxel_model", ".", "data", ",", "voxel_model", ".", "dims", ")", "\n", "", "else", ":", "\n", "        ", "dense_voxel_data", "=", "voxel_model", ".", "data", "\n", "\n", "", "fp", ".", "write", "(", "'#binvox 1\\n'", ")", "\n", "fp", ".", "write", "(", "'dim '", "+", "' '", ".", "join", "(", "map", "(", "str", ",", "voxel_model", ".", "dims", ")", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'translate '", "+", "' '", ".", "join", "(", "map", "(", "str", ",", "voxel_model", ".", "translate", ")", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'scale '", "+", "str", "(", "voxel_model", ".", "scale", ")", "+", "'\\n'", ")", "\n", "fp", ".", "write", "(", "'data\\n'", ")", "\n", "if", "not", "voxel_model", ".", "axis_order", "in", "(", "'xzy'", ",", "'xyz'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Unsupported voxel model axis order'", ")", "\n", "\n", "", "if", "voxel_model", ".", "axis_order", "==", "'xzy'", ":", "\n", "        ", "voxels_flat", "=", "dense_voxel_data", ".", "flatten", "(", ")", "\n", "", "elif", "voxel_model", ".", "axis_order", "==", "'xyz'", ":", "\n", "        ", "voxels_flat", "=", "np", ".", "transpose", "(", "dense_voxel_data", ",", "(", "0", ",", "2", ",", "1", ")", ")", ".", "flatten", "(", ")", "\n", "\n", "# keep a sort of state machine for writing run length encoding", "\n", "", "state", "=", "voxels_flat", "[", "0", "]", "\n", "ctr", "=", "0", "\n", "for", "c", "in", "voxels_flat", ":", "\n", "        ", "if", "c", "==", "state", ":", "\n", "            ", "ctr", "+=", "1", "\n", "# if ctr hits max, dump", "\n", "if", "ctr", "==", "255", ":", "\n", "                ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "ctr", "=", "0", "\n", "", "", "else", ":", "\n", "# if switch state, dump", "\n", "            ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "state", "=", "c", "\n", "ctr", "=", "1", "\n", "# flush out remainders", "\n", "", "", "if", "ctr", ">", "0", ":", "\n", "        ", "fp", ".", "write", "(", "chr", "(", "state", ")", ")", "\n", "fp", ".", "write", "(", "chr", "(", "ctr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.SmplVtx.__init__": [[19, 31], ["numpy.loadtxt", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "smpl_vtx_std", "=", "np", ".", "loadtxt", "(", "'./SmplUtil/vertices.txt'", ")", "\n", "min_x", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", ")", "\n", "max_x", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", ")", "\n", "min_y", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", ")", "\n", "max_y", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", ")", "\n", "min_z", "=", "np", ".", "min", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", ")", "\n", "max_z", "=", "np", ".", "max", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", ")", "\n", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "0", "]", "-", "min_x", ")", "/", "(", "max_x", "-", "min_x", ")", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "1", "]", "-", "min_y", ")", "/", "(", "max_y", "-", "min_y", ")", "\n", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", "=", "(", "self", ".", "smpl_vtx_std", "[", ":", ",", "2", "]", "-", "min_z", ")", "/", "(", "max_z", "-", "min_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.get_smpl_std_vertex": [[36, 38], ["None"], "function", ["None"], ["def", "get_smpl_std_vertex", "(", ")", ":", "\n", "    ", "return", "_smpl_vtx", ".", "smpl_vtx_std", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize": [[40, 76], ["numpy.array", "numpy.zeros", "numpy.asarray", "numpy.min", "numpy.max", "numpy.int32", "numpy.int32", "range", "math.floor", "math.floor", "math.floor", "numpy.maximum", "math.ceil", "math.ceil", "math.ceil", "numpy.minimum", "range", "numpy.array", "range", "numpy.array", "TriBoxTest.tri_box_overlap"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.tri_box_overlap"], ["", "def", "voxelize", "(", "mesh_v", ",", "mesh_f", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "box_half_size", "=", "np", ".", "array", "(", "[", "voxel_size", "/", "2.0", ",", "voxel_size", "/", "2.0", ",", "voxel_size", "/", "2.0", "]", ")", "\n", "dim_x", ",", "dim_y", ",", "dim_z", "=", "dim_w", ",", "dim_h", ",", "dim_w", "\n", "dim_x_half", ",", "dim_y_half", ",", "dim_z_half", "=", "dim_x", "/", "2", ",", "dim_y", "/", "2", ",", "dim_z", "/", "2", "\n", "new_volume", "=", "np", ".", "zeros", "(", "(", "dim_x", ",", "dim_y", ",", "dim_z", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "f", "in", "mesh_f", ":", "\n", "        ", "v0", "=", "mesh_v", "[", "f", "[", "0", "]", ",", ":", "]", "\n", "v1", "=", "mesh_v", "[", "f", "[", "1", "]", ",", ":", "]", "\n", "v2", "=", "mesh_v", "[", "f", "[", "2", "]", ",", ":", "]", "\n", "\n", "vs", "=", "np", ".", "asarray", "(", "[", "v0", ",", "v1", ",", "v2", "]", ")", "\n", "min_corner", "=", "np", ".", "min", "(", "vs", ",", "axis", "=", "0", ")", "\n", "max_corner", "=", "np", ".", "max", "(", "vs", ",", "axis", "=", "0", ")", "\n", "\n", "min_corner", "[", "0", "]", "=", "math", ".", "floor", "(", "min_corner", "[", "0", "]", "/", "voxel_size", ")", "+", "dim_x_half", "\n", "min_corner", "[", "1", "]", "=", "math", ".", "floor", "(", "min_corner", "[", "1", "]", "/", "voxel_size", ")", "+", "dim_y_half", "\n", "min_corner", "[", "2", "]", "=", "math", ".", "floor", "(", "min_corner", "[", "2", "]", "/", "voxel_size", ")", "+", "dim_z_half", "\n", "min_corner", "=", "np", ".", "int32", "(", "np", ".", "maximum", "(", "min_corner", ",", "0", ")", ")", "\n", "\n", "max_corner", "[", "0", "]", "=", "math", ".", "ceil", "(", "max_corner", "[", "0", "]", "/", "voxel_size", ")", "+", "dim_x_half", "\n", "max_corner", "[", "1", "]", "=", "math", ".", "ceil", "(", "max_corner", "[", "1", "]", "/", "voxel_size", ")", "+", "dim_y_half", "\n", "max_corner", "[", "2", "]", "=", "math", ".", "ceil", "(", "max_corner", "[", "2", "]", "/", "voxel_size", ")", "+", "dim_z_half", "\n", "max_corner", "=", "np", ".", "int32", "(", "np", ".", "minimum", "(", "max_corner", ",", "np", ".", "array", "(", "[", "dim_x", ",", "dim_y", ",", "dim_z", "]", ")", ")", ")", "\n", "\n", "for", "xx", "in", "range", "(", "min_corner", "[", "0", "]", ",", "max_corner", "[", "0", "]", ")", ":", "\n", "            ", "for", "yy", "in", "range", "(", "min_corner", "[", "1", "]", ",", "max_corner", "[", "1", "]", ")", ":", "\n", "                ", "for", "zz", "in", "range", "(", "min_corner", "[", "2", "]", ",", "max_corner", "[", "2", "]", ")", ":", "\n", "                    ", "vxx", "=", "(", "xx", "-", "dim_x_half", "+", "0.5", ")", "*", "voxel_size", "\n", "vyy", "=", "(", "yy", "-", "dim_y_half", "+", "0.5", ")", "*", "voxel_size", "\n", "vzz", "=", "(", "zz", "-", "dim_z_half", "+", "0.5", ")", "*", "voxel_size", "\n", "box_center", "=", "np", ".", "array", "(", "[", "vxx", ",", "vyy", ",", "vzz", "]", ")", "\n", "if", "tri_box_overlap", "(", "box_center", ",", "box_half_size", ",", "vs", ")", ":", "\n", "                        ", "new_volume", "[", "xx", ",", "yy", ",", "zz", "]", "=", "1", "\n", "\n", "", "", "", "", "", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.voxelize_2": [[78, 90], ["numpy.zeros", "subprocess.call", "subprocess.call", "open", "fp.readlines", "os.path.join", "line.split", "int", "int", "int"], "function", ["None"], ["", "def", "voxelize_2", "(", "mesh_path", ",", "dim_h", ",", "dim_w", ",", "voxelizer_exe_path", ")", ":", "\n", "    ", "dim_x", ",", "dim_y", ",", "dim_z", "=", "dim_w", ",", "dim_h", ",", "dim_w", "\n", "new_volume", "=", "np", ".", "zeros", "(", "(", "dim_x", ",", "dim_y", ",", "dim_z", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "call", "(", "[", "os", ".", "path", ".", "join", "(", "voxelizer_exe_path", ",", "'voxelizer'", ")", ",", "mesh_path", ",", "mesh_path", "+", "'.occvox'", "]", ")", "\n", "with", "open", "(", "mesh_path", "+", "'.occvox'", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ".", "readlines", "(", ")", ":", "\n", "            ", "indices", "=", "line", ".", "split", "(", "' '", ")", "\n", "vx", ",", "vy", ",", "vz", "=", "int", "(", "indices", "[", "0", "]", ")", ",", "int", "(", "indices", "[", "1", "]", ")", ",", "int", "(", "indices", "[", "2", "]", ")", "\n", "new_volume", "[", "vx", ",", "vy", ",", "vz", "]", "=", "1", "\n", "", "", "call", "(", "[", "'rm'", ",", "mesh_path", "+", "'.occvox'", "]", ")", "\n", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.calc_vmap_volume": [[92, 144], ["VoxelizerUtil.get_smpl_std_vertex", "numpy.zeros", "scipy.spatial.KDTree", "scipy.spatial.KDTree", "numpy.where", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "scipy.spatial.KDTree.query", "numpy.exp", "numpy.zeros", "numpy.zeros", "range", "numpy.square"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.get_smpl_std_vertex"], ["", "def", "calc_vmap_volume", "(", "smpl_volume", ",", "smpl_v", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "K", "=", "4", "\n", "\n", "smpl_std_v", "=", "get_smpl_std_vertex", "(", ")", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "smpl_volume", ".", "shape", "[", "0", "]", ",", "smpl_volume", ".", "shape", "[", "1", "]", ",", "smpl_volume", ".", "shape", "[", "2", "]", "\n", "smpl_v_volume", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "kd_tree", "=", "scipy", ".", "spatial", ".", "KDTree", "(", "smpl_v", ")", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "where", "(", "smpl_volume", ">", "0", ")", "\n", "oc_num", "=", "xx", ".", "shape", "[", "0", "]", "\n", "\n", "xx1", "=", "np", ".", "expand_dims", "(", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "axis", "=", "-", "1", ")", "\n", "yy1", "=", "np", ".", "expand_dims", "(", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "axis", "=", "-", "1", ")", "\n", "zz1", "=", "np", ".", "expand_dims", "(", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "axis", "=", "-", "1", ")", "\n", "\n", "pts", "=", "np", ".", "concatenate", "(", "(", "xx1", ",", "yy1", ",", "zz1", ")", ",", "axis", "=", "-", "1", ")", "\n", "dist_list", ",", "id_list", "=", "kd_tree", ".", "query", "(", "pts", ",", "k", "=", "K", ")", "\n", "\n", "weight_list", "=", "np", ".", "exp", "(", "-", "np", ".", "square", "(", "dist_list", ")", "/", "sigma", ")", "\n", "vmap", "=", "np", ".", "zeros", "(", "(", "oc_num", ",", "3", ")", ")", "\n", "vmap_weight", "=", "np", ".", "zeros", "(", "(", "oc_num", ",", "1", ")", ")", "\n", "\n", "for", "ni", "in", "range", "(", "K", ")", ":", "\n", "        ", "vmap_weight", "[", ":", ",", "0", "]", "+=", "weight_list", "[", ":", ",", "ni", "]", "\n", "vmap", "+=", "weight_list", "[", ":", ",", "ni", ":", "(", "ni", "+", "1", ")", "]", "*", "smpl_std_v", "[", "id_list", "[", ":", ",", "ni", "]", ",", ":", "]", "\n", "\n", "", "vmap", "/=", "vmap_weight", "\n", "smpl_v_volume", "[", "xx", ",", "yy", ",", "zz", ",", ":", "]", "=", "vmap", "[", ":", ",", ":", "]", "\n", "\n", "# for xx in range(x_dim):", "\n", "#     for yy in range(y_dim):", "\n", "#         for zz in range(z_dim):", "\n", "#             if smpl_volume[xx, yy, zz] > 0:", "\n", "#                 pt = np.array([(xx - dim_w_half + 0.5) * voxel_size,", "\n", "#                                (yy - dim_h_half + 0.5) * voxel_size,", "\n", "#                                (zz - dim_w_half + 0.5) * voxel_size])", "\n", "#                 dist_list, idx_list = kd_tree.query(pt, k=4)", "\n", "#", "\n", "#                 sum_weight = 0", "\n", "#                 v_map = np.zeros((3,))", "\n", "#                 for d, i in zip(dist_list, idx_list):", "\n", "#                     w = math.exp(-d*d/sigma)", "\n", "#                     sum_weight += w", "\n", "#                     v_map += w * smpl_std_v[i, :]", "\n", "#                 v_map /= sum_weight", "\n", "#                 smpl_v_volume[xx, yy, zz, :] = v_map", "\n", "\n", "return", "smpl_v_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.calc_vmap_volume_v2": [[146, 176], ["VoxelizerUtil.get_smpl_std_vertex", "numpy.zeros", "scipy.spatial.KDTree", "scipy.spatial.KDTree", "smpl_volume.nonzero", "numpy.array", "scipy.spatial.KDTree.query", "numpy.zeros", "zip", "math.exp"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.get_smpl_std_vertex"], ["", "def", "calc_vmap_volume_v2", "(", "smpl_volume", ",", "smpl_v", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "smpl_std_v", "=", "get_smpl_std_vertex", "(", ")", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "smpl_volume", ".", "shape", "[", "0", "]", ",", "smpl_volume", ".", "shape", "[", "1", "]", ",", "smpl_volume", ".", "shape", "[", "2", "]", "\n", "smpl_v_volume", "=", "np", ".", "zeros", "(", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kd_tree", "=", "scipy", ".", "spatial", ".", "KDTree", "(", "smpl_v", ")", "\n", "\n", "xx_nz", ",", "yy_nz", ",", "zz_nz", "=", "smpl_volume", ".", "nonzero", "(", ")", "\n", "for", "xx", "in", "xx_nz", ":", "\n", "        ", "for", "yy", "in", "yy_nz", ":", "\n", "            ", "for", "zz", "in", "zz_nz", ":", "\n", "                ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "dist_list", ",", "idx_list", "=", "kd_tree", ".", "query", "(", "pt", ",", "k", "=", "4", ")", "\n", "\n", "sum_weight", "=", "0", "\n", "v_map", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "for", "d", ",", "i", "in", "zip", "(", "dist_list", ",", "idx_list", ")", ":", "\n", "                    ", "w", "=", "math", ".", "exp", "(", "-", "d", "*", "d", "/", "sigma", ")", "\n", "sum_weight", "+=", "w", "\n", "v_map", "+=", "w", "*", "smpl_std_v", "[", "i", ",", ":", "]", "\n", "", "v_map", "/=", "sum_weight", "\n", "smpl_v_volume", "[", "xx", ",", "yy", ",", "zz", ",", ":", "]", "=", "v_map", "\n", "\n", "", "", "", "return", "smpl_v_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.load_binvox_as_volume": [[178, 182], ["open", "binvox_rw.read_as_3d_array"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_as_3d_array"], ["", "def", "load_binvox_as_volume", "(", "binvox_path", ",", "voxel_size", ")", ":", "\n", "    ", "with", "open", "(", "binvox_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "binvox", "=", "binvox_rw", ".", "read_as_3d_array", "(", "f", ",", "fix_coords", "=", "True", ")", ".", "data", "\n", "", "return", "binvox", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.load_binvox_as_coords": [[184, 201], ["range", "numpy.asarray", "open", "range", "binvox_rw.read_as_3d_array", "range", "np.asarray.append"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.binvox_rw.read_as_3d_array"], ["", "def", "load_binvox_as_coords", "(", "binvox_path", ",", "voxel_size", ")", ":", "\n", "    ", "with", "open", "(", "binvox_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "binvox", "=", "binvox_rw", ".", "read_as_3d_array", "(", "f", ",", "fix_coords", "=", "True", ")", ".", "data", "\n", "\n", "", "x_dim", ",", "y_dim", ",", "z_dim", "=", "binvox", ".", "shape", "[", "0", "]", ",", "binvox", ".", "shape", "[", "1", "]", ",", "binvox", ".", "shape", "[", "2", "]", "\n", "dim_x_half", ",", "dim_y_half", ",", "dim_z_half", "=", "x_dim", "/", "2", ",", "y_dim", "/", "2", ",", "z_dim", "/", "2", "\n", "coords_list", "=", "[", "]", "\n", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "        ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "            ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                ", "if", "binvox", "[", "xx", ",", "yy", ",", "zz", "]", ">", "0", ":", "\n", "                    ", "coords_list", ".", "append", "(", "[", "(", "xx", "-", "dim_x_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_y_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_z_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "\n", "", "", "", "", "coords_list", "=", "np", ".", "asarray", "(", "coords_list", ")", "\n", "return", "coords_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.resize_volume": [[203, 232], ["numpy.zeros", "print", "range", "range", "range", "int", "int", "int", "round", "round", "round"], "function", ["None"], ["", "def", "resize_volume", "(", "volume", ",", "dim_x", ",", "dim_y", ",", "dim_z", ")", ":", "\n", "    ", "new_volume", "=", "np", ".", "zeros", "(", "(", "dim_x", ",", "dim_y", ",", "dim_z", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# scale_x = dim_x/volume.shape[0]", "\n", "# scale_y = dim_y/volume.shape[1]", "\n", "# scale_z = dim_z/volume.shape[2]", "\n", "#", "\n", "# for xx in range(volume.shape[0]):", "\n", "#     for yy in range(volume.shape[1]):", "\n", "#         for zz in range(volume.shape[2]):", "\n", "#             if volume[xx, yy, zz] > 0:", "\n", "#                 xxx = int(round(xx * scale_x))", "\n", "#                 yyy = int(round(yy * scale_y))", "\n", "#                 zzz = int(round(zz * scale_z))", "\n", "#                 new_volume[xxx, yyy, zzz] = 1", "\n", "scale_x", "=", "volume", ".", "shape", "[", "0", "]", "/", "dim_x", "\n", "scale_y", "=", "volume", ".", "shape", "[", "1", "]", "/", "dim_y", "\n", "scale_z", "=", "volume", ".", "shape", "[", "2", "]", "/", "dim_z", "\n", "\n", "print", "(", "scale_x", ",", "scale_y", ",", "scale_z", ")", "\n", "\n", "for", "xx", "in", "range", "(", "dim_x", ")", ":", "\n", "        ", "for", "yy", "in", "range", "(", "dim_y", ")", ":", "\n", "            ", "for", "zz", "in", "range", "(", "dim_z", ")", ":", "\n", "                ", "xxx", "=", "int", "(", "round", "(", "(", "xx", "+", "0.5", ")", "*", "scale_x", "-", "0.5", ")", ")", "\n", "yyy", "=", "int", "(", "round", "(", "(", "yy", "+", "0.5", ")", "*", "scale_y", "-", "0.5", ")", ")", "\n", "zzz", "=", "int", "(", "round", "(", "(", "zz", "+", "0.5", ")", "*", "scale_z", "-", "0.5", ")", ")", "\n", "new_volume", "[", "xx", ",", "yy", ",", "zz", "]", "=", "volume", "[", "xxx", ",", "yyy", ",", "zzz", "]", "\n", "\n", "", "", "", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.get_volume_from_points": [[234, 246], ["numpy.zeros", "int", "int", "int", "min", "min", "min", "round", "round", "round", "max", "max", "max"], "function", ["None"], ["", "def", "get_volume_from_points", "(", "points", ",", "dim_x", ",", "dim_y", ",", "dim_z", ",", "voxel_size", ")", ":", "\n", "    ", "dim_x_half", ",", "dim_y_half", ",", "dim_z_half", "=", "dim_x", "/", "2", ",", "dim_y", "/", "2", ",", "dim_z", "/", "2", "\n", "new_volume", "=", "np", ".", "zeros", "(", "(", "dim_x", ",", "dim_y", ",", "dim_z", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "p", "in", "points", ":", "\n", "        ", "xx", "=", "int", "(", "round", "(", "p", "[", "0", "]", "/", "voxel_size", "-", "0.5", "+", "dim_x_half", ")", ")", "\n", "yy", "=", "int", "(", "round", "(", "p", "[", "1", "]", "/", "voxel_size", "-", "0.5", "+", "dim_y_half", ")", ")", "\n", "zz", "=", "int", "(", "round", "(", "p", "[", "2", "]", "/", "voxel_size", "-", "0.5", "+", "dim_z_half", ")", ")", "\n", "xx", "=", "min", "(", "max", "(", "0", ",", "xx", ")", ",", "dim_x", "-", "1", ")", "\n", "yy", "=", "min", "(", "max", "(", "0", ",", "yy", ")", ",", "dim_y", "-", "1", ")", "\n", "zz", "=", "min", "(", "max", "(", "0", ",", "zz", ")", ",", "dim_z", "-", "1", ")", "\n", "new_volume", "[", "xx", ",", "yy", ",", "zz", "]", "=", "1", "\n", "", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.save_volume": [[248, 263], ["open", "range", "range", "range", "numpy.array", "fp.write"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "def", "save_volume", "(", "volume", ",", "fname", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "volume", ".", "shape", "[", "0", "]", ",", "volume", ".", "shape", "[", "1", "]", ",", "volume", ".", "shape", "[", "2", "]", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "            ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "                ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                    ", "if", "volume", "[", "xx", ",", "yy", ",", "zz", "]", ">", "0", ":", "\n", "                        ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "pt", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.save_v_volume": [[265, 281], ["open", "range", "range", "range", "numpy.array", "fp.write", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "", "", "", "", "def", "save_v_volume", "(", "v_volume", ",", "fname", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "v_volume", ".", "shape", "[", "0", "]", ",", "v_volume", ".", "shape", "[", "1", "]", ",", "v_volume", ".", "shape", "[", "2", "]", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "            ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "                ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                    ", "if", "(", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", ":", "]", "!=", "np", ".", "zeros", "(", "(", "3", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "any", "(", ")", ":", "\n", "                        ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f %f %f %f\\n'", "%", "\n", "(", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "pt", "[", "2", "]", ",", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "0", "]", ",", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "1", "]", ",", "v_volume", "[", "xx", ",", "yy", ",", "zz", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.save_volume_soft": [[283, 298], ["open", "range", "range", "range", "numpy.array", "fp.write"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["", "", "", "", "", "", "def", "save_volume_soft", "(", "volume", ",", "fname", ",", "dim_h", ",", "dim_w", ",", "voxel_size", ",", "thres", ")", ":", "\n", "    ", "dim_h_half", "=", "dim_h", "/", "2", "\n", "dim_w_half", "=", "dim_w", "/", "2", "\n", "sigma", "=", "0.05", "*", "0.05", "\n", "\n", "x_dim", ",", "y_dim", ",", "z_dim", "=", "volume", ".", "shape", "[", "0", "]", ",", "volume", ".", "shape", "[", "1", "]", ",", "volume", ".", "shape", "[", "2", "]", "\n", "with", "open", "(", "fname", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "for", "xx", "in", "range", "(", "x_dim", ")", ":", "\n", "            ", "for", "yy", "in", "range", "(", "y_dim", ")", ":", "\n", "                ", "for", "zz", "in", "range", "(", "z_dim", ")", ":", "\n", "                    ", "if", "volume", "[", "xx", ",", "yy", ",", "zz", "]", ">", "thres", ":", "\n", "                        ", "pt", "=", "np", ".", "array", "(", "[", "(", "xx", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "yy", "-", "dim_h_half", "+", "0.5", ")", "*", "voxel_size", ",", "\n", "(", "zz", "-", "dim_w_half", "+", "0.5", ")", "*", "voxel_size", "]", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "pt", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.load_volume_from_mat": [[300, 302], ["scipy.loadmat"], "function", ["None"], ["", "", "", "", "", "", "def", "load_volume_from_mat", "(", "fname", ")", ":", "\n", "    ", "return", "sio", ".", "loadmat", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.rotate_volume": [[304, 322], ["numpy.flip", "len", "numpy.transpose", "numpy.flip", "numpy.flip", "len", "numpy.transpose", "numpy.flip", "len", "numpy.transpose", "len", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_volume", "(", "volume", ",", "view_id", ")", ":", "\n", "    ", "new_volume", "=", "volume", "\n", "if", "view_id", "==", "1", ":", "# z-->x, (-x)-->z", "\n", "        ", "if", "len", "(", "new_volume", ".", "shape", ")", "==", "3", ":", "\n", "            ", "new_volume", "=", "np", ".", "transpose", "(", "new_volume", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "new_volume", ".", "shape", ")", "==", "4", ":", "\n", "            ", "new_volume", "=", "np", ".", "transpose", "(", "new_volume", ",", "(", "2", ",", "1", ",", "0", ",", "3", ")", ")", "\n", "", "new_volume", "=", "np", ".", "flip", "(", "new_volume", ",", "axis", "=", "2", ")", "\n", "", "elif", "view_id", "==", "2", ":", "\n", "        ", "new_volume", "=", "np", ".", "flip", "(", "new_volume", ",", "axis", "=", "0", ")", "\n", "new_volume", "=", "np", ".", "flip", "(", "new_volume", ",", "axis", "=", "2", ")", "\n", "", "elif", "view_id", "==", "3", ":", "\n", "        ", "if", "len", "(", "new_volume", ".", "shape", ")", "==", "3", ":", "\n", "            ", "new_volume", "=", "np", ".", "transpose", "(", "new_volume", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "", "elif", "len", "(", "new_volume", ".", "shape", ")", "==", "4", ":", "\n", "            ", "new_volume", "=", "np", ".", "transpose", "(", "new_volume", ",", "(", "2", ",", "1", ",", "0", ",", "3", ")", ")", "\n", "", "new_volume", "=", "np", ".", "flip", "(", "new_volume", ",", "axis", "=", "0", ")", "\n", "", "return", "new_volume", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.VoxelizerUtil.binary_fill_from_corner_3D": [[324, 343], ["numpy.logical_not", "numpy.zeros", "isinstance", "scipy.ndimage.binary_dilation", "numpy.logical_not", "scipy.ndimage.binary_dilation", "numpy.logical_not"], "function", ["None"], ["", "def", "binary_fill_from_corner_3D", "(", "input", ",", "structure", "=", "None", ",", "output", "=", "None", ",", "origin", "=", "0", ")", ":", "\n", "    ", "mask", "=", "np", ".", "logical_not", "(", "input", ")", "\n", "tmp", "=", "np", ".", "zeros", "(", "mask", ".", "shape", ",", "bool", ")", "\n", "for", "xi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "0", "]", "-", "1", "]", ":", "\n", "        ", "for", "yi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "1", "]", "-", "1", "]", ":", "\n", "            ", "for", "zi", "in", "[", "0", ",", "tmp", ".", "shape", "[", "2", "]", "-", "1", "]", ":", "\n", "                ", "tmp", "[", "xi", ",", "yi", ",", "zi", "]", "=", "True", "\n", "", "", "", "inplace", "=", "isinstance", "(", "output", ",", "np", ".", "ndarray", ")", "\n", "if", "inplace", ":", "\n", "        ", "ndimage", ".", "binary_dilation", "(", "tmp", ",", "structure", "=", "structure", ",", "iterations", "=", "-", "1", ",", "\n", "mask", "=", "mask", ",", "output", "=", "output", ",", "border_value", "=", "0", ",", "\n", "origin", "=", "origin", ")", "\n", "np", ".", "logical_not", "(", "output", ",", "output", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "ndimage", ".", "binary_dilation", "(", "tmp", ",", "structure", "=", "structure", ",", "iterations", "=", "-", "1", ",", "\n", "mask", "=", "mask", ",", "border_value", "=", "0", ",", "\n", "origin", "=", "origin", ")", "\n", "np", ".", "logical_not", "(", "output", ",", "output", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.find_min_max": [[16, 18], ["min", "max", "min", "max"], "function", ["None"], ["def", "find_min_max", "(", "x0", ",", "x1", ",", "x2", ")", ":", "\n", "    ", "return", "min", "(", "min", "(", "x0", ",", "x1", ")", ",", "x2", ")", ",", "max", "(", "max", "(", "x0", ",", "x1", ")", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.plane_box_overlap": [[20, 36], ["range", "numpy.zeros", "numpy.zeros", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "plane_box_overlap", "(", "normal", ",", "vert", ",", "maxbox", ")", ":", "\n", "    ", "vmin", ",", "vmax", "=", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", ",", "np", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "for", "q", "in", "range", "(", "3", ")", ":", "\n", "        ", "v", "=", "vert", "[", "q", "]", "\n", "if", "normal", "[", "q", "]", ">", "0.", ":", "\n", "            ", "vmin", "[", "q", "]", "=", "-", "maxbox", "[", "q", "]", "-", "v", "\n", "vmax", "[", "q", "]", "=", "maxbox", "[", "q", "]", "-", "v", "\n", "", "else", ":", "\n", "            ", "vmin", "[", "q", "]", "=", "maxbox", "[", "q", "]", "-", "v", "\n", "vmax", "[", "q", "]", "=", "-", "maxbox", "[", "q", "]", "-", "v", "\n", "\n", "", "", "if", "np", ".", "dot", "(", "normal", ",", "vmin", ")", ">", "0", ":", "\n", "        ", "return", "False", "\n", "", "if", "np", ".", "dot", "(", "normal", ",", "vmax", ")", ">=", "0", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_X01": [[38, 51], ["None"], "function", ["None"], ["", "def", "AXISTEST_X01", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p0", "=", "a", "*", "v0", "[", "Y", "]", "-", "b", "*", "v0", "[", "Z", "]", "\n", "p2", "=", "a", "*", "v2", "[", "Y", "]", "-", "b", "*", "v2", "[", "Z", "]", "\n", "if", "p0", "<", "p2", ":", "\n", "        ", "mn", "=", "p0", "\n", "mx", "=", "p2", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p2", "\n", "mx", "=", "p0", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "Y", "]", "+", "fb", "*", "boxhalfsize", "[", "Z", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_X2": [[53, 66], ["None"], "function", ["None"], ["", "def", "AXISTEST_X2", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p0", "=", "a", "*", "v0", "[", "Y", "]", "-", "b", "*", "v0", "[", "Z", "]", "\n", "p1", "=", "a", "*", "v1", "[", "Y", "]", "-", "b", "*", "v1", "[", "Z", "]", "\n", "if", "p0", "<", "p1", ":", "\n", "        ", "mn", "=", "p0", "\n", "mx", "=", "p1", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p1", "\n", "mx", "=", "p0", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "Y", "]", "+", "fb", "*", "boxhalfsize", "[", "Z", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Y02": [[67, 80], ["None"], "function", ["None"], ["", "def", "AXISTEST_Y02", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p0", "=", "-", "a", "*", "v0", "[", "X", "]", "+", "b", "*", "v0", "[", "Z", "]", "\n", "p2", "=", "-", "a", "*", "v2", "[", "X", "]", "+", "b", "*", "v2", "[", "Z", "]", "\n", "if", "p0", "<", "p2", ":", "\n", "        ", "mn", "=", "p0", "\n", "mx", "=", "p2", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p2", "\n", "mx", "=", "p0", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "X", "]", "+", "fb", "*", "boxhalfsize", "[", "Z", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Y1": [[82, 95], ["None"], "function", ["None"], ["", "def", "AXISTEST_Y1", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p0", "=", "-", "a", "*", "v0", "[", "X", "]", "+", "b", "*", "v0", "[", "Z", "]", "\n", "p1", "=", "-", "a", "*", "v1", "[", "X", "]", "+", "b", "*", "v1", "[", "Z", "]", "\n", "if", "p0", "<", "p1", ":", "\n", "        ", "mn", "=", "p0", "\n", "mx", "=", "p1", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p1", "\n", "mx", "=", "p0", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "X", "]", "+", "fb", "*", "boxhalfsize", "[", "Z", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Z12": [[97, 110], ["None"], "function", ["None"], ["", "def", "AXISTEST_Z12", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p1", "=", "a", "*", "v1", "[", "X", "]", "-", "b", "*", "v1", "[", "Y", "]", "\n", "p2", "=", "a", "*", "v2", "[", "X", "]", "-", "b", "*", "v2", "[", "Y", "]", "\n", "if", "p2", "<", "p1", ":", "\n", "        ", "mn", "=", "p2", "\n", "mx", "=", "p1", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p1", "\n", "mx", "=", "p2", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "X", "]", "+", "fb", "*", "boxhalfsize", "[", "Y", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Z0": [[112, 125], ["None"], "function", ["None"], ["", "def", "AXISTEST_Z0", "(", "a", ",", "b", ",", "fa", ",", "fb", ",", "v0", ",", "v1", ",", "v2", ",", "boxhalfsize", ")", ":", "\n", "    ", "p0", "=", "a", "*", "v0", "[", "X", "]", "-", "b", "*", "v0", "[", "Y", "]", "\n", "p1", "=", "a", "*", "v1", "[", "X", "]", "-", "b", "*", "v1", "[", "Y", "]", "\n", "if", "p0", "<", "p1", ":", "\n", "        ", "mn", "=", "p0", "\n", "mx", "=", "p1", "\n", "", "else", ":", "\n", "        ", "mn", "=", "p1", "\n", "mx", "=", "p0", "\n", "", "rad", "=", "fa", "*", "boxhalfsize", "[", "X", "]", "+", "fb", "*", "boxhalfsize", "[", "Y", "]", "\n", "if", "mn", ">", "rad", "or", "mx", "<", "-", "rad", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.tri_box_overlap": [[127, 171], ["abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "TriBoxTest.find_min_max", "TriBoxTest.find_min_max", "TriBoxTest.find_min_max", "numpy.cross", "TriBoxTest.AXISTEST_X01", "TriBoxTest.AXISTEST_Y02", "TriBoxTest.AXISTEST_Z12", "TriBoxTest.AXISTEST_X01", "TriBoxTest.AXISTEST_Y02", "TriBoxTest.AXISTEST_Z0", "TriBoxTest.AXISTEST_X2", "TriBoxTest.AXISTEST_Y1", "TriBoxTest.AXISTEST_Z12", "TriBoxTest.plane_box_overlap"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.find_min_max", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.find_min_max", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.find_min_max", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_X01", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Y02", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Z12", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_X01", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Y02", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Z0", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_X2", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Y1", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.AXISTEST_Z12", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.TriBoxTest.plane_box_overlap"], ["", "def", "tri_box_overlap", "(", "box_center", ",", "box_half_size", ",", "triverts", ")", ":", "\n", "    ", "v0", "=", "triverts", "[", "0", ",", ":", "]", "-", "box_center", "\n", "v1", "=", "triverts", "[", "1", ",", ":", "]", "-", "box_center", "\n", "v2", "=", "triverts", "[", "2", ",", ":", "]", "-", "box_center", "\n", "\n", "e0", "=", "v1", "-", "v0", "\n", "e1", "=", "v2", "-", "v1", "\n", "e2", "=", "v0", "-", "v2", "\n", "\n", "fex", "=", "abs", "(", "e0", "[", "X", "]", ")", "\n", "fey", "=", "abs", "(", "e0", "[", "Y", "]", ")", "\n", "fez", "=", "abs", "(", "e0", "[", "Z", "]", ")", "\n", "\n", "if", "not", "AXISTEST_X01", "(", "e0", "[", "Z", "]", ",", "e0", "[", "Y", "]", ",", "fez", ",", "fey", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Y02", "(", "e0", "[", "Z", "]", ",", "e0", "[", "X", "]", ",", "fez", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Z12", "(", "e0", "[", "Y", "]", ",", "e0", "[", "X", "]", ",", "fey", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "\n", "fex", "=", "abs", "(", "e1", "[", "X", "]", ")", "\n", "fey", "=", "abs", "(", "e1", "[", "Y", "]", ")", "\n", "fez", "=", "abs", "(", "e1", "[", "Z", "]", ")", "\n", "if", "not", "AXISTEST_X01", "(", "e1", "[", "Z", "]", ",", "e1", "[", "Y", "]", ",", "fez", ",", "fey", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Y02", "(", "e1", "[", "Z", "]", ",", "e1", "[", "X", "]", ",", "fez", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Z0", "(", "e1", "[", "Y", "]", ",", "e1", "[", "X", "]", ",", "fey", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "\n", "fex", "=", "abs", "(", "e2", "[", "X", "]", ")", "\n", "fey", "=", "abs", "(", "e2", "[", "Y", "]", ")", "\n", "fez", "=", "abs", "(", "e2", "[", "Z", "]", ")", "\n", "if", "not", "AXISTEST_X2", "(", "e2", "[", "Z", "]", ",", "e2", "[", "Y", "]", ",", "fez", ",", "fey", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Y1", "(", "e2", "[", "Z", "]", ",", "e2", "[", "X", "]", ",", "fez", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "if", "not", "AXISTEST_Z12", "(", "e2", "[", "Y", "]", ",", "e2", "[", "X", "]", ",", "fey", ",", "fex", ",", "v0", ",", "v1", ",", "v2", ",", "box_half_size", ")", ":", "return", "False", "\n", "\n", "mn", ",", "mx", "=", "find_min_max", "(", "v0", "[", "X", "]", ",", "v1", "[", "X", "]", ",", "v2", "[", "X", "]", ")", "\n", "if", "mn", ">", "box_half_size", "[", "X", "]", "or", "mx", "<", "-", "box_half_size", "[", "X", "]", ":", "return", "False", "\n", "\n", "mn", ",", "mx", "=", "find_min_max", "(", "v0", "[", "Y", "]", ",", "v1", "[", "Y", "]", ",", "v2", "[", "Y", "]", ")", "\n", "if", "mn", ">", "box_half_size", "[", "Y", "]", "or", "mx", "<", "-", "box_half_size", "[", "Y", "]", ":", "return", "False", "\n", "\n", "mn", ",", "mx", "=", "find_min_max", "(", "v0", "[", "Z", "]", ",", "v1", "[", "Z", "]", ",", "v2", "[", "Z", "]", ")", "\n", "if", "mn", ">", "box_half_size", "[", "Z", "]", "or", "mx", "<", "-", "box_half_size", "[", "Z", "]", ":", "return", "False", "\n", "\n", "normal", "=", "np", ".", "cross", "(", "e0", ",", "v1", ")", "\n", "if", "not", "plane_box_overlap", "(", "normal", ",", "v0", ",", "box_half_size", ")", ":", "return", "False", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.__init__": [[11, 14], ["None"], "methods", ["None"], ["\n", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.set_log_file": [[15, 21], ["open", "CommonUtil.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["\n", "", "", "def", "set_log_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "assert", "self", ".", "file", "is", "None", "\n", "self", ".", "file", "=", "open", "(", "filename", ",", "'wt'", ")", "\n", "if", "self", ".", "buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "self", ".", "buffer", ")", "\n", "self", ".", "buffer", "=", "None", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write": [[22, 32], ["datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now.strftime", "datetime.datetime.now.strftime", "print", "CommonUtil.Logger.file.write", "map"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["\n", "", "", "def", "write", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "dtstr", "=", "now", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "t_msg", "=", "'[%s]'", "%", "dtstr", "+", "' %s'", "%", "' '", ".", "join", "(", "map", "(", "str", ",", "args", ")", ")", "\n", "\n", "print", "(", "t_msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "t_msg", "+", "'\\n'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "buffer", "+=", "t_msg", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush": [[33, 36], ["CommonUtil.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.flush"], ["\n", "", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.SmplVtx.__init__": [[53, 65], ["numpy.loadtxt", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.safe_mkdir": [[40, 43], ["os.path.exists", "os.mkdir"], "function", ["None"], ["\n", "\n", "def", "safe_rm_mkdir", "(", "dir", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.get_smpl_semantic_code": [[70, 73], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.calc_normal": [[77, 81], ["opendr.lighting.VertNormals"], "function", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.flip_axis_in_place": [[83, 94], ["len"], "function", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.transform_mesh_in_place": [[96, 108], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.rotate_model_in_place": [[110, 127], ["cv2.Rodrigues", "cv2.Rodrigues", "cv2.Rodrigues", "numpy.matmul", "mesh[].transpose", "numpy.matmul", "np.matmul.transpose", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.matmul", "mesh[].transpose", "numpy.matmul", "np.matmul.transpose", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.project_vertices": [[43, 49], ["chumpy.array", "opendr.camera.ProjectPoints", "chumpy.zeros"], "function", ["None"], ["def", "_project_vertices", "(", "v", ",", "w", ",", "h", ",", "cam_r", ",", "cam_t", ")", ":", "\n", "    ", "\"\"\"projects vertices onto image plane\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "U", "=", "ProjectPointsOrthogonal", "(", "v", "=", "V", ",", "f", "=", "[", "w", ",", "w", "]", ",", "c", "=", "[", "w", "/", "2.", ",", "h", "/", "2.", "]", ",", "\n", "k", "=", "ch", ".", "zeros", "(", "5", ")", ",", "t", "=", "cam_t", ",", "rt", "=", "cam_r", ")", "\n", "return", "U", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.render_color_model_with_lighting": [[51, 83], ["chumpy.ones", "chumpy.array", "numpy.zeros_like", "numpy.array", "opendr.renderer.ColoredRenderer", "opendr.lighting.LambertianPointLight", "numpy.zeros", "opendr.lighting.SphericalHarmonics", "len", "len", "opendr.lighting.LambertianPointLight", "len", "len"], "function", ["None"], ["", "def", "_render_color_model_with_lighting", "(", "w", ",", "h", ",", "v", ",", "vn", ",", "vc", ",", "f", ",", "u", ",", "\n", "sh_comps", "=", "None", ",", "light_c", "=", "ch", ".", "ones", "(", "3", ")", ",", "\n", "vlight_pos", "=", "None", ",", "vlight_color", "=", "None", ",", "\n", "bg_img", "=", "None", ")", ":", "\n", "    ", "\"\"\"renders colored model with lighting effect\"\"\"", "\n", "assert", "(", "sh_comps", "is", "not", "None", "or", "vlight_pos", "is", "not", "None", ")", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "np", ".", "zeros_like", "(", "v", ")", "\n", "\n", "# SH lighting", "\n", "if", "sh_comps", "is", "not", "None", ":", "\n", "        ", "A", "+=", "vc", "*", "SphericalHarmonics", "(", "vn", "=", "vn", ",", "components", "=", "sh_comps", ",", "light_color", "=", "light_c", ")", "\n", "\n", "# single point lighting (grey light)", "\n", "", "if", "vlight_color", "is", "not", "None", "and", "vlight_pos", "is", "not", "None", "and", "len", "(", "vlight_pos", ".", "shape", ")", "==", "1", ":", "\n", "        ", "A", "+=", "LambertianPointLight", "(", "f", "=", "f", ",", "v", "=", "v", ",", "num_verts", "=", "len", "(", "v", ")", ",", "light_pos", "=", "vlight_pos", ",", "\n", "light_color", "=", "vlight_color", ",", "vc", "=", "vc", ")", "\n", "\n", "# multiple point lighting (grey light)", "\n", "", "if", "vlight_color", "is", "not", "None", "and", "vlight_pos", "is", "not", "None", "and", "len", "(", "vlight_pos", ".", "shape", ")", "==", "2", ":", "\n", "        ", "for", "vlp", "in", "vlight_pos", ":", "\n", "            ", "A", "+=", "LambertianPointLight", "(", "f", "=", "f", ",", "v", "=", "v", ",", "num_verts", "=", "len", "(", "v", ")", ",", "light_pos", "=", "vlp", ",", "\n", "light_color", "=", "vlight_color", ",", "vc", "=", "vc", ")", "\n", "\n", "", "", "black_img", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "3", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bg_img_", "=", "bg_img", "if", "bg_img", "is", "not", "None", "else", "black_img", "\n", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "background_image", "=", "bg_img_", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.render_color_model_without_lighting": [[85, 95], ["chumpy.array", "numpy.array", "opendr.renderer.ColoredRenderer", "numpy.zeros"], "function", ["None"], ["", "def", "_render_color_model_without_lighting", "(", "w", ",", "h", ",", "v", ",", "vc", ",", "f", ",", "u", ",", "\n", "bg_img", "=", "None", ")", ":", "\n", "    ", "\"\"\"renders colored model without lighting effect\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "vc", "\n", "black_img", "=", "np", ".", "array", "(", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "3", ")", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "bg_img_", "=", "bg_img", "if", "bg_img", "is", "not", "None", "else", "black_img", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "background_image", "=", "bg_img_", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.render_mask": [[97, 104], ["chumpy.array", "numpy.ones", "opendr.renderer.ColoredRenderer", "chumpy.zeros"], "function", ["None"], ["", "def", "_render_mask", "(", "w", ",", "h", ",", "v", ",", "f", ",", "u", ")", ":", "\n", "    ", "\"\"\"renders silhouette\"\"\"", "\n", "V", "=", "ch", ".", "array", "(", "v", ")", "\n", "A", "=", "np", ".", "ones", "(", "v", ".", "shape", ")", "\n", "rn", "=", "ColoredRenderer", "(", "camera", "=", "u", ",", "v", "=", "V", ",", "f", "=", "f", ",", "vc", "=", "A", ",", "bgcolor", "=", "ch", ".", "zeros", "(", "3", ")", ",", "\n", "frustum", "=", "{", "'width'", ":", "w", ",", "'height'", ":", "h", ",", "'near'", ":", "1.0", ",", "'far'", ":", "20", "}", ")", "\n", "return", "rn", ".", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.compress_along_z_axis": [[106, 115], ["numpy.min", "numpy.max", "numpy.copy", "numpy.copy"], "function", ["None"], ["", "def", "render_training_pairs", "(", "mesh", ",", "smpl", ",", "img_w", ",", "img_h", ",", "camera_r", ",", "camera_t", ",", "color_bg", ",", "\n", "sh_comps", "=", "None", ",", "light_c", "=", "ch", ".", "ones", "(", "3", ")", ",", "\n", "vlight_pos", "=", "None", ",", "vlight_color", "=", "None", ")", ":", "\n", "    ", "\"\"\"generates training image pairs\n    Will generate color image, mask, semantic map, normal map\n    \"\"\"", "\n", "v_", ",", "v_smpl_", "=", "mesh", "[", "'v'", "]", ",", "smpl", "[", "'v'", "]", "\n", "\n", "# render color image", "\n", "# To avoid aliasing, I render the image with 2x resolution and then resize it", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.renderers.compress_along_z_axis_single": [[117, 124], ["numpy.min", "numpy.max", "numpy.copy"], "function", ["None"], ["u", "=", "_project_vertices", "(", "v_", ",", "img_w", "*", "2", ",", "img_h", "*", "2", ",", "camera_r", ",", "camera_t", ")", "\n", "color_bg", "=", "cv", ".", "resize", "(", "color_bg", ",", "(", "img_w", "*", "2", ",", "img_h", "*", "2", ")", ")", "\n", "img", "=", "_render_color_model_with_lighting", "(", "img_w", "*", "2", ",", "img_h", "*", "2", ",", "v_", ",", "mesh", "[", "'vn'", "]", ",", "\n", "mesh", "[", "'vc'", "]", ",", "mesh", "[", "'f'", "]", ",", "u", ",", "\n", "sh_comps", "=", "sh_comps", ",", "light_c", "=", "light_c", ",", "\n", "vlight_pos", "=", "vlight_pos", ",", "\n", "vlight_color", "=", "vlight_color", ",", "\n", "bg_img", "=", "color_bg", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data": [[5, 78], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "np.asarray.append", "np.asarray.append", "np.asarray.append", "ObjIO.load_obj_data.segElementData"], "function", ["None"], ["def", "load_obj_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.load_obj_data_binary": [[80, 153], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "np.asarray.append", "np.asarray.append", "np.asarray.append", "ObjIO.load_obj_data.segElementData"], "function", ["None"], ["\n", "\n", "", "def", "load_obj_data_binary", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data": [[155, 197], ["open", "fp.write", "fp.write", "fp.write", "zip", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["\n", "\n", "", "def", "save_obj_data", "(", "model", ",", "filename", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary": [[199, 245], ["open", "zip", "fp.write", "fp.write", "zip", "fp.write", "fp.write", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["\n", "\n", "", "", "", "", "", "def", "save_obj_data_binary", "(", "model", ",", "filename", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n", "\n", "", "", "", "", "", "def", "save_obj_data_binary_with_corner", "(", "model", ",", "min_corner", ",", "max_corner", ",", "corner_size", ",", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.ObjIO.save_obj_data_binary_with_corner": [[247, 317], ["open", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "fp.write", "zip", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write", "home.repos.pwc.inspect_result.ZhengZerong_DeepHuman.DataUtil.CommonUtil.Logger.write"], ["\n", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "# add corner", "\n", "", "", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", "+", "corner_size", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", "+", "corner_size", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", "+", "corner_size", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", ",", "min_corner", "[", "2", "]", ")", ")", "\n", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", "-", "corner_size", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", "-", "corner_size", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", "-", "corner_size", ")", ")", "\n", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", ",", "max_corner", "[", "2", "]", ")", ")", "\n", "\n", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n", "# add corner", "\n", "", "", "", "vid_start", "=", "model", "[", "'v'", "]", ".", "size", "/", "3", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "2", ",", "vid_start", "+", "3", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "4", ",", "vid_start", "+", "2", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "3", ",", "vid_start", "+", "4", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "2", ",", "vid_start", "+", "4", ",", "vid_start", "+", "3", ")", ")", "\n", "\n", "vid_start", "+=", "4", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "2", ",", "vid_start", "+", "3", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "4", ",", "vid_start", "+", "2", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "1", ",", "vid_start", "+", "3", ",", "vid_start", "+", "4", ")", ")", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "vid_start", "+", "2", ",", "vid_start", "+", "4", ",", "vid_start", "+", "3", ")", ")", "\n", "", "", ""]]}