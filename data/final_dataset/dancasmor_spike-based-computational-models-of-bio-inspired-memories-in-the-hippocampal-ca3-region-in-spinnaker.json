{"home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_pc_inhibitory.custom_plots": [[8, 49], ["utils.read_file", "utils.check_folder", "utils.generate_time_streams", "utils.plot_spike_pc_dg", "print", "print"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.read_file", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.check_folder", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_time_streams", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.plot_spike_pc_dg"], ["def", "custom_plots", "(", "fullPathFile", ",", "plot", ",", "save", ",", "saveName", ",", "savePath", ")", ":", "\n", "    ", "\"\"\"\n    Processing the data from a simulation to get a visual representation of the result\n\n    :param fullPathFile: the full path to the file with the data recorded from the simulation\n    :param plot: if show the plot in running time\n    :param save: if store the plots\n    :param saveName: the base name used to store the generated files\n    :param savePath: the base path used to store the generated files\n    :return: True if the simulation and/or the creation of the visual representation of the data has been done correctly\n            or False in other cases\n    \"\"\"", "\n", "# Open data file of the simulation", "\n", "data", "=", "utils", ".", "read_file", "(", "fullPathFile", ")", "\n", "if", "not", "data", ":", "\n", "        ", "print", "(", "\"Error to open data file\"", ")", "\n", "return", "False", "\n", "# Create folder to store all the generated files", "\n", "", "savePath", "=", "utils", ".", "check_folder", "(", "savePath", "+", "saveName", "+", "\"/\"", ")", "\n", "if", "not", "savePath", ":", "\n", "        ", "print", "(", "\"Error to create a folder to store generated files\"", ")", "\n", "return", "False", "\n", "\n", "# Search all variables which are going to be used to create the plots and representations", "\n", "", "vPC", ",", "spikesPC", ",", "spikesDG", ",", "wPC_PC", ",", "vINH", ",", "spikesINH", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "variable", "in", "data", "[", "\"variables\"", "]", ":", "\n", "        ", "if", "variable", "[", "\"type\"", "]", "==", "\"spikes\"", "and", "variable", "[", "\"popNameShort\"", "]", "==", "\"PCL\"", ":", "\n", "            ", "spikesPC", "=", "variable", "\n", "", "elif", "variable", "[", "\"type\"", "]", "==", "\"spikes\"", "and", "variable", "[", "\"popNameShort\"", "]", "==", "\"DGL\"", ":", "\n", "            ", "spikesDG", "=", "variable", "\n", "\n", "# Create the stream of time stamp and color to use in representations", "\n", "", "", "colors", "=", "[", "\"red\"", ",", "\"green\"", ",", "\"blue\"", ",", "\"orange\"", ",", "\"pink\"", ",", "\"goldenrod\"", "]", "\n", "timeStream", "=", "utils", ".", "generate_time_streams", "(", "data", "[", "\"simTime\"", "]", ",", "data", "[", "\"timeStep\"", "]", ",", "False", ")", "\n", "\n", "\n", "# Create a spike plot of all activations of DG and PC (CA3) neurons", "\n", "utils", ".", "plot_spike_pc_dg", "(", "spikesPC", "[", "\"data\"", "]", ",", "spikesDG", "[", "\"data\"", "]", ",", "timeStream", ",", "colors", ",", "0.01", ",", "\"Spikes DG-CA3\"", ",", "True", ",", "plot", ",", "\n", "save", ",", "saveName", "+", "\"_spikes_DG_CA3\"", ",", "savePath", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_pc_inhibitory.main": [[51, 74], ["simulation_and_plot_CA3_pc_inhibitory.custom_plots", "CA3_pc_inhibitory.main", "CA3_pc_inhibitory_static_syn.main"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.custom_plots", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.main", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.main"], ["", "def", "main", "(", "plot", ",", "save", ",", "savePath", ",", "execute", ",", "executeSTDPCA3", ",", "fullPathFile", ",", "saveName", ")", ":", "\n", "    ", "\"\"\"\n    Execute the simulation of the network and/or create a visual representation of the data recorded\n\n    :param plot: if show the plot in running time\n    :param save: if store the plots\n    :param savePath: the base path used to store the generated files\n    :param execute: if execute or not the simulation, in case of false, a fullPathFile is needed\n    :param executeSTDPCA3: if execute dinamic or static version\n    :param fullPathFile: the full path to the file with the data recorded from the simulation\n    :param saveName: the base name used to store the generated files\n    :return:\n    \"\"\"", "\n", "# Execute the model if applicable", "\n", "if", "execute", ":", "\n", "        ", "if", "executeSTDPCA3", ":", "\n", "            ", "fullPathFile", ",", "filename", "=", "CA3_pc_inhibitory", ".", "main", "(", ")", "\n", "saveName", "=", "filename", "\n", "", "else", ":", "\n", "            ", "fullPathFile", ",", "filename", "=", "CA3_pc_inhibitory_static_syn", ".", "main", "(", ")", "\n", "saveName", "=", "filename", "\n", "# Processing the data and plot it", "\n", "", "", "custom_plots", "(", "fullPathFile", ",", "plot", ",", "save", ",", "saveName", ",", "savePath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.CA3_pc_inhibitory_static_syn.main": [[64, 202], ["spynnaker8.setup", "spynnaker8.Population", "spynnaker8.Population", "sim.Population.set", "spynnaker8.Population", "spynnaker8.Population", "sim.Population.set", "spynnaker8.Projection", "utils.get_last_stamp_synapse_list", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "sim.Population.record", "sim.Population.record", "spynnaker8.run", "sim.Population.get_data", "sim.Population.get_data", "spynnaker8.end", "utils.format_neo_data", "utils.format_neo_data", "utils.format_neo_data", "utils.format_neo_data", "dataOut[].append", "dataOut[].append", "dataOut[].append", "dataOut[].append", "dataOut[].append", "dataOut[].append", "utils.write_file", "print", "spynnaker8.SpikeSourceArray", "spynnaker8.IF_curr_exp", "spynnaker8.SpikeSourceArray", "spynnaker8.IF_curr_exp", "spynnaker8.OneToOneConnector", "spynnaker8.FromListConnector", "spynnaker8.AllToAllConnector", "spynnaker8.AllToAllConnector", "spynnaker8.OneToOneConnector", "spynnaker8.OneToOneConnector", "PCLayer.get_data.segments[].filter", "INHLayer.get_data.segments[].filter", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.get_last_stamp_synapse_list", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.write_file"], ["def", "main", "(", ")", ":", "\n", "\n", "######################################", "\n", "# Simulation parameters", "\n", "######################################", "\n", "    ", "sim", ".", "setup", "(", "timestep", "=", "simulationParameters", "[", "\"timeStep\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create neuron population", "\n", "######################################", "\n", "# DG", "\n", "DGLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"DGLayer\"", "]", ",", "sim", ".", "SpikeSourceArray", "(", "spike_times", "=", "DGLSpikes", ")", ",", "label", "=", "\"DGLayer\"", ")", "\n", "# PC", "\n", "PCLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"PCLayer\"", "]", ",", "sim", ".", "IF_curr_exp", "(", "**", "neuronParameters", "[", "\"PCL\"", "]", ")", ",", "label", "=", "\"PCLayer\"", ")", "\n", "PCLayer", ".", "set", "(", "v", "=", "initNeuronParameters", "[", "\"PCL\"", "]", "[", "\"vInit\"", "]", ")", "\n", "# LEARNING", "\n", "LEARNING", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"LEARNING\"", "]", ",", "sim", ".", "SpikeSourceArray", "(", "spike_times", "=", "LEARNINGSpikes", ")", ",", "\n", "label", "=", "\"LEARNING\"", ")", "\n", "# INH", "\n", "INHLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"INHLayer\"", "]", ",", "sim", ".", "IF_curr_exp", "(", "**", "neuronParameters", "[", "\"INHL\"", "]", ")", ",", "label", "=", "\"INHLayer\"", ")", "\n", "PCLayer", ".", "set", "(", "v", "=", "initNeuronParameters", "[", "\"INHL\"", "]", "[", "\"vInit\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create synapses", "\n", "######################################", "\n", "\n", "# DG-PC", "\n", "DGL_PCL_conn", "=", "sim", ".", "Projection", "(", "DGLayer", ",", "PCLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# PC-PC: statics", "\n", "# + Take weight from last iteration", "\n", "synapsePCL_PCL", ",", "synParametersOrigin", "=", "utils", ".", "get_last_stamp_synapse_list", "(", "synParameters", "[", "\"PCL-PCL-origin\"", "]", "[", "\"initWeight\"", "]", ")", "\n", "\n", "PCL_PCL_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "FromListConnector", "(", "synapsePCL_PCL", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", ")", ",", "receptor_type", "=", "\"excitatory\"", ")", "\n", "\n", "# + Assign to synapses", "\n", "synParameters", "[", "\"PCL-PCL\"", "]", "=", "synParametersOrigin", "\n", "\n", "# PCL-PCL-inh", "\n", "PCL_PCL_inh_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "False", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# LEARNING-INHL", "\n", "LEARNING_INHL_conn", "=", "sim", ".", "Projection", "(", "LEARNING", ",", "INHLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "True", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "\n", "weight", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# DGL-INHL", "\n", "DGL_INHL_conn", "=", "sim", ".", "Projection", "(", "DGLayer", ",", "INHLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# INHL-PCL", "\n", "INHL_PCL_conn", "=", "sim", ".", "Projection", "(", "INHLayer", ",", "PCLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "######################################", "\n", "# Parameters to store", "\n", "######################################", "\n", "PCLayer", ".", "record", "(", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "INHLayer", ".", "record", "(", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "\n", "######################################", "\n", "# Execute the simulation", "\n", "######################################", "\n", "sim", ".", "run", "(", "simulationParameters", "[", "\"simTime\"", "]", ")", "\n", "\n", "######################################", "\n", "# Retrieve output data", "\n", "######################################", "\n", "PCData", "=", "PCLayer", ".", "get_data", "(", "variables", "=", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "INHData", "=", "INHLayer", ".", "get_data", "(", "variables", "=", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "spikesPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "spiketrains", "\n", "vPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "filter", "(", "name", "=", "'v'", ")", "[", "0", "]", "\n", "spikesINH", "=", "INHData", ".", "segments", "[", "0", "]", ".", "spiketrains", "\n", "vINH", "=", "INHData", ".", "segments", "[", "0", "]", ".", "filter", "(", "name", "=", "'v'", ")", "[", "0", "]", "\n", "\n", "######################################", "\n", "# End simulation", "\n", "######################################", "\n", "sim", ".", "end", "(", ")", "\n", "\n", "######################################", "\n", "# Processing and store the output data", "\n", "######################################", "\n", "# Format the retrieve data", "\n", "formatVPC", "=", "utils", ".", "format_neo_data", "(", "\"v\"", ",", "vPC", ")", "\n", "formatSpikesPC", "=", "utils", ".", "format_neo_data", "(", "\"spikes\"", ",", "spikesPC", ")", "\n", "formatVINH", "=", "utils", ".", "format_neo_data", "(", "\"v\"", ",", "vINH", ")", "\n", "formatSpikesINH", "=", "utils", ".", "format_neo_data", "(", "\"spikes\"", ",", "spikesINH", ")", "\n", "\n", "# Show some of the data", "\n", "# print(\"V PCLayer = \" + str(formatVPC))", "\n", "# print(\"Spikes PCLayer = \" + str(formatSpikesPC))", "\n", "# print(\"V INHLayer = \" + str(formatVINH))", "\n", "# print(\"Spikes INHLayer = \" + str(formatSpikesINH))", "\n", "# print(\"Spikes DGL = \" + str(DGLSpikes))", "\n", "# print(\"Spikes LEARNING = \" + str(LEARNINGSpikes))", "\n", "\n", "# Create a dictionary with all the information and headers", "\n", "dataOut", "=", "{", "\"scriptName\"", ":", "simulationParameters", "[", "\"filename\"", "]", ",", "\"timeStep\"", ":", "simulationParameters", "[", "\"timeStep\"", "]", ",", "\n", "\"simTime\"", ":", "simulationParameters", "[", "\"simTime\"", "]", ",", "\"synParameters\"", ":", "synParameters", ",", "\n", "\"neuronParameters\"", ":", "neuronParameters", ",", "\"initNeuronParameters\"", ":", "initNeuronParameters", ",", "\"variables\"", ":", "[", "]", "}", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatSpikesPC", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"v\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatVPC", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"INH Layer\"", ",", "\"popNameShort\"", ":", "\"INHL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"INHLayer\"", "]", ",", "\n", "\"data\"", ":", "formatSpikesINH", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"v\"", ",", "\"popName\"", ":", "\"INH Layer\"", ",", "\"popNameShort\"", ":", "\"INHL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"INHLayer\"", "]", ",", "\n", "\"data\"", ":", "formatVINH", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"DG Layer\"", ",", "\"popNameShort\"", ":", "\"DGL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"DGLayer\"", "]", ",", "\n", "\"data\"", ":", "DGLSpikes", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"LEARNING Layer\"", ",", "\"popNameShort\"", ":", "\"LEARNING\"", ",", "\n", "\"numNeurons\"", ":", "popNeurons", "[", "\"LEARNING\"", "]", ",", "\n", "\"data\"", ":", "LEARNINGSpikes", "}", ")", "\n", "\n", "# Store the data in a file", "\n", "fullPath", ",", "filename", "=", "utils", ".", "write_file", "(", "\"data/\"", ",", "simulationParameters", "[", "\"filename\"", "]", ",", "dataOut", ")", "\n", "print", "(", "\"Datos almacenados en: \"", "+", "fullPath", ")", "\n", "return", "fullPath", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.CA3_pc_inhibitory.main": [[81, 232], ["spynnaker8.setup", "spynnaker8.Population", "spynnaker8.Population", "sim.Population.set", "spynnaker8.Population", "spynnaker8.Population", "sim.Population.set", "spynnaker8.Projection", "spynnaker8.SpikePairRule", "spynnaker8.AdditiveWeightDependence", "spynnaker8.STDPMechanism", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "spynnaker8.Projection", "sim.Population.record", "sim.Population.get_data", "spynnaker8.end", "utils.format_neo_data", "utils.format_neo_data", "dataOut[].append", "dataOut[].append", "dataOut[].append", "dataOut[].append", "utils.write_file", "print", "spynnaker8.SpikeSourceArray", "spynnaker8.IF_curr_exp", "spynnaker8.SpikeSourceArray", "spynnaker8.IF_curr_exp", "spynnaker8.OneToOneConnector", "spynnaker8.AllToAllConnector", "spynnaker8.AllToAllConnector", "spynnaker8.AllToAllConnector", "spynnaker8.OneToOneConnector", "spynnaker8.OneToOneConnector", "w_PCL_PCL.append", "range", "spynnaker8.run", "PCLayer.get_data.segments[].filter", "utils.format_neo_data", "dataOut[].append", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "sim.Projection.get", "int", "int", "spynnaker8.run", "w_PCL_PCL.append", "sim.Projection.get"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.write_file", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data"], ["def", "main", "(", ")", ":", "\n", "\n", "######################################", "\n", "# Simulation parameters", "\n", "######################################", "\n", "    ", "sim", ".", "setup", "(", "timestep", "=", "simulationParameters", "[", "\"timeStep\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create neuron population", "\n", "######################################", "\n", "# DG", "\n", "DGLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"DGLayer\"", "]", ",", "sim", ".", "SpikeSourceArray", "(", "spike_times", "=", "DGLSpikes", ")", ",", "label", "=", "\"DGLayer\"", ")", "\n", "# PC", "\n", "PCLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"PCLayer\"", "]", ",", "sim", ".", "IF_curr_exp", "(", "**", "neuronParameters", "[", "\"PCL\"", "]", ")", ",", "label", "=", "\"PCLayer\"", ")", "\n", "PCLayer", ".", "set", "(", "v", "=", "initNeuronParameters", "[", "\"PCL\"", "]", "[", "\"vInit\"", "]", ")", "\n", "# LEARNING", "\n", "LEARNING", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"LEARNING\"", "]", ",", "sim", ".", "SpikeSourceArray", "(", "spike_times", "=", "LEARNINGSpikes", ")", ",", "label", "=", "\"LEARNING\"", ")", "\n", "# INH", "\n", "INHLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"INHLayer\"", "]", ",", "sim", ".", "IF_curr_exp", "(", "**", "neuronParameters", "[", "\"INHL\"", "]", ")", ",", "label", "=", "\"INHLayer\"", ")", "\n", "PCLayer", ".", "set", "(", "v", "=", "initNeuronParameters", "[", "\"INHL\"", "]", "[", "\"vInit\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create synapses", "\n", "######################################", "\n", "# DG-PC", "\n", "DGL_PCL_conn", "=", "sim", ".", "Projection", "(", "DGLayer", ",", "PCLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# PC-PC", "\n", "timing_rule", "=", "sim", ".", "SpikePairRule", "(", "tau_plus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"tau_plus\"", "]", ",", "tau_minus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"tau_minus\"", "]", ",", "\n", "A_plus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"A_plus\"", "]", ",", "A_minus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"A_minus\"", "]", ")", "\n", "weight_rule", "=", "sim", ".", "AdditiveWeightDependence", "(", "w_max", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"w_max\"", "]", ",", "w_min", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"w_min\"", "]", ")", "\n", "stdp_model", "=", "sim", ".", "STDPMechanism", "(", "timing_dependence", "=", "timing_rule", ",", "weight_dependence", "=", "weight_rule", ",", "\n", "weight", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "delay", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"delay\"", "]", ")", "\n", "PCL_PCL_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "False", ")", ",", "synapse_type", "=", "stdp_model", ")", "\n", "\n", "# PCL-PCL-inh", "\n", "PCL_PCL_inh_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "False", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# LEARNING-INHL", "\n", "LEARNING_INHL_conn", "=", "sim", ".", "Projection", "(", "LEARNING", ",", "INHLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "True", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"LEARNING-INHL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# DGL-INHL", "\n", "DGL_INHL_conn", "=", "sim", ".", "Projection", "(", "DGLayer", ",", "INHLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"DGL-INHL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# INHL-PCL", "\n", "INHL_PCL_conn", "=", "sim", ".", "Projection", "(", "INHLayer", ",", "PCLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"INHL-PCL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "\n", "######################################", "\n", "# Parameters to store", "\n", "######################################", "\n", "PCLayer", ".", "record", "(", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "#INHLayer.record([\"spikes\", \"v\"])", "\n", "#PCLayer.record([\"spikes\"])", "\n", "\n", "######################################", "\n", "# Execute the simulation", "\n", "######################################", "\n", "# To store the weight", "\n", "if", "recordWeight", ":", "\n", "        ", "w_PCL_PCL", "=", "[", "]", "\n", "w_PCL_PCL", ".", "append", "(", "PCL_PCL_conn", ".", "get", "(", "'weight'", ",", "format", "=", "'list'", ",", "with_address", "=", "True", ")", ")", "# Instante 0", "\n", "for", "n", "in", "range", "(", "0", ",", "int", "(", "simulationParameters", "[", "\"simTime\"", "]", ")", ",", "int", "(", "simulationParameters", "[", "\"timeStep\"", "]", ")", ")", ":", "\n", "            ", "sim", ".", "run", "(", "simulationParameters", "[", "\"timeStep\"", "]", ")", "\n", "w_PCL_PCL", ".", "append", "(", "PCL_PCL_conn", ".", "get", "(", "'weight'", ",", "format", "=", "'list'", ",", "with_address", "=", "True", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sim", ".", "run", "(", "simulationParameters", "[", "\"simTime\"", "]", ")", "\n", "\n", "######################################", "\n", "# Retrieve output data", "\n", "######################################", "\n", "", "PCData", "=", "PCLayer", ".", "get_data", "(", "variables", "=", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "#INHData = INHLayer.get_data(variables=[\"spikes\", \"v\"])", "\n", "#PCData = PCLayer.get_data(variables=[\"spikes\"])", "\n", "spikesPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "spiketrains", "\n", "vPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "filter", "(", "name", "=", "'v'", ")", "[", "0", "]", "\n", "#spikesINH = INHData.segments[0].spiketrains", "\n", "#vINH = INHData.segments[0].filter(name='v')[0]", "\n", "\n", "######################################", "\n", "# End simulation", "\n", "######################################", "\n", "sim", ".", "end", "(", ")", "\n", "\n", "######################################", "\n", "# Processing and store the output data", "\n", "######################################", "\n", "# Format the retrieve data", "\n", "formatVPC", "=", "utils", ".", "format_neo_data", "(", "\"v\"", ",", "vPC", ")", "\n", "formatSpikesPC", "=", "utils", ".", "format_neo_data", "(", "\"spikes\"", ",", "spikesPC", ")", "\n", "#formatVINH = utils.format_neo_data(\"v\", vINH)", "\n", "#formatSpikesINH = utils.format_neo_data(\"spikes\", spikesINH)", "\n", "if", "recordWeight", ":", "\n", "        ", "formatWeightPCL_PCL", "=", "utils", ".", "format_neo_data", "(", "\"weights\"", ",", "w_PCL_PCL", ",", "{", "\"simTime\"", ":", "simulationParameters", "[", "\"simTime\"", "]", ",", "\"timeStep\"", ":", "simulationParameters", "[", "\"timeStep\"", "]", "}", ")", "\n", "\n", "# Show some of the data", "\n", "# print(\"V PCLayer = \" + str(formatVPC))", "\n", "# print(\"Spikes PCLayer = \" + str(formatSpikesPC))", "\n", "# print(\"V INHLayer = \" + str(formatVINH))", "\n", "# print(\"Spikes INHLayer = \" + str(formatSpikesINH))", "\n", "# print(\"Weight PCL-PCL = \" + str(formatWeightPCL_PCL))", "\n", "# print(\"Spikes DGL = \" + str(DGLSpikes))", "\n", "# print(\"Spikes LEARNING = \" + str(LEARNINGSpikes))", "\n", "\n", "# Create a dictionary with all the information and headers", "\n", "", "dataOut", "=", "{", "\"scriptName\"", ":", "simulationParameters", "[", "\"filename\"", "]", ",", "\"timeStep\"", ":", "simulationParameters", "[", "\"timeStep\"", "]", ",", "\n", "\"simTime\"", ":", "simulationParameters", "[", "\"simTime\"", "]", ",", "\"synParameters\"", ":", "synParameters", ",", "\n", "\"neuronParameters\"", ":", "neuronParameters", ",", "\"initNeuronParameters\"", ":", "initNeuronParameters", ",", "\"variables\"", ":", "[", "]", "}", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatSpikesPC", "}", ")", "\n", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"v\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatVPC", "}", ")", "\n", "\"\"\"\n    dataOut[\"variables\"].append(\n        {\"type\": \"spikes\", \"popName\": \"INH Layer\", \"popNameShort\": \"INHL\", \"numNeurons\": popNeurons[\"INHLayer\"],\n         \"data\": formatSpikesINH})\n    dataOut[\"variables\"].append(\n        {\"type\": \"v\", \"popName\": \"INH Layer\", \"popNameShort\": \"INHL\", \"numNeurons\": popNeurons[\"INHLayer\"],\n         \"data\": formatVINH})\n    \"\"\"", "\n", "if", "recordWeight", ":", "\n", "        ", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "{", "\"type\"", ":", "\"w\"", ",", "\"popName\"", ":", "\"DGL-PCL\"", ",", "\"popNameShort\"", ":", "\"PCL-PCL\"", ",", "\"data\"", ":", "formatWeightPCL_PCL", "}", ")", "\n", "", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"DG Layer\"", ",", "\"popNameShort\"", ":", "\"DGL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"DGLayer\"", "]", ",", "\n", "\"data\"", ":", "DGLSpikes", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"LEARNING Layer\"", ",", "\"popNameShort\"", ":", "\"LEARNING\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"LEARNING\"", "]", ",", "\n", "\"data\"", ":", "LEARNINGSpikes", "}", ")", "\n", "\n", "# Store the data in a file", "\n", "fullPath", ",", "filename", "=", "utils", ".", "write_file", "(", "\"data/\"", ",", "simulationParameters", "[", "\"filename\"", "]", ",", "dataOut", ")", "\n", "print", "(", "\"Data stored in: \"", "+", "fullPath", ")", "\n", "return", "fullPath", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.CA3_oscilatory.main": [[78, 183], ["spynnaker8.setup", "spynnaker8.Population", "spynnaker8.Population", "sim.Population.set", "spynnaker8.Projection", "spynnaker8.SpikePairRule", "spynnaker8.AdditiveWeightDependence", "spynnaker8.STDPMechanism", "spynnaker8.Projection", "spynnaker8.Projection", "sim.Population.record", "sim.Population.get_data", "spynnaker8.end", "utils.format_neo_data", "utils.format_neo_data", "dataOut[].append", "dataOut[].append", "dataOut[].append", "utils.write_file", "print", "spynnaker8.SpikeSourceArray", "spynnaker8.IF_curr_exp", "spynnaker8.OneToOneConnector", "spynnaker8.AllToAllConnector", "spynnaker8.AllToAllConnector", "w_PCL_PCL.append", "range", "spynnaker8.run", "PCLayer.get_data.segments[].filter", "utils.format_neo_data", "dataOut[].append", "spynnaker8.StaticSynapse", "spynnaker8.StaticSynapse", "sim.Projection.get", "int", "int", "spynnaker8.run", "w_PCL_PCL.append", "sim.Projection.get"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.write_file", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data"], ["def", "main", "(", ")", ":", "\n", "\n", "######################################", "\n", "# Simulation parameters", "\n", "######################################", "\n", "    ", "sim", ".", "setup", "(", "timestep", "=", "simulationParameters", "[", "\"timeStep\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create neuron population", "\n", "######################################", "\n", "# DG", "\n", "DGLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"DGLayer\"", "]", ",", "sim", ".", "SpikeSourceArray", "(", "spike_times", "=", "DGLSpikes", ")", ",", "label", "=", "\"DGLayer\"", ")", "\n", "# PC", "\n", "PCLayer", "=", "sim", ".", "Population", "(", "popNeurons", "[", "\"PCLayer\"", "]", ",", "sim", ".", "IF_curr_exp", "(", "**", "neuronParameters", "[", "\"PCL\"", "]", ")", ",", "label", "=", "\"PCLayer\"", ")", "\n", "PCLayer", ".", "set", "(", "v", "=", "initNeuronParameters", "[", "\"PCL\"", "]", "[", "\"vInit\"", "]", ")", "\n", "\n", "######################################", "\n", "# Create synapses", "\n", "######################################", "\n", "\n", "# DG-PC", "\n", "DGL_PCL_conn", "=", "sim", ".", "Projection", "(", "DGLayer", ",", "PCLayer", ",", "sim", ".", "OneToOneConnector", "(", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"DGL-PCL\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "# PC-PC", "\n", "timing_rule", "=", "sim", ".", "SpikePairRule", "(", "tau_plus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"tau_plus\"", "]", ",", "tau_minus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"tau_minus\"", "]", ",", "\n", "A_plus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"A_plus\"", "]", ",", "A_minus", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"A_minus\"", "]", ")", "\n", "weight_rule", "=", "sim", ".", "AdditiveWeightDependence", "(", "w_max", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"w_max\"", "]", ",", "w_min", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"w_min\"", "]", ")", "\n", "stdp_model", "=", "sim", ".", "STDPMechanism", "(", "timing_dependence", "=", "timing_rule", ",", "weight_dependence", "=", "weight_rule", ",", "\n", "weight", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"initWeight\"", "]", ",", "delay", "=", "synParameters", "[", "\"PCL-PCL\"", "]", "[", "\"delay\"", "]", ")", "\n", "PCL_PCL_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "False", ")", ",", "synapse_type", "=", "stdp_model", ")", "\n", "\n", "# PCL-PCL-inh", "\n", "PCL_PCL_inh_conn", "=", "sim", ".", "Projection", "(", "PCLayer", ",", "PCLayer", ",", "sim", ".", "AllToAllConnector", "(", "allow_self_connections", "=", "False", ")", ",", "\n", "synapse_type", "=", "sim", ".", "StaticSynapse", "(", "weight", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"initWeight\"", "]", ",", "\n", "delay", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"delay\"", "]", ")", ",", "\n", "receptor_type", "=", "synParameters", "[", "\"PCL-PCL-inh\"", "]", "[", "\"receptor_type\"", "]", ")", "\n", "\n", "######################################", "\n", "# Parameters to store", "\n", "######################################", "\n", "PCLayer", ".", "record", "(", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "\n", "######################################", "\n", "# Execute the simulation", "\n", "######################################", "\n", "# To store the weight", "\n", "if", "recordWeight", ":", "\n", "        ", "w_PCL_PCL", "=", "[", "]", "\n", "w_PCL_PCL", ".", "append", "(", "PCL_PCL_conn", ".", "get", "(", "'weight'", ",", "format", "=", "'list'", ",", "with_address", "=", "True", ")", ")", "# Instante 0", "\n", "for", "n", "in", "range", "(", "0", ",", "int", "(", "simulationParameters", "[", "\"simTime\"", "]", ")", ",", "int", "(", "simulationParameters", "[", "\"timeStep\"", "]", ")", ")", ":", "\n", "            ", "sim", ".", "run", "(", "simulationParameters", "[", "\"timeStep\"", "]", ")", "\n", "w_PCL_PCL", ".", "append", "(", "PCL_PCL_conn", ".", "get", "(", "'weight'", ",", "format", "=", "'list'", ",", "with_address", "=", "True", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "sim", ".", "run", "(", "simulationParameters", "[", "\"simTime\"", "]", ")", "\n", "\n", "######################################", "\n", "# Retrieve output data", "\n", "######################################", "\n", "", "PCData", "=", "PCLayer", ".", "get_data", "(", "variables", "=", "[", "\"spikes\"", ",", "\"v\"", "]", ")", "\n", "spikesPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "spiketrains", "\n", "vPC", "=", "PCData", ".", "segments", "[", "0", "]", ".", "filter", "(", "name", "=", "'v'", ")", "[", "0", "]", "\n", "\n", "######################################", "\n", "# End simulation", "\n", "######################################", "\n", "sim", ".", "end", "(", ")", "\n", "\n", "######################################", "\n", "# Processing and store the output data", "\n", "######################################", "\n", "# Format the retrieve data", "\n", "formatVPC", "=", "utils", ".", "format_neo_data", "(", "\"v\"", ",", "vPC", ")", "\n", "formatSpikesPC", "=", "utils", ".", "format_neo_data", "(", "\"spikes\"", ",", "spikesPC", ")", "\n", "if", "recordWeight", ":", "\n", "        ", "formatWeightPCL_PCL", "=", "utils", ".", "format_neo_data", "(", "\"weights\"", ",", "w_PCL_PCL", ",", "{", "\"simTime\"", ":", "simulationParameters", "[", "\"simTime\"", "]", ",", "\"timeStep\"", ":", "simulationParameters", "[", "\"timeStep\"", "]", "}", ")", "\n", "\n", "# Show some of the data", "\n", "# print(\"V PCLayer = \" + str(formatVPC))", "\n", "# print(\"Spikes PCLayer = \" + str(formatSpikesPC))", "\n", "# print(\"Weight PCL-PCL = \" + str(formatWeightPCL_PCL))", "\n", "# print(\"Spikes DGL = \" + str(DGLSpikes))", "\n", "\n", "# Create a dictionary with all the information and headers", "\n", "", "dataOut", "=", "{", "\"scriptName\"", ":", "simulationParameters", "[", "\"filename\"", "]", ",", "\"timeStep\"", ":", "simulationParameters", "[", "\"timeStep\"", "]", ",", "\n", "\"simTime\"", ":", "simulationParameters", "[", "\"simTime\"", "]", ",", "\"synParameters\"", ":", "synParameters", ",", "\n", "\"neuronParameters\"", ":", "neuronParameters", ",", "\"initNeuronParameters\"", ":", "initNeuronParameters", ",", "\"variables\"", ":", "[", "]", "}", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatSpikesPC", "}", ")", "\n", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"v\"", ",", "\"popName\"", ":", "\"PC Layer\"", ",", "\"popNameShort\"", ":", "\"PCL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"PCLayer\"", "]", ",", "\n", "\"data\"", ":", "formatVPC", "}", ")", "\n", "if", "recordWeight", ":", "\n", "        ", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "{", "\"type\"", ":", "\"w\"", ",", "\"popName\"", ":", "\"DGL-PCL\"", ",", "\"popNameShort\"", ":", "\"PCL-PCL\"", ",", "\"data\"", ":", "formatWeightPCL_PCL", "}", ")", "\n", "", "dataOut", "[", "\"variables\"", "]", ".", "append", "(", "\n", "{", "\"type\"", ":", "\"spikes\"", ",", "\"popName\"", ":", "\"DG Layer\"", ",", "\"popNameShort\"", ":", "\"DGL\"", ",", "\"numNeurons\"", ":", "popNeurons", "[", "\"DGLayer\"", "]", ",", "\n", "\"data\"", ":", "DGLSpikes", "}", ")", "\n", "\n", "# Store the data in a file", "\n", "fullPath", ",", "filename", "=", "utils", ".", "write_file", "(", "\"data/\"", ",", "simulationParameters", "[", "\"filename\"", "]", ",", "dataOut", ")", "\n", "print", "(", "\"Data stored in: \"", "+", "fullPath", ")", "\n", "return", "fullPath", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.write_file": [[13, 29], ["time.strftime", "open", "open.write", "open.close", "str"], "function", ["None"], ["def", "write_file", "(", "basePath", ",", "title", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Generic function to write the data into a file\n\n    :param basePath: directory path where the file will be stored\n    :param title: name of the file\n    :param data: data to store in the file\n    :return: full path to the file created, name of the file created\n    \"\"\"", "\n", "strDate", "=", "time", ".", "strftime", "(", "\"%Y_%m_%d__%H_%M_%S\"", ")", "\n", "filename", "=", "title", "+", "\"_\"", "+", "strDate", "\n", "fullPath", "=", "basePath", "+", "filename", "+", "\".txt\"", "\n", "file", "=", "open", "(", "fullPath", ",", "\"w\"", ")", "\n", "file", ".", "write", "(", "str", "(", "data", ")", ")", "\n", "file", ".", "close", "(", ")", "\n", "return", "fullPath", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.read_file": [[31, 43], ["open", "eval", "open.read"], "function", ["None"], ["", "def", "read_file", "(", "fullPath", ")", ":", "\n", "    ", "\"\"\"\n    Read the file in fullPath\n\n    :param fullPath: path + filename to the file to read\n    :return: data read from the file or False if the file could not be accessed\n    \"\"\"", "\n", "try", ":", "\n", "        ", "file", "=", "open", "(", "fullPath", ",", "\"r\"", ")", "\n", "return", "eval", "(", "file", ".", "read", "(", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.check_folder": [[45, 61], ["os.path.isdir", "os.mkdir", "print"], "function", ["None"], ["", "", "def", "check_folder", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Check if a folder exist and, if it does not exist, it creates it\n\n    :param path: path where the folder is located or want to be created\n    :return: the path if folder exist or has been created or False if the folder doesn't exist and can't be created\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "path", ")", "\n", "return", "path", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "print", "(", "\"Error to create directory\"", ")", "\n", "return", "False", "\n", "", "", "else", ":", "\n", "        ", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_neo_data": [[67, 87], ["utils.format_v_stream", "utils.format_spike_stream", "utils.format_weight_stream"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_v_stream", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_spike_stream", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_weight_stream"], ["", "", "def", "format_neo_data", "(", "tipo", ",", "stream", ",", "timeStream", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"\n    Format the streams of neo data to delete headers and/or make the data structure used in the rest of functions\n\n    :param tipo: type of neo data (\"v\", \"spikes\" and \"weights\" supported)\n    :param stream: data streams to be formated\n    :param timeStream: (optional) {\"simTime\", \"timeStep\"} necessary to add the time stamp to the weights stream format\n    :return: formated stream or Raise an error if is an unsopported type of data\n    \"\"\"", "\n", "if", "timeStream", "is", "None", ":", "\n", "        ", "timeStream", "=", "[", "]", "\n", "", "if", "tipo", "==", "\"v\"", ":", "\n", "        ", "formatStream", "=", "format_v_stream", "(", "stream", ")", "\n", "", "elif", "tipo", "==", "\"spikes\"", ":", "\n", "        ", "formatStream", "=", "format_spike_stream", "(", "stream", ")", "\n", "", "elif", "tipo", "==", "\"weights\"", ":", "\n", "        ", "formatStream", "=", "format_weight_stream", "(", "stream", ",", "timeStream", ")", "\n", "", "else", ":", "\n", "        ", "formatStream", "=", "False", "\n", "", "return", "formatStream", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_v_stream": [[89, 118], ["vStream.as_array().tolist", "len", "range", "enumerate", "formatV.append", "enumerate", "vStream.as_array", "str", "len"], "function", ["None"], ["", "def", "format_v_stream", "(", "vStream", ")", ":", "\n", "    ", "\"\"\"\n    Change the format of the neo data streams of membrane potentials and correct nan values\n\n    :param vStream: neo streams of membrane potentials\n    :return: v stream formated\n    \"\"\"", "\n", "formatV", "=", "[", "]", "\n", "# Obtain the matrix of values ->", "\n", "#   each element represents a time_stamp and the content of that element the value for each neuron", "\n", "rawStream", "=", "vStream", ".", "as_array", "(", ")", ".", "tolist", "(", ")", "\n", "# Extract the nnumber of neuron on each time stamp", "\n", "numNeurons", "=", "len", "(", "rawStream", "[", "0", "]", ")", "\n", "# Reformat it so each element is a neuron and the content is the values for each time stamp", "\n", "for", "neuron", "in", "range", "(", "0", ",", "numNeurons", ")", ":", "\n", "        ", "formatV", ".", "append", "(", "[", "item", "[", "neuron", "]", "for", "item", "in", "rawStream", "]", ")", "\n", "# Change nan values for -60 if it is the first value in the stream, the value of the previous instant if it is the", "\n", "#  last instant and the average of the instants before and after in another case", "\n", "", "for", "indexNeuron", ",", "neuron", "in", "enumerate", "(", "formatV", ")", ":", "\n", "        ", "for", "indexTime", ",", "timeStamp", "in", "enumerate", "(", "neuron", ")", ":", "\n", "            ", "if", "str", "(", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "]", ")", "==", "\"nan\"", ":", "\n", "                ", "if", "indexTime", "==", "0", ":", "\n", "                    ", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "]", "=", "-", "60.0", "\n", "", "elif", "indexTime", ">=", "len", "(", "neuron", ")", "-", "1", ":", "\n", "                    ", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "]", "=", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "]", "=", "(", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "-", "1", "]", "+", "\n", "formatV", "[", "indexNeuron", "]", "[", "indexTime", "+", "1", "]", ")", "/", "2", "\n", "", "", "", "", "return", "formatV", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_spike_stream": [[120, 131], ["formatSpikes.append", "neuron.as_array().tolist", "neuron.as_array"], "function", ["None"], ["", "def", "format_spike_stream", "(", "spikes", ")", ":", "\n", "    ", "\"\"\"\n    Change the format of the neo data streams of spikes generated by neurons\n\n    :param spikesStream: neo stream of spikes\n    :return: spikes stream formated\n    \"\"\"", "\n", "formatSpikes", "=", "[", "]", "\n", "for", "neuron", "in", "spikes", ":", "\n", "        ", "formatSpikes", ".", "append", "(", "neuron", ".", "as_array", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "return", "formatSpikes", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.format_weight_stream": [[133, 155], ["utils.generate_time_streams", "enumerate", "enumerate", "srcNeuronId.append", "dstNeuronId.append", "w.append", "timeStampStream.append"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_time_streams"], ["", "def", "format_weight_stream", "(", "weights", ",", "timeParam", ")", ":", "\n", "    ", "\"\"\"\n    Change the format of the streams of weights recorded\n\n    :param weightsStream: weight stream\n    :param timeStreamParam: temporal parameters of the simulation -> {\"simTime\", \"timeStep\"}\n    :return: formated weight stream -> {\"srcNeuronId\", \"dstNeuronId\", \"w\", \"timeStamp\"}\n    \"\"\"", "\n", "srcNeuronId", ",", "dstNeuronId", ",", "w", ",", "timeStampStream", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# Generate time stream in ms", "\n", "timeStream", "=", "generate_time_streams", "(", "timeParam", "[", "\"simTime\"", "]", ",", "timeParam", "[", "\"timeStep\"", "]", ",", "False", ",", "True", ")", "\n", "\n", "# For each time stamp:", "\n", "for", "indexStep", ",", "step", "in", "enumerate", "(", "weights", ")", ":", "\n", "# For each synapse:", "\n", "        ", "for", "indexSyn", ",", "synapse", "in", "enumerate", "(", "step", ")", ":", "\n", "            ", "srcNeuronId", ".", "append", "(", "synapse", "[", "0", "]", ")", "\n", "dstNeuronId", ".", "append", "(", "synapse", "[", "1", "]", ")", "\n", "w", ".", "append", "(", "synapse", "[", "2", "]", ")", "\n", "timeStampStream", ".", "append", "(", "timeStream", "[", "indexStep", "]", ")", "\n", "", "", "return", "{", "\"srcNeuronId\"", ":", "srcNeuronId", ",", "\"dstNeuronId\"", ":", "dstNeuronId", ",", "\"w\"", ":", "w", ",", "\"timeStamp\"", ":", "timeStampStream", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.get_last_stamp_synapse_list": [[157, 199], ["utils.read_file", "max", "enumerate", "print", "list", "operator.itemgetter", "operator.itemgetter", "operator.itemgetter", "synapses.append", "set", "enumerate"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.read_file"], ["", "def", "get_last_stamp_synapse_list", "(", "dataPath", ",", "delay", "=", "1.0", ",", "synapse", "=", "\"PCL-PCL\"", ")", ":", "\n", "    ", "\"\"\"\n    Given full path filename of data file from a simulation, extract the last iteration weight\n\n    :param dataPath: full path filename of data file from a simulation\n    :param delay: delay to add to the synapses\n    :param synapse: name of synapses that want to extract the weight\n    :return: synapse list (src,dst,w) of last timestamp and other metadata\n    \"\"\"", "\n", "\n", "# Open file with weights", "\n", "data", "=", "read_file", "(", "dataPath", ")", "\n", "\n", "# Search weight variable with given synapse name", "\n", "w", "=", "{", "}", "\n", "for", "variable", "in", "data", "[", "\"variables\"", "]", ":", "\n", "        ", "if", "variable", "[", "\"type\"", "]", "==", "\"w\"", "and", "variable", "[", "\"popNameShort\"", "]", "==", "synapse", ":", "\n", "            ", "w", "=", "variable", "[", "\"data\"", "]", "\n", "\n", "# Check if data has been found", "\n", "", "", "if", "w", "==", "{", "}", ":", "\n", "        ", "print", "(", "\"Error to read the weight file. Try to redo training with recordWeight = True.\"", ")", "\n", "return", "False", "\n", "\n", "# Take the last timeStamp", "\n", "", "maxTimeStamp", "=", "max", "(", "list", "(", "set", "(", "w", "[", "\"timeStamp\"", "]", ")", ")", ")", "\n", "\n", "# Take all indeces from the last timestamp", "\n", "maxTimeStampIndeces", "=", "[", "i", "for", "i", ",", "value", "in", "enumerate", "(", "w", "[", "\"timeStamp\"", "]", ")", "if", "value", "==", "maxTimeStamp", "]", "\n", "\n", "# Get weight, source id and destiny id from that timestamp", "\n", "lastTimeStampWeights", "=", "itemgetter", "(", "*", "maxTimeStampIndeces", ")", "(", "w", "[", "\"w\"", "]", ")", "\n", "lastTimeStampSrcNeuron", "=", "itemgetter", "(", "*", "maxTimeStampIndeces", ")", "(", "w", "[", "\"srcNeuronId\"", "]", ")", "\n", "lastTimeStampDstNeuron", "=", "itemgetter", "(", "*", "maxTimeStampIndeces", ")", "(", "w", "[", "\"dstNeuronId\"", "]", ")", "\n", "\n", "# Create the list of data", "\n", "synapses", "=", "[", "]", "\n", "for", "index", ",", "w_individual", "in", "enumerate", "(", "lastTimeStampWeights", ")", ":", "\n", "        ", "synapses", ".", "append", "(", "(", "lastTimeStampSrcNeuron", "[", "index", "]", ",", "lastTimeStampDstNeuron", "[", "index", "]", ",", "w_individual", ",", "delay", ")", ")", "\n", "\n", "# Return list of synapse and metainformation of original STDP synapses", "\n", "", "return", "synapses", ",", "data", "[", "\"synParameters\"", "]", "[", "synapse", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_time_streams": [[205, 227], ["utils.generate_sequence", "utils.generate_sequence"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_sequence", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_sequence"], ["", "def", "generate_time_streams", "(", "simTime", ",", "timeStep", ",", "timeInSeg", ",", "endPlus", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Generates a time sequence in s or ms of the simulation duration using the timestep of the simulation\n\n    :param simTime: duration of the simulation in ms\n    :param timeStep: time step used in simulation in ms\n    :param timeInSeg: time unit of the sequence: ms or s\n    :param endPlus: (optional) bool to indicate if include the simTime stamp at the end of the sequence\n    :return: temporal sequence\n    \"\"\"", "\n", "# Add the last time stamp of the time sequence or not", "\n", "if", "endPlus", ":", "\n", "        ", "endCount", "=", "1", "\n", "", "else", ":", "\n", "        ", "endCount", "=", "0", "\n", "\n", "# Generated time sequence in s o ms", "\n", "", "if", "timeInSeg", ":", "\n", "        ", "timeStream", "=", "generate_sequence", "(", "0", ",", "simTime", "+", "endCount", ",", "timeStep", ",", "1000", ")", "\n", "", "else", ":", "\n", "        ", "timeStream", "=", "generate_sequence", "(", "0", ",", "simTime", "+", "endCount", ",", "timeStep", ",", "1", ")", "\n", "", "return", "timeStream", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_sequence": [[229, 245], ["sequence.append", "float"], "function", ["None"], ["", "def", "generate_sequence", "(", "start", ",", "stop", ",", "step", ",", "divisor", ")", ":", "\n", "    ", "\"\"\"\n    Generate a sequence of numbers with the input conditions (start included, stop not included)\n\n    :param start: start of sequence (included)\n    :param stop: stop value of the sequence (non included)\n    :param step: increment in each iteration\n    :param divisor: value by which to divide the counting when storing it\n    :return: sequence of generated values\n    \"\"\"", "\n", "sequence", "=", "[", "]", "\n", "count", "=", "start", "\n", "while", "count", "<", "stop", ":", "\n", "        ", "sequence", ".", "append", "(", "float", "(", "count", ")", "/", "divisor", ")", "\n", "count", "=", "count", "+", "step", "\n", "", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.plot_spike_pc_dg": [[252, 321], ["matplotlib.figure", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.ylim", "matplotlib.xlim", "list", "matplotlib.xticks", "matplotlib.legend", "matplotlib.close", "matplotlib.vlines", "matplotlib.vlines", "enumerate", "enumerate", "matplotlib.annotate", "set", "matplotlib.xticks", "matplotlib.savefig", "matplotlib.show", "max", "str", "str"], "function", ["None"], ["", "def", "plot_spike_pc_dg", "(", "spikesPC", ",", "spikesDG", ",", "timeStream", ",", "colors", ",", "marginLim", ",", "title", ",", "rotateLabels", ",", "plot", ",", "saveFig", ",", "saveName", ",", "savePath", ")", ":", "\n", "    ", "\"\"\"\n    Create a spike plot of all activations of DG and PC (CA3) neurons\n\n    :param spikesPCdir: PCdir spike stream \n    :param spikesDG: DG spike stream \n    :param timeStream: time stamp stream\n    :param colors: list of color for each population of neuron to represent\n    :param marginLim: additional margin to the spike amplitude to mark the begin and end of the representation view\n    :param title: title of the plot\n    :param rotateLabels: if rotate (90\u00ba) or not the labels of spikes\n    :param plot: bool, if plot the figure\n    :param saveFig: bool, if save the figure in a png file\n    :param saveName: base name of the output png file\n    :param savePath: path where to store the png file\n    :return: full path (path + fig name) where the figure has been stored, if isSave is True\n    \"\"\"", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "8", ")", ")", "\n", "\n", "# Add PC dir, cont and DG spikes", "\n", "label", "=", "\"DG\"", "\n", "for", "spikeDG", "in", "spikesDG", ":", "\n", "        ", "plt", ".", "vlines", "(", "spikeDG", ",", "ymin", "=", "0", "-", "marginLim", ",", "ymax", "=", "0.5", ",", "color", "=", "colors", "[", "0", "]", ",", "label", "=", "label", ")", "\n", "label", "=", "\"_nolegend_\"", "\n", "", "label", "=", "\"PC\"", "\n", "for", "spikePC", "in", "spikesPC", ":", "\n", "        ", "plt", ".", "vlines", "(", "spikePC", ",", "ymin", "=", "0", ",", "ymax", "=", "0.5", "+", "marginLim", ",", "color", "=", "colors", "[", "1", "]", ",", "label", "=", "label", ")", "\n", "label", "=", "\"_nolegend_\"", "\n", "\n", "# Make labels for spikes in each instant", "\n", "", "for", "stamp", "in", "timeStream", ":", "\n", "        ", "label", "=", "\"\"", "\n", "# For current instant, check if a spike has occurred", "\n", "sublabel", "=", "\"DG\"", "\n", "for", "indexNeuron", ",", "spikeDG", "in", "enumerate", "(", "spikesDG", ")", ":", "\n", "            ", "if", "stamp", "in", "spikeDG", ":", "\n", "                ", "label", "=", "label", "+", "sublabel", "+", "str", "(", "indexNeuron", ")", "\n", "sublabel", "=", "\"-\"", "\n", "", "", "label", "=", "label", "+", "\" \"", "\n", "sublabel", "=", "\"PC\"", "\n", "for", "indexNeuron", ",", "spikePC", "in", "enumerate", "(", "spikesPC", ")", ":", "\n", "            ", "if", "stamp", "in", "spikePC", ":", "\n", "                ", "label", "=", "label", "+", "sublabel", "+", "str", "(", "indexNeuron", ")", "\n", "sublabel", "=", "\"-\"", "\n", "# Add the label to the current instant", "\n", "", "", "plt", ".", "annotate", "(", "label", ",", "xy", "=", "(", "stamp", "+", "0.1", ",", "0.01", ")", ",", "rotation", "=", "90", ",", "fontsize", "=", "15", ")", "\n", "\n", "# Add metadata", "\n", "", "plt", ".", "xlabel", "(", "\"Simulation time (ms)\"", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylabel", "(", "\"Spikes\"", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "marginLim", ",", "0.5", "+", "marginLim", "]", ")", "\n", "plt", ".", "xlim", "(", "-", "0.5", ",", "max", "(", "timeStream", ")", "+", "1.5", ")", "\n", "listXticks", "=", "list", "(", "set", "(", "[", "spike", "for", "sublist", "in", "spikesPC", "for", "spike", "in", "sublist", "]", "+", "[", "spike", "for", "sublist", "in", "spikesDG", "for", "spike", "in", "sublist", "]", ")", ")", "\n", "plt", ".", "xticks", "(", "listXticks", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.0", ",", "1.0", ")", ",", "loc", "=", "'upper left'", ",", "fontsize", "=", "15", ")", "\n", "if", "rotateLabels", ":", "\n", "        ", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "\n", "# Save and/or plot the figure", "\n", "", "if", "saveFig", ":", "\n", "        ", "plt", ".", "savefig", "(", "savePath", "+", "saveName", "+", "\".png\"", ")", "\n", "", "if", "plot", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n", "return", "savePath", "+", "saveName", "+", "\".png\"", "\n", "", ""]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.custom_plots": [[7, 47], ["utils.read_file", "utils.check_folder", "utils.generate_time_streams", "utils.plot_spike_pc_dg", "print", "print"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.read_file", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.check_folder", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.generate_time_streams", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.utils.plot_spike_pc_dg"], ["def", "custom_plots", "(", "fullPathFile", ",", "plot", ",", "save", ",", "saveName", ",", "savePath", ")", ":", "\n", "    ", "\"\"\"\n    Processing the data from a simulation to get a visual representation of the result\n\n    :param fullPathFile: the full path to the file with the data recorded from the simulation\n    :param plot: if show the plot in running time\n    :param save: if store the plots\n    :param saveName: the base name used to store the generated files\n    :param savePath: the base path used to store the generated files\n    :return: True if the simulation and/or the creation of the visual representation of the data has been done correctly\n            or False in other cases\n    \"\"\"", "\n", "# Open data file of the simulation", "\n", "data", "=", "utils", ".", "read_file", "(", "fullPathFile", ")", "\n", "if", "not", "data", ":", "\n", "        ", "print", "(", "\"Error to open data file\"", ")", "\n", "return", "False", "\n", "# Create folder to store all the generated files", "\n", "", "savePath", "=", "utils", ".", "check_folder", "(", "savePath", "+", "saveName", "+", "\"/\"", ")", "\n", "if", "not", "savePath", ":", "\n", "        ", "print", "(", "\"Error to create a folder to store generated files\"", ")", "\n", "return", "False", "\n", "\n", "# Search all variables which are going to be used to create the plots and representations", "\n", "", "vPC", ",", "spikesPC", ",", "spikesDG", ",", "wPC_PC", ",", "vINH", ",", "spikesINH", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "variable", "in", "data", "[", "\"variables\"", "]", ":", "\n", "        ", "if", "variable", "[", "\"type\"", "]", "==", "\"spikes\"", "and", "variable", "[", "\"popNameShort\"", "]", "==", "\"PCL\"", ":", "\n", "            ", "spikesPC", "=", "variable", "\n", "", "elif", "variable", "[", "\"type\"", "]", "==", "\"spikes\"", "and", "variable", "[", "\"popNameShort\"", "]", "==", "\"DGL\"", ":", "\n", "            ", "spikesDG", "=", "variable", "\n", "\n", "# Create the stream of time stamp and color to use in representations", "\n", "", "", "colors", "=", "[", "\"red\"", ",", "\"green\"", ",", "\"blue\"", ",", "\"orange\"", ",", "\"pink\"", ",", "\"goldenrod\"", "]", "\n", "timeStream", "=", "utils", ".", "generate_time_streams", "(", "data", "[", "\"simTime\"", "]", ",", "data", "[", "\"timeStep\"", "]", ",", "False", ")", "\n", "\n", "# Create a spike plot of all activations of DG and PC (CA3) neurons", "\n", "utils", ".", "plot_spike_pc_dg", "(", "spikesPC", "[", "\"data\"", "]", ",", "spikesDG", "[", "\"data\"", "]", ",", "timeStream", ",", "colors", ",", "0.01", ",", "\"Spikes DG-CA3\"", ",", "True", ",", "plot", ",", "\n", "save", ",", "saveName", "+", "\"_spikes_DG_CA3\"", ",", "savePath", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.main": [[49, 67], ["simulation_and_plot_CA3_oscilatory.custom_plots", "CA3_oscilatory.main"], "function", ["home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.custom_plots", "home.repos.pwc.inspect_result.dancasmor_spike-based-computational-models-of-bio-inspired-memories-in-the-hippocampal-ca3-region-in-spinnaker.None.simulation_and_plot_CA3_oscilatory.main"], ["", "def", "main", "(", "plot", ",", "save", ",", "savePath", ",", "execute", ",", "fullPathFile", ",", "saveName", ")", ":", "\n", "    ", "\"\"\"\n    Execute the simulation of the network and/or create a visual representation of the data recorded\n\n    :param plot: if show the plot in running time\n    :param save: if store the plots\n    :param savePath: the base path used to store the generated files\n    :param execute: if execute or not the simulation, in case of false, a fullPathFile is needed\n    :param fullPathFile: the full path to the file with the data recorded from the simulation\n    :param saveName: the base name used to store the generated files\n    :return:\n    \"\"\"", "\n", "# Execute the model if applicable", "\n", "if", "execute", ":", "\n", "        ", "fullPathFile", ",", "filename", "=", "CA3_oscilatory", ".", "main", "(", ")", "\n", "saveName", "=", "filename", "\n", "# Processing the data and plot it", "\n", "", "custom_plots", "(", "fullPathFile", ",", "plot", ",", "save", ",", "saveName", ",", "savePath", ")", "\n", "\n"]]}