{"home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.stable_cumsum": [[7, 24], ["numpy.cumsum", "numpy.sum", "numpy.allclose", "RuntimeError"], "function", ["None"], ["def", "stable_cumsum", "(", "arr", ",", "rtol", "=", "1e-05", ",", "atol", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\"Use high precision for cumsum and check that final value matches sum\n    Parameters\n    ----------\n    arr : array-like\n        To be cumulatively summed as flat\n    rtol : float\n        Relative tolerance, see ``np.allclose``\n    atol : float\n        Absolute tolerance, see ``np.allclose``\n    \"\"\"", "\n", "out", "=", "np", ".", "cumsum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "expected", "=", "np", ".", "sum", "(", "arr", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "np", ".", "allclose", "(", "out", "[", "-", "1", "]", ",", "expected", ",", "rtol", "=", "rtol", ",", "atol", "=", "atol", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'cumsum was found to be unstable: '", "\n", "'its last element does not correspond to sum'", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.fpr_and_fdr_at_recall": [[26, 67], ["numpy.unique", "tps.searchsorted", "slice", "numpy.argmin", "ValueError", "numpy.argsort", "numpy.where", "display_results.stable_cumsum", "numpy.abs", "numpy.sum", "numpy.diff", "numpy.logical_not", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal", "numpy.array_equal"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.stable_cumsum"], ["", "def", "fpr_and_fdr_at_recall", "(", "y_true", ",", "y_score", ",", "recall_level", "=", "recall_level_default", ",", "pos_label", "=", "None", ")", ":", "\n", "    ", "classes", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "if", "(", "pos_label", "is", "None", "and", "\n", "not", "(", "np", ".", "array_equal", "(", "classes", ",", "[", "0", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", ",", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "0", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "-", "1", "]", ")", "or", "\n", "np", ".", "array_equal", "(", "classes", ",", "[", "1", "]", ")", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Data is not binary and pos_label is not specified\"", ")", "\n", "", "elif", "pos_label", "is", "None", ":", "\n", "        ", "pos_label", "=", "1.", "\n", "\n", "# make y_true a boolean vector", "\n", "", "y_true", "=", "(", "y_true", "==", "pos_label", ")", "\n", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_true", "=", "y_true", "[", "desc_score_indices", "]", "\n", "\n", "# y_score typically has many tied values. Here we extract", "\n", "# the indices associated with the distinct values. We also", "\n", "# concatenate a value for the end of the curve.", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_true", ".", "size", "-", "1", "]", "\n", "\n", "# accumulate the true positives with decreasing threshold", "\n", "tps", "=", "stable_cumsum", "(", "y_true", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "# add one because of zero-based indexing", "\n", "\n", "thresholds", "=", "y_score", "[", "threshold_idxs", "]", "\n", "\n", "recall", "=", "tps", "/", "tps", "[", "-", "1", "]", "\n", "\n", "last_ind", "=", "tps", ".", "searchsorted", "(", "tps", "[", "-", "1", "]", ")", "\n", "sl", "=", "slice", "(", "last_ind", ",", "None", ",", "-", "1", ")", "# [last_ind::-1]", "\n", "recall", ",", "fps", ",", "tps", ",", "thresholds", "=", "np", ".", "r_", "[", "recall", "[", "sl", "]", ",", "1", "]", ",", "np", ".", "r_", "[", "fps", "[", "sl", "]", ",", "0", "]", ",", "np", ".", "r_", "[", "tps", "[", "sl", "]", ",", "0", "]", ",", "thresholds", "[", "sl", "]", "\n", "\n", "cutoff", "=", "np", ".", "argmin", "(", "np", ".", "abs", "(", "recall", "-", "recall_level", ")", ")", "\n", "\n", "return", "fps", "[", "cutoff", "]", "/", "(", "np", ".", "sum", "(", "np", ".", "logical_not", "(", "y_true", ")", ")", ")", "# , fps[cutoff]/(fps[cutoff] + tps[cutoff])", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.get_measures": [[69, 81], ["numpy.array().reshape", "numpy.array().reshape", "numpy.squeeze", "numpy.zeros", "sklearn.roc_auc_score", "sklearn.average_precision_score", "display_results.fpr_and_fdr_at_recall", "numpy.vstack", "len", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.fpr_and_fdr_at_recall"], ["", "def", "get_measures", "(", "_pos", ",", "_neg", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "pos", "=", "np", ".", "array", "(", "_pos", "[", ":", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "neg", "=", "np", ".", "array", "(", "_neg", "[", ":", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "examples", "=", "np", ".", "squeeze", "(", "np", ".", "vstack", "(", "(", "pos", ",", "neg", ")", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "len", "(", "examples", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "[", ":", "len", "(", "pos", ")", "]", "+=", "1", "\n", "\n", "auroc", "=", "sk", ".", "roc_auc_score", "(", "labels", ",", "examples", ")", "\n", "aupr", "=", "sk", ".", "average_precision_score", "(", "labels", ",", "examples", ")", "\n", "fpr", "=", "fpr_and_fdr_at_recall", "(", "labels", ",", "examples", ",", "recall_level", ")", "\n", "\n", "return", "auroc", ",", "aupr", ",", "fpr", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.show_performance": [[83, 96], ["display_results.get_measures", "print", "print", "print", "print", "int"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures"], ["", "def", "show_performance", "(", "pos", ",", "neg", ",", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "'''\n    :param pos: 1's class, class to detect, outliers, or wrongly predicted\n    example scores\n    :param neg: 0's class scores\n    '''", "\n", "\n", "auroc", ",", "aupr", ",", "fpr", "=", "get_measures", "(", "pos", "[", ":", "]", ",", "neg", "[", ":", "]", ",", "recall_level", ")", "\n", "\n", "print", "(", "'\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'FPR{:d}:\\t\\t\\t{:.2f}'", ".", "format", "(", "int", "(", "100", "*", "recall_level", ")", ",", "100", "*", "fpr", ")", ")", "\n", "print", "(", "'AUROC:\\t\\t\\t{:.2f}'", ".", "format", "(", "100", "*", "auroc", ")", ")", "\n", "print", "(", "'AUPR:\\t\\t\\t{:.2f}'", ".", "format", "(", "100", "*", "aupr", ")", ")", "\n", "# print('FDR{:d}:\\t\\t\\t{:.2f}'.format(int(100 * recall_level), 100 * fdr))", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.print_measures": [[99, 103], ["print", "print", "print", "int"], "function", ["None"], ["", "def", "print_measures", "(", "auroc", ",", "aupr", ",", "fpr", ",", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'  FPR{:d} AUROC AUPR'", ".", "format", "(", "int", "(", "100", "*", "recall_level", ")", ")", ")", "\n", "print", "(", "'& {:.2f} & {:.2f} & {:.2f}'", ".", "format", "(", "100", "*", "fpr", ",", "100", "*", "auroc", ",", "100", "*", "aupr", ")", ")", "\n", "#print('FPR{:d}:\\t\\t\\t{:.2f}'.format(int(100 * recall_level), 100 * fpr))", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.print_measures_with_std": [[108, 113], ["print", "print", "print", "print", "int", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.std", "numpy.std", "numpy.std"], "function", ["None"], ["", "def", "print_measures_with_std", "(", "aurocs", ",", "auprs", ",", "fprs", ",", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'  FPR{:d} AUROC AUPR'", ".", "format", "(", "int", "(", "100", "*", "recall_level", ")", ")", ")", "\n", "print", "(", "'& {:.2f} & {:.2f} & {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "fprs", ")", ",", "100", "*", "np", ".", "mean", "(", "aurocs", ")", ",", "100", "*", "np", ".", "mean", "(", "auprs", ")", ")", ")", "\n", "print", "(", "'& {:.2f} & {:.2f} & {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "std", "(", "fprs", ")", ",", "100", "*", "np", ".", "std", "(", "aurocs", ")", ",", "100", "*", "np", ".", "std", "(", "auprs", ")", ")", ")", "\n", "#print('FPR{:d}:\\t\\t\\t{:.2f}\\t+/- {:.2f}'.format(int(100 * recall_level), 100 * np.mean(fprs), 100 * np.std(fprs)))", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.display_results.show_performance_comparison": [[118, 135], ["display_results.get_measures", "display_results.get_measures", "print", "print", "print", "print", "int"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures"], ["", "def", "show_performance_comparison", "(", "pos_base", ",", "neg_base", ",", "pos_ours", ",", "neg_ours", ",", "baseline_name", "=", "'Baseline'", ",", "\n", "method_name", "=", "'Ours'", ",", "recall_level", "=", "recall_level_default", ")", ":", "\n", "    ", "'''\n    :param pos_base: 1's class, class to detect, outliers, or wrongly predicted\n    example scores from the baseline\n    :param neg_base: 0's class scores generated by the baseline\n    '''", "\n", "auroc_base", ",", "aupr_base", ",", "fpr_base", "=", "get_measures", "(", "pos_base", "[", ":", "]", ",", "neg_base", "[", ":", "]", ",", "recall_level", ")", "\n", "auroc_ours", ",", "aupr_ours", ",", "fpr_ours", "=", "get_measures", "(", "pos_ours", "[", ":", "]", ",", "neg_ours", "[", ":", "]", ",", "recall_level", ")", "\n", "\n", "print", "(", "'\\t\\t\\t'", "+", "baseline_name", "+", "'\\t'", "+", "method_name", ")", "\n", "print", "(", "'FPR{:d}:\\t\\t\\t{:.2f}\\t\\t{:.2f}'", ".", "format", "(", "\n", "int", "(", "100", "*", "recall_level", ")", ",", "100", "*", "fpr_base", ",", "100", "*", "fpr_ours", ")", ")", "\n", "print", "(", "'AUROC:\\t\\t\\t{:.2f}\\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "auroc_base", ",", "100", "*", "auroc_ours", ")", ")", "\n", "print", "(", "'AUPR:\\t\\t\\t{:.2f}\\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "aupr_base", ",", "100", "*", "aupr_ours", ")", ")", "\n", "# print('FDR{:d}:\\t\\t\\t{:.2f}\\t\\t{:.2f}'.format(", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUNClass.__init__": [[16, 32], ["lmdb.open", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "lsun_loader.LSUNClass.env.begin", "db_path.replace", "pickle.load", "pickle.dump", "txn.stat", "open", "lsun_loader.LSUNClass.env.begin", "open", "txn.cursor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "db_path", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "import", "lmdb", "\n", "self", ".", "db_path", "=", "db_path", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "db_path", ",", "max_readers", "=", "1", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "self", ".", "length", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "", "cache_file", "=", "'_cache_'", "+", "db_path", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "self", ".", "keys", "=", "pickle", ".", "load", "(", "open", "(", "cache_file", ",", "\"rb\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "                ", "self", ".", "keys", "=", "[", "key", "for", "key", ",", "_", "in", "txn", ".", "cursor", "(", ")", "]", "\n", "", "pickle", ".", "dump", "(", "self", ".", "keys", ",", "open", "(", "cache_file", ",", "\"wb\"", ")", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUNClass.__getitem__": [[33, 51], ["six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "env.begin", "txn.get", "lsun_loader.LSUNClass.transform", "lsun_loader.LSUNClass.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "target", "=", "None", ",", "None", "\n", "env", "=", "self", ".", "env", "\n", "with", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "imgbuf", "=", "txn", ".", "get", "(", "self", ".", "keys", "[", "index", "]", ")", "\n", "\n", "", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "img", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUNClass.__len__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUNClass.__repr__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "self", ".", "db_path", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUN.__init__": [[73, 102], ["lsun_loader.LSUN.dbs.append", "len", "lsun_loader.LSUN.indices.append", "type", "lsun_loader.LSUNClass"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "db_path", ",", "classes", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "categories", "=", "[", "'bedroom'", ",", "'bridge'", ",", "'church_outdoor'", ",", "'classroom'", ",", "\n", "'conference_room'", ",", "'dining_room'", ",", "'kitchen'", ",", "\n", "'living_room'", ",", "'restaurant'", ",", "'tower'", "]", "\n", "dset_opts", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "self", ".", "db_path", "=", "db_path", "\n", "if", "type", "(", "classes", ")", "==", "str", "and", "classes", "in", "dset_opts", ":", "\n", "            ", "if", "classes", "==", "'test'", ":", "\n", "                ", "classes", "=", "[", "classes", "]", "\n", "", "else", ":", "\n", "                ", "classes", "=", "[", "c", "+", "'_'", "+", "classes", "for", "c", "in", "categories", "]", "\n", "", "", "self", ".", "classes", "=", "classes", "\n", "\n", "# for each class, create an LSUNClassDataset", "\n", "self", ".", "dbs", "=", "[", "]", "\n", "for", "c", "in", "self", ".", "classes", ":", "\n", "            ", "self", ".", "dbs", ".", "append", "(", "LSUNClass", "(", "\n", "db_path", "=", "db_path", "+", "'/'", "+", "c", "+", "'_lmdb'", ",", "\n", "transform", "=", "transform", ")", ")", "\n", "\n", "", "self", ".", "indices", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "db", "in", "self", ".", "dbs", ":", "\n", "            ", "count", "+=", "len", "(", "db", ")", "\n", "self", ".", "indices", ".", "append", "(", "count", ")", "\n", "\n", "", "self", ".", "length", "=", "count", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUN.__getitem__": [[103, 127], ["lsun_loader.LSUN.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: Tuple (image, target) where target is the index of the target category.\n        \"\"\"", "\n", "target", "=", "0", "\n", "sub", "=", "0", "\n", "for", "ind", "in", "self", ".", "indices", ":", "\n", "            ", "if", "index", "<", "ind", ":", "\n", "                ", "break", "\n", "", "target", "+=", "1", "\n", "sub", "=", "ind", "\n", "\n", "", "db", "=", "self", ".", "dbs", "[", "target", "]", "\n", "index", "=", "index", "-", "sub", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "img", ",", "_", "=", "db", "[", "index", "]", "\n", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUN.__len__": [[128, 130], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.lsun_loader.LSUN.__repr__": [[131, 133], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "self", ".", "db_path", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.BasicBlock.forward": [[23, 39], ["cifar_resnet.BasicBlock.conv2", "cifar_resnet.BasicBlock.relu1", "cifar_resnet.BasicBlock.relu1", "cifar_resnet.BasicBlock.relu2", "cifar_resnet.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "cifar_resnet.BasicBlock.bn1", "cifar_resnet.BasicBlock.bn1", "cifar_resnet.BasicBlock.bn2", "cifar_resnet.BasicBlock.bn2", "cifar_resnet.BasicBlock.convShortcut", "cifar_resnet.BasicBlock.conv1", "cifar_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.NetworkBlock.__init__": [[42, 45], ["torch.Module.__init__", "cifar_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.NetworkBlock._make_layer": [[46, 51], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.NetworkBlock.forward": [[52, 54], ["cifar_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.WideResNet.__init__": [[57, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "cifar_resnet.NetworkBlock", "cifar_resnet.NetworkBlock", "cifar_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "cifar_resnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.cifar_resnet.WideResNet.forward": [[88, 97], ["cifar_resnet.WideResNet.conv1", "cifar_resnet.WideResNet.block1", "cifar_resnet.WideResNet.block2", "cifar_resnet.WideResNet.block3", "cifar_resnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "cifar_resnet.WideResNet.fc", "cifar_resnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialDataset.__init__": [[6, 12], ["Exception", "super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parent_ds", ",", "offset", ",", "length", ")", ":", "\n", "        ", "self", ".", "parent_ds", "=", "parent_ds", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "length", "=", "length", "\n", "assert", "len", "(", "parent_ds", ")", ">=", "offset", "+", "length", ",", "Exception", "(", "\"Parent Dataset not long enough\"", ")", "\n", "super", "(", "PartialDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialDataset.__len__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialDataset.__getitem__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "parent_ds", "[", "i", "+", "self", ".", "offset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialFolder.__init__": [[38, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "parent_ds", ",", "perm", ",", "length", ")", ":", "\n", "        ", "self", ".", "parent_ds", "=", "parent_ds", "\n", "self", ".", "perm", "=", "perm", "\n", "self", ".", "length", "=", "length", "\n", "super", "(", "PartialFolder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialFolder.__len__": [[44, 46], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.PartialFolder.__getitem__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "parent_ds", "[", "self", ".", "perm", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.validation_split": [[20, 35], ["int", "validation_dataset.PartialDataset", "validation_dataset.PartialDataset", "len", "len"], "function", ["None"], ["", "", "def", "validation_split", "(", "dataset", ",", "val_share", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n       Split a (training and vaidation combined) dataset into training and validation.\n       Note that to be statistically sound, the items in the dataset should be statistically\n       independent (e.g. not sorted by class, not several instances of the same dataset that\n       could end up in either set).\n\n       inputs:\n          dataset:   (\"training\") dataset to split into training and validation\n          val_share: fraction of validation data (should be 0<val_share<1, default: 0.1)\n       returns: input dataset split into test_ds, val_ds\n\n    \"\"\"", "\n", "val_offset", "=", "int", "(", "len", "(", "dataset", ")", "*", "(", "1", "-", "val_share", ")", ")", "\n", "return", "PartialDataset", "(", "dataset", ",", "0", ",", "val_offset", ")", ",", "PartialDataset", "(", "dataset", ",", "val_offset", ",", "len", "(", "dataset", ")", "-", "val_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.validation_dataset.validation_split_folder": [[51, 74], ["int", "numpy.asarray", "numpy.random.seed", "numpy.random.shuffle", "len", "range", "validation_dataset.PartialFolder", "validation_dataset.PartialFolder", "len", "len"], "function", ["None"], ["", "", "def", "validation_split_folder", "(", "dataset", ",", "val_share", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"\n       Split a (training and vaidation combined) dataset into training and validation.\n       Note that to be statistically sound, the items in the dataset should be statistically\n       independent (e.g. not sorted by class, not several instances of the same dataset that\n       could end up in either set).\n\n       inputs:\n          dataset:   (\"training\") dataset to split into training and validation\n          val_share: fraction of validation data (should be 0<val_share<1, default: 0.1)\n       returns: input dataset split into test_ds, val_ds\n\n    \"\"\"", "\n", "num_train", "=", "int", "(", "len", "(", "dataset", ")", "*", "(", "1", "-", "val_share", ")", ")", "\n", "num_val", "=", "len", "(", "dataset", ")", "-", "num_train", "\n", "\n", "perm", "=", "np", ".", "asarray", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "\n", "train_perm", ",", "val_perm", "=", "perm", "[", ":", "num_train", "]", ",", "perm", "[", "num_train", ":", "]", "\n", "\n", "return", "PartialFolder", "(", "dataset", ",", "train_perm", ",", "num_train", ")", ",", "PartialFolder", "(", "dataset", ",", "val_perm", ",", "num_val", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.calib_err": [[4, 35], ["numpy.argsort", "len", "range", "len", "len", "numpy.sqrt", "range", "len", "numpy.abs", "len", "numpy.nanmean", "numpy.nanmean", "numpy.square", "numpy.maximum"], "function", ["None"], ["def", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'2'", ",", "beta", "=", "100", ")", ":", "\n", "# beta is target bin size", "\n", "    ", "idxs", "=", "np", ".", "argsort", "(", "confidence", ")", "\n", "confidence", "=", "confidence", "[", "idxs", "]", "\n", "correct", "=", "correct", "[", "idxs", "]", "\n", "bins", "=", "[", "[", "i", "*", "beta", ",", "(", "i", "+", "1", ")", "*", "beta", "]", "for", "i", "in", "range", "(", "len", "(", "confidence", ")", "//", "beta", ")", "]", "\n", "bins", "[", "-", "1", "]", "=", "[", "bins", "[", "-", "1", "]", "[", "0", "]", ",", "len", "(", "confidence", ")", "]", "\n", "\n", "cerr", "=", "0", "\n", "total_examples", "=", "len", "(", "confidence", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "bins", ")", "-", "1", ")", ":", "\n", "        ", "bin_confidence", "=", "confidence", "[", "bins", "[", "i", "]", "[", "0", "]", ":", "bins", "[", "i", "]", "[", "1", "]", "]", "\n", "bin_correct", "=", "correct", "[", "bins", "[", "i", "]", "[", "0", "]", ":", "bins", "[", "i", "]", "[", "1", "]", "]", "\n", "num_examples_in_bin", "=", "len", "(", "bin_confidence", ")", "\n", "\n", "if", "num_examples_in_bin", ">", "0", ":", "\n", "            ", "difference", "=", "np", ".", "abs", "(", "np", ".", "nanmean", "(", "bin_confidence", ")", "-", "np", ".", "nanmean", "(", "bin_correct", ")", ")", "\n", "\n", "if", "p", "==", "'2'", ":", "\n", "                ", "cerr", "+=", "num_examples_in_bin", "/", "total_examples", "*", "np", ".", "square", "(", "difference", ")", "\n", "", "elif", "p", "==", "'1'", ":", "\n", "                ", "cerr", "+=", "num_examples_in_bin", "/", "total_examples", "*", "difference", "\n", "", "elif", "p", "==", "'infty'", "or", "p", "==", "'infinity'", "or", "p", "==", "'max'", ":", "\n", "                ", "cerr", "=", "np", ".", "maximum", "(", "cerr", ",", "difference", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", ",", "\"p must be '1', '2', or 'infty'\"", "\n", "\n", "", "", "", "if", "p", "==", "'2'", ":", "\n", "        ", "cerr", "=", "np", ".", "sqrt", "(", "cerr", ")", "\n", "\n", "", "return", "cerr", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.soft_f1": [[37, 48], ["None"], "function", ["None"], ["", "def", "soft_f1", "(", "confidence", ",", "correct", ")", ":", "\n", "    ", "wrong", "=", "1", "-", "correct", "\n", "\n", "# # the incorrectly classified samples are our interest", "\n", "# # so they make the positive class", "\n", "# tp_soft = np.sum((1 - confidence) * wrong)", "\n", "# fp_soft = np.sum((1 - confidence) * correct)", "\n", "# fn_soft = np.sum(confidence * wrong)", "\n", "\n", "# return 2 * tp_soft / (2 * tp_soft + fn_soft + fp_soft)", "\n", "return", "2", "*", "(", "(", "1", "-", "confidence", ")", "*", "wrong", ")", ".", "sum", "(", ")", "/", "(", "1", "-", "confidence", "+", "wrong", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.tune_temp": [[50, 84], ["numpy.array", "torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor().requires_grad_", "min", "cx.Variable", "sum", "cx.Problem", "cx.Problem.solve", "torch.FloatTensor", "numpy.array", "cx.Minimize", "torch.autograd.grad", "float", "range", "F.cross_entropy", "F.cross_entropy", "cx.log_sum_exp"], "function", ["None"], ["", "def", "tune_temp", "(", "logits", ",", "labels", ",", "binary_search", "=", "True", ",", "lower", "=", "0.2", ",", "upper", "=", "5.0", ",", "eps", "=", "0.0001", ")", ":", "\n", "    ", "logits", "=", "np", ".", "array", "(", "logits", ")", "\n", "\n", "if", "binary_search", ":", "\n", "        ", "import", "torch", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "logits", "=", "torch", ".", "FloatTensor", "(", "logits", ")", "\n", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "t_guess", "=", "torch", ".", "FloatTensor", "(", "[", "0.5", "*", "(", "lower", "+", "upper", ")", "]", ")", ".", "requires_grad_", "(", ")", "\n", "\n", "while", "upper", "-", "lower", ">", "eps", ":", "\n", "            ", "if", "torch", ".", "autograd", ".", "grad", "(", "F", ".", "cross_entropy", "(", "logits", "/", "t_guess", ",", "labels", ")", ",", "t_guess", ")", "[", "0", "]", ">", "0", ":", "\n", "                ", "upper", "=", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "", "else", ":", "\n", "                ", "lower", "=", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "", "t_guess", "=", "t_guess", "*", "0", "+", "0.5", "*", "(", "lower", "+", "upper", ")", "\n", "\n", "", "t", "=", "min", "(", "[", "lower", ",", "0.5", "*", "(", "lower", "+", "upper", ")", ",", "upper", "]", ",", "key", "=", "lambda", "x", ":", "float", "(", "F", ".", "cross_entropy", "(", "logits", "/", "x", ",", "labels", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "import", "cvxpy", "as", "cx", "\n", "\n", "set_size", "=", "np", ".", "array", "(", "logits", ")", ".", "shape", "[", "0", "]", "\n", "\n", "t", "=", "cx", ".", "Variable", "(", ")", "\n", "\n", "expr", "=", "sum", "(", "(", "cx", ".", "Minimize", "(", "cx", ".", "log_sum_exp", "(", "logits", "[", "i", ",", ":", "]", "*", "t", ")", "-", "logits", "[", "i", ",", "labels", "[", "i", "]", "]", "*", "t", ")", "\n", "for", "i", "in", "range", "(", "set_size", ")", ")", ")", "\n", "p", "=", "cx", ".", "Problem", "(", "expr", ",", "[", "lower", "<=", "t", ",", "t", "<=", "upper", "]", ")", "\n", "\n", "p", ".", "solve", "(", ")", "# p.solve(solver=cx.SCS)", "\n", "t", "=", "1", "/", "t", ".", "value", "\n", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures": [[86, 92], ["calibration_tools.calib_err", "calibration_tools.calib_err", "calibration_tools.soft_f1"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.calib_err", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.calib_err", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.soft_f1"], ["", "def", "get_measures", "(", "confidence", ",", "correct", ")", ":", "\n", "    ", "rms", "=", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'2'", ")", "\n", "mad", "=", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'1'", ")", "\n", "sf1", "=", "soft_f1", "(", "confidence", ",", "correct", ")", "\n", "\n", "return", "rms", ",", "mad", ",", "sf1", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.print_measures": [[94, 99], ["print", "print", "print", "print"], "function", ["None"], ["", "def", "print_measures", "(", "rms", ",", "mad", ",", "sf1", ",", "method_name", "=", "'Baseline'", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'RMS Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "100", "*", "rms", ")", ")", "\n", "print", "(", "'MAD Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "100", "*", "mad", ")", ")", "\n", "print", "(", "'Soft F1 Score (%):   \\t\\t{:.2f}'", ".", "format", "(", "100", "*", "sf1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.print_measures_with_std": [[101, 106], ["print", "print", "print", "print", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "print_measures_with_std", "(", "rmss", ",", "mads", ",", "sf1s", ",", "method_name", "=", "'Baseline'", ")", ":", "\n", "    ", "print", "(", "'\\t\\t\\t\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'RMS Calib Error (%): \\t\\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "rmss", ")", ",", "100", "*", "np", ".", "std", "(", "rmss", ")", ")", ")", "\n", "print", "(", "'MAD Calib Error (%): \\t\\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "mads", ")", ",", "100", "*", "np", ".", "std", "(", "mads", ")", ")", ")", "\n", "print", "(", "'Soft F1 Score (%):   \\t\\t{:.2f}\\t+/- {:.2f}'", ".", "format", "(", "100", "*", "np", ".", "mean", "(", "sf1s", ")", ",", "100", "*", "np", ".", "std", "(", "sf1s", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.show_calibration_results": [[108, 122], ["print", "print", "print", "print", "calibration_tools.calib_err", "calibration_tools.calib_err", "calibration_tools.soft_f1"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.calib_err", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.calib_err", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.soft_f1"], ["", "def", "show_calibration_results", "(", "confidence", ",", "correct", ",", "method_name", "=", "'Baseline'", ")", ":", "\n", "\n", "    ", "print", "(", "'\\t\\t\\t\\t'", "+", "method_name", ")", "\n", "print", "(", "'RMS Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'2'", ")", ")", ")", "\n", "\n", "print", "(", "'MAD Calib Error (%): \\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "calib_err", "(", "confidence", ",", "correct", ",", "p", "=", "'1'", ")", ")", ")", "\n", "\n", "# print('Max Calib Error (%): \\t\\t{:.2f}'.format(", "\n", "#     100 * calib_err(confidence, correct, p='infty')))", "\n", "\n", "print", "(", "'Soft F1-Score (%): \\t\\t{:.2f}'", ".", "format", "(", "\n", "100", "*", "soft_f1", "(", "confidence", ",", "correct", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.get_ood_scores_odin": [[16, 47], ["net.eval", "enumerate", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "net", "to_np", "score_calculation.ODIN", "_score.append", "[].copy", "torch.softmax", "numpy.argmax", "target.numpy().squeeze", "numpy.invert", "_right_score.append", "_wrong_score.append", "concat().copy", "concat().copy", "concat().copy", "numpy.max", "target.numpy", "numpy.max", "numpy.max", "concat", "concat", "concat", "concat"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.ODIN"], ["def", "get_ood_scores_odin", "(", "loader", ",", "net", ",", "bs", ",", "ood_num_examples", ",", "T", ",", "noise", ",", "in_dist", "=", "False", ")", ":", "\n", "    ", "_score", "=", "[", "]", "\n", "_right_score", "=", "[", "]", "\n", "_wrong_score", "=", "[", "]", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "if", "batch_idx", ">=", "ood_num_examples", "//", "bs", "and", "in_dist", "is", "False", ":", "\n", "            ", "break", "\n", "", "data", "=", "data", ".", "cuda", "(", ")", "\n", "data", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", "\n", "\n", "output", "=", "net", "(", "data", ")", "\n", "smax", "=", "to_np", "(", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ")", "\n", "\n", "odin_score", "=", "ODIN", "(", "data", ",", "output", ",", "net", ",", "T", ",", "noise", ")", "\n", "_score", ".", "append", "(", "-", "np", ".", "max", "(", "odin_score", ",", "1", ")", ")", "\n", "\n", "if", "in_dist", ":", "\n", "            ", "preds", "=", "np", ".", "argmax", "(", "smax", ",", "axis", "=", "1", ")", "\n", "targets", "=", "target", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "right_indices", "=", "preds", "==", "targets", "\n", "wrong_indices", "=", "np", ".", "invert", "(", "right_indices", ")", "\n", "\n", "_right_score", ".", "append", "(", "-", "np", ".", "max", "(", "smax", "[", "right_indices", "]", ",", "axis", "=", "1", ")", ")", "\n", "_wrong_score", ".", "append", "(", "-", "np", ".", "max", "(", "smax", "[", "wrong_indices", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "", "if", "in_dist", ":", "\n", "        ", "return", "concat", "(", "_score", ")", ".", "copy", "(", ")", ",", "concat", "(", "_right_score", ")", ".", "copy", "(", ")", ",", "concat", "(", "_wrong_score", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "concat", "(", "_score", ")", "[", ":", "ood_num_examples", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.ODIN": [[49, 85], ["torch.CrossEntropyLoss", "numpy.argmax", "torch.autograd.Variable", "nn.CrossEntropyLoss.", "criterion.backward", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.add", "torch.add", "torch.add", "torch.add", "model", "model.data.cpu", "nnOutputs.numpy.numpy", "model.data.cpu().numpy", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.autograd.Variable", "numpy.max", "numpy.exp", "numpy.sum", "torch.ge.float", "numpy.exp", "model.data.cpu", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "", "def", "ODIN", "(", "inputs", ",", "outputs", ",", "model", ",", "temper", ",", "noiseMagnitude1", ")", ":", "\n", "# Calculating the perturbation we need to add, that is,", "\n", "# the sign of gradient of cross entropy loss w.r.t. input", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "maxIndexTemp", "=", "np", ".", "argmax", "(", "outputs", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Using temperature scaling", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "\n", "labels", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "maxIndexTemp", ")", ".", "cuda", "(", ")", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Normalizing the gradient to binary in {0, 1}", "\n", "gradient", "=", "torch", ".", "ge", "(", "inputs", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "\n", "gradient", "[", ":", ",", "0", "]", "=", "(", "gradient", "[", ":", ",", "0", "]", ")", "/", "(", "63.0", "/", "255.0", ")", "\n", "gradient", "[", ":", ",", "1", "]", "=", "(", "gradient", "[", ":", ",", "1", "]", ")", "/", "(", "62.1", "/", "255.0", ")", "\n", "gradient", "[", ":", ",", "2", "]", "=", "(", "gradient", "[", ":", ",", "2", "]", ")", "/", "(", "66.7", "/", "255.0", ")", "\n", "#gradient.index_copy_(1, torch.LongTensor([0]).cuda(), gradient.index_select(1, torch.LongTensor([0]).cuda()) / (63.0/255.0))", "\n", "#gradient.index_copy_(1, torch.LongTensor([1]).cuda(), gradient.index_select(1, torch.LongTensor([1]).cuda()) / (62.1/255.0))", "\n", "#gradient.index_copy_(1, torch.LongTensor([2]).cuda(), gradient.index_select(1, torch.LongTensor([2]).cuda()) / (66.7/255.0))", "\n", "\n", "# Adding small perturbations to images", "\n", "tempInputs", "=", "torch", ".", "add", "(", "inputs", ".", "data", ",", "-", "noiseMagnitude1", ",", "gradient", ")", "\n", "outputs", "=", "model", "(", "Variable", "(", "tempInputs", ")", ")", "\n", "outputs", "=", "outputs", "/", "temper", "\n", "# Calculating the confidence after adding perturbations", "\n", "nnOutputs", "=", "outputs", ".", "data", ".", "cpu", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", ".", "numpy", "(", ")", "\n", "nnOutputs", "=", "nnOutputs", "-", "np", ".", "max", "(", "nnOutputs", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "nnOutputs", "=", "np", ".", "exp", "(", "nnOutputs", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "nnOutputs", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "nnOutputs", "\n", "#PEYMAN", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.get_GEM_Mahalanobis_score": [[86, 162], ["model.eval", "enumerate", "model.intermediate_forward", "torch.mean.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "sample_mean[].index_select", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.backward", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.ge.index_copy_", "torch.add", "torch.add", "torch.add", "torch.add", "model.intermediate_forward.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "target.data.cpu().numpy", "my_target.reshape.reshape", "torch.cat.data.cpu().numpy", "numpy.concatenate", "M_dist.append", "Mahalanobis.extend", "numpy.asarray", "numpy.concatenate", "data.cuda", "target.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean.size", "torch.mean.size", "torch.cat.max", "torch.autograd.Variable", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.intermediate_forward", "model.intermediate_forward.size", "model.intermediate_forward.size", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.max", "torch.max", "torch.max", "torch.max", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ge.float", "torch.ge.index_select", "torch.ge.index_select", "torch.ge.index_select", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "torch.mm().diag", "term_gau.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "target.data.cpu", "torch.cat.data.cpu", "torch.cat.cpu().numpy", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "term_gau.view", "torch.cat.cpu", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "zero_f.t", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "zero_f.t"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.intermediate_forward", "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.intermediate_forward"], ["", "def", "get_GEM_Mahalanobis_score", "(", "model", ",", "test_loader", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "layer_index", ",", "magnitude", ",", "num_batches", ",", "in_dist", "=", "False", ",", "GEM", "=", "0", ")", ":", "\n", "    ", "'''\n    If GEM!=1 then computes the proposed Mahalanobis confidence score on input dataset\n    If GEM=1 then computes the GEM score on input dataset\n    return: GEM or Mahalanobis score from layer_index\n    '''", "\n", "model", ".", "eval", "(", ")", "\n", "Mahalanobis", "=", "[", "]", "\n", "M_dist", "=", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "#print(\"this is target: \", target)", "\n", "        ", "if", "batch_idx", ">=", "num_batches", "and", "in_dist", "is", "False", ":", "\n", "            ", "break", "\n", "\n", "", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "data", ",", "target", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "\n", "out_features", "=", "model", ".", "intermediate_forward", "(", "data", ",", "layer_index", ")", "\n", "out_features", "=", "out_features", ".", "view", "(", "out_features", ".", "size", "(", "0", ")", ",", "out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "=", "torch", ".", "mean", "(", "out_features", ",", "2", ")", "\n", "\n", "# compute Mahalanobis score", "\n", "gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "gaussian_score", "=", "torch", ".", "cat", "(", "(", "gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "# Input_processing", "\n", "", "", "sample_pred", "=", "gaussian_score", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", ".", "index_select", "(", "0", ",", "sample_pred", ")", "\n", "zero_f", "=", "out_features", "-", "Variable", "(", "batch_sample_mean", ")", "\n", "pure_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "Variable", "(", "precision", "[", "layer_index", "]", ")", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "-", "pure_gau", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "gradient", "=", "torch", ".", "ge", "(", "data", ".", "grad", ".", "data", ",", "0", ")", "\n", "gradient", "=", "(", "gradient", ".", "float", "(", ")", "-", "0.5", ")", "*", "2", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "63.0", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "62.1", "/", "255.0", ")", ")", "\n", "gradient", ".", "index_copy_", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ",", "gradient", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", ")", "/", "(", "66.7", "/", "255.0", ")", ")", "\n", "\n", "#tempInputs = torch.add(data.data, -magnitude, gradient) #The useage is depreciated", "\n", "tempInputs", "=", "torch", ".", "add", "(", "data", ".", "data", ",", "gradient", ",", "alpha", "=", "-", "magnitude", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "noise_out_features", "=", "model", ".", "intermediate_forward", "(", "tempInputs", ",", "layer_index", ")", "\n", "", "noise_out_features", "=", "noise_out_features", ".", "view", "(", "noise_out_features", ".", "size", "(", "0", ")", ",", "noise_out_features", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "noise_out_features", "=", "torch", ".", "mean", "(", "noise_out_features", ",", "2", ")", "\n", "noise_gaussian_score", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "batch_sample_mean", "=", "sample_mean", "[", "layer_index", "]", "[", "i", "]", "\n", "zero_f", "=", "noise_out_features", ".", "data", "-", "batch_sample_mean", "\n", "term_gau", "=", "-", "0.5", "*", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "zero_f", ",", "precision", "[", "layer_index", "]", ")", ",", "zero_f", ".", "t", "(", ")", ")", ".", "diag", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "noise_gaussian_score", "=", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "noise_gaussian_score", "=", "torch", ".", "cat", "(", "(", "noise_gaussian_score", ",", "term_gau", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "#print(noise_gaussian_score.data.cpu().numpy().shape)", "\n", "", "", "my_target", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "my_target", "=", "my_target", ".", "reshape", "(", "my_target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "my_score", "=", "noise_gaussian_score", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#print(my_target.shape,my_score.shape)", "\n", "my_data", "=", "np", ".", "concatenate", "(", "(", "my_score", ",", "my_target", ")", ",", "axis", "=", "1", ")", "\n", "M_dist", ".", "append", "(", "my_data", ")", "\n", "\n", "#PEYMAN", "\n", "if", "(", "GEM", "==", "1", ")", ":", "\n", "            ", "noise_gaussian_score", "=", "torch", ".", "logsumexp", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "noise_gaussian_score", ",", "_", "=", "torch", ".", "max", "(", "noise_gaussian_score", ",", "dim", "=", "1", ")", "\n", "", "Mahalanobis", ".", "extend", "(", "-", "noise_gaussian_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.sample_estimator": [[163, 243], ["model.eval", "sklearn.covariance.EmpiricalCovariance", "len", "numpy.empty", "np.empty.fill", "range", "range", "print", "range", "list_features.append", "torch.autograd.Variable.size", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "model.feature_list", "range", "pred.eq().cpu", "pred.eq().cpu.sum", "range", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "range", "sample_class_mean.append", "range", "sklearn.covariance.EmpiricalCovariance.fit", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "precision.append", "torch.Tensor().cuda.append", "out_features[].view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "output.data.max", "torch.autograd.Variable.size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat.cpu().numpy", "out_features[].size", "out_features[].size", "pred.eq", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "target.cuda", "out[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.cat.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "out[].view"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.feature_list"], ["", "return", "np", ".", "asarray", "(", "Mahalanobis", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "concatenate", "(", "M_dist", ",", "axis", "=", "0", ")", "\n", "\n", "", "def", "sample_estimator", "(", "model", ",", "num_classes", ",", "feature_list", ",", "train_loader", ")", ":", "\n", "    ", "\"\"\"\n    compute sample mean and precision (inverse of covariance)\n    return: sample_class_mean: list of class mean\n             precision: list of precisions\n    \"\"\"", "\n", "import", "sklearn", ".", "covariance", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "group_lasso", "=", "sklearn", ".", "covariance", ".", "EmpiricalCovariance", "(", "assume_centered", "=", "False", ")", "\n", "correct", ",", "total", "=", "0", ",", "0", "\n", "num_output", "=", "len", "(", "feature_list", ")", "\n", "num_sample_per_class", "=", "np", ".", "empty", "(", "num_classes", ")", "\n", "num_sample_per_class", ".", "fill", "(", "0", ")", "\n", "list_features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "temp_list", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", ".", "append", "(", "0", ")", "\n", "", "list_features", ".", "append", "(", "temp_list", ")", "\n", "\n", "", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "        ", "total", "+=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "cuda", "(", ")", "##PEYMAN", "\n", "#data=data.cpu()", "\n", "#data = Variable(data, volatile=True) ##PEYMAN :volatile has no effect ", "\n", "output", ",", "out_features", "=", "model", ".", "feature_list", "(", "data", ")", "\n", "\n", "# get hidden features", "\n", "for", "i", "in", "range", "(", "num_output", ")", ":", "\n", "            ", "out_features", "[", "i", "]", "=", "out_features", "[", "i", "]", ".", "view", "(", "out_features", "[", "i", "]", ".", "size", "(", "0", ")", ",", "out_features", "[", "i", "]", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "out_features", "[", "i", "]", "=", "torch", ".", "mean", "(", "out_features", "[", "i", "]", ".", "data", ",", "2", ")", "\n", "\n", "# compute the accuracy", "\n", "", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "equal_flag", "=", "pred", ".", "eq", "(", "target", ".", "cuda", "(", ")", ")", ".", "cpu", "(", ")", "\n", "correct", "+=", "equal_flag", ".", "sum", "(", ")", "\n", "\n", "# construct the sample matrix", "\n", "for", "i", "in", "range", "(", "data", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "label", "=", "target", "[", "i", "]", "\n", "if", "num_sample_per_class", "[", "label", "]", "==", "0", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "out_count", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "out_count", "=", "0", "\n", "for", "out", "in", "out_features", ":", "\n", "                    ", "list_features", "[", "out_count", "]", "[", "label", "]", "=", "torch", ".", "cat", "(", "(", "list_features", "[", "out_count", "]", "[", "label", "]", ",", "out", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "0", ")", "\n", "out_count", "+=", "1", "\n", "", "", "num_sample_per_class", "[", "label", "]", "+=", "1", "\n", "\n", "", "", "sample_class_mean", "=", "[", "]", "\n", "out_count", "=", "0", "\n", "for", "num_feature", "in", "feature_list", ":", "\n", "        ", "temp_list", "=", "torch", ".", "Tensor", "(", "num_classes", ",", "int", "(", "num_feature", ")", ")", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "temp_list", "[", "j", "]", "=", "torch", ".", "mean", "(", "list_features", "[", "out_count", "]", "[", "j", "]", ",", "0", ")", "\n", "", "sample_class_mean", ".", "append", "(", "temp_list", ")", "\n", "out_count", "+=", "1", "\n", "\n", "", "precision", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_output", ")", ":", "\n", "        ", "X", "=", "0", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "X", "=", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "list_features", "[", "k", "]", "[", "i", "]", "-", "sample_class_mean", "[", "k", "]", "[", "i", "]", ")", ",", "0", ")", "\n", "\n", "# find inverse            ", "\n", "", "", "group_lasso", ".", "fit", "(", "X", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "temp_precision", "=", "group_lasso", ".", "precision_", "\n", "temp_precision", "=", "torch", ".", "from_numpy", "(", "temp_precision", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "precision", ".", "append", "(", "temp_precision", ")", "\n", "\n", "", "print", "(", "'\\n Training Accuracy:({:.2f}%)\\n'", ".", "format", "(", "100.", "*", "correct", "/", "total", ")", ")", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tinyimages_80mn_loader.TinyImages.__init__": [[8, 33], ["open", "open.seek", "open.read", "numpy.fromstring().reshape", "set", "open", "numpy.fromstring", "tinyimages_80mn_loader.TinyImages.cifar_idxs.append", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", "=", "None", ",", "exclude_cifar", "=", "True", ")", ":", "\n", "\n", "        ", "data_file", "=", "open", "(", "'../data/80million/tiny_images.bin'", ",", "\"rb\"", ")", "\n", "\n", "def", "load_image", "(", "idx", ")", ":", "\n", "            ", "data_file", ".", "seek", "(", "idx", "*", "3072", ")", "\n", "data", "=", "data_file", ".", "read", "(", "3072", ")", "\n", "return", "np", ".", "fromstring", "(", "data", ",", "dtype", "=", "'uint8'", ")", ".", "reshape", "(", "32", ",", "32", ",", "3", ",", "order", "=", "\"F\"", ")", "\n", "\n", "", "self", ".", "load_image", "=", "load_image", "\n", "self", ".", "offset", "=", "0", "# offset index", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "exclude_cifar", "=", "exclude_cifar", "\n", "\n", "if", "exclude_cifar", ":", "\n", "            ", "self", ".", "cifar_idxs", "=", "[", "]", "\n", "with", "open", "(", "'../utils/80mn_cifar_idxs.txt'", ",", "'r'", ")", "as", "idxs", ":", "\n", "                ", "for", "idx", "in", "idxs", ":", "\n", "# indices in file take the 80mn database to start at 1, hence \"- 1\"", "\n", "                    ", "self", ".", "cifar_idxs", ".", "append", "(", "int", "(", "idx", ")", "-", "1", ")", "\n", "\n", "# hash table option", "\n", "", "", "self", ".", "cifar_idxs", "=", "set", "(", "self", ".", "cifar_idxs", ")", "\n", "self", ".", "in_cifar", "=", "lambda", "x", ":", "x", "in", "self", ".", "cifar_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tinyimages_80mn_loader.TinyImages.__getitem__": [[43, 55], ["tinyimages_80mn_loader.TinyImages.load_image", "tinyimages_80mn_loader.TinyImages.in_cifar", "tinyimages_80mn_loader.TinyImages.transform", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "index", "=", "(", "index", "+", "self", ".", "offset", ")", "%", "79302016", "\n", "\n", "if", "self", ".", "exclude_cifar", ":", "\n", "            ", "while", "self", ".", "in_cifar", "(", "index", ")", ":", "\n", "                ", "index", "=", "np", ".", "random", ".", "randint", "(", "79302017", ")", "\n", "\n", "", "", "img", "=", "self", ".", "load_image", "(", "index", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "0", "# 0 is the class", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tinyimages_80mn_loader.TinyImages.__len__": [[56, 58], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "79302017", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.svhn_loader.SVHN.__init__": [[26, 74], ["sio.loadmat", "ValueError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.transpose", "numpy.transpose", "sio.loadmat", "numpy.concatenate", "numpy.vstack", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "split", "=", "split", "# training set or test set or extra set", "\n", "\n", "if", "self", ".", "split", "not", "in", "self", ".", "split_list", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong split entered! Please use split=\"train\" '", "\n", "'or split=\"extra\" or split=\"test\" '", "\n", "'or split=\"train_and_extra\" '", ")", "\n", "\n", "", "if", "self", ".", "split", "==", "\"train_and_extra\"", ":", "\n", "            ", "self", ".", "url", "=", "self", ".", "split_list", "[", "split", "]", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "filename", "=", "self", ".", "split_list", "[", "split", "]", "[", "0", "]", "[", "1", "]", "\n", "self", ".", "file_md5", "=", "self", ".", "split_list", "[", "split", "]", "[", "0", "]", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "url", "=", "self", ".", "split_list", "[", "split", "]", "[", "0", "]", "\n", "self", ".", "filename", "=", "self", ".", "split_list", "[", "split", "]", "[", "1", "]", "\n", "self", ".", "file_md5", "=", "self", ".", "split_list", "[", "split", "]", "[", "2", "]", "\n", "\n", "# import here rather than at top of file because this is", "\n", "# an optional dependency for torchvision", "\n", "", "import", "scipy", ".", "io", "as", "sio", "\n", "\n", "# reading(loading) mat file as array", "\n", "loaded_mat", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", ")", "\n", "\n", "if", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "self", ".", "data", "=", "loaded_mat", "[", "'X'", "]", "\n", "self", ".", "targets", "=", "loaded_mat", "[", "'y'", "]", "\n", "# Note label 10 == 0 so modulo operator required", "\n", "self", ".", "targets", "=", "(", "self", ".", "targets", "%", "10", ")", ".", "squeeze", "(", ")", "# convert to zero-based indexing", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "self", ".", "data", ",", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "loaded_mat", "[", "'X'", "]", "\n", "self", ".", "targets", "=", "loaded_mat", "[", "'y'", "]", "\n", "\n", "if", "self", ".", "split", "==", "\"train_and_extra\"", ":", "\n", "                ", "extra_filename", "=", "self", ".", "split_list", "[", "split", "]", "[", "1", "]", "[", "1", "]", "\n", "loaded_mat", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "extra_filename", ")", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "[", "self", ".", "data", ",", "\n", "loaded_mat", "[", "'X'", "]", "]", ",", "axis", "=", "3", ")", "\n", "self", ".", "targets", "=", "np", ".", "vstack", "(", "(", "self", ".", "targets", ",", "\n", "loaded_mat", "[", "'y'", "]", ")", ")", "\n", "# Note label 10 == 0 so modulo operator required", "\n", "", "self", ".", "targets", "=", "(", "self", ".", "targets", "%", "10", ")", ".", "squeeze", "(", ")", "# convert to zero-based indexing", "\n", "self", ".", "data", "=", "np", ".", "transpose", "(", "self", ".", "data", ",", "(", "3", ",", "2", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.svhn_loader.SVHN.__getitem__": [[75, 92], ["PIL.Image.fromarray", "numpy.transpose", "svhn_loader.SVHN.transform", "svhn_loader.SVHN.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.svhn_loader.SVHN.__len__": [[93, 98], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"test\"", ":", "\n", "            ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.svhn_loader.SVHN._check_integrity": [[99, 113], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "check_integrity", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "check_integrity", "check_integrity"], "methods", ["None"], ["", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "if", "self", ".", "split", "==", "\"train_and_extra\"", ":", "\n", "            ", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "0", "]", "[", "2", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "train_integrity", "=", "check_integrity", "(", "fpath", ",", "md5", ")", "\n", "extra_filename", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "1", "]", "[", "1", "]", "\n", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "1", "]", "[", "2", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "extra_filename", ")", "\n", "return", "check_integrity", "(", "fpath", ",", "md5", ")", "and", "train_integrity", "\n", "", "else", ":", "\n", "            ", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "2", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "filename", ")", "\n", "return", "check_integrity", "(", "fpath", ",", "md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.svhn_loader.SVHN.download": [[114, 124], ["download_url", "download_url", "download_url"], "methods", ["None"], ["", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"train_and_extra\"", ":", "\n", "            ", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "0", "]", "[", "2", "]", "\n", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "md5", ")", "\n", "extra_filename", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "1", "]", "[", "1", "]", "\n", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "1", "]", "[", "2", "]", "\n", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "extra_filename", ",", "md5", ")", "\n", "", "else", ":", "\n", "            ", "md5", "=", "self", ".", "split_list", "[", "self", ".", "split", "]", "[", "2", "]", "\n", "download_url", "(", "self", ".", "url", ",", "self", ".", "root", ",", "self", ".", "filename", ",", "md5", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.BasicBlock.forward": [[23, 39], ["tiny_resnet.BasicBlock.conv2", "tiny_resnet.BasicBlock.relu1", "tiny_resnet.BasicBlock.relu1", "tiny_resnet.BasicBlock.relu2", "tiny_resnet.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "tiny_resnet.BasicBlock.bn1", "tiny_resnet.BasicBlock.bn1", "tiny_resnet.BasicBlock.bn2", "tiny_resnet.BasicBlock.bn2", "tiny_resnet.BasicBlock.convShortcut", "tiny_resnet.BasicBlock.conv1", "tiny_resnet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.NetworkBlock.__init__": [[42, 45], ["torch.Module.__init__", "tiny_resnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.NetworkBlock._make_layer": [[46, 51], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.NetworkBlock.forward": [[52, 54], ["tiny_resnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.WideResNet.__init__": [[57, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "tiny_resnet.NetworkBlock", "tiny_resnet.NetworkBlock", "tiny_resnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "tiny_resnet.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.tiny_resnet.WideResNet.forward": [[88, 97], ["tiny_resnet.WideResNet.conv1", "tiny_resnet.WideResNet.block1", "tiny_resnet.WideResNet.block2", "tiny_resnet.WideResNet.block3", "tiny_resnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "tiny_resnet.WideResNet.fc", "tiny_resnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "16", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.mahalanobis": [[14, 25], ["numpy.inner"], "function", ["None"], ["def", "mahalanobis", "(", "x", ",", "mu", ",", "phi", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         x: numpy array\n         mu: numpy array\n         phi: float magnitude of covariance \n    Returns:\n         Mahalanobis distance between x and mu scaled by -0.5\n         assuming covariance matrix is phi*Id\n    \"\"\"", "\n", "return", "(", "-", "0.5", "*", "(", "1", "/", "phi", ")", "*", "np", ".", "inner", "(", "x", "-", "mu", ",", "x", "-", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.rescaled_GEM_score": [[27, 41], ["numpy.exp", "GEM.mahalanobis"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.mahalanobis"], ["", "def", "rescaled_GEM_score", "(", "x", ",", "mean", ",", "phi", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         x: numpy array\n         mean: list of numpy arrays\n               holds the means of in-distribution data\n         phi: float magnitude of covariance \n    Returns:\n         rescaled GEM score of vector x \n    \"\"\"", "\n", "energy", "=", "0", "\n", "for", "mu", "in", "mean", ":", "\n", "        ", "energy", "+=", "np", ".", "exp", "(", "mahalanobis", "(", "x", ",", "mu", ",", "phi", ")", ")", "\n", "", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.mean_generator": [[43, 66], ["range", "numpy.array", "numpy.linalg.norm", "means.append", "means.append", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "mean_generator", "(", "d", ",", "k", ",", "beta", ",", "normalize", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         d: int holds input dimension\n         k: int number of non-zero entries\n         phi: float magnitude of covariance \n    Returns:\n         a list of means according to the setting explained in the paper \n    \"\"\"", "\n", "means", "=", "[", "]", "#holds the number of centers", "\n", "q", "=", "d", "//", "k", "\n", "m1", "=", "[", "beta", "]", "*", "k", "+", "[", "0", "]", "*", "(", "d", "-", "k", ")", "\n", "w", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "q", ")", ":", "\n", "        ", "a", "=", "m1", "[", "-", "i", "*", "k", ":", "]", "+", "m1", "[", ":", "-", "i", "*", "k", "]", "\n", "if", "normalize", "!=", "0", ":", "#checks if normalization is needed", "\n", "            ", "aa", "=", "np", ".", "array", "(", "a", ")", "\n", "n", "=", "np", ".", "linalg", ".", "norm", "(", "aa", ")", "#holds norm of the vector", "\n", "normalized", "=", "[", "(", "i", "/", "n", ")", "*", "normalize", "for", "i", "in", "aa", "]", "#holds normalized vector", "\n", "means", ".", "append", "(", "np", ".", "array", "(", "normalized", ")", ")", "\n", "", "else", ":", "\n", "            ", "means", ".", "append", "(", "np", ".", "array", "(", "a", ")", ")", "\n", "", "", "return", "means", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.fpr_95_tpr": [[68, 75], ["enumerate"], "function", ["None"], ["", "def", "fpr_95_tpr", "(", "fpr", ",", "tpr", ")", ":", "\n", "    ", "\"\"\"\n    Helper method for FPR at TPR 95 computation\n    \"\"\"", "\n", "a", "=", "[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "tpr", ")", "if", "v", ">", "0.95", "]", "\n", "index", "=", "a", "[", "0", "]", "\n", "return", "fpr", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.out_distribution_generate": [[76, 86], ["list", "numpy.random.multivariate_normal"], "function", ["None"], ["", "def", "out_distribution_generate", "(", "m_out", ",", "sigma", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         m_out: numpy array mean of OOD\n         sigma: numpy array covariance matrix\n         n: int number of samples to generate \n    Returns:\n         a list of numpy array generated from corresponding gaussian\n    \"\"\"", "\n", "return", "list", "(", "np", ".", "random", ".", "multivariate_normal", "(", "m_out", ",", "sigma", ",", "n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.in_distribution_generate": [[88, 104], ["len", "range", "random.randint", "my_list.append", "numpy.random.multivariate_normal"], "function", ["None"], ["", "def", "in_distribution_generate", "(", "mean", ",", "sigma", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         mean: list of numpy array means of ID\n         sigma: numpy array covariance matrix\n         n: int number of samples to generate \n    Returns:\n         a list ofnumpy array generated from corresponding GMM \n    \"\"\"", "\n", "k", "=", "len", "(", "mean", ")", "\n", "my_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "data_class", "=", "random", ".", "randint", "(", "0", ",", "k", "-", "1", ")", "\n", "class_mean", "=", "mean", "[", "data_class", "]", "\n", "my_list", ".", "append", "(", "np", ".", "random", ".", "multivariate_normal", "(", "class_mean", ",", "sigma", ",", "1", ")", "[", "0", "]", ")", "\n", "", "return", "my_list", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.generate": [[105, 138], ["len", "range", "numpy.identity", "numpy.random.binomial", "GEM.in_distribution_generate", "my_list.append", "feature_list.append", "label_list.append", "GEM.out_distribution_generate", "my_list.append", "feature_list.append", "label_list.append"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.in_distribution_generate", "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.out_distribution_generate"], ["", "def", "generate", "(", "alpha", ",", "mean", ",", "m_out", ",", "phi", "=", "1", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         alpha: float controls how often a sample is ID\n         mean: list of numpy arrays means of ID\n         m_out: numpy array mean of OOD\n         n: int number of sample to be generated\n    Returns:\n         three list correspond to samples generated from joint model \n    \"\"\"", "\n", "d", "=", "len", "(", "m_out", ")", "\n", "sigma_in", "=", "phi", "*", "np", ".", "identity", "(", "d", ")", "\n", "sigma_out", "=", "sigma_in", "\n", "my_list", "=", "[", "]", "#holds sample data with its label", "\n", "feature_list", "=", "[", "]", "#holds sample data", "\n", "label_list", "=", "[", "]", "#holds the labels", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "#label 1 corresponds to in-distribution and label 0 corresponds to out-distribution", "\n", "        ", "label", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "alpha", ",", "1", ")", "#draw 1 smaple according to bernulli with parameter alpha ", "\n", "if", "label", "==", "1", ":", "#draws from in distribution", "\n", "            ", "a", "=", "in_distribution_generate", "(", "mean", ",", "sigma_in", ")", "\n", "sample_data", "=", "[", "a", "[", "0", "]", ",", "1", "]", "\n", "my_list", ".", "append", "(", "sample_data", ")", "\n", "feature_list", ".", "append", "(", "a", "[", "0", "]", ")", "\n", "label_list", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "label", "==", "0", ":", "#draws from out-distribution", "\n", "                ", "a", "=", "out_distribution_generate", "(", "m_out", ",", "sigma_out", ")", "\n", "sample_data", "=", "[", "a", "[", "0", "]", ",", "0", "]", "\n", "my_list", ".", "append", "(", "sample_data", ")", "\n", "feature_list", ".", "append", "(", "a", "[", "0", "]", ")", "\n", "label_list", ".", "append", "(", "0", ")", "\n", "", "", "", "return", "my_list", ",", "feature_list", ",", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.simulate": [[140, 160], ["GEM.mean_generator", "numpy.array", "len", "GEM.generate", "sklearn.metrics.roc_curve", "GEM.fpr_95_tpr", "GEM.rescaled_GEM_score"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.mean_generator", "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.generate", "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.fpr_95_tpr", "home.repos.pwc.inspect_result.peymanmorteza_gem.simul.GEM.rescaled_GEM_score"], ["", "def", "simulate", "(", "d", ",", "nz", ",", "beta", ",", "alpha", ",", "n", ",", "phi", "=", "1", ",", "normalized", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n         d: int dimension\n         nz: int number of non-zero entries \n         beta: float the value of each non-zero entry (if normalized is 0)\n         n: int number of sample to be generated from joint model\n         phi: float magnitude of covariance\n         normalized: float if non-zero it holds the magnitude of od ID mean\n    Returns:\n         performance of GEM OOD when n samples are generated from the joint model  \n    \"\"\"", "\n", "mean", "=", "mean_generator", "(", "d", ",", "nz", ",", "beta", ",", "normalized", ")", "\n", "#holds the mean of out-distribution data", "\n", "m_out", "=", "np", ".", "array", "(", "[", "0", "]", "*", "d", ")", "\n", "k", "=", "len", "(", "mean", ")", "\n", "my_list", ",", "feat", ",", "label", "=", "generate", "(", "alpha", ",", "mean", ",", "m_out", ",", "phi", ",", "n", ")", "\n", "my_energy_score", "=", "[", "rescaled_GEM_score", "(", "x", ",", "mean", ",", "phi", ")", "for", "x", "in", "feat", "]", "\n", "fpr_energy", ",", "tpr_energy", ",", "thresholds_eng", "=", "sklearn", ".", "metrics", ".", "roc_curve", "(", "label", ",", "my_energy_score", ")", "\n", "return", "(", "fpr_95_tpr", "(", "fpr_energy", ",", "tpr_energy", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.recursion_change_bn": [[119, 127], ["isinstance", "enumerate", "module._modules.items", "train.recursion_change_bn"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.recursion_change_bn"], ["def", "recursion_change_bn", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "track_running_stats", "=", "1", "\n", "module", ".", "num_batches_tracked", "=", "0", "\n", "", "else", ":", "\n", "        ", "for", "i", ",", "(", "name", ",", "module1", ")", "in", "enumerate", "(", "module", ".", "_modules", ".", "items", "(", ")", ")", ":", "\n", "            ", "module1", "=", "recursion_change_bn", "(", "module1", ")", "\n", "", "", "return", "module", "\n", "# Restore model", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.cosine_annealing": [[156, 159], ["numpy.cos"], "function", ["None"], ["def", "cosine_annealing", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ")", ":", "\n", "    ", "return", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "\n", "1", "+", "np", ".", "cos", "(", "step", "/", "total_steps", "*", "np", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.train": [[172, 206], ["net.train", "numpy.random.randint", "zip", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net", "scheduler.step", "optimizer.zero_grad", "torch.cross_entropy", "F.cross_entropy.backward", "optimizer.step", "torch.cat.cuda", "target.cuda", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "float", "len", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "torch.pow().mean", "len", "len", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.relu", "torch.relu", "x[].mean", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "len", "len"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.train"], ["def", "train", "(", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "# enter train mode", "\n", "loss_avg", "=", "0.0", "\n", "\n", "# start at a random point of the outlier dataset; this induces more randomness without obliterating locality", "\n", "train_loader_out", ".", "dataset", ".", "offset", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "train_loader_out", ".", "dataset", ")", ")", "\n", "for", "in_set", ",", "out_set", "in", "zip", "(", "train_loader_in", ",", "train_loader_out", ")", ":", "\n", "        ", "data", "=", "torch", ".", "cat", "(", "(", "in_set", "[", "0", "]", ",", "out_set", "[", "0", "]", ")", ",", "0", ")", "\n", "target", "=", "in_set", "[", "1", "]", "\n", "\n", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# forward", "\n", "x", "=", "net", "(", "data", ")", "\n", "\n", "# backward", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "x", "[", ":", "len", "(", "in_set", "[", "0", "]", ")", "]", ",", "target", ")", "\n", "# cross-entropy from softmax distribution to uniform distribution", "\n", "if", "args", ".", "score", "==", "'energy'", ":", "\n", "            ", "Ec_out", "=", "-", "torch", ".", "logsumexp", "(", "x", "[", "len", "(", "in_set", "[", "0", "]", ")", ":", "]", ",", "dim", "=", "1", ")", "\n", "Ec_in", "=", "-", "torch", ".", "logsumexp", "(", "x", "[", ":", "len", "(", "in_set", "[", "0", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "loss", "+=", "0.1", "*", "(", "torch", ".", "pow", "(", "F", ".", "relu", "(", "Ec_in", "-", "args", ".", "m_in", ")", ",", "2", ")", ".", "mean", "(", ")", "+", "torch", ".", "pow", "(", "F", ".", "relu", "(", "args", ".", "m_out", "-", "Ec_out", ")", ",", "2", ")", ".", "mean", "(", ")", ")", "\n", "", "elif", "args", ".", "score", "==", "'OE'", ":", "\n", "            ", "loss", "+=", "0.5", "*", "-", "(", "x", "[", "len", "(", "in_set", "[", "0", "]", ")", ":", "]", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "x", "[", "len", "(", "in_set", "[", "0", "]", ")", ":", "]", ",", "dim", "=", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# exponential moving average", "\n", "loss_avg", "=", "loss_avg", "*", "0.8", "+", "float", "(", "loss", ")", "*", "0.2", "\n", "", "state", "[", "'train_loss'", "]", "=", "loss_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.train.test": [[209, 230], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "len", "net", "torch.cross_entropy", "pred.eq().sum().item", "float", "data.cuda", "target.cuda", "net.data.max", "pred.eq().sum", "pred.eq"], "function", ["None"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "loss_avg", "=", "0.0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "\n", "# forward", "\n", "output", "=", "net", "(", "data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "# accuracy", "\n", "pred", "=", "output", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# test loss average", "\n", "loss_avg", "+=", "float", "(", "loss", ".", "data", ")", "\n", "\n", "", "", "state", "[", "'test_loss'", "]", "=", "loss_avg", "/", "len", "(", "test_loader", ")", "\n", "state", "[", "'test_accuracy'", "]", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.test.get_ood_scores": [[115, 156], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "[].copy", "data.cuda.cuda", "net", "to_np", "concat().copy", "concat().copy", "concat().copy", "torch.softmax", "_score.append", "numpy.argmax", "target.numpy().squeeze", "numpy.invert", "to_np", "_score.append", "_score.append", "_right_score.append", "_wrong_score.append", "_right_score.append", "_wrong_score.append", "concat", "concat", "concat", "concat", "target.numpy", "net.mean", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "to_np", "numpy.max", "to_np", "to_np", "numpy.max", "numpy.max", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "net.mean", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "net.mean", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp"], "function", ["None"], ["def", "get_ood_scores", "(", "loader", ",", "in_dist", "=", "False", ")", ":", "\n", "    ", "_score", "=", "[", "]", "\n", "_right_score", "=", "[", "]", "\n", "_wrong_score", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "batch_idx", ">=", "ood_num_examples", "//", "args", ".", "test_bs", "and", "in_dist", "is", "False", ":", "\n", "                ", "break", "\n", "\n", "", "data", "=", "data", ".", "cuda", "(", ")", "#PEYMAN", "\n", "#data=data.cpu()", "\n", "\n", "output", "=", "net", "(", "data", ")", "\n", "smax", "=", "to_np", "(", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ")", "\n", "\n", "if", "args", ".", "use_xent", ":", "\n", "                ", "_score", ".", "append", "(", "to_np", "(", "(", "output", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "output", ",", "dim", "=", "1", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "args", ".", "score", "==", "'energy'", ":", "\n", "                    ", "_score", ".", "append", "(", "-", "to_np", "(", "(", "args", ".", "T", "*", "torch", ".", "logsumexp", "(", "output", "/", "args", ".", "T", ",", "dim", "=", "1", ")", ")", ")", ")", "\n", "", "else", ":", "# original MSP and Mahalanobis (but Mahalanobis won't need this returned)", "\n", "                    ", "_score", ".", "append", "(", "-", "np", ".", "max", "(", "smax", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "", "if", "in_dist", ":", "\n", "                ", "preds", "=", "np", ".", "argmax", "(", "smax", ",", "axis", "=", "1", ")", "\n", "targets", "=", "target", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "right_indices", "=", "preds", "==", "targets", "\n", "wrong_indices", "=", "np", ".", "invert", "(", "right_indices", ")", "\n", "\n", "if", "args", ".", "use_xent", ":", "\n", "                    ", "_right_score", ".", "append", "(", "to_np", "(", "(", "output", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "output", ",", "dim", "=", "1", ")", ")", ")", "[", "right_indices", "]", ")", "\n", "_wrong_score", ".", "append", "(", "to_np", "(", "(", "output", ".", "mean", "(", "1", ")", "-", "torch", ".", "logsumexp", "(", "output", ",", "dim", "=", "1", ")", ")", ")", "[", "wrong_indices", "]", ")", "\n", "", "else", ":", "\n", "                    ", "_right_score", ".", "append", "(", "-", "np", ".", "max", "(", "smax", "[", "right_indices", "]", ",", "axis", "=", "1", ")", ")", "\n", "_wrong_score", ".", "append", "(", "-", "np", ".", "max", "(", "smax", "[", "wrong_indices", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "", "", "", "if", "in_dist", ":", "\n", "        ", "return", "concat", "(", "_score", ")", ".", "copy", "(", ")", ",", "concat", "(", "_right_score", ")", ".", "copy", "(", ")", ",", "concat", "(", "_wrong_score", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "concat", "(", "_score", ")", "[", ":", "ood_num_examples", "]", ".", "copy", "(", ")", "\n", "", "", "if", "args", ".", "score", "==", "'Odin'", ":", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.test.get_and_print_results": [[246, 272], ["range", "print", "numpy.mean", "numpy.mean", "numpy.mean", "auroc_list.append", "aupr_list.append", "fpr_list.append", "aurocs.append", "auprs.append", "fprs.append", "print_measures_with_std", "print_measures", "lib.get_ood_scores_odin", "get_measures", "get_measures", "lib.get_GEM_Mahalanobis_score", "lib.get_GEM_Mahalanobis_score", "test.get_ood_scores"], "function", ["home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.print_measures_with_std", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.print_measures", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.get_ood_scores_odin", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.calibration_tools.get_measures", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.get_GEM_Mahalanobis_score", "home.repos.pwc.inspect_result.peymanmorteza_gem.utils.score_calculation.get_GEM_Mahalanobis_score", "home.repos.pwc.inspect_result.peymanmorteza_gem.CIFAR.test.get_ood_scores"], ["def", "get_and_print_results", "(", "ood_loader", ",", "num_to_avg", "=", "args", ".", "num_to_avg", ")", ":", "\n", "\n", "    ", "aurocs", ",", "auprs", ",", "fprs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "num_to_avg", ")", ":", "\n", "        ", "if", "args", ".", "score", "==", "'Odin'", ":", "\n", "            ", "out_score", "=", "lib", ".", "get_ood_scores_odin", "(", "ood_loader", ",", "net", ",", "args", ".", "test_bs", ",", "ood_num_examples", ",", "args", ".", "T", ",", "args", ".", "noise", ")", "\n", "", "elif", "args", ".", "score", "==", "'M'", ":", "\n", "            ", "out_score", ",", "M_dist_2", "=", "lib", ".", "get_GEM_Mahalanobis_score", "(", "net", ",", "ood_loader", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "count", "-", "1", ",", "args", ".", "noise", ",", "num_batches", ")", "\n", "", "elif", "args", ".", "score", "==", "'GEM'", ":", "\n", "            ", "out_score", ",", "M_dist_2", "=", "lib", ".", "get_GEM_Mahalanobis_score", "(", "net", ",", "ood_loader", ",", "num_classes", ",", "sample_mean", ",", "precision", ",", "count", "-", "1", ",", "args", ".", "noise", ",", "num_batches", ",", "GEM", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "out_score", "=", "get_ood_scores", "(", "ood_loader", ")", "\n", "", "if", "args", ".", "out_as_pos", ":", "# OE's defines out samples as positive", "\n", "            ", "measures", "=", "get_measures", "(", "out_score", ",", "in_score", ")", "\n", "", "else", ":", "\n", "            ", "measures", "=", "get_measures", "(", "-", "in_score", ",", "-", "out_score", ")", "\n", "", "aurocs", ".", "append", "(", "measures", "[", "0", "]", ")", ";", "auprs", ".", "append", "(", "measures", "[", "1", "]", ")", ";", "fprs", ".", "append", "(", "measures", "[", "2", "]", ")", "\n", "", "print", "(", "in_score", "[", ":", "3", "]", ",", "out_score", "[", ":", "3", "]", ")", "\n", "auroc", "=", "np", ".", "mean", "(", "aurocs", ")", ";", "aupr", "=", "np", ".", "mean", "(", "auprs", ")", ";", "fpr", "=", "np", ".", "mean", "(", "fprs", ")", "\n", "auroc_list", ".", "append", "(", "auroc", ")", ";", "aupr_list", ".", "append", "(", "aupr", ")", ";", "fpr_list", ".", "append", "(", "fpr", ")", "\n", "\n", "if", "num_to_avg", ">=", "5", ":", "\n", "        ", "print_measures_with_std", "(", "aurocs", ",", "auprs", ",", "fprs", ",", "args", ".", "method_name", ")", "\n", "", "else", ":", "\n", "        ", "print_measures", "(", "auroc", ",", "aupr", ",", "fpr", ",", "args", ".", "method_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.BasicBlock.forward": [[23, 39], ["wrn.BasicBlock.conv2", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu2", "wrn.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn2", "wrn.BasicBlock.bn2", "wrn.BasicBlock.convShortcut", "wrn.BasicBlock.conv1", "wrn.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock.__init__": [[42, 45], ["torch.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__", "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock._make_layer": [[46, 51], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.NetworkBlock.forward": [[52, 54], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__": [[57, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.forward": [[88, 97], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.fc", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.intermediate_forward": [[98, 105], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "def", "intermediate_forward", "(", "self", ",", "x", ",", "layer_index", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.peymanmorteza_gem.models.wrn.WideResNet.feature_list": [[106, 117], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "out_list.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.bn1", "wrn.WideResNet.fc"], "methods", ["None"], ["", "def", "feature_list", "(", "self", ",", "x", ")", ":", "\n", "        ", "out_list", "=", "[", "]", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out_list", ".", "append", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", ",", "out_list", "\n", "\n"]]}