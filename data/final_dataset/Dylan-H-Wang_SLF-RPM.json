{"home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.main.main": [[69, 123], ["parser.parse_args", "logging.basicConfig", "os.path.exists", "os.makedirs", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "logging.info", "logging.info", "int", "int", "wandb.init", "main.main_worker", "os.path.join", "logging.critical", "print"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"train_output.log\"", ")", ",", "\n", "format", "=", "\"[%(asctime)s] %(levelname)s: %(message)s\"", ",", "\n", "level", "=", "logging", ".", "DEBUG", ",", "\n", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "logging", ".", "info", "(", "\n", "\"You have chosen to seed training. \"", "\n", "\"This will turn on the CUDNN deterministic setting, \"", "\n", "\"which can slow down your training considerably! \"", "\n", "\"You may see unexpected behavior when restarting \"", "\n", "\"from checkpoints.\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "if", "args", ".", "gpu", "is", "None", ":", "\n", "        ", "logging", ".", "info", "(", "\"You have not specify a GPU, use the default value 0\"", ")", "\n", "args", ".", "gpu", "=", "0", "\n", "\n", "", "args", ".", "roi_list", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "roi_list", "]", "\n", "args", ".", "stride_list", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "stride_list", "]", "\n", "\n", "# Log config", "\n", "if", "args", ".", "wandb", ":", "\n", "        ", "import", "wandb", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "\"SLF-RPM\"", ",", "\n", "notes", "=", "\"Train the model\"", ",", "\n", "tags", "=", "args", ".", "run_tag", ",", "\n", "name", "=", "args", ".", "run_name", ",", "\n", "job_type", "=", "\"train\"", ",", "\n", "dir", "=", "args", ".", "log_dir", ",", "\n", "config", "=", "args", ",", "\n", ")", "\n", "args", "=", "wandb", ".", "config", "\n", "\n", "", "try", ":", "\n", "        ", "main_worker", "(", "args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "critical", "(", "e", ",", "exc_info", "=", "True", ")", "\n", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.main.main_worker": [[125, 286], ["print", "logging.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "print", "logging.info", "models.slf_rpm.SLF_RPM", "model.to.to", "print", "torch.CrossEntropyLoss().to", "torch.Adam", "torch.utils.data.DataLoader", "tqdm.trange", "len", "len", "model.to.parameters", "utils.augmentation.RandomROI", "utils.augmentation.RandomStride", "utils.dataset.MAHNOBHCIDataset", "main.train", "min", "max", "max", "print", "logging.info", "shutil.copyfile", "torch.CrossEntropyLoss", "utils.augmentation.Transformer", "utils.augmentation.RandomStride", "utils.dataset.VIPLHRDataset", "wandb.log", "os.path.join", "torch.save", "torch.save", "torch.save", "logging.info", "print", "os.path.join", "os.path.join", "shutil.copyfile", "logging.info", "print", "os.path.join", "os.path.join", "utils.augmentation.Transformer", "utils.augmentation.RandomStride", "utils.dataset.UBFCDataset", "print", "model.to.state_dict", "optim.Adam.state_dict", "utils.augmentation.Transformer"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.train"], ["", "", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "logging", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "gpu", ")", "\n", "\n", "# Create SLF-RPM model", "\n", "print", "(", "\n", "\"\\n=> Creating SLF-RPM Pretrain Model: 3D ResNet-{} with MLP\"", ".", "format", "(", "\n", "args", ".", "model_depth", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"=> Creating SLF-RPM Pretrain Model: 3D ResNet-{} with MLP\"", ".", "format", "(", "\n", "args", ".", "model_depth", "\n", ")", "\n", ")", "\n", "model", "=", "SLF_RPM", "(", "\n", "args", ".", "model_depth", ",", "\n", "args", ".", "n_dim", ",", "\n", "args", ".", "temperature", ",", "\n", "len", "(", "args", ".", "roi_list", ")", ",", "\n", "len", "(", "args", ".", "stride_list", ")", ",", "\n", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "\n", "# Loss function", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Optimiser function", "\n", "optimiser", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "\n", "# Load data", "\n", "augmentation", "=", "[", "RandomROI", "(", "args", ".", "roi_list", ")", "]", "\n", "\n", "if", "args", ".", "dataset_name", "==", "\"mahnob-hci\"", ":", "\n", "        ", "augmentation", "=", "RandomStride", "(", "\n", "args", ".", "stride_list", ",", "\n", "args", ".", "clip_frame", ",", "\n", "Transformer", "(", "\n", "augmentation", ",", "\n", "mean", "=", "[", "0.2796", ",", "0.2394", ",", "0.1901", "]", ",", "\n", "std", "=", "[", "0.1655", ",", "0.1429", ",", "0.1145", "]", ",", "\n", ")", ",", "\n", ")", "\n", "train_dataset", "=", "MAHNOBHCIDataset", "(", "\n", "args", ".", "dataset_dir", ",", "True", ",", "augmentation", ",", "args", ".", "vid_frame", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset_name", "==", "\"vipl-hr-v2\"", ":", "\n", "        ", "augmentation", "=", "RandomStride", "(", "\n", "args", ".", "stride_list", ",", "\n", "args", ".", "clip_frame", ",", "\n", "Transformer", "(", "\n", "augmentation", ",", "\n", "mean", "=", "[", "0.3888", ",", "0.2767", ",", "0.2460", "]", ",", "\n", "std", "=", "[", "0.2899", ",", "0.2378", ",", "0.2232", "]", ",", "\n", ")", ",", "\n", ")", "\n", "train_dataset", "=", "VIPLHRDataset", "(", "\n", "args", ".", "dataset_dir", ",", "True", ",", "augmentation", ",", "args", ".", "vid_frame", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset_name", "==", "\"ubfc-rppg\"", ":", "\n", "        ", "augmentation", "=", "RandomStride", "(", "\n", "args", ".", "stride_list", ",", "\n", "args", ".", "clip_frame", ",", "\n", "Transformer", "(", "\n", "augmentation", ",", "\n", "mean", "=", "[", "0.4642", ",", "0.3766", ",", "0.3744", "]", ",", "\n", "std", "=", "[", "0.2947", ",", "0.2393", ",", "0.2395", "]", ",", "\n", ")", ",", "\n", ")", "\n", "train_dataset", "=", "UBFCDataset", "(", "\n", "args", ".", "dataset_dir", ",", "True", ",", "augmentation", ",", "args", ".", "vid_frame", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unsupported datasets!\"", ")", "\n", "return", "\n", "\n", "", "best_loss", "=", "sys", ".", "maxsize", "\n", "best_top1", "=", "0", "\n", "best_top5", "=", "0", "\n", "\n", "train_sampler", "=", "None", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "# Train model", "\n", "for", "epoch", "in", "trange", "(", "args", ".", "epochs", ",", "desc", "=", "\"Epoch\"", ")", ":", "\n", "        ", "loss", ",", "top1", ",", "top5", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimiser", ",", "device", ")", "\n", "\n", "if", "args", ".", "wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "\n", "{", "\"train_loss\"", ":", "loss", ",", "\"train_top1_acc\"", ":", "top1", ",", "\"train_top5_acc\"", ":", "top5", "}", "\n", ")", "\n", "\n", "", "is_best", "=", "loss", "<=", "best_loss", "\n", "best_loss", "=", "min", "(", "loss", ",", "best_loss", ")", "\n", "best_top1", "=", "max", "(", "top1", ",", "best_top1", ")", "\n", "best_top5", "=", "max", "(", "top5", ",", "best_top5", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "state", "=", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimiser\"", ":", "optimiser", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"best_train_model.pth.tar\"", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n", "logging", ".", "info", "(", "\"Model saved at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "print", "(", "\"\\nModel saved at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "best_model", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"best_train_model.pth.tar\"", ")", "\n", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "log_dir", ",", "\"best_train_model_before_{}.pth.tar\"", ".", "format", "(", "(", "epoch", "+", "1", ")", ")", "\n", ")", "\n", "shutil", ".", "copyfile", "(", "best_model", ",", "checkpoint", ")", "\n", "\n", "logging", ".", "info", "(", "\"Best model before epoch {} is saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "print", "(", "\"\\nBest model before epoch {} is saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# Logs", "\n", "", "if", "args", ".", "wandb", ":", "\n", "            ", "wandb", ".", "run", ".", "summary", "[", "\"train_loss\"", "]", "=", "best_loss", "\n", "wandb", ".", "run", ".", "summary", "[", "\"train_top1_acc\"", "]", "=", "best_top1", "\n", "wandb", ".", "run", ".", "summary", "[", "\"train_top5_acc\"", "]", "=", "best_top5", "\n", "\n", "", "print", "(", "\n", "\"Train Loss/Best: {:.4f}/{:.4f}, Train Acc-Top1/Best: {:.4f}/{:.4f}, Train Acc-Top5/Best: {:.4f}/{:.4f}\"", ".", "format", "(", "\n", "loss", ",", "best_loss", ",", "top1", ",", "best_top1", ",", "top5", ",", "best_top5", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"({}/{}) Train Loss/Best: {:.4f}/{:.4f}, Train Acc-Top1/Best: {:.4f}/{:.4f}, Train Acc-Top5/Best: {:.4f}/{:.4f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "args", ".", "epochs", ",", "\n", "loss", ",", "\n", "best_loss", ",", "\n", "top1", ",", "\n", "best_top1", ",", "\n", "top5", ",", "\n", "best_top5", ",", "\n", ")", "\n", ")", "\n", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"train_output.log\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"train_output.log\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.main.train": [[289, 328], ["utils.utils.AverageMeter", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "model.train", "tqdm.tqdm", "videos[].to", "videos[].to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "model", "criterion", "criterion", "criterion", "utils.utils.accuracy", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.size", "labels.size", "labels.size"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.train", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.accuracy", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "device", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.4e\"", ")", "\n", "top1", "=", "AverageMeter", "(", "\"Acc@1\"", ",", "\":6.2f\"", ")", "\n", "top5", "=", "AverageMeter", "(", "\"Acc@5\"", ",", "\":6.2f\"", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "videos", ",", "_", ",", "label_spatial", ",", "label_temporal", "in", "tqdm", "(", "\n", "train_loader", ",", "desc", "=", "\"Iteration\"", "\n", ")", ":", "\n", "# Process input", "\n", "        ", "videos", "[", "0", "]", "=", "videos", "[", "0", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "videos", "[", "1", "]", "=", "videos", "[", "1", "]", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "label_spatial", "=", "torch", ".", "cat", "(", "label_spatial", ",", "axis", "=", "0", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "label_temporal", "=", "torch", ".", "cat", "(", "label_temporal", ",", "axis", "=", "0", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Compute output", "\n", "logits", ",", "labels", ",", "pred_spatial", ",", "pred_temporal", "=", "model", "(", "videos", ")", "\n", "\n", "# Contrastive loss", "\n", "loss_contrast", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "loss_spatial", "=", "criterion", "(", "pred_spatial", ",", "label_spatial", ")", "\n", "loss_temporal", "=", "criterion", "(", "pred_temporal", ",", "label_temporal", ")", "\n", "loss", "=", "loss_contrast", "+", "loss_spatial", "+", "loss_temporal", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# Measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "logits", ",", "labels", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ",", "labels", ".", "size", "(", "0", ")", "*", "2", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "labels", ".", "size", "(", "0", ")", "*", "2", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "labels", ".", "size", "(", "0", ")", "*", "2", ")", "\n", "\n", "# Compute gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.main": [[72, 124], ["parser.parse_args", "logging.basicConfig", "os.path.exists", "os.makedirs", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "logging.info", "logging.info", "wandb.init", "test.main_worker", "os.path.join", "logging.critical", "print"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "\n", "", "logging", ".", "basicConfig", "(", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"test_output.log\"", ")", ",", "\n", "format", "=", "\"[%(asctime)s] %(levelname)s: %(message)s\"", ",", "\n", "level", "=", "logging", ".", "DEBUG", ",", "\n", ")", "\n", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "logging", ".", "info", "(", "\n", "\"You have chosen to seed training. \"", "\n", "\"This will turn on the CUDNN deterministic setting, \"", "\n", "\"which can slow down your training considerably! \"", "\n", "\"You may see unexpected behavior when restarting \"", "\n", "\"from checkpoints.\"", "\n", ")", "\n", "", "else", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "if", "args", ".", "gpu", "is", "None", ":", "\n", "        ", "logging", ".", "info", "(", "\"You have not specify a GPU, use the default value 0\"", ")", "\n", "args", ".", "gpu", "=", "0", "\n", "\n", "# Log config", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "import", "wandb", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "\"temp\"", ",", "\n", "notes", "=", "\"Test model\"", ",", "\n", "tags", "=", "args", ".", "run_tag", ",", "\n", "name", "=", "args", ".", "run_name", ",", "\n", "job_type", "=", "\"test\"", ",", "\n", "dir", "=", "args", ".", "log_dir", ",", "\n", "config", "=", "args", ",", "\n", ")", "\n", "args", "=", "wandb", ".", "config", "\n", "\n", "# Simply call main_worker function", "\n", "", "try", ":", "\n", "        ", "main_worker", "(", "args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "critical", "(", "e", ",", "exc_info", "=", "True", ")", "\n", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.main_worker": [[126, 392], ["print", "logging.info", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.device", "print", "logging.info", "models.classifier.LinearClsResNet3D", "print", "model.to.named_parameters", "print", "model.to.to", "print", "torch.L1Loss().to", "list", "torch.Adam", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "tqdm.trange", "model.to.named_parameters", "logging.info", "print", "os.path.isfile", "filter", "utils.augmentation.RandomROI", "utils.augmentation.Transformer", "utils.dataset.MAHNOBHCIDataset", "utils.dataset.MAHNOBHCIDataset", "print", "logging.info", "torch.load", "torch.load", "torch.load", "model.to.load_state_dict", "print", "logging.info", "test.validate", "print", "logging.info", "test.train", "test.validate", "min", "print", "logging.info", "shutil.copyfile", "logging.info", "print", "logging.critical", "sys.exit", "print", "torch.load", "torch.load", "torch.load", "list", "model.to.load_state_dict", "print", "logging.info", "print", "logging.critical", "sys.exit", "print", "logging.info", "print", "logging.critical", "sys.exit", "torch.L1Loss", "model.to.parameters", "len", "utils.augmentation.Transformer", "utils.dataset.VIPLHRDataset", "utils.dataset.VIPLHRDataset", "wandb.log", "os.path.join", "torch.save", "torch.save", "torch.save", "print", "logging.info", "os.path.join", "os.path.join", "state_dict.keys", "set", "set", "list", "utils.augmentation.Transformer", "utils.dataset.UBFCDataset", "utils.dataset.UBFCDataset", "print", "model.to.state_dict", "optim.Adam.state_dict", "k.startswith", "state_dict.keys", "k.startswith", "k.startswith", "k.startswith", "k.startswith", "len"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.validate", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.train", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.validate"], ["", "", "def", "main_worker", "(", "args", ")", ":", "\n", "    ", "best_loss", "=", "sys", ".", "maxsize", "\n", "\n", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "logging", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "gpu", ")", "\n", "\n", "# Create SLF-RPM model", "\n", "print", "(", "\n", "\"\\n=> Creating SLF-RPM Classifier Model: 3D ResNet-{}\"", ".", "format", "(", "\n", "args", ".", "model_depth", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"=> Creating SLF-RPM Pretrain Model: 3D ResNet-{}\"", ".", "format", "(", "\n", "args", ".", "model_depth", "\n", ")", "\n", ")", "\n", "model", "=", "classifier", ".", "LinearClsResNet3D", "(", "\n", "model_depth", "=", "args", ".", "model_depth", ",", "n_class", "=", "1", ",", "dropout", "=", "args", ".", "dropout", "\n", ")", "\n", "\n", "if", "args", ".", "finetune", "==", "\"fc\"", ":", "\n", "# Freeze all layers but the last fc", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", "not", "in", "[", "\"encoder_q.fc.weight\"", ",", "\"encoder_q.fc.bias\"", "]", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "logging", ".", "info", "(", "\"=> Finetune only fc layer\"", ")", "\n", "\n", "", "elif", "args", ".", "finetune", "==", "\"all\"", ":", "\n", "        ", "logging", ".", "info", "(", "\"=> Finetune all model layers\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Invalid argument \"finetune\"!'", ")", "\n", "logging", ".", "critical", "(", "'Invalid argument \"finetune\"!'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "# Check grad", "\n", "", "print", "(", "\"\\n===========Check Grad============\"", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "    \t", "print", "(", "name", ",", "param", ".", "requires_grad", ")", "\n", "", "print", "(", "\"=================================\\n\"", ")", "\n", "\n", "# Load from pretrained model", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", ":", "\n", "            ", "print", "(", "\"=> Loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Retain only encoder and contexter weights", "\n", "                ", "if", "k", ".", "startswith", "(", "\"module.encoder_q\"", ")", "and", "not", "k", ".", "startswith", "(", "\n", "\"module.encoder_q.fc\"", "\n", ")", ":", "\n", "                    ", "state_dict", "[", "k", "[", "len", "(", "\"module.\"", ")", ":", "]", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "elif", "k", ".", "startswith", "(", "\"encoder_q\"", ")", "and", "not", "k", ".", "startswith", "(", "\"encoder_q.fc\"", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "elif", "not", "k", ".", "startswith", "(", "\"fc\"", ")", ":", "\n", "                    ", "state_dict", "[", "\"encoder_q.{}\"", ".", "format", "(", "k", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "# Delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "set", "(", "msg", ".", "missing_keys", ")", "==", "{", "\n", "\"encoder_q.fc.weight\"", ",", "\n", "\"encoder_q.fc.bias\"", ",", "\n", "}", ",", "\"Missing keys: {};\\n Have: {}\"", ".", "format", "(", "\n", "set", "(", "msg", ".", "missing_keys", ")", ",", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", ")", "\n", "print", "(", "\"=> Loaded pre-trained model '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "logging", ".", "info", "(", "\"=> Loaded pre-trained model '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> Error: No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "logging", ".", "critical", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "elif", "args", ".", "scratch", ":", "\n", "        ", "print", "(", "\"=> Pretrained model does not specify, train from the scratch!\"", ")", "\n", "logging", ".", "info", "(", "\"=> Pretrained model does not specify, train from the scratch!\"", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "\"=> Error: Pretrained model does not specify, and scratch does not specify!\"", "\n", ")", "\n", "logging", ".", "critical", "(", "\n", "\"=> Pretrained model does not specify, and scratch does not specify!\"", "\n", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "print", "(", "model", ")", "\n", "\n", "# Loss function", "\n", "criterion", "=", "nn", ".", "L1Loss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Optimise only the linear classifier", "\n", "parameters", "=", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ")", "\n", "if", "args", ".", "finetune", "==", "\"fc\"", ":", "\n", "        ", "assert", "len", "(", "parameters", ")", "==", "2", "# fc.weight, fc.bias", "\n", "", "optimiser", "=", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "\n", "# Load data", "\n", "augmentation", "=", "[", "RandomROI", "(", "[", "0", "]", ")", "]", "\n", "\n", "if", "args", ".", "dataset_name", "==", "\"mahnob-hci\"", ":", "\n", "        ", "augmentation", "=", "Transformer", "(", "\n", "augmentation", ",", "mean", "=", "[", "0.2796", ",", "0.2394", ",", "0.1901", "]", ",", "std", "=", "[", "0.1655", ",", "0.1429", ",", "0.1145", "]", "\n", ")", "\n", "train_dataset", "=", "MAHNOBHCIDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "True", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "val_dataset", "=", "MAHNOBHCIDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "False", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "assert", "not", "[", "\n", "i", "for", "i", "in", "val_dataset", ".", "files", "if", "i", "in", "train_dataset", ".", "files", "\n", "]", ",", "\"Train/Val datasets are intersected!\"", "\n", "\n", "", "elif", "args", ".", "dataset_name", "==", "\"vipl-hr-v2\"", ":", "\n", "        ", "augmentation", "=", "Transformer", "(", "\n", "augmentation", ",", "mean", "=", "[", "0.3888", ",", "0.2767", ",", "0.2460", "]", ",", "std", "=", "[", "0.2899", ",", "0.2378", ",", "0.2232", "]", "\n", ")", "\n", "train_dataset", "=", "VIPLHRDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "True", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "val_dataset", "=", "VIPLHRDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "False", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset_name", "==", "\"ubfc-rppg\"", ":", "\n", "        ", "augmentation", "=", "Transformer", "(", "\n", "augmentation", ",", "mean", "=", "[", "0.4642", ",", "0.3766", ",", "0.3744", "]", ",", "std", "=", "[", "0.2947", ",", "0.2393", ",", "0.2395", "]", "\n", ")", "\n", "train_dataset", "=", "UBFCDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "True", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "val_dataset", "=", "UBFCDataset", "(", "\n", "args", ".", "dataset_dir", ",", "\n", "False", ",", "\n", "augmentation", ",", "\n", "args", ".", "vid_frame", ",", "\n", "args", ".", "vid_frame_stride", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unsupported datasets!\"", ")", "\n", "return", "\n", "\n", "", "train_sampler", "=", "None", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"=> Loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "logging", ".", "info", "(", "\"=> Loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "map_location", "=", "\"cpu\"", ")", "\n", "state_dict", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n", "print", "(", "\"=> Loaded pre-trained model '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "logging", ".", "info", "(", "\"=> Loaded pre-trained model '{}'\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "mae", ",", "std", ",", "rmse", ",", "r", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "device", ")", "\n", "print", "(", "\n", "\"Evaluation Result\\n MAE: {:.4f}; SD: {:.4f}; RMSE: {:.4f}; R: {:.4f};\"", ".", "format", "(", "\n", "mae", ",", "std", ",", "rmse", ",", "r", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"Evaluation Result\\n MAE: {:.4f}; SD: {:.4f}; RMSE: {:.4f}; R: {:.4f};\"", ".", "format", "(", "\n", "mae", ",", "std", ",", "rmse", ",", "r", "\n", ")", "\n", ")", "\n", "return", "\n", "\n", "# Train model", "\n", "", "for", "epoch", "in", "trange", "(", "args", ".", "epochs", ",", "desc", "=", "\"Epoch\"", ")", ":", "\n", "        ", "train_loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimiser", ",", "device", ")", "\n", "\n", "# Evaluate on validation set", "\n", "val_loss", ",", "std", ",", "rmse", ",", "r", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "device", ")", "\n", "if", "args", ".", "wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "\n", "{", "\n", "\"train_loss\"", ":", "train_loss", ",", "\n", "\"val_loss\"", ":", "val_loss", ",", "\n", "\"std\"", ":", "std", ",", "\n", "\"rmse\"", ":", "rmse", ",", "\n", "\"r\"", ":", "r", ",", "\n", "}", "\n", ")", "\n", "\n", "", "is_best", "=", "val_loss", "<", "best_loss", "\n", "best_loss", "=", "min", "(", "val_loss", ",", "best_loss", ")", "\n", "\n", "if", "is_best", ":", "\n", "            ", "state", "=", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimiser\"", ":", "optimiser", ".", "state_dict", "(", ")", ",", "\n", "\"best_loss\"", ":", "best_loss", ",", "\n", "}", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"best_test_model.pth.tar\"", ")", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "\n", "print", "(", "\"\\nModel saved at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logging", ".", "info", "(", "\"Model saved at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# Logs", "\n", "", "if", "args", ".", "wandb", ":", "\n", "            ", "wandb", ".", "run", ".", "summary", "[", "\"val_loss\"", "]", "=", "best_loss", "\n", "\n", "", "print", "(", "\n", "\"\"\"Test Train Loss: {:.4f}, Test Val Loss/Best: {:.4f}/{:.4f}, \n\t\t\tTest SD: {:.4f}, Test RMSE: {:.4f}, Test R: {:.4f}\"\"\"", ".", "format", "(", "\n", "train_loss", ",", "val_loss", ",", "best_loss", ",", "std", ",", "rmse", ",", "r", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"({}/{}) Test Train Loss: {:.4f}, Test Val Loss/Best: {:.4f}/{:.4f}, Test SD: {:.4f}, Test RMSE: {:.4f}, Test R: {:.4f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "train_loss", ",", "val_loss", ",", "best_loss", ",", "std", ",", "rmse", ",", "r", "\n", ")", "\n", ")", "\n", "\n", "", "if", "args", ".", "wandb", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "\"test_output.log\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "wandb", ".", "run", ".", "dir", ",", "\"test_output.log\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.train": [[395, 425], ["utils.utils.AverageMeter", "model.eval", "tqdm.tqdm", "videos.to.to", "targets.reshape().to.reshape().to", "model", "criterion", "utils.utils.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "criterion.item", "videos.to.size", "targets.reshape().to.reshape"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "device", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", "\"Loss\"", ",", "\":.4e\"", ")", "\n", "\n", "\"\"\"\n    Switch to eval mode:\n    Under the protocol of linear classification on frozen features/models,\n    it is not legitimate to change any part of the pre-trained model.\n    BatchNorm in train mode may revise running mean/std (even if it receives\n    no gradient), which are part of the model parameters too.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "videos", ",", "targets", "in", "tqdm", "(", "train_loader", ",", "desc", "=", "\"Train Iteration\"", ")", ":", "\n", "# Process input", "\n", "        ", "videos", "=", "videos", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Compute output", "\n", "preds", "=", "model", "(", "videos", ")", "\n", "\n", "# Loss", "\n", "loss", "=", "criterion", "(", "preds", ",", "targets", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "videos", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Compute gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.None.test.validate": [[427, 473], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.utils.AverageMeter", "utils.utils.AverageMeter", "torch.MSELoss", "model.eval", "tqdm.tqdm", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.cat().flatten", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "numpy.sqrt", "scipy.stats.pearsonr", "videos.to.to", "targets.reshape().to.reshape().to", "model", "criterion", "nn.MSELoss.", "utils.utils.AverageMeter.update", "utils.utils.AverageMeter.update", "torch.cat().flatten.append", "torch.cat().flatten.append", "criterion.item", "targets.reshape().to.size", "mse_loss_func.item", "targets.reshape().to.size", "model.detach().cpu", "targets.reshape().to.detach().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "targets.reshape().to.reshape", "model.detach", "targets.reshape().to.detach"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "device", ")", ":", "\n", "    ", "maes", "=", "AverageMeter", "(", "\"MAE\"", ",", "\":.4e\"", ")", "\n", "mses", "=", "AverageMeter", "(", "\"MSE\"", ",", "\":.4e\"", ")", "\n", "all_pred", "=", "[", "]", "\n", "all_true", "=", "[", "]", "\n", "mse_loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# Switch to eval mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "videos", ",", "targets", "in", "tqdm", "(", "val_loader", ",", "desc", "=", "\"Val Iteration\"", ")", ":", "\n", "# Process input", "\n", "        ", "videos", "=", "videos", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Compute output", "\n", "preds", "=", "model", "(", "videos", ")", "\n", "\n", "# Loss", "\n", "mae", "=", "criterion", "(", "preds", ",", "targets", ")", "\n", "mse", "=", "mse_loss_func", "(", "preds", ",", "targets", ")", "\n", "\n", "maes", ".", "update", "(", "mae", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "mses", ".", "update", "(", "mse", ".", "item", "(", ")", ",", "targets", ".", "size", "(", "0", ")", ")", "\n", "\n", "all_pred", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "all_true", ".", "append", "(", "targets", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "all_pred", "=", "torch", ".", "cat", "(", "all_pred", ")", ".", "flatten", "(", ")", "\n", "all_true", "=", "torch", ".", "cat", "(", "all_true", ")", ".", "flatten", "(", ")", "\n", "\n", "# Mean and Std", "\n", "diff", "=", "all_pred", "-", "all_true", "\n", "mean", "=", "torch", ".", "mean", "(", "diff", ")", "\n", "std", "=", "torch", ".", "std", "(", "diff", ")", "\n", "\n", "# MSE", "\n", "mse_loss", "=", "mses", ".", "avg", "\n", "\n", "# RMSE", "\n", "rmse_loss", "=", "np", ".", "sqrt", "(", "mse_loss", ")", "\n", "\n", "r", ",", "_", "=", "pearsonr", "(", "all_true", ",", "all_pred", ")", "\n", "\n", "return", "maes", ".", "avg", ",", "std", ",", "rmse_loss", ",", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.MAHNOBHCIDataset.__init__": [[14, 46], ["str", "print", "print", "os.listdir", "os.listdir", "dataset.MAHNOBHCIDataset.files.extend", "os.listdir", "dataset.MAHNOBHCIDataset.files.extend", "os.path.join", "len", "os.path.join", "len", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "train", ":", "bool", ",", "transforms", ":", "Transformer", "=", "None", ",", "vid_frame", ":", "int", "=", "150", ",", "vid_frame_stride", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_path (str): Path to the dataset.\n            train (bool): `True` to use train split and `False` to use test split.\n            transforms (Transformer, optional): Data transformations to apply. Defaults to None.\n            vid_frame (int, optional): Number of video frames. Defaults to 150.\n            vid_frame_stride (int, optional): Number of video stride. Defaults to 1.\n        \"\"\"", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "vid_frame", "=", "vid_frame", "\n", "self", ".", "vid_frame_stride", "=", "vid_frame_stride", "\n", "\n", "self", ".", "test_fold", "=", "[", "str", "(", "x", ")", "for", "x", "in", "[", "3", ",", "4", ",", "9", ",", "11", ",", "17", ",", "27", "]", "]", "\n", "self", ".", "train_fold", "=", "[", "subject", "for", "subject", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "subject", "not", "in", "self", ".", "test_fold", "]", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "train", ":", "\n", "            ", "for", "subject", "in", "self", ".", "train_fold", ":", "\n", "                ", "file_name", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ")", ")", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"{} of videos in MAHNOB-HCI train split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "subject", "in", "self", ".", "test_fold", ":", "\n", "                ", "file_name", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ")", ")", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"{} of videos in MAHNOB-HCI test split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.MAHNOBHCIDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.MAHNOBHCIDataset.__getitem__": [[52, 63], ["isinstance", "numpy.load", "dataset.MAHNOBHCIDataset.transforms", "dataset.MAHNOBHCIDataset.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "with", "np", ".", "load", "(", "self", ".", "files", "[", "idx", "]", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", "[", "\"frames\"", "]", "[", ":", "self", ".", "vid_frame", ":", "self", ".", "vid_frame_stride", "]", "\n", "label", "=", "f", "[", "\"hr\"", "]", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "transforms", ",", "RandomStride", ")", ":", "\n", "            ", "data_", ",", "label_spatial", ",", "label_temporal", "=", "self", ".", "transforms", "(", "data", ")", "\n", "sample", "=", "(", "data_", ",", "label", ",", "label_spatial", ",", "label_temporal", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "(", "self", ".", "transforms", "(", "data", ")", ",", "label", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.VIPLHRDataset.__init__": [[68, 108], ["len", "print", "print", "range", "dataset.VIPLHRDataset.files.extend", "dataset.VIPLHRDataset.files.extend", "len", "len", "os.listdir", "os.path.join", "os.listdir", "os.path.join", "int", "int", "f.split", "f.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "train", ":", "bool", ",", "transforms", ":", "Transformer", "=", "None", ",", "vid_frame", ":", "int", "=", "150", ",", "vid_frame_stride", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            data_path (str): Path to the dataset.\n            train (bool): `True` to use train split and `False` to use test split.\n            transforms (Transformer, optional): Data transformations to apply. Defaults to None.\n            vid_frame (int, optional): Number of video frames. Defaults to 150.\n            vid_frame_stride (int, optional): Number of video stride. Defaults to 1.\n        \"\"\"", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "vid_frame", "=", "vid_frame", "\n", "self", ".", "vid_frame_stride", "=", "vid_frame_stride", "\n", "\n", "self", ".", "test_fold", "=", "[", "250", ",", "299", ",", "105", ",", "233", ",", "50", ",", "220", ",", "368", ",", "208", ",", "432", ",", "354", ",", "435", ",", "271", ",", "425", ",", "\n", "405", ",", "121", ",", "332", ",", "236", ",", "185", ",", "467", ",", "273", ",", "314", ",", "86", ",", "41", ",", "304", ",", "439", ",", "219", ",", "\n", "239", ",", "137", ",", "209", ",", "34", ",", "36", ",", "230", ",", "265", ",", "418", ",", "414", ",", "325", ",", "387", ",", "18", ",", "161", ",", "\n", "55", ",", "255", ",", "315", ",", "171", ",", "40", ",", "295", ",", "125", ",", "59", ",", "444", ",", "300", ",", "9", ",", "322", ",", "89", ",", "372", ",", "\n", "244", ",", "98", ",", "309", ",", "485", ",", "33", ",", "346", ",", "443", ",", "441", ",", "25", ",", "136", ",", "382", ",", "114", ",", "336", ",", "30", ",", "\n", "477", ",", "498", ",", "402", ",", "202", ",", "144", ",", "56", ",", "500", ",", "491", ",", "451", ",", "78", ",", "287", ",", "222", ",", "181", ",", "37", ",", "\n", "187", ",", "296", ",", "487", ",", "394", ",", "475", ",", "259", ",", "142", ",", "214", ",", "328", ",", "302", ",", "134", ",", "149", ",", "482", ",", "\n", "410", ",", "496", ",", "247", ",", "127", ",", "190", ",", "446", "]", "\n", "self", ".", "train_fold", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "501", ")", "if", "i", "not", "in", "self", ".", "test_fold", "]", "\n", "assert", "len", "(", "[", "x", "for", "x", "in", "self", ".", "test_fold", "if", "x", "in", "self", ".", "train_fold", "]", ")", "==", "0", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "train", ":", "\n", "            ", "for", "subject", "in", "self", ".", "train_fold", ":", "\n", "                ", "file_name", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "subject", "==", "int", "(", "f", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"{} of videos in VIPL-HR-V2 train split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "subject", "in", "self", ".", "test_fold", ":", "\n", "                ", "file_name", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "subject", "==", "int", "(", "f", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"{} of videos in VIPL-HR-V2 test split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.VIPLHRDataset.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.VIPLHRDataset.__getitem__": [[112, 123], ["isinstance", "numpy.load", "f[].astype", "dataset.VIPLHRDataset.transforms", "dataset.VIPLHRDataset.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "with", "np", ".", "load", "(", "self", ".", "files", "[", "idx", "]", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", "[", "\"frames\"", "]", "[", ":", "self", ".", "vid_frame", ":", "self", ".", "vid_frame_stride", "]", "\n", "label", "=", "f", "[", "\"hr\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "transforms", ",", "RandomStride", ")", ":", "\n", "            ", "data_", ",", "label_spatial", ",", "label_temporal", "=", "self", ".", "transforms", "(", "data", ")", "\n", "sample", "=", "(", "data_", ",", "label", ",", "label_spatial", ",", "label_temporal", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "(", "self", ".", "transforms", "(", "data", ")", ",", "label", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.UBFCDataset.__init__": [[128, 164], ["dataset.UBFCDataset.train_fold.sort", "dataset.UBFCDataset.test_fold.sort", "len", "print", "print", "print", "os.listdir", "os.listdir", "dataset.UBFCDataset.files.extend", "os.listdir", "dataset.UBFCDataset.files.extend", "os.path.join", "len", "os.path.join", "len", "os.path.join", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_path", ":", "str", ",", "train", ":", "bool", ",", "transforms", ":", "Transformer", "=", "None", ",", "vid_frame", ":", "int", "=", "150", ",", "vid_frame_stride", ":", "int", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                data_path (str): Path to the dataset.\n                train (bool): `True` to use train split and `False` to use test split.\n                transforms (Transformer, optional): Data transformations to apply. Defaults to None.\n                vid_frame (int, optional): Number of video frames. Defaults to 150.\n                vid_frame_stride (int, optional): Number of video stride. Defaults to 1.\n        \"\"\"", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "vid_frame", "=", "vid_frame", "\n", "self", ".", "vid_frame_stride", "=", "vid_frame_stride", "\n", "\n", "self", ".", "test_fold", "=", "[", "'subject15'", ",", "'subject17'", ",", "'subject3'", ",", "'subject34'", ",", "'subject42'", ",", "'subject48'", ",", "'subject49'", ",", "'subject5'", "]", "\n", "self", ".", "train_fold", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "data_path", ")", "if", "f", "not", "in", "self", ".", "test_fold", "]", "\n", "self", ".", "train_fold", ".", "sort", "(", ")", "\n", "self", ".", "test_fold", ".", "sort", "(", ")", "\n", "assert", "len", "(", "[", "x", "for", "x", "in", "self", ".", "test_fold", "if", "x", "in", "self", ".", "train_fold", "]", ")", "==", "0", "\n", "\n", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "train", ":", "\n", "            ", "for", "subject", "in", "self", ".", "train_fold", ":", "\n", "                ", "file_name", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ")", ")", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"{} of videos in UBFC-rPPG train split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "subject", "in", "self", ".", "test_fold", ":", "\n", "                ", "file_name", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ")", ")", "\n", "self", ".", "files", ".", "extend", "(", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "subject", ",", "f", ")", "for", "f", "in", "file_name", "]", ")", "\n", "\n", "", "print", "(", "\"Use subject {} as test set.\"", ".", "format", "(", "self", ".", "test_fold", ")", ")", "\n", "print", "(", "\"{} of videos in UBFC-rPPG test split\"", ".", "format", "(", "len", "(", "self", ".", "files", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.UBFCDataset.__len__": [[165, 167], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.dataset.UBFCDataset.__getitem__": [[168, 179], ["isinstance", "numpy.load", "f[].astype", "dataset.UBFCDataset.transforms", "dataset.UBFCDataset.transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "with", "np", ".", "load", "(", "self", ".", "files", "[", "idx", "]", ")", "as", "f", ":", "\n", "            ", "data", "=", "f", "[", "\"frames\"", "]", "[", ":", "self", ".", "vid_frame", ":", "self", ".", "vid_frame_stride", "]", "\n", "label", "=", "f", "[", "\"hr\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "transforms", ",", "RandomStride", ")", ":", "\n", "            ", "data_", ",", "label_spatial", ",", "label_temporal", "=", "self", ".", "transforms", "(", "data", ")", "\n", "sample", "=", "(", "data_", ",", "label", ",", "label_spatial", ",", "label_temporal", ")", "\n", "", "else", ":", "\n", "            ", "sample", "=", "(", "self", ".", "transforms", "(", "data", ")", ",", "label", ")", "\n", "", "return", "sample", "", "", "", ""]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.__init__": [[512, 516], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "\":f\"", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.reset": [[517, 522], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.update": [[523, 528], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.AverageMeter.__str__": [[529, 532], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "\"{name} {val\"", "+", "self", ".", "fmt", "+", "\"} ({avg\"", "+", "self", ".", "fmt", "+", "\"})\"", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_video_frame": [[31, 87], ["cv2.VideoCapture", "cv2.VideoCapture.open", "cv2.VideoCapture.get", "range", "cv2.VideoCapture.release", "cv2.VideoCapture.isOpened", "OSError", "int", "cv2.VideoCapture.read", "ValueError", "cv2.cvtColor", "frames.append", "os.path.join", "cv2.imwrite"], "function", ["None"], ["def", "extract_video_frame", "(", "\n", "video_path", ",", "frame_path", "=", "None", ",", "frame_range", "=", "(", "306", ",", "2135", ")", ",", "downsample", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Extract frames from the given video\n\n    Extract each frame from the given video file and store them into '.jpg' format. It\n    extracts every frame of the video. If the given frame path exsits, it overwrites\n    the contents if users choose that.\n\n    Args:\n            video_path (str): Required. The path of video file.\n\n            frame_path (str): Required. The path to store extracted frames. If the path exists, it tries to\n                                    remove it by asking the user.\n\n    Raises:\n            OSError: If the given video path is incorrect, or the video cannot be opened by\n                            Opencv.\n            ValueError: If the given specified range out of range\n    \"\"\"", "\n", "\n", "frames", "=", "[", "]", "\n", "count", "=", "0", "\n", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", ")", "\n", "cap", ".", "open", "(", "video_path", ")", "\n", "if", "not", "cap", ".", "isOpened", "(", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Failed to open input video\"", ")", "\n", "\n", "", "frame_count", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", "\n", "if", "frame_range", "is", "not", "None", ":", "\n", "        ", "if", "frame_range", "[", "1", "]", ">", "frame_count", ":", "\n", "            ", "raise", "ValueError", "(", "\"Requested frame range is longer than the video\"", ")", "\n", "\n", "", "", "for", "frameId", "in", "range", "(", "int", "(", "frame_count", ")", ")", ":", "\n", "        ", "ret", ",", "frame", "=", "cap", ".", "read", "(", ")", "\n", "\n", "if", "downsample", "and", "count", "%", "2", "==", "0", ":", "\n", "            ", "count", "+=", "1", "\n", "continue", "\n", "\n", "", "if", "frame_range", "is", "None", "or", "(", "\n", "frameId", ">=", "frame_range", "[", "0", "]", "and", "frameId", "<", "frame_range", "[", "1", "]", "\n", ")", ":", "\n", "            ", "if", "frame_path", "is", "None", ":", "\n", "                ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "else", ":", "\n", "                ", "fname", "=", "\"frame_{:0>4d}.png\"", ".", "format", "(", "frameId", ")", "\n", "ofname", "=", "os", ".", "path", ".", "join", "(", "frame_path", ",", "fname", ")", "\n", "ret", "=", "cv2", ".", "imwrite", "(", "ofname", ",", "frame", ")", "\n", "\n", "", "", "count", "+=", "1", "\n", "\n", "", "cap", ".", "release", "(", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.align_face": [[89, 107], ["numpy.empty", "enumerate", "fa.get_landmarks", "len", "numpy.zeros", "utils.cal_rois"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.cal_rois"], ["", "def", "align_face", "(", "frames", ",", "fa", ")", ":", "\n", "    ", "align_frames", "=", "np", ".", "empty", "(", "(", "len", "(", "frames", ")", ",", "7", ",", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "for", "idx", ",", "frame", "in", "enumerate", "(", "frames", ")", ":", "\n", "        ", "landmark", "=", "fa", ".", "get_landmarks", "(", "frame", ")", "\n", "\n", "# Crop frame based on landmarks", "\n", "if", "landmark", "is", "None", ":", "\n", "# If landmarks cannot be detected, reture a black frame", "\n", "            ", "frame", "=", "np", ".", "zeros", "(", "(", "7", ",", "64", ",", "64", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "", "else", ":", "\n", "# TODO: Smooth landmarks", "\n", "            ", "frame", "=", "cal_rois", "(", "frame", ",", "landmark", "[", "0", "]", ",", "(", "64", ",", "64", ")", ")", "# (n_roi, h, w, c)", "\n", "\n", "", "align_frames", "[", "idx", "]", "=", "frame", "\n", "\n", "", "return", "align_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_hr_from_ecg": [[109, 130], ["pyedflib.highlevel.read_edf", "hp.filter_signal", "scipy.signal.resample", "hp.process", "hp.scale_data", "len"], "function", ["None"], ["", "def", "extract_hr_from_ecg", "(", "file_path", ",", "channel_idx", ",", "begin", "=", "5", ",", "end", "=", "35", ")", ":", "\n", "    ", "import", "pyedflib", "\n", "import", "heartpy", "as", "hp", "\n", "\n", "signals", ",", "signals_headers", ",", "header", "=", "pyedflib", ".", "highlevel", ".", "read_edf", "(", "\n", "file_path", ",", "ch_nrs", "=", "channel_idx", ",", "verbose", "=", "False", "\n", ")", "\n", "\n", "sample_rate", "=", "signals_headers", "[", "0", "]", "[", "\"sample_rate\"", "]", "\n", "start_idx", "=", "begin", "*", "sample_rate", "\n", "end_idx", "=", "end", "*", "sample_rate", "\n", "data", "=", "signals", "[", "0", "]", "[", "start_idx", ":", "end_idx", "]", "\n", "filtered", "=", "hp", ".", "filter_signal", "(", "\n", "data", ",", "cutoff", "=", "0.05", ",", "sample_rate", "=", "sample_rate", ",", "filtertype", "=", "\"notch\"", "\n", ")", "\n", "resampled_data", "=", "resample", "(", "filtered", ",", "len", "(", "filtered", ")", "*", "2", ")", "\n", "\n", "# Run analysis", "\n", "wd", ",", "m", "=", "hp", ".", "process", "(", "hp", ".", "scale_data", "(", "resampled_data", ")", ",", "sample_rate", "*", "2", ")", "\n", "\n", "return", "m", "[", "\"bpm\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_mahnob_hci_dataset": [[132, 215], ["time.time", "os.listdir", "os.listdir.sort", "face_alignment.FaceAlignment", "tqdm.tqdm", "str", "print", "os.path.exists", "os.makedirs", "os.path.join", "datetime.timedelta", "os.listdir", "utils.extract_hr_from_ecg", "numpy.isnan", "utils.extract_video_frame", "utils.align_face", "xml.dom.minidom.parse", "os.path.join", "os.path.join", "numpy.savez", "print", "file.endswith", "OSError", "ValueError", "os.path.exists", "os.makedirs", "print", "os.path.join", "file.endswith", "open", "myfile.write", "sys.exc_info", "traceback.print_exception", "myfile.write", "time.time", "os.path.join", "file.endswith", "os.path.join", "xml.dom.minidom.parse.getElementsByTagName"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_hr_from_ecg", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_video_frame", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.align_face"], ["", "def", "extract_mahnob_hci_dataset", "(", "dataset_path", ",", "des_path_root", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "des_path_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "des_path_root", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "sessions", "=", "os", ".", "listdir", "(", "dataset_path", ")", "\n", "sessions", ".", "sort", "(", ")", "\n", "\n", "# Detect face landmarks model", "\n", "fa", "=", "face_alignment", ".", "FaceAlignment", "(", "\n", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "\n", "device", "=", "\"cuda:1\"", ",", "\n", "flip_input", "=", "False", ",", "\n", "face_detector", "=", "\"blazeface\"", ",", "\n", ")", "\n", "\n", "# Sessions", "\n", "for", "session", "in", "tqdm", "(", "sessions", ",", "desc", "=", "\"Extract MAHNOB-HCI Dataset\"", ")", ":", "\n", "        ", "session_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "session", ")", "\n", "\n", "video_file_path", "=", "None", "\n", "ecg_file_path", "=", "None", "\n", "mata_data_file_path", "=", "None", "\n", "\n", "try", ":", "\n", "# File paths", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "session_path", ")", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "\".avi\"", ")", ":", "\n", "                    ", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "session_path", ",", "file", ")", "\n", "", "elif", "file", ".", "endswith", "(", "\".bdf\"", ")", ":", "\n", "                    ", "ecg_file_path", "=", "os", ".", "path", ".", "join", "(", "session_path", ",", "file", ")", "\n", "", "elif", "file", ".", "endswith", "(", "\".xml\"", ")", ":", "\n", "                    ", "mata_data_file_path", "=", "os", ".", "path", ".", "join", "(", "session_path", ",", "file", ")", "\n", "\n", "", "", "if", "(", "\n", "video_file_path", "is", "None", "\n", "or", "ecg_file_path", "is", "None", "\n", "or", "mata_data_file_path", "is", "None", "\n", ")", ":", "\n", "                ", "raise", "OSError", "(", "\"Files are incomplete in {}\"", ".", "format", "(", "session_path", ")", ")", "\n", "\n", "# Extract ground truth HR", "\n", "", "hr_gt", "=", "extract_hr_from_ecg", "(", "ecg_file_path", ",", "EXG2_CHANNEL_IDX", ")", "\n", "if", "np", ".", "isnan", "(", "hr_gt", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Ground truth heart rate value is NaN\"", ")", "\n", "\n", "# Extract frames", "\n", "", "raw_frames", "=", "extract_video_frame", "(", "video_file_path", ")", "\n", "\n", "# Align face", "\n", "align_frames", "=", "align_face", "(", "raw_frames", ",", "fa", ")", "\n", "\n", "# Get subject ID", "\n", "doc", "=", "xml", ".", "dom", ".", "minidom", ".", "parse", "(", "mata_data_file_path", ")", "\n", "subject_id", "=", "doc", ".", "getElementsByTagName", "(", "\"subject\"", ")", "[", "0", "]", ".", "attributes", "[", "\"id\"", "]", ".", "value", "\n", "\n", "# Save file", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "des_path_root", ",", "subject_id", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "session", ")", "\n", "np", ".", "savez", "(", "file_path", ",", "frames", "=", "align_frames", ",", "hr", "=", "hr_gt", ")", "\n", "print", "(", "\n", "\"{} saved with frames: {}; HR: {}!\\n\"", ".", "format", "(", "\n", "file_path", ",", "align_frames", ".", "shape", ",", "hr_gt", "\n", ")", "\n", ")", "\n", "\n", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "            ", "raise", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "\"\\n\"", ")", "\n", "\n", "# Print origin trace info", "\n", "with", "open", "(", "\"./mahnob_hci_dataset_error.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "\"Session: {}\\n\"", ".", "format", "(", "session_path", ")", ")", "\n", "exc_info", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_exception", "(", "*", "exc_info", ",", "file", "=", "myfile", ")", "\n", "myfile", ".", "write", "(", "\"\\n\"", ")", "\n", "del", "exc_info", "\n", "\n", "", "", "", "duration", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "\"It takes {} time for extracting MAHNOB-HCI dataset\"", ".", "format", "(", "duration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_vipl_hr_dataset": [[217, 309], ["time.time", "os.listdir", "os.listdir.sort", "face_alignment.FaceAlignment", "tqdm.tqdm", "str", "print", "os.path.exists", "os.makedirs", "os.path.join", "datetime.timedelta", "os.listdir", "video_file_path.sort", "enumerate", "file.endswith", "OSError", "open", "csv.reader", "ValueError", "utils.extract_video_frame", "utils.align_face", "os.path.join", "numpy.savez", "print", "print", "video_file_path.append", "file.endswith", "len", "len", "len", "os.path.exists", "os.makedirs", "open", "myfile.write", "sys.exc_info", "traceback.print_exception", "myfile.write", "time.time", "os.path.join", "os.path.join", "vid.split", "vid.split"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_video_frame", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.align_face"], ["", "def", "extract_vipl_hr_dataset", "(", "dataset_path", ",", "des_path_root", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "des_path_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "des_path_root", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "subjects", "=", "os", ".", "listdir", "(", "dataset_path", ")", "\n", "subjects", ".", "sort", "(", ")", "\n", "\n", "# Detect face landmarks model", "\n", "fa", "=", "face_alignment", ".", "FaceAlignment", "(", "\n", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "\n", "device", "=", "\"cuda:1\"", ",", "\n", "flip_input", "=", "False", ",", "\n", "face_detector", "=", "\"blazeface\"", ",", "\n", ")", "\n", "\n", "# Subject", "\n", "for", "subject", "in", "tqdm", "(", "subjects", ",", "desc", "=", "\"Extract VIPL-HR-V2 Dataset\"", ")", ":", "\n", "        ", "subject_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "subject", ")", "\n", "\n", "video_file_path", "=", "[", "]", "\n", "mata_data_file_path", "=", "None", "\n", "\n", "try", ":", "\n", "# File paths", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "subject_path", ")", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "\".avi\"", ")", ":", "\n", "                    ", "video_file_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "subject_path", ",", "file", ")", ")", "\n", "", "elif", "file", ".", "endswith", "(", "\".csv\"", ")", ":", "\n", "                    ", "mata_data_file_path", "=", "os", ".", "path", ".", "join", "(", "subject_path", ",", "file", ")", "\n", "\n", "", "", "if", "len", "(", "video_file_path", ")", "!=", "5", "or", "mata_data_file_path", "is", "None", ":", "\n", "                ", "raise", "OSError", "(", "\"Files are incomplete in {}\"", ".", "format", "(", "subject_path", ")", ")", "\n", "", "video_file_path", ".", "sort", "(", ")", "\n", "\n", "# Extract ground truth HR", "\n", "hr_gt", "=", "None", "\n", "fps", "=", "None", "\n", "with", "open", "(", "mata_data_file_path", ")", "as", "f", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\",\"", ")", "\n", "line_count", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                    ", "if", "line_count", "==", "1", ":", "\n", "                        ", "hr_gt", "=", "row", "[", "1", ":", "]", "\n", "", "elif", "line_count", "==", "2", ":", "\n", "                        ", "fps", "=", "row", "[", "1", ":", "]", "\n", "\n", "", "line_count", "+=", "1", "\n", "\n", "", "", "if", "len", "(", "hr_gt", ")", "!=", "5", "or", "len", "(", "fps", ")", "!=", "5", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Ground truth heart rate value or FPS value is INCORRECT!\"", "\n", ")", "\n", "\n", "", "for", "idx", ",", "vid", "in", "enumerate", "(", "video_file_path", ")", ":", "\n", "# Extract frames", "\n", "                ", "raw_frames", "=", "extract_video_frame", "(", "\n", "vid", ",", "frame_range", "=", "None", ",", "downsample", "=", "False", "\n", ")", "\n", "\n", "# Align face", "\n", "align_frames", "=", "align_face", "(", "raw_frames", ",", "fa", ")", "\n", "\n", "# Save file", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "des_path_root", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "des_path_root", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "des_path_root", ",", "\n", "\"{}_{}\"", ".", "format", "(", "vid", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", ",", "vid", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "6", "]", ")", ",", "\n", ")", "\n", "np", ".", "savez", "(", "file_path", ",", "frames", "=", "align_frames", ",", "hr", "=", "hr_gt", "[", "idx", "]", ",", "fps", "=", "fps", "[", "idx", "]", ")", "\n", "print", "(", "\n", "\"{} saved with frames: {}; HR: {}; FPS: {}!\\n\"", ".", "format", "(", "\n", "file_path", ",", "align_frames", ".", "shape", ",", "hr_gt", "[", "idx", "]", ",", "fps", "[", "idx", "]", "\n", ")", "\n", ")", "\n", "\n", "", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "            ", "raise", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "\"\\n\"", ")", "\n", "\n", "# Print origin trace info", "\n", "with", "open", "(", "\"./vipl_hr_v2_dataset_error.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "\"Session: {}\\n\"", ".", "format", "(", "subject_path", ")", ")", "\n", "exc_info", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_exception", "(", "*", "exc_info", ",", "file", "=", "myfile", ")", "\n", "myfile", ".", "write", "(", "\"\\n\"", ")", "\n", "del", "exc_info", "\n", "\n", "", "", "", "duration", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "\"It takes {} time for extracting VIPL-HR-V2 dataset\"", ".", "format", "(", "duration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_ubfc_dataset": [[311, 397], ["time.time", "os.listdir", "os.listdir.sort", "face_alignment.FaceAlignment", "tqdm.tqdm", "str", "print", "os.path.exists", "os.makedirs", "os.path.join", "datetime.timedelta", "os.listdir", "range", "file.endswith", "OSError", "open", "ValueError", "len", "utils.extract_video_frame", "utils.align_face", "numpy.mean", "os.path.join", "os.path.join", "numpy.savez", "print", "print", "os.path.join", "file.endswith", "os.path.exists", "os.makedirs", "str", "open", "myfile.write", "sys.exc_info", "traceback.print_exception", "myfile.write", "time.time", "os.path.join", "float", "f.readlines", "line.split"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.extract_video_frame", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.align_face"], ["", "def", "extract_ubfc_dataset", "(", "dataset_path", ",", "des_path_root", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "des_path_root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "des_path_root", ")", "\n", "\n", "", "start", "=", "time", ".", "time", "(", ")", "\n", "subjects", "=", "os", ".", "listdir", "(", "dataset_path", ")", "\n", "subjects", ".", "sort", "(", ")", "\n", "\n", "# Detect face landmarks model", "\n", "fa", "=", "face_alignment", ".", "FaceAlignment", "(", "\n", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "\n", "device", "=", "\"cuda:1\"", ",", "\n", "flip_input", "=", "False", ",", "\n", "face_detector", "=", "\"blazeface\"", ",", "\n", ")", "\n", "\n", "# Subject", "\n", "for", "subject", "in", "tqdm", "(", "subjects", ",", "desc", "=", "\"Extract UBFC-rPPG Dataset\"", ")", ":", "\n", "        ", "subject_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "subject", ")", "\n", "\n", "video_file_path", "=", "None", "\n", "mata_data_file_path", "=", "None", "\n", "\n", "try", ":", "\n", "# File paths", "\n", "            ", "for", "file", "in", "os", ".", "listdir", "(", "subject_path", ")", ":", "\n", "                ", "if", "file", ".", "endswith", "(", "\".avi\"", ")", ":", "\n", "                    ", "video_file_path", "=", "os", ".", "path", ".", "join", "(", "subject_path", ",", "file", ")", "\n", "", "elif", "file", ".", "endswith", "(", "\".txt\"", ")", ":", "\n", "                    ", "mata_data_file_path", "=", "os", ".", "path", ".", "join", "(", "subject_path", ",", "file", ")", "\n", "\n", "", "", "if", "video_file_path", "is", "None", "or", "mata_data_file_path", "is", "None", ":", "\n", "                ", "raise", "OSError", "(", "\"Files are incomplete in {}\"", ".", "format", "(", "subject_path", ")", ")", "\n", "\n", "# Extract ground truth HR", "\n", "", "gtHR", "=", "None", "\n", "with", "open", "(", "mata_data_file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "gtdata", "=", "[", "[", "float", "(", "l", ")", "for", "l", "in", "line", ".", "split", "(", ")", "]", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "gtHR", "=", "gtdata", "[", "1", "]", "\n", "\n", "", "if", "gtHR", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"Ground truth heart rate value value is INCORRECT!\"", ")", "\n", "\n", "", "n_vid", "=", "len", "(", "gtHR", ")", "//", "150", "\n", "\n", "for", "i", "in", "range", "(", "n_vid", ")", ":", "\n", "                ", "start", "=", "i", "*", "150", "\n", "end", "=", "(", "i", "+", "1", ")", "*", "150", "\n", "# Extract frames", "\n", "raw_frames", "=", "extract_video_frame", "(", "\n", "video_file_path", ",", "frame_range", "=", "(", "start", ",", "end", ")", ",", "downsample", "=", "False", "\n", ")", "\n", "\n", "# Align face", "\n", "align_frames", "=", "align_face", "(", "raw_frames", ",", "fa", ")", "\n", "\n", "# Calculate gt", "\n", "cur_gtHR", "=", "np", ".", "mean", "(", "gtHR", "[", "start", ":", "end", "]", ")", "\n", "\n", "# Save file", "\n", "des_path", "=", "os", ".", "path", ".", "join", "(", "des_path_root", ",", "subject", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "des_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "des_path", ")", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "des_path", ",", "str", "(", "i", ")", ")", "\n", "np", ".", "savez", "(", "file_path", ",", "frames", "=", "align_frames", ",", "hr", "=", "cur_gtHR", ")", "\n", "print", "(", "\n", "\"{} saved with frames: {}; HR: {}!\\n\"", ".", "format", "(", "\n", "file_path", ",", "align_frames", ".", "shape", ",", "cur_gtHR", "\n", ")", "\n", ")", "\n", "\n", "", "", "except", "(", "KeyboardInterrupt", ",", "SystemExit", ")", ":", "\n", "            ", "raise", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ",", "\"\\n\"", ")", "\n", "\n", "# Print origin trace info", "\n", "with", "open", "(", "\"./ubfc_rppg_dataset_error.txt\"", ",", "\"a\"", ")", "as", "myfile", ":", "\n", "                ", "myfile", ".", "write", "(", "\"Session: {}\\n\"", ".", "format", "(", "subject_path", ")", ")", "\n", "exc_info", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_exception", "(", "*", "exc_info", ",", "file", "=", "myfile", ")", "\n", "myfile", ".", "write", "(", "\"\\n\"", ")", "\n", "del", "exc_info", "\n", "\n", "", "", "", "duration", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "print", "(", "\"It takes {} time for extracting UBFC-rPPG dataset\"", ".", "format", "(", "duration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask": [[399, 422], ["skimage.draw.polygon", "numpy.zeros", "PIL.Image.fromarray", "numpy.array", "Image.fromarray.resize", "min", "max", "min", "max"], "function", ["None"], ["", "def", "poly2mask", "(", "vertex_row_coords", ",", "vertex_col_coords", ",", "frame", ",", "crop_shape", ")", ":", "\n", "    ", "h", ",", "w", ",", "c", "=", "frame", ".", "shape", "\n", "fill_row_coords", ",", "fill_col_coords", "=", "draw", ".", "polygon", "(", "\n", "vertex_row_coords", ",", "vertex_col_coords", ",", "(", "h", ",", "w", ")", "\n", ")", "\n", "cropped_frame", "=", "np", ".", "zeros", "(", "frame", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "fill_row_coords", ".", "size", "==", "0", "or", "fill_col_coords", ".", "size", "==", "0", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "cropped_frame", "[", "fill_row_coords", ",", "fill_col_coords", "]", "=", "frame", "[", "\n", "fill_row_coords", ",", "fill_col_coords", "\n", "]", "\n", "cropped_frame", "=", "cropped_frame", "[", "\n", "min", "(", "fill_row_coords", ")", ":", "max", "(", "fill_row_coords", ")", ",", "\n", "min", "(", "fill_col_coords", ")", ":", "max", "(", "fill_col_coords", ")", ",", "\n", "]", "\n", "\n", "# Resize frame with range(0, 255) in uint8 format", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "cropped_frame", ")", "\n", "cropped_frame", "=", "np", ".", "array", "(", "img", ".", "resize", "(", "crop_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "return", "cropped_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.cal_rois": [[424, 474], ["numpy.empty", "numpy.mean", "numpy.mean", "numpy.linalg.norm", "numpy.concatenate", "utils.poly2mask", "utils.poly2mask", "utils.poly2mask", "utils.poly2mask", "utils.poly2mask", "utils.poly2mask", "utils.poly2mask", "scipy.spatial.ConvexHull", "numpy.mean", "numpy.mean", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.poly2mask"], ["", "def", "cal_rois", "(", "frame", ",", "landmark", ",", "crop_shape", ")", ":", "\n", "    ", "ROI_face", "=", "ConvexHull", "(", "landmark", ")", ".", "vertices", "\n", "ROI_forehead", "=", "[", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", "]", "\n", "ROI_cheek_left1", "=", "[", "0", ",", "1", ",", "2", ",", "31", ",", "41", ",", "0", "]", "\n", "ROI_cheek_left2", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "48", ",", "31", ",", "2", "]", "\n", "ROI_cheek_right1", "=", "[", "16", ",", "15", ",", "14", ",", "35", ",", "46", ",", "16", "]", "\n", "ROI_cheek_right2", "=", "[", "14", ",", "13", ",", "12", ",", "11", ",", "54", ",", "35", ",", "14", "]", "\n", "ROI_mouth", "=", "[", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "54", ",", "55", ",", "56", ",", "57", ",", "58", ",", "59", ",", "48", ",", "5", "]", "\n", "\n", "all_ROIs", "=", "np", ".", "empty", "(", "(", "7", ",", "crop_shape", "[", "0", "]", ",", "crop_shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "forehead", "=", "landmark", "[", "ROI_forehead", ",", ":", "]", "\n", "left_eye", "=", "np", ".", "mean", "(", "landmark", "[", "36", ":", "42", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "right_eye", "=", "np", ".", "mean", "(", "landmark", "[", "42", ":", "48", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "eye_distance", "=", "np", ".", "linalg", ".", "norm", "(", "left_eye", "-", "right_eye", ")", "\n", "tmp", "=", "(", "\n", "np", ".", "mean", "(", "landmark", "[", "17", ":", "22", ",", ":", "]", ",", "axis", "=", "0", ")", "+", "np", ".", "mean", "(", "landmark", "[", "22", ":", "27", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", ")", "/", "2", "-", "(", "left_eye", "+", "right_eye", ")", "/", "2", "\n", "tmp", "=", "eye_distance", "/", "np", ".", "linalg", ".", "norm", "(", "tmp", ")", "*", "0.6", "*", "tmp", "\n", "ROI_forehead", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "forehead", ",", "\n", "forehead", "[", "np", ".", "newaxis", ",", "-", "1", ",", ":", "]", "+", "tmp", ",", "\n", "forehead", "[", "np", ".", "newaxis", ",", "0", ",", ":", "]", "+", "tmp", ",", "\n", "forehead", "[", "np", ".", "newaxis", ",", "0", ",", ":", "]", ",", "\n", "]", ",", "\n", "axis", "=", "0", ",", "\n", ")", "\n", "\n", "all_ROIs", "[", "0", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_face", ",", "1", "]", ",", "landmark", "[", "ROI_face", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "all_ROIs", "[", "1", "]", "=", "poly2mask", "(", "ROI_forehead", "[", ":", ",", "1", "]", ",", "ROI_forehead", "[", ":", ",", "0", "]", ",", "frame", ",", "crop_shape", ")", "\n", "all_ROIs", "[", "2", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_cheek_left1", ",", "1", "]", ",", "landmark", "[", "ROI_cheek_left1", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "all_ROIs", "[", "3", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_cheek_left2", ",", "1", "]", ",", "landmark", "[", "ROI_cheek_left2", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "all_ROIs", "[", "4", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_cheek_right1", ",", "1", "]", ",", "landmark", "[", "ROI_cheek_right1", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "all_ROIs", "[", "5", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_cheek_right2", ",", "1", "]", ",", "landmark", "[", "ROI_cheek_right2", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "all_ROIs", "[", "6", "]", "=", "poly2mask", "(", "\n", "landmark", "[", "ROI_mouth", ",", "1", "]", ",", "landmark", "[", "ROI_mouth", ",", "0", "]", ",", "frame", ",", "crop_shape", "\n", ")", "\n", "\n", "return", "all_ROIs", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.write_config_to_file": [[476, 489], ["open", "vars", "os.path.join", "file.write", "str", "str", "getattr"], "function", ["None"], ["", "def", "write_config_to_file", "(", "config", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"Record and save current parameter settings\n    Parameters\n    ----------\n    config : object of class `Parameters`\n            Object of class `Parameters`\n    save_path : str\n            Path to save the file\n    \"\"\"", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "arg", "in", "vars", "(", "config", ")", ":", "\n", "            ", "file", ".", "write", "(", "str", "(", "arg", ")", "+", "\": \"", "+", "str", "(", "getattr", "(", "config", ",", "arg", ")", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.utils.accuracy": [[491, 507], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].flatten().float().sum", "res.append", "correct[].flatten().float().sum.mul_", "target.view", "correct[].flatten().float", "correct[].flatten"], "function", ["None"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "flatten", "(", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.Transformer.__init__": [[10, 25], ["super().__init__", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "augmentation.ToTensor", "augmentation.ToTensor", "augmentation.Normalise"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__"], ["def", "__init__", "(", "self", ",", "transform", ":", "list", ",", "mean", ":", "float", ",", "std", ":", "float", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            transform (list): List of augmentations to apply.\n            mean (float): Mean value for data normalisation.\n            std (float): Std value for data normalisation.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "mean", "is", "None", "or", "std", "is", "None", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "*", "transform", ",", "ToTensor", "(", ")", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "*", "transform", ",", "ToTensor", "(", ")", ",", "Normalise", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.Transformer.__call__": [[27, 29], ["augmentation.Transformer.transform"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "vid_seq", ")", ":", "\n", "        ", "return", "self", ".", "transform", "(", "vid_seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.RandomROI.__init__": [[38, 43], ["min", "max"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "roi_list", ")", ":", "\n", "        ", "self", ".", "roi_list", "=", "roi_list", "\n", "assert", "(", "\n", "min", "(", "self", ".", "roi_list", ")", ">=", "0", "and", "max", "(", "self", ".", "roi_list", ")", "<=", "6", "\n", ")", ",", "\"Invalid ROI list range!\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.RandomROI.__call__": [[44, 49], ["torch.randint().item", "torch.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "vid_seq", ")", ":", "\n", "        ", "self", ".", "roi_idx", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "roi_list", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "idx", "=", "self", ".", "roi_list", "[", "self", ".", "roi_idx", "]", "\n", "\n", "return", "vid_seq", "[", ":", ",", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.RandomStride.__init__": [[55, 61], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "stride_list", ":", "list", ",", "n_frame", ":", "int", ",", "base_transform", ":", "transforms", ".", "Compose", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "stride_list", "=", "stride_list", "\n", "self", ".", "n_frame", "=", "n_frame", "\n", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.RandomStride.__call__": [[62, 87], ["torch.randperm", "torch.empty", "torch.empty", "torch.randint().item", "augmentation.RandomStride.base_transform", "strides.append", "rois.append", "torch.randint", "len", "isinstance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "vid_seq", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", ",", "c", "=", "vid_seq", ".", "shape", "\n", "vid_aug", "=", "[", "\n", "torch", ".", "empty", "(", "(", "self", ".", "n_frame", ",", "h", ",", "w", ",", "c", ")", ")", ",", "\n", "torch", ".", "empty", "(", "(", "self", ".", "n_frame", ",", "h", ",", "w", ",", "c", ")", ")", ",", "\n", "]", "\n", "fn_idx", "=", "torch", ".", "randperm", "(", "2", ")", "\n", "strides", "=", "[", "]", "\n", "rois", "=", "[", "]", "\n", "\n", "for", "fn_id", "in", "fn_idx", ":", "\n", "            ", "idx", "=", "torch", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "stride_list", ")", ",", "(", "1", ",", ")", ")", ".", "item", "(", ")", "\n", "stride", "=", "self", ".", "stride_list", "[", "idx", "]", "\n", "assert", "(", "vid_seq", ".", "shape", "[", "0", "]", "//", "stride", ")", ">=", "self", ".", "n_frame", "\n", "\n", "vid_aug", "[", "fn_id", "]", "=", "self", ".", "base_transform", "(", "vid_seq", "[", ":", ":", "stride", "]", "[", ":", "self", ".", "n_frame", "]", ")", "\n", "roi_idx", "=", "[", "\n", "t", ".", "roi_idx", "\n", "for", "t", "in", "self", ".", "base_transform", ".", "transform", ".", "transforms", "\n", "if", "isinstance", "(", "t", ",", "RandomROI", ")", "\n", "]", "[", "0", "]", "\n", "strides", ".", "append", "(", "idx", ")", "\n", "rois", ".", "append", "(", "roi_idx", ")", "\n", "\n", "", "return", "vid_aug", ",", "rois", ",", "strides", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.Normalise.__init__": [[93, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.Normalise.__call__": [[97, 100], ["torch.stack", "torchvision.transforms.functional.normalize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "vid_seq", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "\n", "[", "F", ".", "normalize", "(", "img", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "for", "img", "in", "vid_seq", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.utils.augmentation.ToTensor.__call__": [[104, 106], ["torch.stack", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "vid_seq", ")", ":", "\n", "        ", "return", "torch", ".", "stack", "(", "[", "F", ".", "to_tensor", "(", "img", ")", "for", "img", "in", "vid_seq", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.BasicBlock.__init__": [[26, 38], ["torch.Module.__init__", "resnet3d.conv3x3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet3d.conv3x3x3", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv3x3x3", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv3x3x3"], ["def", "__init__", "(", "\n", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm3d", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "in_planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.BasicBlock.forward": [[39, 56], ["resnet3d.BasicBlock.conv1", "resnet3d.BasicBlock.bn1", "resnet3d.BasicBlock.relu", "resnet3d.BasicBlock.conv2", "resnet3d.BasicBlock.bn2", "resnet3d.BasicBlock.relu", "resnet3d.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.Bottleneck.__init__": [[61, 75], ["torch.Module.__init__", "resnet3d.conv1x1x1", "norm_layer", "resnet3d.conv3x3x3", "norm_layer", "resnet3d.conv1x1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv1x1x1", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv3x3x3", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv1x1x1"], ["def", "__init__", "(", "\n", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "norm_layer", "=", "nn", ".", "BatchNorm3d", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "conv1x1x1", "(", "in_planes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.Bottleneck.forward": [[76, 97], ["resnet3d.Bottleneck.conv1", "resnet3d.Bottleneck.bn1", "resnet3d.Bottleneck.relu", "resnet3d.Bottleneck.conv2", "resnet3d.Bottleneck.bn2", "resnet3d.Bottleneck.relu", "resnet3d.Bottleneck.conv3", "resnet3d.Bottleneck.bn3", "resnet3d.Bottleneck.relu", "resnet3d.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet.__init__": [[100, 157], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet3d.ResNet._make_layer", "resnet3d.ResNet._make_layer", "resnet3d.ResNet._make_layer", "resnet3d.ResNet._make_layer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "resnet3d.ResNet.modules", "int", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._make_layer", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._make_layer", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._make_layer", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "block_inplanes", ",", "\n", "n_input_channels", "=", "3", ",", "\n", "conv1_t_size", "=", "7", ",", "\n", "conv1_t_stride", "=", "1", ",", "\n", "no_max_pool", "=", "False", ",", "\n", "shortcut_type", "=", "\"B\"", ",", "\n", "widen_factor", "=", "1.0", ",", "\n", "n_classes", "=", "400", ",", "\n", "dropout", "=", "0.0", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm3d", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "block_inplanes", "=", "[", "int", "(", "x", "*", "widen_factor", ")", "for", "x", "in", "block_inplanes", "]", "\n", "\n", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "in_planes", "=", "block_inplanes", "[", "0", "]", "\n", "self", ".", "no_max_pool", "=", "no_max_pool", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "n_input_channels", ",", "\n", "self", ".", "in_planes", ",", "\n", "kernel_size", "=", "(", "conv1_t_size", ",", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "conv1_t_stride", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "conv1_t_size", "//", "2", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "in_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "block_inplanes", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "shortcut_type", "\n", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "block_inplanes", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "block_inplanes", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "block_inplanes", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", "\n", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "dp", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "block_inplanes", "[", "3", "]", "*", "block", ".", "expansion", ",", "n_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._downsample_basic_block": [[158, 169], ["torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "zero_pads.cuda.cuda.cuda", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "", "def", "_downsample_basic_block", "(", "self", ",", "x", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "zeros", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "out", ".", "size", "(", "4", ")", "\n", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet._make_layer": [[170, 201], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "resnet3d.conv1x1x1", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv1x1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "\"A\"", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "self", ".", "_downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1x1", "(", "self", ".", "in_planes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "in_planes", "=", "self", ".", "in_planes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.ResNet.forward": [[202, 221], ["resnet3d.ResNet.conv1", "resnet3d.ResNet.bn1", "resnet3d.ResNet.relu", "resnet3d.ResNet.layer1", "resnet3d.ResNet.layer2", "resnet3d.ResNet.layer3", "resnet3d.ResNet.layer4", "resnet3d.ResNet.avgpool", "resnet3d.ResNet.view", "resnet3d.ResNet.dp", "resnet3d.ResNet.fc", "resnet3d.ResNet.maxpool", "resnet3d.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "not", "self", ".", "no_max_pool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "dp", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes": [[9, 11], ["None"], "function", ["None"], ["def", "get_inplanes", "(", ")", ":", "\n", "    ", "return", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv3x3x3": [[13, 16], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.conv1x1x1": [[19, 21], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv1x1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.generate_model": [[223, 242], ["resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes", "resnet3d.ResNet", "resnet3d.get_inplanes"], "function", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.get_inplanes"], ["", "", "def", "generate_model", "(", "model_depth", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "model_depth", "in", "[", "10", ",", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "\n", "if", "model_depth", "==", "10", ":", "\n", "        ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "18", ":", "\n", "        ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "34", ":", "\n", "        ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "50", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "101", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "152", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "", "elif", "model_depth", "==", "200", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "get_inplanes", "(", ")", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.slf_rpm.SLF_RPM.__init__": [[13, 46], ["torch.Module.__init__", "resnet3d.generate_model", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.generate_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model_depth", ":", "str", ",", "\n", "n_class", ":", "int", ",", "\n", "temperature", ":", "float", ",", "\n", "n_spatial", ":", "int", ",", "\n", "n_temporal", ":", "int", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            model_depth (str): Depth of backbone model.\n            n_class (int): Number of prediction classes.\n            temperature (float): Hyperparameter for `tau`\n            n_spatial (int): Number of ROIs for spatial augmentation.\n            n_temporal (int): Number of strides for temporal augmentation.\n        \"\"\"", "\n", "super", "(", "SLF_RPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n", "# Backbone", "\n", "self", ".", "encoder_q", "=", "generate_model", "(", "model_depth", "=", "model_depth", ",", "n_classes", "=", "n_class", ")", "\n", "\n", "# Projection head", "\n", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "proj_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "dim_mlp", ",", "n_class", ")", "\n", ")", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "# Augmentation classifier", "\n", "self", ".", "spatial_classifer", "=", "nn", ".", "Linear", "(", "dim_mlp", ",", "n_spatial", ")", "\n", "self", ".", "temporal_classifer", "=", "nn", ".", "Linear", "(", "dim_mlp", ",", "n_temporal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.slf_rpm.SLF_RPM.forward": [[47, 103], ["torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "slf_rpm.SLF_RPM.encoder_q", "slf_rpm.SLF_RPM.spatial_classifer", "slf_rpm.SLF_RPM.temporal_classifer", "slf_rpm.SLF_RPM.proj_head", "torch.normalize", "torch.normalize", "torch.normalize", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vids", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            vids (Tensor): Inputs with shape of (2*n_video, n_frame, n_channel, height, width).\n\n        Returns:\n            A tuple containing:\n                Logits of current mini-batch.\n\n                Indicator for positive/negative sameples.\n\n                A list of predicted spatial augmentations.\n\n                A list of predicted temporal augmentations.\n        \"\"\"", "\n", "x", "=", "torch", ".", "cat", "(", "vids", ",", "axis", "=", "0", ")", ".", "transpose", "(", "\n", "1", ",", "2", "\n", ")", "# (2*n_video, n_channel, n_frame, height, width)", "\n", "\n", "# Compute video features", "\n", "q", "=", "self", ".", "encoder_q", "(", "x", ")", "# (2*n_video, features)", "\n", "\n", "# Predict augmentation class", "\n", "pred_spatial", "=", "self", ".", "spatial_classifer", "(", "q", ")", "\n", "pred_temporal", "=", "self", ".", "temporal_classifer", "(", "q", ")", "\n", "\n", "# Compute similarity", "\n", "q", "=", "self", ".", "proj_head", "(", "q", ")", "# # (2*n_video, proj_features)", "\n", "q", "=", "F", ".", "normalize", "(", "q", ",", "dim", "=", "-", "1", ")", "\n", "\n", "feature_a", "=", "q", "[", "0", ":", "q", ".", "shape", "[", "0", "]", "//", "2", "]", "# (n_video, features)", "\n", "feature_b", "=", "q", "[", "q", ".", "shape", "[", "0", "]", "//", "2", ":", "q", ".", "shape", "[", "0", "]", "]", "# (n_video, features)", "\n", "\n", "# Compute positive and negative logits", "\n", "batch_size", "=", "feature_a", ".", "shape", "[", "0", "]", "\n", "masks", "=", "F", ".", "one_hot", "(", "\n", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "feature_a", ".", "device", ")", ",", "num_classes", "=", "batch_size", "\n", ")", "# (n_video, features)", "\n", "\n", "logits_aa", "=", "torch", ".", "matmul", "(", "feature_a", ",", "feature_a", ".", "T", ")", "# (n_video, n_video)", "\n", "logits_aa", "=", "logits_aa", "-", "masks", "*", "LARGE_NUM", "\n", "logits_bb", "=", "torch", ".", "matmul", "(", "feature_b", ",", "feature_b", ".", "T", ")", "# (n_video, n_video)", "\n", "logits_bb", "=", "logits_bb", "-", "masks", "*", "LARGE_NUM", "\n", "logits_ab", "=", "torch", ".", "matmul", "(", "feature_a", ",", "feature_b", ".", "T", ")", "# (n_video, n_video)", "\n", "logits_ba", "=", "torch", ".", "matmul", "(", "feature_b", ",", "feature_a", ".", "T", ")", "# (n_video, n_video)", "\n", "\n", "logits_a", "=", "torch", ".", "cat", "(", "[", "logits_ab", ",", "logits_aa", "]", ",", "dim", "=", "1", ")", "# (n_video, 2*n_video)", "\n", "logits_b", "=", "torch", ".", "cat", "(", "[", "logits_ba", ",", "logits_bb", "]", ",", "dim", "=", "1", ")", "# (n_video, 2*n_video)", "\n", "logits", "=", "(", "\n", "torch", ".", "cat", "(", "[", "logits_a", ",", "logits_b", "]", ",", "axis", "=", "0", ")", "/", "self", ".", "temperature", "\n", ")", "# (2*n_video, 2*n_video)", "\n", "\n", "labels", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "feature_a", ".", "device", ")", "# (n_video,)", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "labels", ",", "labels", "]", ",", "axis", "=", "0", ")", "# (2*n_video,)", "\n", "\n", "return", "logits", ",", "labels", ",", "pred_spatial", ",", "pred_temporal", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__": [[10, 31], ["torch.Module.__init__", "resnet3d.generate_model"], "methods", ["home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.__init__", "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.resnet3d.generate_model"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model_depth", ":", "int", ",", "\n", "n_class", ":", "int", ",", "\n", "dropout", ":", "float", "=", "0.0", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm3d", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Args:\n            model_depth (int): Depth of classifier model.\n            n_class (int): Number of prediction classes.\n            dropout (float, optional): Dropout rate for the classifier model. Defaults to 0.0.\n            norm_layer (optional): Normalisation layer for classifier model. Defaults to `nn.BatchNorm3d`.\n        \"\"\"", "\n", "super", "(", "LinearClsResNet3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder_q", "=", "generate_model", "(", "\n", "model_depth", "=", "model_depth", ",", "\n", "n_classes", "=", "n_class", ",", "\n", "dropout", "=", "dropout", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Dylan-H-Wang_SLF-RPM.models.classifier.LinearClsResNet3D.forward": [[33, 45], ["x.transpose.transpose.transpose", "classifier.LinearClsResNet3D.encoder_q"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): Input with shape of (n_video, n_frame, n_channel, height, width).\n\n        Returns:\n            Tensor: Results with shape of (n_video, n_class).\n        \"\"\"", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "# (n_video, n_channel, n_frame, height, width)", "\n", "preds", "=", "self", ".", "encoder_q", "(", "x", ")", "# (n_video, n_class)", "\n", "return", "preds", "\n", "", "", ""]]}