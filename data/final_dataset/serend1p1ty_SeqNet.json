{"home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.demo.visualize_result": [[15, 41], ["matplotlib.subplots", "ax.imshow", "matplotlib.axis", "zip", "matplotlib.tight_layout", "fig.savefig", "matplotlib.show", "matplotlib.close", "matplotlib.imread", "ax.add_patch", "ax.add_patch", "ax.text", "img_path.replace", "matplotlib.Rectangle", "matplotlib.Rectangle", "dict"], "function", ["None"], ["def", "visualize_result", "(", "img_path", ",", "detections", ",", "similarities", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "16", ",", "9", ")", ")", "\n", "ax", ".", "imshow", "(", "plt", ".", "imread", "(", "img_path", ")", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "for", "detection", ",", "sim", "in", "zip", "(", "detections", ",", "similarities", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "detection", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "\n", "(", "x1", ",", "y1", ")", ",", "x2", "-", "x1", ",", "y2", "-", "y1", ",", "fill", "=", "False", ",", "edgecolor", "=", "\"#4CAF50\"", ",", "linewidth", "=", "3.5", "\n", ")", "\n", ")", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "(", "x1", ",", "y1", ")", ",", "x2", "-", "x1", ",", "y2", "-", "y1", ",", "fill", "=", "False", ",", "edgecolor", "=", "\"white\"", ",", "linewidth", "=", "1", ")", "\n", ")", "\n", "ax", ".", "text", "(", "\n", "x1", "+", "5", ",", "\n", "y1", "-", "18", ",", "\n", "\"{:.2f}\"", ".", "format", "(", "sim", ")", ",", "\n", "bbox", "=", "dict", "(", "facecolor", "=", "\"#4CAF50\"", ",", "linewidth", "=", "0", ")", ",", "\n", "fontsize", "=", "20", ",", "\n", "color", "=", "\"white\"", ",", "\n", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "img_path", ".", "replace", "(", "\"gallery\"", ",", "\"result\"", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.demo.main": [[43, 76], ["defaults.get_default_cfg", "defaults.get_default_cfg.merge_from_list", "defaults.get_default_cfg.freeze", "torch.device", "torch.device", "print", "models.seqnet.SeqNet", "models.seqnet.SeqNet.to", "models.seqnet.SeqNet.eval", "utils.utils.resume_from_ckpt", "sorted", "defaults.get_default_cfg.merge_from_file", "torchvision.transforms.functional.to_tensor().to", "models.seqnet.SeqNet.", "glob.glob", "print", "gallery_feats.mm().squeeze", "demo.visualize_result", "torch.tensor().to", "torch.tensor().to", "torchvision.transforms.functional.to_tensor().to", "models.seqnet.SeqNet.", "detections.cpu().numpy", "torchvision.transforms.functional.to_tensor", "gallery_feats.mm", "PIL.Image.open().convert", "torch.tensor", "torch.tensor", "torchvision.transforms.functional.to_tensor", "query_feat.view", "detections.cpu", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.defaults.get_default_cfg", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.resume_from_ckpt", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.demo.visualize_result"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_default_cfg", "(", ")", "\n", "if", "args", ".", "cfg_file", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "DEVICE", ")", "\n", "\n", "print", "(", "\"Creating model\"", ")", "\n", "model", "=", "SeqNet", "(", "cfg", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "resume_from_ckpt", "(", "args", ".", "ckpt", ",", "model", ")", "\n", "\n", "query_img", "=", "[", "F", ".", "to_tensor", "(", "Image", ".", "open", "(", "\"demo_imgs/query.jpg\"", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ".", "to", "(", "device", ")", "]", "\n", "query_target", "=", "[", "{", "\"boxes\"", ":", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "466", ",", "943", "]", "]", ")", ".", "to", "(", "device", ")", "}", "]", "\n", "query_feat", "=", "model", "(", "query_img", ",", "query_target", ")", "[", "0", "]", "\n", "\n", "gallery_img_paths", "=", "sorted", "(", "glob", "(", "\"demo_imgs/gallery-*.jpg\"", ")", ")", "\n", "for", "gallery_img_path", "in", "gallery_img_paths", ":", "\n", "        ", "print", "(", "f\"Processing {gallery_img_path}\"", ")", "\n", "gallery_img", "=", "[", "F", ".", "to_tensor", "(", "Image", ".", "open", "(", "gallery_img_path", ")", ".", "convert", "(", "\"RGB\"", ")", ")", ".", "to", "(", "device", ")", "]", "\n", "gallery_output", "=", "model", "(", "gallery_img", ")", "[", "0", "]", "\n", "detections", "=", "gallery_output", "[", "\"boxes\"", "]", "\n", "gallery_feats", "=", "gallery_output", "[", "\"embeddings\"", "]", "\n", "\n", "# Compute pairwise cosine similarities,", "\n", "# which equals to inner-products, as features are already L2-normed", "\n", "similarities", "=", "gallery_feats", ".", "mm", "(", "query_feat", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "visualize_result", "(", "gallery_img_path", ",", "detections", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "similarities", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func._compute_iou": [[11, 19], ["max", "max", "min", "min", "max", "max"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max"], ["def", "_compute_iou", "(", "a", ",", "b", ")", ":", "\n", "    ", "x1", "=", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "\n", "y1", "=", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "\n", "x2", "=", "min", "(", "a", "[", "2", "]", ",", "b", "[", "2", "]", ")", "\n", "y2", "=", "min", "(", "a", "[", "3", "]", ",", "b", "[", "3", "]", ")", "\n", "inter", "=", "max", "(", "0", ",", "x2", "-", "x1", ")", "*", "max", "(", "0", ",", "y2", "-", "y1", ")", "\n", "union", "=", "(", "a", "[", "2", "]", "-", "a", "[", "0", "]", ")", "*", "(", "a", "[", "3", "]", "-", "a", "[", "1", "]", ")", "+", "(", "b", "[", "2", "]", "-", "b", "[", "0", "]", ")", "*", "(", "b", "[", "3", "]", "-", "b", "[", "1", "]", ")", "-", "inter", "\n", "return", "inter", "*", "1.0", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func.eval_detection": [[21, 87], ["zip", "print", "print", "len", "len", "numpy.zeros", "range", "range", "range", "range", "tfmat.sum", "sklearn.metrics.average_precision_score", "print", "numpy.asarray", "range", "numpy.argmax", "range", "numpy.argmax", "range", "y_score.append", "y_true.append", "numpy.where", "len", "numpy.where", "eval_func._compute_iou", "tfmat[].any", "anno[].ravel", "det[].ravel"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func._compute_iou"], ["", "def", "eval_detection", "(", "\n", "gallery_dataset", ",", "gallery_dets", ",", "det_thresh", "=", "0.5", ",", "iou_thresh", "=", "0.5", ",", "labeled_only", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    gallery_det (list of ndarray): n_det x [x1, y1, x2, y2, score] per image\n    det_thresh (float): filter out gallery detections whose scores below this\n    iou_thresh (float): treat as true positive if IoU is above this threshold\n    labeled_only (bool): filter out unlabeled background people\n    \"\"\"", "\n", "assert", "len", "(", "gallery_dataset", ")", "==", "len", "(", "gallery_dets", ")", "\n", "annos", "=", "gallery_dataset", ".", "annotations", "\n", "\n", "y_true", ",", "y_score", "=", "[", "]", ",", "[", "]", "\n", "count_gt", ",", "count_tp", "=", "0", ",", "0", "\n", "for", "anno", ",", "det", "in", "zip", "(", "annos", ",", "gallery_dets", ")", ":", "\n", "        ", "gt_boxes", "=", "anno", "[", "\"boxes\"", "]", "\n", "if", "labeled_only", ":", "\n", "# exclude the unlabeled people (pid == 5555)", "\n", "            ", "inds", "=", "np", ".", "where", "(", "anno", "[", "\"pids\"", "]", ".", "ravel", "(", ")", "!=", "5555", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "gt_boxes", "=", "gt_boxes", "[", "inds", "]", "\n", "", "num_gt", "=", "gt_boxes", ".", "shape", "[", "0", "]", "\n", "\n", "if", "det", "!=", "[", "]", ":", "\n", "            ", "det", "=", "np", ".", "asarray", "(", "det", ")", "\n", "inds", "=", "np", ".", "where", "(", "det", "[", ":", ",", "4", "]", ".", "ravel", "(", ")", ">=", "det_thresh", ")", "[", "0", "]", "\n", "det", "=", "det", "[", "inds", "]", "\n", "num_det", "=", "det", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "num_det", "=", "0", "\n", "", "if", "num_det", "==", "0", ":", "\n", "            ", "count_gt", "+=", "num_gt", "\n", "continue", "\n", "\n", "", "ious", "=", "np", ".", "zeros", "(", "(", "num_gt", ",", "num_det", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_det", ")", ":", "\n", "                ", "ious", "[", "i", ",", "j", "]", "=", "_compute_iou", "(", "gt_boxes", "[", "i", "]", ",", "det", "[", "j", ",", ":", "4", "]", ")", "\n", "", "", "tfmat", "=", "ious", ">=", "iou_thresh", "\n", "# for each det, keep only the largest iou of all the gt", "\n", "for", "j", "in", "range", "(", "num_det", ")", ":", "\n", "            ", "largest_ind", "=", "np", ".", "argmax", "(", "ious", "[", ":", ",", "j", "]", ")", "\n", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "                ", "if", "i", "!=", "largest_ind", ":", "\n", "                    ", "tfmat", "[", "i", ",", "j", "]", "=", "False", "\n", "# for each gt, keep only the largest iou of all the det", "\n", "", "", "", "for", "i", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "largest_ind", "=", "np", ".", "argmax", "(", "ious", "[", "i", ",", ":", "]", ")", "\n", "for", "j", "in", "range", "(", "num_det", ")", ":", "\n", "                ", "if", "j", "!=", "largest_ind", ":", "\n", "                    ", "tfmat", "[", "i", ",", "j", "]", "=", "False", "\n", "", "", "", "for", "j", "in", "range", "(", "num_det", ")", ":", "\n", "            ", "y_score", ".", "append", "(", "det", "[", "j", ",", "-", "1", "]", ")", "\n", "y_true", ".", "append", "(", "tfmat", "[", ":", ",", "j", "]", ".", "any", "(", ")", ")", "\n", "", "count_tp", "+=", "tfmat", ".", "sum", "(", ")", "\n", "count_gt", "+=", "num_gt", "\n", "\n", "", "det_rate", "=", "count_tp", "*", "1.0", "/", "count_gt", "\n", "ap", "=", "average_precision_score", "(", "y_true", ",", "y_score", ")", "*", "det_rate", "\n", "\n", "print", "(", "\"{} detection:\"", ".", "format", "(", "\"labeled only\"", "if", "labeled_only", "else", "\"all\"", ")", ")", "\n", "print", "(", "\"  recall = {:.2%}\"", ".", "format", "(", "det_rate", ")", ")", "\n", "if", "not", "labeled_only", ":", "\n", "        ", "print", "(", "\"  ap = {:.2%}\"", ".", "format", "(", "ap", ")", ")", "\n", "", "return", "det_rate", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func.eval_search_cuhk": [[89, 299], ["scipy.io.loadmat", "protoc[].squeeze", "zip", "range", "print", "print", "numpy.mean", "enumerate", "utils.utils.write_json", "numpy.mean", "len", "len", "len", "len", "len", "len", "os.join", "len", "query_box_feats[].ravel", "str", "[].astype", "set", "[].squeeze", "name2sim.items", "numpy.asarray", "numpy.asarray", "aps.append", "np.mean.append", "int", "range", "ret[].append", "print", "len", "det[].ravel", "str", "[].astype", "feat_g.reshape.reshape", "feat_g.reshape.dot().ravel", "np.array.extend", "set.extend", "numpy.array", "numpy.array", "set", "numpy.zeros", "np.asarray.extend", "np.asarray.extend", "imgs.extend", "rois.extend", "set.add", "numpy.argsort", "str", "list", "new_entry[].append", "numpy.mean", "numpy.where", "len", "numpy.prod", "list", "feat_g.reshape.reshape", "feat_g.reshape.dot().ravel", "numpy.zeros", "np.asarray.extend", "np.asarray.extend", "imgs.extend", "rois.extend", "numpy.argsort", "enumerate", "utils.km.run_kuhn_munkres", "len", "query_gt.append", "min", "enumerate", "list", "list", "list", "sklearn.metrics.average_precision_score", "min", "map", "feat_g.reshape.dot", "len", "numpy.prod", "len", "list", "list", "list", "enumerate", "numpy.argsort", "len", "sum", "list", "str", "list", "float", "int", "feat_g.reshape.dot", "len", "graph.append", "str", "list", "eval_func._compute_iou", "map", "map", "list", "list"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.write_json", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.run_kuhn_munkres", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func._compute_iou"], ["", "def", "eval_search_cuhk", "(", "\n", "gallery_dataset", ",", "\n", "query_dataset", ",", "\n", "gallery_dets", ",", "\n", "gallery_feats", ",", "\n", "query_box_feats", ",", "\n", "query_dets", ",", "\n", "query_feats", ",", "\n", "k1", "=", "10", ",", "\n", "k2", "=", "3", ",", "\n", "det_thresh", "=", "0.5", ",", "\n", "cbgm", "=", "False", ",", "\n", "gallery_size", "=", "100", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    gallery_dataset/query_dataset: an instance of BaseDataset\n    gallery_det (list of ndarray): n_det x [x1, x2, y1, y2, score] per image\n    gallery_feat (list of ndarray): n_det x D features per image\n    query_feat (list of ndarray): D dimensional features per query image\n    det_thresh (float): filter out gallery detections whose scores below this\n    gallery_size (int): gallery size [-1, 50, 100, 500, 1000, 2000, 4000]\n                        -1 for using full set\n    \"\"\"", "\n", "assert", "len", "(", "gallery_dataset", ")", "==", "len", "(", "gallery_dets", ")", "\n", "assert", "len", "(", "gallery_dataset", ")", "==", "len", "(", "gallery_feats", ")", "\n", "assert", "len", "(", "query_dataset", ")", "==", "len", "(", "query_box_feats", ")", "\n", "\n", "use_full_set", "=", "gallery_size", "==", "-", "1", "\n", "fname", "=", "\"TestG{}\"", ".", "format", "(", "gallery_size", "if", "not", "use_full_set", "else", "50", ")", "\n", "protoc", "=", "loadmat", "(", "osp", ".", "join", "(", "gallery_dataset", ".", "root", ",", "\"annotation/test/train_test\"", ",", "fname", "+", "\".mat\"", ")", ")", "\n", "protoc", "=", "protoc", "[", "fname", "]", ".", "squeeze", "(", ")", "\n", "\n", "# mapping from gallery image to (det, feat)", "\n", "annos", "=", "gallery_dataset", ".", "annotations", "\n", "name_to_det_feat", "=", "{", "}", "\n", "for", "anno", ",", "det", ",", "feat", "in", "zip", "(", "annos", ",", "gallery_dets", ",", "gallery_feats", ")", ":", "\n", "        ", "name", "=", "anno", "[", "\"img_name\"", "]", "\n", "if", "len", "(", "det", ")", "!=", "0", ":", "\n", "            ", "scores", "=", "det", "[", ":", ",", "4", "]", ".", "ravel", "(", ")", "\n", "inds", "=", "np", ".", "where", "(", "scores", ">=", "det_thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", ">", "0", ":", "\n", "                ", "name_to_det_feat", "[", "name", "]", "=", "(", "det", "[", "inds", "]", ",", "feat", "[", "inds", "]", ")", "\n", "\n", "", "", "", "aps", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "topk", "=", "[", "1", ",", "5", ",", "10", "]", "\n", "ret", "=", "{", "\"image_root\"", ":", "gallery_dataset", ".", "img_prefix", ",", "\"results\"", ":", "[", "]", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "query_dataset", ")", ")", ":", "\n", "        ", "y_true", ",", "y_score", "=", "[", "]", ",", "[", "]", "\n", "imgs", ",", "rois", "=", "[", "]", ",", "[", "]", "\n", "count_gt", ",", "count_tp", "=", "0", ",", "0", "\n", "# get L2-normalized feature vector", "\n", "feat_q", "=", "query_box_feats", "[", "i", "]", ".", "ravel", "(", ")", "\n", "# ignore the query image", "\n", "query_imname", "=", "str", "(", "protoc", "[", "\"Query\"", "]", "[", "i", "]", "[", "\"imname\"", "]", "[", "0", ",", "0", "]", "[", "0", "]", ")", "\n", "query_roi", "=", "protoc", "[", "\"Query\"", "]", "[", "i", "]", "[", "\"idlocate\"", "]", "[", "0", ",", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "query_roi", "[", "2", ":", "]", "+=", "query_roi", "[", ":", "2", "]", "\n", "query_gt", "=", "[", "]", "\n", "tested", "=", "set", "(", "[", "query_imname", "]", ")", "\n", "\n", "name2sim", "=", "{", "}", "\n", "name2gt", "=", "{", "}", "\n", "sims", "=", "[", "]", "\n", "imgs_cbgm", "=", "[", "]", "\n", "# 1. Go through the gallery samples defined by the protocol", "\n", "for", "item", "in", "protoc", "[", "\"Gallery\"", "]", "[", "i", "]", ".", "squeeze", "(", ")", ":", "\n", "            ", "gallery_imname", "=", "str", "(", "item", "[", "0", "]", "[", "0", "]", ")", "\n", "# some contain the query (gt not empty), some not", "\n", "gt", "=", "item", "[", "1", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "count_gt", "+=", "gt", ".", "size", ">", "0", "\n", "# compute distance between query and gallery dets", "\n", "if", "gallery_imname", "not", "in", "name_to_det_feat", ":", "\n", "                ", "continue", "\n", "", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "gallery_imname", "]", "\n", "# no detection in this gallery, skip it", "\n", "if", "det", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "# get L2-normalized feature matrix NxD", "\n", "", "assert", "feat_g", ".", "size", "==", "np", ".", "prod", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "feat_g", "=", "feat_g", ".", "reshape", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "# compute cosine similarities", "\n", "sim", "=", "feat_g", ".", "dot", "(", "feat_q", ")", ".", "ravel", "(", ")", "\n", "\n", "if", "gallery_imname", "in", "name2sim", ":", "\n", "                ", "continue", "\n", "", "name2sim", "[", "gallery_imname", "]", "=", "sim", "\n", "name2gt", "[", "gallery_imname", "]", "=", "gt", "\n", "sims", ".", "extend", "(", "list", "(", "sim", ")", ")", "\n", "imgs_cbgm", ".", "extend", "(", "[", "gallery_imname", "]", "*", "len", "(", "sim", ")", ")", "\n", "# 2. Go through the remaining gallery images if using full set", "\n", "", "if", "use_full_set", ":", "\n", "# TODO: support CBGM when using full set", "\n", "            ", "for", "gallery_imname", "in", "gallery_dataset", ".", "imgs", ":", "\n", "                ", "if", "gallery_imname", "in", "tested", ":", "\n", "                    ", "continue", "\n", "", "if", "gallery_imname", "not", "in", "name_to_det_feat", ":", "\n", "                    ", "continue", "\n", "", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "gallery_imname", "]", "\n", "# get L2-normalized feature matrix NxD", "\n", "assert", "feat_g", ".", "size", "==", "np", ".", "prod", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "feat_g", "=", "feat_g", ".", "reshape", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "# compute cosine similarities", "\n", "sim", "=", "feat_g", ".", "dot", "(", "feat_q", ")", ".", "ravel", "(", ")", "\n", "# guaranteed no target query in these gallery images", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "sim", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "y_true", ".", "extend", "(", "list", "(", "label", ")", ")", "\n", "y_score", ".", "extend", "(", "list", "(", "sim", ")", ")", "\n", "imgs", ".", "extend", "(", "[", "gallery_imname", "]", "*", "len", "(", "sim", ")", ")", "\n", "rois", ".", "extend", "(", "list", "(", "det", ")", ")", "\n", "\n", "", "", "if", "cbgm", ":", "\n", "# -------- Context Bipartite Graph Matching (CBGM) ------- #", "\n", "            ", "sims", "=", "np", ".", "array", "(", "sims", ")", "\n", "imgs_cbgm", "=", "np", ".", "array", "(", "imgs_cbgm", ")", "\n", "# only process the top-k1 gallery images for efficiency", "\n", "inds", "=", "np", ".", "argsort", "(", "sims", ")", "[", "-", "k1", ":", "]", "\n", "imgs_cbgm", "=", "set", "(", "imgs_cbgm", "[", "inds", "]", ")", "\n", "for", "img", "in", "imgs_cbgm", ":", "\n", "                ", "sim", "=", "name2sim", "[", "img", "]", "\n", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "img", "]", "\n", "# only regard the people with top-k2 detection confidence", "\n", "# in the query image as context information", "\n", "qboxes", "=", "query_dets", "[", "i", "]", "[", ":", "k2", "]", "\n", "qfeats", "=", "query_feats", "[", "i", "]", "[", ":", "k2", "]", "\n", "assert", "(", "\n", "query_roi", "-", "qboxes", "[", "0", "]", "[", ":", "4", "]", "\n", ")", ".", "sum", "(", ")", "<=", "0.001", ",", "\"query_roi must be the first one in pboxes\"", "\n", "\n", "# build the bipartite graph and run Kuhn-Munkres (K-M) algorithm", "\n", "# to find the best match", "\n", "graph", "=", "[", "]", "\n", "for", "indx_i", ",", "pfeat", "in", "enumerate", "(", "qfeats", ")", ":", "\n", "                    ", "for", "indx_j", ",", "gfeat", "in", "enumerate", "(", "feat_g", ")", ":", "\n", "                        ", "graph", ".", "append", "(", "(", "indx_i", ",", "indx_j", ",", "(", "pfeat", "*", "gfeat", ")", ".", "sum", "(", ")", ")", ")", "\n", "", "", "km_res", ",", "max_val", "=", "run_kuhn_munkres", "(", "graph", ")", "\n", "\n", "# revise the similarity between query person and its matching", "\n", "for", "indx_i", ",", "indx_j", ",", "_", "in", "km_res", ":", "\n", "# 0 denotes the query roi", "\n", "                    ", "if", "indx_i", "==", "0", ":", "\n", "                        ", "sim", "[", "indx_j", "]", "=", "max_val", "\n", "break", "\n", "", "", "", "", "for", "gallery_imname", ",", "sim", "in", "name2sim", ".", "items", "(", ")", ":", "\n", "            ", "gt", "=", "name2gt", "[", "gallery_imname", "]", "\n", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "gallery_imname", "]", "\n", "# assign label for each det", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "sim", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "gt", ".", "size", ">", "0", ":", "\n", "                ", "w", ",", "h", "=", "gt", "[", "2", "]", ",", "gt", "[", "3", "]", "\n", "gt", "[", "2", ":", "]", "+=", "gt", "[", ":", "2", "]", "\n", "query_gt", ".", "append", "(", "{", "\"img\"", ":", "str", "(", "gallery_imname", ")", ",", "\"roi\"", ":", "list", "(", "map", "(", "float", ",", "list", "(", "gt", ")", ")", ")", "}", ")", "\n", "iou_thresh", "=", "min", "(", "0.5", ",", "(", "w", "*", "h", "*", "1.0", ")", "/", "(", "(", "w", "+", "10", ")", "*", "(", "h", "+", "10", ")", ")", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "sim", ")", "[", ":", ":", "-", "1", "]", "\n", "sim", "=", "sim", "[", "inds", "]", "\n", "det", "=", "det", "[", "inds", "]", "\n", "# only set the first matched det as true positive", "\n", "for", "j", ",", "roi", "in", "enumerate", "(", "det", "[", ":", ",", ":", "4", "]", ")", ":", "\n", "                    ", "if", "_compute_iou", "(", "roi", ",", "gt", ")", ">=", "iou_thresh", ":", "\n", "                        ", "label", "[", "j", "]", "=", "1", "\n", "count_tp", "+=", "1", "\n", "break", "\n", "", "", "", "y_true", ".", "extend", "(", "list", "(", "label", ")", ")", "\n", "y_score", ".", "extend", "(", "list", "(", "sim", ")", ")", "\n", "imgs", ".", "extend", "(", "[", "gallery_imname", "]", "*", "len", "(", "sim", ")", ")", "\n", "rois", ".", "extend", "(", "list", "(", "det", ")", ")", "\n", "tested", ".", "add", "(", "gallery_imname", ")", "\n", "# 3. Compute AP for this query (need to scale by recall rate)", "\n", "", "y_score", "=", "np", ".", "asarray", "(", "y_score", ")", "\n", "y_true", "=", "np", ".", "asarray", "(", "y_true", ")", "\n", "assert", "count_tp", "<=", "count_gt", "\n", "recall_rate", "=", "count_tp", "*", "1.0", "/", "count_gt", "\n", "ap", "=", "0", "if", "count_tp", "==", "0", "else", "average_precision_score", "(", "y_true", ",", "y_score", ")", "*", "recall_rate", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "inds", "]", "\n", "y_true", "=", "y_true", "[", "inds", "]", "\n", "accs", ".", "append", "(", "[", "min", "(", "1", ",", "sum", "(", "y_true", "[", ":", "k", "]", ")", ")", "for", "k", "in", "topk", "]", ")", "\n", "# 4. Save result for JSON dump", "\n", "new_entry", "=", "{", "\n", "\"query_img\"", ":", "str", "(", "query_imname", ")", ",", "\n", "\"query_roi\"", ":", "list", "(", "map", "(", "float", ",", "list", "(", "query_roi", ")", ")", ")", ",", "\n", "\"query_gt\"", ":", "query_gt", ",", "\n", "\"gallery\"", ":", "[", "]", ",", "\n", "}", "\n", "# only record wrong results", "\n", "if", "int", "(", "y_true", "[", "0", "]", ")", ":", "\n", "            ", "continue", "\n", "# only save top-10 predictions", "\n", "", "for", "k", "in", "range", "(", "10", ")", ":", "\n", "            ", "new_entry", "[", "\"gallery\"", "]", ".", "append", "(", "\n", "{", "\n", "\"img\"", ":", "str", "(", "imgs", "[", "inds", "[", "k", "]", "]", ")", ",", "\n", "\"roi\"", ":", "list", "(", "map", "(", "float", ",", "list", "(", "rois", "[", "inds", "[", "k", "]", "]", ")", ")", ")", ",", "\n", "\"score\"", ":", "float", "(", "y_score", "[", "k", "]", ")", ",", "\n", "\"correct\"", ":", "int", "(", "y_true", "[", "k", "]", ")", ",", "\n", "}", "\n", ")", "\n", "", "ret", "[", "\"results\"", "]", ".", "append", "(", "new_entry", ")", "\n", "\n", "", "print", "(", "\"search ranking:\"", ")", "\n", "print", "(", "\"  mAP = {:.2%}\"", ".", "format", "(", "np", ".", "mean", "(", "aps", ")", ")", ")", "\n", "accs", "=", "np", ".", "mean", "(", "accs", ",", "axis", "=", "0", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "topk", ")", ":", "\n", "        ", "print", "(", "\"  top-{:2d} = {:.2%}\"", ".", "format", "(", "k", ",", "accs", "[", "i", "]", ")", ")", "\n", "\n", "", "write_json", "(", "ret", ",", "\"vis/results.json\"", ")", "\n", "\n", "ret", "[", "\"mAP\"", "]", "=", "np", ".", "mean", "(", "aps", ")", "\n", "ret", "[", "\"accs\"", "]", "=", "accs", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func.eval_search_prw": [[301, 486], ["zip", "range", "print", "numpy.mean", "print", "numpy.mean", "enumerate", "numpy.mean", "len", "len", "len", "len", "len", "len", "det[].ravel", "len", "query_box_feats[].ravel", "name2sim.items", "numpy.asarray", "numpy.asarray", "aps.append", "np.mean.append", "range", "ret[].append", "print", "numpy.where", "len", "feat_g.reshape.reshape", "feat_g.reshape.dot().ravel", "np.array.extend", "set.extend", "numpy.array", "numpy.array", "set", "numpy.zeros", "np.asarray.extend", "np.asarray.extend", "imgs.extend", "rois.extend", "numpy.argsort", "str", "list", "new_entry[].append", "gallery_imgs.append", "numpy.prod", "list", "numpy.argsort", "enumerate", "utils.km.run_kuhn_munkres", "len", "query_gts[].ravel", "min", "enumerate", "list", "list", "list", "sklearn.metrics.average_precision_score", "min", "map", "gallery_imgs.append", "gallery_imgs.append", "feat_g.reshape.dot", "len", "enumerate", "numpy.argsort", "len", "sum", "list", "str", "list", "float", "int", "graph.append", "eval_func._compute_iou", "query_roi.squeeze", "map", "list"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.run_kuhn_munkres", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func._compute_iou"], ["", "def", "eval_search_prw", "(", "\n", "gallery_dataset", ",", "\n", "query_dataset", ",", "\n", "gallery_dets", ",", "\n", "gallery_feats", ",", "\n", "query_box_feats", ",", "\n", "query_dets", ",", "\n", "query_feats", ",", "\n", "k1", "=", "30", ",", "\n", "k2", "=", "4", ",", "\n", "det_thresh", "=", "0.5", ",", "\n", "cbgm", "=", "False", ",", "\n", "ignore_cam_id", "=", "True", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    gallery_det (list of ndarray): n_det x [x1, x2, y1, y2, score] per image\n    gallery_feat (list of ndarray): n_det x D features per image\n    query_feat (list of ndarray): D dimensional features per query image\n    det_thresh (float): filter out gallery detections whose scores below this\n    gallery_size (int): -1 for using full set\n    ignore_cam_id (bool): Set to True acoording to CUHK-SYSU,\n                        although it's a common practice to focus on cross-cam match only.\n    \"\"\"", "\n", "assert", "len", "(", "gallery_dataset", ")", "==", "len", "(", "gallery_dets", ")", "\n", "assert", "len", "(", "gallery_dataset", ")", "==", "len", "(", "gallery_feats", ")", "\n", "assert", "len", "(", "query_dataset", ")", "==", "len", "(", "query_box_feats", ")", "\n", "\n", "annos", "=", "gallery_dataset", ".", "annotations", "\n", "name_to_det_feat", "=", "{", "}", "\n", "for", "anno", ",", "det", ",", "feat", "in", "zip", "(", "annos", ",", "gallery_dets", ",", "gallery_feats", ")", ":", "\n", "        ", "name", "=", "anno", "[", "\"img_name\"", "]", "\n", "scores", "=", "det", "[", ":", ",", "4", "]", ".", "ravel", "(", ")", "\n", "inds", "=", "np", ".", "where", "(", "scores", ">=", "det_thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", ">", "0", ":", "\n", "            ", "name_to_det_feat", "[", "name", "]", "=", "(", "det", "[", "inds", "]", ",", "feat", "[", "inds", "]", ")", "\n", "\n", "", "", "aps", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "topk", "=", "[", "1", ",", "5", ",", "10", "]", "\n", "ret", "=", "{", "\"image_root\"", ":", "gallery_dataset", ".", "img_prefix", ",", "\"results\"", ":", "[", "]", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "query_dataset", ")", ")", ":", "\n", "        ", "y_true", ",", "y_score", "=", "[", "]", ",", "[", "]", "\n", "imgs", ",", "rois", "=", "[", "]", ",", "[", "]", "\n", "count_gt", ",", "count_tp", "=", "0", ",", "0", "\n", "\n", "feat_p", "=", "query_box_feats", "[", "i", "]", ".", "ravel", "(", ")", "\n", "\n", "query_imname", "=", "query_dataset", ".", "annotations", "[", "i", "]", "[", "\"img_name\"", "]", "\n", "query_roi", "=", "query_dataset", ".", "annotations", "[", "i", "]", "[", "\"boxes\"", "]", "\n", "query_pid", "=", "query_dataset", ".", "annotations", "[", "i", "]", "[", "\"pids\"", "]", "\n", "query_cam", "=", "query_dataset", ".", "annotations", "[", "i", "]", "[", "\"cam_id\"", "]", "\n", "\n", "# Find all occurence of this query", "\n", "gallery_imgs", "=", "[", "]", "\n", "for", "x", "in", "annos", ":", "\n", "            ", "if", "query_pid", "in", "x", "[", "\"pids\"", "]", "and", "x", "[", "\"img_name\"", "]", "!=", "query_imname", ":", "\n", "                ", "gallery_imgs", ".", "append", "(", "x", ")", "\n", "", "", "query_gts", "=", "{", "}", "\n", "for", "item", "in", "gallery_imgs", ":", "\n", "            ", "query_gts", "[", "item", "[", "\"img_name\"", "]", "]", "=", "item", "[", "\"boxes\"", "]", "[", "item", "[", "\"pids\"", "]", "==", "query_pid", "]", "\n", "\n", "# Construct gallery set for this query", "\n", "", "if", "ignore_cam_id", ":", "\n", "            ", "gallery_imgs", "=", "[", "]", "\n", "for", "x", "in", "annos", ":", "\n", "                ", "if", "x", "[", "\"img_name\"", "]", "!=", "query_imname", ":", "\n", "                    ", "gallery_imgs", ".", "append", "(", "x", ")", "\n", "", "", "", "else", ":", "\n", "            ", "gallery_imgs", "=", "[", "]", "\n", "for", "x", "in", "annos", ":", "\n", "                ", "if", "x", "[", "\"img_name\"", "]", "!=", "query_imname", "and", "x", "[", "\"cam_id\"", "]", "!=", "query_cam", ":", "\n", "                    ", "gallery_imgs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "", "name2sim", "=", "{", "}", "\n", "sims", "=", "[", "]", "\n", "imgs_cbgm", "=", "[", "]", "\n", "# 1. Go through all gallery samples", "\n", "for", "item", "in", "gallery_imgs", ":", "\n", "            ", "gallery_imname", "=", "item", "[", "\"img_name\"", "]", "\n", "# some contain the query (gt not empty), some not", "\n", "count_gt", "+=", "gallery_imname", "in", "query_gts", "\n", "# compute distance between query and gallery dets", "\n", "if", "gallery_imname", "not", "in", "name_to_det_feat", ":", "\n", "                ", "continue", "\n", "", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "gallery_imname", "]", "\n", "# get L2-normalized feature matrix NxD", "\n", "assert", "feat_g", ".", "size", "==", "np", ".", "prod", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "feat_g", "=", "feat_g", ".", "reshape", "(", "feat_g", ".", "shape", "[", ":", "2", "]", ")", "\n", "# compute cosine similarities", "\n", "sim", "=", "feat_g", ".", "dot", "(", "feat_p", ")", ".", "ravel", "(", ")", "\n", "\n", "if", "gallery_imname", "in", "name2sim", ":", "\n", "                ", "continue", "\n", "", "name2sim", "[", "gallery_imname", "]", "=", "sim", "\n", "sims", ".", "extend", "(", "list", "(", "sim", ")", ")", "\n", "imgs_cbgm", ".", "extend", "(", "[", "gallery_imname", "]", "*", "len", "(", "sim", ")", ")", "\n", "\n", "", "if", "cbgm", ":", "\n", "            ", "sims", "=", "np", ".", "array", "(", "sims", ")", "\n", "imgs_cbgm", "=", "np", ".", "array", "(", "imgs_cbgm", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "sims", ")", "[", "-", "k1", ":", "]", "\n", "imgs_cbgm", "=", "set", "(", "imgs_cbgm", "[", "inds", "]", ")", "\n", "for", "img", "in", "imgs_cbgm", ":", "\n", "                ", "sim", "=", "name2sim", "[", "img", "]", "\n", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "img", "]", "\n", "qboxes", "=", "query_dets", "[", "i", "]", "[", ":", "k2", "]", "\n", "qfeats", "=", "query_feats", "[", "i", "]", "[", ":", "k2", "]", "\n", "assert", "(", "\n", "query_roi", "-", "qboxes", "[", "0", "]", "[", ":", "4", "]", "\n", ")", ".", "sum", "(", ")", "<=", "0.001", ",", "\"query_roi must be the first one in pboxes\"", "\n", "\n", "graph", "=", "[", "]", "\n", "for", "indx_i", ",", "pfeat", "in", "enumerate", "(", "qfeats", ")", ":", "\n", "                    ", "for", "indx_j", ",", "gfeat", "in", "enumerate", "(", "feat_g", ")", ":", "\n", "                        ", "graph", ".", "append", "(", "(", "indx_i", ",", "indx_j", ",", "(", "pfeat", "*", "gfeat", ")", ".", "sum", "(", ")", ")", ")", "\n", "", "", "km_res", ",", "max_val", "=", "run_kuhn_munkres", "(", "graph", ")", "\n", "\n", "for", "indx_i", ",", "indx_j", ",", "_", "in", "km_res", ":", "\n", "                    ", "if", "indx_i", "==", "0", ":", "\n", "                        ", "sim", "[", "indx_j", "]", "=", "max_val", "\n", "break", "\n", "", "", "", "", "for", "gallery_imname", ",", "sim", "in", "name2sim", ".", "items", "(", ")", ":", "\n", "            ", "det", ",", "feat_g", "=", "name_to_det_feat", "[", "gallery_imname", "]", "\n", "# assign label for each det", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "sim", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "if", "gallery_imname", "in", "query_gts", ":", "\n", "                ", "gt", "=", "query_gts", "[", "gallery_imname", "]", ".", "ravel", "(", ")", "\n", "w", ",", "h", "=", "gt", "[", "2", "]", "-", "gt", "[", "0", "]", ",", "gt", "[", "3", "]", "-", "gt", "[", "1", "]", "\n", "iou_thresh", "=", "min", "(", "0.5", ",", "(", "w", "*", "h", "*", "1.0", ")", "/", "(", "(", "w", "+", "10", ")", "*", "(", "h", "+", "10", ")", ")", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "sim", ")", "[", ":", ":", "-", "1", "]", "\n", "sim", "=", "sim", "[", "inds", "]", "\n", "det", "=", "det", "[", "inds", "]", "\n", "# only set the first matched det as true positive", "\n", "for", "j", ",", "roi", "in", "enumerate", "(", "det", "[", ":", ",", ":", "4", "]", ")", ":", "\n", "                    ", "if", "_compute_iou", "(", "roi", ",", "gt", ")", ">=", "iou_thresh", ":", "\n", "                        ", "label", "[", "j", "]", "=", "1", "\n", "count_tp", "+=", "1", "\n", "break", "\n", "", "", "", "y_true", ".", "extend", "(", "list", "(", "label", ")", ")", "\n", "y_score", ".", "extend", "(", "list", "(", "sim", ")", ")", "\n", "imgs", ".", "extend", "(", "[", "gallery_imname", "]", "*", "len", "(", "sim", ")", ")", "\n", "rois", ".", "extend", "(", "list", "(", "det", ")", ")", "\n", "\n", "# 2. Compute AP for this query (need to scale by recall rate)", "\n", "", "y_score", "=", "np", ".", "asarray", "(", "y_score", ")", "\n", "y_true", "=", "np", ".", "asarray", "(", "y_true", ")", "\n", "assert", "count_tp", "<=", "count_gt", "\n", "recall_rate", "=", "count_tp", "*", "1.0", "/", "count_gt", "\n", "ap", "=", "0", "if", "count_tp", "==", "0", "else", "average_precision_score", "(", "y_true", ",", "y_score", ")", "*", "recall_rate", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "inds", "=", "np", ".", "argsort", "(", "y_score", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "inds", "]", "\n", "y_true", "=", "y_true", "[", "inds", "]", "\n", "accs", ".", "append", "(", "[", "min", "(", "1", ",", "sum", "(", "y_true", "[", ":", "k", "]", ")", ")", "for", "k", "in", "topk", "]", ")", "\n", "# 4. Save result for JSON dump", "\n", "new_entry", "=", "{", "\n", "\"query_img\"", ":", "str", "(", "query_imname", ")", ",", "\n", "\"query_roi\"", ":", "list", "(", "map", "(", "float", ",", "list", "(", "query_roi", ".", "squeeze", "(", ")", ")", ")", ")", ",", "\n", "\"query_gt\"", ":", "query_gts", ",", "\n", "\"gallery\"", ":", "[", "]", ",", "\n", "}", "\n", "# only save top-10 predictions", "\n", "for", "k", "in", "range", "(", "10", ")", ":", "\n", "            ", "new_entry", "[", "\"gallery\"", "]", ".", "append", "(", "\n", "{", "\n", "\"img\"", ":", "str", "(", "imgs", "[", "inds", "[", "k", "]", "]", ")", ",", "\n", "\"roi\"", ":", "list", "(", "map", "(", "float", ",", "list", "(", "rois", "[", "inds", "[", "k", "]", "]", ")", ")", ")", ",", "\n", "\"score\"", ":", "float", "(", "y_score", "[", "k", "]", ")", ",", "\n", "\"correct\"", ":", "int", "(", "y_true", "[", "k", "]", ")", ",", "\n", "}", "\n", ")", "\n", "", "ret", "[", "\"results\"", "]", ".", "append", "(", "new_entry", ")", "\n", "\n", "", "print", "(", "\"search ranking:\"", ")", "\n", "mAP", "=", "np", ".", "mean", "(", "aps", ")", "\n", "print", "(", "\"  mAP = {:.2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "accs", "=", "np", ".", "mean", "(", "accs", ",", "axis", "=", "0", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "topk", ")", ":", "\n", "        ", "print", "(", "\"  top-{:2d} = {:.2%}\"", ".", "format", "(", "k", ",", "accs", "[", "i", "]", ")", ")", "\n", "\n", "# write_json(ret, \"vis/results.json\")", "\n", "\n", "", "ret", "[", "\"mAP\"", "]", "=", "np", ".", "mean", "(", "aps", ")", "\n", "ret", "[", "\"accs\"", "]", "=", "accs", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.to_device": [[13, 19], ["image.to", "t[].to", "t[].to"], "function", ["None"], ["def", "to_device", "(", "images", ",", "targets", ",", "device", ")", ":", "\n", "    ", "images", "=", "[", "image", ".", "to", "(", "device", ")", "for", "image", "in", "images", "]", "\n", "for", "t", "in", "targets", ":", "\n", "        ", "t", "[", "\"boxes\"", "]", "=", "t", "[", "\"boxes\"", "]", ".", "to", "(", "device", ")", "\n", "t", "[", "\"labels\"", "]", "=", "t", "[", "\"labels\"", "]", ".", "to", "(", "device", ")", "\n", "", "return", "images", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.train_one_epoch": [[21, 67], ["model.train", "utils.utils.MetricLogger", "utils.utils.MetricLogger.add_meter", "enumerate", "utils.utils.SmoothedValue", "utils.utils.warmup_lr_scheduler", "utils.utils.MetricLogger.log_every", "engine.to_device", "model", "sum", "utils.utils.reduce_dict", "sum", "sum.item", "optimizer.zero_grad", "sum.backward", "optimizer.step", "utils.utils.MetricLogger.update", "utils.utils.MetricLogger.update", "len", "math.isfinite", "print", "print", "sys.exit", "torch.nn.utils.clip_grad_norm_", "utils.utils.warmup_lr_scheduler.step", "utils.utils.reduce_dict.items", "model.parameters", "tfboard.add_scalars", "model.values", "utils.utils.reduce_dict.values", "len"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.warmup_lr_scheduler", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.to_device", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.reduce_dict", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIM.backward", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update"], ["", "def", "train_one_epoch", "(", "cfg", ",", "model", ",", "optimizer", ",", "data_loader", ",", "device", ",", "epoch", ",", "tfboard", "=", "None", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "metric_logger", "=", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "\"lr\"", ",", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "\"{value:.6f}\"", ")", ")", "\n", "header", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", "\n", "\n", "# warmup learning rate in the first epoch", "\n", "if", "epoch", "==", "0", ":", "\n", "        ", "warmup_factor", "=", "1.0", "/", "1000", "\n", "# FIXME: min(1000, len(data_loader) - 1)", "\n", "warmup_iters", "=", "len", "(", "data_loader", ")", "-", "1", "\n", "warmup_scheduler", "=", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", "\n", "\n", "", "for", "i", ",", "(", "images", ",", "targets", ")", "in", "enumerate", "(", "\n", "metric_logger", ".", "log_every", "(", "data_loader", ",", "cfg", ".", "DISP_PERIOD", ",", "header", ")", "\n", ")", ":", "\n", "        ", "images", ",", "targets", "=", "to_device", "(", "images", ",", "targets", ",", "device", ")", "\n", "\n", "loss_dict", "=", "model", "(", "images", ",", "targets", ")", "\n", "losses", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "\n", "# reduce losses over all GPUs for logging purposes", "\n", "loss_dict_reduced", "=", "reduce_dict", "(", "loss_dict", ")", "\n", "losses_reduced", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict_reduced", ".", "values", "(", ")", ")", "\n", "loss_value", "=", "losses_reduced", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "\n", "            ", "print", "(", "f\"Loss is {loss_value}, stopping training\"", ")", "\n", "print", "(", "loss_dict_reduced", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "losses", ".", "backward", "(", ")", "\n", "if", "cfg", ".", "SOLVER", ".", "CLIP_GRADIENTS", ">", "0", ":", "\n", "            ", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "cfg", ".", "SOLVER", ".", "CLIP_GRADIENTS", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "0", ":", "\n", "            ", "warmup_scheduler", ".", "step", "(", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ",", "**", "loss_dict_reduced", ")", "\n", "metric_logger", ".", "update", "(", "lr", "=", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "if", "tfboard", ":", "\n", "            ", "iter", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "i", "\n", "for", "k", ",", "v", "in", "loss_dict_reduced", ".", "items", "(", ")", ":", "\n", "                ", "tfboard", ".", "add_scalars", "(", "\"train\"", ",", "{", "k", ":", "v", "}", ",", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.evaluate_performance": [[69, 163], ["torch.no_grad", "model.eval", "eval_func.eval_detection", "eval_search_func", "torch.load", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "utils.utils.mkdir", "torch.save", "engine.to_device", "engine.to_device", "model", "[].squeeze", "engine.to_device", "model", "query_box_feats.append", "model", "boxes.size", "model", "torch.cat", "gallery_dets.append", "gallery_feats.append", "copy.deepcopy", "torch.cat", "query_dets.append", "query_feats.append", "len", "embeddings[].cpu().numpy", "torch.cat.cpu().numpy", "output[].cpu().numpy", "torch.cat.cpu().numpy", "output[].cpu().numpy", "torch.cat", "torch.ones().to", "torch.ones().to", "output[].unsqueeze", "output[].unsqueeze", "embeddings[].cpu", "torch.cat.cpu", "output[].cpu", "torch.cat.cpu", "output[].cpu", "torch.ones", "torch.ones"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.eval_func.eval_detection", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.mkdir", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.to_device", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.to_device", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.to_device"], ["", "", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate_performance", "(", "\n", "model", ",", "gallery_loader", ",", "query_loader", ",", "device", ",", "use_gt", "=", "False", ",", "use_cache", "=", "False", ",", "use_cbgm", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        use_gt (bool, optional): Whether to use GT as detection results to verify the upper\n                                bound of person search performance. Defaults to False.\n        use_cache (bool, optional): Whether to use the cached features. Defaults to False.\n        use_cbgm (bool, optional): Whether to use Context Bipartite Graph Matching algorithm.\n                                Defaults to False.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "if", "use_cache", ":", "\n", "        ", "eval_cache", "=", "torch", ".", "load", "(", "\"data/eval_cache/eval_cache.pth\"", ")", "\n", "gallery_dets", "=", "eval_cache", "[", "\"gallery_dets\"", "]", "\n", "gallery_feats", "=", "eval_cache", "[", "\"gallery_feats\"", "]", "\n", "query_dets", "=", "eval_cache", "[", "\"query_dets\"", "]", "\n", "query_feats", "=", "eval_cache", "[", "\"query_feats\"", "]", "\n", "query_box_feats", "=", "eval_cache", "[", "\"query_box_feats\"", "]", "\n", "", "else", ":", "\n", "        ", "gallery_dets", ",", "gallery_feats", "=", "[", "]", ",", "[", "]", "\n", "for", "images", ",", "targets", "in", "tqdm", "(", "gallery_loader", ",", "ncols", "=", "0", ")", ":", "\n", "            ", "images", ",", "targets", "=", "to_device", "(", "images", ",", "targets", ",", "device", ")", "\n", "if", "not", "use_gt", ":", "\n", "                ", "outputs", "=", "model", "(", "images", ")", "\n", "", "else", ":", "\n", "                ", "boxes", "=", "targets", "[", "0", "]", "[", "\"boxes\"", "]", "\n", "n_boxes", "=", "boxes", ".", "size", "(", "0", ")", "\n", "embeddings", "=", "model", "(", "images", ",", "targets", ")", "\n", "outputs", "=", "[", "\n", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"embeddings\"", ":", "torch", ".", "cat", "(", "embeddings", ")", ",", "\n", "\"labels\"", ":", "torch", ".", "ones", "(", "n_boxes", ")", ".", "to", "(", "device", ")", ",", "\n", "\"scores\"", ":", "torch", ".", "ones", "(", "n_boxes", ")", ".", "to", "(", "device", ")", ",", "\n", "}", "\n", "]", "\n", "\n", "", "for", "output", "in", "outputs", ":", "\n", "                ", "box_w_scores", "=", "torch", ".", "cat", "(", "[", "output", "[", "\"boxes\"", "]", ",", "output", "[", "\"scores\"", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "gallery_dets", ".", "append", "(", "box_w_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gallery_feats", ".", "append", "(", "output", "[", "\"embeddings\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# regarding query image as gallery to detect all people", "\n", "# i.e. query person + surrounding people (context information)", "\n", "", "", "query_dets", ",", "query_feats", "=", "[", "]", ",", "[", "]", "\n", "for", "images", ",", "targets", "in", "tqdm", "(", "query_loader", ",", "ncols", "=", "0", ")", ":", "\n", "            ", "images", ",", "targets", "=", "to_device", "(", "images", ",", "targets", ",", "device", ")", "\n", "# targets will be modified in the model, so deepcopy it", "\n", "outputs", "=", "model", "(", "images", ",", "deepcopy", "(", "targets", ")", ",", "query_img_as_gallery", "=", "True", ")", "\n", "\n", "# consistency check", "\n", "gt_box", "=", "targets", "[", "0", "]", "[", "\"boxes\"", "]", ".", "squeeze", "(", ")", "\n", "assert", "(", "\n", "gt_box", "-", "outputs", "[", "0", "]", "[", "\"boxes\"", "]", "[", "0", "]", "\n", ")", ".", "sum", "(", ")", "<=", "0.001", ",", "\"GT box must be the first one in the detected boxes of query image\"", "\n", "\n", "for", "output", "in", "outputs", ":", "\n", "                ", "box_w_scores", "=", "torch", ".", "cat", "(", "[", "output", "[", "\"boxes\"", "]", ",", "output", "[", "\"scores\"", "]", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "query_dets", ".", "append", "(", "box_w_scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "query_feats", ".", "append", "(", "output", "[", "\"embeddings\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# extract the features of query boxes", "\n", "", "", "query_box_feats", "=", "[", "]", "\n", "for", "images", ",", "targets", "in", "tqdm", "(", "query_loader", ",", "ncols", "=", "0", ")", ":", "\n", "            ", "images", ",", "targets", "=", "to_device", "(", "images", ",", "targets", ",", "device", ")", "\n", "embeddings", "=", "model", "(", "images", ",", "targets", ")", "\n", "assert", "len", "(", "embeddings", ")", "==", "1", ",", "\"batch size in test phase should be 1\"", "\n", "query_box_feats", ".", "append", "(", "embeddings", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "mkdir", "(", "\"data/eval_cache\"", ")", "\n", "save_dict", "=", "{", "\n", "\"gallery_dets\"", ":", "gallery_dets", ",", "\n", "\"gallery_feats\"", ":", "gallery_feats", ",", "\n", "\"query_dets\"", ":", "query_dets", ",", "\n", "\"query_feats\"", ":", "query_feats", ",", "\n", "\"query_box_feats\"", ":", "query_box_feats", ",", "\n", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "\"data/eval_cache/eval_cache.pth\"", ")", "\n", "\n", "", "eval_detection", "(", "gallery_loader", ".", "dataset", ",", "gallery_dets", ",", "det_thresh", "=", "0.01", ")", "\n", "eval_search_func", "=", "(", "\n", "eval_search_cuhk", "if", "gallery_loader", ".", "dataset", ".", "name", "==", "\"CUHK-SYSU\"", "else", "eval_search_prw", "\n", ")", "\n", "eval_search_func", "(", "\n", "gallery_loader", ".", "dataset", ",", "\n", "query_loader", ".", "dataset", ",", "\n", "gallery_dets", ",", "\n", "gallery_feats", ",", "\n", "query_box_feats", ",", "\n", "query_dets", ",", "\n", "query_feats", ",", "\n", "cbgm", "=", "use_cbgm", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.defaults.get_default_cfg": [[150, 155], ["_C.clone"], "function", ["None"], ["def", "get_default_cfg", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get a copy of the default config.\n    \"\"\"", "\n", "return", "_C", ".", "clone", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.train.main": [[16, 115], ["defaults.get_default_cfg", "defaults.get_default_cfg.merge_from_list", "defaults.get_default_cfg.freeze", "torch.device", "torch.device", "print", "models.seqnet.SeqNet", "models.seqnet.SeqNet.to", "print", "datasets.build_train_loader", "datasets.build_test_loader", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "utils.utils.mkdir", "os.join", "print", "print", "time.time", "range", "str", "print", "defaults.get_default_cfg.merge_from_file", "utils.utils.set_random_seed", "utils.utils.resume_from_ckpt", "engine.evaluate_performance", "exit", "open", "f.write", "os.join", "utils.utils.mkdir", "SummaryWriter", "print", "engine.train_one_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "SummaryWriter.close", "time.time", "datetime.timedelta", "models.seqnet.SeqNet.parameters", "utils.utils.resume_from_ckpt", "defaults.get_default_cfg.dump", "engine.evaluate_performance", "utils.utils.save_on_master", "os.join", "int", "models.seqnet.SeqNet.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.defaults.get_default_cfg", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_train_loader", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_test_loader", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.mkdir", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.set_random_seed", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.resume_from_ckpt", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.evaluate_performance", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.mkdir", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.resume_from_ckpt", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.None.engine.evaluate_performance", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.save_on_master"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_default_cfg", "(", ")", "\n", "if", "args", ".", "cfg_file", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "cfg", ".", "DEVICE", ")", "\n", "if", "cfg", ".", "SEED", ">=", "0", ":", "\n", "        ", "set_random_seed", "(", "cfg", ".", "SEED", ")", "\n", "\n", "", "print", "(", "\"Creating model\"", ")", "\n", "model", "=", "SeqNet", "(", "cfg", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "\"Loading data\"", ")", "\n", "train_loader", "=", "build_train_loader", "(", "cfg", ")", "\n", "gallery_loader", ",", "query_loader", "=", "build_test_loader", "(", "cfg", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "assert", "args", ".", "ckpt", ",", "\"--ckpt must be specified when --eval enabled\"", "\n", "resume_from_ckpt", "(", "args", ".", "ckpt", ",", "model", ")", "\n", "evaluate_performance", "(", "\n", "model", ",", "\n", "gallery_loader", ",", "\n", "query_loader", ",", "\n", "device", ",", "\n", "use_gt", "=", "cfg", ".", "EVAL_USE_GT", ",", "\n", "use_cache", "=", "cfg", ".", "EVAL_USE_CACHE", ",", "\n", "use_cbgm", "=", "cfg", ".", "EVAL_USE_CBGM", ",", "\n", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "\n", "momentum", "=", "cfg", ".", "SOLVER", ".", "SGD_MOMENTUM", ",", "\n", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ",", "\n", ")", "\n", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "cfg", ".", "SOLVER", ".", "LR_DECAY_MILESTONES", ",", "gamma", "=", "0.1", "\n", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "assert", "args", ".", "ckpt", ",", "\"--ckpt must be specified when --resume enabled\"", "\n", "start_epoch", "=", "resume_from_ckpt", "(", "args", ".", "ckpt", ",", "model", ",", "optimizer", ",", "lr_scheduler", ")", "+", "1", "\n", "\n", "", "print", "(", "\"Creating output folder\"", ")", "\n", "output_dir", "=", "cfg", ".", "OUTPUT_DIR", "\n", "mkdir", "(", "output_dir", ")", "\n", "path", "=", "osp", ".", "join", "(", "output_dir", ",", "\"config.yaml\"", ")", "\n", "with", "open", "(", "path", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "cfg", ".", "dump", "(", ")", ")", "\n", "", "print", "(", "f\"Full config is saved to {path}\"", ")", "\n", "tfboard", "=", "None", "\n", "if", "cfg", ".", "TF_BOARD", ":", "\n", "        ", "from", "torch", ".", "utils", ".", "tensorboard", "import", "SummaryWriter", "\n", "\n", "tf_log_path", "=", "osp", ".", "join", "(", "output_dir", ",", "\"tf_log\"", ")", "\n", "mkdir", "(", "tf_log_path", ")", "\n", "tfboard", "=", "SummaryWriter", "(", "log_dir", "=", "tf_log_path", ")", "\n", "print", "(", "f\"TensorBoard files are saved to {tf_log_path}\"", ")", "\n", "\n", "", "print", "(", "\"Start training\"", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ")", ":", "\n", "        ", "train_one_epoch", "(", "cfg", ",", "model", ",", "optimizer", ",", "train_loader", ",", "device", ",", "epoch", ",", "tfboard", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", "%", "cfg", ".", "EVAL_PERIOD", "==", "0", "or", "epoch", "==", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "-", "1", ":", "\n", "            ", "evaluate_performance", "(", "\n", "model", ",", "\n", "gallery_loader", ",", "\n", "query_loader", ",", "\n", "device", ",", "\n", "use_gt", "=", "cfg", ".", "EVAL_USE_GT", ",", "\n", "use_cache", "=", "cfg", ".", "EVAL_USE_CACHE", ",", "\n", "use_cbgm", "=", "cfg", ".", "EVAL_USE_CBGM", ",", "\n", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "cfg", ".", "CKPT_PERIOD", "==", "0", "or", "epoch", "==", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "-", "1", ":", "\n", "            ", "save_on_master", "(", "\n", "{", "\n", "\"model\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"lr_scheduler\"", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "}", ",", "\n", "osp", ".", "join", "(", "output_dir", ",", "f\"epoch_{epoch}.pth\"", ")", ",", "\n", ")", "\n", "\n", "", "", "if", "tfboard", ":", "\n", "        ", "tfboard", ".", "close", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "f\"Total training time {total_time_str}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.Compose.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.Compose.__call__": [[10, 14], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "image", ",", "target", "=", "t", "(", "image", ",", "target", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.RandomHorizontalFlip.__init__": [[17, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.RandomHorizontalFlip.__call__": [[20, 28], ["random.random", "image.flip.flip.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "height", ",", "width", "=", "image", ".", "shape", "[", "-", "2", ":", "]", "\n", "image", "=", "image", ".", "flip", "(", "-", "1", ")", "\n", "bbox", "=", "target", "[", "\"boxes\"", "]", "\n", "bbox", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "width", "-", "bbox", "[", ":", ",", "[", "2", ",", "0", "]", "]", "\n", "target", "[", "\"boxes\"", "]", "=", "bbox", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.ToTensor.__call__": [[31, 35], ["torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "target", ")", ":", "\n", "# convert [0, 255] to [0, 1]", "\n", "        ", "image", "=", "F", ".", "to_tensor", "(", "image", ")", "\n", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.build_transforms": [[37, 43], ["transforms.append", "transforms.Compose", "transforms.ToTensor", "transforms.append", "transforms.RandomHorizontalFlip"], "function", ["None"], ["", "", "def", "build_transforms", "(", "is_train", ")", ":", "\n", "    ", "transforms", "=", "[", "]", "\n", "transforms", ".", "append", "(", "ToTensor", "(", ")", ")", "\n", "if", "is_train", ":", "\n", "        ", "transforms", ".", "append", "(", "RandomHorizontalFlip", "(", ")", ")", "\n", "", "return", "Compose", "(", "transforms", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KMNode.__init__": [[11, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "exception", "=", "0", ",", "match", "=", "None", ",", "visit", "=", "False", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "exception", "=", "exception", "\n", "self", ".", "match", "=", "match", "\n", "self", ".", "visit", "=", "visit", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.__init__": [[19, 28], ["float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "None", "\n", "self", ".", "x_nodes", "=", "[", "]", "\n", "self", ".", "y_nodes", "=", "[", "]", "\n", "self", ".", "minz", "=", "float", "(", "\"inf\"", ")", "\n", "self", ".", "x_length", "=", "0", "\n", "self", ".", "y_length", "=", "0", "\n", "self", ".", "index_x", "=", "0", "\n", "self", ".", "index_y", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.__del__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.set_matrix": [[32, 66], ["set", "set", "len", "len", "numpy.zeros", "range", "set.add", "set.add", "len", "len", "km.KMNode", "km.KMNode", "max", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max"], ["", "def", "set_matrix", "(", "self", ",", "x_y_values", ")", ":", "\n", "        ", "xs", "=", "set", "(", ")", "\n", "ys", "=", "set", "(", ")", "\n", "for", "x", ",", "y", ",", "value", "in", "x_y_values", ":", "\n", "            ", "xs", ".", "add", "(", "x", ")", "\n", "ys", ".", "add", "(", "y", ")", "\n", "\n", "# \u9009\u53d6\u8f83\u5c0f\u7684\u4f5c\u4e3ax", "\n", "", "if", "len", "(", "xs", ")", "<", "len", "(", "ys", ")", ":", "\n", "            ", "self", ".", "index_x", "=", "0", "\n", "self", ".", "index_y", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "index_x", "=", "1", "\n", "self", ".", "index_y", "=", "0", "\n", "xs", ",", "ys", "=", "ys", ",", "xs", "\n", "\n", "", "x_dic", "=", "{", "x", ":", "i", "for", "i", ",", "x", "in", "enumerate", "(", "xs", ")", "}", "\n", "y_dic", "=", "{", "y", ":", "j", "for", "j", ",", "y", "in", "enumerate", "(", "ys", ")", "}", "\n", "self", ".", "x_nodes", "=", "[", "KMNode", "(", "x", ")", "for", "x", "in", "xs", "]", "\n", "self", ".", "y_nodes", "=", "[", "KMNode", "(", "y", ")", "for", "y", "in", "ys", "]", "\n", "self", ".", "x_length", "=", "len", "(", "xs", ")", "\n", "self", ".", "y_length", "=", "len", "(", "ys", ")", "\n", "\n", "self", ".", "matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "x_length", ",", "self", ".", "y_length", ")", ")", "\n", "for", "row", "in", "x_y_values", ":", "\n", "            ", "x", "=", "row", "[", "self", ".", "index_x", "]", "\n", "y", "=", "row", "[", "self", ".", "index_y", "]", "\n", "value", "=", "row", "[", "2", "]", "\n", "x_index", "=", "x_dic", "[", "x", "]", "\n", "y_index", "=", "y_dic", "[", "y", "]", "\n", "self", ".", "matrix", "[", "x_index", ",", "y_index", "]", "=", "value", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "x_length", ")", ":", "\n", "            ", "self", ".", "x_nodes", "[", "i", "]", ".", "exception", "=", "max", "(", "self", ".", "matrix", "[", "i", ",", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.km": [[67, 79], ["range", "float", "km.KuhnMunkres.set_false", "km.KuhnMunkres.set_false", "km.KuhnMunkres.dfs", "km.KuhnMunkres.change_exception", "km.KuhnMunkres.change_exception"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.set_false", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.set_false", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.dfs", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.change_exception", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.change_exception"], ["", "", "def", "km", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "x_length", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "self", ".", "minz", "=", "float", "(", "\"inf\"", ")", "\n", "self", ".", "set_false", "(", "self", ".", "x_nodes", ")", "\n", "self", ".", "set_false", "(", "self", ".", "y_nodes", ")", "\n", "\n", "if", "self", ".", "dfs", "(", "i", ")", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "change_exception", "(", "self", ".", "x_nodes", ",", "-", "self", ".", "minz", ")", "\n", "self", ".", "change_exception", "(", "self", ".", "y_nodes", ",", "self", ".", "minz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.dfs": [[80, 97], ["range", "abs", "km.KuhnMunkres.dfs", "min"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.dfs"], ["", "", "", "def", "dfs", "(", "self", ",", "i", ")", ":", "\n", "        ", "x_node", "=", "self", ".", "x_nodes", "[", "i", "]", "\n", "x_node", ".", "visit", "=", "True", "\n", "for", "j", "in", "range", "(", "self", ".", "y_length", ")", ":", "\n", "            ", "y_node", "=", "self", ".", "y_nodes", "[", "j", "]", "\n", "if", "not", "y_node", ".", "visit", ":", "\n", "                ", "t", "=", "x_node", ".", "exception", "+", "y_node", ".", "exception", "-", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "if", "abs", "(", "t", ")", "<", "zero_threshold", ":", "\n", "                    ", "y_node", ".", "visit", "=", "True", "\n", "if", "y_node", ".", "match", "is", "None", "or", "self", ".", "dfs", "(", "y_node", ".", "match", ")", ":", "\n", "                        ", "x_node", ".", "match", "=", "j", "\n", "y_node", ".", "match", "=", "i", "\n", "return", "True", "\n", "", "", "else", ":", "\n", "                    ", "if", "t", ">=", "zero_threshold", ":", "\n", "                        ", "self", ".", "minz", "=", "min", "(", "self", ".", "minz", ",", "t", ")", "\n", "", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.set_false": [[98, 101], ["None"], "methods", ["None"], ["", "def", "set_false", "(", "self", ",", "nodes", ")", ":", "\n", "        ", "for", "node", "in", "nodes", ":", "\n", "            ", "node", ".", "visit", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.change_exception": [[102, 106], ["None"], "methods", ["None"], ["", "", "def", "change_exception", "(", "self", ",", "nodes", ",", "change", ")", ":", "\n", "        ", "for", "node", "in", "nodes", ":", "\n", "            ", "if", "node", ".", "visit", ":", "\n", "                ", "node", ".", "exception", "+=", "change", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.get_connect_result": [[107, 122], ["range", "ret.append"], "methods", ["None"], ["", "", "", "def", "get_connect_result", "(", "self", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "x_length", ")", ":", "\n", "            ", "x_node", "=", "self", ".", "x_nodes", "[", "i", "]", "\n", "j", "=", "x_node", ".", "match", "\n", "y_node", "=", "self", ".", "y_nodes", "[", "j", "]", "\n", "x_id", "=", "x_node", ".", "id", "\n", "y_id", "=", "y_node", ".", "id", "\n", "value", "=", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", "\n", "\n", "if", "self", ".", "index_x", "==", "1", "and", "self", ".", "index_y", "==", "0", ":", "\n", "                ", "x_id", ",", "y_id", "=", "y_id", ",", "x_id", "\n", "", "ret", ".", "append", "(", "(", "x_id", ",", "y_id", ",", "value", ")", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.get_max_value_result": [[123, 136], ["range", "max"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max"], ["", "def", "get_max_value_result", "(", "self", ")", ":", "\n", "# ret = 0", "\n", "        ", "ret", "=", "-", "100", "\n", "# ret = []", "\n", "for", "i", "in", "range", "(", "self", ".", "x_length", ")", ":", "\n", "            ", "j", "=", "self", ".", "x_nodes", "[", "i", "]", ".", "match", "\n", "# ret += self.matrix[i][j]", "\n", "ret", "=", "max", "(", "ret", ",", "self", ".", "matrix", "[", "i", "]", "[", "j", "]", ")", "\n", "# ret.append(self.matrix[i][j])", "\n", "# ret.sort()", "\n", "# ret = ret[-1:]", "\n", "# ret = np.array(ret).mean()", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.run_kuhn_munkres": [[138, 143], ["km.KuhnMunkres", "km.KuhnMunkres.set_matrix", "KuhnMunkres.km", "km.KuhnMunkres.get_connect_result", "km.KuhnMunkres.get_max_value_result"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.set_matrix", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.km", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.get_connect_result", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.KuhnMunkres.get_max_value_result"], ["", "", "def", "run_kuhn_munkres", "(", "x_y_values", ")", ":", "\n", "    ", "process", "=", "KuhnMunkres", "(", ")", "\n", "process", ".", "set_matrix", "(", "x_y_values", ")", "\n", "process", ".", "km", "(", ")", "\n", "return", "process", ".", "get_connect_result", "(", ")", ",", "process", ".", "get_max_value_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.test": [[145, 154], ["random.seed", "range", "km.run_kuhn_munkres", "range", "random.random", "values.append"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.km.run_kuhn_munkres"], ["", "def", "test", "(", ")", ":", "\n", "    ", "values", "=", "[", "]", "\n", "random", ".", "seed", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "500", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1000", ")", ":", "\n", "            ", "value", "=", "random", ".", "random", "(", ")", "\n", "values", ".", "append", "(", "(", "i", ",", "j", ",", "value", ")", ")", "\n", "\n", "", "", "return", "run_kuhn_munkres", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.__init__": [[26, 33], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.update": [[34, 38], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.synchronize_between_processes": [[39, 51], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "\"cuda\"", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.median": [[52, 56], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.avg": [[57, 61], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.global_avg": [[62, 65], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max": [[66, 69], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.value": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.__str__": [[74, 81], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.__init__": [[85, 88], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update": [[89, 95], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.__getattr__": [[96, 102], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.__str__": [[103, 108], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.synchronize_between_processes": [[109, 112], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.add_meter": [[113, 115], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.log_every": [[116, 186], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "print", "utils.MetricLogger.delimiter.join", "utils.MetricLogger.delimiter.join", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "\"\"", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "\"{avg:.4f}\"", ")", "\n", "space_fmt", "=", "\":\"", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "\"d\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "header", ",", "\n", "\"[{0\"", "+", "space_fmt", "+", "\"}/{1}]\"", ",", "\n", "\"eta: {eta}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"time: {time}\"", ",", "\n", "\"data: {data}\"", ",", "\n", "\"max mem: {memory:.0f}\"", ",", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "\n", "[", "\n", "header", ",", "\n", "\"[{0\"", "+", "space_fmt", "+", "\"}/{1}]\"", ",", "\n", "\"eta: {eta}\"", ",", "\n", "\"{meters}\"", ",", "\n", "\"time: {time}\"", ",", "\n", "\"data: {data}\"", ",", "\n", "]", "\n", ")", "\n", "", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\n", "log_msg", ".", "format", "(", "\n", "i", ",", "\n", "len", "(", "iterable", ")", ",", "\n", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "\n", "data", "=", "str", "(", "data_time", ")", ",", "\n", ")", "\n", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "\n", "\"{} Total time: {} ({:.4f} s / it)\"", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.all_gather": [[193, 236], ["utils.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.tensor", "torch.tensor", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.tensor", "torch.tensor", "int", "tensor_list.append", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "range", "size.item", "torch.empty", "torch.empty", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_world_size", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.all_gather", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.all_gather"], ["", "", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n\n    Args:\n        data: any picklable object\n\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "tensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ",", "device", "=", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "empty", "(", "(", "max_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "empty", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.reduce_dict": [[238, 264], ["utils.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.all_reduce", "input_dict.keys", "names.append", "torch.stack.append", "zip"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_world_size"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Reduce the values in the dictionary from all processes so that all processes\n    have the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "all_reduce", "(", "values", ")", "\n", "if", "average", ":", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.setup_for_distributed": [[266, 280], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "\"force\"", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_dist_avail_and_initialized": [[282, 288], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_world_size": [[290, 294], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_world_size", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_rank": [[296, 300], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_rank", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_main_process": [[302, 304], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.save_on_master": [[306, 309], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.init_distributed_mode": [[311, 337], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "int", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "    ", "if", "\"RANK\"", "in", "os", ".", "environ", "and", "\"WORLD_SIZE\"", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "\"LOCAL_RANK\"", "]", ")", "\n", "", "elif", "\"SLURM_PROCID\"", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"SLURM_PROCID\"", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Not using distributed mode\"", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "\"nccl\"", "\n", "print", "(", "\"| distributed init (rank {}): {}\"", ".", "format", "(", "args", ".", "rank", ",", "args", ".", "dist_url", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "dist_backend", ",", "\n", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "\n", "rank", "=", "args", ".", "rank", ",", "\n", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.filename": [[342, 344], ["os.splitext", "os.basename"], "function", ["None"], ["", "def", "filename", "(", "path", ")", ":", "\n", "    ", "return", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "path", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.mkdir": [[346, 352], ["os.makedirs", "os.makedirs"], "function", ["None"], ["", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.read_json": [[354, 358], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.write_json": [[360, 368], ["utils.mkdir", "obj.copy", "obj.copy.items", "os.dirname", "isinstance", "open", "json.dump", "obj.copy.pop"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.mkdir"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "_obj", "=", "obj", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "_obj", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "_obj", ".", "pop", "(", "k", ")", "\n", "", "", "with", "open", "(", "fpath", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "_obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "\",\"", ",", "\": \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.symlink": [[370, 374], ["os.symlink", "os.symlink", "os.path.lexists", "os.path.lexists", "os.remove", "os.remove"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.symlink", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.symlink"], ["", "", "def", "symlink", "(", "src", ",", "dst", ",", "overwrite", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "dst", ")", "and", "overwrite", ":", "\n", "        ", "os", ".", "remove", "(", "dst", ")", "\n", "", "os", ".", "symlink", "(", "src", ",", "dst", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.create_small_table": [[379, 400], ["tuple", "tabulate.tabulate", "zip", "small_dict.items"], "function", ["None"], ["", "def", "create_small_table", "(", "small_dict", ")", ":", "\n", "    ", "\"\"\"\n    Create a small table using the keys of small_dict as headers. This is only\n    suitable for small dictionaries.\n\n    Args:\n        small_dict (dict): a result dictionary of only a few items.\n\n    Returns:\n        str: the table as a string.\n    \"\"\"", "\n", "keys", ",", "values", "=", "tuple", "(", "zip", "(", "*", "small_dict", ".", "items", "(", ")", ")", ")", "\n", "table", "=", "tabulate", "(", "\n", "[", "values", "]", ",", "\n", "headers", "=", "keys", ",", "\n", "tablefmt", "=", "\"pipe\"", ",", "\n", "floatfmt", "=", "\".3f\"", ",", "\n", "stralign", "=", "\"center\"", ",", "\n", "numalign", "=", "\"center\"", ",", "\n", ")", "\n", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.warmup_lr_scheduler": [[402, 410], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "float"], "function", ["None"], ["", "def", "warmup_lr_scheduler", "(", "optimizer", ",", "warmup_iters", ",", "warmup_factor", ")", ":", "\n", "    ", "def", "f", "(", "x", ")", ":", "\n", "        ", "if", "x", ">=", "warmup_iters", ":", "\n", "            ", "return", "1", "\n", "", "alpha", "=", "float", "(", "x", ")", "/", "warmup_iters", "\n", "return", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "\n", "", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.resume_from_ckpt": [[412, 422], ["torch.load", "torch.load", "model.load_state_dict", "utils.setup_for_distributed.print", "utils.setup_for_distributed.print", "optimizer.load_state_dict", "lr_scheduler.load_state_dict"], "function", ["None"], ["", "def", "resume_from_ckpt", "(", "ckpt_path", ",", "model", ",", "optimizer", "=", "None", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "    ", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"model\"", "]", ",", "strict", "=", "False", ")", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optimizer\"", "]", ")", "\n", "", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "        ", "lr_scheduler", ".", "load_state_dict", "(", "ckpt", "[", "\"lr_scheduler\"", "]", ")", "\n", "", "print", "(", "f\"loaded checkpoint {ckpt_path}\"", ")", "\n", "print", "(", "f\"model was trained for {ckpt['epoch']} epochs\"", ")", "\n", "return", "ckpt", "[", "\"epoch\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.set_random_seed": [[424, 433], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "random.seed", "numpy.random.seed", "str"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "\"PYTHONHASHSEED\"", "]", "=", "str", "(", "seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.base.BaseDataset.__init__": [[10, 16], ["base.BaseDataset._load_annotations"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_annotations"], ["def", "__init__", "(", "self", ",", "root", ",", "transforms", ",", "split", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "split", "=", "split", "\n", "assert", "self", ".", "split", "in", "(", "\"train\"", ",", "\"gallery\"", ",", "\"query\"", ")", "\n", "self", ".", "annotations", "=", "self", ".", "_load_annotations", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.base.BaseDataset._load_annotations": [[17, 27], ["None"], "methods", ["None"], ["", "def", "_load_annotations", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        For each image, load its annotation that is a dictionary with the following keys:\n            img_name (str): image name\n            img_path (str): image path\n            boxes (np.array[N, 4]): ground-truth boxes in (x1, y1, x2, y2) format\n            pids (np.array[N]): person IDs corresponding to these boxes\n            cam_id (int): camera ID (only for PRW dataset)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.base.BaseDataset.__getitem__": [[28, 37], ["PIL.Image.open().convert", "torch.as_tensor", "torch.as_tensor", "base.BaseDataset.transforms", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "anno", "=", "self", ".", "annotations", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "anno", "[", "\"img_path\"", "]", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "boxes", "=", "torch", ".", "as_tensor", "(", "anno", "[", "\"boxes\"", "]", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "labels", "=", "torch", ".", "as_tensor", "(", "anno", "[", "\"pids\"", "]", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "target", "=", "{", "\"img_name\"", ":", "anno", "[", "\"img_name\"", "]", ",", "\"boxes\"", ":", "boxes", ",", "\"labels\"", ":", "labels", "}", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "transforms", "(", "img", ",", "target", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.base.BaseDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "annotations", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.cuhk_sysu.CUHKSYSU.__init__": [[10, 14], ["os.join", "base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transforms", ",", "split", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"CUHK-SYSU\"", "\n", "self", ".", "img_prefix", "=", "osp", ".", "join", "(", "root", ",", "\"Image\"", ",", "\"SSM\"", ")", "\n", "super", "(", "CUHKSYSU", ",", "self", ")", ".", "__init__", "(", "root", ",", "transforms", ",", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.cuhk_sysu.CUHKSYSU._load_queries": [[15, 33], ["scipy.io.loadmat", "protoc[].squeeze", "os.join", "str", "[].astype", "queries.append", "os.join", "numpy.array"], "methods", ["None"], ["", "def", "_load_queries", "(", "self", ")", ":", "\n", "# TestG50: a test protocol, 50 gallery images per query", "\n", "        ", "protoc", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation/test/train_test/TestG50.mat\"", ")", ")", "\n", "protoc", "=", "protoc", "[", "\"TestG50\"", "]", ".", "squeeze", "(", ")", "\n", "queries", "=", "[", "]", "\n", "for", "item", "in", "protoc", "[", "\"Query\"", "]", ":", "\n", "            ", "img_name", "=", "str", "(", "item", "[", "\"imname\"", "]", "[", "0", ",", "0", "]", "[", "0", "]", ")", "\n", "roi", "=", "item", "[", "\"idlocate\"", "]", "[", "0", ",", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "roi", "[", "2", ":", "]", "+=", "roi", "[", ":", "2", "]", "\n", "queries", ".", "append", "(", "\n", "{", "\n", "\"img_name\"", ":", "img_name", ",", "\n", "\"img_path\"", ":", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_name", ")", ",", "\n", "\"boxes\"", ":", "roi", "[", "np", ".", "newaxis", ",", ":", "]", ",", "\n", "\"pids\"", ":", "np", ".", "array", "(", "[", "-", "100", "]", ")", ",", "# dummy pid", "\n", "}", "\n", ")", "\n", "", "return", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.cuhk_sysu.CUHKSYSU._load_split_img_names": [[34, 52], ["scipy.io.loadmat", "gallery_imgs[].squeeze", "scipy.io.loadmat", "all_imgs[].squeeze", "sorted", "os.join", "str", "os.join", "str", "list", "set", "set"], "methods", ["None"], ["", "def", "_load_split_img_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the image names for the specific split.\n        \"\"\"", "\n", "assert", "self", ".", "split", "in", "(", "\"train\"", ",", "\"gallery\"", ")", "\n", "# gallery images", "\n", "gallery_imgs", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation\"", ",", "\"pool.mat\"", ")", ")", "\n", "gallery_imgs", "=", "gallery_imgs", "[", "\"pool\"", "]", ".", "squeeze", "(", ")", "\n", "gallery_imgs", "=", "[", "str", "(", "a", "[", "0", "]", ")", "for", "a", "in", "gallery_imgs", "]", "\n", "if", "self", ".", "split", "==", "\"gallery\"", ":", "\n", "            ", "return", "gallery_imgs", "\n", "# all images", "\n", "", "all_imgs", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation\"", ",", "\"Images.mat\"", ")", ")", "\n", "all_imgs", "=", "all_imgs", "[", "\"Img\"", "]", ".", "squeeze", "(", ")", "\n", "all_imgs", "=", "[", "str", "(", "a", "[", "0", "]", "[", "0", "]", ")", "for", "a", "in", "all_imgs", "]", "\n", "# training images = all images - gallery images", "\n", "training_imgs", "=", "sorted", "(", "list", "(", "set", "(", "all_imgs", ")", "-", "set", "(", "gallery_imgs", ")", ")", ")", "\n", "return", "training_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.cuhk_sysu.CUHKSYSU._load_annotations": [[53, 121], ["scipy.io.loadmat", "all_imgs[].squeeze", "cuhk_sysu.CUHKSYSU._load_split_img_names", "cuhk_sysu.CUHKSYSU._load_queries", "os.join", "str", "numpy.asarray", "boxes.reshape.reshape.reshape", "boxes.reshape.reshape.astype", "range", "scipy.io.loadmat", "train[].squeeze", "enumerate", "scipy.io.loadmat", "protoc[].squeeze", "enumerate", "annotations.append", "numpy.where", "numpy.ones", "numpy.all", "os.join", "[].squeeze", "os.join", "str", "[].squeeze().astype", "cuhk_sysu.CUHKSYSU._load_annotations.set_box_pid"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_split_img_names", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_queries"], ["", "def", "_load_annotations", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"query\"", ":", "\n", "            ", "return", "self", ".", "_load_queries", "(", ")", "\n", "\n", "# load all images and build a dict from image to boxes", "\n", "", "all_imgs", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation\"", ",", "\"Images.mat\"", ")", ")", "\n", "all_imgs", "=", "all_imgs", "[", "\"Img\"", "]", ".", "squeeze", "(", ")", "\n", "name_to_boxes", "=", "{", "}", "\n", "name_to_pids", "=", "{", "}", "\n", "unlabeled_pid", "=", "5555", "# default pid for unlabeled people", "\n", "for", "img_name", ",", "_", ",", "boxes", "in", "all_imgs", ":", "\n", "            ", "img_name", "=", "str", "(", "img_name", "[", "0", "]", ")", "\n", "boxes", "=", "np", ".", "asarray", "(", "[", "b", "[", "0", "]", "for", "b", "in", "boxes", "[", "0", "]", "]", ")", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "boxes", ".", "shape", "[", "0", "]", ",", "4", ")", "# (x1, y1, w, h)", "\n", "valid_index", "=", "np", ".", "where", "(", "(", "boxes", "[", ":", ",", "2", "]", ">", "0", ")", "&", "(", "boxes", "[", ":", ",", "3", "]", ">", "0", ")", ")", "[", "0", "]", "\n", "assert", "valid_index", ".", "size", ">", "0", ",", "\"Warning: {} has no valid boxes.\"", ".", "format", "(", "img_name", ")", "\n", "boxes", "=", "boxes", "[", "valid_index", "]", "\n", "name_to_boxes", "[", "img_name", "]", "=", "boxes", ".", "astype", "(", "np", ".", "int32", ")", "\n", "name_to_pids", "[", "img_name", "]", "=", "unlabeled_pid", "*", "np", ".", "ones", "(", "boxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "", "def", "set_box_pid", "(", "boxes", ",", "box", ",", "pids", ",", "pid", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "boxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "np", ".", "all", "(", "boxes", "[", "i", "]", "==", "box", ")", ":", "\n", "                    ", "pids", "[", "i", "]", "=", "pid", "\n", "return", "\n", "\n", "# assign a unique pid from 1 to N for each identity", "\n", "", "", "", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "train", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation/test/train_test/Train.mat\"", ")", ")", "\n", "train", "=", "train", "[", "\"Train\"", "]", ".", "squeeze", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "train", ")", ":", "\n", "                ", "scenes", "=", "item", "[", "0", ",", "0", "]", "[", "2", "]", ".", "squeeze", "(", ")", "\n", "for", "img_name", ",", "box", ",", "_", "in", "scenes", ":", "\n", "                    ", "img_name", "=", "str", "(", "img_name", "[", "0", "]", ")", "\n", "box", "=", "box", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "set_box_pid", "(", "name_to_boxes", "[", "img_name", "]", ",", "box", ",", "name_to_pids", "[", "img_name", "]", ",", "index", "+", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "protoc", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotation/test/train_test/TestG50.mat\"", ")", ")", "\n", "protoc", "=", "protoc", "[", "\"TestG50\"", "]", ".", "squeeze", "(", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "protoc", ")", ":", "\n", "# query", "\n", "                ", "im_name", "=", "str", "(", "item", "[", "\"Query\"", "]", "[", "0", ",", "0", "]", "[", "0", "]", "[", "0", "]", ")", "\n", "box", "=", "item", "[", "\"Query\"", "]", "[", "0", ",", "0", "]", "[", "1", "]", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "set_box_pid", "(", "name_to_boxes", "[", "im_name", "]", ",", "box", ",", "name_to_pids", "[", "im_name", "]", ",", "index", "+", "1", ")", "\n", "# gallery", "\n", "gallery", "=", "item", "[", "\"Gallery\"", "]", ".", "squeeze", "(", ")", "\n", "for", "im_name", ",", "box", ",", "_", "in", "gallery", ":", "\n", "                    ", "im_name", "=", "str", "(", "im_name", "[", "0", "]", ")", "\n", "if", "box", ".", "size", "==", "0", ":", "\n", "                        ", "break", "\n", "", "box", "=", "box", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "set_box_pid", "(", "name_to_boxes", "[", "im_name", "]", ",", "box", ",", "name_to_pids", "[", "im_name", "]", ",", "index", "+", "1", ")", "\n", "\n", "", "", "", "annotations", "=", "[", "]", "\n", "imgs", "=", "self", ".", "_load_split_img_names", "(", ")", "\n", "for", "img_name", "in", "imgs", ":", "\n", "            ", "boxes", "=", "name_to_boxes", "[", "img_name", "]", "\n", "boxes", "[", ":", ",", "2", ":", "]", "+=", "boxes", "[", ":", ",", ":", "2", "]", "# (x1, y1, w, h) -> (x1, y1, x2, y2)", "\n", "pids", "=", "name_to_pids", "[", "img_name", "]", "\n", "annotations", ".", "append", "(", "\n", "{", "\n", "\"img_name\"", ":", "img_name", ",", "\n", "\"img_path\"", ":", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_name", ")", ",", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"pids\"", ":", "pids", ",", "\n", "}", "\n", ")", "\n", "", "return", "annotations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.print_statistics": [[10, 51], ["len", "set", "print", "sorted", "set.add", "list", "statistics.update", "statistics.update", "utils.utils.create_small_table", "len", "min", "max", "len", "min", "max", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.create_small_table", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.SmoothedValue.max"], ["def", "print_statistics", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    Print dataset statistics.\n    \"\"\"", "\n", "num_imgs", "=", "len", "(", "dataset", ".", "annotations", ")", "\n", "num_boxes", "=", "0", "\n", "pid_set", "=", "set", "(", ")", "\n", "for", "anno", "in", "dataset", ".", "annotations", ":", "\n", "        ", "num_boxes", "+=", "anno", "[", "\"boxes\"", "]", ".", "shape", "[", "0", "]", "\n", "for", "pid", "in", "anno", "[", "\"pids\"", "]", ":", "\n", "            ", "pid_set", ".", "add", "(", "pid", ")", "\n", "", "", "statistics", "=", "{", "\n", "\"dataset\"", ":", "dataset", ".", "name", ",", "\n", "\"split\"", ":", "dataset", ".", "split", ",", "\n", "\"num_images\"", ":", "num_imgs", ",", "\n", "\"num_boxes\"", ":", "num_boxes", ",", "\n", "}", "\n", "if", "dataset", ".", "name", "!=", "\"CUHK-SYSU\"", "or", "dataset", ".", "split", "!=", "\"query\"", ":", "\n", "        ", "pid_list", "=", "sorted", "(", "list", "(", "pid_set", ")", ")", "\n", "if", "dataset", ".", "split", "==", "\"query\"", ":", "\n", "            ", "num_pids", ",", "min_pid", ",", "max_pid", "=", "len", "(", "pid_list", ")", ",", "min", "(", "pid_list", ")", ",", "max", "(", "pid_list", ")", "\n", "statistics", ".", "update", "(", "\n", "{", "\n", "\"num_labeled_pids\"", ":", "num_pids", ",", "\n", "\"min_labeled_pid\"", ":", "int", "(", "min_pid", ")", ",", "\n", "\"max_labeled_pid\"", ":", "int", "(", "max_pid", ")", ",", "\n", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "unlabeled_pid", "=", "pid_list", "[", "-", "1", "]", "\n", "pid_list", "=", "pid_list", "[", ":", "-", "1", "]", "# remove unlabeled pid", "\n", "num_pids", ",", "min_pid", ",", "max_pid", "=", "len", "(", "pid_list", ")", ",", "min", "(", "pid_list", ")", ",", "max", "(", "pid_list", ")", "\n", "statistics", ".", "update", "(", "\n", "{", "\n", "\"num_labeled_pids\"", ":", "num_pids", ",", "\n", "\"min_labeled_pid\"", ":", "int", "(", "min_pid", ")", ",", "\n", "\"max_labeled_pid\"", ":", "int", "(", "max_pid", ")", ",", "\n", "\"unlabeled_pid\"", ":", "int", "(", "unlabeled_pid", ")", ",", "\n", "}", "\n", ")", "\n", "", "", "print", "(", "f\"=> {dataset.name}-{dataset.split} loaded:\\n\"", "+", "create_small_table", "(", "statistics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_dataset": [[53, 63], ["cuhk_sysu.CUHKSYSU", "build.print_statistics", "prw.PRW", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.print_statistics"], ["", "def", "build_dataset", "(", "dataset_name", ",", "root", ",", "transforms", ",", "split", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "dataset_name", "==", "\"CUHK-SYSU\"", ":", "\n", "        ", "dataset", "=", "CUHKSYSU", "(", "root", ",", "transforms", ",", "split", ")", "\n", "", "elif", "dataset_name", "==", "\"PRW\"", ":", "\n", "        ", "dataset", "=", "PRW", "(", "root", ",", "transforms", ",", "split", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unknow dataset: {dataset_name}\"", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print_statistics", "(", "dataset", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.collate_fn": [[65, 67], ["tuple", "zip"], "function", ["None"], ["", "def", "collate_fn", "(", "batch", ")", ":", "\n", "    ", "return", "tuple", "(", "zip", "(", "*", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_train_loader": [[69, 80], ["utils.transforms.build_transforms", "build.build_dataset", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.build_transforms", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_dataset"], ["", "def", "build_train_loader", "(", "cfg", ")", ":", "\n", "    ", "transforms", "=", "build_transforms", "(", "is_train", "=", "True", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "INPUT", ".", "DATASET", ",", "cfg", ".", "INPUT", ".", "DATA_ROOT", ",", "transforms", ",", "\"train\"", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "cfg", ".", "INPUT", ".", "BATCH_SIZE_TRAIN", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "cfg", ".", "INPUT", ".", "NUM_WORKERS_TRAIN", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_test_loader": [[83, 104], ["utils.transforms.build_transforms", "build.build_dataset", "build.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.transforms.build_transforms", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_dataset", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.build.build_dataset"], ["", "def", "build_test_loader", "(", "cfg", ")", ":", "\n", "    ", "transforms", "=", "build_transforms", "(", "is_train", "=", "False", ")", "\n", "gallery_set", "=", "build_dataset", "(", "cfg", ".", "INPUT", ".", "DATASET", ",", "cfg", ".", "INPUT", ".", "DATA_ROOT", ",", "transforms", ",", "\"gallery\"", ")", "\n", "query_set", "=", "build_dataset", "(", "cfg", ".", "INPUT", ".", "DATASET", ",", "cfg", ".", "INPUT", ".", "DATA_ROOT", ",", "transforms", ",", "\"query\"", ")", "\n", "gallery_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "gallery_set", ",", "\n", "batch_size", "=", "cfg", ".", "INPUT", ".", "BATCH_SIZE_TEST", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "cfg", ".", "INPUT", ".", "NUM_WORKERS_TEST", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", ")", "\n", "query_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "query_set", ",", "\n", "batch_size", "=", "cfg", ".", "INPUT", ".", "BATCH_SIZE_TEST", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "cfg", ".", "INPUT", ".", "NUM_WORKERS_TEST", ",", "\n", "pin_memory", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", ")", "\n", "return", "gallery_loader", ",", "query_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW.__init__": [[11, 15], ["os.join", "base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transforms", ",", "split", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"PRW\"", "\n", "self", ".", "img_prefix", "=", "osp", ".", "join", "(", "root", ",", "\"frames\"", ")", "\n", "super", "(", "PRW", ",", "self", ")", ".", "__init__", "(", "root", ",", "transforms", ",", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._get_cam_id": [[16, 19], ["re.search().group().replace", "int", "re.search().group", "re.search"], "methods", ["None"], ["", "def", "_get_cam_id", "(", "self", ",", "img_name", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "r\"c\\d\"", ",", "img_name", ")", ".", "group", "(", ")", ".", "replace", "(", "\"c\"", ",", "\"\"", ")", "\n", "return", "int", "(", "match", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_queries": [[20, 48], ["os.join", "open", "f.readlines", "str().split", "int", "numpy.array().astype", "numpy.clip", "queries.append", "float", "float", "float", "float", "str", "numpy.array", "os.join", "numpy.array", "prw.PRW._get_cam_id"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._get_cam_id"], ["", "def", "_load_queries", "(", "self", ")", ":", "\n", "        ", "query_info", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"query_info.txt\"", ")", "\n", "with", "open", "(", "query_info", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "raw", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "queries", "=", "[", "]", "\n", "for", "line", "in", "raw", ":", "\n", "            ", "linelist", "=", "str", "(", "line", ",", "\"utf-8\"", ")", ".", "split", "(", "\" \"", ")", "\n", "pid", "=", "int", "(", "linelist", "[", "0", "]", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "(", "\n", "float", "(", "linelist", "[", "1", "]", ")", ",", "\n", "float", "(", "linelist", "[", "2", "]", ")", ",", "\n", "float", "(", "linelist", "[", "3", "]", ")", ",", "\n", "float", "(", "linelist", "[", "4", "]", ")", ",", "\n", ")", "\n", "roi", "=", "np", ".", "array", "(", "[", "x", ",", "y", ",", "x", "+", "w", ",", "y", "+", "h", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "roi", "=", "np", ".", "clip", "(", "roi", ",", "0", ",", "None", ")", "# several coordinates are negative", "\n", "img_name", "=", "linelist", "[", "5", "]", "[", ":", "-", "2", "]", "+", "\".jpg\"", "\n", "queries", ".", "append", "(", "\n", "{", "\n", "\"img_name\"", ":", "img_name", ",", "\n", "\"img_path\"", ":", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_name", ")", ",", "\n", "\"boxes\"", ":", "roi", "[", "np", ".", "newaxis", ",", ":", "]", ",", "\n", "\"pids\"", ":", "np", ".", "array", "(", "[", "pid", "]", ")", ",", "\n", "\"cam_id\"", ":", "self", ".", "_get_cam_id", "(", "img_name", ")", ",", "\n", "}", "\n", ")", "\n", "", "return", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_split_img_names": [[49, 59], ["scipy.io.loadmat", "scipy.io.loadmat", "os.join", "os.join"], "methods", ["None"], ["", "def", "_load_split_img_names", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Load the image names for the specific split.\n        \"\"\"", "\n", "assert", "self", ".", "split", "in", "(", "\"train\"", ",", "\"gallery\"", ")", "\n", "if", "self", ".", "split", "==", "\"train\"", ":", "\n", "            ", "imgs", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"frame_train.mat\"", ")", ")", "[", "\"img_index_train\"", "]", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "loadmat", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "\"frame_test.mat\"", ")", ")", "[", "\"img_index_test\"", "]", "\n", "", "return", "[", "img", "[", "0", "]", "[", "0", "]", "+", "\".jpg\"", "for", "img", "in", "imgs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_annotations": [[60, 94], ["prw.PRW._load_split_img_names", "prw.PRW._load_queries", "os.join", "scipy.io.loadmat", "numpy.clip", "annotations.append", "scipy.io.loadmat.keys", "scipy.io.loadmat.keys", "len", "len", "os.join", "numpy.clip.astype", "ids.astype", "prw.PRW._get_cam_id"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_split_img_names", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._load_queries", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.datasets.prw.PRW._get_cam_id"], ["", "def", "_load_annotations", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "\"query\"", ":", "\n", "            ", "return", "self", ".", "_load_queries", "(", ")", "\n", "\n", "", "annotations", "=", "[", "]", "\n", "imgs", "=", "self", ".", "_load_split_img_names", "(", ")", "\n", "for", "img_name", "in", "imgs", ":", "\n", "            ", "anno_path", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"annotations\"", ",", "img_name", ")", "\n", "anno", "=", "loadmat", "(", "anno_path", ")", "\n", "box_key", "=", "\"box_new\"", "\n", "if", "box_key", "not", "in", "anno", ".", "keys", "(", ")", ":", "\n", "                ", "box_key", "=", "\"anno_file\"", "\n", "", "if", "box_key", "not", "in", "anno", ".", "keys", "(", ")", ":", "\n", "                ", "box_key", "=", "\"anno_previous\"", "\n", "\n", "", "rois", "=", "anno", "[", "box_key", "]", "[", ":", ",", "1", ":", "]", "\n", "ids", "=", "anno", "[", "box_key", "]", "[", ":", ",", "0", "]", "\n", "rois", "=", "np", ".", "clip", "(", "rois", ",", "0", ",", "None", ")", "# several coordinates are negative", "\n", "\n", "assert", "len", "(", "rois", ")", "==", "len", "(", "ids", ")", "\n", "\n", "rois", "[", ":", ",", "2", ":", "]", "+=", "rois", "[", ":", ",", ":", "2", "]", "\n", "ids", "[", "ids", "==", "-", "2", "]", "=", "5555", "# assign pid = 5555 for unlabeled people", "\n", "annotations", ".", "append", "(", "\n", "{", "\n", "\"img_name\"", ":", "img_name", ",", "\n", "\"img_path\"", ":", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "img_name", ")", ",", "\n", "\"boxes\"", ":", "rois", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "# FIXME: (training pids) 1, 2,..., 478, 480, 481, 482, 483, 932, 5555", "\n", "\"pids\"", ":", "ids", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "\"cam_id\"", ":", "self", ".", "_get_cam_id", "(", "img_name", ")", ",", "\n", "}", "\n", ")", "\n", "", "return", "annotations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqNet.__init__": [[19, 98], ["torch.Module.__init__", "models.resnet.build_resnet", "torchvision.models.detection.rpn.AnchorGenerator", "torchvision.models.detection.rpn.RPNHead", "dict", "dict", "torchvision.models.detection.rpn.RegionProposalNetwork", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor", "copy.deepcopy", "torchvision.ops.MultiScaleRoIAlign", "seqnet.BBoxRegressor", "seqnet.SeqRoIHeads", "torchvision.models.detection.transform.GeneralizedRCNNTransform", "torchvision.models.detection.rpn.AnchorGenerator.num_anchors_per_location"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.build_resnet"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "SeqNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "backbone", ",", "box_head", "=", "build_resnet", "(", "name", "=", "\"resnet50\"", ",", "pretrained", "=", "True", ")", "\n", "\n", "anchor_generator", "=", "AnchorGenerator", "(", "\n", "sizes", "=", "(", "(", "32", ",", "64", ",", "128", ",", "256", ",", "512", ")", ",", ")", ",", "aspect_ratios", "=", "(", "(", "0.5", ",", "1.0", ",", "2.0", ")", ",", ")", "\n", ")", "\n", "head", "=", "RPNHead", "(", "\n", "in_channels", "=", "backbone", ".", "out_channels", ",", "\n", "num_anchors", "=", "anchor_generator", ".", "num_anchors_per_location", "(", ")", "[", "0", "]", ",", "\n", ")", "\n", "pre_nms_top_n", "=", "dict", "(", "\n", "training", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOPN_TRAIN", ",", "testing", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOPN_TEST", "\n", ")", "\n", "post_nms_top_n", "=", "dict", "(", "\n", "training", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOPN_TRAIN", ",", "testing", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOPN_TEST", "\n", ")", "\n", "rpn", "=", "RegionProposalNetwork", "(", "\n", "anchor_generator", "=", "anchor_generator", ",", "\n", "head", "=", "head", ",", "\n", "fg_iou_thresh", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "POS_THRESH_TRAIN", ",", "\n", "bg_iou_thresh", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "NEG_THRESH_TRAIN", ",", "\n", "batch_size_per_image", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_TRAIN", ",", "\n", "positive_fraction", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "POS_FRAC_TRAIN", ",", "\n", "pre_nms_top_n", "=", "pre_nms_top_n", ",", "\n", "post_nms_top_n", "=", "post_nms_top_n", ",", "\n", "nms_thresh", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", ",", "\n", ")", "\n", "\n", "faster_rcnn_predictor", "=", "FastRCNNPredictor", "(", "2048", ",", "2", ")", "\n", "reid_head", "=", "deepcopy", "(", "box_head", ")", "\n", "box_roi_pool", "=", "MultiScaleRoIAlign", "(", "\n", "featmap_names", "=", "[", "\"feat_res4\"", "]", ",", "output_size", "=", "14", ",", "sampling_ratio", "=", "2", "\n", ")", "\n", "box_predictor", "=", "BBoxRegressor", "(", "2048", ",", "num_classes", "=", "2", ",", "bn_neck", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "BN_NECK", ")", "\n", "roi_heads", "=", "SeqRoIHeads", "(", "\n", "# OIM", "\n", "num_pids", "=", "cfg", ".", "MODEL", ".", "LOSS", ".", "LUT_SIZE", ",", "\n", "num_cq_size", "=", "cfg", ".", "MODEL", ".", "LOSS", ".", "CQ_SIZE", ",", "\n", "oim_momentum", "=", "cfg", ".", "MODEL", ".", "LOSS", ".", "OIM_MOMENTUM", ",", "\n", "oim_scalar", "=", "cfg", ".", "MODEL", ".", "LOSS", ".", "OIM_SCALAR", ",", "\n", "# SeqNet", "\n", "faster_rcnn_predictor", "=", "faster_rcnn_predictor", ",", "\n", "reid_head", "=", "reid_head", ",", "\n", "# parent class", "\n", "box_roi_pool", "=", "box_roi_pool", ",", "\n", "box_head", "=", "box_head", ",", "\n", "box_predictor", "=", "box_predictor", ",", "\n", "fg_iou_thresh", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "POS_THRESH_TRAIN", ",", "\n", "bg_iou_thresh", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "NEG_THRESH_TRAIN", ",", "\n", "batch_size_per_image", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "BATCH_SIZE_TRAIN", ",", "\n", "positive_fraction", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "POS_FRAC_TRAIN", ",", "\n", "bbox_reg_weights", "=", "None", ",", "\n", "score_thresh", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "SCORE_THRESH_TEST", ",", "\n", "nms_thresh", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "NMS_THRESH_TEST", ",", "\n", "detections_per_img", "=", "cfg", ".", "MODEL", ".", "ROI_HEAD", ".", "DETECTIONS_PER_IMAGE_TEST", ",", "\n", ")", "\n", "\n", "transform", "=", "GeneralizedRCNNTransform", "(", "\n", "min_size", "=", "cfg", ".", "INPUT", ".", "MIN_SIZE", ",", "\n", "max_size", "=", "cfg", ".", "INPUT", ".", "MAX_SIZE", ",", "\n", "image_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "image_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "rpn", "=", "rpn", "\n", "self", ".", "roi_heads", "=", "roi_heads", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "# loss weights", "\n", "self", ".", "lw_rpn_reg", "=", "cfg", ".", "SOLVER", ".", "LW_RPN_REG", "\n", "self", ".", "lw_rpn_cls", "=", "cfg", ".", "SOLVER", ".", "LW_RPN_CLS", "\n", "self", ".", "lw_proposal_reg", "=", "cfg", ".", "SOLVER", ".", "LW_PROPOSAL_REG", "\n", "self", ".", "lw_proposal_cls", "=", "cfg", ".", "SOLVER", ".", "LW_PROPOSAL_CLS", "\n", "self", ".", "lw_box_reg", "=", "cfg", ".", "SOLVER", ".", "LW_BOX_REG", "\n", "self", ".", "lw_box_cls", "=", "cfg", ".", "SOLVER", ".", "LW_BOX_CLS", "\n", "self", ".", "lw_box_reid", "=", "cfg", ".", "SOLVER", ".", "LW_BOX_REID", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqNet.inference": [[99, 129], ["seqnet.SeqNet.transform", "seqnet.SeqNet.backbone", "seqnet.SeqNet.roi_heads.box_roi_pool", "seqnet.SeqNet.roi_heads.reid_head", "seqnet.SeqNet.roi_heads.embedding_head", "embeddings.split", "seqnet.SeqNet.rpn", "seqnet.SeqNet.roi_heads", "seqnet.SeqNet.transform.postprocess"], "methods", ["None"], ["", "def", "inference", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "query_img_as_gallery", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        query_img_as_gallery: Set to True to detect all people in the query image.\n            Meanwhile, the gt box should be the first of the detected boxes.\n            This option serves CBGM.\n        \"\"\"", "\n", "original_image_sizes", "=", "[", "img", ".", "shape", "[", "-", "2", ":", "]", "for", "img", "in", "images", "]", "\n", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "\n", "if", "query_img_as_gallery", ":", "\n", "            ", "assert", "targets", "is", "not", "None", "\n", "\n", "", "if", "targets", "is", "not", "None", "and", "not", "query_img_as_gallery", ":", "\n", "# query", "\n", "            ", "boxes", "=", "[", "t", "[", "\"boxes\"", "]", "for", "t", "in", "targets", "]", "\n", "box_features", "=", "self", ".", "roi_heads", ".", "box_roi_pool", "(", "features", ",", "boxes", ",", "images", ".", "image_sizes", ")", "\n", "box_features", "=", "self", ".", "roi_heads", ".", "reid_head", "(", "box_features", ")", "\n", "embeddings", ",", "_", "=", "self", ".", "roi_heads", ".", "embedding_head", "(", "box_features", ")", "\n", "return", "embeddings", ".", "split", "(", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "# gallery", "\n", "            ", "proposals", ",", "_", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "detections", ",", "_", "=", "self", ".", "roi_heads", "(", "\n", "features", ",", "proposals", ",", "images", ".", "image_sizes", ",", "targets", ",", "query_img_as_gallery", "\n", ")", "\n", "detections", "=", "self", ".", "transform", ".", "postprocess", "(", "\n", "detections", ",", "images", ".", "image_sizes", ",", "original_image_sizes", "\n", ")", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqNet.forward": [[130, 156], ["seqnet.SeqNet.transform", "seqnet.SeqNet.backbone", "seqnet.SeqNet.rpn", "seqnet.SeqNet.roi_heads", "proposal_losses.pop", "proposal_losses.pop", "losses.update", "losses.update", "seqnet.SeqNet.inference"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqNet.inference"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "targets", "=", "None", ",", "query_img_as_gallery", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "inference", "(", "images", ",", "targets", ",", "query_img_as_gallery", ")", "\n", "\n", "", "images", ",", "targets", "=", "self", ".", "transform", "(", "images", ",", "targets", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensors", ")", "\n", "proposals", ",", "proposal_losses", "=", "self", ".", "rpn", "(", "images", ",", "features", ",", "targets", ")", "\n", "_", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "features", ",", "proposals", ",", "images", ".", "image_sizes", ",", "targets", ")", "\n", "\n", "# rename rpn losses to be consistent with detection losses", "\n", "proposal_losses", "[", "\"loss_rpn_reg\"", "]", "=", "proposal_losses", ".", "pop", "(", "\"loss_rpn_box_reg\"", ")", "\n", "proposal_losses", "[", "\"loss_rpn_cls\"", "]", "=", "proposal_losses", ".", "pop", "(", "\"loss_objectness\"", ")", "\n", "\n", "losses", "=", "{", "}", "\n", "losses", ".", "update", "(", "detector_losses", ")", "\n", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "\n", "# apply loss weights", "\n", "losses", "[", "\"loss_rpn_reg\"", "]", "*=", "self", ".", "lw_rpn_reg", "\n", "losses", "[", "\"loss_rpn_cls\"", "]", "*=", "self", ".", "lw_rpn_cls", "\n", "losses", "[", "\"loss_proposal_reg\"", "]", "*=", "self", ".", "lw_proposal_reg", "\n", "losses", "[", "\"loss_proposal_cls\"", "]", "*=", "self", ".", "lw_proposal_cls", "\n", "losses", "[", "\"loss_box_reg\"", "]", "*=", "self", ".", "lw_box_reg", "\n", "losses", "[", "\"loss_box_cls\"", "]", "*=", "self", ".", "lw_box_cls", "\n", "losses", "[", "\"loss_box_reid\"", "]", "*=", "self", ".", "lw_box_reid", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.__init__": [[159, 177], ["torchvision.models.detection.roi_heads.RoIHeads.__init__", "seqnet.NormAwareEmbedding", "models.oim.OIMLoss"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_pids", ",", "\n", "num_cq_size", ",", "\n", "oim_momentum", ",", "\n", "oim_scalar", ",", "\n", "faster_rcnn_predictor", ",", "\n", "reid_head", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "SeqRoIHeads", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "embedding_head", "=", "NormAwareEmbedding", "(", ")", "\n", "self", ".", "reid_loss", "=", "OIMLoss", "(", "256", ",", "num_pids", ",", "num_cq_size", ",", "oim_momentum", ",", "oim_scalar", ")", "\n", "self", ".", "faster_rcnn_predictor", "=", "faster_rcnn_predictor", "\n", "self", ".", "reid_head", "=", "reid_head", "\n", "# rename the method inherited from parent class", "\n", "self", ".", "postprocess_proposals", "=", "self", ".", "postprocess_detections", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.forward": [[178, 280], ["seqnet.SeqRoIHeads.box_roi_pool", "seqnet.SeqRoIHeads.box_head", "seqnet.SeqRoIHeads.faster_rcnn_predictor", "seqnet.SeqRoIHeads.box_roi_pool", "seqnet.SeqRoIHeads.reid_head", "seqnet.SeqRoIHeads.box_predictor", "seqnet.SeqRoIHeads.embedding_head", "seqnet.SeqRoIHeads.select_training_samples", "seqnet.SeqRoIHeads.get_boxes", "seqnet.SeqRoIHeads.select_training_samples", "seqnet.SeqRoIHeads.postprocess_proposals", "seqnet.SeqRoIHeads.box_roi_pool", "seqnet.SeqRoIHeads.reid_head", "seqnet.SeqRoIHeads.embedding_head", "box_cls_scores.unsqueeze.unsqueeze.dim", "box_cls_scores.unsqueeze.unsqueeze.unsqueeze", "seqnet.detection_losses", "seqnet.SeqRoIHeads.reid_loss", "detection_losses.update", "seqnet.SeqRoIHeads.postprocess_boxes", "len", "range", "boxes_per_image.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.ones().type_as", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "y.clamp", "y.clamp", "result.append", "dict", "dict", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.get_boxes", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.detection_losses", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.utils.utils.MetricLogger.update", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.postprocess_boxes"], ["", "def", "forward", "(", "self", ",", "features", ",", "proposals", ",", "image_shapes", ",", "targets", "=", "None", ",", "query_img_as_gallery", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            features (List[Tensor])\n            proposals (List[Tensor[N, 4]])\n            image_shapes (List[Tuple[H, W]])\n            targets (List[Dict])\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "proposals", ",", "_", ",", "proposal_pid_labels", ",", "proposal_reg_targets", "=", "self", ".", "select_training_samples", "(", "\n", "proposals", ",", "targets", "\n", ")", "\n", "\n", "# ------------------- Faster R-CNN head ------------------ #", "\n", "", "proposal_features", "=", "self", ".", "box_roi_pool", "(", "features", ",", "proposals", ",", "image_shapes", ")", "\n", "proposal_features", "=", "self", ".", "box_head", "(", "proposal_features", ")", "\n", "proposal_cls_scores", ",", "proposal_regs", "=", "self", ".", "faster_rcnn_predictor", "(", "\n", "proposal_features", "[", "\"feat_res5\"", "]", "\n", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "boxes", "=", "self", ".", "get_boxes", "(", "proposal_regs", ",", "proposals", ",", "image_shapes", ")", "\n", "boxes", "=", "[", "boxes_per_image", ".", "detach", "(", ")", "for", "boxes_per_image", "in", "boxes", "]", "\n", "boxes", ",", "_", ",", "box_pid_labels", ",", "box_reg_targets", "=", "self", ".", "select_training_samples", "(", "boxes", ",", "targets", ")", "\n", "", "else", ":", "\n", "# invoke the postprocess method inherited from parent class to process proposals", "\n", "            ", "boxes", ",", "scores", ",", "_", "=", "self", ".", "postprocess_proposals", "(", "\n", "proposal_cls_scores", ",", "proposal_regs", ",", "proposals", ",", "image_shapes", "\n", ")", "\n", "\n", "", "cws", "=", "True", "\n", "gt_det", "=", "None", "\n", "if", "not", "self", ".", "training", "and", "query_img_as_gallery", ":", "\n", "# When regarding the query image as gallery, GT boxes may be excluded", "\n", "# from detected boxes. To avoid this, we compulsorily include GT in the", "\n", "# detection results. Additionally, CWS should be disabled as the", "\n", "# confidences of these people in query image are 1", "\n", "            ", "cws", "=", "False", "\n", "gt_box", "=", "[", "targets", "[", "0", "]", "[", "\"boxes\"", "]", "]", "\n", "gt_box_features", "=", "self", ".", "box_roi_pool", "(", "features", ",", "gt_box", ",", "image_shapes", ")", "\n", "gt_box_features", "=", "self", ".", "reid_head", "(", "gt_box_features", ")", "\n", "embeddings", ",", "_", "=", "self", ".", "embedding_head", "(", "gt_box_features", ")", "\n", "gt_det", "=", "{", "\"boxes\"", ":", "targets", "[", "0", "]", "[", "\"boxes\"", "]", ",", "\"embeddings\"", ":", "embeddings", "}", "\n", "\n", "# no detection predicted by Faster R-CNN head in test phase", "\n", "", "if", "boxes", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "assert", "not", "self", ".", "training", "\n", "boxes", "=", "gt_det", "[", "\"boxes\"", "]", "if", "gt_det", "else", "torch", ".", "zeros", "(", "0", ",", "4", ")", "\n", "labels", "=", "torch", ".", "ones", "(", "1", ")", ".", "type_as", "(", "boxes", ")", "if", "gt_det", "else", "torch", ".", "zeros", "(", "0", ")", "\n", "scores", "=", "torch", ".", "ones", "(", "1", ")", ".", "type_as", "(", "boxes", ")", "if", "gt_det", "else", "torch", ".", "zeros", "(", "0", ")", "\n", "embeddings", "=", "gt_det", "[", "\"embeddings\"", "]", "if", "gt_det", "else", "torch", ".", "zeros", "(", "0", ",", "256", ")", "\n", "return", "[", "dict", "(", "boxes", "=", "boxes", ",", "labels", "=", "labels", ",", "scores", "=", "scores", ",", "embeddings", "=", "embeddings", ")", "]", ",", "[", "]", "\n", "\n", "# --------------------- Baseline head -------------------- #", "\n", "", "box_features", "=", "self", ".", "box_roi_pool", "(", "features", ",", "boxes", ",", "image_shapes", ")", "\n", "box_features", "=", "self", ".", "reid_head", "(", "box_features", ")", "\n", "box_regs", "=", "self", ".", "box_predictor", "(", "box_features", "[", "\"feat_res5\"", "]", ")", "\n", "box_embeddings", ",", "box_cls_scores", "=", "self", ".", "embedding_head", "(", "box_features", ")", "\n", "if", "box_cls_scores", ".", "dim", "(", ")", "==", "0", ":", "\n", "            ", "box_cls_scores", "=", "box_cls_scores", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "result", ",", "losses", "=", "[", "]", ",", "{", "}", "\n", "if", "self", ".", "training", ":", "\n", "            ", "proposal_labels", "=", "[", "y", ".", "clamp", "(", "0", ",", "1", ")", "for", "y", "in", "proposal_pid_labels", "]", "\n", "box_labels", "=", "[", "y", ".", "clamp", "(", "0", ",", "1", ")", "for", "y", "in", "box_pid_labels", "]", "\n", "losses", "=", "detection_losses", "(", "\n", "proposal_cls_scores", ",", "\n", "proposal_regs", ",", "\n", "proposal_labels", ",", "\n", "proposal_reg_targets", ",", "\n", "box_cls_scores", ",", "\n", "box_regs", ",", "\n", "box_labels", ",", "\n", "box_reg_targets", ",", "\n", ")", "\n", "loss_box_reid", "=", "self", ".", "reid_loss", "(", "box_embeddings", ",", "box_pid_labels", ")", "\n", "losses", ".", "update", "(", "loss_box_reid", "=", "loss_box_reid", ")", "\n", "", "else", ":", "\n", "# The IoUs of these boxes are higher than that of proposals,", "\n", "# so a higher NMS threshold is needed", "\n", "            ", "orig_thresh", "=", "self", ".", "nms_thresh", "\n", "self", ".", "nms_thresh", "=", "0.5", "\n", "boxes", ",", "scores", ",", "embeddings", ",", "labels", "=", "self", ".", "postprocess_boxes", "(", "\n", "box_cls_scores", ",", "\n", "box_regs", ",", "\n", "box_embeddings", ",", "\n", "boxes", ",", "\n", "image_shapes", ",", "\n", "fcs", "=", "scores", ",", "\n", "gt_det", "=", "gt_det", ",", "\n", "cws", "=", "cws", ",", "\n", ")", "\n", "# set to original thresh after finishing postprocess", "\n", "self", ".", "nms_thresh", "=", "orig_thresh", "\n", "num_images", "=", "len", "(", "boxes", ")", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "                ", "result", ".", "append", "(", "\n", "dict", "(", "\n", "boxes", "=", "boxes", "[", "i", "]", ",", "labels", "=", "labels", "[", "i", "]", ",", "scores", "=", "scores", "[", "i", "]", ",", "embeddings", "=", "embeddings", "[", "i", "]", "\n", ")", "\n", ")", "\n", "", "", "return", "result", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.get_boxes": [[281, 297], ["seqnet.SeqRoIHeads.box_coder.decode", "pred_boxes.split.split.split", "zip", "len", "torchvision.ops.boxes.clip_boxes_to_image", "boxes[].reshape", "all_boxes.append"], "methods", ["None"], ["", "def", "get_boxes", "(", "self", ",", "box_regression", ",", "proposals", ",", "image_shapes", ")", ":", "\n", "        ", "\"\"\"\n        Get boxes from proposals.\n        \"\"\"", "\n", "boxes_per_image", "=", "[", "len", "(", "boxes_in_image", ")", "for", "boxes_in_image", "in", "proposals", "]", "\n", "pred_boxes", "=", "self", ".", "box_coder", ".", "decode", "(", "box_regression", ",", "proposals", ")", "\n", "pred_boxes", "=", "pred_boxes", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "\n", "all_boxes", "=", "[", "]", "\n", "for", "boxes", ",", "image_shape", "in", "zip", "(", "pred_boxes", ",", "image_shapes", ")", ":", "\n", "            ", "boxes", "=", "box_ops", ".", "clip_boxes_to_image", "(", "boxes", ",", "image_shape", ")", "\n", "# remove predictions with the background label", "\n", "boxes", "=", "boxes", "[", ":", ",", "1", ":", "]", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "\n", "", "return", "all_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.SeqRoIHeads.postprocess_boxes": [[298, 397], ["seqnet.SeqRoIHeads.box_coder.decode", "pred_boxes.split.split.split", "torch.sigmoid.split", "torch.sigmoid.split", "torch.sigmoid.split", "torch.cat.split", "torch.cat.split", "torch.cat.split", "zip", "len", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torchvision.ops.boxes.clip_boxes_to_image", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torchvision.ops.boxes.remove_small_boxes", "torchvision.ops.boxes.batched_nms", "all_boxes.append", "all_scores.append", "all_labels.append", "all_embeddings.append", "torch.sigmoid.view", "torch.sigmoid.view", "torch.sigmoid.view", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "postprocess_boxes", "(", "\n", "self", ",", "\n", "class_logits", ",", "\n", "box_regression", ",", "\n", "embeddings", ",", "\n", "proposals", ",", "\n", "image_shapes", ",", "\n", "fcs", "=", "None", ",", "\n", "gt_det", "=", "None", ",", "\n", "cws", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Similar to RoIHeads.postprocess_detections, but can handle embeddings and implement\n        First Classification Score (FCS).\n        \"\"\"", "\n", "device", "=", "class_logits", ".", "device", "\n", "\n", "boxes_per_image", "=", "[", "len", "(", "boxes_in_image", ")", "for", "boxes_in_image", "in", "proposals", "]", "\n", "pred_boxes", "=", "self", ".", "box_coder", ".", "decode", "(", "box_regression", ",", "proposals", ")", "\n", "\n", "if", "fcs", "is", "not", "None", ":", "\n", "# Fist Classification Score (FCS)", "\n", "            ", "pred_scores", "=", "fcs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "pred_scores", "=", "torch", ".", "sigmoid", "(", "class_logits", ")", "\n", "", "if", "cws", ":", "\n", "# Confidence Weighted Similarity (CWS)", "\n", "            ", "embeddings", "=", "embeddings", "*", "pred_scores", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# split boxes and scores per image", "\n", "", "pred_boxes", "=", "pred_boxes", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "pred_scores", "=", "pred_scores", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "pred_embeddings", "=", "embeddings", ".", "split", "(", "boxes_per_image", ",", "0", ")", "\n", "\n", "all_boxes", "=", "[", "]", "\n", "all_scores", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "all_embeddings", "=", "[", "]", "\n", "for", "boxes", ",", "scores", ",", "embeddings", ",", "image_shape", "in", "zip", "(", "\n", "pred_boxes", ",", "pred_scores", ",", "pred_embeddings", ",", "image_shapes", "\n", ")", ":", "\n", "            ", "boxes", "=", "box_ops", ".", "clip_boxes_to_image", "(", "boxes", ",", "image_shape", ")", "\n", "\n", "# create labels for each prediction", "\n", "labels", "=", "torch", ".", "ones", "(", "scores", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "# remove predictions with the background label", "\n", "boxes", "=", "boxes", "[", ":", ",", "1", ":", "]", "\n", "scores", "=", "scores", ".", "unsqueeze", "(", "1", ")", "\n", "labels", "=", "labels", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# batch everything, by making every class prediction be a separate instance", "\n", "boxes", "=", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "scores", ".", "flatten", "(", ")", "\n", "labels", "=", "labels", ".", "flatten", "(", ")", "\n", "embeddings", "=", "embeddings", ".", "reshape", "(", "-", "1", ",", "self", ".", "embedding_head", ".", "dim", ")", "\n", "\n", "# remove low scoring boxes", "\n", "inds", "=", "torch", ".", "nonzero", "(", "scores", ">", "self", ".", "score_thresh", ")", ".", "squeeze", "(", "1", ")", "\n", "boxes", ",", "scores", ",", "labels", ",", "embeddings", "=", "(", "\n", "boxes", "[", "inds", "]", ",", "\n", "scores", "[", "inds", "]", ",", "\n", "labels", "[", "inds", "]", ",", "\n", "embeddings", "[", "inds", "]", ",", "\n", ")", "\n", "\n", "# remove empty boxes", "\n", "keep", "=", "box_ops", ".", "remove_small_boxes", "(", "boxes", ",", "min_size", "=", "1e-2", ")", "\n", "boxes", ",", "scores", ",", "labels", ",", "embeddings", "=", "(", "\n", "boxes", "[", "keep", "]", ",", "\n", "scores", "[", "keep", "]", ",", "\n", "labels", "[", "keep", "]", ",", "\n", "embeddings", "[", "keep", "]", ",", "\n", ")", "\n", "\n", "if", "gt_det", "is", "not", "None", ":", "\n", "# include GT into the detection results", "\n", "                ", "boxes", "=", "torch", ".", "cat", "(", "(", "boxes", ",", "gt_det", "[", "\"boxes\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "(", "labels", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "device", ")", ")", ",", "dim", "=", "0", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "(", "scores", ",", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "device", ")", ")", ",", "dim", "=", "0", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "embeddings", ",", "gt_det", "[", "\"embeddings\"", "]", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# non-maximum suppression, independently done per class", "\n", "", "keep", "=", "box_ops", ".", "batched_nms", "(", "boxes", ",", "scores", ",", "labels", ",", "self", ".", "nms_thresh", ")", "\n", "# keep only topk scoring predictions", "\n", "keep", "=", "keep", "[", ":", "self", ".", "detections_per_img", "]", "\n", "boxes", ",", "scores", ",", "labels", ",", "embeddings", "=", "(", "\n", "boxes", "[", "keep", "]", ",", "\n", "scores", "[", "keep", "]", ",", "\n", "labels", "[", "keep", "]", ",", "\n", "embeddings", "[", "keep", "]", ",", "\n", ")", "\n", "\n", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "all_scores", ".", "append", "(", "scores", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "all_embeddings", ".", "append", "(", "embeddings", ")", "\n", "\n", "", "return", "all_boxes", ",", "all_scores", ",", "all_embeddings", ",", "all_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding.__init__": [[405, 422], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "seqnet.NormAwareEmbedding._split_embedding_dim", "zip", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding._split_embedding_dim"], ["def", "__init__", "(", "self", ",", "featmap_names", "=", "[", "\"feat_res4\"", ",", "\"feat_res5\"", "]", ",", "in_channels", "=", "[", "1024", ",", "2048", "]", ",", "dim", "=", "256", ")", ":", "\n", "        ", "super", "(", "NormAwareEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "featmap_names", "=", "featmap_names", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "self", ".", "projectors", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "indv_dims", "=", "self", ".", "_split_embedding_dim", "(", ")", "\n", "for", "ftname", ",", "in_channel", ",", "indv_dim", "in", "zip", "(", "self", ".", "featmap_names", ",", "self", ".", "in_channels", ",", "indv_dims", ")", ":", "\n", "            ", "proj", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "in_channel", ",", "indv_dim", ")", ",", "nn", ".", "BatchNorm1d", "(", "indv_dim", ")", ")", "\n", "init", ".", "normal_", "(", "proj", "[", "0", "]", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "proj", "[", "1", "]", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "proj", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "init", ".", "constant_", "(", "proj", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "self", ".", "projectors", "[", "ftname", "]", "=", "proj", "\n", "\n", "", "self", ".", "rescaler", "=", "nn", ".", "BatchNorm1d", "(", "1", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding.forward": [[423, 451], ["len", "len", "len", "seqnet.NormAwareEmbedding._flatten_fc_input", "torch.cat.norm", "torch.cat.norm", "torch.cat.norm", "seqnet.NormAwareEmbedding.rescaler().squeeze", "featmaps.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.norm", "torch.cat.norm", "torch.cat.norm", "seqnet.NormAwareEmbedding.rescaler().squeeze", "featmaps.items", "seqnet.NormAwareEmbedding.expand_as().clamp", "seqnet.NormAwareEmbedding._flatten_fc_input", "outputs.append", "seqnet.NormAwareEmbedding.expand_as().clamp", "seqnet.NormAwareEmbedding.rescaler", "seqnet.NormAwareEmbedding.rescaler", "seqnet.NormAwareEmbedding.expand_as", "seqnet.NormAwareEmbedding.expand_as"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding._flatten_fc_input", "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding._flatten_fc_input"], ["", "def", "forward", "(", "self", ",", "featmaps", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            featmaps: OrderedDict[Tensor], and in featmap_names you can choose which\n                      featmaps to use\n        Returns:\n            tensor of size (BatchSize, dim), L2 normalized embeddings.\n            tensor of size (BatchSize, ) rescaled norm of embeddings, as class_logits.\n        \"\"\"", "\n", "assert", "len", "(", "featmaps", ")", "==", "len", "(", "self", ".", "featmap_names", ")", "\n", "if", "len", "(", "featmaps", ")", "==", "1", ":", "\n", "            ", "k", ",", "v", "=", "featmaps", ".", "items", "(", ")", "[", "0", "]", "\n", "v", "=", "self", ".", "_flatten_fc_input", "(", "v", ")", "\n", "embeddings", "=", "self", ".", "projectors", "[", "k", "]", "(", "v", ")", "\n", "norms", "=", "embeddings", ".", "norm", "(", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "embeddings", "=", "embeddings", "/", "norms", ".", "expand_as", "(", "embeddings", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "norms", "=", "self", ".", "rescaler", "(", "norms", ")", ".", "squeeze", "(", ")", "\n", "return", "embeddings", ",", "norms", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "featmaps", ".", "items", "(", ")", ":", "\n", "                ", "v", "=", "self", ".", "_flatten_fc_input", "(", "v", ")", "\n", "outputs", ".", "append", "(", "self", ".", "projectors", "[", "k", "]", "(", "v", ")", ")", "\n", "", "embeddings", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "norms", "=", "embeddings", ".", "norm", "(", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "embeddings", "=", "embeddings", "/", "norms", ".", "expand_as", "(", "embeddings", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "norms", "=", "self", ".", "rescaler", "(", "norms", ")", ".", "squeeze", "(", ")", "\n", "return", "embeddings", ",", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding._flatten_fc_input": [[452, 457], ["x.ndimension", "x.flatten", "list"], "methods", ["None"], ["", "", "def", "_flatten_fc_input", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "assert", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "==", "[", "1", ",", "1", "]", "\n", "return", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.NormAwareEmbedding._split_embedding_dim": [[458, 469], ["len", "sum", "range", "sum"], "methods", ["None"], ["", "def", "_split_embedding_dim", "(", "self", ")", ":", "\n", "        ", "parts", "=", "len", "(", "self", ".", "in_channels", ")", "\n", "tmp", "=", "[", "self", ".", "dim", "//", "parts", "]", "*", "parts", "\n", "if", "sum", "(", "tmp", ")", "==", "self", ".", "dim", ":", "\n", "            ", "return", "tmp", "\n", "", "else", ":", "\n", "            ", "res", "=", "self", ".", "dim", "%", "parts", "\n", "for", "i", "in", "range", "(", "1", ",", "res", "+", "1", ")", ":", "\n", "                ", "tmp", "[", "-", "i", "]", "+=", "1", "\n", "", "assert", "sum", "(", "tmp", ")", "==", "self", ".", "dim", "\n", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.BBoxRegressor.__init__": [[476, 496], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_classes", "=", "2", ",", "bn_neck", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_channels (int): Input channels.\n            num_classes (int, optional): Defaults to 2 (background and pedestrian).\n            bn_neck (bool, optional): Whether to use BN after Linear. Defaults to True.\n        \"\"\"", "\n", "super", "(", "BBoxRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "bn_neck", ":", "\n", "            ", "self", ".", "bbox_pred", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "4", "*", "num_classes", ")", ",", "nn", ".", "BatchNorm1d", "(", "4", "*", "num_classes", ")", "\n", ")", "\n", "init", ".", "normal_", "(", "self", ".", "bbox_pred", "[", "0", "]", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "bbox_pred", "[", "1", "]", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bbox_pred", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bbox_pred", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox_pred", "=", "nn", ".", "Linear", "(", "in_channels", ",", "4", "*", "num_classes", ")", "\n", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "bbox_pred", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.BBoxRegressor.forward": [[497, 504], ["torch.adaptive_avg_pool2d.flatten", "seqnet.BBoxRegressor.bbox_pred", "torch.adaptive_avg_pool2d.ndimension", "list", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "            ", "if", "list", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "!=", "[", "1", ",", "1", "]", ":", "\n", "                ", "x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "output_size", "=", "1", ")", "\n", "", "", "x", "=", "x", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "bbox_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "return", "bbox_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.seqnet.detection_losses": [[506, 555], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.binary_cross_entropy_with_logits", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "proposal_cls_scores.size", "proposal_regs.reshape.reshape", "torch.smooth_l1_loss", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "box_cls_scores.size", "box_regs.reshape.reshape", "torch.smooth_l1_loss", "dict", "torch.cat.float", "torch.cat.numel", "torch.cat.numel", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["None"], ["", "", "def", "detection_losses", "(", "\n", "proposal_cls_scores", ",", "\n", "proposal_regs", ",", "\n", "proposal_labels", ",", "\n", "proposal_reg_targets", ",", "\n", "box_cls_scores", ",", "\n", "box_regs", ",", "\n", "box_labels", ",", "\n", "box_reg_targets", ",", "\n", ")", ":", "\n", "    ", "proposal_labels", "=", "torch", ".", "cat", "(", "proposal_labels", ",", "dim", "=", "0", ")", "\n", "box_labels", "=", "torch", ".", "cat", "(", "box_labels", ",", "dim", "=", "0", ")", "\n", "proposal_reg_targets", "=", "torch", ".", "cat", "(", "proposal_reg_targets", ",", "dim", "=", "0", ")", "\n", "box_reg_targets", "=", "torch", ".", "cat", "(", "box_reg_targets", ",", "dim", "=", "0", ")", "\n", "\n", "loss_proposal_cls", "=", "F", ".", "cross_entropy", "(", "proposal_cls_scores", ",", "proposal_labels", ")", "\n", "loss_box_cls", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "box_cls_scores", ",", "box_labels", ".", "float", "(", ")", ")", "\n", "\n", "# get indices that correspond to the regression targets for the", "\n", "# corresponding ground truth labels, to be used with advanced indexing", "\n", "sampled_pos_inds_subset", "=", "torch", ".", "nonzero", "(", "proposal_labels", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pos", "=", "proposal_labels", "[", "sampled_pos_inds_subset", "]", "\n", "N", "=", "proposal_cls_scores", ".", "size", "(", "0", ")", "\n", "proposal_regs", "=", "proposal_regs", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "loss_proposal_reg", "=", "F", ".", "smooth_l1_loss", "(", "\n", "proposal_regs", "[", "sampled_pos_inds_subset", ",", "labels_pos", "]", ",", "\n", "proposal_reg_targets", "[", "sampled_pos_inds_subset", "]", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "loss_proposal_reg", "=", "loss_proposal_reg", "/", "proposal_labels", ".", "numel", "(", ")", "\n", "\n", "sampled_pos_inds_subset", "=", "torch", ".", "nonzero", "(", "box_labels", ">", "0", ")", ".", "squeeze", "(", "1", ")", "\n", "labels_pos", "=", "box_labels", "[", "sampled_pos_inds_subset", "]", "\n", "N", "=", "box_cls_scores", ".", "size", "(", "0", ")", "\n", "box_regs", "=", "box_regs", ".", "reshape", "(", "N", ",", "-", "1", ",", "4", ")", "\n", "\n", "loss_box_reg", "=", "F", ".", "smooth_l1_loss", "(", "\n", "box_regs", "[", "sampled_pos_inds_subset", ",", "labels_pos", "]", ",", "\n", "box_reg_targets", "[", "sampled_pos_inds_subset", "]", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "loss_box_reg", "=", "loss_box_reg", "/", "box_labels", ".", "numel", "(", ")", "\n", "\n", "return", "dict", "(", "\n", "loss_proposal_cls", "=", "loss_proposal_cls", ",", "\n", "loss_proposal_reg", "=", "loss_proposal_reg", ",", "\n", "loss_box_cls", "=", "loss_box_cls", ",", "\n", "loss_box_reg", "=", "loss_box_reg", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.Backbone.__init__": [[9, 24], ["torch.nn.Sequential.__init__", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", "\n", "OrderedDict", "(", "\n", "[", "\n", "[", "\"conv1\"", ",", "resnet", ".", "conv1", "]", ",", "\n", "[", "\"bn1\"", ",", "resnet", ".", "bn1", "]", ",", "\n", "[", "\"relu\"", ",", "resnet", ".", "relu", "]", ",", "\n", "[", "\"maxpool\"", ",", "resnet", ".", "maxpool", "]", ",", "\n", "[", "\"layer1\"", ",", "resnet", ".", "layer1", "]", ",", "# res2", "\n", "[", "\"layer2\"", ",", "resnet", ".", "layer2", "]", ",", "# res3", "\n", "[", "\"layer3\"", ",", "resnet", ".", "layer3", "]", ",", "# res4", "\n", "]", "\n", ")", "\n", ")", "\n", "self", ".", "out_channels", "=", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.Backbone.forward": [[25, 29], ["super().forward", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# using the forward method from nn.Sequential", "\n", "        ", "feat", "=", "super", "(", "Backbone", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "return", "OrderedDict", "(", "[", "[", "\"feat_res4\"", ",", "feat", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.Res5Head.__init__": [[32, 35], ["torch.nn.Sequential.__init__", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resnet", ")", ":", "\n", "        ", "super", "(", "Res5Head", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "[", "\"layer4\"", ",", "resnet", ".", "layer4", "]", "]", ")", ")", "# res5", "\n", "self", ".", "out_channels", "=", "[", "1024", ",", "2048", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.Res5Head.forward": [[36, 41], ["super().forward", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "collections.OrderedDict"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "super", "(", "Res5Head", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "x", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ",", "1", ")", "\n", "feat", "=", "F", ".", "adaptive_max_pool2d", "(", "feat", ",", "1", ")", "\n", "return", "OrderedDict", "(", "[", "[", "\"feat_res4\"", ",", "x", "]", ",", "[", "\"feat_res5\"", ",", "feat", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.resnet.build_resnet": [[43, 52], ["resnet.conv1.weight.requires_grad_", "resnet.bn1.weight.requires_grad_", "resnet.bn1.bias.requires_grad_", "resnet.Backbone", "resnet.Res5Head"], "function", ["None"], ["", "", "def", "build_resnet", "(", "name", "=", "\"resnet50\"", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "resnet", "=", "torchvision", ".", "models", ".", "resnet", ".", "__dict__", "[", "name", "]", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "# freeze layers", "\n", "resnet", ".", "conv1", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "resnet", ".", "bn1", ".", "weight", ".", "requires_grad_", "(", "False", ")", "\n", "resnet", ".", "bn1", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "return", "Backbone", "(", "resnet", ")", ",", "Res5Head", "(", "resnet", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIM.forward": [[9, 15], ["ctx.save_for_backward", "inputs.mm", "inputs.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lut.t", "cq.t"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "inputs", ",", "targets", ",", "lut", ",", "cq", ",", "header", ",", "momentum", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "inputs", ",", "targets", ",", "lut", ",", "cq", ",", "header", ",", "momentum", ")", "\n", "outputs_labeled", "=", "inputs", ".", "mm", "(", "lut", ".", "t", "(", ")", ")", "\n", "outputs_unlabeled", "=", "inputs", ".", "mm", "(", "cq", ".", "t", "(", ")", ")", "\n", "return", "torch", ".", "cat", "(", "[", "outputs_labeled", ",", "outputs_unlabeled", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIM.backward": [[16, 36], ["zip", "grad_outputs.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grad_inputs.to.to.to", "len", "lut[].norm", "cq.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_outputs", ")", ":", "\n", "        ", "inputs", ",", "targets", ",", "lut", ",", "cq", ",", "header", ",", "momentum", "=", "ctx", ".", "saved_tensors", "\n", "\n", "# inputs, targets = tensor_gather((inputs, targets))", "\n", "\n", "grad_inputs", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_inputs", "=", "grad_outputs", ".", "mm", "(", "torch", ".", "cat", "(", "[", "lut", ",", "cq", "]", ",", "dim", "=", "0", ")", ")", "\n", "if", "grad_inputs", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "grad_inputs", "=", "grad_inputs", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "", "", "for", "x", ",", "y", "in", "zip", "(", "inputs", ",", "targets", ")", ":", "\n", "            ", "if", "y", "<", "len", "(", "lut", ")", ":", "\n", "                ", "lut", "[", "y", "]", "=", "momentum", "*", "lut", "[", "y", "]", "+", "(", "1.0", "-", "momentum", ")", "*", "x", "\n", "lut", "[", "y", "]", "/=", "lut", "[", "y", "]", ".", "norm", "(", ")", "\n", "", "else", ":", "\n", "                ", "cq", "[", "header", "]", "=", "x", "\n", "header", "=", "(", "header", "+", "1", ")", "%", "cq", ".", "size", "(", "0", ")", "\n", "", "", "return", "grad_inputs", ",", "None", ",", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__": [[43, 55], ["torch.nn.Module.__init__", "oim.OIMLoss.register_buffer", "oim.OIMLoss.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "num_pids", ",", "num_cq_size", ",", "oim_momentum", ",", "oim_scalar", ")", ":", "\n", "        ", "super", "(", "OIMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_pids", "=", "num_pids", "\n", "self", ".", "num_unlabeled", "=", "num_cq_size", "\n", "self", ".", "momentum", "=", "oim_momentum", "\n", "self", ".", "oim_scalar", "=", "oim_scalar", "\n", "\n", "self", ".", "register_buffer", "(", "\"lut\"", ",", "torch", ".", "zeros", "(", "self", ".", "num_pids", ",", "self", ".", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"cq\"", ",", "torch", ".", "zeros", "(", "self", ".", "num_unlabeled", ",", "self", ".", "num_features", ")", ")", "\n", "\n", "self", ".", "header_cq", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.OIMLoss.forward": [[56, 73], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs[].view", "oim.oim", "torch.cross_entropy", "torch.cross_entropy", "inds.unsqueeze().expand_as", "inds.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.oim"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "roi_label", ")", ":", "\n", "# merge into one batch, background label = 0", "\n", "        ", "targets", "=", "torch", ".", "cat", "(", "roi_label", ")", "\n", "label", "=", "targets", "-", "1", "# background label = -1", "\n", "\n", "inds", "=", "label", ">=", "0", "\n", "label", "=", "label", "[", "inds", "]", "\n", "inputs", "=", "inputs", "[", "inds", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "inputs", ")", "]", ".", "view", "(", "-", "1", ",", "self", ".", "num_features", ")", "\n", "\n", "projected", "=", "oim", "(", "inputs", ",", "label", ",", "self", ".", "lut", ",", "self", ".", "cq", ",", "self", ".", "header_cq", ",", "momentum", "=", "self", ".", "momentum", ")", "\n", "projected", "*=", "self", ".", "oim_scalar", "\n", "\n", "self", ".", "header_cq", "=", "(", "\n", "self", ".", "header_cq", "+", "(", "label", ">=", "self", ".", "num_pids", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "%", "self", ".", "num_unlabeled", "\n", "loss_oim", "=", "F", ".", "cross_entropy", "(", "projected", ",", "label", ",", "ignore_index", "=", "5554", ")", "\n", "return", "loss_oim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.serend1p1ty_SeqNet.models.oim.oim": [[38, 40], ["OIM.apply", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "", "def", "oim", "(", "inputs", ",", "targets", ",", "lut", ",", "cq", ",", "header", ",", "momentum", "=", "0.5", ")", ":", "\n", "    ", "return", "OIM", ".", "apply", "(", "inputs", ",", "targets", ",", "lut", ",", "cq", ",", "torch", ".", "tensor", "(", "header", ")", ",", "torch", ".", "tensor", "(", "momentum", ")", ")", "\n", "\n"]]}