{"home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.main": [[43, 123], ["parser.parse_args", "print", "LightCNN_29v2", "SeparateImageList", "SeparateImageList.get_idx", "SeparateBatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss().cuda", "LightCNN_29v2.named_parameters", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "range", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "train_lightcnn.validate", "range", "print", "load_model", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "LightCNN_29v2.state_dict", "model.state_dict.update", "LightCNN_29v2.load_state_dict", "ImageList", "train_lightcnn.pre_train", "save_checkpoint", "LightCNN_29v2.parameters", "adjust_learning_rate", "train_lightcnn.train", "train_lightcnn.validate", "save_checkpoint", "torch.CrossEntropyLoss", "pretrained_dict.items"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.LightCNN_29v2", "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.get_idx", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.validate", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.pre_train", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.adjust_learning_rate", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.validate", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_ids", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# lightcnn", "\n", "model", "=", "LightCNN_29v2", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "# load pre trained model", "\n", "if", "args", ".", "pre_epoch", ":", "\n", "        ", "print", "(", "'load pretrained model %d'", "%", "args", ".", "pre_epoch", ")", "\n", "load_model", "(", "model", ",", "'./model/lightCNN_model_epoch_%d_iter_0.pth'", "%", "args", ".", "pre_epoch", ")", "\n", "", "else", ":", "\n", "# load pretrained lightcnn", "\n", "        ", "print", "(", "\"=> loading pretrained lightcnn model '{}'\"", ".", "format", "(", "args", ".", "weights", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "weights", ")", "\n", "pretrained_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "# dataset", "\n", "", "image_dataset", "=", "SeparateImageList", "(", "args", ".", "img_root", ",", "args", ".", "train_list", ",", "args", ".", "fake_path", ",", "args", ".", "fake_num", ")", "\n", "\n", "train_real_idx", ",", "train_fake_idx", "=", "image_dataset", ".", "get_idx", "(", ")", "\n", "batch_sampler", "=", "SeparateBatchSampler", "(", "train_real_idx", ",", "train_fake_idx", ",", "batch_size", "=", "args", ".", "batch_size", ",", "ratio", "=", "0.5", ")", "\n", "\n", "# real and fake training data", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "image_dataset", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ")", "\n", "\n", "# real training data", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "ImageList", "(", "root", "=", "args", ".", "img_root", ",", "fileList", "=", "args", ".", "train_list", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# loss function", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "'''\n    Stage I: model pretrained for last fc2 parameters\n    '''", "\n", "params_pretrain", "=", "[", "]", "\n", "for", "name", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'fc2_'", "in", "name", ":", "\n", "            ", "params_pretrain", "+=", "[", "{", "'params'", ":", "value", ",", "'lr'", ":", "10", "*", "args", ".", "lr", "}", "]", "\n", "\n", "# optimizer", "\n", "", "", "optimizer_pretrain", "=", "torch", ".", "optim", ".", "SGD", "(", "params_pretrain", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "pre_train", "(", "val_loader", ",", "model", ",", "criterion", ",", "optimizer_pretrain", ",", "epoch", ")", "\n", "\n", "save_checkpoint", "(", "model", ",", "epoch", ",", "0", ",", "'lightCNN_pretrain_'", ")", "\n", "\n", "\n", "", "'''\n    Stage II: model finetune for full network\n    '''", "\n", "# optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "start_epoch", "=", "args", ".", "pre_epoch", "+", "1", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "args", ".", "lr", ",", "args", ".", "step_size", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "prec1", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "save_checkpoint", "(", "model", ",", "epoch", ",", "0", ",", "'lightCNN_'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.pre_train": [[128, 159], ["AverageMeter", "AverageMeter", "AverageMeter", "model.train", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "accuracy", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "data[].cuda", "data[].cuda", "criterion.item", "torch.autograd.Variable.size", "prec1.item", "torch.autograd.Variable.size", "prec5.item", "torch.autograd.Variable.size", "print", "len"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.accuracy", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update"], ["", "", "def", "pre_train", "(", "val_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "input_var", "=", "Variable", "(", "data", "[", "'img'", "]", ".", "cuda", "(", ")", ")", "\n", "target_var", "=", "Variable", "(", "data", "[", "'label'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "output", ",", "_", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "\n", "            ", "info", "=", "'====> Epoch: [{:0>3d}][{:3d}/{:3d}] | '", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "val_loader", ")", ")", "\n", "info", "+=", "'Loss: real_ce: {:4.3f} ({:4.3f}) | '", ".", "format", "(", "losses", ".", "val", ",", "losses", ".", "avg", ")", "\n", "info", "+=", "'Prec@1: {:4.3f} ({:4.3f}) Prec@5: {:4.3f} ({:4.3f})'", ".", "format", "(", "top1", ".", "val", ",", "top1", ".", "avg", ",", "top5", ".", "val", ",", "top5", ".", "avg", ")", "\n", "print", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train": [[161, 244], ["AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "model.train", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "criterion", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "MMD_Loss", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "MMD_Loss", "optimizer.zero_grad", "loss_HFR.backward", "optimizer.step", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "accuracy", "AverageMeter.update", "AverageMeter.update", "data[].cuda", "data[].cuda", "data[].cuda", "criterion.item", "torch.index_select.size", "MMD_Loss.item", "MMD_Loss.item", "prec1.item", "torch.index_select.size", "prec5.item", "torch.index_select.size", "print", "len"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.MMD_Loss", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.MMD_Loss", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.accuracy", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "losses_real_ce", "=", "AverageMeter", "(", ")", "\n", "losses_real_mmd", "=", "AverageMeter", "(", ")", "\n", "losses_fake_mmd", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "input_var", "=", "Variable", "(", "data", "[", "'img'", "]", ".", "cuda", "(", ")", ")", "\n", "target_var", "=", "Variable", "(", "data", "[", "'label'", "]", ".", "cuda", "(", ")", ")", "\n", "domain_var", "=", "Variable", "(", "data", "[", "'domain_flag'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "# compute output", "\n", "output", ",", "fc", "=", "model", "(", "input_var", ")", "\n", "\n", "# select real nir and vis data", "\n", "idx_real", "=", "torch", ".", "nonzero", "(", "target_var", ".", "data", "!=", "-", "1", ")", "\n", "idx_real", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_real", "[", ":", ",", "0", "]", ")", "\n", "\n", "output_real", "=", "torch", ".", "index_select", "(", "output", ",", "0", ",", "idx_real", ")", "\n", "fc_real", "=", "torch", ".", "index_select", "(", "fc", ",", "0", ",", "idx_real", ")", "\n", "label_real", "=", "torch", ".", "index_select", "(", "target_var", ",", "0", ",", "idx_real", ")", "\n", "domain_real", "=", "torch", ".", "index_select", "(", "domain_var", ",", "0", ",", "idx_real", ")", "\n", "\n", "loss_real_ce", "=", "criterion", "(", "output_real", ",", "label_real", ")", "\n", "\n", "# select domain of real data", "\n", "idx_nir_real", "=", "torch", ".", "nonzero", "(", "domain_real", ".", "data", "!=", "1", ")", "\n", "idx_nir_real", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_nir_real", "[", ":", ",", "0", "]", ")", "\n", "fc_nir_real", "=", "torch", ".", "index_select", "(", "fc_real", ",", "0", ",", "idx_nir_real", ")", "\n", "\n", "idx_vis_real", "=", "torch", ".", "nonzero", "(", "domain_real", ".", "data", "!=", "0", ")", "\n", "idx_vis_real", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_vis_real", "[", ":", ",", "0", "]", ")", "\n", "fc_vis_real", "=", "torch", ".", "index_select", "(", "fc_real", ",", "0", ",", "idx_vis_real", ")", "\n", "\n", "loss_real_mmd", "=", "MMD_Loss", "(", "fc_nir_real", ",", "fc_vis_real", ")", "\n", "\n", "# select fake data", "\n", "idx_fake", "=", "torch", ".", "nonzero", "(", "target_var", ".", "data", "==", "-", "1", ")", "\n", "idx_fake", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_fake", "[", ":", ",", "0", "]", ")", "\n", "\n", "fc_fake", "=", "torch", ".", "index_select", "(", "fc", ",", "0", ",", "idx_fake", ")", "\n", "domain_fake", "=", "torch", ".", "index_select", "(", "domain_var", ",", "0", ",", "idx_fake", ")", "\n", "\n", "# select domain of fake data", "\n", "idx_nir_fake", "=", "torch", ".", "nonzero", "(", "domain_fake", ".", "data", "!=", "1", ")", "\n", "idx_nir_fake", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_nir_fake", "[", ":", ",", "0", "]", ")", "\n", "fc_nir_fake", "=", "torch", ".", "index_select", "(", "fc_fake", ",", "0", ",", "idx_nir_fake", ")", "\n", "\n", "idx_vis_fake", "=", "torch", ".", "nonzero", "(", "domain_fake", ".", "data", "!=", "0", ")", "\n", "idx_vis_fake", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_vis_fake", "[", ":", ",", "0", "]", ")", "\n", "fc_vis_fake", "=", "torch", ".", "index_select", "(", "fc_fake", ",", "0", ",", "idx_vis_fake", ")", "\n", "\n", "loss_fake_mmd", "=", "MMD_Loss", "(", "fc_nir_fake", ",", "fc_vis_fake", ")", "\n", "\n", "loss_HFR", "=", "loss_real_ce", "+", "0.001", "*", "loss_real_mmd", "+", "0.001", "*", "loss_fake_mmd", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_HFR", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "losses_real_ce", ".", "update", "(", "loss_real_ce", ".", "item", "(", ")", ",", "output_real", ".", "size", "(", "0", ")", ")", "\n", "losses_real_mmd", ".", "update", "(", "loss_real_mmd", ".", "item", "(", ")", ",", "1", ")", "\n", "losses_fake_mmd", ".", "update", "(", "loss_fake_mmd", ".", "item", "(", ")", ",", "1", ")", "\n", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output_real", ".", "data", ",", "label_real", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "output_real", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "output_real", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "info", "=", "'====> Epoch: [{:0>3d}][{:3d}/{:3d}] | '", ".", "format", "(", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ")", "\n", "\n", "info", "+=", "'Loss: real_ce: {:4.3f} ({:4.3f}) real_mmd: {:4.3f} ({:4.3f}) fake_mmd: {:4.3f} ({:4.3f}) | '", ".", "format", "(", "\n", "losses_real_ce", ".", "val", ",", "losses_real_ce", ".", "avg", ",", "losses_real_mmd", ".", "val", ",", "losses_real_mmd", ".", "avg", ",", "losses_fake_mmd", ".", "val", ",", "losses_fake_mmd", ".", "avg", ")", "\n", "\n", "info", "+=", "'Prec@1: {:4.3f} ({:4.3f}) Prec@5: {:4.3f} ({:4.3f})'", ".", "format", "(", "top1", ".", "val", ",", "top1", ".", "avg", ",", "top5", ".", "val", ",", "top5", ".", "avg", ")", "\n", "\n", "print", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.validate": [[246, 269], ["AverageMeter", "AverageMeter", "AverageMeter", "model.eval", "enumerate", "print", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion", "accuracy", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "data[].cuda", "data[].cuda", "criterion.item", "torch.autograd.Variable.size", "prec1.item", "torch.autograd.Variable.size", "prec5.item", "torch.autograd.Variable.size"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.accuracy", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update"], ["", "", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "input_var", "=", "Variable", "(", "data", "[", "'img'", "]", ".", "cuda", "(", ")", ")", "\n", "target_var", "=", "Variable", "(", "data", "[", "'label'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "output", ",", "_", "=", "model", "(", "input_var", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_var", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ".", "data", ",", "target_var", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input_var", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "print", "(", "'\\nTest set: Average loss: {}, Accuracy: ({})\\n'", ".", "format", "(", "losses", ".", "avg", ",", "top1", ".", "avg", ")", ")", "\n", "\n", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.None.val.main": [[28, 73], ["parser.parse_args", "print", "define_G", "load_model", "netG.eval", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.autograd.Variable().cuda", "netG", "fake[].data.cpu().numpy", "fake[].data.cpu().numpy", "range", "print", "numpy.transpose", "PIL.Image.fromarray", "Image.fromarray.save", "numpy.transpose", "PIL.Image.fromarray", "Image.fromarray.save", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "fake[].data.cpu", "fake[].data.cpu", "str", "os.path.join", "str", "os.path.join"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.define_G", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "opt", ",", "model", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_ids", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_path_1", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_path_1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_path_2", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_path_2", ")", "\n", "\n", "# generator", "\n", "", "netE_nir", ",", "netE_vis", ",", "netG", "=", "define_G", "(", "hdim", "=", "args", ".", "hdim", ")", "\n", "load_model", "(", "netG", ",", "args", ".", "pre_model", ")", "\n", "netG", ".", "eval", "(", ")", "\n", "\n", "num", "=", "0", "\n", "for", "n", "in", "range", "(", "1000", ")", ":", "\n", "        ", "noise", "=", "torch", ".", "zeros", "(", "100", ",", "args", ".", "hdim", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "noise", "=", "torch", ".", "cat", "(", "(", "noise", ",", "noise", ")", ",", "dim", "=", "1", ")", "\n", "noise", "=", "Variable", "(", "noise", ")", ".", "cuda", "(", ")", "\n", "\n", "fake", "=", "netG", "(", "noise", ")", "\n", "\n", "nir", "=", "fake", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vis", "=", "fake", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nir", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "num", "=", "num", "+", "1", "\n", "save_img", "=", "nir", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "save_img", "=", "np", ".", "transpose", "(", "(", "255", "*", "save_img", ")", ".", "astype", "(", "'uint8'", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "save_img", ")", "\n", "save_name", "=", "str", "(", "num", ")", "+", "'.jpg'", "\n", "output", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path_1", ",", "save_name", ")", ")", "\n", "\n", "save_img", "=", "vis", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "save_img", "=", "np", ".", "transpose", "(", "(", "255", "*", "save_img", ")", ".", "astype", "(", "'uint8'", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "save_img", ")", "\n", "save_name", "=", "str", "(", "num", ")", "+", "'.jpg'", "\n", "output", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_path_2", ",", "save_name", ")", ")", "\n", "\n", "", "print", "(", "num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_generator.main": [[41, 184], ["parser.parse_args", "print", "define_G", "define_IP", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "define_IP.state_dict", "netIP.state_dict.update", "define_IP.load_state_dict", "define_IP.parameters", "torch.Adam", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.nn.MSELoss().cuda", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "os.path.exists", "os.makedirs", "print", "load_model", "load_model", "load_model", "GenDataset", "AverageMeter", "AverageMeter", "netE_nir.train", "netE_vis.train", "netG.train", "define_IP.eval", "time.time", "enumerate", "pretrained_dict.items", "list", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "AverageMeter.update", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "netE_nir", "netE_vis", "reparameterize", "reparameterize", "netG", "define_IP.", "define_IP.", "define_IP.", "define_IP.", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "optim.Adam.zero_grad", "loss.backward", "optim.Adam.step", "AverageMeter.update", "time.time", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.zeros().normal_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "noise.cuda.cuda", "netG", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "torchvision.save_image", "save_checkpoint", "save_checkpoint", "save_checkpoint", "list", "list", "netG.parameters", "batch[].cuda", "batch[].cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reconstruction_loss", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "torch.abs().mean", "rgb2gray", "rgb2gray", "rgb2gray", "rgb2gray", "torch.nn.MSELoss().cuda.", "print", "netE_nir.parameters", "netE_vis.parameters", "time.time", "kl_loss().mean", "kl_loss().mean", "time.time", "len", "loss_rec.item", "loss_kl.item", "loss_mmd.item", "loss_ip.item", "loss_pair.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.nn.MSELoss().cuda.", "torch.nn.MSELoss().cuda.", "kl_loss", "kl_loss", "F.normalize.detach", "F.normalize.detach", "reparameterize.mean", "reparameterize.mean"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.define_G", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.define_IP", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.None.train_lightcnn.train", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.reparameterize", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.reparameterize", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.reconstruction_loss", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.rgb2gray", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.rgb2gray", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.rgb2gray", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.rgb2gray", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.kl_loss", "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.kl_loss"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_ids", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_path", ")", "\n", "\n", "# generator", "\n", "", "netE_nir", ",", "netE_vis", ",", "netG", "=", "define_G", "(", "hdim", "=", "args", ".", "hdim", ")", "\n", "\n", "if", "args", ".", "pre_epoch", ":", "\n", "        ", "print", "(", "'load pretrained model %d'", "%", "args", ".", "pre_epoch", ")", "\n", "load_model", "(", "netE_nir", ",", "'./model/netE_nir_model_epoch_%d_iter_0.pth'", "%", "args", ".", "pre_epoch", ")", "\n", "load_model", "(", "netE_vis", ",", "'./model/netE_vis_model_epoch_%d_iter_0.pth'", "%", "args", ".", "pre_epoch", ")", "\n", "load_model", "(", "netG", ",", "'./model/netG_model_epoch_%d_iter_0.pth'", "%", "args", ".", "pre_epoch", ")", "\n", "\n", "# IP net", "\n", "", "netIP", "=", "define_IP", "(", ")", "\n", "\n", "print", "(", "\"=> loading pretrained identity preserving model '{}'\"", ".", "format", "(", "args", ".", "ip_model", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "ip_model", ")", "\n", "\n", "pretrained_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model_dict", "=", "netIP", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "netIP", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "for", "param", "in", "netIP", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# optimizer", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "list", "(", "netE_nir", ".", "parameters", "(", ")", ")", "+", "list", "(", "netE_vis", ".", "parameters", "(", ")", ")", "+", "list", "(", "netG", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "# criterion", "\n", "criterionL2", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "GenDataset", "(", "img_root", "=", "args", ".", "img_root", ",", "list_file", "=", "args", ".", "train_list", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "# train", "\n", "start_epoch", "=", "args", ".", "pre_epoch", "+", "1", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "all_epochs", "+", "1", ")", ":", "\n", "        ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "netE_nir", ".", "train", "(", ")", "\n", "netE_vis", ".", "train", "(", ")", "\n", "netG", ".", "train", "(", ")", "\n", "netIP", ".", "eval", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "iteration", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "\n", "img_nir", "=", "Variable", "(", "batch", "[", "'0'", "]", ".", "cuda", "(", ")", ")", "\n", "img_vis", "=", "Variable", "(", "batch", "[", "'1'", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "img", "=", "torch", ".", "cat", "(", "(", "img_nir", ",", "img_vis", ")", ",", "1", ")", "\n", "\n", "# encoder forward", "\n", "mu_nir", ",", "logvar_nir", "=", "netE_nir", "(", "img_nir", ")", "\n", "mu_vis", ",", "logvar_vis", "=", "netE_vis", "(", "img_vis", ")", "\n", "\n", "# reparameterization", "\n", "z_nir", "=", "reparameterize", "(", "mu_nir", ",", "logvar_nir", ")", "\n", "z_vis", "=", "reparameterize", "(", "mu_vis", ",", "logvar_vis", ")", "\n", "\n", "# generator", "\n", "rec", "=", "netG", "(", "torch", ".", "cat", "(", "(", "z_nir", ",", "z_vis", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# vae loss", "\n", "loss_rec", "=", "reconstruction_loss", "(", "rec", ",", "img", ",", "True", ")", "/", "2.0", "\n", "loss_kl", "=", "(", "kl_loss", "(", "mu_nir", ",", "logvar_nir", ")", ".", "mean", "(", ")", "+", "kl_loss", "(", "mu_vis", ",", "logvar_vis", ")", ".", "mean", "(", ")", ")", "/", "2.0", "\n", "\n", "# mmd loss", "\n", "loss_mmd", "=", "args", ".", "lambda_mmd", "*", "torch", ".", "abs", "(", "z_nir", ".", "mean", "(", "dim", "=", "0", ")", "-", "z_vis", ".", "mean", "(", "dim", "=", "0", ")", ")", ".", "mean", "(", ")", "\n", "\n", "# identity preserving loss", "\n", "rec_nir", "=", "rec", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", "\n", "rec_vis", "=", "rec", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", "\n", "\n", "nir_fc", "=", "netIP", "(", "rgb2gray", "(", "img_nir", ")", ")", "\n", "vis_fc", "=", "netIP", "(", "rgb2gray", "(", "img_vis", ")", ")", "\n", "rec_nir_fc", "=", "netIP", "(", "rgb2gray", "(", "rec_nir", ")", ")", "\n", "rec_vis_fc", "=", "netIP", "(", "rgb2gray", "(", "rec_vis", ")", ")", "\n", "\n", "nir_fc", "=", "F", ".", "normalize", "(", "nir_fc", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "vis_fc", "=", "F", ".", "normalize", "(", "vis_fc", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "rec_nir_fc", "=", "F", ".", "normalize", "(", "rec_nir_fc", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "rec_vis_fc", "=", "F", ".", "normalize", "(", "rec_vis_fc", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "loss_ip", "=", "args", ".", "lambda_ip", "*", "(", "criterionL2", "(", "rec_nir_fc", ",", "nir_fc", ".", "detach", "(", ")", ")", "+", "criterionL2", "(", "rec_vis_fc", ",", "vis_fc", ".", "detach", "(", ")", ")", ")", "/", "2.0", "\n", "loss_pair", "=", "args", ".", "lambda_pair", "*", "criterionL2", "(", "rec_nir_fc", ",", "rec_vis_fc", ")", "\n", "\n", "# ", "\n", "if", "epoch", "<", "2", ":", "\n", "                ", "loss", "=", "loss_rec", "+", "0.01", "*", "loss_kl", "+", "0.01", "*", "loss_mmd", "+", "0.01", "*", "loss_ip", "+", "0.01", "*", "loss_pair", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_rec", "+", "loss_kl", "+", "loss_mmd", "+", "loss_ip", "+", "loss_pair", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "iteration", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "info", "=", "'====> Epoch: [{:0>4d}][{:3d}/{:3d}] Batch_time: {:4.3f} Data_time: {:4.3f} | '", ".", "format", "(", "\n", "epoch", ",", "iteration", ",", "len", "(", "train_loader", ")", ",", "batch_time", ".", "avg", ",", "data_time", ".", "avg", ")", "\n", "\n", "info", "+=", "'Loss: rec: {:4.3f} kl: {:4.3f} mmd: {:4.3f} ip: {:4.3f} pair: {:4.3f}'", ".", "format", "(", "\n", "loss_rec", ".", "item", "(", ")", ",", "loss_kl", ".", "item", "(", ")", ",", "loss_mmd", ".", "item", "(", ")", ",", "loss_ip", ".", "item", "(", ")", ",", "loss_pair", ".", "item", "(", ")", ")", "\n", "\n", "print", "(", "info", ")", "\n", "\n", "# test", "\n", "", "", "if", "(", "epoch", "%", "args", ".", "test_epoch", "is", "0", "or", "epoch", "==", "1", ")", ":", "\n", "            ", "noise", "=", "torch", ".", "zeros", "(", "args", ".", "batch_size", ",", "args", ".", "hdim", ")", ".", "normal_", "(", "0", ",", "1", ")", "\n", "noise", "=", "torch", ".", "cat", "(", "(", "noise", ",", "noise", ")", ",", "dim", "=", "1", ")", "\n", "noise", "=", "noise", ".", "cuda", "(", ")", "\n", "\n", "fake", "=", "netG", "(", "noise", ")", "\n", "\n", "vutils", ".", "save_image", "(", "img_nir", ".", "data", ",", "'{}/Epoch_{:03d}_img_nir.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "vutils", ".", "save_image", "(", "img_vis", ".", "data", ",", "'{}/Epoch_{:03d}_img_vis.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "vutils", ".", "save_image", "(", "rec_nir", ".", "data", ",", "'{}/Epoch_{:03d}_rec_nir.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "vutils", ".", "save_image", "(", "rec_vis", ".", "data", ",", "'{}/Epoch_{:03d}_rec_vis.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "vutils", ".", "save_image", "(", "fake", "[", ":", ",", "0", ":", "3", ",", ":", ",", ":", "]", ".", "data", ",", "'{}/Epoch_{:03d}_fake_nir.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "vutils", ".", "save_image", "(", "fake", "[", ":", ",", "3", ":", "6", ",", ":", ",", ":", "]", ".", "data", ",", "'{}/Epoch_{:03d}_fake_vis.png'", ".", "format", "(", "args", ".", "out_path", ",", "epoch", ")", ")", "\n", "\n", "# save models", "\n", "", "if", "(", "epoch", "%", "args", ".", "save_epoch", "==", "0", "or", "epoch", "==", "1", ")", ":", "\n", "            ", "save_checkpoint", "(", "netE_nir", ",", "epoch", ",", "0", ",", "'netE_nir_'", ")", "\n", "save_checkpoint", "(", "netE_vis", ",", "epoch", ",", "0", ",", "'netE_vis_'", ")", "\n", "save_checkpoint", "(", "netG", ",", "epoch", ",", "0", ",", "'netG_'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.mfm.__init__": [[7, 15], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "type", "=", "1", ")", ":", "\n", "        ", "super", "(", "mfm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "if", "type", "==", "1", ":", "\n", "            ", "self", ".", "filter", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "2", "*", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "filter", "=", "nn", ".", "Linear", "(", "in_channels", ",", "2", "*", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.mfm.forward": [[16, 20], ["light_cnn.mfm.filter", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "out", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "out_channels", ",", "1", ")", "\n", "return", "torch", ".", "max", "(", "out", "[", "0", "]", ",", "out", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.group.__init__": [[23, 27], ["torch.Module.__init__", "light_cnn.mfm", "light_cnn.mfm"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", ":", "\n", "        ", "super", "(", "group", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_a", "=", "mfm", "(", "in_channels", ",", "in_channels", ",", "1", ",", "1", ",", "0", ")", "\n", "self", ".", "conv", "=", "mfm", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.group.forward": [[28, 32], ["light_cnn.group.conv_a", "light_cnn.group.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.resblock.__init__": [[35, 39], ["torch.Module.__init__", "light_cnn.mfm", "light_cnn.mfm"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "resblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "mfm", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "mfm", "(", "out_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.resblock.forward": [[40, 46], ["light_cnn.resblock.conv1", "light_cnn.resblock.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "out", "+", "res", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2.__init__": [[49, 65], ["torch.Module.__init__", "light_cnn.mfm", "light_cnn.network_29layers_v2._make_layer", "light_cnn.group", "light_cnn.network_29layers_v2._make_layer", "light_cnn.group", "light_cnn.network_29layers_v2._make_layer", "light_cnn.group", "light_cnn.network_29layers_v2._make_layer", "light_cnn.group", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2._make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2._make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2._make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "is_train", "=", "False", ",", "num_classes", "=", "80013", ")", ":", "\n", "        ", "super", "(", "network_29layers_v2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "conv1", "=", "mfm", "(", "1", ",", "48", ",", "5", ",", "1", ",", "2", ")", "\n", "self", ".", "block1", "=", "self", ".", "_make_layer", "(", "block", ",", "layers", "[", "0", "]", ",", "48", ",", "48", ")", "\n", "self", ".", "group1", "=", "group", "(", "48", ",", "96", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "block2", "=", "self", ".", "_make_layer", "(", "block", ",", "layers", "[", "1", "]", ",", "96", ",", "96", ")", "\n", "self", ".", "group2", "=", "group", "(", "96", ",", "192", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "block3", "=", "self", ".", "_make_layer", "(", "block", ",", "layers", "[", "2", "]", ",", "192", ",", "192", ")", "\n", "self", ".", "group3", "=", "group", "(", "192", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "block4", "=", "self", ".", "_make_layer", "(", "block", ",", "layers", "[", "3", "]", ",", "128", ",", "128", ")", "\n", "self", ".", "group4", "=", "group", "(", "128", ",", "128", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "8", "*", "8", "*", "128", ",", "256", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "fc2_", "=", "nn", ".", "Linear", "(", "256", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2._make_layer": [[66, 71], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "num_blocks", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.light_cnn.network_29layers_v2.forward": [[72, 99], ["light_cnn.network_29layers_v2.conv1", "light_cnn.network_29layers_v2.block1", "light_cnn.network_29layers_v2.group1", "light_cnn.network_29layers_v2.block2", "light_cnn.network_29layers_v2.group2", "light_cnn.network_29layers_v2.block3", "light_cnn.network_29layers_v2.group3", "light_cnn.network_29layers_v2.block4", "light_cnn.network_29layers_v2.group4", "torch.dropout.view", "light_cnn.network_29layers_v2.fc", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.dropout.size", "torch.dropout", "torch.dropout", "torch.dropout", "light_cnn.network_29layers_v2.fc2_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "+", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "group1", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "+", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "group2", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "+", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "group3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "group4", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "+", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "fc", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "x", "=", "F", ".", "dropout", "(", "fc", ",", "training", "=", "self", ".", "training", ")", "\n", "out", "=", "self", ".", "fc2_", "(", "x", ")", "\n", "return", "out", ",", "fc", "\n", "", "else", ":", "\n", "            ", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.Encoder.__init__": [[10, 33], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "generator.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "generator.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "generator.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "generator.make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "generator.make_layer"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "hdim", "=", "256", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hdim", "=", "hdim", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "5", ",", "1", ",", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "32", ",", "eps", "=", "0.001", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "32", ",", "64", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "64", ",", "128", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "128", ",", "256", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "256", ",", "512", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "512", ",", "512", ")", "\n", ")", "\n", "\n", "# mu and logvar", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "2", "*", "hdim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.Encoder.forward": [[34, 40], ["generator.Encoder.main().view", "generator.Encoder.fc", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "x.size", "generator.Encoder.main"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.None.train_generator.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "main", "(", "x", ")", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "z", "=", "self", ".", "fc", "(", "z", ")", "\n", "mu", ",", "logvar", "=", "torch", ".", "split", "(", "z", ",", "split_size_or_sections", "=", "self", ".", "hdim", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.Decoder.__init__": [[43, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "generator.make_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "generator.make_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "generator.make_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "generator.make_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "generator.make_layer", "torch.Upsample", "torch.Upsample", "torch.Upsample", "generator.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer", "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "hdim", "=", "256", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hdim", ",", "512", "*", "4", "*", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "\n", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "512", ",", "512", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "512", ",", "512", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "512", ",", "512", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "512", ",", "256", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "1", ",", "256", ",", "128", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "make_layer", "(", "_Residual_Block", ",", "2", ",", "128", ",", "64", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "3", "+", "3", ",", "5", ",", "1", ",", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.Decoder.forward": [[66, 72], ["z.view.view.view", "generator.Decoder.fc", "generator.Decoder.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "z.view.view.size", "z.view.view.size", "generator.Decoder.main"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.None.train_generator.main"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "fc", "(", "z", ")", "\n", "x", "=", "y", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "img", "=", "torch", ".", "sigmoid", "(", "self", ".", "main", "(", "x", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator._Residual_Block.__init__": [[75, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inc", "=", "64", ",", "outc", "=", "64", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "_Residual_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "inc", "is", "not", "outc", ":", "\n", "            ", "self", ".", "conv_expand", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "inc", ",", "out_channels", "=", "outc", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_expand", "=", "None", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "inc", ",", "out_channels", "=", "outc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "outc", ",", "eps", "=", "0.001", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "outc", ",", "out_channels", "=", "outc", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "outc", ",", "eps", "=", "0.001", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator._Residual_Block.forward": [[90, 100], ["generator._Residual_Block.relu1", "generator._Residual_Block.conv2", "generator._Residual_Block.relu2", "generator._Residual_Block.conv_expand", "generator._Residual_Block.bn1", "generator._Residual_Block.bn2", "generator._Residual_Block.conv1", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "conv_expand", "is", "not", "None", ":", "\n", "            ", "identity_data", "=", "self", ".", "conv_expand", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "identity_data", "=", "x", "\n", "\n", "", "output", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "torch", ".", "add", "(", "output", ",", "identity_data", ")", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.generator.make_layer": [[102, 110], ["layers.append", "range", "torch.Sequential", "block", "layers.append", "block"], "function", ["None"], ["", "", "def", "make_layer", "(", "block", ",", "num_of_layer", ",", "inc", "=", "64", ",", "outc", "=", "64", ",", "groups", "=", "1", ")", ":", "\n", "    ", "if", "num_of_layer", "<", "1", ":", "\n", "        ", "num_of_layer", "=", "1", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inc", "=", "inc", ",", "outc", "=", "outc", ",", "groups", "=", "groups", ")", ")", "\n", "for", "_", "in", "range", "(", "1", ",", "num_of_layer", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", "inc", "=", "outc", ",", "outc", "=", "outc", ",", "groups", "=", "groups", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "", "", ""]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.define_G": [[6, 17], ["generator.Encoder", "generator.Encoder", "generator.Decoder", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["None"], ["def", "define_G", "(", "hdim", "=", "256", ")", ":", "\n", "\n", "    ", "netE_nir", "=", "Encoder", "(", "hdim", "=", "hdim", ")", "\n", "netE_vis", "=", "Encoder", "(", "hdim", "=", "hdim", ")", "\n", "netG", "=", "Decoder", "(", "hdim", "=", "2", "*", "hdim", ")", "\n", "\n", "netE_nir", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netE_nir", ")", ".", "cuda", "(", ")", "\n", "netE_vis", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netE_vis", ")", ".", "cuda", "(", ")", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "netE_nir", ",", "netE_vis", ",", "netG", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.define_IP": [[20, 24], ["light_cnn.network_29layers_v2", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel"], "function", ["None"], ["", "def", "define_IP", "(", "is_train", "=", "False", ")", ":", "\n", "    ", "netIP", "=", "network_29layers_v2", "(", "resblock", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "is_train", ")", "\n", "netIP", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netIP", ")", ".", "cuda", "(", ")", "\n", "return", "netIP", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.networks.__init__.LightCNN_29v2": [[27, 31], ["light_cnn.network_29layers_v2", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel"], "function", ["None"], ["", "def", "LightCNN_29v2", "(", "num_classes", "=", "10000", ",", "is_train", "=", "True", ")", ":", "\n", "    ", "net", "=", "network_29layers_v2", "(", "resblock", ",", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "is_train", ",", "num_classes", "=", "num_classes", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ")", ".", "cuda", "(", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.ImageList.__init__": [[27, 35], ["list_reader", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.list_reader"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "fileList", ",", "list_reader", "=", "default_list_reader", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imgList", "=", "list_reader", "(", "fileList", ")", "\n", "self", ".", "loader", "=", "loader", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "128", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.ImageList.__getitem__": [[37, 44], ["recognition_dataset.ImageList.loader", "recognition_dataset.ImageList.transform", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imgPath", ",", "target", ",", "domain", "=", "self", ".", "imgList", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "imgPath", ")", ")", "\n", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "{", "'img'", ":", "img", ",", "'label'", ":", "target", ",", "'domain_flag'", ":", "domain", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.ImageList.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateBatchSampler.__init__": [[52, 63], ["len", "len", "max", "copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "real_data_idx", ",", "fake_data_idx", ",", "batch_size", "=", "128", ",", "ratio", "=", "0.5", ",", "put_back", "=", "False", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "real_data_num", "=", "len", "(", "real_data_idx", ")", "\n", "self", ".", "fake_data_num", "=", "len", "(", "fake_data_idx", ")", "\n", "self", ".", "max_num_image", "=", "max", "(", "self", ".", "real_data_num", ",", "self", ".", "fake_data_num", ")", "\n", "\n", "self", ".", "real_data_idx", "=", "real_data_idx", "\n", "self", ".", "fake_data_idx", "=", "fake_data_idx", "\n", "\n", "self", ".", "processed_idx", "=", "copy", ".", "deepcopy", "(", "self", ".", "real_data_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateBatchSampler.__len__": [[64, 66], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_num_image", "//", "(", "int", "(", "self", ".", "batch_size", "*", "self", ".", "ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateBatchSampler.__iter__": [[67, 86], ["int", "copy.deepcopy", "numpy.random.permutation", "range", "math.floor", "recognition_dataset.SeparateBatchSampler.__len__", "random.sample", "range", "len", "batch.append", "batch.append", "batch.append", "batch.append"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.__len__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_size_real_data", "=", "int", "(", "math", ".", "floor", "(", "self", ".", "ratio", "*", "self", ".", "batch_size", ")", ")", "\n", "batch_size_fake_data", "=", "self", ".", "batch_size", "-", "batch_size_real_data", "\n", "\n", "self", ".", "processed_idx", "=", "copy", ".", "deepcopy", "(", "self", ".", "real_data_idx", ")", "\n", "rand_real_data_idx", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "real_data_idx", ")", "//", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "__len__", "(", ")", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "idx_fake_data", "=", "random", ".", "sample", "(", "self", ".", "fake_data_idx", ",", "batch_size_fake_data", "//", "2", ")", "\n", "\n", "for", "j", "in", "range", "(", "batch_size_real_data", "//", "2", ")", ":", "\n", "                ", "idx", "=", "rand_real_data_idx", "[", "(", "i", "*", "batch_size_real_data", "+", "j", ")", "%", "(", "self", ".", "real_data_num", "//", "2", ")", "]", "\n", "batch", ".", "append", "(", "self", ".", "processed_idx", "[", "2", "*", "idx", "]", ")", "\n", "batch", ".", "append", "(", "self", ".", "processed_idx", "[", "2", "*", "idx", "+", "1", "]", ")", "\n", "\n", "", "for", "idx", "in", "idx_fake_data", ":", "\n", "                ", "batch", ".", "append", "(", "2", "*", "idx", "+", "self", ".", "real_data_num", ")", "\n", "batch", ".", "append", "(", "2", "*", "idx", "+", "1", "+", "self", ".", "real_data_num", ")", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.__init__": [[91, 128], ["torchvision.Compose", "recognition_dataset.SeparateImageList.list_reader", "numpy.random.permutation", "range", "real_data_list.extend", "print", "os.path.join", "os.path.join", "fake_data_list.append", "fake_data_list.append", "fake_data_idx.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "str", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.list_reader"], ["    ", "def", "__init__", "(", "self", ",", "real_data_path", ",", "real_list_path", ",", "fake_data_path", ",", "fake_total_num", ",", "ratio", "=", "0.5", ")", ":", "\n", "\n", "        ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "128", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "# load real nir/vis data", "\n", "real_data_list", ",", "real_data_idx", "=", "self", ".", "list_reader", "(", "real_data_path", ",", "real_list_path", ")", "\n", "\n", "# load fake nir/vis data from noise", "\n", "_idx", "=", "np", ".", "random", ".", "permutation", "(", "fake_total_num", ")", "\n", "fake_data_list", "=", "[", "]", "\n", "fake_data_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "fake_total_num", ")", ":", "\n", "            ", "_fake_img_name", "=", "str", "(", "_idx", "[", "i", "]", "+", "1", ")", "+", "'.jpg'", "\n", "\n", "# nir_noise and vis_noise are the path of the fake data", "\n", "_fake_img_nir_name", "=", "'nir_noise/'", "+", "_fake_img_name", "\n", "_fake_img_vis_name", "=", "'vis_noise/'", "+", "_fake_img_name", "\n", "\n", "_fake_img_nir_path", "=", "os", ".", "path", ".", "join", "(", "fake_data_path", ",", "_fake_img_nir_name", ")", "\n", "_fake_img_vis_path", "=", "os", ".", "path", ".", "join", "(", "fake_data_path", ",", "_fake_img_vis_name", ")", "\n", "fake_data_list", ".", "append", "(", "(", "_fake_img_nir_path", ",", "-", "1", ",", "0", ")", ")", "\n", "fake_data_list", ".", "append", "(", "(", "_fake_img_vis_path", ",", "-", "1", ",", "1", ")", ")", "\n", "fake_data_idx", ".", "append", "(", "i", ")", "\n", "\n", "", "self", ".", "real_data_idx", "=", "real_data_idx", "\n", "self", ".", "fake_data_idx", "=", "fake_data_idx", "\n", "\n", "real_data_list", ".", "extend", "(", "fake_data_list", ")", "\n", "self", ".", "all_list", "=", "real_data_list", "\n", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n", "print", "(", "'real: {}, fake: {}, total: {}, ratio: {}\\n'", ".", "format", "(", "len", "(", "self", ".", "real_data_idx", ")", ",", "len", "(", "self", ".", "fake_data_idx", ")", ",", "len", "(", "self", ".", "all_list", ")", ",", "self", ".", "ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.get_idx": [[129, 131], ["None"], "methods", ["None"], ["", "def", "get_idx", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "real_data_idx", ",", "self", ".", "fake_data_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.list_reader": [[132, 144], ["open", "file.readlines", "line.strip().split", "os.path.join", "imgList.append", "imgIdx.append", "line.strip", "int", "int"], "methods", ["None"], ["", "def", "list_reader", "(", "self", ",", "root_path", ",", "fileList", ")", ":", "\n", "        ", "imgList", "=", "[", "]", "\n", "imgIdx", "=", "[", "]", "\n", "img_index", "=", "0", "\n", "with", "open", "(", "fileList", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "                ", "img_name", ",", "label", ",", "domain", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "img_name", ")", "\n", "imgList", ".", "append", "(", "(", "img_path", ",", "int", "(", "label", ")", ",", "int", "(", "domain", ")", ")", ")", "\n", "imgIdx", ".", "append", "(", "img_index", ")", "\n", "img_index", "+=", "1", "\n", "", "", "return", "imgList", ",", "imgIdx", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.loader": [[145, 148], ["PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], ["", "def", "loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'L'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.__getitem__": [[149, 156], ["recognition_dataset.SeparateImageList.loader", "recognition_dataset.SeparateImageList.transform"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "imgPath", ",", "target", ",", "domain", "=", "self", ".", "all_list", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "imgPath", ")", "\n", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "return", "{", "'img'", ":", "img", ",", "'label'", ":", "target", ",", "'domain_flag'", ":", "domain", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.SeparateImageList.__len__": [[157, 159], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "all_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.default_loader": [[14, 17], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'L'", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.recognition_dataset.default_list_reader": [[18, 25], ["open", "file.readlines", "line.strip().split", "imgList.append", "line.strip", "int", "int"], "function", ["None"], ["", "def", "default_list_reader", "(", "fileList", ")", ":", "\n", "    ", "imgList", "=", "[", "]", "\n", "with", "open", "(", "fileList", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "            ", "imgPath", ",", "label", ",", "domain", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "imgList", ".", "append", "(", "(", "imgPath", ",", "int", "(", "label", ")", ",", "int", "(", "domain", ")", ")", ")", "\n", "", "", "return", "imgList", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.__init__": [[13, 25], ["torch.Dataset.__init__", "torchvision.Compose", "generation_dataset.GenDataset.file_reader", "torchvision.CenterCrop", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__", "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.file_reader"], ["    ", "def", "__init__", "(", "self", ",", "img_root", ",", "list_file", ")", ":", "\n", "        ", "super", "(", "GenDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "img_root", "=", "img_root", "\n", "self", ".", "list_file", "=", "list_file", "\n", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "CenterCrop", "(", "128", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "img_domain0_list", ",", "self", ".", "make_pair_dict", "=", "self", ".", "file_reader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.__getitem__": [[26, 39], ["img_line.strip().split", "generation_dataset.GenDataset.get_pair", "PIL.Image.open", "PIL.Image.open", "generation_dataset.GenDataset.transform", "generation_dataset.GenDataset.transform", "os.path.join", "os.path.join", "img_line.strip"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.get_pair"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_line", "=", "self", ".", "img_domain0_list", "[", "index", "]", "\n", "img_name_domain0", ",", "label", ",", "_", "=", "img_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n", "img_name_domain1", "=", "self", ".", "get_pair", "(", "label", ",", "'1'", ")", "\n", "\n", "img_domain0", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "img_name_domain0", ")", ")", "\n", "img_domain1", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "img_name_domain1", ")", ")", "\n", "\n", "img_domain0", "=", "self", ".", "transform", "(", "img_domain0", ")", "\n", "img_domain1", "=", "self", ".", "transform", "(", "img_domain1", ")", "\n", "\n", "return", "{", "'0'", ":", "img_domain0", ",", "'1'", ":", "img_domain1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "img_domain0_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.file_reader": [[43, 63], ["collections.defaultdict", "open", "file.readlines", "line.strip().split", "[].append", "x.strip", "img_domain0_list.append", "line.strip"], "methods", ["None"], ["", "def", "file_reader", "(", "self", ")", ":", "\n", "\n", "        ", "def", "dict_profile", "(", ")", ":", "\n", "            ", "return", "{", "'0'", ":", "[", "]", ",", "'1'", ":", "[", "]", "}", "\n", "\n", "", "with", "open", "(", "self", ".", "list_file", ")", "as", "file", ":", "\n", "            ", "img_list", "=", "file", ".", "readlines", "(", ")", "\n", "img_list", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "img_list", "]", "\n", "\n", "", "make_pair_dict", "=", "defaultdict", "(", "dict_profile", ")", "\n", "img_domain0_list", "=", "[", "]", "\n", "\n", "for", "line", "in", "img_list", ":", "\n", "            ", "img_name", ",", "label", ",", "domain_flag", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "make_pair_dict", "[", "label", "]", "[", "domain_flag", "]", ".", "append", "(", "img_name", ")", "\n", "\n", "if", "domain_flag", "==", "'0'", ":", "\n", "                ", "img_domain0_list", ".", "append", "(", "line", ")", "\n", "\n", "", "", "return", "img_domain0_list", ",", "make_pair_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.data.generation_dataset.GenDataset.get_pair": [[64, 67], ["random.choice"], "methods", ["None"], ["", "def", "get_pair", "(", "self", ",", "label", ",", "domain_flag", ")", ":", "\n", "        ", "img_name", "=", "random", ".", "choice", "(", "self", ".", "make_pair_dict", "[", "label", "]", "[", "domain_flag", "]", ")", "\n", "return", "img_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.__init__": [[55, 57], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.reset": [[58, 63], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update": [[64, 69], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.rgb2gray": [[9, 12], ["torch.split", "torch.split", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "function", ["None"], ["def", "rgb2gray", "(", "img", ")", ":", "\n", "    ", "r", ",", "g", ",", "b", "=", "torch", ".", "split", "(", "img", ",", "1", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "mul", "(", "r", ",", "0.299", ")", "+", "torch", ".", "mul", "(", "g", ",", "0.587", ")", "+", "torch", ".", "mul", "(", "b", ",", "0.114", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.reparameterize": [[13, 17], ["logvar.mul().exp_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_", "torch.cuda.FloatTensor().normal_.mul().add_", "logvar.mul", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor().normal_.mul", "logvar.mul().exp_.size"], "function", ["None"], ["", "def", "reparameterize", "(", "mu", ",", "logvar", ")", ":", "\n", "    ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", "\n", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.kl_loss": [[18, 22], ["mu.add().pow().add_().mul_().add_().add_", "v_kl.sum().mul_.sum().mul_", "mu.add().pow().add_().mul_().add_", "v_kl.sum().mul_.sum", "mu.add().pow().add_().mul_", "mu.add().pow().add_", "logvar.exp", "mu.add().pow", "mu.add"], "function", ["None"], ["", "def", "kl_loss", "(", "mu", ",", "logvar", ",", "prior_mu", "=", "0", ")", ":", "\n", "    ", "v_kl", "=", "mu", ".", "add", "(", "-", "prior_mu", ")", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "v_kl", "=", "v_kl", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mul_", "(", "-", "0.5", ")", "# (batch, 2)", "\n", "return", "v_kl", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.reconstruction_loss": [[23, 33], ["torch.sum", "torch.sum", "prediction.size", "error.sum.mean", "error.sum.sum"], "function", ["None"], ["", "def", "reconstruction_loss", "(", "prediction", ",", "target", ",", "size_average", "=", "False", ")", ":", "\n", "    ", "error", "=", "(", "prediction", "-", "target", ")", ".", "view", "(", "prediction", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "error", "=", "error", "**", "2", "\n", "error", "=", "torch", ".", "sum", "(", "error", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "error", "=", "error", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "error", "=", "error", ".", "sum", "(", ")", "\n", "", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.load_model": [[34, 44], ["torch.load", "torch.load", "weights[].state_dict", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "weights[].state_dict.items"], "function", ["home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.AverageMeter.update"], ["", "def", "load_model", "(", "model", ",", "pretrained", ")", ":", "\n", "    ", "weights", "=", "torch", ".", "load", "(", "pretrained", ")", "\n", "pretrained_dict", "=", "weights", "[", "'model'", "]", ".", "state_dict", "(", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# 1. filter out unnecessary keys", "\n", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "# 2. overwrite entries in the existing state dict", "\n", "model_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "# 3. load the new state dict", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.save_checkpoint": [[45, 52], ["torch.save", "torch.save", "print", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "save_checkpoint", "(", "model", ",", "epoch", ",", "iteration", ",", "name", ")", ":", "\n", "    ", "model_out_path", "=", "\"model/\"", "+", "name", "+", "\"model_epoch_{}_iter_{}.pth\"", ".", "format", "(", "epoch", ",", "iteration", ")", "\n", "state", "=", "{", "\"epoch\"", ":", "epoch", ",", "\"model\"", ":", "model", "}", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"model/\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"model/\"", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "model_out_path", ")", "\n", "print", "(", "\"Checkpoint saved to {}\"", ".", "format", "(", "model_out_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.MMD_Loss": [[71, 76], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mse_loss"], "function", ["None"], ["", "", "def", "MMD_Loss", "(", "fc_nir", ",", "fc_vis", ")", ":", "\n", "    ", "mean_fc_nir", "=", "torch", ".", "mean", "(", "fc_nir", ",", "0", ")", "\n", "mean_fc_vis", "=", "torch", ".", "mean", "(", "fc_vis", ",", "0", ")", "\n", "loss_mmd", "=", "F", ".", "mse_loss", "(", "mean_fc_nir", ",", "mean_fc_vis", ")", "\n", "return", "loss_mmd", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.adjust_learning_rate": [[77, 85], ["print", "print"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "lr", ",", "step", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "scale", "=", "0.457305051927326", "\n", "lr", "=", "lr", "*", "(", "scale", "**", "(", "epoch", "//", "step", ")", ")", "\n", "print", "(", "'lr: {}'", ".", "format", "(", "lr", ")", ")", "\n", "if", "(", "epoch", "!=", "0", ")", "&", "(", "epoch", "%", "step", "==", "0", ")", ":", "\n", "        ", "print", "(", "'Change lr'", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "param_group", "[", "'lr'", "]", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.BradyFU_DVG.misc.util.accuracy": [[86, 100], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "", ""]]}